
BMS_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c70  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08009d30  08009d30  0000ad30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f48  08009f48  0000b060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009f48  08009f48  0000b060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009f48  08009f48  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f48  08009f48  0000af48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f4c  08009f4c  0000af4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009f50  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d6c  20000060  08009fb0  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dcc  08009fb0  0000bdcc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001910a  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003764  00000000  00000000  00024192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  000278f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001095  00000000  00000000  00028ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000043e6  00000000  00000000  00029f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000182ba  00000000  00000000  0002e31b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c84b9  00000000  00000000  000465d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ea8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000551c  00000000  00000000  0010ead4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00113ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009d18 	.word	0x08009d18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08009d18 	.word	0x08009d18

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fbe1 	bl	80009f0 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 fb69 	bl	8000910 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fbd3 	bl	80009f0 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fbc9 	bl	80009f0 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fb77 	bl	8000960 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fb6d 	bl	8000960 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__aeabi_f2uiz>:
 8000294:	219e      	movs	r1, #158	@ 0x9e
 8000296:	b510      	push	{r4, lr}
 8000298:	05c9      	lsls	r1, r1, #23
 800029a:	1c04      	adds	r4, r0, #0
 800029c:	f7ff fff0 	bl	8000280 <__aeabi_fcmpge>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d103      	bne.n	80002ac <__aeabi_f2uiz+0x18>
 80002a4:	1c20      	adds	r0, r4, #0
 80002a6:	f000 ffa9 	bl	80011fc <__aeabi_f2iz>
 80002aa:	bd10      	pop	{r4, pc}
 80002ac:	219e      	movs	r1, #158	@ 0x9e
 80002ae:	1c20      	adds	r0, r4, #0
 80002b0:	05c9      	lsls	r1, r1, #23
 80002b2:	f000 fd3f 	bl	8000d34 <__aeabi_fsub>
 80002b6:	f000 ffa1 	bl	80011fc <__aeabi_f2iz>
 80002ba:	2380      	movs	r3, #128	@ 0x80
 80002bc:	061b      	lsls	r3, r3, #24
 80002be:	469c      	mov	ip, r3
 80002c0:	4460      	add	r0, ip
 80002c2:	e7f2      	b.n	80002aa <__aeabi_f2uiz+0x16>

080002c4 <__aeabi_d2uiz>:
 80002c4:	b570      	push	{r4, r5, r6, lr}
 80002c6:	2200      	movs	r2, #0
 80002c8:	4b0c      	ldr	r3, [pc, #48]	@ (80002fc <__aeabi_d2uiz+0x38>)
 80002ca:	0004      	movs	r4, r0
 80002cc:	000d      	movs	r5, r1
 80002ce:	f002 fc9b 	bl	8002c08 <__aeabi_dcmpge>
 80002d2:	2800      	cmp	r0, #0
 80002d4:	d104      	bne.n	80002e0 <__aeabi_d2uiz+0x1c>
 80002d6:	0020      	movs	r0, r4
 80002d8:	0029      	movs	r1, r5
 80002da:	f002 fb2d 	bl	8002938 <__aeabi_d2iz>
 80002de:	bd70      	pop	{r4, r5, r6, pc}
 80002e0:	4b06      	ldr	r3, [pc, #24]	@ (80002fc <__aeabi_d2uiz+0x38>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	0020      	movs	r0, r4
 80002e6:	0029      	movs	r1, r5
 80002e8:	f001 ff1c 	bl	8002124 <__aeabi_dsub>
 80002ec:	f002 fb24 	bl	8002938 <__aeabi_d2iz>
 80002f0:	2380      	movs	r3, #128	@ 0x80
 80002f2:	061b      	lsls	r3, r3, #24
 80002f4:	469c      	mov	ip, r3
 80002f6:	4460      	add	r0, ip
 80002f8:	e7f1      	b.n	80002de <__aeabi_d2uiz+0x1a>
 80002fa:	46c0      	nop			@ (mov r8, r8)
 80002fc:	41e00000 	.word	0x41e00000

08000300 <__aeabi_fadd>:
 8000300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000302:	024b      	lsls	r3, r1, #9
 8000304:	0a5a      	lsrs	r2, r3, #9
 8000306:	4694      	mov	ip, r2
 8000308:	004a      	lsls	r2, r1, #1
 800030a:	0fc9      	lsrs	r1, r1, #31
 800030c:	46ce      	mov	lr, r9
 800030e:	4647      	mov	r7, r8
 8000310:	4689      	mov	r9, r1
 8000312:	0045      	lsls	r5, r0, #1
 8000314:	0246      	lsls	r6, r0, #9
 8000316:	0e2d      	lsrs	r5, r5, #24
 8000318:	0e12      	lsrs	r2, r2, #24
 800031a:	b580      	push	{r7, lr}
 800031c:	0999      	lsrs	r1, r3, #6
 800031e:	0a77      	lsrs	r7, r6, #9
 8000320:	0fc4      	lsrs	r4, r0, #31
 8000322:	09b6      	lsrs	r6, r6, #6
 8000324:	1aab      	subs	r3, r5, r2
 8000326:	454c      	cmp	r4, r9
 8000328:	d020      	beq.n	800036c <__aeabi_fadd+0x6c>
 800032a:	2b00      	cmp	r3, #0
 800032c:	dd0c      	ble.n	8000348 <__aeabi_fadd+0x48>
 800032e:	2a00      	cmp	r2, #0
 8000330:	d134      	bne.n	800039c <__aeabi_fadd+0x9c>
 8000332:	2900      	cmp	r1, #0
 8000334:	d02a      	beq.n	800038c <__aeabi_fadd+0x8c>
 8000336:	1e5a      	subs	r2, r3, #1
 8000338:	2b01      	cmp	r3, #1
 800033a:	d100      	bne.n	800033e <__aeabi_fadd+0x3e>
 800033c:	e08f      	b.n	800045e <__aeabi_fadd+0x15e>
 800033e:	2bff      	cmp	r3, #255	@ 0xff
 8000340:	d100      	bne.n	8000344 <__aeabi_fadd+0x44>
 8000342:	e0cd      	b.n	80004e0 <__aeabi_fadd+0x1e0>
 8000344:	0013      	movs	r3, r2
 8000346:	e02f      	b.n	80003a8 <__aeabi_fadd+0xa8>
 8000348:	2b00      	cmp	r3, #0
 800034a:	d060      	beq.n	800040e <__aeabi_fadd+0x10e>
 800034c:	1b53      	subs	r3, r2, r5
 800034e:	2d00      	cmp	r5, #0
 8000350:	d000      	beq.n	8000354 <__aeabi_fadd+0x54>
 8000352:	e0ee      	b.n	8000532 <__aeabi_fadd+0x232>
 8000354:	2e00      	cmp	r6, #0
 8000356:	d100      	bne.n	800035a <__aeabi_fadd+0x5a>
 8000358:	e13e      	b.n	80005d8 <__aeabi_fadd+0x2d8>
 800035a:	1e5c      	subs	r4, r3, #1
 800035c:	2b01      	cmp	r3, #1
 800035e:	d100      	bne.n	8000362 <__aeabi_fadd+0x62>
 8000360:	e16b      	b.n	800063a <__aeabi_fadd+0x33a>
 8000362:	2bff      	cmp	r3, #255	@ 0xff
 8000364:	d100      	bne.n	8000368 <__aeabi_fadd+0x68>
 8000366:	e0b9      	b.n	80004dc <__aeabi_fadd+0x1dc>
 8000368:	0023      	movs	r3, r4
 800036a:	e0e7      	b.n	800053c <__aeabi_fadd+0x23c>
 800036c:	2b00      	cmp	r3, #0
 800036e:	dc00      	bgt.n	8000372 <__aeabi_fadd+0x72>
 8000370:	e0a4      	b.n	80004bc <__aeabi_fadd+0x1bc>
 8000372:	2a00      	cmp	r2, #0
 8000374:	d069      	beq.n	800044a <__aeabi_fadd+0x14a>
 8000376:	2dff      	cmp	r5, #255	@ 0xff
 8000378:	d100      	bne.n	800037c <__aeabi_fadd+0x7c>
 800037a:	e0b1      	b.n	80004e0 <__aeabi_fadd+0x1e0>
 800037c:	2280      	movs	r2, #128	@ 0x80
 800037e:	04d2      	lsls	r2, r2, #19
 8000380:	4311      	orrs	r1, r2
 8000382:	2b1b      	cmp	r3, #27
 8000384:	dc00      	bgt.n	8000388 <__aeabi_fadd+0x88>
 8000386:	e0e9      	b.n	800055c <__aeabi_fadd+0x25c>
 8000388:	002b      	movs	r3, r5
 800038a:	3605      	adds	r6, #5
 800038c:	08f7      	lsrs	r7, r6, #3
 800038e:	2bff      	cmp	r3, #255	@ 0xff
 8000390:	d100      	bne.n	8000394 <__aeabi_fadd+0x94>
 8000392:	e0a5      	b.n	80004e0 <__aeabi_fadd+0x1e0>
 8000394:	027a      	lsls	r2, r7, #9
 8000396:	0a52      	lsrs	r2, r2, #9
 8000398:	b2d8      	uxtb	r0, r3
 800039a:	e030      	b.n	80003fe <__aeabi_fadd+0xfe>
 800039c:	2dff      	cmp	r5, #255	@ 0xff
 800039e:	d100      	bne.n	80003a2 <__aeabi_fadd+0xa2>
 80003a0:	e09e      	b.n	80004e0 <__aeabi_fadd+0x1e0>
 80003a2:	2280      	movs	r2, #128	@ 0x80
 80003a4:	04d2      	lsls	r2, r2, #19
 80003a6:	4311      	orrs	r1, r2
 80003a8:	2001      	movs	r0, #1
 80003aa:	2b1b      	cmp	r3, #27
 80003ac:	dc08      	bgt.n	80003c0 <__aeabi_fadd+0xc0>
 80003ae:	0008      	movs	r0, r1
 80003b0:	2220      	movs	r2, #32
 80003b2:	40d8      	lsrs	r0, r3
 80003b4:	1ad3      	subs	r3, r2, r3
 80003b6:	4099      	lsls	r1, r3
 80003b8:	000b      	movs	r3, r1
 80003ba:	1e5a      	subs	r2, r3, #1
 80003bc:	4193      	sbcs	r3, r2
 80003be:	4318      	orrs	r0, r3
 80003c0:	1a36      	subs	r6, r6, r0
 80003c2:	0173      	lsls	r3, r6, #5
 80003c4:	d400      	bmi.n	80003c8 <__aeabi_fadd+0xc8>
 80003c6:	e071      	b.n	80004ac <__aeabi_fadd+0x1ac>
 80003c8:	01b6      	lsls	r6, r6, #6
 80003ca:	09b7      	lsrs	r7, r6, #6
 80003cc:	0038      	movs	r0, r7
 80003ce:	f002 fc25 	bl	8002c1c <__clzsi2>
 80003d2:	003b      	movs	r3, r7
 80003d4:	3805      	subs	r0, #5
 80003d6:	4083      	lsls	r3, r0
 80003d8:	4285      	cmp	r5, r0
 80003da:	dd4d      	ble.n	8000478 <__aeabi_fadd+0x178>
 80003dc:	4eb4      	ldr	r6, [pc, #720]	@ (80006b0 <__aeabi_fadd+0x3b0>)
 80003de:	1a2d      	subs	r5, r5, r0
 80003e0:	401e      	ands	r6, r3
 80003e2:	075a      	lsls	r2, r3, #29
 80003e4:	d068      	beq.n	80004b8 <__aeabi_fadd+0x1b8>
 80003e6:	220f      	movs	r2, #15
 80003e8:	4013      	ands	r3, r2
 80003ea:	2b04      	cmp	r3, #4
 80003ec:	d064      	beq.n	80004b8 <__aeabi_fadd+0x1b8>
 80003ee:	3604      	adds	r6, #4
 80003f0:	0173      	lsls	r3, r6, #5
 80003f2:	d561      	bpl.n	80004b8 <__aeabi_fadd+0x1b8>
 80003f4:	1c68      	adds	r0, r5, #1
 80003f6:	2dfe      	cmp	r5, #254	@ 0xfe
 80003f8:	d154      	bne.n	80004a4 <__aeabi_fadd+0x1a4>
 80003fa:	20ff      	movs	r0, #255	@ 0xff
 80003fc:	2200      	movs	r2, #0
 80003fe:	05c0      	lsls	r0, r0, #23
 8000400:	4310      	orrs	r0, r2
 8000402:	07e4      	lsls	r4, r4, #31
 8000404:	4320      	orrs	r0, r4
 8000406:	bcc0      	pop	{r6, r7}
 8000408:	46b9      	mov	r9, r7
 800040a:	46b0      	mov	r8, r6
 800040c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800040e:	22fe      	movs	r2, #254	@ 0xfe
 8000410:	4690      	mov	r8, r2
 8000412:	1c68      	adds	r0, r5, #1
 8000414:	0002      	movs	r2, r0
 8000416:	4640      	mov	r0, r8
 8000418:	4210      	tst	r0, r2
 800041a:	d16b      	bne.n	80004f4 <__aeabi_fadd+0x1f4>
 800041c:	2d00      	cmp	r5, #0
 800041e:	d000      	beq.n	8000422 <__aeabi_fadd+0x122>
 8000420:	e0dd      	b.n	80005de <__aeabi_fadd+0x2de>
 8000422:	2e00      	cmp	r6, #0
 8000424:	d100      	bne.n	8000428 <__aeabi_fadd+0x128>
 8000426:	e102      	b.n	800062e <__aeabi_fadd+0x32e>
 8000428:	2900      	cmp	r1, #0
 800042a:	d0b3      	beq.n	8000394 <__aeabi_fadd+0x94>
 800042c:	2280      	movs	r2, #128	@ 0x80
 800042e:	1a77      	subs	r7, r6, r1
 8000430:	04d2      	lsls	r2, r2, #19
 8000432:	4217      	tst	r7, r2
 8000434:	d100      	bne.n	8000438 <__aeabi_fadd+0x138>
 8000436:	e136      	b.n	80006a6 <__aeabi_fadd+0x3a6>
 8000438:	464c      	mov	r4, r9
 800043a:	1b8e      	subs	r6, r1, r6
 800043c:	d061      	beq.n	8000502 <__aeabi_fadd+0x202>
 800043e:	2001      	movs	r0, #1
 8000440:	4216      	tst	r6, r2
 8000442:	d130      	bne.n	80004a6 <__aeabi_fadd+0x1a6>
 8000444:	2300      	movs	r3, #0
 8000446:	08f7      	lsrs	r7, r6, #3
 8000448:	e7a4      	b.n	8000394 <__aeabi_fadd+0x94>
 800044a:	2900      	cmp	r1, #0
 800044c:	d09e      	beq.n	800038c <__aeabi_fadd+0x8c>
 800044e:	1e5a      	subs	r2, r3, #1
 8000450:	2b01      	cmp	r3, #1
 8000452:	d100      	bne.n	8000456 <__aeabi_fadd+0x156>
 8000454:	e0ca      	b.n	80005ec <__aeabi_fadd+0x2ec>
 8000456:	2bff      	cmp	r3, #255	@ 0xff
 8000458:	d042      	beq.n	80004e0 <__aeabi_fadd+0x1e0>
 800045a:	0013      	movs	r3, r2
 800045c:	e791      	b.n	8000382 <__aeabi_fadd+0x82>
 800045e:	1a71      	subs	r1, r6, r1
 8000460:	014b      	lsls	r3, r1, #5
 8000462:	d400      	bmi.n	8000466 <__aeabi_fadd+0x166>
 8000464:	e0d1      	b.n	800060a <__aeabi_fadd+0x30a>
 8000466:	018f      	lsls	r7, r1, #6
 8000468:	09bf      	lsrs	r7, r7, #6
 800046a:	0038      	movs	r0, r7
 800046c:	f002 fbd6 	bl	8002c1c <__clzsi2>
 8000470:	003b      	movs	r3, r7
 8000472:	3805      	subs	r0, #5
 8000474:	4083      	lsls	r3, r0
 8000476:	2501      	movs	r5, #1
 8000478:	2220      	movs	r2, #32
 800047a:	1b40      	subs	r0, r0, r5
 800047c:	3001      	adds	r0, #1
 800047e:	1a12      	subs	r2, r2, r0
 8000480:	001e      	movs	r6, r3
 8000482:	4093      	lsls	r3, r2
 8000484:	40c6      	lsrs	r6, r0
 8000486:	1e5a      	subs	r2, r3, #1
 8000488:	4193      	sbcs	r3, r2
 800048a:	431e      	orrs	r6, r3
 800048c:	d039      	beq.n	8000502 <__aeabi_fadd+0x202>
 800048e:	0773      	lsls	r3, r6, #29
 8000490:	d100      	bne.n	8000494 <__aeabi_fadd+0x194>
 8000492:	e11b      	b.n	80006cc <__aeabi_fadd+0x3cc>
 8000494:	230f      	movs	r3, #15
 8000496:	2500      	movs	r5, #0
 8000498:	4033      	ands	r3, r6
 800049a:	2b04      	cmp	r3, #4
 800049c:	d1a7      	bne.n	80003ee <__aeabi_fadd+0xee>
 800049e:	2001      	movs	r0, #1
 80004a0:	0172      	lsls	r2, r6, #5
 80004a2:	d57c      	bpl.n	800059e <__aeabi_fadd+0x29e>
 80004a4:	b2c0      	uxtb	r0, r0
 80004a6:	01b2      	lsls	r2, r6, #6
 80004a8:	0a52      	lsrs	r2, r2, #9
 80004aa:	e7a8      	b.n	80003fe <__aeabi_fadd+0xfe>
 80004ac:	0773      	lsls	r3, r6, #29
 80004ae:	d003      	beq.n	80004b8 <__aeabi_fadd+0x1b8>
 80004b0:	230f      	movs	r3, #15
 80004b2:	4033      	ands	r3, r6
 80004b4:	2b04      	cmp	r3, #4
 80004b6:	d19a      	bne.n	80003ee <__aeabi_fadd+0xee>
 80004b8:	002b      	movs	r3, r5
 80004ba:	e767      	b.n	800038c <__aeabi_fadd+0x8c>
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d023      	beq.n	8000508 <__aeabi_fadd+0x208>
 80004c0:	1b53      	subs	r3, r2, r5
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d17b      	bne.n	80005be <__aeabi_fadd+0x2be>
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	d100      	bne.n	80004cc <__aeabi_fadd+0x1cc>
 80004ca:	e086      	b.n	80005da <__aeabi_fadd+0x2da>
 80004cc:	1e5d      	subs	r5, r3, #1
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d100      	bne.n	80004d4 <__aeabi_fadd+0x1d4>
 80004d2:	e08b      	b.n	80005ec <__aeabi_fadd+0x2ec>
 80004d4:	2bff      	cmp	r3, #255	@ 0xff
 80004d6:	d002      	beq.n	80004de <__aeabi_fadd+0x1de>
 80004d8:	002b      	movs	r3, r5
 80004da:	e075      	b.n	80005c8 <__aeabi_fadd+0x2c8>
 80004dc:	464c      	mov	r4, r9
 80004de:	4667      	mov	r7, ip
 80004e0:	2f00      	cmp	r7, #0
 80004e2:	d100      	bne.n	80004e6 <__aeabi_fadd+0x1e6>
 80004e4:	e789      	b.n	80003fa <__aeabi_fadd+0xfa>
 80004e6:	2280      	movs	r2, #128	@ 0x80
 80004e8:	03d2      	lsls	r2, r2, #15
 80004ea:	433a      	orrs	r2, r7
 80004ec:	0252      	lsls	r2, r2, #9
 80004ee:	20ff      	movs	r0, #255	@ 0xff
 80004f0:	0a52      	lsrs	r2, r2, #9
 80004f2:	e784      	b.n	80003fe <__aeabi_fadd+0xfe>
 80004f4:	1a77      	subs	r7, r6, r1
 80004f6:	017b      	lsls	r3, r7, #5
 80004f8:	d46b      	bmi.n	80005d2 <__aeabi_fadd+0x2d2>
 80004fa:	2f00      	cmp	r7, #0
 80004fc:	d000      	beq.n	8000500 <__aeabi_fadd+0x200>
 80004fe:	e765      	b.n	80003cc <__aeabi_fadd+0xcc>
 8000500:	2400      	movs	r4, #0
 8000502:	2000      	movs	r0, #0
 8000504:	2200      	movs	r2, #0
 8000506:	e77a      	b.n	80003fe <__aeabi_fadd+0xfe>
 8000508:	22fe      	movs	r2, #254	@ 0xfe
 800050a:	1c6b      	adds	r3, r5, #1
 800050c:	421a      	tst	r2, r3
 800050e:	d149      	bne.n	80005a4 <__aeabi_fadd+0x2a4>
 8000510:	2d00      	cmp	r5, #0
 8000512:	d000      	beq.n	8000516 <__aeabi_fadd+0x216>
 8000514:	e09f      	b.n	8000656 <__aeabi_fadd+0x356>
 8000516:	2e00      	cmp	r6, #0
 8000518:	d100      	bne.n	800051c <__aeabi_fadd+0x21c>
 800051a:	e0ba      	b.n	8000692 <__aeabi_fadd+0x392>
 800051c:	2900      	cmp	r1, #0
 800051e:	d100      	bne.n	8000522 <__aeabi_fadd+0x222>
 8000520:	e0cf      	b.n	80006c2 <__aeabi_fadd+0x3c2>
 8000522:	1872      	adds	r2, r6, r1
 8000524:	0153      	lsls	r3, r2, #5
 8000526:	d400      	bmi.n	800052a <__aeabi_fadd+0x22a>
 8000528:	e0cd      	b.n	80006c6 <__aeabi_fadd+0x3c6>
 800052a:	0192      	lsls	r2, r2, #6
 800052c:	2001      	movs	r0, #1
 800052e:	0a52      	lsrs	r2, r2, #9
 8000530:	e765      	b.n	80003fe <__aeabi_fadd+0xfe>
 8000532:	2aff      	cmp	r2, #255	@ 0xff
 8000534:	d0d2      	beq.n	80004dc <__aeabi_fadd+0x1dc>
 8000536:	2080      	movs	r0, #128	@ 0x80
 8000538:	04c0      	lsls	r0, r0, #19
 800053a:	4306      	orrs	r6, r0
 800053c:	2001      	movs	r0, #1
 800053e:	2b1b      	cmp	r3, #27
 8000540:	dc08      	bgt.n	8000554 <__aeabi_fadd+0x254>
 8000542:	0030      	movs	r0, r6
 8000544:	2420      	movs	r4, #32
 8000546:	40d8      	lsrs	r0, r3
 8000548:	1ae3      	subs	r3, r4, r3
 800054a:	409e      	lsls	r6, r3
 800054c:	0033      	movs	r3, r6
 800054e:	1e5c      	subs	r4, r3, #1
 8000550:	41a3      	sbcs	r3, r4
 8000552:	4318      	orrs	r0, r3
 8000554:	464c      	mov	r4, r9
 8000556:	0015      	movs	r5, r2
 8000558:	1a0e      	subs	r6, r1, r0
 800055a:	e732      	b.n	80003c2 <__aeabi_fadd+0xc2>
 800055c:	0008      	movs	r0, r1
 800055e:	2220      	movs	r2, #32
 8000560:	40d8      	lsrs	r0, r3
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	4099      	lsls	r1, r3
 8000566:	000b      	movs	r3, r1
 8000568:	1e5a      	subs	r2, r3, #1
 800056a:	4193      	sbcs	r3, r2
 800056c:	4303      	orrs	r3, r0
 800056e:	18f6      	adds	r6, r6, r3
 8000570:	0173      	lsls	r3, r6, #5
 8000572:	d59b      	bpl.n	80004ac <__aeabi_fadd+0x1ac>
 8000574:	3501      	adds	r5, #1
 8000576:	2dff      	cmp	r5, #255	@ 0xff
 8000578:	d100      	bne.n	800057c <__aeabi_fadd+0x27c>
 800057a:	e73e      	b.n	80003fa <__aeabi_fadd+0xfa>
 800057c:	2301      	movs	r3, #1
 800057e:	494d      	ldr	r1, [pc, #308]	@ (80006b4 <__aeabi_fadd+0x3b4>)
 8000580:	0872      	lsrs	r2, r6, #1
 8000582:	4033      	ands	r3, r6
 8000584:	400a      	ands	r2, r1
 8000586:	431a      	orrs	r2, r3
 8000588:	0016      	movs	r6, r2
 800058a:	0753      	lsls	r3, r2, #29
 800058c:	d004      	beq.n	8000598 <__aeabi_fadd+0x298>
 800058e:	230f      	movs	r3, #15
 8000590:	4013      	ands	r3, r2
 8000592:	2b04      	cmp	r3, #4
 8000594:	d000      	beq.n	8000598 <__aeabi_fadd+0x298>
 8000596:	e72a      	b.n	80003ee <__aeabi_fadd+0xee>
 8000598:	0173      	lsls	r3, r6, #5
 800059a:	d500      	bpl.n	800059e <__aeabi_fadd+0x29e>
 800059c:	e72a      	b.n	80003f4 <__aeabi_fadd+0xf4>
 800059e:	002b      	movs	r3, r5
 80005a0:	08f7      	lsrs	r7, r6, #3
 80005a2:	e6f7      	b.n	8000394 <__aeabi_fadd+0x94>
 80005a4:	2bff      	cmp	r3, #255	@ 0xff
 80005a6:	d100      	bne.n	80005aa <__aeabi_fadd+0x2aa>
 80005a8:	e727      	b.n	80003fa <__aeabi_fadd+0xfa>
 80005aa:	1871      	adds	r1, r6, r1
 80005ac:	0849      	lsrs	r1, r1, #1
 80005ae:	074a      	lsls	r2, r1, #29
 80005b0:	d02f      	beq.n	8000612 <__aeabi_fadd+0x312>
 80005b2:	220f      	movs	r2, #15
 80005b4:	400a      	ands	r2, r1
 80005b6:	2a04      	cmp	r2, #4
 80005b8:	d02b      	beq.n	8000612 <__aeabi_fadd+0x312>
 80005ba:	1d0e      	adds	r6, r1, #4
 80005bc:	e6e6      	b.n	800038c <__aeabi_fadd+0x8c>
 80005be:	2aff      	cmp	r2, #255	@ 0xff
 80005c0:	d08d      	beq.n	80004de <__aeabi_fadd+0x1de>
 80005c2:	2080      	movs	r0, #128	@ 0x80
 80005c4:	04c0      	lsls	r0, r0, #19
 80005c6:	4306      	orrs	r6, r0
 80005c8:	2b1b      	cmp	r3, #27
 80005ca:	dd24      	ble.n	8000616 <__aeabi_fadd+0x316>
 80005cc:	0013      	movs	r3, r2
 80005ce:	1d4e      	adds	r6, r1, #5
 80005d0:	e6dc      	b.n	800038c <__aeabi_fadd+0x8c>
 80005d2:	464c      	mov	r4, r9
 80005d4:	1b8f      	subs	r7, r1, r6
 80005d6:	e6f9      	b.n	80003cc <__aeabi_fadd+0xcc>
 80005d8:	464c      	mov	r4, r9
 80005da:	000e      	movs	r6, r1
 80005dc:	e6d6      	b.n	800038c <__aeabi_fadd+0x8c>
 80005de:	2e00      	cmp	r6, #0
 80005e0:	d149      	bne.n	8000676 <__aeabi_fadd+0x376>
 80005e2:	2900      	cmp	r1, #0
 80005e4:	d068      	beq.n	80006b8 <__aeabi_fadd+0x3b8>
 80005e6:	4667      	mov	r7, ip
 80005e8:	464c      	mov	r4, r9
 80005ea:	e77c      	b.n	80004e6 <__aeabi_fadd+0x1e6>
 80005ec:	1870      	adds	r0, r6, r1
 80005ee:	0143      	lsls	r3, r0, #5
 80005f0:	d574      	bpl.n	80006dc <__aeabi_fadd+0x3dc>
 80005f2:	4930      	ldr	r1, [pc, #192]	@ (80006b4 <__aeabi_fadd+0x3b4>)
 80005f4:	0840      	lsrs	r0, r0, #1
 80005f6:	4001      	ands	r1, r0
 80005f8:	0743      	lsls	r3, r0, #29
 80005fa:	d009      	beq.n	8000610 <__aeabi_fadd+0x310>
 80005fc:	230f      	movs	r3, #15
 80005fe:	4003      	ands	r3, r0
 8000600:	2b04      	cmp	r3, #4
 8000602:	d005      	beq.n	8000610 <__aeabi_fadd+0x310>
 8000604:	2302      	movs	r3, #2
 8000606:	1d0e      	adds	r6, r1, #4
 8000608:	e6c0      	b.n	800038c <__aeabi_fadd+0x8c>
 800060a:	2301      	movs	r3, #1
 800060c:	08cf      	lsrs	r7, r1, #3
 800060e:	e6c1      	b.n	8000394 <__aeabi_fadd+0x94>
 8000610:	2302      	movs	r3, #2
 8000612:	08cf      	lsrs	r7, r1, #3
 8000614:	e6be      	b.n	8000394 <__aeabi_fadd+0x94>
 8000616:	2520      	movs	r5, #32
 8000618:	0030      	movs	r0, r6
 800061a:	40d8      	lsrs	r0, r3
 800061c:	1aeb      	subs	r3, r5, r3
 800061e:	409e      	lsls	r6, r3
 8000620:	0033      	movs	r3, r6
 8000622:	1e5d      	subs	r5, r3, #1
 8000624:	41ab      	sbcs	r3, r5
 8000626:	4303      	orrs	r3, r0
 8000628:	0015      	movs	r5, r2
 800062a:	185e      	adds	r6, r3, r1
 800062c:	e7a0      	b.n	8000570 <__aeabi_fadd+0x270>
 800062e:	2900      	cmp	r1, #0
 8000630:	d100      	bne.n	8000634 <__aeabi_fadd+0x334>
 8000632:	e765      	b.n	8000500 <__aeabi_fadd+0x200>
 8000634:	464c      	mov	r4, r9
 8000636:	4667      	mov	r7, ip
 8000638:	e6ac      	b.n	8000394 <__aeabi_fadd+0x94>
 800063a:	1b8f      	subs	r7, r1, r6
 800063c:	017b      	lsls	r3, r7, #5
 800063e:	d52e      	bpl.n	800069e <__aeabi_fadd+0x39e>
 8000640:	01bf      	lsls	r7, r7, #6
 8000642:	09bf      	lsrs	r7, r7, #6
 8000644:	0038      	movs	r0, r7
 8000646:	f002 fae9 	bl	8002c1c <__clzsi2>
 800064a:	003b      	movs	r3, r7
 800064c:	3805      	subs	r0, #5
 800064e:	4083      	lsls	r3, r0
 8000650:	464c      	mov	r4, r9
 8000652:	3501      	adds	r5, #1
 8000654:	e710      	b.n	8000478 <__aeabi_fadd+0x178>
 8000656:	2e00      	cmp	r6, #0
 8000658:	d100      	bne.n	800065c <__aeabi_fadd+0x35c>
 800065a:	e740      	b.n	80004de <__aeabi_fadd+0x1de>
 800065c:	2900      	cmp	r1, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_fadd+0x362>
 8000660:	e741      	b.n	80004e6 <__aeabi_fadd+0x1e6>
 8000662:	2380      	movs	r3, #128	@ 0x80
 8000664:	03db      	lsls	r3, r3, #15
 8000666:	429f      	cmp	r7, r3
 8000668:	d200      	bcs.n	800066c <__aeabi_fadd+0x36c>
 800066a:	e73c      	b.n	80004e6 <__aeabi_fadd+0x1e6>
 800066c:	459c      	cmp	ip, r3
 800066e:	d300      	bcc.n	8000672 <__aeabi_fadd+0x372>
 8000670:	e739      	b.n	80004e6 <__aeabi_fadd+0x1e6>
 8000672:	4667      	mov	r7, ip
 8000674:	e737      	b.n	80004e6 <__aeabi_fadd+0x1e6>
 8000676:	2900      	cmp	r1, #0
 8000678:	d100      	bne.n	800067c <__aeabi_fadd+0x37c>
 800067a:	e734      	b.n	80004e6 <__aeabi_fadd+0x1e6>
 800067c:	2380      	movs	r3, #128	@ 0x80
 800067e:	03db      	lsls	r3, r3, #15
 8000680:	429f      	cmp	r7, r3
 8000682:	d200      	bcs.n	8000686 <__aeabi_fadd+0x386>
 8000684:	e72f      	b.n	80004e6 <__aeabi_fadd+0x1e6>
 8000686:	459c      	cmp	ip, r3
 8000688:	d300      	bcc.n	800068c <__aeabi_fadd+0x38c>
 800068a:	e72c      	b.n	80004e6 <__aeabi_fadd+0x1e6>
 800068c:	464c      	mov	r4, r9
 800068e:	4667      	mov	r7, ip
 8000690:	e729      	b.n	80004e6 <__aeabi_fadd+0x1e6>
 8000692:	2900      	cmp	r1, #0
 8000694:	d100      	bne.n	8000698 <__aeabi_fadd+0x398>
 8000696:	e734      	b.n	8000502 <__aeabi_fadd+0x202>
 8000698:	2300      	movs	r3, #0
 800069a:	08cf      	lsrs	r7, r1, #3
 800069c:	e67a      	b.n	8000394 <__aeabi_fadd+0x94>
 800069e:	464c      	mov	r4, r9
 80006a0:	2301      	movs	r3, #1
 80006a2:	08ff      	lsrs	r7, r7, #3
 80006a4:	e676      	b.n	8000394 <__aeabi_fadd+0x94>
 80006a6:	2f00      	cmp	r7, #0
 80006a8:	d100      	bne.n	80006ac <__aeabi_fadd+0x3ac>
 80006aa:	e729      	b.n	8000500 <__aeabi_fadd+0x200>
 80006ac:	08ff      	lsrs	r7, r7, #3
 80006ae:	e671      	b.n	8000394 <__aeabi_fadd+0x94>
 80006b0:	fbffffff 	.word	0xfbffffff
 80006b4:	7dffffff 	.word	0x7dffffff
 80006b8:	2280      	movs	r2, #128	@ 0x80
 80006ba:	2400      	movs	r4, #0
 80006bc:	20ff      	movs	r0, #255	@ 0xff
 80006be:	03d2      	lsls	r2, r2, #15
 80006c0:	e69d      	b.n	80003fe <__aeabi_fadd+0xfe>
 80006c2:	2300      	movs	r3, #0
 80006c4:	e666      	b.n	8000394 <__aeabi_fadd+0x94>
 80006c6:	2300      	movs	r3, #0
 80006c8:	08d7      	lsrs	r7, r2, #3
 80006ca:	e663      	b.n	8000394 <__aeabi_fadd+0x94>
 80006cc:	2001      	movs	r0, #1
 80006ce:	0172      	lsls	r2, r6, #5
 80006d0:	d500      	bpl.n	80006d4 <__aeabi_fadd+0x3d4>
 80006d2:	e6e7      	b.n	80004a4 <__aeabi_fadd+0x1a4>
 80006d4:	0031      	movs	r1, r6
 80006d6:	2300      	movs	r3, #0
 80006d8:	08cf      	lsrs	r7, r1, #3
 80006da:	e65b      	b.n	8000394 <__aeabi_fadd+0x94>
 80006dc:	2301      	movs	r3, #1
 80006de:	08c7      	lsrs	r7, r0, #3
 80006e0:	e658      	b.n	8000394 <__aeabi_fadd+0x94>
 80006e2:	46c0      	nop			@ (mov r8, r8)

080006e4 <__aeabi_fdiv>:
 80006e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006e6:	4646      	mov	r6, r8
 80006e8:	464f      	mov	r7, r9
 80006ea:	46d6      	mov	lr, sl
 80006ec:	0245      	lsls	r5, r0, #9
 80006ee:	b5c0      	push	{r6, r7, lr}
 80006f0:	0fc3      	lsrs	r3, r0, #31
 80006f2:	0047      	lsls	r7, r0, #1
 80006f4:	4698      	mov	r8, r3
 80006f6:	1c0e      	adds	r6, r1, #0
 80006f8:	0a6d      	lsrs	r5, r5, #9
 80006fa:	0e3f      	lsrs	r7, r7, #24
 80006fc:	d05b      	beq.n	80007b6 <__aeabi_fdiv+0xd2>
 80006fe:	2fff      	cmp	r7, #255	@ 0xff
 8000700:	d021      	beq.n	8000746 <__aeabi_fdiv+0x62>
 8000702:	2380      	movs	r3, #128	@ 0x80
 8000704:	00ed      	lsls	r5, r5, #3
 8000706:	04db      	lsls	r3, r3, #19
 8000708:	431d      	orrs	r5, r3
 800070a:	2300      	movs	r3, #0
 800070c:	4699      	mov	r9, r3
 800070e:	469a      	mov	sl, r3
 8000710:	3f7f      	subs	r7, #127	@ 0x7f
 8000712:	0274      	lsls	r4, r6, #9
 8000714:	0073      	lsls	r3, r6, #1
 8000716:	0a64      	lsrs	r4, r4, #9
 8000718:	0e1b      	lsrs	r3, r3, #24
 800071a:	0ff6      	lsrs	r6, r6, #31
 800071c:	2b00      	cmp	r3, #0
 800071e:	d020      	beq.n	8000762 <__aeabi_fdiv+0x7e>
 8000720:	2bff      	cmp	r3, #255	@ 0xff
 8000722:	d043      	beq.n	80007ac <__aeabi_fdiv+0xc8>
 8000724:	2280      	movs	r2, #128	@ 0x80
 8000726:	2000      	movs	r0, #0
 8000728:	00e4      	lsls	r4, r4, #3
 800072a:	04d2      	lsls	r2, r2, #19
 800072c:	4314      	orrs	r4, r2
 800072e:	3b7f      	subs	r3, #127	@ 0x7f
 8000730:	4642      	mov	r2, r8
 8000732:	1aff      	subs	r7, r7, r3
 8000734:	464b      	mov	r3, r9
 8000736:	4072      	eors	r2, r6
 8000738:	2b0f      	cmp	r3, #15
 800073a:	d900      	bls.n	800073e <__aeabi_fdiv+0x5a>
 800073c:	e09d      	b.n	800087a <__aeabi_fdiv+0x196>
 800073e:	4971      	ldr	r1, [pc, #452]	@ (8000904 <__aeabi_fdiv+0x220>)
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	58cb      	ldr	r3, [r1, r3]
 8000744:	469f      	mov	pc, r3
 8000746:	2d00      	cmp	r5, #0
 8000748:	d15a      	bne.n	8000800 <__aeabi_fdiv+0x11c>
 800074a:	2308      	movs	r3, #8
 800074c:	4699      	mov	r9, r3
 800074e:	3b06      	subs	r3, #6
 8000750:	0274      	lsls	r4, r6, #9
 8000752:	469a      	mov	sl, r3
 8000754:	0073      	lsls	r3, r6, #1
 8000756:	27ff      	movs	r7, #255	@ 0xff
 8000758:	0a64      	lsrs	r4, r4, #9
 800075a:	0e1b      	lsrs	r3, r3, #24
 800075c:	0ff6      	lsrs	r6, r6, #31
 800075e:	2b00      	cmp	r3, #0
 8000760:	d1de      	bne.n	8000720 <__aeabi_fdiv+0x3c>
 8000762:	2c00      	cmp	r4, #0
 8000764:	d13b      	bne.n	80007de <__aeabi_fdiv+0xfa>
 8000766:	2301      	movs	r3, #1
 8000768:	4642      	mov	r2, r8
 800076a:	4649      	mov	r1, r9
 800076c:	4072      	eors	r2, r6
 800076e:	4319      	orrs	r1, r3
 8000770:	290e      	cmp	r1, #14
 8000772:	d818      	bhi.n	80007a6 <__aeabi_fdiv+0xc2>
 8000774:	4864      	ldr	r0, [pc, #400]	@ (8000908 <__aeabi_fdiv+0x224>)
 8000776:	0089      	lsls	r1, r1, #2
 8000778:	5841      	ldr	r1, [r0, r1]
 800077a:	468f      	mov	pc, r1
 800077c:	4653      	mov	r3, sl
 800077e:	2b02      	cmp	r3, #2
 8000780:	d100      	bne.n	8000784 <__aeabi_fdiv+0xa0>
 8000782:	e0b8      	b.n	80008f6 <__aeabi_fdiv+0x212>
 8000784:	2b03      	cmp	r3, #3
 8000786:	d06e      	beq.n	8000866 <__aeabi_fdiv+0x182>
 8000788:	4642      	mov	r2, r8
 800078a:	002c      	movs	r4, r5
 800078c:	2b01      	cmp	r3, #1
 800078e:	d140      	bne.n	8000812 <__aeabi_fdiv+0x12e>
 8000790:	2000      	movs	r0, #0
 8000792:	2400      	movs	r4, #0
 8000794:	05c0      	lsls	r0, r0, #23
 8000796:	4320      	orrs	r0, r4
 8000798:	07d2      	lsls	r2, r2, #31
 800079a:	4310      	orrs	r0, r2
 800079c:	bce0      	pop	{r5, r6, r7}
 800079e:	46ba      	mov	sl, r7
 80007a0:	46b1      	mov	r9, r6
 80007a2:	46a8      	mov	r8, r5
 80007a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a6:	20ff      	movs	r0, #255	@ 0xff
 80007a8:	2400      	movs	r4, #0
 80007aa:	e7f3      	b.n	8000794 <__aeabi_fdiv+0xb0>
 80007ac:	2c00      	cmp	r4, #0
 80007ae:	d120      	bne.n	80007f2 <__aeabi_fdiv+0x10e>
 80007b0:	2302      	movs	r3, #2
 80007b2:	3fff      	subs	r7, #255	@ 0xff
 80007b4:	e7d8      	b.n	8000768 <__aeabi_fdiv+0x84>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	d105      	bne.n	80007c6 <__aeabi_fdiv+0xe2>
 80007ba:	2304      	movs	r3, #4
 80007bc:	4699      	mov	r9, r3
 80007be:	3b03      	subs	r3, #3
 80007c0:	2700      	movs	r7, #0
 80007c2:	469a      	mov	sl, r3
 80007c4:	e7a5      	b.n	8000712 <__aeabi_fdiv+0x2e>
 80007c6:	0028      	movs	r0, r5
 80007c8:	f002 fa28 	bl	8002c1c <__clzsi2>
 80007cc:	2776      	movs	r7, #118	@ 0x76
 80007ce:	1f43      	subs	r3, r0, #5
 80007d0:	409d      	lsls	r5, r3
 80007d2:	2300      	movs	r3, #0
 80007d4:	427f      	negs	r7, r7
 80007d6:	4699      	mov	r9, r3
 80007d8:	469a      	mov	sl, r3
 80007da:	1a3f      	subs	r7, r7, r0
 80007dc:	e799      	b.n	8000712 <__aeabi_fdiv+0x2e>
 80007de:	0020      	movs	r0, r4
 80007e0:	f002 fa1c 	bl	8002c1c <__clzsi2>
 80007e4:	1f43      	subs	r3, r0, #5
 80007e6:	409c      	lsls	r4, r3
 80007e8:	2376      	movs	r3, #118	@ 0x76
 80007ea:	425b      	negs	r3, r3
 80007ec:	1a1b      	subs	r3, r3, r0
 80007ee:	2000      	movs	r0, #0
 80007f0:	e79e      	b.n	8000730 <__aeabi_fdiv+0x4c>
 80007f2:	2303      	movs	r3, #3
 80007f4:	464a      	mov	r2, r9
 80007f6:	431a      	orrs	r2, r3
 80007f8:	4691      	mov	r9, r2
 80007fa:	2003      	movs	r0, #3
 80007fc:	33fc      	adds	r3, #252	@ 0xfc
 80007fe:	e797      	b.n	8000730 <__aeabi_fdiv+0x4c>
 8000800:	230c      	movs	r3, #12
 8000802:	4699      	mov	r9, r3
 8000804:	3b09      	subs	r3, #9
 8000806:	27ff      	movs	r7, #255	@ 0xff
 8000808:	469a      	mov	sl, r3
 800080a:	e782      	b.n	8000712 <__aeabi_fdiv+0x2e>
 800080c:	2803      	cmp	r0, #3
 800080e:	d02c      	beq.n	800086a <__aeabi_fdiv+0x186>
 8000810:	0032      	movs	r2, r6
 8000812:	0038      	movs	r0, r7
 8000814:	307f      	adds	r0, #127	@ 0x7f
 8000816:	2800      	cmp	r0, #0
 8000818:	dd47      	ble.n	80008aa <__aeabi_fdiv+0x1c6>
 800081a:	0763      	lsls	r3, r4, #29
 800081c:	d004      	beq.n	8000828 <__aeabi_fdiv+0x144>
 800081e:	230f      	movs	r3, #15
 8000820:	4023      	ands	r3, r4
 8000822:	2b04      	cmp	r3, #4
 8000824:	d000      	beq.n	8000828 <__aeabi_fdiv+0x144>
 8000826:	3404      	adds	r4, #4
 8000828:	0123      	lsls	r3, r4, #4
 800082a:	d503      	bpl.n	8000834 <__aeabi_fdiv+0x150>
 800082c:	0038      	movs	r0, r7
 800082e:	4b37      	ldr	r3, [pc, #220]	@ (800090c <__aeabi_fdiv+0x228>)
 8000830:	3080      	adds	r0, #128	@ 0x80
 8000832:	401c      	ands	r4, r3
 8000834:	28fe      	cmp	r0, #254	@ 0xfe
 8000836:	dcb6      	bgt.n	80007a6 <__aeabi_fdiv+0xc2>
 8000838:	01a4      	lsls	r4, r4, #6
 800083a:	0a64      	lsrs	r4, r4, #9
 800083c:	b2c0      	uxtb	r0, r0
 800083e:	e7a9      	b.n	8000794 <__aeabi_fdiv+0xb0>
 8000840:	2480      	movs	r4, #128	@ 0x80
 8000842:	2200      	movs	r2, #0
 8000844:	20ff      	movs	r0, #255	@ 0xff
 8000846:	03e4      	lsls	r4, r4, #15
 8000848:	e7a4      	b.n	8000794 <__aeabi_fdiv+0xb0>
 800084a:	2380      	movs	r3, #128	@ 0x80
 800084c:	03db      	lsls	r3, r3, #15
 800084e:	421d      	tst	r5, r3
 8000850:	d001      	beq.n	8000856 <__aeabi_fdiv+0x172>
 8000852:	421c      	tst	r4, r3
 8000854:	d00b      	beq.n	800086e <__aeabi_fdiv+0x18a>
 8000856:	2480      	movs	r4, #128	@ 0x80
 8000858:	03e4      	lsls	r4, r4, #15
 800085a:	432c      	orrs	r4, r5
 800085c:	0264      	lsls	r4, r4, #9
 800085e:	4642      	mov	r2, r8
 8000860:	20ff      	movs	r0, #255	@ 0xff
 8000862:	0a64      	lsrs	r4, r4, #9
 8000864:	e796      	b.n	8000794 <__aeabi_fdiv+0xb0>
 8000866:	4646      	mov	r6, r8
 8000868:	002c      	movs	r4, r5
 800086a:	2380      	movs	r3, #128	@ 0x80
 800086c:	03db      	lsls	r3, r3, #15
 800086e:	431c      	orrs	r4, r3
 8000870:	0264      	lsls	r4, r4, #9
 8000872:	0032      	movs	r2, r6
 8000874:	20ff      	movs	r0, #255	@ 0xff
 8000876:	0a64      	lsrs	r4, r4, #9
 8000878:	e78c      	b.n	8000794 <__aeabi_fdiv+0xb0>
 800087a:	016d      	lsls	r5, r5, #5
 800087c:	0160      	lsls	r0, r4, #5
 800087e:	4285      	cmp	r5, r0
 8000880:	d22d      	bcs.n	80008de <__aeabi_fdiv+0x1fa>
 8000882:	231b      	movs	r3, #27
 8000884:	2400      	movs	r4, #0
 8000886:	3f01      	subs	r7, #1
 8000888:	2601      	movs	r6, #1
 800088a:	0029      	movs	r1, r5
 800088c:	0064      	lsls	r4, r4, #1
 800088e:	006d      	lsls	r5, r5, #1
 8000890:	2900      	cmp	r1, #0
 8000892:	db01      	blt.n	8000898 <__aeabi_fdiv+0x1b4>
 8000894:	4285      	cmp	r5, r0
 8000896:	d301      	bcc.n	800089c <__aeabi_fdiv+0x1b8>
 8000898:	1a2d      	subs	r5, r5, r0
 800089a:	4334      	orrs	r4, r6
 800089c:	3b01      	subs	r3, #1
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d1f3      	bne.n	800088a <__aeabi_fdiv+0x1a6>
 80008a2:	1e6b      	subs	r3, r5, #1
 80008a4:	419d      	sbcs	r5, r3
 80008a6:	432c      	orrs	r4, r5
 80008a8:	e7b3      	b.n	8000812 <__aeabi_fdiv+0x12e>
 80008aa:	2301      	movs	r3, #1
 80008ac:	1a1b      	subs	r3, r3, r0
 80008ae:	2b1b      	cmp	r3, #27
 80008b0:	dd00      	ble.n	80008b4 <__aeabi_fdiv+0x1d0>
 80008b2:	e76d      	b.n	8000790 <__aeabi_fdiv+0xac>
 80008b4:	0021      	movs	r1, r4
 80008b6:	379e      	adds	r7, #158	@ 0x9e
 80008b8:	40d9      	lsrs	r1, r3
 80008ba:	40bc      	lsls	r4, r7
 80008bc:	000b      	movs	r3, r1
 80008be:	1e61      	subs	r1, r4, #1
 80008c0:	418c      	sbcs	r4, r1
 80008c2:	4323      	orrs	r3, r4
 80008c4:	0759      	lsls	r1, r3, #29
 80008c6:	d004      	beq.n	80008d2 <__aeabi_fdiv+0x1ee>
 80008c8:	210f      	movs	r1, #15
 80008ca:	4019      	ands	r1, r3
 80008cc:	2904      	cmp	r1, #4
 80008ce:	d000      	beq.n	80008d2 <__aeabi_fdiv+0x1ee>
 80008d0:	3304      	adds	r3, #4
 80008d2:	0159      	lsls	r1, r3, #5
 80008d4:	d413      	bmi.n	80008fe <__aeabi_fdiv+0x21a>
 80008d6:	019b      	lsls	r3, r3, #6
 80008d8:	2000      	movs	r0, #0
 80008da:	0a5c      	lsrs	r4, r3, #9
 80008dc:	e75a      	b.n	8000794 <__aeabi_fdiv+0xb0>
 80008de:	231a      	movs	r3, #26
 80008e0:	2401      	movs	r4, #1
 80008e2:	1a2d      	subs	r5, r5, r0
 80008e4:	e7d0      	b.n	8000888 <__aeabi_fdiv+0x1a4>
 80008e6:	1e98      	subs	r0, r3, #2
 80008e8:	4243      	negs	r3, r0
 80008ea:	4158      	adcs	r0, r3
 80008ec:	4240      	negs	r0, r0
 80008ee:	0032      	movs	r2, r6
 80008f0:	2400      	movs	r4, #0
 80008f2:	b2c0      	uxtb	r0, r0
 80008f4:	e74e      	b.n	8000794 <__aeabi_fdiv+0xb0>
 80008f6:	4642      	mov	r2, r8
 80008f8:	20ff      	movs	r0, #255	@ 0xff
 80008fa:	2400      	movs	r4, #0
 80008fc:	e74a      	b.n	8000794 <__aeabi_fdiv+0xb0>
 80008fe:	2001      	movs	r0, #1
 8000900:	2400      	movs	r4, #0
 8000902:	e747      	b.n	8000794 <__aeabi_fdiv+0xb0>
 8000904:	08009d88 	.word	0x08009d88
 8000908:	08009dc8 	.word	0x08009dc8
 800090c:	f7ffffff 	.word	0xf7ffffff

08000910 <__eqsf2>:
 8000910:	b570      	push	{r4, r5, r6, lr}
 8000912:	0042      	lsls	r2, r0, #1
 8000914:	024e      	lsls	r6, r1, #9
 8000916:	004c      	lsls	r4, r1, #1
 8000918:	0245      	lsls	r5, r0, #9
 800091a:	0a6d      	lsrs	r5, r5, #9
 800091c:	0e12      	lsrs	r2, r2, #24
 800091e:	0fc3      	lsrs	r3, r0, #31
 8000920:	0a76      	lsrs	r6, r6, #9
 8000922:	0e24      	lsrs	r4, r4, #24
 8000924:	0fc9      	lsrs	r1, r1, #31
 8000926:	2aff      	cmp	r2, #255	@ 0xff
 8000928:	d010      	beq.n	800094c <__eqsf2+0x3c>
 800092a:	2cff      	cmp	r4, #255	@ 0xff
 800092c:	d00c      	beq.n	8000948 <__eqsf2+0x38>
 800092e:	2001      	movs	r0, #1
 8000930:	42a2      	cmp	r2, r4
 8000932:	d10a      	bne.n	800094a <__eqsf2+0x3a>
 8000934:	42b5      	cmp	r5, r6
 8000936:	d108      	bne.n	800094a <__eqsf2+0x3a>
 8000938:	428b      	cmp	r3, r1
 800093a:	d00f      	beq.n	800095c <__eqsf2+0x4c>
 800093c:	2a00      	cmp	r2, #0
 800093e:	d104      	bne.n	800094a <__eqsf2+0x3a>
 8000940:	0028      	movs	r0, r5
 8000942:	1e43      	subs	r3, r0, #1
 8000944:	4198      	sbcs	r0, r3
 8000946:	e000      	b.n	800094a <__eqsf2+0x3a>
 8000948:	2001      	movs	r0, #1
 800094a:	bd70      	pop	{r4, r5, r6, pc}
 800094c:	2001      	movs	r0, #1
 800094e:	2cff      	cmp	r4, #255	@ 0xff
 8000950:	d1fb      	bne.n	800094a <__eqsf2+0x3a>
 8000952:	4335      	orrs	r5, r6
 8000954:	d1f9      	bne.n	800094a <__eqsf2+0x3a>
 8000956:	404b      	eors	r3, r1
 8000958:	0018      	movs	r0, r3
 800095a:	e7f6      	b.n	800094a <__eqsf2+0x3a>
 800095c:	2000      	movs	r0, #0
 800095e:	e7f4      	b.n	800094a <__eqsf2+0x3a>

08000960 <__gesf2>:
 8000960:	b530      	push	{r4, r5, lr}
 8000962:	0042      	lsls	r2, r0, #1
 8000964:	0244      	lsls	r4, r0, #9
 8000966:	024d      	lsls	r5, r1, #9
 8000968:	0fc3      	lsrs	r3, r0, #31
 800096a:	0048      	lsls	r0, r1, #1
 800096c:	0a64      	lsrs	r4, r4, #9
 800096e:	0e12      	lsrs	r2, r2, #24
 8000970:	0a6d      	lsrs	r5, r5, #9
 8000972:	0e00      	lsrs	r0, r0, #24
 8000974:	0fc9      	lsrs	r1, r1, #31
 8000976:	2aff      	cmp	r2, #255	@ 0xff
 8000978:	d018      	beq.n	80009ac <__gesf2+0x4c>
 800097a:	28ff      	cmp	r0, #255	@ 0xff
 800097c:	d00a      	beq.n	8000994 <__gesf2+0x34>
 800097e:	2a00      	cmp	r2, #0
 8000980:	d11e      	bne.n	80009c0 <__gesf2+0x60>
 8000982:	2800      	cmp	r0, #0
 8000984:	d10a      	bne.n	800099c <__gesf2+0x3c>
 8000986:	2d00      	cmp	r5, #0
 8000988:	d029      	beq.n	80009de <__gesf2+0x7e>
 800098a:	2c00      	cmp	r4, #0
 800098c:	d12d      	bne.n	80009ea <__gesf2+0x8a>
 800098e:	0048      	lsls	r0, r1, #1
 8000990:	3801      	subs	r0, #1
 8000992:	bd30      	pop	{r4, r5, pc}
 8000994:	2d00      	cmp	r5, #0
 8000996:	d125      	bne.n	80009e4 <__gesf2+0x84>
 8000998:	2a00      	cmp	r2, #0
 800099a:	d101      	bne.n	80009a0 <__gesf2+0x40>
 800099c:	2c00      	cmp	r4, #0
 800099e:	d0f6      	beq.n	800098e <__gesf2+0x2e>
 80009a0:	428b      	cmp	r3, r1
 80009a2:	d019      	beq.n	80009d8 <__gesf2+0x78>
 80009a4:	2001      	movs	r0, #1
 80009a6:	425b      	negs	r3, r3
 80009a8:	4318      	orrs	r0, r3
 80009aa:	e7f2      	b.n	8000992 <__gesf2+0x32>
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	d119      	bne.n	80009e4 <__gesf2+0x84>
 80009b0:	28ff      	cmp	r0, #255	@ 0xff
 80009b2:	d1f7      	bne.n	80009a4 <__gesf2+0x44>
 80009b4:	2d00      	cmp	r5, #0
 80009b6:	d115      	bne.n	80009e4 <__gesf2+0x84>
 80009b8:	2000      	movs	r0, #0
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d1f2      	bne.n	80009a4 <__gesf2+0x44>
 80009be:	e7e8      	b.n	8000992 <__gesf2+0x32>
 80009c0:	2800      	cmp	r0, #0
 80009c2:	d0ef      	beq.n	80009a4 <__gesf2+0x44>
 80009c4:	428b      	cmp	r3, r1
 80009c6:	d1ed      	bne.n	80009a4 <__gesf2+0x44>
 80009c8:	4282      	cmp	r2, r0
 80009ca:	dceb      	bgt.n	80009a4 <__gesf2+0x44>
 80009cc:	db04      	blt.n	80009d8 <__gesf2+0x78>
 80009ce:	42ac      	cmp	r4, r5
 80009d0:	d8e8      	bhi.n	80009a4 <__gesf2+0x44>
 80009d2:	2000      	movs	r0, #0
 80009d4:	42ac      	cmp	r4, r5
 80009d6:	d2dc      	bcs.n	8000992 <__gesf2+0x32>
 80009d8:	0058      	lsls	r0, r3, #1
 80009da:	3801      	subs	r0, #1
 80009dc:	e7d9      	b.n	8000992 <__gesf2+0x32>
 80009de:	2c00      	cmp	r4, #0
 80009e0:	d0d7      	beq.n	8000992 <__gesf2+0x32>
 80009e2:	e7df      	b.n	80009a4 <__gesf2+0x44>
 80009e4:	2002      	movs	r0, #2
 80009e6:	4240      	negs	r0, r0
 80009e8:	e7d3      	b.n	8000992 <__gesf2+0x32>
 80009ea:	428b      	cmp	r3, r1
 80009ec:	d1da      	bne.n	80009a4 <__gesf2+0x44>
 80009ee:	e7ee      	b.n	80009ce <__gesf2+0x6e>

080009f0 <__lesf2>:
 80009f0:	b530      	push	{r4, r5, lr}
 80009f2:	0042      	lsls	r2, r0, #1
 80009f4:	0244      	lsls	r4, r0, #9
 80009f6:	024d      	lsls	r5, r1, #9
 80009f8:	0fc3      	lsrs	r3, r0, #31
 80009fa:	0048      	lsls	r0, r1, #1
 80009fc:	0a64      	lsrs	r4, r4, #9
 80009fe:	0e12      	lsrs	r2, r2, #24
 8000a00:	0a6d      	lsrs	r5, r5, #9
 8000a02:	0e00      	lsrs	r0, r0, #24
 8000a04:	0fc9      	lsrs	r1, r1, #31
 8000a06:	2aff      	cmp	r2, #255	@ 0xff
 8000a08:	d017      	beq.n	8000a3a <__lesf2+0x4a>
 8000a0a:	28ff      	cmp	r0, #255	@ 0xff
 8000a0c:	d00a      	beq.n	8000a24 <__lesf2+0x34>
 8000a0e:	2a00      	cmp	r2, #0
 8000a10:	d11b      	bne.n	8000a4a <__lesf2+0x5a>
 8000a12:	2800      	cmp	r0, #0
 8000a14:	d10a      	bne.n	8000a2c <__lesf2+0x3c>
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	d01d      	beq.n	8000a56 <__lesf2+0x66>
 8000a1a:	2c00      	cmp	r4, #0
 8000a1c:	d12d      	bne.n	8000a7a <__lesf2+0x8a>
 8000a1e:	0048      	lsls	r0, r1, #1
 8000a20:	3801      	subs	r0, #1
 8000a22:	e011      	b.n	8000a48 <__lesf2+0x58>
 8000a24:	2d00      	cmp	r5, #0
 8000a26:	d10e      	bne.n	8000a46 <__lesf2+0x56>
 8000a28:	2a00      	cmp	r2, #0
 8000a2a:	d101      	bne.n	8000a30 <__lesf2+0x40>
 8000a2c:	2c00      	cmp	r4, #0
 8000a2e:	d0f6      	beq.n	8000a1e <__lesf2+0x2e>
 8000a30:	428b      	cmp	r3, r1
 8000a32:	d10c      	bne.n	8000a4e <__lesf2+0x5e>
 8000a34:	0058      	lsls	r0, r3, #1
 8000a36:	3801      	subs	r0, #1
 8000a38:	e006      	b.n	8000a48 <__lesf2+0x58>
 8000a3a:	2c00      	cmp	r4, #0
 8000a3c:	d103      	bne.n	8000a46 <__lesf2+0x56>
 8000a3e:	28ff      	cmp	r0, #255	@ 0xff
 8000a40:	d105      	bne.n	8000a4e <__lesf2+0x5e>
 8000a42:	2d00      	cmp	r5, #0
 8000a44:	d015      	beq.n	8000a72 <__lesf2+0x82>
 8000a46:	2002      	movs	r0, #2
 8000a48:	bd30      	pop	{r4, r5, pc}
 8000a4a:	2800      	cmp	r0, #0
 8000a4c:	d106      	bne.n	8000a5c <__lesf2+0x6c>
 8000a4e:	2001      	movs	r0, #1
 8000a50:	425b      	negs	r3, r3
 8000a52:	4318      	orrs	r0, r3
 8000a54:	e7f8      	b.n	8000a48 <__lesf2+0x58>
 8000a56:	2c00      	cmp	r4, #0
 8000a58:	d0f6      	beq.n	8000a48 <__lesf2+0x58>
 8000a5a:	e7f8      	b.n	8000a4e <__lesf2+0x5e>
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	d1f6      	bne.n	8000a4e <__lesf2+0x5e>
 8000a60:	4282      	cmp	r2, r0
 8000a62:	dcf4      	bgt.n	8000a4e <__lesf2+0x5e>
 8000a64:	dbe6      	blt.n	8000a34 <__lesf2+0x44>
 8000a66:	42ac      	cmp	r4, r5
 8000a68:	d8f1      	bhi.n	8000a4e <__lesf2+0x5e>
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	42ac      	cmp	r4, r5
 8000a6e:	d2eb      	bcs.n	8000a48 <__lesf2+0x58>
 8000a70:	e7e0      	b.n	8000a34 <__lesf2+0x44>
 8000a72:	2000      	movs	r0, #0
 8000a74:	428b      	cmp	r3, r1
 8000a76:	d1ea      	bne.n	8000a4e <__lesf2+0x5e>
 8000a78:	e7e6      	b.n	8000a48 <__lesf2+0x58>
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d1e7      	bne.n	8000a4e <__lesf2+0x5e>
 8000a7e:	e7f2      	b.n	8000a66 <__lesf2+0x76>

08000a80 <__aeabi_fmul>:
 8000a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a82:	464f      	mov	r7, r9
 8000a84:	4646      	mov	r6, r8
 8000a86:	46d6      	mov	lr, sl
 8000a88:	0044      	lsls	r4, r0, #1
 8000a8a:	b5c0      	push	{r6, r7, lr}
 8000a8c:	0246      	lsls	r6, r0, #9
 8000a8e:	1c0f      	adds	r7, r1, #0
 8000a90:	0a76      	lsrs	r6, r6, #9
 8000a92:	0e24      	lsrs	r4, r4, #24
 8000a94:	0fc5      	lsrs	r5, r0, #31
 8000a96:	2c00      	cmp	r4, #0
 8000a98:	d100      	bne.n	8000a9c <__aeabi_fmul+0x1c>
 8000a9a:	e0da      	b.n	8000c52 <__aeabi_fmul+0x1d2>
 8000a9c:	2cff      	cmp	r4, #255	@ 0xff
 8000a9e:	d074      	beq.n	8000b8a <__aeabi_fmul+0x10a>
 8000aa0:	2380      	movs	r3, #128	@ 0x80
 8000aa2:	00f6      	lsls	r6, r6, #3
 8000aa4:	04db      	lsls	r3, r3, #19
 8000aa6:	431e      	orrs	r6, r3
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	4699      	mov	r9, r3
 8000aac:	469a      	mov	sl, r3
 8000aae:	3c7f      	subs	r4, #127	@ 0x7f
 8000ab0:	027b      	lsls	r3, r7, #9
 8000ab2:	0a5b      	lsrs	r3, r3, #9
 8000ab4:	4698      	mov	r8, r3
 8000ab6:	007b      	lsls	r3, r7, #1
 8000ab8:	0e1b      	lsrs	r3, r3, #24
 8000aba:	0fff      	lsrs	r7, r7, #31
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d074      	beq.n	8000baa <__aeabi_fmul+0x12a>
 8000ac0:	2bff      	cmp	r3, #255	@ 0xff
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_fmul+0x46>
 8000ac4:	e08e      	b.n	8000be4 <__aeabi_fmul+0x164>
 8000ac6:	4642      	mov	r2, r8
 8000ac8:	2180      	movs	r1, #128	@ 0x80
 8000aca:	00d2      	lsls	r2, r2, #3
 8000acc:	04c9      	lsls	r1, r1, #19
 8000ace:	4311      	orrs	r1, r2
 8000ad0:	3b7f      	subs	r3, #127	@ 0x7f
 8000ad2:	002a      	movs	r2, r5
 8000ad4:	18e4      	adds	r4, r4, r3
 8000ad6:	464b      	mov	r3, r9
 8000ad8:	407a      	eors	r2, r7
 8000ada:	4688      	mov	r8, r1
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	2b0a      	cmp	r3, #10
 8000ae0:	dc75      	bgt.n	8000bce <__aeabi_fmul+0x14e>
 8000ae2:	464b      	mov	r3, r9
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	dd0f      	ble.n	8000b0a <__aeabi_fmul+0x8a>
 8000aea:	4649      	mov	r1, r9
 8000aec:	2301      	movs	r3, #1
 8000aee:	408b      	lsls	r3, r1
 8000af0:	21a6      	movs	r1, #166	@ 0xa6
 8000af2:	00c9      	lsls	r1, r1, #3
 8000af4:	420b      	tst	r3, r1
 8000af6:	d169      	bne.n	8000bcc <__aeabi_fmul+0x14c>
 8000af8:	2190      	movs	r1, #144	@ 0x90
 8000afa:	0089      	lsls	r1, r1, #2
 8000afc:	420b      	tst	r3, r1
 8000afe:	d000      	beq.n	8000b02 <__aeabi_fmul+0x82>
 8000b00:	e100      	b.n	8000d04 <__aeabi_fmul+0x284>
 8000b02:	2188      	movs	r1, #136	@ 0x88
 8000b04:	4219      	tst	r1, r3
 8000b06:	d000      	beq.n	8000b0a <__aeabi_fmul+0x8a>
 8000b08:	e0f5      	b.n	8000cf6 <__aeabi_fmul+0x276>
 8000b0a:	4641      	mov	r1, r8
 8000b0c:	0409      	lsls	r1, r1, #16
 8000b0e:	0c09      	lsrs	r1, r1, #16
 8000b10:	4643      	mov	r3, r8
 8000b12:	0008      	movs	r0, r1
 8000b14:	0c35      	lsrs	r5, r6, #16
 8000b16:	0436      	lsls	r6, r6, #16
 8000b18:	0c1b      	lsrs	r3, r3, #16
 8000b1a:	0c36      	lsrs	r6, r6, #16
 8000b1c:	4370      	muls	r0, r6
 8000b1e:	4369      	muls	r1, r5
 8000b20:	435e      	muls	r6, r3
 8000b22:	435d      	muls	r5, r3
 8000b24:	1876      	adds	r6, r6, r1
 8000b26:	0c03      	lsrs	r3, r0, #16
 8000b28:	199b      	adds	r3, r3, r6
 8000b2a:	4299      	cmp	r1, r3
 8000b2c:	d903      	bls.n	8000b36 <__aeabi_fmul+0xb6>
 8000b2e:	2180      	movs	r1, #128	@ 0x80
 8000b30:	0249      	lsls	r1, r1, #9
 8000b32:	468c      	mov	ip, r1
 8000b34:	4465      	add	r5, ip
 8000b36:	0400      	lsls	r0, r0, #16
 8000b38:	0419      	lsls	r1, r3, #16
 8000b3a:	0c00      	lsrs	r0, r0, #16
 8000b3c:	1809      	adds	r1, r1, r0
 8000b3e:	018e      	lsls	r6, r1, #6
 8000b40:	1e70      	subs	r0, r6, #1
 8000b42:	4186      	sbcs	r6, r0
 8000b44:	0c1b      	lsrs	r3, r3, #16
 8000b46:	0e89      	lsrs	r1, r1, #26
 8000b48:	195b      	adds	r3, r3, r5
 8000b4a:	430e      	orrs	r6, r1
 8000b4c:	019b      	lsls	r3, r3, #6
 8000b4e:	431e      	orrs	r6, r3
 8000b50:	011b      	lsls	r3, r3, #4
 8000b52:	d46c      	bmi.n	8000c2e <__aeabi_fmul+0x1ae>
 8000b54:	0023      	movs	r3, r4
 8000b56:	337f      	adds	r3, #127	@ 0x7f
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	dc00      	bgt.n	8000b5e <__aeabi_fmul+0xde>
 8000b5c:	e0b1      	b.n	8000cc2 <__aeabi_fmul+0x242>
 8000b5e:	0015      	movs	r5, r2
 8000b60:	0771      	lsls	r1, r6, #29
 8000b62:	d00b      	beq.n	8000b7c <__aeabi_fmul+0xfc>
 8000b64:	200f      	movs	r0, #15
 8000b66:	0021      	movs	r1, r4
 8000b68:	4030      	ands	r0, r6
 8000b6a:	2804      	cmp	r0, #4
 8000b6c:	d006      	beq.n	8000b7c <__aeabi_fmul+0xfc>
 8000b6e:	3604      	adds	r6, #4
 8000b70:	0132      	lsls	r2, r6, #4
 8000b72:	d503      	bpl.n	8000b7c <__aeabi_fmul+0xfc>
 8000b74:	4b6e      	ldr	r3, [pc, #440]	@ (8000d30 <__aeabi_fmul+0x2b0>)
 8000b76:	401e      	ands	r6, r3
 8000b78:	000b      	movs	r3, r1
 8000b7a:	3380      	adds	r3, #128	@ 0x80
 8000b7c:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b7e:	dd00      	ble.n	8000b82 <__aeabi_fmul+0x102>
 8000b80:	e0bd      	b.n	8000cfe <__aeabi_fmul+0x27e>
 8000b82:	01b2      	lsls	r2, r6, #6
 8000b84:	0a52      	lsrs	r2, r2, #9
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	e048      	b.n	8000c1c <__aeabi_fmul+0x19c>
 8000b8a:	2e00      	cmp	r6, #0
 8000b8c:	d000      	beq.n	8000b90 <__aeabi_fmul+0x110>
 8000b8e:	e092      	b.n	8000cb6 <__aeabi_fmul+0x236>
 8000b90:	2308      	movs	r3, #8
 8000b92:	4699      	mov	r9, r3
 8000b94:	3b06      	subs	r3, #6
 8000b96:	469a      	mov	sl, r3
 8000b98:	027b      	lsls	r3, r7, #9
 8000b9a:	0a5b      	lsrs	r3, r3, #9
 8000b9c:	4698      	mov	r8, r3
 8000b9e:	007b      	lsls	r3, r7, #1
 8000ba0:	24ff      	movs	r4, #255	@ 0xff
 8000ba2:	0e1b      	lsrs	r3, r3, #24
 8000ba4:	0fff      	lsrs	r7, r7, #31
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d18a      	bne.n	8000ac0 <__aeabi_fmul+0x40>
 8000baa:	4642      	mov	r2, r8
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	d164      	bne.n	8000c7a <__aeabi_fmul+0x1fa>
 8000bb0:	4649      	mov	r1, r9
 8000bb2:	3201      	adds	r2, #1
 8000bb4:	4311      	orrs	r1, r2
 8000bb6:	4689      	mov	r9, r1
 8000bb8:	290a      	cmp	r1, #10
 8000bba:	dc08      	bgt.n	8000bce <__aeabi_fmul+0x14e>
 8000bbc:	407d      	eors	r5, r7
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	b2ea      	uxtb	r2, r5
 8000bc2:	2902      	cmp	r1, #2
 8000bc4:	dc91      	bgt.n	8000aea <__aeabi_fmul+0x6a>
 8000bc6:	0015      	movs	r5, r2
 8000bc8:	2200      	movs	r2, #0
 8000bca:	e027      	b.n	8000c1c <__aeabi_fmul+0x19c>
 8000bcc:	0015      	movs	r5, r2
 8000bce:	4653      	mov	r3, sl
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_fmul+0x156>
 8000bd4:	e093      	b.n	8000cfe <__aeabi_fmul+0x27e>
 8000bd6:	2b03      	cmp	r3, #3
 8000bd8:	d01a      	beq.n	8000c10 <__aeabi_fmul+0x190>
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d12c      	bne.n	8000c38 <__aeabi_fmul+0x1b8>
 8000bde:	2300      	movs	r3, #0
 8000be0:	2200      	movs	r2, #0
 8000be2:	e01b      	b.n	8000c1c <__aeabi_fmul+0x19c>
 8000be4:	4643      	mov	r3, r8
 8000be6:	34ff      	adds	r4, #255	@ 0xff
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d055      	beq.n	8000c98 <__aeabi_fmul+0x218>
 8000bec:	2103      	movs	r1, #3
 8000bee:	464b      	mov	r3, r9
 8000bf0:	430b      	orrs	r3, r1
 8000bf2:	0019      	movs	r1, r3
 8000bf4:	2b0a      	cmp	r3, #10
 8000bf6:	dc00      	bgt.n	8000bfa <__aeabi_fmul+0x17a>
 8000bf8:	e092      	b.n	8000d20 <__aeabi_fmul+0x2a0>
 8000bfa:	2b0f      	cmp	r3, #15
 8000bfc:	d000      	beq.n	8000c00 <__aeabi_fmul+0x180>
 8000bfe:	e08c      	b.n	8000d1a <__aeabi_fmul+0x29a>
 8000c00:	2280      	movs	r2, #128	@ 0x80
 8000c02:	03d2      	lsls	r2, r2, #15
 8000c04:	4216      	tst	r6, r2
 8000c06:	d003      	beq.n	8000c10 <__aeabi_fmul+0x190>
 8000c08:	4643      	mov	r3, r8
 8000c0a:	4213      	tst	r3, r2
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_fmul+0x190>
 8000c0e:	e07d      	b.n	8000d0c <__aeabi_fmul+0x28c>
 8000c10:	2280      	movs	r2, #128	@ 0x80
 8000c12:	03d2      	lsls	r2, r2, #15
 8000c14:	4332      	orrs	r2, r6
 8000c16:	0252      	lsls	r2, r2, #9
 8000c18:	0a52      	lsrs	r2, r2, #9
 8000c1a:	23ff      	movs	r3, #255	@ 0xff
 8000c1c:	05d8      	lsls	r0, r3, #23
 8000c1e:	07ed      	lsls	r5, r5, #31
 8000c20:	4310      	orrs	r0, r2
 8000c22:	4328      	orrs	r0, r5
 8000c24:	bce0      	pop	{r5, r6, r7}
 8000c26:	46ba      	mov	sl, r7
 8000c28:	46b1      	mov	r9, r6
 8000c2a:	46a8      	mov	r8, r5
 8000c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c2e:	2301      	movs	r3, #1
 8000c30:	0015      	movs	r5, r2
 8000c32:	0871      	lsrs	r1, r6, #1
 8000c34:	401e      	ands	r6, r3
 8000c36:	430e      	orrs	r6, r1
 8000c38:	0023      	movs	r3, r4
 8000c3a:	3380      	adds	r3, #128	@ 0x80
 8000c3c:	1c61      	adds	r1, r4, #1
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	dd41      	ble.n	8000cc6 <__aeabi_fmul+0x246>
 8000c42:	0772      	lsls	r2, r6, #29
 8000c44:	d094      	beq.n	8000b70 <__aeabi_fmul+0xf0>
 8000c46:	220f      	movs	r2, #15
 8000c48:	4032      	ands	r2, r6
 8000c4a:	2a04      	cmp	r2, #4
 8000c4c:	d000      	beq.n	8000c50 <__aeabi_fmul+0x1d0>
 8000c4e:	e78e      	b.n	8000b6e <__aeabi_fmul+0xee>
 8000c50:	e78e      	b.n	8000b70 <__aeabi_fmul+0xf0>
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	d105      	bne.n	8000c62 <__aeabi_fmul+0x1e2>
 8000c56:	2304      	movs	r3, #4
 8000c58:	4699      	mov	r9, r3
 8000c5a:	3b03      	subs	r3, #3
 8000c5c:	2400      	movs	r4, #0
 8000c5e:	469a      	mov	sl, r3
 8000c60:	e726      	b.n	8000ab0 <__aeabi_fmul+0x30>
 8000c62:	0030      	movs	r0, r6
 8000c64:	f001 ffda 	bl	8002c1c <__clzsi2>
 8000c68:	2476      	movs	r4, #118	@ 0x76
 8000c6a:	1f43      	subs	r3, r0, #5
 8000c6c:	409e      	lsls	r6, r3
 8000c6e:	2300      	movs	r3, #0
 8000c70:	4264      	negs	r4, r4
 8000c72:	4699      	mov	r9, r3
 8000c74:	469a      	mov	sl, r3
 8000c76:	1a24      	subs	r4, r4, r0
 8000c78:	e71a      	b.n	8000ab0 <__aeabi_fmul+0x30>
 8000c7a:	4640      	mov	r0, r8
 8000c7c:	f001 ffce 	bl	8002c1c <__clzsi2>
 8000c80:	464b      	mov	r3, r9
 8000c82:	1a24      	subs	r4, r4, r0
 8000c84:	3c76      	subs	r4, #118	@ 0x76
 8000c86:	2b0a      	cmp	r3, #10
 8000c88:	dca1      	bgt.n	8000bce <__aeabi_fmul+0x14e>
 8000c8a:	4643      	mov	r3, r8
 8000c8c:	3805      	subs	r0, #5
 8000c8e:	4083      	lsls	r3, r0
 8000c90:	407d      	eors	r5, r7
 8000c92:	4698      	mov	r8, r3
 8000c94:	b2ea      	uxtb	r2, r5
 8000c96:	e724      	b.n	8000ae2 <__aeabi_fmul+0x62>
 8000c98:	464a      	mov	r2, r9
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	002a      	movs	r2, r5
 8000ca0:	407a      	eors	r2, r7
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	2b0a      	cmp	r3, #10
 8000ca6:	dc92      	bgt.n	8000bce <__aeabi_fmul+0x14e>
 8000ca8:	4649      	mov	r1, r9
 8000caa:	0015      	movs	r5, r2
 8000cac:	2900      	cmp	r1, #0
 8000cae:	d026      	beq.n	8000cfe <__aeabi_fmul+0x27e>
 8000cb0:	4699      	mov	r9, r3
 8000cb2:	2002      	movs	r0, #2
 8000cb4:	e719      	b.n	8000aea <__aeabi_fmul+0x6a>
 8000cb6:	230c      	movs	r3, #12
 8000cb8:	4699      	mov	r9, r3
 8000cba:	3b09      	subs	r3, #9
 8000cbc:	24ff      	movs	r4, #255	@ 0xff
 8000cbe:	469a      	mov	sl, r3
 8000cc0:	e6f6      	b.n	8000ab0 <__aeabi_fmul+0x30>
 8000cc2:	0015      	movs	r5, r2
 8000cc4:	0021      	movs	r1, r4
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	2b1b      	cmp	r3, #27
 8000ccc:	dd00      	ble.n	8000cd0 <__aeabi_fmul+0x250>
 8000cce:	e786      	b.n	8000bde <__aeabi_fmul+0x15e>
 8000cd0:	319e      	adds	r1, #158	@ 0x9e
 8000cd2:	0032      	movs	r2, r6
 8000cd4:	408e      	lsls	r6, r1
 8000cd6:	40da      	lsrs	r2, r3
 8000cd8:	1e73      	subs	r3, r6, #1
 8000cda:	419e      	sbcs	r6, r3
 8000cdc:	4332      	orrs	r2, r6
 8000cde:	0753      	lsls	r3, r2, #29
 8000ce0:	d004      	beq.n	8000cec <__aeabi_fmul+0x26c>
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	d000      	beq.n	8000cec <__aeabi_fmul+0x26c>
 8000cea:	3204      	adds	r2, #4
 8000cec:	0153      	lsls	r3, r2, #5
 8000cee:	d510      	bpl.n	8000d12 <__aeabi_fmul+0x292>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	e792      	b.n	8000c1c <__aeabi_fmul+0x19c>
 8000cf6:	003d      	movs	r5, r7
 8000cf8:	4646      	mov	r6, r8
 8000cfa:	4682      	mov	sl, r0
 8000cfc:	e767      	b.n	8000bce <__aeabi_fmul+0x14e>
 8000cfe:	23ff      	movs	r3, #255	@ 0xff
 8000d00:	2200      	movs	r2, #0
 8000d02:	e78b      	b.n	8000c1c <__aeabi_fmul+0x19c>
 8000d04:	2280      	movs	r2, #128	@ 0x80
 8000d06:	2500      	movs	r5, #0
 8000d08:	03d2      	lsls	r2, r2, #15
 8000d0a:	e786      	b.n	8000c1a <__aeabi_fmul+0x19a>
 8000d0c:	003d      	movs	r5, r7
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	e783      	b.n	8000c1a <__aeabi_fmul+0x19a>
 8000d12:	0192      	lsls	r2, r2, #6
 8000d14:	2300      	movs	r3, #0
 8000d16:	0a52      	lsrs	r2, r2, #9
 8000d18:	e780      	b.n	8000c1c <__aeabi_fmul+0x19c>
 8000d1a:	003d      	movs	r5, r7
 8000d1c:	4646      	mov	r6, r8
 8000d1e:	e777      	b.n	8000c10 <__aeabi_fmul+0x190>
 8000d20:	002a      	movs	r2, r5
 8000d22:	2301      	movs	r3, #1
 8000d24:	407a      	eors	r2, r7
 8000d26:	408b      	lsls	r3, r1
 8000d28:	2003      	movs	r0, #3
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	e6e9      	b.n	8000b02 <__aeabi_fmul+0x82>
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	f7ffffff 	.word	0xf7ffffff

08000d34 <__aeabi_fsub>:
 8000d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d36:	4647      	mov	r7, r8
 8000d38:	46ce      	mov	lr, r9
 8000d3a:	0243      	lsls	r3, r0, #9
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	0a5f      	lsrs	r7, r3, #9
 8000d40:	099b      	lsrs	r3, r3, #6
 8000d42:	0045      	lsls	r5, r0, #1
 8000d44:	004a      	lsls	r2, r1, #1
 8000d46:	469c      	mov	ip, r3
 8000d48:	024b      	lsls	r3, r1, #9
 8000d4a:	0fc4      	lsrs	r4, r0, #31
 8000d4c:	0fce      	lsrs	r6, r1, #31
 8000d4e:	0e2d      	lsrs	r5, r5, #24
 8000d50:	0a58      	lsrs	r0, r3, #9
 8000d52:	0e12      	lsrs	r2, r2, #24
 8000d54:	0999      	lsrs	r1, r3, #6
 8000d56:	2aff      	cmp	r2, #255	@ 0xff
 8000d58:	d06b      	beq.n	8000e32 <__aeabi_fsub+0xfe>
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	405e      	eors	r6, r3
 8000d5e:	1aab      	subs	r3, r5, r2
 8000d60:	42b4      	cmp	r4, r6
 8000d62:	d04b      	beq.n	8000dfc <__aeabi_fsub+0xc8>
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	dc00      	bgt.n	8000d6a <__aeabi_fsub+0x36>
 8000d68:	e0ff      	b.n	8000f6a <__aeabi_fsub+0x236>
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_fsub+0x3c>
 8000d6e:	e088      	b.n	8000e82 <__aeabi_fsub+0x14e>
 8000d70:	2dff      	cmp	r5, #255	@ 0xff
 8000d72:	d100      	bne.n	8000d76 <__aeabi_fsub+0x42>
 8000d74:	e0ef      	b.n	8000f56 <__aeabi_fsub+0x222>
 8000d76:	2280      	movs	r2, #128	@ 0x80
 8000d78:	04d2      	lsls	r2, r2, #19
 8000d7a:	4311      	orrs	r1, r2
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	2b1b      	cmp	r3, #27
 8000d80:	dc08      	bgt.n	8000d94 <__aeabi_fsub+0x60>
 8000d82:	0008      	movs	r0, r1
 8000d84:	2220      	movs	r2, #32
 8000d86:	40d8      	lsrs	r0, r3
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	4099      	lsls	r1, r3
 8000d8c:	000b      	movs	r3, r1
 8000d8e:	1e5a      	subs	r2, r3, #1
 8000d90:	4193      	sbcs	r3, r2
 8000d92:	4318      	orrs	r0, r3
 8000d94:	4663      	mov	r3, ip
 8000d96:	1a1b      	subs	r3, r3, r0
 8000d98:	469c      	mov	ip, r3
 8000d9a:	4663      	mov	r3, ip
 8000d9c:	015b      	lsls	r3, r3, #5
 8000d9e:	d400      	bmi.n	8000da2 <__aeabi_fsub+0x6e>
 8000da0:	e0cd      	b.n	8000f3e <__aeabi_fsub+0x20a>
 8000da2:	4663      	mov	r3, ip
 8000da4:	019f      	lsls	r7, r3, #6
 8000da6:	09bf      	lsrs	r7, r7, #6
 8000da8:	0038      	movs	r0, r7
 8000daa:	f001 ff37 	bl	8002c1c <__clzsi2>
 8000dae:	003b      	movs	r3, r7
 8000db0:	3805      	subs	r0, #5
 8000db2:	4083      	lsls	r3, r0
 8000db4:	4285      	cmp	r5, r0
 8000db6:	dc00      	bgt.n	8000dba <__aeabi_fsub+0x86>
 8000db8:	e0a2      	b.n	8000f00 <__aeabi_fsub+0x1cc>
 8000dba:	4ab7      	ldr	r2, [pc, #732]	@ (8001098 <__aeabi_fsub+0x364>)
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	4694      	mov	ip, r2
 8000dc2:	075a      	lsls	r2, r3, #29
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_fsub+0x94>
 8000dc6:	e0c3      	b.n	8000f50 <__aeabi_fsub+0x21c>
 8000dc8:	220f      	movs	r2, #15
 8000dca:	4013      	ands	r3, r2
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_fsub+0x9e>
 8000dd0:	e0be      	b.n	8000f50 <__aeabi_fsub+0x21c>
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	4698      	mov	r8, r3
 8000dd6:	44c4      	add	ip, r8
 8000dd8:	4663      	mov	r3, ip
 8000dda:	015b      	lsls	r3, r3, #5
 8000ddc:	d400      	bmi.n	8000de0 <__aeabi_fsub+0xac>
 8000dde:	e0b7      	b.n	8000f50 <__aeabi_fsub+0x21c>
 8000de0:	1c68      	adds	r0, r5, #1
 8000de2:	2dfe      	cmp	r5, #254	@ 0xfe
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fsub+0xb4>
 8000de6:	e0a5      	b.n	8000f34 <__aeabi_fsub+0x200>
 8000de8:	20ff      	movs	r0, #255	@ 0xff
 8000dea:	2200      	movs	r2, #0
 8000dec:	05c0      	lsls	r0, r0, #23
 8000dee:	4310      	orrs	r0, r2
 8000df0:	07e4      	lsls	r4, r4, #31
 8000df2:	4320      	orrs	r0, r4
 8000df4:	bcc0      	pop	{r6, r7}
 8000df6:	46b9      	mov	r9, r7
 8000df8:	46b0      	mov	r8, r6
 8000dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	dc00      	bgt.n	8000e02 <__aeabi_fsub+0xce>
 8000e00:	e1eb      	b.n	80011da <__aeabi_fsub+0x4a6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d046      	beq.n	8000e94 <__aeabi_fsub+0x160>
 8000e06:	2dff      	cmp	r5, #255	@ 0xff
 8000e08:	d100      	bne.n	8000e0c <__aeabi_fsub+0xd8>
 8000e0a:	e0a4      	b.n	8000f56 <__aeabi_fsub+0x222>
 8000e0c:	2280      	movs	r2, #128	@ 0x80
 8000e0e:	04d2      	lsls	r2, r2, #19
 8000e10:	4311      	orrs	r1, r2
 8000e12:	2b1b      	cmp	r3, #27
 8000e14:	dc00      	bgt.n	8000e18 <__aeabi_fsub+0xe4>
 8000e16:	e0fb      	b.n	8001010 <__aeabi_fsub+0x2dc>
 8000e18:	2305      	movs	r3, #5
 8000e1a:	4698      	mov	r8, r3
 8000e1c:	002b      	movs	r3, r5
 8000e1e:	44c4      	add	ip, r8
 8000e20:	4662      	mov	r2, ip
 8000e22:	08d7      	lsrs	r7, r2, #3
 8000e24:	2bff      	cmp	r3, #255	@ 0xff
 8000e26:	d100      	bne.n	8000e2a <__aeabi_fsub+0xf6>
 8000e28:	e095      	b.n	8000f56 <__aeabi_fsub+0x222>
 8000e2a:	027a      	lsls	r2, r7, #9
 8000e2c:	0a52      	lsrs	r2, r2, #9
 8000e2e:	b2d8      	uxtb	r0, r3
 8000e30:	e7dc      	b.n	8000dec <__aeabi_fsub+0xb8>
 8000e32:	002b      	movs	r3, r5
 8000e34:	3bff      	subs	r3, #255	@ 0xff
 8000e36:	4699      	mov	r9, r3
 8000e38:	2900      	cmp	r1, #0
 8000e3a:	d118      	bne.n	8000e6e <__aeabi_fsub+0x13a>
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	405e      	eors	r6, r3
 8000e40:	42b4      	cmp	r4, r6
 8000e42:	d100      	bne.n	8000e46 <__aeabi_fsub+0x112>
 8000e44:	e0ca      	b.n	8000fdc <__aeabi_fsub+0x2a8>
 8000e46:	464b      	mov	r3, r9
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d02d      	beq.n	8000ea8 <__aeabi_fsub+0x174>
 8000e4c:	2d00      	cmp	r5, #0
 8000e4e:	d000      	beq.n	8000e52 <__aeabi_fsub+0x11e>
 8000e50:	e13c      	b.n	80010cc <__aeabi_fsub+0x398>
 8000e52:	23ff      	movs	r3, #255	@ 0xff
 8000e54:	4664      	mov	r4, ip
 8000e56:	2c00      	cmp	r4, #0
 8000e58:	d100      	bne.n	8000e5c <__aeabi_fsub+0x128>
 8000e5a:	e15f      	b.n	800111c <__aeabi_fsub+0x3e8>
 8000e5c:	1e5d      	subs	r5, r3, #1
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d100      	bne.n	8000e64 <__aeabi_fsub+0x130>
 8000e62:	e174      	b.n	800114e <__aeabi_fsub+0x41a>
 8000e64:	0034      	movs	r4, r6
 8000e66:	2bff      	cmp	r3, #255	@ 0xff
 8000e68:	d074      	beq.n	8000f54 <__aeabi_fsub+0x220>
 8000e6a:	002b      	movs	r3, r5
 8000e6c:	e103      	b.n	8001076 <__aeabi_fsub+0x342>
 8000e6e:	42b4      	cmp	r4, r6
 8000e70:	d100      	bne.n	8000e74 <__aeabi_fsub+0x140>
 8000e72:	e09c      	b.n	8000fae <__aeabi_fsub+0x27a>
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d017      	beq.n	8000ea8 <__aeabi_fsub+0x174>
 8000e78:	2d00      	cmp	r5, #0
 8000e7a:	d0ea      	beq.n	8000e52 <__aeabi_fsub+0x11e>
 8000e7c:	0007      	movs	r7, r0
 8000e7e:	0034      	movs	r4, r6
 8000e80:	e06c      	b.n	8000f5c <__aeabi_fsub+0x228>
 8000e82:	2900      	cmp	r1, #0
 8000e84:	d0cc      	beq.n	8000e20 <__aeabi_fsub+0xec>
 8000e86:	1e5a      	subs	r2, r3, #1
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d02b      	beq.n	8000ee4 <__aeabi_fsub+0x1b0>
 8000e8c:	2bff      	cmp	r3, #255	@ 0xff
 8000e8e:	d062      	beq.n	8000f56 <__aeabi_fsub+0x222>
 8000e90:	0013      	movs	r3, r2
 8000e92:	e773      	b.n	8000d7c <__aeabi_fsub+0x48>
 8000e94:	2900      	cmp	r1, #0
 8000e96:	d0c3      	beq.n	8000e20 <__aeabi_fsub+0xec>
 8000e98:	1e5a      	subs	r2, r3, #1
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_fsub+0x16c>
 8000e9e:	e11e      	b.n	80010de <__aeabi_fsub+0x3aa>
 8000ea0:	2bff      	cmp	r3, #255	@ 0xff
 8000ea2:	d058      	beq.n	8000f56 <__aeabi_fsub+0x222>
 8000ea4:	0013      	movs	r3, r2
 8000ea6:	e7b4      	b.n	8000e12 <__aeabi_fsub+0xde>
 8000ea8:	22fe      	movs	r2, #254	@ 0xfe
 8000eaa:	1c6b      	adds	r3, r5, #1
 8000eac:	421a      	tst	r2, r3
 8000eae:	d10d      	bne.n	8000ecc <__aeabi_fsub+0x198>
 8000eb0:	2d00      	cmp	r5, #0
 8000eb2:	d060      	beq.n	8000f76 <__aeabi_fsub+0x242>
 8000eb4:	4663      	mov	r3, ip
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d000      	beq.n	8000ebc <__aeabi_fsub+0x188>
 8000eba:	e120      	b.n	80010fe <__aeabi_fsub+0x3ca>
 8000ebc:	2900      	cmp	r1, #0
 8000ebe:	d000      	beq.n	8000ec2 <__aeabi_fsub+0x18e>
 8000ec0:	e128      	b.n	8001114 <__aeabi_fsub+0x3e0>
 8000ec2:	2280      	movs	r2, #128	@ 0x80
 8000ec4:	2400      	movs	r4, #0
 8000ec6:	20ff      	movs	r0, #255	@ 0xff
 8000ec8:	03d2      	lsls	r2, r2, #15
 8000eca:	e78f      	b.n	8000dec <__aeabi_fsub+0xb8>
 8000ecc:	4663      	mov	r3, ip
 8000ece:	1a5f      	subs	r7, r3, r1
 8000ed0:	017b      	lsls	r3, r7, #5
 8000ed2:	d500      	bpl.n	8000ed6 <__aeabi_fsub+0x1a2>
 8000ed4:	e0fe      	b.n	80010d4 <__aeabi_fsub+0x3a0>
 8000ed6:	2f00      	cmp	r7, #0
 8000ed8:	d000      	beq.n	8000edc <__aeabi_fsub+0x1a8>
 8000eda:	e765      	b.n	8000da8 <__aeabi_fsub+0x74>
 8000edc:	2400      	movs	r4, #0
 8000ede:	2000      	movs	r0, #0
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	e783      	b.n	8000dec <__aeabi_fsub+0xb8>
 8000ee4:	4663      	mov	r3, ip
 8000ee6:	1a59      	subs	r1, r3, r1
 8000ee8:	014b      	lsls	r3, r1, #5
 8000eea:	d400      	bmi.n	8000eee <__aeabi_fsub+0x1ba>
 8000eec:	e119      	b.n	8001122 <__aeabi_fsub+0x3ee>
 8000eee:	018f      	lsls	r7, r1, #6
 8000ef0:	09bf      	lsrs	r7, r7, #6
 8000ef2:	0038      	movs	r0, r7
 8000ef4:	f001 fe92 	bl	8002c1c <__clzsi2>
 8000ef8:	003b      	movs	r3, r7
 8000efa:	3805      	subs	r0, #5
 8000efc:	4083      	lsls	r3, r0
 8000efe:	2501      	movs	r5, #1
 8000f00:	2220      	movs	r2, #32
 8000f02:	1b40      	subs	r0, r0, r5
 8000f04:	3001      	adds	r0, #1
 8000f06:	1a12      	subs	r2, r2, r0
 8000f08:	0019      	movs	r1, r3
 8000f0a:	4093      	lsls	r3, r2
 8000f0c:	40c1      	lsrs	r1, r0
 8000f0e:	1e5a      	subs	r2, r3, #1
 8000f10:	4193      	sbcs	r3, r2
 8000f12:	4319      	orrs	r1, r3
 8000f14:	468c      	mov	ip, r1
 8000f16:	1e0b      	subs	r3, r1, #0
 8000f18:	d0e1      	beq.n	8000ede <__aeabi_fsub+0x1aa>
 8000f1a:	075b      	lsls	r3, r3, #29
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_fsub+0x1ec>
 8000f1e:	e152      	b.n	80011c6 <__aeabi_fsub+0x492>
 8000f20:	230f      	movs	r3, #15
 8000f22:	2500      	movs	r5, #0
 8000f24:	400b      	ands	r3, r1
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	d000      	beq.n	8000f2c <__aeabi_fsub+0x1f8>
 8000f2a:	e752      	b.n	8000dd2 <__aeabi_fsub+0x9e>
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	014a      	lsls	r2, r1, #5
 8000f30:	d400      	bmi.n	8000f34 <__aeabi_fsub+0x200>
 8000f32:	e092      	b.n	800105a <__aeabi_fsub+0x326>
 8000f34:	b2c0      	uxtb	r0, r0
 8000f36:	4663      	mov	r3, ip
 8000f38:	019a      	lsls	r2, r3, #6
 8000f3a:	0a52      	lsrs	r2, r2, #9
 8000f3c:	e756      	b.n	8000dec <__aeabi_fsub+0xb8>
 8000f3e:	4663      	mov	r3, ip
 8000f40:	075b      	lsls	r3, r3, #29
 8000f42:	d005      	beq.n	8000f50 <__aeabi_fsub+0x21c>
 8000f44:	230f      	movs	r3, #15
 8000f46:	4662      	mov	r2, ip
 8000f48:	4013      	ands	r3, r2
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	d000      	beq.n	8000f50 <__aeabi_fsub+0x21c>
 8000f4e:	e740      	b.n	8000dd2 <__aeabi_fsub+0x9e>
 8000f50:	002b      	movs	r3, r5
 8000f52:	e765      	b.n	8000e20 <__aeabi_fsub+0xec>
 8000f54:	0007      	movs	r7, r0
 8000f56:	2f00      	cmp	r7, #0
 8000f58:	d100      	bne.n	8000f5c <__aeabi_fsub+0x228>
 8000f5a:	e745      	b.n	8000de8 <__aeabi_fsub+0xb4>
 8000f5c:	2280      	movs	r2, #128	@ 0x80
 8000f5e:	03d2      	lsls	r2, r2, #15
 8000f60:	433a      	orrs	r2, r7
 8000f62:	0252      	lsls	r2, r2, #9
 8000f64:	20ff      	movs	r0, #255	@ 0xff
 8000f66:	0a52      	lsrs	r2, r2, #9
 8000f68:	e740      	b.n	8000dec <__aeabi_fsub+0xb8>
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d179      	bne.n	8001062 <__aeabi_fsub+0x32e>
 8000f6e:	22fe      	movs	r2, #254	@ 0xfe
 8000f70:	1c6b      	adds	r3, r5, #1
 8000f72:	421a      	tst	r2, r3
 8000f74:	d1aa      	bne.n	8000ecc <__aeabi_fsub+0x198>
 8000f76:	4663      	mov	r3, ip
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_fsub+0x24a>
 8000f7c:	e0f5      	b.n	800116a <__aeabi_fsub+0x436>
 8000f7e:	2900      	cmp	r1, #0
 8000f80:	d100      	bne.n	8000f84 <__aeabi_fsub+0x250>
 8000f82:	e0d1      	b.n	8001128 <__aeabi_fsub+0x3f4>
 8000f84:	1a5f      	subs	r7, r3, r1
 8000f86:	2380      	movs	r3, #128	@ 0x80
 8000f88:	04db      	lsls	r3, r3, #19
 8000f8a:	421f      	tst	r7, r3
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_fsub+0x25c>
 8000f8e:	e10e      	b.n	80011ae <__aeabi_fsub+0x47a>
 8000f90:	4662      	mov	r2, ip
 8000f92:	2401      	movs	r4, #1
 8000f94:	1a8a      	subs	r2, r1, r2
 8000f96:	4694      	mov	ip, r2
 8000f98:	2000      	movs	r0, #0
 8000f9a:	4034      	ands	r4, r6
 8000f9c:	2a00      	cmp	r2, #0
 8000f9e:	d100      	bne.n	8000fa2 <__aeabi_fsub+0x26e>
 8000fa0:	e724      	b.n	8000dec <__aeabi_fsub+0xb8>
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	421a      	tst	r2, r3
 8000fa6:	d1c6      	bne.n	8000f36 <__aeabi_fsub+0x202>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	08d7      	lsrs	r7, r2, #3
 8000fac:	e73d      	b.n	8000e2a <__aeabi_fsub+0xf6>
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d017      	beq.n	8000fe2 <__aeabi_fsub+0x2ae>
 8000fb2:	2d00      	cmp	r5, #0
 8000fb4:	d000      	beq.n	8000fb8 <__aeabi_fsub+0x284>
 8000fb6:	e0af      	b.n	8001118 <__aeabi_fsub+0x3e4>
 8000fb8:	23ff      	movs	r3, #255	@ 0xff
 8000fba:	4665      	mov	r5, ip
 8000fbc:	2d00      	cmp	r5, #0
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_fsub+0x28e>
 8000fc0:	e0ad      	b.n	800111e <__aeabi_fsub+0x3ea>
 8000fc2:	1e5e      	subs	r6, r3, #1
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d100      	bne.n	8000fca <__aeabi_fsub+0x296>
 8000fc8:	e089      	b.n	80010de <__aeabi_fsub+0x3aa>
 8000fca:	2bff      	cmp	r3, #255	@ 0xff
 8000fcc:	d0c2      	beq.n	8000f54 <__aeabi_fsub+0x220>
 8000fce:	2e1b      	cmp	r6, #27
 8000fd0:	dc00      	bgt.n	8000fd4 <__aeabi_fsub+0x2a0>
 8000fd2:	e0ab      	b.n	800112c <__aeabi_fsub+0x3f8>
 8000fd4:	1d4b      	adds	r3, r1, #5
 8000fd6:	469c      	mov	ip, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	e721      	b.n	8000e20 <__aeabi_fsub+0xec>
 8000fdc:	464b      	mov	r3, r9
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d170      	bne.n	80010c4 <__aeabi_fsub+0x390>
 8000fe2:	22fe      	movs	r2, #254	@ 0xfe
 8000fe4:	1c6b      	adds	r3, r5, #1
 8000fe6:	421a      	tst	r2, r3
 8000fe8:	d15e      	bne.n	80010a8 <__aeabi_fsub+0x374>
 8000fea:	2d00      	cmp	r5, #0
 8000fec:	d000      	beq.n	8000ff0 <__aeabi_fsub+0x2bc>
 8000fee:	e0c3      	b.n	8001178 <__aeabi_fsub+0x444>
 8000ff0:	4663      	mov	r3, ip
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_fsub+0x2c4>
 8000ff6:	e0d0      	b.n	800119a <__aeabi_fsub+0x466>
 8000ff8:	2900      	cmp	r1, #0
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_fsub+0x2ca>
 8000ffc:	e094      	b.n	8001128 <__aeabi_fsub+0x3f4>
 8000ffe:	000a      	movs	r2, r1
 8001000:	4462      	add	r2, ip
 8001002:	0153      	lsls	r3, r2, #5
 8001004:	d400      	bmi.n	8001008 <__aeabi_fsub+0x2d4>
 8001006:	e0d8      	b.n	80011ba <__aeabi_fsub+0x486>
 8001008:	0192      	lsls	r2, r2, #6
 800100a:	2001      	movs	r0, #1
 800100c:	0a52      	lsrs	r2, r2, #9
 800100e:	e6ed      	b.n	8000dec <__aeabi_fsub+0xb8>
 8001010:	0008      	movs	r0, r1
 8001012:	2220      	movs	r2, #32
 8001014:	40d8      	lsrs	r0, r3
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	4099      	lsls	r1, r3
 800101a:	000b      	movs	r3, r1
 800101c:	1e5a      	subs	r2, r3, #1
 800101e:	4193      	sbcs	r3, r2
 8001020:	4303      	orrs	r3, r0
 8001022:	449c      	add	ip, r3
 8001024:	4663      	mov	r3, ip
 8001026:	015b      	lsls	r3, r3, #5
 8001028:	d589      	bpl.n	8000f3e <__aeabi_fsub+0x20a>
 800102a:	3501      	adds	r5, #1
 800102c:	2dff      	cmp	r5, #255	@ 0xff
 800102e:	d100      	bne.n	8001032 <__aeabi_fsub+0x2fe>
 8001030:	e6da      	b.n	8000de8 <__aeabi_fsub+0xb4>
 8001032:	4662      	mov	r2, ip
 8001034:	2301      	movs	r3, #1
 8001036:	4919      	ldr	r1, [pc, #100]	@ (800109c <__aeabi_fsub+0x368>)
 8001038:	4013      	ands	r3, r2
 800103a:	0852      	lsrs	r2, r2, #1
 800103c:	400a      	ands	r2, r1
 800103e:	431a      	orrs	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	4694      	mov	ip, r2
 8001044:	075b      	lsls	r3, r3, #29
 8001046:	d004      	beq.n	8001052 <__aeabi_fsub+0x31e>
 8001048:	230f      	movs	r3, #15
 800104a:	4013      	ands	r3, r2
 800104c:	2b04      	cmp	r3, #4
 800104e:	d000      	beq.n	8001052 <__aeabi_fsub+0x31e>
 8001050:	e6bf      	b.n	8000dd2 <__aeabi_fsub+0x9e>
 8001052:	4663      	mov	r3, ip
 8001054:	015b      	lsls	r3, r3, #5
 8001056:	d500      	bpl.n	800105a <__aeabi_fsub+0x326>
 8001058:	e6c2      	b.n	8000de0 <__aeabi_fsub+0xac>
 800105a:	4663      	mov	r3, ip
 800105c:	08df      	lsrs	r7, r3, #3
 800105e:	002b      	movs	r3, r5
 8001060:	e6e3      	b.n	8000e2a <__aeabi_fsub+0xf6>
 8001062:	1b53      	subs	r3, r2, r5
 8001064:	2d00      	cmp	r5, #0
 8001066:	d100      	bne.n	800106a <__aeabi_fsub+0x336>
 8001068:	e6f4      	b.n	8000e54 <__aeabi_fsub+0x120>
 800106a:	2080      	movs	r0, #128	@ 0x80
 800106c:	4664      	mov	r4, ip
 800106e:	04c0      	lsls	r0, r0, #19
 8001070:	4304      	orrs	r4, r0
 8001072:	46a4      	mov	ip, r4
 8001074:	0034      	movs	r4, r6
 8001076:	2001      	movs	r0, #1
 8001078:	2b1b      	cmp	r3, #27
 800107a:	dc09      	bgt.n	8001090 <__aeabi_fsub+0x35c>
 800107c:	2520      	movs	r5, #32
 800107e:	4660      	mov	r0, ip
 8001080:	40d8      	lsrs	r0, r3
 8001082:	1aeb      	subs	r3, r5, r3
 8001084:	4665      	mov	r5, ip
 8001086:	409d      	lsls	r5, r3
 8001088:	002b      	movs	r3, r5
 800108a:	1e5d      	subs	r5, r3, #1
 800108c:	41ab      	sbcs	r3, r5
 800108e:	4318      	orrs	r0, r3
 8001090:	1a0b      	subs	r3, r1, r0
 8001092:	469c      	mov	ip, r3
 8001094:	0015      	movs	r5, r2
 8001096:	e680      	b.n	8000d9a <__aeabi_fsub+0x66>
 8001098:	fbffffff 	.word	0xfbffffff
 800109c:	7dffffff 	.word	0x7dffffff
 80010a0:	22fe      	movs	r2, #254	@ 0xfe
 80010a2:	1c6b      	adds	r3, r5, #1
 80010a4:	4213      	tst	r3, r2
 80010a6:	d0a3      	beq.n	8000ff0 <__aeabi_fsub+0x2bc>
 80010a8:	2bff      	cmp	r3, #255	@ 0xff
 80010aa:	d100      	bne.n	80010ae <__aeabi_fsub+0x37a>
 80010ac:	e69c      	b.n	8000de8 <__aeabi_fsub+0xb4>
 80010ae:	4461      	add	r1, ip
 80010b0:	0849      	lsrs	r1, r1, #1
 80010b2:	074a      	lsls	r2, r1, #29
 80010b4:	d049      	beq.n	800114a <__aeabi_fsub+0x416>
 80010b6:	220f      	movs	r2, #15
 80010b8:	400a      	ands	r2, r1
 80010ba:	2a04      	cmp	r2, #4
 80010bc:	d045      	beq.n	800114a <__aeabi_fsub+0x416>
 80010be:	1d0a      	adds	r2, r1, #4
 80010c0:	4694      	mov	ip, r2
 80010c2:	e6ad      	b.n	8000e20 <__aeabi_fsub+0xec>
 80010c4:	2d00      	cmp	r5, #0
 80010c6:	d100      	bne.n	80010ca <__aeabi_fsub+0x396>
 80010c8:	e776      	b.n	8000fb8 <__aeabi_fsub+0x284>
 80010ca:	e68d      	b.n	8000de8 <__aeabi_fsub+0xb4>
 80010cc:	0034      	movs	r4, r6
 80010ce:	20ff      	movs	r0, #255	@ 0xff
 80010d0:	2200      	movs	r2, #0
 80010d2:	e68b      	b.n	8000dec <__aeabi_fsub+0xb8>
 80010d4:	4663      	mov	r3, ip
 80010d6:	2401      	movs	r4, #1
 80010d8:	1acf      	subs	r7, r1, r3
 80010da:	4034      	ands	r4, r6
 80010dc:	e664      	b.n	8000da8 <__aeabi_fsub+0x74>
 80010de:	4461      	add	r1, ip
 80010e0:	014b      	lsls	r3, r1, #5
 80010e2:	d56d      	bpl.n	80011c0 <__aeabi_fsub+0x48c>
 80010e4:	0848      	lsrs	r0, r1, #1
 80010e6:	4944      	ldr	r1, [pc, #272]	@ (80011f8 <__aeabi_fsub+0x4c4>)
 80010e8:	4001      	ands	r1, r0
 80010ea:	0743      	lsls	r3, r0, #29
 80010ec:	d02c      	beq.n	8001148 <__aeabi_fsub+0x414>
 80010ee:	230f      	movs	r3, #15
 80010f0:	4003      	ands	r3, r0
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	d028      	beq.n	8001148 <__aeabi_fsub+0x414>
 80010f6:	1d0b      	adds	r3, r1, #4
 80010f8:	469c      	mov	ip, r3
 80010fa:	2302      	movs	r3, #2
 80010fc:	e690      	b.n	8000e20 <__aeabi_fsub+0xec>
 80010fe:	2900      	cmp	r1, #0
 8001100:	d100      	bne.n	8001104 <__aeabi_fsub+0x3d0>
 8001102:	e72b      	b.n	8000f5c <__aeabi_fsub+0x228>
 8001104:	2380      	movs	r3, #128	@ 0x80
 8001106:	03db      	lsls	r3, r3, #15
 8001108:	429f      	cmp	r7, r3
 800110a:	d200      	bcs.n	800110e <__aeabi_fsub+0x3da>
 800110c:	e726      	b.n	8000f5c <__aeabi_fsub+0x228>
 800110e:	4298      	cmp	r0, r3
 8001110:	d300      	bcc.n	8001114 <__aeabi_fsub+0x3e0>
 8001112:	e723      	b.n	8000f5c <__aeabi_fsub+0x228>
 8001114:	2401      	movs	r4, #1
 8001116:	4034      	ands	r4, r6
 8001118:	0007      	movs	r7, r0
 800111a:	e71f      	b.n	8000f5c <__aeabi_fsub+0x228>
 800111c:	0034      	movs	r4, r6
 800111e:	468c      	mov	ip, r1
 8001120:	e67e      	b.n	8000e20 <__aeabi_fsub+0xec>
 8001122:	2301      	movs	r3, #1
 8001124:	08cf      	lsrs	r7, r1, #3
 8001126:	e680      	b.n	8000e2a <__aeabi_fsub+0xf6>
 8001128:	2300      	movs	r3, #0
 800112a:	e67e      	b.n	8000e2a <__aeabi_fsub+0xf6>
 800112c:	2020      	movs	r0, #32
 800112e:	4665      	mov	r5, ip
 8001130:	1b80      	subs	r0, r0, r6
 8001132:	4085      	lsls	r5, r0
 8001134:	4663      	mov	r3, ip
 8001136:	0028      	movs	r0, r5
 8001138:	40f3      	lsrs	r3, r6
 800113a:	1e45      	subs	r5, r0, #1
 800113c:	41a8      	sbcs	r0, r5
 800113e:	4303      	orrs	r3, r0
 8001140:	469c      	mov	ip, r3
 8001142:	0015      	movs	r5, r2
 8001144:	448c      	add	ip, r1
 8001146:	e76d      	b.n	8001024 <__aeabi_fsub+0x2f0>
 8001148:	2302      	movs	r3, #2
 800114a:	08cf      	lsrs	r7, r1, #3
 800114c:	e66d      	b.n	8000e2a <__aeabi_fsub+0xf6>
 800114e:	1b0f      	subs	r7, r1, r4
 8001150:	017b      	lsls	r3, r7, #5
 8001152:	d528      	bpl.n	80011a6 <__aeabi_fsub+0x472>
 8001154:	01bf      	lsls	r7, r7, #6
 8001156:	09bf      	lsrs	r7, r7, #6
 8001158:	0038      	movs	r0, r7
 800115a:	f001 fd5f 	bl	8002c1c <__clzsi2>
 800115e:	003b      	movs	r3, r7
 8001160:	3805      	subs	r0, #5
 8001162:	4083      	lsls	r3, r0
 8001164:	0034      	movs	r4, r6
 8001166:	2501      	movs	r5, #1
 8001168:	e6ca      	b.n	8000f00 <__aeabi_fsub+0x1cc>
 800116a:	2900      	cmp	r1, #0
 800116c:	d100      	bne.n	8001170 <__aeabi_fsub+0x43c>
 800116e:	e6b5      	b.n	8000edc <__aeabi_fsub+0x1a8>
 8001170:	2401      	movs	r4, #1
 8001172:	0007      	movs	r7, r0
 8001174:	4034      	ands	r4, r6
 8001176:	e658      	b.n	8000e2a <__aeabi_fsub+0xf6>
 8001178:	4663      	mov	r3, ip
 800117a:	2b00      	cmp	r3, #0
 800117c:	d100      	bne.n	8001180 <__aeabi_fsub+0x44c>
 800117e:	e6e9      	b.n	8000f54 <__aeabi_fsub+0x220>
 8001180:	2900      	cmp	r1, #0
 8001182:	d100      	bne.n	8001186 <__aeabi_fsub+0x452>
 8001184:	e6ea      	b.n	8000f5c <__aeabi_fsub+0x228>
 8001186:	2380      	movs	r3, #128	@ 0x80
 8001188:	03db      	lsls	r3, r3, #15
 800118a:	429f      	cmp	r7, r3
 800118c:	d200      	bcs.n	8001190 <__aeabi_fsub+0x45c>
 800118e:	e6e5      	b.n	8000f5c <__aeabi_fsub+0x228>
 8001190:	4298      	cmp	r0, r3
 8001192:	d300      	bcc.n	8001196 <__aeabi_fsub+0x462>
 8001194:	e6e2      	b.n	8000f5c <__aeabi_fsub+0x228>
 8001196:	0007      	movs	r7, r0
 8001198:	e6e0      	b.n	8000f5c <__aeabi_fsub+0x228>
 800119a:	2900      	cmp	r1, #0
 800119c:	d100      	bne.n	80011a0 <__aeabi_fsub+0x46c>
 800119e:	e69e      	b.n	8000ede <__aeabi_fsub+0x1aa>
 80011a0:	2300      	movs	r3, #0
 80011a2:	08cf      	lsrs	r7, r1, #3
 80011a4:	e641      	b.n	8000e2a <__aeabi_fsub+0xf6>
 80011a6:	0034      	movs	r4, r6
 80011a8:	2301      	movs	r3, #1
 80011aa:	08ff      	lsrs	r7, r7, #3
 80011ac:	e63d      	b.n	8000e2a <__aeabi_fsub+0xf6>
 80011ae:	2f00      	cmp	r7, #0
 80011b0:	d100      	bne.n	80011b4 <__aeabi_fsub+0x480>
 80011b2:	e693      	b.n	8000edc <__aeabi_fsub+0x1a8>
 80011b4:	2300      	movs	r3, #0
 80011b6:	08ff      	lsrs	r7, r7, #3
 80011b8:	e637      	b.n	8000e2a <__aeabi_fsub+0xf6>
 80011ba:	2300      	movs	r3, #0
 80011bc:	08d7      	lsrs	r7, r2, #3
 80011be:	e634      	b.n	8000e2a <__aeabi_fsub+0xf6>
 80011c0:	2301      	movs	r3, #1
 80011c2:	08cf      	lsrs	r7, r1, #3
 80011c4:	e631      	b.n	8000e2a <__aeabi_fsub+0xf6>
 80011c6:	2280      	movs	r2, #128	@ 0x80
 80011c8:	000b      	movs	r3, r1
 80011ca:	04d2      	lsls	r2, r2, #19
 80011cc:	2001      	movs	r0, #1
 80011ce:	4013      	ands	r3, r2
 80011d0:	4211      	tst	r1, r2
 80011d2:	d000      	beq.n	80011d6 <__aeabi_fsub+0x4a2>
 80011d4:	e6ae      	b.n	8000f34 <__aeabi_fsub+0x200>
 80011d6:	08cf      	lsrs	r7, r1, #3
 80011d8:	e627      	b.n	8000e2a <__aeabi_fsub+0xf6>
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d100      	bne.n	80011e0 <__aeabi_fsub+0x4ac>
 80011de:	e75f      	b.n	80010a0 <__aeabi_fsub+0x36c>
 80011e0:	1b56      	subs	r6, r2, r5
 80011e2:	2d00      	cmp	r5, #0
 80011e4:	d101      	bne.n	80011ea <__aeabi_fsub+0x4b6>
 80011e6:	0033      	movs	r3, r6
 80011e8:	e6e7      	b.n	8000fba <__aeabi_fsub+0x286>
 80011ea:	2380      	movs	r3, #128	@ 0x80
 80011ec:	4660      	mov	r0, ip
 80011ee:	04db      	lsls	r3, r3, #19
 80011f0:	4318      	orrs	r0, r3
 80011f2:	4684      	mov	ip, r0
 80011f4:	e6eb      	b.n	8000fce <__aeabi_fsub+0x29a>
 80011f6:	46c0      	nop			@ (mov r8, r8)
 80011f8:	7dffffff 	.word	0x7dffffff

080011fc <__aeabi_f2iz>:
 80011fc:	0241      	lsls	r1, r0, #9
 80011fe:	0042      	lsls	r2, r0, #1
 8001200:	0fc3      	lsrs	r3, r0, #31
 8001202:	0a49      	lsrs	r1, r1, #9
 8001204:	2000      	movs	r0, #0
 8001206:	0e12      	lsrs	r2, r2, #24
 8001208:	2a7e      	cmp	r2, #126	@ 0x7e
 800120a:	dd03      	ble.n	8001214 <__aeabi_f2iz+0x18>
 800120c:	2a9d      	cmp	r2, #157	@ 0x9d
 800120e:	dd02      	ble.n	8001216 <__aeabi_f2iz+0x1a>
 8001210:	4a09      	ldr	r2, [pc, #36]	@ (8001238 <__aeabi_f2iz+0x3c>)
 8001212:	1898      	adds	r0, r3, r2
 8001214:	4770      	bx	lr
 8001216:	2080      	movs	r0, #128	@ 0x80
 8001218:	0400      	lsls	r0, r0, #16
 800121a:	4301      	orrs	r1, r0
 800121c:	2a95      	cmp	r2, #149	@ 0x95
 800121e:	dc07      	bgt.n	8001230 <__aeabi_f2iz+0x34>
 8001220:	2096      	movs	r0, #150	@ 0x96
 8001222:	1a82      	subs	r2, r0, r2
 8001224:	40d1      	lsrs	r1, r2
 8001226:	4248      	negs	r0, r1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f3      	bne.n	8001214 <__aeabi_f2iz+0x18>
 800122c:	0008      	movs	r0, r1
 800122e:	e7f1      	b.n	8001214 <__aeabi_f2iz+0x18>
 8001230:	3a96      	subs	r2, #150	@ 0x96
 8001232:	4091      	lsls	r1, r2
 8001234:	e7f7      	b.n	8001226 <__aeabi_f2iz+0x2a>
 8001236:	46c0      	nop			@ (mov r8, r8)
 8001238:	7fffffff 	.word	0x7fffffff

0800123c <__aeabi_i2f>:
 800123c:	b570      	push	{r4, r5, r6, lr}
 800123e:	2800      	cmp	r0, #0
 8001240:	d012      	beq.n	8001268 <__aeabi_i2f+0x2c>
 8001242:	17c3      	asrs	r3, r0, #31
 8001244:	18c5      	adds	r5, r0, r3
 8001246:	405d      	eors	r5, r3
 8001248:	0fc4      	lsrs	r4, r0, #31
 800124a:	0028      	movs	r0, r5
 800124c:	f001 fce6 	bl	8002c1c <__clzsi2>
 8001250:	239e      	movs	r3, #158	@ 0x9e
 8001252:	1a1b      	subs	r3, r3, r0
 8001254:	2b96      	cmp	r3, #150	@ 0x96
 8001256:	dc0f      	bgt.n	8001278 <__aeabi_i2f+0x3c>
 8001258:	2808      	cmp	r0, #8
 800125a:	d038      	beq.n	80012ce <__aeabi_i2f+0x92>
 800125c:	3808      	subs	r0, #8
 800125e:	4085      	lsls	r5, r0
 8001260:	026d      	lsls	r5, r5, #9
 8001262:	0a6d      	lsrs	r5, r5, #9
 8001264:	b2d8      	uxtb	r0, r3
 8001266:	e002      	b.n	800126e <__aeabi_i2f+0x32>
 8001268:	2400      	movs	r4, #0
 800126a:	2000      	movs	r0, #0
 800126c:	2500      	movs	r5, #0
 800126e:	05c0      	lsls	r0, r0, #23
 8001270:	4328      	orrs	r0, r5
 8001272:	07e4      	lsls	r4, r4, #31
 8001274:	4320      	orrs	r0, r4
 8001276:	bd70      	pop	{r4, r5, r6, pc}
 8001278:	2b99      	cmp	r3, #153	@ 0x99
 800127a:	dc14      	bgt.n	80012a6 <__aeabi_i2f+0x6a>
 800127c:	1f42      	subs	r2, r0, #5
 800127e:	4095      	lsls	r5, r2
 8001280:	002a      	movs	r2, r5
 8001282:	4915      	ldr	r1, [pc, #84]	@ (80012d8 <__aeabi_i2f+0x9c>)
 8001284:	4011      	ands	r1, r2
 8001286:	0755      	lsls	r5, r2, #29
 8001288:	d01c      	beq.n	80012c4 <__aeabi_i2f+0x88>
 800128a:	250f      	movs	r5, #15
 800128c:	402a      	ands	r2, r5
 800128e:	2a04      	cmp	r2, #4
 8001290:	d018      	beq.n	80012c4 <__aeabi_i2f+0x88>
 8001292:	3104      	adds	r1, #4
 8001294:	08ca      	lsrs	r2, r1, #3
 8001296:	0149      	lsls	r1, r1, #5
 8001298:	d515      	bpl.n	80012c6 <__aeabi_i2f+0x8a>
 800129a:	239f      	movs	r3, #159	@ 0x9f
 800129c:	0252      	lsls	r2, r2, #9
 800129e:	1a18      	subs	r0, r3, r0
 80012a0:	0a55      	lsrs	r5, r2, #9
 80012a2:	b2c0      	uxtb	r0, r0
 80012a4:	e7e3      	b.n	800126e <__aeabi_i2f+0x32>
 80012a6:	2205      	movs	r2, #5
 80012a8:	0029      	movs	r1, r5
 80012aa:	1a12      	subs	r2, r2, r0
 80012ac:	40d1      	lsrs	r1, r2
 80012ae:	0002      	movs	r2, r0
 80012b0:	321b      	adds	r2, #27
 80012b2:	4095      	lsls	r5, r2
 80012b4:	002a      	movs	r2, r5
 80012b6:	1e55      	subs	r5, r2, #1
 80012b8:	41aa      	sbcs	r2, r5
 80012ba:	430a      	orrs	r2, r1
 80012bc:	4906      	ldr	r1, [pc, #24]	@ (80012d8 <__aeabi_i2f+0x9c>)
 80012be:	4011      	ands	r1, r2
 80012c0:	0755      	lsls	r5, r2, #29
 80012c2:	d1e2      	bne.n	800128a <__aeabi_i2f+0x4e>
 80012c4:	08ca      	lsrs	r2, r1, #3
 80012c6:	0252      	lsls	r2, r2, #9
 80012c8:	0a55      	lsrs	r5, r2, #9
 80012ca:	b2d8      	uxtb	r0, r3
 80012cc:	e7cf      	b.n	800126e <__aeabi_i2f+0x32>
 80012ce:	026d      	lsls	r5, r5, #9
 80012d0:	0a6d      	lsrs	r5, r5, #9
 80012d2:	308e      	adds	r0, #142	@ 0x8e
 80012d4:	e7cb      	b.n	800126e <__aeabi_i2f+0x32>
 80012d6:	46c0      	nop			@ (mov r8, r8)
 80012d8:	fbffffff 	.word	0xfbffffff

080012dc <__aeabi_ui2f>:
 80012dc:	b510      	push	{r4, lr}
 80012de:	1e04      	subs	r4, r0, #0
 80012e0:	d00d      	beq.n	80012fe <__aeabi_ui2f+0x22>
 80012e2:	f001 fc9b 	bl	8002c1c <__clzsi2>
 80012e6:	239e      	movs	r3, #158	@ 0x9e
 80012e8:	1a1b      	subs	r3, r3, r0
 80012ea:	2b96      	cmp	r3, #150	@ 0x96
 80012ec:	dc0c      	bgt.n	8001308 <__aeabi_ui2f+0x2c>
 80012ee:	2808      	cmp	r0, #8
 80012f0:	d034      	beq.n	800135c <__aeabi_ui2f+0x80>
 80012f2:	3808      	subs	r0, #8
 80012f4:	4084      	lsls	r4, r0
 80012f6:	0264      	lsls	r4, r4, #9
 80012f8:	0a64      	lsrs	r4, r4, #9
 80012fa:	b2d8      	uxtb	r0, r3
 80012fc:	e001      	b.n	8001302 <__aeabi_ui2f+0x26>
 80012fe:	2000      	movs	r0, #0
 8001300:	2400      	movs	r4, #0
 8001302:	05c0      	lsls	r0, r0, #23
 8001304:	4320      	orrs	r0, r4
 8001306:	bd10      	pop	{r4, pc}
 8001308:	2b99      	cmp	r3, #153	@ 0x99
 800130a:	dc13      	bgt.n	8001334 <__aeabi_ui2f+0x58>
 800130c:	1f42      	subs	r2, r0, #5
 800130e:	4094      	lsls	r4, r2
 8001310:	4a14      	ldr	r2, [pc, #80]	@ (8001364 <__aeabi_ui2f+0x88>)
 8001312:	4022      	ands	r2, r4
 8001314:	0761      	lsls	r1, r4, #29
 8001316:	d01c      	beq.n	8001352 <__aeabi_ui2f+0x76>
 8001318:	210f      	movs	r1, #15
 800131a:	4021      	ands	r1, r4
 800131c:	2904      	cmp	r1, #4
 800131e:	d018      	beq.n	8001352 <__aeabi_ui2f+0x76>
 8001320:	3204      	adds	r2, #4
 8001322:	08d4      	lsrs	r4, r2, #3
 8001324:	0152      	lsls	r2, r2, #5
 8001326:	d515      	bpl.n	8001354 <__aeabi_ui2f+0x78>
 8001328:	239f      	movs	r3, #159	@ 0x9f
 800132a:	0264      	lsls	r4, r4, #9
 800132c:	1a18      	subs	r0, r3, r0
 800132e:	0a64      	lsrs	r4, r4, #9
 8001330:	b2c0      	uxtb	r0, r0
 8001332:	e7e6      	b.n	8001302 <__aeabi_ui2f+0x26>
 8001334:	0002      	movs	r2, r0
 8001336:	0021      	movs	r1, r4
 8001338:	321b      	adds	r2, #27
 800133a:	4091      	lsls	r1, r2
 800133c:	000a      	movs	r2, r1
 800133e:	1e51      	subs	r1, r2, #1
 8001340:	418a      	sbcs	r2, r1
 8001342:	2105      	movs	r1, #5
 8001344:	1a09      	subs	r1, r1, r0
 8001346:	40cc      	lsrs	r4, r1
 8001348:	4314      	orrs	r4, r2
 800134a:	4a06      	ldr	r2, [pc, #24]	@ (8001364 <__aeabi_ui2f+0x88>)
 800134c:	4022      	ands	r2, r4
 800134e:	0761      	lsls	r1, r4, #29
 8001350:	d1e2      	bne.n	8001318 <__aeabi_ui2f+0x3c>
 8001352:	08d4      	lsrs	r4, r2, #3
 8001354:	0264      	lsls	r4, r4, #9
 8001356:	0a64      	lsrs	r4, r4, #9
 8001358:	b2d8      	uxtb	r0, r3
 800135a:	e7d2      	b.n	8001302 <__aeabi_ui2f+0x26>
 800135c:	0264      	lsls	r4, r4, #9
 800135e:	0a64      	lsrs	r4, r4, #9
 8001360:	308e      	adds	r0, #142	@ 0x8e
 8001362:	e7ce      	b.n	8001302 <__aeabi_ui2f+0x26>
 8001364:	fbffffff 	.word	0xfbffffff

08001368 <__aeabi_dadd>:
 8001368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136a:	464f      	mov	r7, r9
 800136c:	4646      	mov	r6, r8
 800136e:	46d6      	mov	lr, sl
 8001370:	b5c0      	push	{r6, r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	9000      	str	r0, [sp, #0]
 8001376:	9101      	str	r1, [sp, #4]
 8001378:	030e      	lsls	r6, r1, #12
 800137a:	004c      	lsls	r4, r1, #1
 800137c:	0fcd      	lsrs	r5, r1, #31
 800137e:	0a71      	lsrs	r1, r6, #9
 8001380:	9e00      	ldr	r6, [sp, #0]
 8001382:	005f      	lsls	r7, r3, #1
 8001384:	0f76      	lsrs	r6, r6, #29
 8001386:	430e      	orrs	r6, r1
 8001388:	9900      	ldr	r1, [sp, #0]
 800138a:	9200      	str	r2, [sp, #0]
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	00c9      	lsls	r1, r1, #3
 8001390:	4689      	mov	r9, r1
 8001392:	0319      	lsls	r1, r3, #12
 8001394:	0d7b      	lsrs	r3, r7, #21
 8001396:	4698      	mov	r8, r3
 8001398:	9b01      	ldr	r3, [sp, #4]
 800139a:	0a49      	lsrs	r1, r1, #9
 800139c:	0fdb      	lsrs	r3, r3, #31
 800139e:	469c      	mov	ip, r3
 80013a0:	9b00      	ldr	r3, [sp, #0]
 80013a2:	9a00      	ldr	r2, [sp, #0]
 80013a4:	0f5b      	lsrs	r3, r3, #29
 80013a6:	430b      	orrs	r3, r1
 80013a8:	4641      	mov	r1, r8
 80013aa:	0d64      	lsrs	r4, r4, #21
 80013ac:	00d2      	lsls	r2, r2, #3
 80013ae:	1a61      	subs	r1, r4, r1
 80013b0:	4565      	cmp	r5, ip
 80013b2:	d100      	bne.n	80013b6 <__aeabi_dadd+0x4e>
 80013b4:	e0a6      	b.n	8001504 <__aeabi_dadd+0x19c>
 80013b6:	2900      	cmp	r1, #0
 80013b8:	dd72      	ble.n	80014a0 <__aeabi_dadd+0x138>
 80013ba:	4647      	mov	r7, r8
 80013bc:	2f00      	cmp	r7, #0
 80013be:	d100      	bne.n	80013c2 <__aeabi_dadd+0x5a>
 80013c0:	e0dd      	b.n	800157e <__aeabi_dadd+0x216>
 80013c2:	4fcc      	ldr	r7, [pc, #816]	@ (80016f4 <__aeabi_dadd+0x38c>)
 80013c4:	42bc      	cmp	r4, r7
 80013c6:	d100      	bne.n	80013ca <__aeabi_dadd+0x62>
 80013c8:	e19a      	b.n	8001700 <__aeabi_dadd+0x398>
 80013ca:	2701      	movs	r7, #1
 80013cc:	2938      	cmp	r1, #56	@ 0x38
 80013ce:	dc17      	bgt.n	8001400 <__aeabi_dadd+0x98>
 80013d0:	2780      	movs	r7, #128	@ 0x80
 80013d2:	043f      	lsls	r7, r7, #16
 80013d4:	433b      	orrs	r3, r7
 80013d6:	291f      	cmp	r1, #31
 80013d8:	dd00      	ble.n	80013dc <__aeabi_dadd+0x74>
 80013da:	e1dd      	b.n	8001798 <__aeabi_dadd+0x430>
 80013dc:	2720      	movs	r7, #32
 80013de:	1a78      	subs	r0, r7, r1
 80013e0:	001f      	movs	r7, r3
 80013e2:	4087      	lsls	r7, r0
 80013e4:	46ba      	mov	sl, r7
 80013e6:	0017      	movs	r7, r2
 80013e8:	40cf      	lsrs	r7, r1
 80013ea:	4684      	mov	ip, r0
 80013ec:	0038      	movs	r0, r7
 80013ee:	4657      	mov	r7, sl
 80013f0:	4307      	orrs	r7, r0
 80013f2:	4660      	mov	r0, ip
 80013f4:	4082      	lsls	r2, r0
 80013f6:	40cb      	lsrs	r3, r1
 80013f8:	1e50      	subs	r0, r2, #1
 80013fa:	4182      	sbcs	r2, r0
 80013fc:	1af6      	subs	r6, r6, r3
 80013fe:	4317      	orrs	r7, r2
 8001400:	464b      	mov	r3, r9
 8001402:	1bdf      	subs	r7, r3, r7
 8001404:	45b9      	cmp	r9, r7
 8001406:	4180      	sbcs	r0, r0
 8001408:	4240      	negs	r0, r0
 800140a:	1a36      	subs	r6, r6, r0
 800140c:	0233      	lsls	r3, r6, #8
 800140e:	d400      	bmi.n	8001412 <__aeabi_dadd+0xaa>
 8001410:	e0ff      	b.n	8001612 <__aeabi_dadd+0x2aa>
 8001412:	0276      	lsls	r6, r6, #9
 8001414:	0a76      	lsrs	r6, r6, #9
 8001416:	2e00      	cmp	r6, #0
 8001418:	d100      	bne.n	800141c <__aeabi_dadd+0xb4>
 800141a:	e13c      	b.n	8001696 <__aeabi_dadd+0x32e>
 800141c:	0030      	movs	r0, r6
 800141e:	f001 fbfd 	bl	8002c1c <__clzsi2>
 8001422:	0003      	movs	r3, r0
 8001424:	3b08      	subs	r3, #8
 8001426:	2120      	movs	r1, #32
 8001428:	0038      	movs	r0, r7
 800142a:	1aca      	subs	r2, r1, r3
 800142c:	40d0      	lsrs	r0, r2
 800142e:	409e      	lsls	r6, r3
 8001430:	0002      	movs	r2, r0
 8001432:	409f      	lsls	r7, r3
 8001434:	4332      	orrs	r2, r6
 8001436:	429c      	cmp	r4, r3
 8001438:	dd00      	ble.n	800143c <__aeabi_dadd+0xd4>
 800143a:	e1a6      	b.n	800178a <__aeabi_dadd+0x422>
 800143c:	1b18      	subs	r0, r3, r4
 800143e:	3001      	adds	r0, #1
 8001440:	1a09      	subs	r1, r1, r0
 8001442:	003e      	movs	r6, r7
 8001444:	408f      	lsls	r7, r1
 8001446:	40c6      	lsrs	r6, r0
 8001448:	1e7b      	subs	r3, r7, #1
 800144a:	419f      	sbcs	r7, r3
 800144c:	0013      	movs	r3, r2
 800144e:	408b      	lsls	r3, r1
 8001450:	4337      	orrs	r7, r6
 8001452:	431f      	orrs	r7, r3
 8001454:	40c2      	lsrs	r2, r0
 8001456:	003b      	movs	r3, r7
 8001458:	0016      	movs	r6, r2
 800145a:	2400      	movs	r4, #0
 800145c:	4313      	orrs	r3, r2
 800145e:	d100      	bne.n	8001462 <__aeabi_dadd+0xfa>
 8001460:	e1df      	b.n	8001822 <__aeabi_dadd+0x4ba>
 8001462:	077b      	lsls	r3, r7, #29
 8001464:	d100      	bne.n	8001468 <__aeabi_dadd+0x100>
 8001466:	e332      	b.n	8001ace <__aeabi_dadd+0x766>
 8001468:	230f      	movs	r3, #15
 800146a:	003a      	movs	r2, r7
 800146c:	403b      	ands	r3, r7
 800146e:	2b04      	cmp	r3, #4
 8001470:	d004      	beq.n	800147c <__aeabi_dadd+0x114>
 8001472:	1d3a      	adds	r2, r7, #4
 8001474:	42ba      	cmp	r2, r7
 8001476:	41bf      	sbcs	r7, r7
 8001478:	427f      	negs	r7, r7
 800147a:	19f6      	adds	r6, r6, r7
 800147c:	0233      	lsls	r3, r6, #8
 800147e:	d400      	bmi.n	8001482 <__aeabi_dadd+0x11a>
 8001480:	e323      	b.n	8001aca <__aeabi_dadd+0x762>
 8001482:	4b9c      	ldr	r3, [pc, #624]	@ (80016f4 <__aeabi_dadd+0x38c>)
 8001484:	3401      	adds	r4, #1
 8001486:	429c      	cmp	r4, r3
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x124>
 800148a:	e0b4      	b.n	80015f6 <__aeabi_dadd+0x28e>
 800148c:	4b9a      	ldr	r3, [pc, #616]	@ (80016f8 <__aeabi_dadd+0x390>)
 800148e:	0564      	lsls	r4, r4, #21
 8001490:	401e      	ands	r6, r3
 8001492:	0d64      	lsrs	r4, r4, #21
 8001494:	0777      	lsls	r7, r6, #29
 8001496:	08d2      	lsrs	r2, r2, #3
 8001498:	0276      	lsls	r6, r6, #9
 800149a:	4317      	orrs	r7, r2
 800149c:	0b36      	lsrs	r6, r6, #12
 800149e:	e0ac      	b.n	80015fa <__aeabi_dadd+0x292>
 80014a0:	2900      	cmp	r1, #0
 80014a2:	d100      	bne.n	80014a6 <__aeabi_dadd+0x13e>
 80014a4:	e07e      	b.n	80015a4 <__aeabi_dadd+0x23c>
 80014a6:	4641      	mov	r1, r8
 80014a8:	1b09      	subs	r1, r1, r4
 80014aa:	2c00      	cmp	r4, #0
 80014ac:	d000      	beq.n	80014b0 <__aeabi_dadd+0x148>
 80014ae:	e160      	b.n	8001772 <__aeabi_dadd+0x40a>
 80014b0:	0034      	movs	r4, r6
 80014b2:	4648      	mov	r0, r9
 80014b4:	4304      	orrs	r4, r0
 80014b6:	d100      	bne.n	80014ba <__aeabi_dadd+0x152>
 80014b8:	e1c9      	b.n	800184e <__aeabi_dadd+0x4e6>
 80014ba:	1e4c      	subs	r4, r1, #1
 80014bc:	2901      	cmp	r1, #1
 80014be:	d100      	bne.n	80014c2 <__aeabi_dadd+0x15a>
 80014c0:	e22e      	b.n	8001920 <__aeabi_dadd+0x5b8>
 80014c2:	4d8c      	ldr	r5, [pc, #560]	@ (80016f4 <__aeabi_dadd+0x38c>)
 80014c4:	42a9      	cmp	r1, r5
 80014c6:	d100      	bne.n	80014ca <__aeabi_dadd+0x162>
 80014c8:	e224      	b.n	8001914 <__aeabi_dadd+0x5ac>
 80014ca:	2701      	movs	r7, #1
 80014cc:	2c38      	cmp	r4, #56	@ 0x38
 80014ce:	dc11      	bgt.n	80014f4 <__aeabi_dadd+0x18c>
 80014d0:	0021      	movs	r1, r4
 80014d2:	291f      	cmp	r1, #31
 80014d4:	dd00      	ble.n	80014d8 <__aeabi_dadd+0x170>
 80014d6:	e20b      	b.n	80018f0 <__aeabi_dadd+0x588>
 80014d8:	2420      	movs	r4, #32
 80014da:	0037      	movs	r7, r6
 80014dc:	4648      	mov	r0, r9
 80014de:	1a64      	subs	r4, r4, r1
 80014e0:	40a7      	lsls	r7, r4
 80014e2:	40c8      	lsrs	r0, r1
 80014e4:	4307      	orrs	r7, r0
 80014e6:	4648      	mov	r0, r9
 80014e8:	40a0      	lsls	r0, r4
 80014ea:	40ce      	lsrs	r6, r1
 80014ec:	1e44      	subs	r4, r0, #1
 80014ee:	41a0      	sbcs	r0, r4
 80014f0:	1b9b      	subs	r3, r3, r6
 80014f2:	4307      	orrs	r7, r0
 80014f4:	1bd7      	subs	r7, r2, r7
 80014f6:	42ba      	cmp	r2, r7
 80014f8:	4192      	sbcs	r2, r2
 80014fa:	4252      	negs	r2, r2
 80014fc:	4665      	mov	r5, ip
 80014fe:	4644      	mov	r4, r8
 8001500:	1a9e      	subs	r6, r3, r2
 8001502:	e783      	b.n	800140c <__aeabi_dadd+0xa4>
 8001504:	2900      	cmp	r1, #0
 8001506:	dc00      	bgt.n	800150a <__aeabi_dadd+0x1a2>
 8001508:	e09c      	b.n	8001644 <__aeabi_dadd+0x2dc>
 800150a:	4647      	mov	r7, r8
 800150c:	2f00      	cmp	r7, #0
 800150e:	d167      	bne.n	80015e0 <__aeabi_dadd+0x278>
 8001510:	001f      	movs	r7, r3
 8001512:	4317      	orrs	r7, r2
 8001514:	d100      	bne.n	8001518 <__aeabi_dadd+0x1b0>
 8001516:	e0e4      	b.n	80016e2 <__aeabi_dadd+0x37a>
 8001518:	1e48      	subs	r0, r1, #1
 800151a:	2901      	cmp	r1, #1
 800151c:	d100      	bne.n	8001520 <__aeabi_dadd+0x1b8>
 800151e:	e19b      	b.n	8001858 <__aeabi_dadd+0x4f0>
 8001520:	4f74      	ldr	r7, [pc, #464]	@ (80016f4 <__aeabi_dadd+0x38c>)
 8001522:	42b9      	cmp	r1, r7
 8001524:	d100      	bne.n	8001528 <__aeabi_dadd+0x1c0>
 8001526:	e0eb      	b.n	8001700 <__aeabi_dadd+0x398>
 8001528:	2701      	movs	r7, #1
 800152a:	0001      	movs	r1, r0
 800152c:	2838      	cmp	r0, #56	@ 0x38
 800152e:	dc11      	bgt.n	8001554 <__aeabi_dadd+0x1ec>
 8001530:	291f      	cmp	r1, #31
 8001532:	dd00      	ble.n	8001536 <__aeabi_dadd+0x1ce>
 8001534:	e1c7      	b.n	80018c6 <__aeabi_dadd+0x55e>
 8001536:	2720      	movs	r7, #32
 8001538:	1a78      	subs	r0, r7, r1
 800153a:	001f      	movs	r7, r3
 800153c:	4684      	mov	ip, r0
 800153e:	4087      	lsls	r7, r0
 8001540:	0010      	movs	r0, r2
 8001542:	40c8      	lsrs	r0, r1
 8001544:	4307      	orrs	r7, r0
 8001546:	4660      	mov	r0, ip
 8001548:	4082      	lsls	r2, r0
 800154a:	40cb      	lsrs	r3, r1
 800154c:	1e50      	subs	r0, r2, #1
 800154e:	4182      	sbcs	r2, r0
 8001550:	18f6      	adds	r6, r6, r3
 8001552:	4317      	orrs	r7, r2
 8001554:	444f      	add	r7, r9
 8001556:	454f      	cmp	r7, r9
 8001558:	4180      	sbcs	r0, r0
 800155a:	4240      	negs	r0, r0
 800155c:	1836      	adds	r6, r6, r0
 800155e:	0233      	lsls	r3, r6, #8
 8001560:	d557      	bpl.n	8001612 <__aeabi_dadd+0x2aa>
 8001562:	4b64      	ldr	r3, [pc, #400]	@ (80016f4 <__aeabi_dadd+0x38c>)
 8001564:	3401      	adds	r4, #1
 8001566:	429c      	cmp	r4, r3
 8001568:	d045      	beq.n	80015f6 <__aeabi_dadd+0x28e>
 800156a:	2101      	movs	r1, #1
 800156c:	4b62      	ldr	r3, [pc, #392]	@ (80016f8 <__aeabi_dadd+0x390>)
 800156e:	087a      	lsrs	r2, r7, #1
 8001570:	401e      	ands	r6, r3
 8001572:	4039      	ands	r1, r7
 8001574:	430a      	orrs	r2, r1
 8001576:	07f7      	lsls	r7, r6, #31
 8001578:	4317      	orrs	r7, r2
 800157a:	0876      	lsrs	r6, r6, #1
 800157c:	e771      	b.n	8001462 <__aeabi_dadd+0xfa>
 800157e:	001f      	movs	r7, r3
 8001580:	4317      	orrs	r7, r2
 8001582:	d100      	bne.n	8001586 <__aeabi_dadd+0x21e>
 8001584:	e0ad      	b.n	80016e2 <__aeabi_dadd+0x37a>
 8001586:	1e4f      	subs	r7, r1, #1
 8001588:	46bc      	mov	ip, r7
 800158a:	2901      	cmp	r1, #1
 800158c:	d100      	bne.n	8001590 <__aeabi_dadd+0x228>
 800158e:	e182      	b.n	8001896 <__aeabi_dadd+0x52e>
 8001590:	4f58      	ldr	r7, [pc, #352]	@ (80016f4 <__aeabi_dadd+0x38c>)
 8001592:	42b9      	cmp	r1, r7
 8001594:	d100      	bne.n	8001598 <__aeabi_dadd+0x230>
 8001596:	e190      	b.n	80018ba <__aeabi_dadd+0x552>
 8001598:	4661      	mov	r1, ip
 800159a:	2701      	movs	r7, #1
 800159c:	2938      	cmp	r1, #56	@ 0x38
 800159e:	dd00      	ble.n	80015a2 <__aeabi_dadd+0x23a>
 80015a0:	e72e      	b.n	8001400 <__aeabi_dadd+0x98>
 80015a2:	e718      	b.n	80013d6 <__aeabi_dadd+0x6e>
 80015a4:	4f55      	ldr	r7, [pc, #340]	@ (80016fc <__aeabi_dadd+0x394>)
 80015a6:	1c61      	adds	r1, r4, #1
 80015a8:	4239      	tst	r1, r7
 80015aa:	d000      	beq.n	80015ae <__aeabi_dadd+0x246>
 80015ac:	e0d0      	b.n	8001750 <__aeabi_dadd+0x3e8>
 80015ae:	0031      	movs	r1, r6
 80015b0:	4648      	mov	r0, r9
 80015b2:	001f      	movs	r7, r3
 80015b4:	4301      	orrs	r1, r0
 80015b6:	4317      	orrs	r7, r2
 80015b8:	2c00      	cmp	r4, #0
 80015ba:	d000      	beq.n	80015be <__aeabi_dadd+0x256>
 80015bc:	e13d      	b.n	800183a <__aeabi_dadd+0x4d2>
 80015be:	2900      	cmp	r1, #0
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dadd+0x25c>
 80015c2:	e1bc      	b.n	800193e <__aeabi_dadd+0x5d6>
 80015c4:	2f00      	cmp	r7, #0
 80015c6:	d000      	beq.n	80015ca <__aeabi_dadd+0x262>
 80015c8:	e1bf      	b.n	800194a <__aeabi_dadd+0x5e2>
 80015ca:	464b      	mov	r3, r9
 80015cc:	2100      	movs	r1, #0
 80015ce:	08d8      	lsrs	r0, r3, #3
 80015d0:	0777      	lsls	r7, r6, #29
 80015d2:	4307      	orrs	r7, r0
 80015d4:	08f0      	lsrs	r0, r6, #3
 80015d6:	0306      	lsls	r6, r0, #12
 80015d8:	054c      	lsls	r4, r1, #21
 80015da:	0b36      	lsrs	r6, r6, #12
 80015dc:	0d64      	lsrs	r4, r4, #21
 80015de:	e00c      	b.n	80015fa <__aeabi_dadd+0x292>
 80015e0:	4f44      	ldr	r7, [pc, #272]	@ (80016f4 <__aeabi_dadd+0x38c>)
 80015e2:	42bc      	cmp	r4, r7
 80015e4:	d100      	bne.n	80015e8 <__aeabi_dadd+0x280>
 80015e6:	e08b      	b.n	8001700 <__aeabi_dadd+0x398>
 80015e8:	2701      	movs	r7, #1
 80015ea:	2938      	cmp	r1, #56	@ 0x38
 80015ec:	dcb2      	bgt.n	8001554 <__aeabi_dadd+0x1ec>
 80015ee:	2780      	movs	r7, #128	@ 0x80
 80015f0:	043f      	lsls	r7, r7, #16
 80015f2:	433b      	orrs	r3, r7
 80015f4:	e79c      	b.n	8001530 <__aeabi_dadd+0x1c8>
 80015f6:	2600      	movs	r6, #0
 80015f8:	2700      	movs	r7, #0
 80015fa:	0524      	lsls	r4, r4, #20
 80015fc:	4334      	orrs	r4, r6
 80015fe:	07ed      	lsls	r5, r5, #31
 8001600:	432c      	orrs	r4, r5
 8001602:	0038      	movs	r0, r7
 8001604:	0021      	movs	r1, r4
 8001606:	b002      	add	sp, #8
 8001608:	bce0      	pop	{r5, r6, r7}
 800160a:	46ba      	mov	sl, r7
 800160c:	46b1      	mov	r9, r6
 800160e:	46a8      	mov	r8, r5
 8001610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001612:	077b      	lsls	r3, r7, #29
 8001614:	d004      	beq.n	8001620 <__aeabi_dadd+0x2b8>
 8001616:	230f      	movs	r3, #15
 8001618:	403b      	ands	r3, r7
 800161a:	2b04      	cmp	r3, #4
 800161c:	d000      	beq.n	8001620 <__aeabi_dadd+0x2b8>
 800161e:	e728      	b.n	8001472 <__aeabi_dadd+0x10a>
 8001620:	08f8      	lsrs	r0, r7, #3
 8001622:	4b34      	ldr	r3, [pc, #208]	@ (80016f4 <__aeabi_dadd+0x38c>)
 8001624:	0777      	lsls	r7, r6, #29
 8001626:	4307      	orrs	r7, r0
 8001628:	08f0      	lsrs	r0, r6, #3
 800162a:	429c      	cmp	r4, r3
 800162c:	d000      	beq.n	8001630 <__aeabi_dadd+0x2c8>
 800162e:	e24a      	b.n	8001ac6 <__aeabi_dadd+0x75e>
 8001630:	003b      	movs	r3, r7
 8001632:	4303      	orrs	r3, r0
 8001634:	d059      	beq.n	80016ea <__aeabi_dadd+0x382>
 8001636:	2680      	movs	r6, #128	@ 0x80
 8001638:	0336      	lsls	r6, r6, #12
 800163a:	4306      	orrs	r6, r0
 800163c:	0336      	lsls	r6, r6, #12
 800163e:	4c2d      	ldr	r4, [pc, #180]	@ (80016f4 <__aeabi_dadd+0x38c>)
 8001640:	0b36      	lsrs	r6, r6, #12
 8001642:	e7da      	b.n	80015fa <__aeabi_dadd+0x292>
 8001644:	2900      	cmp	r1, #0
 8001646:	d061      	beq.n	800170c <__aeabi_dadd+0x3a4>
 8001648:	4641      	mov	r1, r8
 800164a:	1b09      	subs	r1, r1, r4
 800164c:	2c00      	cmp	r4, #0
 800164e:	d100      	bne.n	8001652 <__aeabi_dadd+0x2ea>
 8001650:	e0b9      	b.n	80017c6 <__aeabi_dadd+0x45e>
 8001652:	4c28      	ldr	r4, [pc, #160]	@ (80016f4 <__aeabi_dadd+0x38c>)
 8001654:	45a0      	cmp	r8, r4
 8001656:	d100      	bne.n	800165a <__aeabi_dadd+0x2f2>
 8001658:	e1a5      	b.n	80019a6 <__aeabi_dadd+0x63e>
 800165a:	2701      	movs	r7, #1
 800165c:	2938      	cmp	r1, #56	@ 0x38
 800165e:	dc13      	bgt.n	8001688 <__aeabi_dadd+0x320>
 8001660:	2480      	movs	r4, #128	@ 0x80
 8001662:	0424      	lsls	r4, r4, #16
 8001664:	4326      	orrs	r6, r4
 8001666:	291f      	cmp	r1, #31
 8001668:	dd00      	ble.n	800166c <__aeabi_dadd+0x304>
 800166a:	e1c8      	b.n	80019fe <__aeabi_dadd+0x696>
 800166c:	2420      	movs	r4, #32
 800166e:	0037      	movs	r7, r6
 8001670:	4648      	mov	r0, r9
 8001672:	1a64      	subs	r4, r4, r1
 8001674:	40a7      	lsls	r7, r4
 8001676:	40c8      	lsrs	r0, r1
 8001678:	4307      	orrs	r7, r0
 800167a:	4648      	mov	r0, r9
 800167c:	40a0      	lsls	r0, r4
 800167e:	40ce      	lsrs	r6, r1
 8001680:	1e44      	subs	r4, r0, #1
 8001682:	41a0      	sbcs	r0, r4
 8001684:	199b      	adds	r3, r3, r6
 8001686:	4307      	orrs	r7, r0
 8001688:	18bf      	adds	r7, r7, r2
 800168a:	4297      	cmp	r7, r2
 800168c:	4192      	sbcs	r2, r2
 800168e:	4252      	negs	r2, r2
 8001690:	4644      	mov	r4, r8
 8001692:	18d6      	adds	r6, r2, r3
 8001694:	e763      	b.n	800155e <__aeabi_dadd+0x1f6>
 8001696:	0038      	movs	r0, r7
 8001698:	f001 fac0 	bl	8002c1c <__clzsi2>
 800169c:	0003      	movs	r3, r0
 800169e:	3318      	adds	r3, #24
 80016a0:	2b1f      	cmp	r3, #31
 80016a2:	dc00      	bgt.n	80016a6 <__aeabi_dadd+0x33e>
 80016a4:	e6bf      	b.n	8001426 <__aeabi_dadd+0xbe>
 80016a6:	003a      	movs	r2, r7
 80016a8:	3808      	subs	r0, #8
 80016aa:	4082      	lsls	r2, r0
 80016ac:	429c      	cmp	r4, r3
 80016ae:	dd00      	ble.n	80016b2 <__aeabi_dadd+0x34a>
 80016b0:	e083      	b.n	80017ba <__aeabi_dadd+0x452>
 80016b2:	1b1b      	subs	r3, r3, r4
 80016b4:	1c58      	adds	r0, r3, #1
 80016b6:	281f      	cmp	r0, #31
 80016b8:	dc00      	bgt.n	80016bc <__aeabi_dadd+0x354>
 80016ba:	e1b4      	b.n	8001a26 <__aeabi_dadd+0x6be>
 80016bc:	0017      	movs	r7, r2
 80016be:	3b1f      	subs	r3, #31
 80016c0:	40df      	lsrs	r7, r3
 80016c2:	2820      	cmp	r0, #32
 80016c4:	d005      	beq.n	80016d2 <__aeabi_dadd+0x36a>
 80016c6:	2340      	movs	r3, #64	@ 0x40
 80016c8:	1a1b      	subs	r3, r3, r0
 80016ca:	409a      	lsls	r2, r3
 80016cc:	1e53      	subs	r3, r2, #1
 80016ce:	419a      	sbcs	r2, r3
 80016d0:	4317      	orrs	r7, r2
 80016d2:	2400      	movs	r4, #0
 80016d4:	2f00      	cmp	r7, #0
 80016d6:	d00a      	beq.n	80016ee <__aeabi_dadd+0x386>
 80016d8:	077b      	lsls	r3, r7, #29
 80016da:	d000      	beq.n	80016de <__aeabi_dadd+0x376>
 80016dc:	e6c4      	b.n	8001468 <__aeabi_dadd+0x100>
 80016de:	0026      	movs	r6, r4
 80016e0:	e79e      	b.n	8001620 <__aeabi_dadd+0x2b8>
 80016e2:	464b      	mov	r3, r9
 80016e4:	000c      	movs	r4, r1
 80016e6:	08d8      	lsrs	r0, r3, #3
 80016e8:	e79b      	b.n	8001622 <__aeabi_dadd+0x2ba>
 80016ea:	2700      	movs	r7, #0
 80016ec:	4c01      	ldr	r4, [pc, #4]	@ (80016f4 <__aeabi_dadd+0x38c>)
 80016ee:	2600      	movs	r6, #0
 80016f0:	e783      	b.n	80015fa <__aeabi_dadd+0x292>
 80016f2:	46c0      	nop			@ (mov r8, r8)
 80016f4:	000007ff 	.word	0x000007ff
 80016f8:	ff7fffff 	.word	0xff7fffff
 80016fc:	000007fe 	.word	0x000007fe
 8001700:	464b      	mov	r3, r9
 8001702:	0777      	lsls	r7, r6, #29
 8001704:	08d8      	lsrs	r0, r3, #3
 8001706:	4307      	orrs	r7, r0
 8001708:	08f0      	lsrs	r0, r6, #3
 800170a:	e791      	b.n	8001630 <__aeabi_dadd+0x2c8>
 800170c:	4fcd      	ldr	r7, [pc, #820]	@ (8001a44 <__aeabi_dadd+0x6dc>)
 800170e:	1c61      	adds	r1, r4, #1
 8001710:	4239      	tst	r1, r7
 8001712:	d16b      	bne.n	80017ec <__aeabi_dadd+0x484>
 8001714:	0031      	movs	r1, r6
 8001716:	4648      	mov	r0, r9
 8001718:	4301      	orrs	r1, r0
 800171a:	2c00      	cmp	r4, #0
 800171c:	d000      	beq.n	8001720 <__aeabi_dadd+0x3b8>
 800171e:	e14b      	b.n	80019b8 <__aeabi_dadd+0x650>
 8001720:	001f      	movs	r7, r3
 8001722:	4317      	orrs	r7, r2
 8001724:	2900      	cmp	r1, #0
 8001726:	d100      	bne.n	800172a <__aeabi_dadd+0x3c2>
 8001728:	e181      	b.n	8001a2e <__aeabi_dadd+0x6c6>
 800172a:	2f00      	cmp	r7, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_dadd+0x3c8>
 800172e:	e74c      	b.n	80015ca <__aeabi_dadd+0x262>
 8001730:	444a      	add	r2, r9
 8001732:	454a      	cmp	r2, r9
 8001734:	4180      	sbcs	r0, r0
 8001736:	18f6      	adds	r6, r6, r3
 8001738:	4240      	negs	r0, r0
 800173a:	1836      	adds	r6, r6, r0
 800173c:	0233      	lsls	r3, r6, #8
 800173e:	d500      	bpl.n	8001742 <__aeabi_dadd+0x3da>
 8001740:	e1b0      	b.n	8001aa4 <__aeabi_dadd+0x73c>
 8001742:	0017      	movs	r7, r2
 8001744:	4691      	mov	r9, r2
 8001746:	4337      	orrs	r7, r6
 8001748:	d000      	beq.n	800174c <__aeabi_dadd+0x3e4>
 800174a:	e73e      	b.n	80015ca <__aeabi_dadd+0x262>
 800174c:	2600      	movs	r6, #0
 800174e:	e754      	b.n	80015fa <__aeabi_dadd+0x292>
 8001750:	4649      	mov	r1, r9
 8001752:	1a89      	subs	r1, r1, r2
 8001754:	4688      	mov	r8, r1
 8001756:	45c1      	cmp	r9, r8
 8001758:	41bf      	sbcs	r7, r7
 800175a:	1af1      	subs	r1, r6, r3
 800175c:	427f      	negs	r7, r7
 800175e:	1bc9      	subs	r1, r1, r7
 8001760:	020f      	lsls	r7, r1, #8
 8001762:	d461      	bmi.n	8001828 <__aeabi_dadd+0x4c0>
 8001764:	4647      	mov	r7, r8
 8001766:	430f      	orrs	r7, r1
 8001768:	d100      	bne.n	800176c <__aeabi_dadd+0x404>
 800176a:	e0bd      	b.n	80018e8 <__aeabi_dadd+0x580>
 800176c:	000e      	movs	r6, r1
 800176e:	4647      	mov	r7, r8
 8001770:	e651      	b.n	8001416 <__aeabi_dadd+0xae>
 8001772:	4cb5      	ldr	r4, [pc, #724]	@ (8001a48 <__aeabi_dadd+0x6e0>)
 8001774:	45a0      	cmp	r8, r4
 8001776:	d100      	bne.n	800177a <__aeabi_dadd+0x412>
 8001778:	e100      	b.n	800197c <__aeabi_dadd+0x614>
 800177a:	2701      	movs	r7, #1
 800177c:	2938      	cmp	r1, #56	@ 0x38
 800177e:	dd00      	ble.n	8001782 <__aeabi_dadd+0x41a>
 8001780:	e6b8      	b.n	80014f4 <__aeabi_dadd+0x18c>
 8001782:	2480      	movs	r4, #128	@ 0x80
 8001784:	0424      	lsls	r4, r4, #16
 8001786:	4326      	orrs	r6, r4
 8001788:	e6a3      	b.n	80014d2 <__aeabi_dadd+0x16a>
 800178a:	4eb0      	ldr	r6, [pc, #704]	@ (8001a4c <__aeabi_dadd+0x6e4>)
 800178c:	1ae4      	subs	r4, r4, r3
 800178e:	4016      	ands	r6, r2
 8001790:	077b      	lsls	r3, r7, #29
 8001792:	d000      	beq.n	8001796 <__aeabi_dadd+0x42e>
 8001794:	e73f      	b.n	8001616 <__aeabi_dadd+0x2ae>
 8001796:	e743      	b.n	8001620 <__aeabi_dadd+0x2b8>
 8001798:	000f      	movs	r7, r1
 800179a:	0018      	movs	r0, r3
 800179c:	3f20      	subs	r7, #32
 800179e:	40f8      	lsrs	r0, r7
 80017a0:	4684      	mov	ip, r0
 80017a2:	2920      	cmp	r1, #32
 80017a4:	d003      	beq.n	80017ae <__aeabi_dadd+0x446>
 80017a6:	2740      	movs	r7, #64	@ 0x40
 80017a8:	1a79      	subs	r1, r7, r1
 80017aa:	408b      	lsls	r3, r1
 80017ac:	431a      	orrs	r2, r3
 80017ae:	1e53      	subs	r3, r2, #1
 80017b0:	419a      	sbcs	r2, r3
 80017b2:	4663      	mov	r3, ip
 80017b4:	0017      	movs	r7, r2
 80017b6:	431f      	orrs	r7, r3
 80017b8:	e622      	b.n	8001400 <__aeabi_dadd+0x98>
 80017ba:	48a4      	ldr	r0, [pc, #656]	@ (8001a4c <__aeabi_dadd+0x6e4>)
 80017bc:	1ae1      	subs	r1, r4, r3
 80017be:	4010      	ands	r0, r2
 80017c0:	0747      	lsls	r7, r0, #29
 80017c2:	08c0      	lsrs	r0, r0, #3
 80017c4:	e707      	b.n	80015d6 <__aeabi_dadd+0x26e>
 80017c6:	0034      	movs	r4, r6
 80017c8:	4648      	mov	r0, r9
 80017ca:	4304      	orrs	r4, r0
 80017cc:	d100      	bne.n	80017d0 <__aeabi_dadd+0x468>
 80017ce:	e0fa      	b.n	80019c6 <__aeabi_dadd+0x65e>
 80017d0:	1e4c      	subs	r4, r1, #1
 80017d2:	2901      	cmp	r1, #1
 80017d4:	d100      	bne.n	80017d8 <__aeabi_dadd+0x470>
 80017d6:	e0d7      	b.n	8001988 <__aeabi_dadd+0x620>
 80017d8:	4f9b      	ldr	r7, [pc, #620]	@ (8001a48 <__aeabi_dadd+0x6e0>)
 80017da:	42b9      	cmp	r1, r7
 80017dc:	d100      	bne.n	80017e0 <__aeabi_dadd+0x478>
 80017de:	e0e2      	b.n	80019a6 <__aeabi_dadd+0x63e>
 80017e0:	2701      	movs	r7, #1
 80017e2:	2c38      	cmp	r4, #56	@ 0x38
 80017e4:	dd00      	ble.n	80017e8 <__aeabi_dadd+0x480>
 80017e6:	e74f      	b.n	8001688 <__aeabi_dadd+0x320>
 80017e8:	0021      	movs	r1, r4
 80017ea:	e73c      	b.n	8001666 <__aeabi_dadd+0x2fe>
 80017ec:	4c96      	ldr	r4, [pc, #600]	@ (8001a48 <__aeabi_dadd+0x6e0>)
 80017ee:	42a1      	cmp	r1, r4
 80017f0:	d100      	bne.n	80017f4 <__aeabi_dadd+0x48c>
 80017f2:	e0dd      	b.n	80019b0 <__aeabi_dadd+0x648>
 80017f4:	444a      	add	r2, r9
 80017f6:	454a      	cmp	r2, r9
 80017f8:	4180      	sbcs	r0, r0
 80017fa:	18f3      	adds	r3, r6, r3
 80017fc:	4240      	negs	r0, r0
 80017fe:	1818      	adds	r0, r3, r0
 8001800:	07c7      	lsls	r7, r0, #31
 8001802:	0852      	lsrs	r2, r2, #1
 8001804:	4317      	orrs	r7, r2
 8001806:	0846      	lsrs	r6, r0, #1
 8001808:	0752      	lsls	r2, r2, #29
 800180a:	d005      	beq.n	8001818 <__aeabi_dadd+0x4b0>
 800180c:	220f      	movs	r2, #15
 800180e:	000c      	movs	r4, r1
 8001810:	403a      	ands	r2, r7
 8001812:	2a04      	cmp	r2, #4
 8001814:	d000      	beq.n	8001818 <__aeabi_dadd+0x4b0>
 8001816:	e62c      	b.n	8001472 <__aeabi_dadd+0x10a>
 8001818:	0776      	lsls	r6, r6, #29
 800181a:	08ff      	lsrs	r7, r7, #3
 800181c:	4337      	orrs	r7, r6
 800181e:	0900      	lsrs	r0, r0, #4
 8001820:	e6d9      	b.n	80015d6 <__aeabi_dadd+0x26e>
 8001822:	2700      	movs	r7, #0
 8001824:	2600      	movs	r6, #0
 8001826:	e6e8      	b.n	80015fa <__aeabi_dadd+0x292>
 8001828:	4649      	mov	r1, r9
 800182a:	1a57      	subs	r7, r2, r1
 800182c:	42ba      	cmp	r2, r7
 800182e:	4192      	sbcs	r2, r2
 8001830:	1b9e      	subs	r6, r3, r6
 8001832:	4252      	negs	r2, r2
 8001834:	4665      	mov	r5, ip
 8001836:	1ab6      	subs	r6, r6, r2
 8001838:	e5ed      	b.n	8001416 <__aeabi_dadd+0xae>
 800183a:	2900      	cmp	r1, #0
 800183c:	d000      	beq.n	8001840 <__aeabi_dadd+0x4d8>
 800183e:	e0c6      	b.n	80019ce <__aeabi_dadd+0x666>
 8001840:	2f00      	cmp	r7, #0
 8001842:	d167      	bne.n	8001914 <__aeabi_dadd+0x5ac>
 8001844:	2680      	movs	r6, #128	@ 0x80
 8001846:	2500      	movs	r5, #0
 8001848:	4c7f      	ldr	r4, [pc, #508]	@ (8001a48 <__aeabi_dadd+0x6e0>)
 800184a:	0336      	lsls	r6, r6, #12
 800184c:	e6d5      	b.n	80015fa <__aeabi_dadd+0x292>
 800184e:	4665      	mov	r5, ip
 8001850:	000c      	movs	r4, r1
 8001852:	001e      	movs	r6, r3
 8001854:	08d0      	lsrs	r0, r2, #3
 8001856:	e6e4      	b.n	8001622 <__aeabi_dadd+0x2ba>
 8001858:	444a      	add	r2, r9
 800185a:	454a      	cmp	r2, r9
 800185c:	4180      	sbcs	r0, r0
 800185e:	18f3      	adds	r3, r6, r3
 8001860:	4240      	negs	r0, r0
 8001862:	1818      	adds	r0, r3, r0
 8001864:	0011      	movs	r1, r2
 8001866:	0203      	lsls	r3, r0, #8
 8001868:	d400      	bmi.n	800186c <__aeabi_dadd+0x504>
 800186a:	e096      	b.n	800199a <__aeabi_dadd+0x632>
 800186c:	4b77      	ldr	r3, [pc, #476]	@ (8001a4c <__aeabi_dadd+0x6e4>)
 800186e:	0849      	lsrs	r1, r1, #1
 8001870:	4018      	ands	r0, r3
 8001872:	07c3      	lsls	r3, r0, #31
 8001874:	430b      	orrs	r3, r1
 8001876:	0844      	lsrs	r4, r0, #1
 8001878:	0749      	lsls	r1, r1, #29
 800187a:	d100      	bne.n	800187e <__aeabi_dadd+0x516>
 800187c:	e129      	b.n	8001ad2 <__aeabi_dadd+0x76a>
 800187e:	220f      	movs	r2, #15
 8001880:	401a      	ands	r2, r3
 8001882:	2a04      	cmp	r2, #4
 8001884:	d100      	bne.n	8001888 <__aeabi_dadd+0x520>
 8001886:	e0ea      	b.n	8001a5e <__aeabi_dadd+0x6f6>
 8001888:	1d1f      	adds	r7, r3, #4
 800188a:	429f      	cmp	r7, r3
 800188c:	41b6      	sbcs	r6, r6
 800188e:	4276      	negs	r6, r6
 8001890:	1936      	adds	r6, r6, r4
 8001892:	2402      	movs	r4, #2
 8001894:	e6c4      	b.n	8001620 <__aeabi_dadd+0x2b8>
 8001896:	4649      	mov	r1, r9
 8001898:	1a8f      	subs	r7, r1, r2
 800189a:	45b9      	cmp	r9, r7
 800189c:	4180      	sbcs	r0, r0
 800189e:	1af6      	subs	r6, r6, r3
 80018a0:	4240      	negs	r0, r0
 80018a2:	1a36      	subs	r6, r6, r0
 80018a4:	0233      	lsls	r3, r6, #8
 80018a6:	d406      	bmi.n	80018b6 <__aeabi_dadd+0x54e>
 80018a8:	0773      	lsls	r3, r6, #29
 80018aa:	08ff      	lsrs	r7, r7, #3
 80018ac:	2101      	movs	r1, #1
 80018ae:	431f      	orrs	r7, r3
 80018b0:	08f0      	lsrs	r0, r6, #3
 80018b2:	e690      	b.n	80015d6 <__aeabi_dadd+0x26e>
 80018b4:	4665      	mov	r5, ip
 80018b6:	2401      	movs	r4, #1
 80018b8:	e5ab      	b.n	8001412 <__aeabi_dadd+0xaa>
 80018ba:	464b      	mov	r3, r9
 80018bc:	0777      	lsls	r7, r6, #29
 80018be:	08d8      	lsrs	r0, r3, #3
 80018c0:	4307      	orrs	r7, r0
 80018c2:	08f0      	lsrs	r0, r6, #3
 80018c4:	e6b4      	b.n	8001630 <__aeabi_dadd+0x2c8>
 80018c6:	000f      	movs	r7, r1
 80018c8:	0018      	movs	r0, r3
 80018ca:	3f20      	subs	r7, #32
 80018cc:	40f8      	lsrs	r0, r7
 80018ce:	4684      	mov	ip, r0
 80018d0:	2920      	cmp	r1, #32
 80018d2:	d003      	beq.n	80018dc <__aeabi_dadd+0x574>
 80018d4:	2740      	movs	r7, #64	@ 0x40
 80018d6:	1a79      	subs	r1, r7, r1
 80018d8:	408b      	lsls	r3, r1
 80018da:	431a      	orrs	r2, r3
 80018dc:	1e53      	subs	r3, r2, #1
 80018de:	419a      	sbcs	r2, r3
 80018e0:	4663      	mov	r3, ip
 80018e2:	0017      	movs	r7, r2
 80018e4:	431f      	orrs	r7, r3
 80018e6:	e635      	b.n	8001554 <__aeabi_dadd+0x1ec>
 80018e8:	2500      	movs	r5, #0
 80018ea:	2400      	movs	r4, #0
 80018ec:	2600      	movs	r6, #0
 80018ee:	e684      	b.n	80015fa <__aeabi_dadd+0x292>
 80018f0:	000c      	movs	r4, r1
 80018f2:	0035      	movs	r5, r6
 80018f4:	3c20      	subs	r4, #32
 80018f6:	40e5      	lsrs	r5, r4
 80018f8:	2920      	cmp	r1, #32
 80018fa:	d005      	beq.n	8001908 <__aeabi_dadd+0x5a0>
 80018fc:	2440      	movs	r4, #64	@ 0x40
 80018fe:	1a61      	subs	r1, r4, r1
 8001900:	408e      	lsls	r6, r1
 8001902:	4649      	mov	r1, r9
 8001904:	4331      	orrs	r1, r6
 8001906:	4689      	mov	r9, r1
 8001908:	4648      	mov	r0, r9
 800190a:	1e41      	subs	r1, r0, #1
 800190c:	4188      	sbcs	r0, r1
 800190e:	0007      	movs	r7, r0
 8001910:	432f      	orrs	r7, r5
 8001912:	e5ef      	b.n	80014f4 <__aeabi_dadd+0x18c>
 8001914:	08d2      	lsrs	r2, r2, #3
 8001916:	075f      	lsls	r7, r3, #29
 8001918:	4665      	mov	r5, ip
 800191a:	4317      	orrs	r7, r2
 800191c:	08d8      	lsrs	r0, r3, #3
 800191e:	e687      	b.n	8001630 <__aeabi_dadd+0x2c8>
 8001920:	1a17      	subs	r7, r2, r0
 8001922:	42ba      	cmp	r2, r7
 8001924:	4192      	sbcs	r2, r2
 8001926:	1b9e      	subs	r6, r3, r6
 8001928:	4252      	negs	r2, r2
 800192a:	1ab6      	subs	r6, r6, r2
 800192c:	0233      	lsls	r3, r6, #8
 800192e:	d4c1      	bmi.n	80018b4 <__aeabi_dadd+0x54c>
 8001930:	0773      	lsls	r3, r6, #29
 8001932:	08ff      	lsrs	r7, r7, #3
 8001934:	4665      	mov	r5, ip
 8001936:	2101      	movs	r1, #1
 8001938:	431f      	orrs	r7, r3
 800193a:	08f0      	lsrs	r0, r6, #3
 800193c:	e64b      	b.n	80015d6 <__aeabi_dadd+0x26e>
 800193e:	2f00      	cmp	r7, #0
 8001940:	d07b      	beq.n	8001a3a <__aeabi_dadd+0x6d2>
 8001942:	4665      	mov	r5, ip
 8001944:	001e      	movs	r6, r3
 8001946:	4691      	mov	r9, r2
 8001948:	e63f      	b.n	80015ca <__aeabi_dadd+0x262>
 800194a:	1a81      	subs	r1, r0, r2
 800194c:	4688      	mov	r8, r1
 800194e:	45c1      	cmp	r9, r8
 8001950:	41a4      	sbcs	r4, r4
 8001952:	1af1      	subs	r1, r6, r3
 8001954:	4264      	negs	r4, r4
 8001956:	1b09      	subs	r1, r1, r4
 8001958:	2480      	movs	r4, #128	@ 0x80
 800195a:	0424      	lsls	r4, r4, #16
 800195c:	4221      	tst	r1, r4
 800195e:	d077      	beq.n	8001a50 <__aeabi_dadd+0x6e8>
 8001960:	1a10      	subs	r0, r2, r0
 8001962:	4282      	cmp	r2, r0
 8001964:	4192      	sbcs	r2, r2
 8001966:	0007      	movs	r7, r0
 8001968:	1b9e      	subs	r6, r3, r6
 800196a:	4252      	negs	r2, r2
 800196c:	1ab6      	subs	r6, r6, r2
 800196e:	4337      	orrs	r7, r6
 8001970:	d000      	beq.n	8001974 <__aeabi_dadd+0x60c>
 8001972:	e0a0      	b.n	8001ab6 <__aeabi_dadd+0x74e>
 8001974:	4665      	mov	r5, ip
 8001976:	2400      	movs	r4, #0
 8001978:	2600      	movs	r6, #0
 800197a:	e63e      	b.n	80015fa <__aeabi_dadd+0x292>
 800197c:	075f      	lsls	r7, r3, #29
 800197e:	08d2      	lsrs	r2, r2, #3
 8001980:	4665      	mov	r5, ip
 8001982:	4317      	orrs	r7, r2
 8001984:	08d8      	lsrs	r0, r3, #3
 8001986:	e653      	b.n	8001630 <__aeabi_dadd+0x2c8>
 8001988:	1881      	adds	r1, r0, r2
 800198a:	4291      	cmp	r1, r2
 800198c:	4192      	sbcs	r2, r2
 800198e:	18f0      	adds	r0, r6, r3
 8001990:	4252      	negs	r2, r2
 8001992:	1880      	adds	r0, r0, r2
 8001994:	0203      	lsls	r3, r0, #8
 8001996:	d500      	bpl.n	800199a <__aeabi_dadd+0x632>
 8001998:	e768      	b.n	800186c <__aeabi_dadd+0x504>
 800199a:	0747      	lsls	r7, r0, #29
 800199c:	08c9      	lsrs	r1, r1, #3
 800199e:	430f      	orrs	r7, r1
 80019a0:	08c0      	lsrs	r0, r0, #3
 80019a2:	2101      	movs	r1, #1
 80019a4:	e617      	b.n	80015d6 <__aeabi_dadd+0x26e>
 80019a6:	08d2      	lsrs	r2, r2, #3
 80019a8:	075f      	lsls	r7, r3, #29
 80019aa:	4317      	orrs	r7, r2
 80019ac:	08d8      	lsrs	r0, r3, #3
 80019ae:	e63f      	b.n	8001630 <__aeabi_dadd+0x2c8>
 80019b0:	000c      	movs	r4, r1
 80019b2:	2600      	movs	r6, #0
 80019b4:	2700      	movs	r7, #0
 80019b6:	e620      	b.n	80015fa <__aeabi_dadd+0x292>
 80019b8:	2900      	cmp	r1, #0
 80019ba:	d156      	bne.n	8001a6a <__aeabi_dadd+0x702>
 80019bc:	075f      	lsls	r7, r3, #29
 80019be:	08d2      	lsrs	r2, r2, #3
 80019c0:	4317      	orrs	r7, r2
 80019c2:	08d8      	lsrs	r0, r3, #3
 80019c4:	e634      	b.n	8001630 <__aeabi_dadd+0x2c8>
 80019c6:	000c      	movs	r4, r1
 80019c8:	001e      	movs	r6, r3
 80019ca:	08d0      	lsrs	r0, r2, #3
 80019cc:	e629      	b.n	8001622 <__aeabi_dadd+0x2ba>
 80019ce:	08c1      	lsrs	r1, r0, #3
 80019d0:	0770      	lsls	r0, r6, #29
 80019d2:	4301      	orrs	r1, r0
 80019d4:	08f0      	lsrs	r0, r6, #3
 80019d6:	2f00      	cmp	r7, #0
 80019d8:	d062      	beq.n	8001aa0 <__aeabi_dadd+0x738>
 80019da:	2480      	movs	r4, #128	@ 0x80
 80019dc:	0324      	lsls	r4, r4, #12
 80019de:	4220      	tst	r0, r4
 80019e0:	d007      	beq.n	80019f2 <__aeabi_dadd+0x68a>
 80019e2:	08de      	lsrs	r6, r3, #3
 80019e4:	4226      	tst	r6, r4
 80019e6:	d104      	bne.n	80019f2 <__aeabi_dadd+0x68a>
 80019e8:	4665      	mov	r5, ip
 80019ea:	0030      	movs	r0, r6
 80019ec:	08d1      	lsrs	r1, r2, #3
 80019ee:	075b      	lsls	r3, r3, #29
 80019f0:	4319      	orrs	r1, r3
 80019f2:	0f4f      	lsrs	r7, r1, #29
 80019f4:	00c9      	lsls	r1, r1, #3
 80019f6:	08c9      	lsrs	r1, r1, #3
 80019f8:	077f      	lsls	r7, r7, #29
 80019fa:	430f      	orrs	r7, r1
 80019fc:	e618      	b.n	8001630 <__aeabi_dadd+0x2c8>
 80019fe:	000c      	movs	r4, r1
 8001a00:	0030      	movs	r0, r6
 8001a02:	3c20      	subs	r4, #32
 8001a04:	40e0      	lsrs	r0, r4
 8001a06:	4684      	mov	ip, r0
 8001a08:	2920      	cmp	r1, #32
 8001a0a:	d005      	beq.n	8001a18 <__aeabi_dadd+0x6b0>
 8001a0c:	2440      	movs	r4, #64	@ 0x40
 8001a0e:	1a61      	subs	r1, r4, r1
 8001a10:	408e      	lsls	r6, r1
 8001a12:	4649      	mov	r1, r9
 8001a14:	4331      	orrs	r1, r6
 8001a16:	4689      	mov	r9, r1
 8001a18:	4648      	mov	r0, r9
 8001a1a:	1e41      	subs	r1, r0, #1
 8001a1c:	4188      	sbcs	r0, r1
 8001a1e:	4661      	mov	r1, ip
 8001a20:	0007      	movs	r7, r0
 8001a22:	430f      	orrs	r7, r1
 8001a24:	e630      	b.n	8001688 <__aeabi_dadd+0x320>
 8001a26:	2120      	movs	r1, #32
 8001a28:	2700      	movs	r7, #0
 8001a2a:	1a09      	subs	r1, r1, r0
 8001a2c:	e50e      	b.n	800144c <__aeabi_dadd+0xe4>
 8001a2e:	001e      	movs	r6, r3
 8001a30:	2f00      	cmp	r7, #0
 8001a32:	d000      	beq.n	8001a36 <__aeabi_dadd+0x6ce>
 8001a34:	e522      	b.n	800147c <__aeabi_dadd+0x114>
 8001a36:	2400      	movs	r4, #0
 8001a38:	e758      	b.n	80018ec <__aeabi_dadd+0x584>
 8001a3a:	2500      	movs	r5, #0
 8001a3c:	2400      	movs	r4, #0
 8001a3e:	2600      	movs	r6, #0
 8001a40:	e5db      	b.n	80015fa <__aeabi_dadd+0x292>
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	000007fe 	.word	0x000007fe
 8001a48:	000007ff 	.word	0x000007ff
 8001a4c:	ff7fffff 	.word	0xff7fffff
 8001a50:	4647      	mov	r7, r8
 8001a52:	430f      	orrs	r7, r1
 8001a54:	d100      	bne.n	8001a58 <__aeabi_dadd+0x6f0>
 8001a56:	e747      	b.n	80018e8 <__aeabi_dadd+0x580>
 8001a58:	000e      	movs	r6, r1
 8001a5a:	46c1      	mov	r9, r8
 8001a5c:	e5b5      	b.n	80015ca <__aeabi_dadd+0x262>
 8001a5e:	08df      	lsrs	r7, r3, #3
 8001a60:	0764      	lsls	r4, r4, #29
 8001a62:	2102      	movs	r1, #2
 8001a64:	4327      	orrs	r7, r4
 8001a66:	0900      	lsrs	r0, r0, #4
 8001a68:	e5b5      	b.n	80015d6 <__aeabi_dadd+0x26e>
 8001a6a:	0019      	movs	r1, r3
 8001a6c:	08c0      	lsrs	r0, r0, #3
 8001a6e:	0777      	lsls	r7, r6, #29
 8001a70:	4307      	orrs	r7, r0
 8001a72:	4311      	orrs	r1, r2
 8001a74:	08f0      	lsrs	r0, r6, #3
 8001a76:	2900      	cmp	r1, #0
 8001a78:	d100      	bne.n	8001a7c <__aeabi_dadd+0x714>
 8001a7a:	e5d9      	b.n	8001630 <__aeabi_dadd+0x2c8>
 8001a7c:	2180      	movs	r1, #128	@ 0x80
 8001a7e:	0309      	lsls	r1, r1, #12
 8001a80:	4208      	tst	r0, r1
 8001a82:	d007      	beq.n	8001a94 <__aeabi_dadd+0x72c>
 8001a84:	08dc      	lsrs	r4, r3, #3
 8001a86:	420c      	tst	r4, r1
 8001a88:	d104      	bne.n	8001a94 <__aeabi_dadd+0x72c>
 8001a8a:	08d2      	lsrs	r2, r2, #3
 8001a8c:	075b      	lsls	r3, r3, #29
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	0017      	movs	r7, r2
 8001a92:	0020      	movs	r0, r4
 8001a94:	0f7b      	lsrs	r3, r7, #29
 8001a96:	00ff      	lsls	r7, r7, #3
 8001a98:	08ff      	lsrs	r7, r7, #3
 8001a9a:	075b      	lsls	r3, r3, #29
 8001a9c:	431f      	orrs	r7, r3
 8001a9e:	e5c7      	b.n	8001630 <__aeabi_dadd+0x2c8>
 8001aa0:	000f      	movs	r7, r1
 8001aa2:	e5c5      	b.n	8001630 <__aeabi_dadd+0x2c8>
 8001aa4:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <__aeabi_dadd+0x788>)
 8001aa6:	08d2      	lsrs	r2, r2, #3
 8001aa8:	4033      	ands	r3, r6
 8001aaa:	075f      	lsls	r7, r3, #29
 8001aac:	025b      	lsls	r3, r3, #9
 8001aae:	2401      	movs	r4, #1
 8001ab0:	4317      	orrs	r7, r2
 8001ab2:	0b1e      	lsrs	r6, r3, #12
 8001ab4:	e5a1      	b.n	80015fa <__aeabi_dadd+0x292>
 8001ab6:	4226      	tst	r6, r4
 8001ab8:	d012      	beq.n	8001ae0 <__aeabi_dadd+0x778>
 8001aba:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <__aeabi_dadd+0x788>)
 8001abc:	4665      	mov	r5, ip
 8001abe:	0002      	movs	r2, r0
 8001ac0:	2401      	movs	r4, #1
 8001ac2:	401e      	ands	r6, r3
 8001ac4:	e4e6      	b.n	8001494 <__aeabi_dadd+0x12c>
 8001ac6:	0021      	movs	r1, r4
 8001ac8:	e585      	b.n	80015d6 <__aeabi_dadd+0x26e>
 8001aca:	0017      	movs	r7, r2
 8001acc:	e5a8      	b.n	8001620 <__aeabi_dadd+0x2b8>
 8001ace:	003a      	movs	r2, r7
 8001ad0:	e4d4      	b.n	800147c <__aeabi_dadd+0x114>
 8001ad2:	08db      	lsrs	r3, r3, #3
 8001ad4:	0764      	lsls	r4, r4, #29
 8001ad6:	431c      	orrs	r4, r3
 8001ad8:	0027      	movs	r7, r4
 8001ada:	2102      	movs	r1, #2
 8001adc:	0900      	lsrs	r0, r0, #4
 8001ade:	e57a      	b.n	80015d6 <__aeabi_dadd+0x26e>
 8001ae0:	08c0      	lsrs	r0, r0, #3
 8001ae2:	0777      	lsls	r7, r6, #29
 8001ae4:	4307      	orrs	r7, r0
 8001ae6:	4665      	mov	r5, ip
 8001ae8:	2100      	movs	r1, #0
 8001aea:	08f0      	lsrs	r0, r6, #3
 8001aec:	e573      	b.n	80015d6 <__aeabi_dadd+0x26e>
 8001aee:	46c0      	nop			@ (mov r8, r8)
 8001af0:	ff7fffff 	.word	0xff7fffff

08001af4 <__aeabi_ddiv>:
 8001af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af6:	46de      	mov	lr, fp
 8001af8:	4645      	mov	r5, r8
 8001afa:	4657      	mov	r7, sl
 8001afc:	464e      	mov	r6, r9
 8001afe:	b5e0      	push	{r5, r6, r7, lr}
 8001b00:	b087      	sub	sp, #28
 8001b02:	9200      	str	r2, [sp, #0]
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	030b      	lsls	r3, r1, #12
 8001b08:	0b1b      	lsrs	r3, r3, #12
 8001b0a:	469b      	mov	fp, r3
 8001b0c:	0fca      	lsrs	r2, r1, #31
 8001b0e:	004b      	lsls	r3, r1, #1
 8001b10:	0004      	movs	r4, r0
 8001b12:	4680      	mov	r8, r0
 8001b14:	0d5b      	lsrs	r3, r3, #21
 8001b16:	9202      	str	r2, [sp, #8]
 8001b18:	d100      	bne.n	8001b1c <__aeabi_ddiv+0x28>
 8001b1a:	e098      	b.n	8001c4e <__aeabi_ddiv+0x15a>
 8001b1c:	4a7c      	ldr	r2, [pc, #496]	@ (8001d10 <__aeabi_ddiv+0x21c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d037      	beq.n	8001b92 <__aeabi_ddiv+0x9e>
 8001b22:	4659      	mov	r1, fp
 8001b24:	0f42      	lsrs	r2, r0, #29
 8001b26:	00c9      	lsls	r1, r1, #3
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	2180      	movs	r1, #128	@ 0x80
 8001b2c:	0409      	lsls	r1, r1, #16
 8001b2e:	4311      	orrs	r1, r2
 8001b30:	00c2      	lsls	r2, r0, #3
 8001b32:	4690      	mov	r8, r2
 8001b34:	4a77      	ldr	r2, [pc, #476]	@ (8001d14 <__aeabi_ddiv+0x220>)
 8001b36:	4689      	mov	r9, r1
 8001b38:	4692      	mov	sl, r2
 8001b3a:	449a      	add	sl, r3
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	2400      	movs	r4, #0
 8001b40:	9303      	str	r3, [sp, #12]
 8001b42:	9e00      	ldr	r6, [sp, #0]
 8001b44:	9f01      	ldr	r7, [sp, #4]
 8001b46:	033b      	lsls	r3, r7, #12
 8001b48:	0b1b      	lsrs	r3, r3, #12
 8001b4a:	469b      	mov	fp, r3
 8001b4c:	007b      	lsls	r3, r7, #1
 8001b4e:	0030      	movs	r0, r6
 8001b50:	0d5b      	lsrs	r3, r3, #21
 8001b52:	0ffd      	lsrs	r5, r7, #31
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d059      	beq.n	8001c0c <__aeabi_ddiv+0x118>
 8001b58:	4a6d      	ldr	r2, [pc, #436]	@ (8001d10 <__aeabi_ddiv+0x21c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d048      	beq.n	8001bf0 <__aeabi_ddiv+0xfc>
 8001b5e:	4659      	mov	r1, fp
 8001b60:	0f72      	lsrs	r2, r6, #29
 8001b62:	00c9      	lsls	r1, r1, #3
 8001b64:	430a      	orrs	r2, r1
 8001b66:	2180      	movs	r1, #128	@ 0x80
 8001b68:	0409      	lsls	r1, r1, #16
 8001b6a:	4311      	orrs	r1, r2
 8001b6c:	468b      	mov	fp, r1
 8001b6e:	4969      	ldr	r1, [pc, #420]	@ (8001d14 <__aeabi_ddiv+0x220>)
 8001b70:	00f2      	lsls	r2, r6, #3
 8001b72:	468c      	mov	ip, r1
 8001b74:	4651      	mov	r1, sl
 8001b76:	4463      	add	r3, ip
 8001b78:	1acb      	subs	r3, r1, r3
 8001b7a:	469a      	mov	sl, r3
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	9e02      	ldr	r6, [sp, #8]
 8001b80:	406e      	eors	r6, r5
 8001b82:	b2f6      	uxtb	r6, r6
 8001b84:	2c0f      	cmp	r4, #15
 8001b86:	d900      	bls.n	8001b8a <__aeabi_ddiv+0x96>
 8001b88:	e0ce      	b.n	8001d28 <__aeabi_ddiv+0x234>
 8001b8a:	4b63      	ldr	r3, [pc, #396]	@ (8001d18 <__aeabi_ddiv+0x224>)
 8001b8c:	00a4      	lsls	r4, r4, #2
 8001b8e:	591b      	ldr	r3, [r3, r4]
 8001b90:	469f      	mov	pc, r3
 8001b92:	465a      	mov	r2, fp
 8001b94:	4302      	orrs	r2, r0
 8001b96:	4691      	mov	r9, r2
 8001b98:	d000      	beq.n	8001b9c <__aeabi_ddiv+0xa8>
 8001b9a:	e090      	b.n	8001cbe <__aeabi_ddiv+0x1ca>
 8001b9c:	469a      	mov	sl, r3
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	4690      	mov	r8, r2
 8001ba2:	2408      	movs	r4, #8
 8001ba4:	9303      	str	r3, [sp, #12]
 8001ba6:	e7cc      	b.n	8001b42 <__aeabi_ddiv+0x4e>
 8001ba8:	46cb      	mov	fp, r9
 8001baa:	4642      	mov	r2, r8
 8001bac:	9d02      	ldr	r5, [sp, #8]
 8001bae:	9903      	ldr	r1, [sp, #12]
 8001bb0:	2902      	cmp	r1, #2
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_ddiv+0xc2>
 8001bb4:	e1de      	b.n	8001f74 <__aeabi_ddiv+0x480>
 8001bb6:	2903      	cmp	r1, #3
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_ddiv+0xc8>
 8001bba:	e08d      	b.n	8001cd8 <__aeabi_ddiv+0x1e4>
 8001bbc:	2901      	cmp	r1, #1
 8001bbe:	d000      	beq.n	8001bc2 <__aeabi_ddiv+0xce>
 8001bc0:	e179      	b.n	8001eb6 <__aeabi_ddiv+0x3c2>
 8001bc2:	002e      	movs	r6, r5
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	2400      	movs	r4, #0
 8001bca:	4690      	mov	r8, r2
 8001bcc:	051b      	lsls	r3, r3, #20
 8001bce:	4323      	orrs	r3, r4
 8001bd0:	07f6      	lsls	r6, r6, #31
 8001bd2:	4333      	orrs	r3, r6
 8001bd4:	4640      	mov	r0, r8
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	b007      	add	sp, #28
 8001bda:	bcf0      	pop	{r4, r5, r6, r7}
 8001bdc:	46bb      	mov	fp, r7
 8001bde:	46b2      	mov	sl, r6
 8001be0:	46a9      	mov	r9, r5
 8001be2:	46a0      	mov	r8, r4
 8001be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001be6:	2200      	movs	r2, #0
 8001be8:	2400      	movs	r4, #0
 8001bea:	4690      	mov	r8, r2
 8001bec:	4b48      	ldr	r3, [pc, #288]	@ (8001d10 <__aeabi_ddiv+0x21c>)
 8001bee:	e7ed      	b.n	8001bcc <__aeabi_ddiv+0xd8>
 8001bf0:	465a      	mov	r2, fp
 8001bf2:	9b00      	ldr	r3, [sp, #0]
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	4b49      	ldr	r3, [pc, #292]	@ (8001d1c <__aeabi_ddiv+0x228>)
 8001bf8:	469c      	mov	ip, r3
 8001bfa:	44e2      	add	sl, ip
 8001bfc:	2a00      	cmp	r2, #0
 8001bfe:	d159      	bne.n	8001cb4 <__aeabi_ddiv+0x1c0>
 8001c00:	2302      	movs	r3, #2
 8001c02:	431c      	orrs	r4, r3
 8001c04:	2300      	movs	r3, #0
 8001c06:	2102      	movs	r1, #2
 8001c08:	469b      	mov	fp, r3
 8001c0a:	e7b8      	b.n	8001b7e <__aeabi_ddiv+0x8a>
 8001c0c:	465a      	mov	r2, fp
 8001c0e:	9b00      	ldr	r3, [sp, #0]
 8001c10:	431a      	orrs	r2, r3
 8001c12:	d049      	beq.n	8001ca8 <__aeabi_ddiv+0x1b4>
 8001c14:	465b      	mov	r3, fp
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d100      	bne.n	8001c1c <__aeabi_ddiv+0x128>
 8001c1a:	e19c      	b.n	8001f56 <__aeabi_ddiv+0x462>
 8001c1c:	4658      	mov	r0, fp
 8001c1e:	f000 fffd 	bl	8002c1c <__clzsi2>
 8001c22:	0002      	movs	r2, r0
 8001c24:	0003      	movs	r3, r0
 8001c26:	3a0b      	subs	r2, #11
 8001c28:	271d      	movs	r7, #29
 8001c2a:	9e00      	ldr	r6, [sp, #0]
 8001c2c:	1aba      	subs	r2, r7, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	4658      	mov	r0, fp
 8001c32:	40d6      	lsrs	r6, r2
 8001c34:	3908      	subs	r1, #8
 8001c36:	4088      	lsls	r0, r1
 8001c38:	0032      	movs	r2, r6
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	4693      	mov	fp, r2
 8001c3e:	9a00      	ldr	r2, [sp, #0]
 8001c40:	408a      	lsls	r2, r1
 8001c42:	4937      	ldr	r1, [pc, #220]	@ (8001d20 <__aeabi_ddiv+0x22c>)
 8001c44:	4453      	add	r3, sl
 8001c46:	468a      	mov	sl, r1
 8001c48:	2100      	movs	r1, #0
 8001c4a:	449a      	add	sl, r3
 8001c4c:	e797      	b.n	8001b7e <__aeabi_ddiv+0x8a>
 8001c4e:	465b      	mov	r3, fp
 8001c50:	4303      	orrs	r3, r0
 8001c52:	4699      	mov	r9, r3
 8001c54:	d021      	beq.n	8001c9a <__aeabi_ddiv+0x1a6>
 8001c56:	465b      	mov	r3, fp
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_ddiv+0x16a>
 8001c5c:	e169      	b.n	8001f32 <__aeabi_ddiv+0x43e>
 8001c5e:	4658      	mov	r0, fp
 8001c60:	f000 ffdc 	bl	8002c1c <__clzsi2>
 8001c64:	230b      	movs	r3, #11
 8001c66:	425b      	negs	r3, r3
 8001c68:	469c      	mov	ip, r3
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	4484      	add	ip, r0
 8001c6e:	4666      	mov	r6, ip
 8001c70:	231d      	movs	r3, #29
 8001c72:	1b9b      	subs	r3, r3, r6
 8001c74:	0026      	movs	r6, r4
 8001c76:	0011      	movs	r1, r2
 8001c78:	4658      	mov	r0, fp
 8001c7a:	40de      	lsrs	r6, r3
 8001c7c:	3908      	subs	r1, #8
 8001c7e:	4088      	lsls	r0, r1
 8001c80:	0033      	movs	r3, r6
 8001c82:	4303      	orrs	r3, r0
 8001c84:	4699      	mov	r9, r3
 8001c86:	0023      	movs	r3, r4
 8001c88:	408b      	lsls	r3, r1
 8001c8a:	4698      	mov	r8, r3
 8001c8c:	4b25      	ldr	r3, [pc, #148]	@ (8001d24 <__aeabi_ddiv+0x230>)
 8001c8e:	2400      	movs	r4, #0
 8001c90:	1a9b      	subs	r3, r3, r2
 8001c92:	469a      	mov	sl, r3
 8001c94:	2300      	movs	r3, #0
 8001c96:	9303      	str	r3, [sp, #12]
 8001c98:	e753      	b.n	8001b42 <__aeabi_ddiv+0x4e>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	4698      	mov	r8, r3
 8001c9e:	469a      	mov	sl, r3
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	2404      	movs	r4, #4
 8001ca4:	9303      	str	r3, [sp, #12]
 8001ca6:	e74c      	b.n	8001b42 <__aeabi_ddiv+0x4e>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	431c      	orrs	r4, r3
 8001cac:	2300      	movs	r3, #0
 8001cae:	2101      	movs	r1, #1
 8001cb0:	469b      	mov	fp, r3
 8001cb2:	e764      	b.n	8001b7e <__aeabi_ddiv+0x8a>
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	0032      	movs	r2, r6
 8001cb8:	2103      	movs	r1, #3
 8001cba:	431c      	orrs	r4, r3
 8001cbc:	e75f      	b.n	8001b7e <__aeabi_ddiv+0x8a>
 8001cbe:	469a      	mov	sl, r3
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	46d9      	mov	r9, fp
 8001cc4:	240c      	movs	r4, #12
 8001cc6:	9303      	str	r3, [sp, #12]
 8001cc8:	e73b      	b.n	8001b42 <__aeabi_ddiv+0x4e>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	2480      	movs	r4, #128	@ 0x80
 8001cce:	4698      	mov	r8, r3
 8001cd0:	2600      	movs	r6, #0
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <__aeabi_ddiv+0x21c>)
 8001cd4:	0324      	lsls	r4, r4, #12
 8001cd6:	e779      	b.n	8001bcc <__aeabi_ddiv+0xd8>
 8001cd8:	2480      	movs	r4, #128	@ 0x80
 8001cda:	465b      	mov	r3, fp
 8001cdc:	0324      	lsls	r4, r4, #12
 8001cde:	431c      	orrs	r4, r3
 8001ce0:	0324      	lsls	r4, r4, #12
 8001ce2:	002e      	movs	r6, r5
 8001ce4:	4690      	mov	r8, r2
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <__aeabi_ddiv+0x21c>)
 8001ce8:	0b24      	lsrs	r4, r4, #12
 8001cea:	e76f      	b.n	8001bcc <__aeabi_ddiv+0xd8>
 8001cec:	2480      	movs	r4, #128	@ 0x80
 8001cee:	464b      	mov	r3, r9
 8001cf0:	0324      	lsls	r4, r4, #12
 8001cf2:	4223      	tst	r3, r4
 8001cf4:	d002      	beq.n	8001cfc <__aeabi_ddiv+0x208>
 8001cf6:	465b      	mov	r3, fp
 8001cf8:	4223      	tst	r3, r4
 8001cfa:	d0f0      	beq.n	8001cde <__aeabi_ddiv+0x1ea>
 8001cfc:	2480      	movs	r4, #128	@ 0x80
 8001cfe:	464b      	mov	r3, r9
 8001d00:	0324      	lsls	r4, r4, #12
 8001d02:	431c      	orrs	r4, r3
 8001d04:	0324      	lsls	r4, r4, #12
 8001d06:	9e02      	ldr	r6, [sp, #8]
 8001d08:	4b01      	ldr	r3, [pc, #4]	@ (8001d10 <__aeabi_ddiv+0x21c>)
 8001d0a:	0b24      	lsrs	r4, r4, #12
 8001d0c:	e75e      	b.n	8001bcc <__aeabi_ddiv+0xd8>
 8001d0e:	46c0      	nop			@ (mov r8, r8)
 8001d10:	000007ff 	.word	0x000007ff
 8001d14:	fffffc01 	.word	0xfffffc01
 8001d18:	08009e04 	.word	0x08009e04
 8001d1c:	fffff801 	.word	0xfffff801
 8001d20:	000003f3 	.word	0x000003f3
 8001d24:	fffffc0d 	.word	0xfffffc0d
 8001d28:	45cb      	cmp	fp, r9
 8001d2a:	d200      	bcs.n	8001d2e <__aeabi_ddiv+0x23a>
 8001d2c:	e0f8      	b.n	8001f20 <__aeabi_ddiv+0x42c>
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_ddiv+0x23e>
 8001d30:	e0f3      	b.n	8001f1a <__aeabi_ddiv+0x426>
 8001d32:	2301      	movs	r3, #1
 8001d34:	425b      	negs	r3, r3
 8001d36:	469c      	mov	ip, r3
 8001d38:	4644      	mov	r4, r8
 8001d3a:	4648      	mov	r0, r9
 8001d3c:	2500      	movs	r5, #0
 8001d3e:	44e2      	add	sl, ip
 8001d40:	465b      	mov	r3, fp
 8001d42:	0e17      	lsrs	r7, r2, #24
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	431f      	orrs	r7, r3
 8001d48:	0c19      	lsrs	r1, r3, #16
 8001d4a:	043b      	lsls	r3, r7, #16
 8001d4c:	0212      	lsls	r2, r2, #8
 8001d4e:	9700      	str	r7, [sp, #0]
 8001d50:	0c1f      	lsrs	r7, r3, #16
 8001d52:	4691      	mov	r9, r2
 8001d54:	9102      	str	r1, [sp, #8]
 8001d56:	9703      	str	r7, [sp, #12]
 8001d58:	f7fe fa5c 	bl	8000214 <__aeabi_uidivmod>
 8001d5c:	0002      	movs	r2, r0
 8001d5e:	437a      	muls	r2, r7
 8001d60:	040b      	lsls	r3, r1, #16
 8001d62:	0c21      	lsrs	r1, r4, #16
 8001d64:	4680      	mov	r8, r0
 8001d66:	4319      	orrs	r1, r3
 8001d68:	428a      	cmp	r2, r1
 8001d6a:	d909      	bls.n	8001d80 <__aeabi_ddiv+0x28c>
 8001d6c:	9f00      	ldr	r7, [sp, #0]
 8001d6e:	2301      	movs	r3, #1
 8001d70:	46bc      	mov	ip, r7
 8001d72:	425b      	negs	r3, r3
 8001d74:	4461      	add	r1, ip
 8001d76:	469c      	mov	ip, r3
 8001d78:	44e0      	add	r8, ip
 8001d7a:	428f      	cmp	r7, r1
 8001d7c:	d800      	bhi.n	8001d80 <__aeabi_ddiv+0x28c>
 8001d7e:	e15c      	b.n	800203a <__aeabi_ddiv+0x546>
 8001d80:	1a88      	subs	r0, r1, r2
 8001d82:	9902      	ldr	r1, [sp, #8]
 8001d84:	f7fe fa46 	bl	8000214 <__aeabi_uidivmod>
 8001d88:	9a03      	ldr	r2, [sp, #12]
 8001d8a:	0424      	lsls	r4, r4, #16
 8001d8c:	4342      	muls	r2, r0
 8001d8e:	0409      	lsls	r1, r1, #16
 8001d90:	0c24      	lsrs	r4, r4, #16
 8001d92:	0003      	movs	r3, r0
 8001d94:	430c      	orrs	r4, r1
 8001d96:	42a2      	cmp	r2, r4
 8001d98:	d906      	bls.n	8001da8 <__aeabi_ddiv+0x2b4>
 8001d9a:	9900      	ldr	r1, [sp, #0]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	468c      	mov	ip, r1
 8001da0:	4464      	add	r4, ip
 8001da2:	42a1      	cmp	r1, r4
 8001da4:	d800      	bhi.n	8001da8 <__aeabi_ddiv+0x2b4>
 8001da6:	e142      	b.n	800202e <__aeabi_ddiv+0x53a>
 8001da8:	1aa0      	subs	r0, r4, r2
 8001daa:	4642      	mov	r2, r8
 8001dac:	0412      	lsls	r2, r2, #16
 8001dae:	431a      	orrs	r2, r3
 8001db0:	4693      	mov	fp, r2
 8001db2:	464b      	mov	r3, r9
 8001db4:	4659      	mov	r1, fp
 8001db6:	0c1b      	lsrs	r3, r3, #16
 8001db8:	001f      	movs	r7, r3
 8001dba:	9304      	str	r3, [sp, #16]
 8001dbc:	040b      	lsls	r3, r1, #16
 8001dbe:	4649      	mov	r1, r9
 8001dc0:	0409      	lsls	r1, r1, #16
 8001dc2:	0c09      	lsrs	r1, r1, #16
 8001dc4:	000c      	movs	r4, r1
 8001dc6:	0c1b      	lsrs	r3, r3, #16
 8001dc8:	435c      	muls	r4, r3
 8001dca:	0c12      	lsrs	r2, r2, #16
 8001dcc:	437b      	muls	r3, r7
 8001dce:	4688      	mov	r8, r1
 8001dd0:	4351      	muls	r1, r2
 8001dd2:	437a      	muls	r2, r7
 8001dd4:	0c27      	lsrs	r7, r4, #16
 8001dd6:	46bc      	mov	ip, r7
 8001dd8:	185b      	adds	r3, r3, r1
 8001dda:	4463      	add	r3, ip
 8001ddc:	4299      	cmp	r1, r3
 8001dde:	d903      	bls.n	8001de8 <__aeabi_ddiv+0x2f4>
 8001de0:	2180      	movs	r1, #128	@ 0x80
 8001de2:	0249      	lsls	r1, r1, #9
 8001de4:	468c      	mov	ip, r1
 8001de6:	4462      	add	r2, ip
 8001de8:	0c19      	lsrs	r1, r3, #16
 8001dea:	0424      	lsls	r4, r4, #16
 8001dec:	041b      	lsls	r3, r3, #16
 8001dee:	0c24      	lsrs	r4, r4, #16
 8001df0:	188a      	adds	r2, r1, r2
 8001df2:	191c      	adds	r4, r3, r4
 8001df4:	4290      	cmp	r0, r2
 8001df6:	d302      	bcc.n	8001dfe <__aeabi_ddiv+0x30a>
 8001df8:	d116      	bne.n	8001e28 <__aeabi_ddiv+0x334>
 8001dfa:	42a5      	cmp	r5, r4
 8001dfc:	d214      	bcs.n	8001e28 <__aeabi_ddiv+0x334>
 8001dfe:	465b      	mov	r3, fp
 8001e00:	9f00      	ldr	r7, [sp, #0]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	444d      	add	r5, r9
 8001e06:	9305      	str	r3, [sp, #20]
 8001e08:	454d      	cmp	r5, r9
 8001e0a:	419b      	sbcs	r3, r3
 8001e0c:	46bc      	mov	ip, r7
 8001e0e:	425b      	negs	r3, r3
 8001e10:	4463      	add	r3, ip
 8001e12:	18c0      	adds	r0, r0, r3
 8001e14:	4287      	cmp	r7, r0
 8001e16:	d300      	bcc.n	8001e1a <__aeabi_ddiv+0x326>
 8001e18:	e102      	b.n	8002020 <__aeabi_ddiv+0x52c>
 8001e1a:	4282      	cmp	r2, r0
 8001e1c:	d900      	bls.n	8001e20 <__aeabi_ddiv+0x32c>
 8001e1e:	e129      	b.n	8002074 <__aeabi_ddiv+0x580>
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x330>
 8001e22:	e124      	b.n	800206e <__aeabi_ddiv+0x57a>
 8001e24:	9b05      	ldr	r3, [sp, #20]
 8001e26:	469b      	mov	fp, r3
 8001e28:	1b2c      	subs	r4, r5, r4
 8001e2a:	42a5      	cmp	r5, r4
 8001e2c:	41ad      	sbcs	r5, r5
 8001e2e:	9b00      	ldr	r3, [sp, #0]
 8001e30:	1a80      	subs	r0, r0, r2
 8001e32:	426d      	negs	r5, r5
 8001e34:	1b40      	subs	r0, r0, r5
 8001e36:	4283      	cmp	r3, r0
 8001e38:	d100      	bne.n	8001e3c <__aeabi_ddiv+0x348>
 8001e3a:	e10f      	b.n	800205c <__aeabi_ddiv+0x568>
 8001e3c:	9902      	ldr	r1, [sp, #8]
 8001e3e:	f7fe f9e9 	bl	8000214 <__aeabi_uidivmod>
 8001e42:	9a03      	ldr	r2, [sp, #12]
 8001e44:	040b      	lsls	r3, r1, #16
 8001e46:	4342      	muls	r2, r0
 8001e48:	0c21      	lsrs	r1, r4, #16
 8001e4a:	0005      	movs	r5, r0
 8001e4c:	4319      	orrs	r1, r3
 8001e4e:	428a      	cmp	r2, r1
 8001e50:	d900      	bls.n	8001e54 <__aeabi_ddiv+0x360>
 8001e52:	e0cb      	b.n	8001fec <__aeabi_ddiv+0x4f8>
 8001e54:	1a88      	subs	r0, r1, r2
 8001e56:	9902      	ldr	r1, [sp, #8]
 8001e58:	f7fe f9dc 	bl	8000214 <__aeabi_uidivmod>
 8001e5c:	9a03      	ldr	r2, [sp, #12]
 8001e5e:	0424      	lsls	r4, r4, #16
 8001e60:	4342      	muls	r2, r0
 8001e62:	0409      	lsls	r1, r1, #16
 8001e64:	0c24      	lsrs	r4, r4, #16
 8001e66:	0003      	movs	r3, r0
 8001e68:	430c      	orrs	r4, r1
 8001e6a:	42a2      	cmp	r2, r4
 8001e6c:	d900      	bls.n	8001e70 <__aeabi_ddiv+0x37c>
 8001e6e:	e0ca      	b.n	8002006 <__aeabi_ddiv+0x512>
 8001e70:	4641      	mov	r1, r8
 8001e72:	1aa4      	subs	r4, r4, r2
 8001e74:	042a      	lsls	r2, r5, #16
 8001e76:	431a      	orrs	r2, r3
 8001e78:	9f04      	ldr	r7, [sp, #16]
 8001e7a:	0413      	lsls	r3, r2, #16
 8001e7c:	0c1b      	lsrs	r3, r3, #16
 8001e7e:	4359      	muls	r1, r3
 8001e80:	4640      	mov	r0, r8
 8001e82:	437b      	muls	r3, r7
 8001e84:	469c      	mov	ip, r3
 8001e86:	0c15      	lsrs	r5, r2, #16
 8001e88:	4368      	muls	r0, r5
 8001e8a:	0c0b      	lsrs	r3, r1, #16
 8001e8c:	4484      	add	ip, r0
 8001e8e:	4463      	add	r3, ip
 8001e90:	437d      	muls	r5, r7
 8001e92:	4298      	cmp	r0, r3
 8001e94:	d903      	bls.n	8001e9e <__aeabi_ddiv+0x3aa>
 8001e96:	2080      	movs	r0, #128	@ 0x80
 8001e98:	0240      	lsls	r0, r0, #9
 8001e9a:	4684      	mov	ip, r0
 8001e9c:	4465      	add	r5, ip
 8001e9e:	0c18      	lsrs	r0, r3, #16
 8001ea0:	0409      	lsls	r1, r1, #16
 8001ea2:	041b      	lsls	r3, r3, #16
 8001ea4:	0c09      	lsrs	r1, r1, #16
 8001ea6:	1940      	adds	r0, r0, r5
 8001ea8:	185b      	adds	r3, r3, r1
 8001eaa:	4284      	cmp	r4, r0
 8001eac:	d327      	bcc.n	8001efe <__aeabi_ddiv+0x40a>
 8001eae:	d023      	beq.n	8001ef8 <__aeabi_ddiv+0x404>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	0035      	movs	r5, r6
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	4b94      	ldr	r3, [pc, #592]	@ (8002108 <__aeabi_ddiv+0x614>)
 8001eb8:	4453      	add	r3, sl
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	dd60      	ble.n	8001f80 <__aeabi_ddiv+0x48c>
 8001ebe:	0751      	lsls	r1, r2, #29
 8001ec0:	d000      	beq.n	8001ec4 <__aeabi_ddiv+0x3d0>
 8001ec2:	e086      	b.n	8001fd2 <__aeabi_ddiv+0x4de>
 8001ec4:	002e      	movs	r6, r5
 8001ec6:	08d1      	lsrs	r1, r2, #3
 8001ec8:	465a      	mov	r2, fp
 8001eca:	01d2      	lsls	r2, r2, #7
 8001ecc:	d506      	bpl.n	8001edc <__aeabi_ddiv+0x3e8>
 8001ece:	465a      	mov	r2, fp
 8001ed0:	4b8e      	ldr	r3, [pc, #568]	@ (800210c <__aeabi_ddiv+0x618>)
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	2380      	movs	r3, #128	@ 0x80
 8001ed6:	4693      	mov	fp, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4453      	add	r3, sl
 8001edc:	4a8c      	ldr	r2, [pc, #560]	@ (8002110 <__aeabi_ddiv+0x61c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	dd00      	ble.n	8001ee4 <__aeabi_ddiv+0x3f0>
 8001ee2:	e680      	b.n	8001be6 <__aeabi_ddiv+0xf2>
 8001ee4:	465a      	mov	r2, fp
 8001ee6:	0752      	lsls	r2, r2, #29
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	4690      	mov	r8, r2
 8001eec:	465a      	mov	r2, fp
 8001eee:	055b      	lsls	r3, r3, #21
 8001ef0:	0254      	lsls	r4, r2, #9
 8001ef2:	0b24      	lsrs	r4, r4, #12
 8001ef4:	0d5b      	lsrs	r3, r3, #21
 8001ef6:	e669      	b.n	8001bcc <__aeabi_ddiv+0xd8>
 8001ef8:	0035      	movs	r5, r6
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0db      	beq.n	8001eb6 <__aeabi_ddiv+0x3c2>
 8001efe:	9d00      	ldr	r5, [sp, #0]
 8001f00:	1e51      	subs	r1, r2, #1
 8001f02:	46ac      	mov	ip, r5
 8001f04:	4464      	add	r4, ip
 8001f06:	42ac      	cmp	r4, r5
 8001f08:	d200      	bcs.n	8001f0c <__aeabi_ddiv+0x418>
 8001f0a:	e09e      	b.n	800204a <__aeabi_ddiv+0x556>
 8001f0c:	4284      	cmp	r4, r0
 8001f0e:	d200      	bcs.n	8001f12 <__aeabi_ddiv+0x41e>
 8001f10:	e0e1      	b.n	80020d6 <__aeabi_ddiv+0x5e2>
 8001f12:	d100      	bne.n	8001f16 <__aeabi_ddiv+0x422>
 8001f14:	e0ee      	b.n	80020f4 <__aeabi_ddiv+0x600>
 8001f16:	000a      	movs	r2, r1
 8001f18:	e7ca      	b.n	8001eb0 <__aeabi_ddiv+0x3bc>
 8001f1a:	4542      	cmp	r2, r8
 8001f1c:	d900      	bls.n	8001f20 <__aeabi_ddiv+0x42c>
 8001f1e:	e708      	b.n	8001d32 <__aeabi_ddiv+0x23e>
 8001f20:	464b      	mov	r3, r9
 8001f22:	07dc      	lsls	r4, r3, #31
 8001f24:	0858      	lsrs	r0, r3, #1
 8001f26:	4643      	mov	r3, r8
 8001f28:	085b      	lsrs	r3, r3, #1
 8001f2a:	431c      	orrs	r4, r3
 8001f2c:	4643      	mov	r3, r8
 8001f2e:	07dd      	lsls	r5, r3, #31
 8001f30:	e706      	b.n	8001d40 <__aeabi_ddiv+0x24c>
 8001f32:	f000 fe73 	bl	8002c1c <__clzsi2>
 8001f36:	2315      	movs	r3, #21
 8001f38:	469c      	mov	ip, r3
 8001f3a:	4484      	add	ip, r0
 8001f3c:	0002      	movs	r2, r0
 8001f3e:	4663      	mov	r3, ip
 8001f40:	3220      	adds	r2, #32
 8001f42:	2b1c      	cmp	r3, #28
 8001f44:	dc00      	bgt.n	8001f48 <__aeabi_ddiv+0x454>
 8001f46:	e692      	b.n	8001c6e <__aeabi_ddiv+0x17a>
 8001f48:	0023      	movs	r3, r4
 8001f4a:	3808      	subs	r0, #8
 8001f4c:	4083      	lsls	r3, r0
 8001f4e:	4699      	mov	r9, r3
 8001f50:	2300      	movs	r3, #0
 8001f52:	4698      	mov	r8, r3
 8001f54:	e69a      	b.n	8001c8c <__aeabi_ddiv+0x198>
 8001f56:	f000 fe61 	bl	8002c1c <__clzsi2>
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	3215      	adds	r2, #21
 8001f60:	3320      	adds	r3, #32
 8001f62:	2a1c      	cmp	r2, #28
 8001f64:	dc00      	bgt.n	8001f68 <__aeabi_ddiv+0x474>
 8001f66:	e65f      	b.n	8001c28 <__aeabi_ddiv+0x134>
 8001f68:	9900      	ldr	r1, [sp, #0]
 8001f6a:	3808      	subs	r0, #8
 8001f6c:	4081      	lsls	r1, r0
 8001f6e:	2200      	movs	r2, #0
 8001f70:	468b      	mov	fp, r1
 8001f72:	e666      	b.n	8001c42 <__aeabi_ddiv+0x14e>
 8001f74:	2200      	movs	r2, #0
 8001f76:	002e      	movs	r6, r5
 8001f78:	2400      	movs	r4, #0
 8001f7a:	4690      	mov	r8, r2
 8001f7c:	4b65      	ldr	r3, [pc, #404]	@ (8002114 <__aeabi_ddiv+0x620>)
 8001f7e:	e625      	b.n	8001bcc <__aeabi_ddiv+0xd8>
 8001f80:	002e      	movs	r6, r5
 8001f82:	2101      	movs	r1, #1
 8001f84:	1ac9      	subs	r1, r1, r3
 8001f86:	2938      	cmp	r1, #56	@ 0x38
 8001f88:	dd00      	ble.n	8001f8c <__aeabi_ddiv+0x498>
 8001f8a:	e61b      	b.n	8001bc4 <__aeabi_ddiv+0xd0>
 8001f8c:	291f      	cmp	r1, #31
 8001f8e:	dc7e      	bgt.n	800208e <__aeabi_ddiv+0x59a>
 8001f90:	4861      	ldr	r0, [pc, #388]	@ (8002118 <__aeabi_ddiv+0x624>)
 8001f92:	0014      	movs	r4, r2
 8001f94:	4450      	add	r0, sl
 8001f96:	465b      	mov	r3, fp
 8001f98:	4082      	lsls	r2, r0
 8001f9a:	4083      	lsls	r3, r0
 8001f9c:	40cc      	lsrs	r4, r1
 8001f9e:	1e50      	subs	r0, r2, #1
 8001fa0:	4182      	sbcs	r2, r0
 8001fa2:	4323      	orrs	r3, r4
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	465b      	mov	r3, fp
 8001fa8:	40cb      	lsrs	r3, r1
 8001faa:	0751      	lsls	r1, r2, #29
 8001fac:	d009      	beq.n	8001fc2 <__aeabi_ddiv+0x4ce>
 8001fae:	210f      	movs	r1, #15
 8001fb0:	4011      	ands	r1, r2
 8001fb2:	2904      	cmp	r1, #4
 8001fb4:	d005      	beq.n	8001fc2 <__aeabi_ddiv+0x4ce>
 8001fb6:	1d11      	adds	r1, r2, #4
 8001fb8:	4291      	cmp	r1, r2
 8001fba:	4192      	sbcs	r2, r2
 8001fbc:	4252      	negs	r2, r2
 8001fbe:	189b      	adds	r3, r3, r2
 8001fc0:	000a      	movs	r2, r1
 8001fc2:	0219      	lsls	r1, r3, #8
 8001fc4:	d400      	bmi.n	8001fc8 <__aeabi_ddiv+0x4d4>
 8001fc6:	e09b      	b.n	8002100 <__aeabi_ddiv+0x60c>
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2301      	movs	r3, #1
 8001fcc:	2400      	movs	r4, #0
 8001fce:	4690      	mov	r8, r2
 8001fd0:	e5fc      	b.n	8001bcc <__aeabi_ddiv+0xd8>
 8001fd2:	210f      	movs	r1, #15
 8001fd4:	4011      	ands	r1, r2
 8001fd6:	2904      	cmp	r1, #4
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_ddiv+0x4e8>
 8001fda:	e773      	b.n	8001ec4 <__aeabi_ddiv+0x3d0>
 8001fdc:	1d11      	adds	r1, r2, #4
 8001fde:	4291      	cmp	r1, r2
 8001fe0:	4192      	sbcs	r2, r2
 8001fe2:	4252      	negs	r2, r2
 8001fe4:	002e      	movs	r6, r5
 8001fe6:	08c9      	lsrs	r1, r1, #3
 8001fe8:	4493      	add	fp, r2
 8001fea:	e76d      	b.n	8001ec8 <__aeabi_ddiv+0x3d4>
 8001fec:	9b00      	ldr	r3, [sp, #0]
 8001fee:	3d01      	subs	r5, #1
 8001ff0:	469c      	mov	ip, r3
 8001ff2:	4461      	add	r1, ip
 8001ff4:	428b      	cmp	r3, r1
 8001ff6:	d900      	bls.n	8001ffa <__aeabi_ddiv+0x506>
 8001ff8:	e72c      	b.n	8001e54 <__aeabi_ddiv+0x360>
 8001ffa:	428a      	cmp	r2, r1
 8001ffc:	d800      	bhi.n	8002000 <__aeabi_ddiv+0x50c>
 8001ffe:	e729      	b.n	8001e54 <__aeabi_ddiv+0x360>
 8002000:	1e85      	subs	r5, r0, #2
 8002002:	4461      	add	r1, ip
 8002004:	e726      	b.n	8001e54 <__aeabi_ddiv+0x360>
 8002006:	9900      	ldr	r1, [sp, #0]
 8002008:	3b01      	subs	r3, #1
 800200a:	468c      	mov	ip, r1
 800200c:	4464      	add	r4, ip
 800200e:	42a1      	cmp	r1, r4
 8002010:	d900      	bls.n	8002014 <__aeabi_ddiv+0x520>
 8002012:	e72d      	b.n	8001e70 <__aeabi_ddiv+0x37c>
 8002014:	42a2      	cmp	r2, r4
 8002016:	d800      	bhi.n	800201a <__aeabi_ddiv+0x526>
 8002018:	e72a      	b.n	8001e70 <__aeabi_ddiv+0x37c>
 800201a:	1e83      	subs	r3, r0, #2
 800201c:	4464      	add	r4, ip
 800201e:	e727      	b.n	8001e70 <__aeabi_ddiv+0x37c>
 8002020:	4287      	cmp	r7, r0
 8002022:	d000      	beq.n	8002026 <__aeabi_ddiv+0x532>
 8002024:	e6fe      	b.n	8001e24 <__aeabi_ddiv+0x330>
 8002026:	45a9      	cmp	r9, r5
 8002028:	d900      	bls.n	800202c <__aeabi_ddiv+0x538>
 800202a:	e6fb      	b.n	8001e24 <__aeabi_ddiv+0x330>
 800202c:	e6f5      	b.n	8001e1a <__aeabi_ddiv+0x326>
 800202e:	42a2      	cmp	r2, r4
 8002030:	d800      	bhi.n	8002034 <__aeabi_ddiv+0x540>
 8002032:	e6b9      	b.n	8001da8 <__aeabi_ddiv+0x2b4>
 8002034:	1e83      	subs	r3, r0, #2
 8002036:	4464      	add	r4, ip
 8002038:	e6b6      	b.n	8001da8 <__aeabi_ddiv+0x2b4>
 800203a:	428a      	cmp	r2, r1
 800203c:	d800      	bhi.n	8002040 <__aeabi_ddiv+0x54c>
 800203e:	e69f      	b.n	8001d80 <__aeabi_ddiv+0x28c>
 8002040:	46bc      	mov	ip, r7
 8002042:	1e83      	subs	r3, r0, #2
 8002044:	4698      	mov	r8, r3
 8002046:	4461      	add	r1, ip
 8002048:	e69a      	b.n	8001d80 <__aeabi_ddiv+0x28c>
 800204a:	000a      	movs	r2, r1
 800204c:	4284      	cmp	r4, r0
 800204e:	d000      	beq.n	8002052 <__aeabi_ddiv+0x55e>
 8002050:	e72e      	b.n	8001eb0 <__aeabi_ddiv+0x3bc>
 8002052:	454b      	cmp	r3, r9
 8002054:	d000      	beq.n	8002058 <__aeabi_ddiv+0x564>
 8002056:	e72b      	b.n	8001eb0 <__aeabi_ddiv+0x3bc>
 8002058:	0035      	movs	r5, r6
 800205a:	e72c      	b.n	8001eb6 <__aeabi_ddiv+0x3c2>
 800205c:	4b2a      	ldr	r3, [pc, #168]	@ (8002108 <__aeabi_ddiv+0x614>)
 800205e:	4a2f      	ldr	r2, [pc, #188]	@ (800211c <__aeabi_ddiv+0x628>)
 8002060:	4453      	add	r3, sl
 8002062:	4592      	cmp	sl, r2
 8002064:	db43      	blt.n	80020ee <__aeabi_ddiv+0x5fa>
 8002066:	2201      	movs	r2, #1
 8002068:	2100      	movs	r1, #0
 800206a:	4493      	add	fp, r2
 800206c:	e72c      	b.n	8001ec8 <__aeabi_ddiv+0x3d4>
 800206e:	42ac      	cmp	r4, r5
 8002070:	d800      	bhi.n	8002074 <__aeabi_ddiv+0x580>
 8002072:	e6d7      	b.n	8001e24 <__aeabi_ddiv+0x330>
 8002074:	2302      	movs	r3, #2
 8002076:	425b      	negs	r3, r3
 8002078:	469c      	mov	ip, r3
 800207a:	9900      	ldr	r1, [sp, #0]
 800207c:	444d      	add	r5, r9
 800207e:	454d      	cmp	r5, r9
 8002080:	419b      	sbcs	r3, r3
 8002082:	44e3      	add	fp, ip
 8002084:	468c      	mov	ip, r1
 8002086:	425b      	negs	r3, r3
 8002088:	4463      	add	r3, ip
 800208a:	18c0      	adds	r0, r0, r3
 800208c:	e6cc      	b.n	8001e28 <__aeabi_ddiv+0x334>
 800208e:	201f      	movs	r0, #31
 8002090:	4240      	negs	r0, r0
 8002092:	1ac3      	subs	r3, r0, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d8      	lsrs	r0, r3
 8002098:	2920      	cmp	r1, #32
 800209a:	d004      	beq.n	80020a6 <__aeabi_ddiv+0x5b2>
 800209c:	4659      	mov	r1, fp
 800209e:	4b20      	ldr	r3, [pc, #128]	@ (8002120 <__aeabi_ddiv+0x62c>)
 80020a0:	4453      	add	r3, sl
 80020a2:	4099      	lsls	r1, r3
 80020a4:	430a      	orrs	r2, r1
 80020a6:	1e53      	subs	r3, r2, #1
 80020a8:	419a      	sbcs	r2, r3
 80020aa:	2307      	movs	r3, #7
 80020ac:	0019      	movs	r1, r3
 80020ae:	4302      	orrs	r2, r0
 80020b0:	2400      	movs	r4, #0
 80020b2:	4011      	ands	r1, r2
 80020b4:	4213      	tst	r3, r2
 80020b6:	d009      	beq.n	80020cc <__aeabi_ddiv+0x5d8>
 80020b8:	3308      	adds	r3, #8
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d01d      	beq.n	80020fc <__aeabi_ddiv+0x608>
 80020c0:	1d13      	adds	r3, r2, #4
 80020c2:	4293      	cmp	r3, r2
 80020c4:	4189      	sbcs	r1, r1
 80020c6:	001a      	movs	r2, r3
 80020c8:	4249      	negs	r1, r1
 80020ca:	0749      	lsls	r1, r1, #29
 80020cc:	08d2      	lsrs	r2, r2, #3
 80020ce:	430a      	orrs	r2, r1
 80020d0:	4690      	mov	r8, r2
 80020d2:	2300      	movs	r3, #0
 80020d4:	e57a      	b.n	8001bcc <__aeabi_ddiv+0xd8>
 80020d6:	4649      	mov	r1, r9
 80020d8:	9f00      	ldr	r7, [sp, #0]
 80020da:	004d      	lsls	r5, r1, #1
 80020dc:	454d      	cmp	r5, r9
 80020de:	4189      	sbcs	r1, r1
 80020e0:	46bc      	mov	ip, r7
 80020e2:	4249      	negs	r1, r1
 80020e4:	4461      	add	r1, ip
 80020e6:	46a9      	mov	r9, r5
 80020e8:	3a02      	subs	r2, #2
 80020ea:	1864      	adds	r4, r4, r1
 80020ec:	e7ae      	b.n	800204c <__aeabi_ddiv+0x558>
 80020ee:	2201      	movs	r2, #1
 80020f0:	4252      	negs	r2, r2
 80020f2:	e746      	b.n	8001f82 <__aeabi_ddiv+0x48e>
 80020f4:	4599      	cmp	r9, r3
 80020f6:	d3ee      	bcc.n	80020d6 <__aeabi_ddiv+0x5e2>
 80020f8:	000a      	movs	r2, r1
 80020fa:	e7aa      	b.n	8002052 <__aeabi_ddiv+0x55e>
 80020fc:	2100      	movs	r1, #0
 80020fe:	e7e5      	b.n	80020cc <__aeabi_ddiv+0x5d8>
 8002100:	0759      	lsls	r1, r3, #29
 8002102:	025b      	lsls	r3, r3, #9
 8002104:	0b1c      	lsrs	r4, r3, #12
 8002106:	e7e1      	b.n	80020cc <__aeabi_ddiv+0x5d8>
 8002108:	000003ff 	.word	0x000003ff
 800210c:	feffffff 	.word	0xfeffffff
 8002110:	000007fe 	.word	0x000007fe
 8002114:	000007ff 	.word	0x000007ff
 8002118:	0000041e 	.word	0x0000041e
 800211c:	fffffc02 	.word	0xfffffc02
 8002120:	0000043e 	.word	0x0000043e

08002124 <__aeabi_dsub>:
 8002124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002126:	4657      	mov	r7, sl
 8002128:	464e      	mov	r6, r9
 800212a:	4645      	mov	r5, r8
 800212c:	46de      	mov	lr, fp
 800212e:	b5e0      	push	{r5, r6, r7, lr}
 8002130:	b083      	sub	sp, #12
 8002132:	9000      	str	r0, [sp, #0]
 8002134:	9101      	str	r1, [sp, #4]
 8002136:	030c      	lsls	r4, r1, #12
 8002138:	004d      	lsls	r5, r1, #1
 800213a:	0fce      	lsrs	r6, r1, #31
 800213c:	0a61      	lsrs	r1, r4, #9
 800213e:	9c00      	ldr	r4, [sp, #0]
 8002140:	005f      	lsls	r7, r3, #1
 8002142:	0f64      	lsrs	r4, r4, #29
 8002144:	430c      	orrs	r4, r1
 8002146:	9900      	ldr	r1, [sp, #0]
 8002148:	9200      	str	r2, [sp, #0]
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	00c8      	lsls	r0, r1, #3
 800214e:	0319      	lsls	r1, r3, #12
 8002150:	0d7b      	lsrs	r3, r7, #21
 8002152:	4699      	mov	r9, r3
 8002154:	9b01      	ldr	r3, [sp, #4]
 8002156:	4fcc      	ldr	r7, [pc, #816]	@ (8002488 <__aeabi_dsub+0x364>)
 8002158:	0fdb      	lsrs	r3, r3, #31
 800215a:	469c      	mov	ip, r3
 800215c:	0a4b      	lsrs	r3, r1, #9
 800215e:	9900      	ldr	r1, [sp, #0]
 8002160:	4680      	mov	r8, r0
 8002162:	0f49      	lsrs	r1, r1, #29
 8002164:	4319      	orrs	r1, r3
 8002166:	9b00      	ldr	r3, [sp, #0]
 8002168:	468b      	mov	fp, r1
 800216a:	00da      	lsls	r2, r3, #3
 800216c:	4692      	mov	sl, r2
 800216e:	0d6d      	lsrs	r5, r5, #21
 8002170:	45b9      	cmp	r9, r7
 8002172:	d100      	bne.n	8002176 <__aeabi_dsub+0x52>
 8002174:	e0bf      	b.n	80022f6 <__aeabi_dsub+0x1d2>
 8002176:	2301      	movs	r3, #1
 8002178:	4661      	mov	r1, ip
 800217a:	4059      	eors	r1, r3
 800217c:	464b      	mov	r3, r9
 800217e:	468c      	mov	ip, r1
 8002180:	1aeb      	subs	r3, r5, r3
 8002182:	428e      	cmp	r6, r1
 8002184:	d075      	beq.n	8002272 <__aeabi_dsub+0x14e>
 8002186:	2b00      	cmp	r3, #0
 8002188:	dc00      	bgt.n	800218c <__aeabi_dsub+0x68>
 800218a:	e2a3      	b.n	80026d4 <__aeabi_dsub+0x5b0>
 800218c:	4649      	mov	r1, r9
 800218e:	2900      	cmp	r1, #0
 8002190:	d100      	bne.n	8002194 <__aeabi_dsub+0x70>
 8002192:	e0ce      	b.n	8002332 <__aeabi_dsub+0x20e>
 8002194:	42bd      	cmp	r5, r7
 8002196:	d100      	bne.n	800219a <__aeabi_dsub+0x76>
 8002198:	e200      	b.n	800259c <__aeabi_dsub+0x478>
 800219a:	2701      	movs	r7, #1
 800219c:	2b38      	cmp	r3, #56	@ 0x38
 800219e:	dc19      	bgt.n	80021d4 <__aeabi_dsub+0xb0>
 80021a0:	2780      	movs	r7, #128	@ 0x80
 80021a2:	4659      	mov	r1, fp
 80021a4:	043f      	lsls	r7, r7, #16
 80021a6:	4339      	orrs	r1, r7
 80021a8:	468b      	mov	fp, r1
 80021aa:	2b1f      	cmp	r3, #31
 80021ac:	dd00      	ble.n	80021b0 <__aeabi_dsub+0x8c>
 80021ae:	e1fa      	b.n	80025a6 <__aeabi_dsub+0x482>
 80021b0:	2720      	movs	r7, #32
 80021b2:	1af9      	subs	r1, r7, r3
 80021b4:	468c      	mov	ip, r1
 80021b6:	4659      	mov	r1, fp
 80021b8:	4667      	mov	r7, ip
 80021ba:	40b9      	lsls	r1, r7
 80021bc:	000f      	movs	r7, r1
 80021be:	0011      	movs	r1, r2
 80021c0:	40d9      	lsrs	r1, r3
 80021c2:	430f      	orrs	r7, r1
 80021c4:	4661      	mov	r1, ip
 80021c6:	408a      	lsls	r2, r1
 80021c8:	1e51      	subs	r1, r2, #1
 80021ca:	418a      	sbcs	r2, r1
 80021cc:	4659      	mov	r1, fp
 80021ce:	40d9      	lsrs	r1, r3
 80021d0:	4317      	orrs	r7, r2
 80021d2:	1a64      	subs	r4, r4, r1
 80021d4:	1bc7      	subs	r7, r0, r7
 80021d6:	42b8      	cmp	r0, r7
 80021d8:	4180      	sbcs	r0, r0
 80021da:	4240      	negs	r0, r0
 80021dc:	1a24      	subs	r4, r4, r0
 80021de:	0223      	lsls	r3, r4, #8
 80021e0:	d400      	bmi.n	80021e4 <__aeabi_dsub+0xc0>
 80021e2:	e140      	b.n	8002466 <__aeabi_dsub+0x342>
 80021e4:	0264      	lsls	r4, r4, #9
 80021e6:	0a64      	lsrs	r4, r4, #9
 80021e8:	2c00      	cmp	r4, #0
 80021ea:	d100      	bne.n	80021ee <__aeabi_dsub+0xca>
 80021ec:	e154      	b.n	8002498 <__aeabi_dsub+0x374>
 80021ee:	0020      	movs	r0, r4
 80021f0:	f000 fd14 	bl	8002c1c <__clzsi2>
 80021f4:	0003      	movs	r3, r0
 80021f6:	3b08      	subs	r3, #8
 80021f8:	2120      	movs	r1, #32
 80021fa:	0038      	movs	r0, r7
 80021fc:	1aca      	subs	r2, r1, r3
 80021fe:	40d0      	lsrs	r0, r2
 8002200:	409c      	lsls	r4, r3
 8002202:	0002      	movs	r2, r0
 8002204:	409f      	lsls	r7, r3
 8002206:	4322      	orrs	r2, r4
 8002208:	429d      	cmp	r5, r3
 800220a:	dd00      	ble.n	800220e <__aeabi_dsub+0xea>
 800220c:	e1a6      	b.n	800255c <__aeabi_dsub+0x438>
 800220e:	1b58      	subs	r0, r3, r5
 8002210:	3001      	adds	r0, #1
 8002212:	1a09      	subs	r1, r1, r0
 8002214:	003c      	movs	r4, r7
 8002216:	408f      	lsls	r7, r1
 8002218:	40c4      	lsrs	r4, r0
 800221a:	1e7b      	subs	r3, r7, #1
 800221c:	419f      	sbcs	r7, r3
 800221e:	0013      	movs	r3, r2
 8002220:	408b      	lsls	r3, r1
 8002222:	4327      	orrs	r7, r4
 8002224:	431f      	orrs	r7, r3
 8002226:	40c2      	lsrs	r2, r0
 8002228:	003b      	movs	r3, r7
 800222a:	0014      	movs	r4, r2
 800222c:	2500      	movs	r5, #0
 800222e:	4313      	orrs	r3, r2
 8002230:	d100      	bne.n	8002234 <__aeabi_dsub+0x110>
 8002232:	e1f7      	b.n	8002624 <__aeabi_dsub+0x500>
 8002234:	077b      	lsls	r3, r7, #29
 8002236:	d100      	bne.n	800223a <__aeabi_dsub+0x116>
 8002238:	e377      	b.n	800292a <__aeabi_dsub+0x806>
 800223a:	230f      	movs	r3, #15
 800223c:	0038      	movs	r0, r7
 800223e:	403b      	ands	r3, r7
 8002240:	2b04      	cmp	r3, #4
 8002242:	d004      	beq.n	800224e <__aeabi_dsub+0x12a>
 8002244:	1d38      	adds	r0, r7, #4
 8002246:	42b8      	cmp	r0, r7
 8002248:	41bf      	sbcs	r7, r7
 800224a:	427f      	negs	r7, r7
 800224c:	19e4      	adds	r4, r4, r7
 800224e:	0223      	lsls	r3, r4, #8
 8002250:	d400      	bmi.n	8002254 <__aeabi_dsub+0x130>
 8002252:	e368      	b.n	8002926 <__aeabi_dsub+0x802>
 8002254:	4b8c      	ldr	r3, [pc, #560]	@ (8002488 <__aeabi_dsub+0x364>)
 8002256:	3501      	adds	r5, #1
 8002258:	429d      	cmp	r5, r3
 800225a:	d100      	bne.n	800225e <__aeabi_dsub+0x13a>
 800225c:	e0f4      	b.n	8002448 <__aeabi_dsub+0x324>
 800225e:	4b8b      	ldr	r3, [pc, #556]	@ (800248c <__aeabi_dsub+0x368>)
 8002260:	056d      	lsls	r5, r5, #21
 8002262:	401c      	ands	r4, r3
 8002264:	0d6d      	lsrs	r5, r5, #21
 8002266:	0767      	lsls	r7, r4, #29
 8002268:	08c0      	lsrs	r0, r0, #3
 800226a:	0264      	lsls	r4, r4, #9
 800226c:	4307      	orrs	r7, r0
 800226e:	0b24      	lsrs	r4, r4, #12
 8002270:	e0ec      	b.n	800244c <__aeabi_dsub+0x328>
 8002272:	2b00      	cmp	r3, #0
 8002274:	dc00      	bgt.n	8002278 <__aeabi_dsub+0x154>
 8002276:	e329      	b.n	80028cc <__aeabi_dsub+0x7a8>
 8002278:	4649      	mov	r1, r9
 800227a:	2900      	cmp	r1, #0
 800227c:	d000      	beq.n	8002280 <__aeabi_dsub+0x15c>
 800227e:	e0d6      	b.n	800242e <__aeabi_dsub+0x30a>
 8002280:	4659      	mov	r1, fp
 8002282:	4311      	orrs	r1, r2
 8002284:	d100      	bne.n	8002288 <__aeabi_dsub+0x164>
 8002286:	e12e      	b.n	80024e6 <__aeabi_dsub+0x3c2>
 8002288:	1e59      	subs	r1, r3, #1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d100      	bne.n	8002290 <__aeabi_dsub+0x16c>
 800228e:	e1e6      	b.n	800265e <__aeabi_dsub+0x53a>
 8002290:	42bb      	cmp	r3, r7
 8002292:	d100      	bne.n	8002296 <__aeabi_dsub+0x172>
 8002294:	e182      	b.n	800259c <__aeabi_dsub+0x478>
 8002296:	2701      	movs	r7, #1
 8002298:	000b      	movs	r3, r1
 800229a:	2938      	cmp	r1, #56	@ 0x38
 800229c:	dc14      	bgt.n	80022c8 <__aeabi_dsub+0x1a4>
 800229e:	2b1f      	cmp	r3, #31
 80022a0:	dd00      	ble.n	80022a4 <__aeabi_dsub+0x180>
 80022a2:	e23c      	b.n	800271e <__aeabi_dsub+0x5fa>
 80022a4:	2720      	movs	r7, #32
 80022a6:	1af9      	subs	r1, r7, r3
 80022a8:	468c      	mov	ip, r1
 80022aa:	4659      	mov	r1, fp
 80022ac:	4667      	mov	r7, ip
 80022ae:	40b9      	lsls	r1, r7
 80022b0:	000f      	movs	r7, r1
 80022b2:	0011      	movs	r1, r2
 80022b4:	40d9      	lsrs	r1, r3
 80022b6:	430f      	orrs	r7, r1
 80022b8:	4661      	mov	r1, ip
 80022ba:	408a      	lsls	r2, r1
 80022bc:	1e51      	subs	r1, r2, #1
 80022be:	418a      	sbcs	r2, r1
 80022c0:	4659      	mov	r1, fp
 80022c2:	40d9      	lsrs	r1, r3
 80022c4:	4317      	orrs	r7, r2
 80022c6:	1864      	adds	r4, r4, r1
 80022c8:	183f      	adds	r7, r7, r0
 80022ca:	4287      	cmp	r7, r0
 80022cc:	4180      	sbcs	r0, r0
 80022ce:	4240      	negs	r0, r0
 80022d0:	1824      	adds	r4, r4, r0
 80022d2:	0223      	lsls	r3, r4, #8
 80022d4:	d400      	bmi.n	80022d8 <__aeabi_dsub+0x1b4>
 80022d6:	e0c6      	b.n	8002466 <__aeabi_dsub+0x342>
 80022d8:	4b6b      	ldr	r3, [pc, #428]	@ (8002488 <__aeabi_dsub+0x364>)
 80022da:	3501      	adds	r5, #1
 80022dc:	429d      	cmp	r5, r3
 80022de:	d100      	bne.n	80022e2 <__aeabi_dsub+0x1be>
 80022e0:	e0b2      	b.n	8002448 <__aeabi_dsub+0x324>
 80022e2:	2101      	movs	r1, #1
 80022e4:	4b69      	ldr	r3, [pc, #420]	@ (800248c <__aeabi_dsub+0x368>)
 80022e6:	087a      	lsrs	r2, r7, #1
 80022e8:	401c      	ands	r4, r3
 80022ea:	4039      	ands	r1, r7
 80022ec:	430a      	orrs	r2, r1
 80022ee:	07e7      	lsls	r7, r4, #31
 80022f0:	4317      	orrs	r7, r2
 80022f2:	0864      	lsrs	r4, r4, #1
 80022f4:	e79e      	b.n	8002234 <__aeabi_dsub+0x110>
 80022f6:	4b66      	ldr	r3, [pc, #408]	@ (8002490 <__aeabi_dsub+0x36c>)
 80022f8:	4311      	orrs	r1, r2
 80022fa:	468a      	mov	sl, r1
 80022fc:	18eb      	adds	r3, r5, r3
 80022fe:	2900      	cmp	r1, #0
 8002300:	d028      	beq.n	8002354 <__aeabi_dsub+0x230>
 8002302:	4566      	cmp	r6, ip
 8002304:	d02c      	beq.n	8002360 <__aeabi_dsub+0x23c>
 8002306:	2b00      	cmp	r3, #0
 8002308:	d05b      	beq.n	80023c2 <__aeabi_dsub+0x29e>
 800230a:	2d00      	cmp	r5, #0
 800230c:	d100      	bne.n	8002310 <__aeabi_dsub+0x1ec>
 800230e:	e12c      	b.n	800256a <__aeabi_dsub+0x446>
 8002310:	465b      	mov	r3, fp
 8002312:	4666      	mov	r6, ip
 8002314:	075f      	lsls	r7, r3, #29
 8002316:	08d2      	lsrs	r2, r2, #3
 8002318:	4317      	orrs	r7, r2
 800231a:	08dd      	lsrs	r5, r3, #3
 800231c:	003b      	movs	r3, r7
 800231e:	432b      	orrs	r3, r5
 8002320:	d100      	bne.n	8002324 <__aeabi_dsub+0x200>
 8002322:	e0e2      	b.n	80024ea <__aeabi_dsub+0x3c6>
 8002324:	2480      	movs	r4, #128	@ 0x80
 8002326:	0324      	lsls	r4, r4, #12
 8002328:	432c      	orrs	r4, r5
 800232a:	0324      	lsls	r4, r4, #12
 800232c:	4d56      	ldr	r5, [pc, #344]	@ (8002488 <__aeabi_dsub+0x364>)
 800232e:	0b24      	lsrs	r4, r4, #12
 8002330:	e08c      	b.n	800244c <__aeabi_dsub+0x328>
 8002332:	4659      	mov	r1, fp
 8002334:	4311      	orrs	r1, r2
 8002336:	d100      	bne.n	800233a <__aeabi_dsub+0x216>
 8002338:	e0d5      	b.n	80024e6 <__aeabi_dsub+0x3c2>
 800233a:	1e59      	subs	r1, r3, #1
 800233c:	2b01      	cmp	r3, #1
 800233e:	d100      	bne.n	8002342 <__aeabi_dsub+0x21e>
 8002340:	e1b9      	b.n	80026b6 <__aeabi_dsub+0x592>
 8002342:	42bb      	cmp	r3, r7
 8002344:	d100      	bne.n	8002348 <__aeabi_dsub+0x224>
 8002346:	e1b1      	b.n	80026ac <__aeabi_dsub+0x588>
 8002348:	2701      	movs	r7, #1
 800234a:	000b      	movs	r3, r1
 800234c:	2938      	cmp	r1, #56	@ 0x38
 800234e:	dd00      	ble.n	8002352 <__aeabi_dsub+0x22e>
 8002350:	e740      	b.n	80021d4 <__aeabi_dsub+0xb0>
 8002352:	e72a      	b.n	80021aa <__aeabi_dsub+0x86>
 8002354:	4661      	mov	r1, ip
 8002356:	2701      	movs	r7, #1
 8002358:	4079      	eors	r1, r7
 800235a:	468c      	mov	ip, r1
 800235c:	4566      	cmp	r6, ip
 800235e:	d1d2      	bne.n	8002306 <__aeabi_dsub+0x1e2>
 8002360:	2b00      	cmp	r3, #0
 8002362:	d100      	bne.n	8002366 <__aeabi_dsub+0x242>
 8002364:	e0c5      	b.n	80024f2 <__aeabi_dsub+0x3ce>
 8002366:	2d00      	cmp	r5, #0
 8002368:	d000      	beq.n	800236c <__aeabi_dsub+0x248>
 800236a:	e155      	b.n	8002618 <__aeabi_dsub+0x4f4>
 800236c:	464b      	mov	r3, r9
 800236e:	0025      	movs	r5, r4
 8002370:	4305      	orrs	r5, r0
 8002372:	d100      	bne.n	8002376 <__aeabi_dsub+0x252>
 8002374:	e212      	b.n	800279c <__aeabi_dsub+0x678>
 8002376:	1e59      	subs	r1, r3, #1
 8002378:	468c      	mov	ip, r1
 800237a:	2b01      	cmp	r3, #1
 800237c:	d100      	bne.n	8002380 <__aeabi_dsub+0x25c>
 800237e:	e249      	b.n	8002814 <__aeabi_dsub+0x6f0>
 8002380:	4d41      	ldr	r5, [pc, #260]	@ (8002488 <__aeabi_dsub+0x364>)
 8002382:	42ab      	cmp	r3, r5
 8002384:	d100      	bne.n	8002388 <__aeabi_dsub+0x264>
 8002386:	e28f      	b.n	80028a8 <__aeabi_dsub+0x784>
 8002388:	2701      	movs	r7, #1
 800238a:	2938      	cmp	r1, #56	@ 0x38
 800238c:	dc11      	bgt.n	80023b2 <__aeabi_dsub+0x28e>
 800238e:	4663      	mov	r3, ip
 8002390:	2b1f      	cmp	r3, #31
 8002392:	dd00      	ble.n	8002396 <__aeabi_dsub+0x272>
 8002394:	e25b      	b.n	800284e <__aeabi_dsub+0x72a>
 8002396:	4661      	mov	r1, ip
 8002398:	2320      	movs	r3, #32
 800239a:	0027      	movs	r7, r4
 800239c:	1a5b      	subs	r3, r3, r1
 800239e:	0005      	movs	r5, r0
 80023a0:	4098      	lsls	r0, r3
 80023a2:	409f      	lsls	r7, r3
 80023a4:	40cd      	lsrs	r5, r1
 80023a6:	1e43      	subs	r3, r0, #1
 80023a8:	4198      	sbcs	r0, r3
 80023aa:	40cc      	lsrs	r4, r1
 80023ac:	432f      	orrs	r7, r5
 80023ae:	4307      	orrs	r7, r0
 80023b0:	44a3      	add	fp, r4
 80023b2:	18bf      	adds	r7, r7, r2
 80023b4:	4297      	cmp	r7, r2
 80023b6:	4192      	sbcs	r2, r2
 80023b8:	4252      	negs	r2, r2
 80023ba:	445a      	add	r2, fp
 80023bc:	0014      	movs	r4, r2
 80023be:	464d      	mov	r5, r9
 80023c0:	e787      	b.n	80022d2 <__aeabi_dsub+0x1ae>
 80023c2:	4f34      	ldr	r7, [pc, #208]	@ (8002494 <__aeabi_dsub+0x370>)
 80023c4:	1c6b      	adds	r3, r5, #1
 80023c6:	423b      	tst	r3, r7
 80023c8:	d000      	beq.n	80023cc <__aeabi_dsub+0x2a8>
 80023ca:	e0b6      	b.n	800253a <__aeabi_dsub+0x416>
 80023cc:	4659      	mov	r1, fp
 80023ce:	0023      	movs	r3, r4
 80023d0:	4311      	orrs	r1, r2
 80023d2:	000f      	movs	r7, r1
 80023d4:	4303      	orrs	r3, r0
 80023d6:	2d00      	cmp	r5, #0
 80023d8:	d000      	beq.n	80023dc <__aeabi_dsub+0x2b8>
 80023da:	e126      	b.n	800262a <__aeabi_dsub+0x506>
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d100      	bne.n	80023e2 <__aeabi_dsub+0x2be>
 80023e0:	e1c0      	b.n	8002764 <__aeabi_dsub+0x640>
 80023e2:	2900      	cmp	r1, #0
 80023e4:	d100      	bne.n	80023e8 <__aeabi_dsub+0x2c4>
 80023e6:	e0a1      	b.n	800252c <__aeabi_dsub+0x408>
 80023e8:	1a83      	subs	r3, r0, r2
 80023ea:	4698      	mov	r8, r3
 80023ec:	465b      	mov	r3, fp
 80023ee:	4540      	cmp	r0, r8
 80023f0:	41ad      	sbcs	r5, r5
 80023f2:	1ae3      	subs	r3, r4, r3
 80023f4:	426d      	negs	r5, r5
 80023f6:	1b5b      	subs	r3, r3, r5
 80023f8:	2580      	movs	r5, #128	@ 0x80
 80023fa:	042d      	lsls	r5, r5, #16
 80023fc:	422b      	tst	r3, r5
 80023fe:	d100      	bne.n	8002402 <__aeabi_dsub+0x2de>
 8002400:	e14b      	b.n	800269a <__aeabi_dsub+0x576>
 8002402:	465b      	mov	r3, fp
 8002404:	1a10      	subs	r0, r2, r0
 8002406:	4282      	cmp	r2, r0
 8002408:	4192      	sbcs	r2, r2
 800240a:	1b1c      	subs	r4, r3, r4
 800240c:	0007      	movs	r7, r0
 800240e:	2601      	movs	r6, #1
 8002410:	4663      	mov	r3, ip
 8002412:	4252      	negs	r2, r2
 8002414:	1aa4      	subs	r4, r4, r2
 8002416:	4327      	orrs	r7, r4
 8002418:	401e      	ands	r6, r3
 800241a:	2f00      	cmp	r7, #0
 800241c:	d100      	bne.n	8002420 <__aeabi_dsub+0x2fc>
 800241e:	e142      	b.n	80026a6 <__aeabi_dsub+0x582>
 8002420:	422c      	tst	r4, r5
 8002422:	d100      	bne.n	8002426 <__aeabi_dsub+0x302>
 8002424:	e26d      	b.n	8002902 <__aeabi_dsub+0x7de>
 8002426:	4b19      	ldr	r3, [pc, #100]	@ (800248c <__aeabi_dsub+0x368>)
 8002428:	2501      	movs	r5, #1
 800242a:	401c      	ands	r4, r3
 800242c:	e71b      	b.n	8002266 <__aeabi_dsub+0x142>
 800242e:	42bd      	cmp	r5, r7
 8002430:	d100      	bne.n	8002434 <__aeabi_dsub+0x310>
 8002432:	e13b      	b.n	80026ac <__aeabi_dsub+0x588>
 8002434:	2701      	movs	r7, #1
 8002436:	2b38      	cmp	r3, #56	@ 0x38
 8002438:	dd00      	ble.n	800243c <__aeabi_dsub+0x318>
 800243a:	e745      	b.n	80022c8 <__aeabi_dsub+0x1a4>
 800243c:	2780      	movs	r7, #128	@ 0x80
 800243e:	4659      	mov	r1, fp
 8002440:	043f      	lsls	r7, r7, #16
 8002442:	4339      	orrs	r1, r7
 8002444:	468b      	mov	fp, r1
 8002446:	e72a      	b.n	800229e <__aeabi_dsub+0x17a>
 8002448:	2400      	movs	r4, #0
 800244a:	2700      	movs	r7, #0
 800244c:	052d      	lsls	r5, r5, #20
 800244e:	4325      	orrs	r5, r4
 8002450:	07f6      	lsls	r6, r6, #31
 8002452:	4335      	orrs	r5, r6
 8002454:	0038      	movs	r0, r7
 8002456:	0029      	movs	r1, r5
 8002458:	b003      	add	sp, #12
 800245a:	bcf0      	pop	{r4, r5, r6, r7}
 800245c:	46bb      	mov	fp, r7
 800245e:	46b2      	mov	sl, r6
 8002460:	46a9      	mov	r9, r5
 8002462:	46a0      	mov	r8, r4
 8002464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002466:	077b      	lsls	r3, r7, #29
 8002468:	d004      	beq.n	8002474 <__aeabi_dsub+0x350>
 800246a:	230f      	movs	r3, #15
 800246c:	403b      	ands	r3, r7
 800246e:	2b04      	cmp	r3, #4
 8002470:	d000      	beq.n	8002474 <__aeabi_dsub+0x350>
 8002472:	e6e7      	b.n	8002244 <__aeabi_dsub+0x120>
 8002474:	002b      	movs	r3, r5
 8002476:	08f8      	lsrs	r0, r7, #3
 8002478:	4a03      	ldr	r2, [pc, #12]	@ (8002488 <__aeabi_dsub+0x364>)
 800247a:	0767      	lsls	r7, r4, #29
 800247c:	4307      	orrs	r7, r0
 800247e:	08e5      	lsrs	r5, r4, #3
 8002480:	4293      	cmp	r3, r2
 8002482:	d100      	bne.n	8002486 <__aeabi_dsub+0x362>
 8002484:	e74a      	b.n	800231c <__aeabi_dsub+0x1f8>
 8002486:	e0a5      	b.n	80025d4 <__aeabi_dsub+0x4b0>
 8002488:	000007ff 	.word	0x000007ff
 800248c:	ff7fffff 	.word	0xff7fffff
 8002490:	fffff801 	.word	0xfffff801
 8002494:	000007fe 	.word	0x000007fe
 8002498:	0038      	movs	r0, r7
 800249a:	f000 fbbf 	bl	8002c1c <__clzsi2>
 800249e:	0003      	movs	r3, r0
 80024a0:	3318      	adds	r3, #24
 80024a2:	2b1f      	cmp	r3, #31
 80024a4:	dc00      	bgt.n	80024a8 <__aeabi_dsub+0x384>
 80024a6:	e6a7      	b.n	80021f8 <__aeabi_dsub+0xd4>
 80024a8:	003a      	movs	r2, r7
 80024aa:	3808      	subs	r0, #8
 80024ac:	4082      	lsls	r2, r0
 80024ae:	429d      	cmp	r5, r3
 80024b0:	dd00      	ble.n	80024b4 <__aeabi_dsub+0x390>
 80024b2:	e08a      	b.n	80025ca <__aeabi_dsub+0x4a6>
 80024b4:	1b5b      	subs	r3, r3, r5
 80024b6:	1c58      	adds	r0, r3, #1
 80024b8:	281f      	cmp	r0, #31
 80024ba:	dc00      	bgt.n	80024be <__aeabi_dsub+0x39a>
 80024bc:	e1d8      	b.n	8002870 <__aeabi_dsub+0x74c>
 80024be:	0017      	movs	r7, r2
 80024c0:	3b1f      	subs	r3, #31
 80024c2:	40df      	lsrs	r7, r3
 80024c4:	2820      	cmp	r0, #32
 80024c6:	d005      	beq.n	80024d4 <__aeabi_dsub+0x3b0>
 80024c8:	2340      	movs	r3, #64	@ 0x40
 80024ca:	1a1b      	subs	r3, r3, r0
 80024cc:	409a      	lsls	r2, r3
 80024ce:	1e53      	subs	r3, r2, #1
 80024d0:	419a      	sbcs	r2, r3
 80024d2:	4317      	orrs	r7, r2
 80024d4:	2500      	movs	r5, #0
 80024d6:	2f00      	cmp	r7, #0
 80024d8:	d100      	bne.n	80024dc <__aeabi_dsub+0x3b8>
 80024da:	e0e5      	b.n	80026a8 <__aeabi_dsub+0x584>
 80024dc:	077b      	lsls	r3, r7, #29
 80024de:	d000      	beq.n	80024e2 <__aeabi_dsub+0x3be>
 80024e0:	e6ab      	b.n	800223a <__aeabi_dsub+0x116>
 80024e2:	002c      	movs	r4, r5
 80024e4:	e7c6      	b.n	8002474 <__aeabi_dsub+0x350>
 80024e6:	08c0      	lsrs	r0, r0, #3
 80024e8:	e7c6      	b.n	8002478 <__aeabi_dsub+0x354>
 80024ea:	2700      	movs	r7, #0
 80024ec:	2400      	movs	r4, #0
 80024ee:	4dd1      	ldr	r5, [pc, #836]	@ (8002834 <__aeabi_dsub+0x710>)
 80024f0:	e7ac      	b.n	800244c <__aeabi_dsub+0x328>
 80024f2:	4fd1      	ldr	r7, [pc, #836]	@ (8002838 <__aeabi_dsub+0x714>)
 80024f4:	1c6b      	adds	r3, r5, #1
 80024f6:	423b      	tst	r3, r7
 80024f8:	d171      	bne.n	80025de <__aeabi_dsub+0x4ba>
 80024fa:	0023      	movs	r3, r4
 80024fc:	4303      	orrs	r3, r0
 80024fe:	2d00      	cmp	r5, #0
 8002500:	d000      	beq.n	8002504 <__aeabi_dsub+0x3e0>
 8002502:	e14e      	b.n	80027a2 <__aeabi_dsub+0x67e>
 8002504:	4657      	mov	r7, sl
 8002506:	2b00      	cmp	r3, #0
 8002508:	d100      	bne.n	800250c <__aeabi_dsub+0x3e8>
 800250a:	e1b5      	b.n	8002878 <__aeabi_dsub+0x754>
 800250c:	2f00      	cmp	r7, #0
 800250e:	d00d      	beq.n	800252c <__aeabi_dsub+0x408>
 8002510:	1883      	adds	r3, r0, r2
 8002512:	4283      	cmp	r3, r0
 8002514:	4180      	sbcs	r0, r0
 8002516:	445c      	add	r4, fp
 8002518:	4240      	negs	r0, r0
 800251a:	1824      	adds	r4, r4, r0
 800251c:	0222      	lsls	r2, r4, #8
 800251e:	d500      	bpl.n	8002522 <__aeabi_dsub+0x3fe>
 8002520:	e1c8      	b.n	80028b4 <__aeabi_dsub+0x790>
 8002522:	001f      	movs	r7, r3
 8002524:	4698      	mov	r8, r3
 8002526:	4327      	orrs	r7, r4
 8002528:	d100      	bne.n	800252c <__aeabi_dsub+0x408>
 800252a:	e0bc      	b.n	80026a6 <__aeabi_dsub+0x582>
 800252c:	4643      	mov	r3, r8
 800252e:	0767      	lsls	r7, r4, #29
 8002530:	08db      	lsrs	r3, r3, #3
 8002532:	431f      	orrs	r7, r3
 8002534:	08e5      	lsrs	r5, r4, #3
 8002536:	2300      	movs	r3, #0
 8002538:	e04c      	b.n	80025d4 <__aeabi_dsub+0x4b0>
 800253a:	1a83      	subs	r3, r0, r2
 800253c:	4698      	mov	r8, r3
 800253e:	465b      	mov	r3, fp
 8002540:	4540      	cmp	r0, r8
 8002542:	41bf      	sbcs	r7, r7
 8002544:	1ae3      	subs	r3, r4, r3
 8002546:	427f      	negs	r7, r7
 8002548:	1bdb      	subs	r3, r3, r7
 800254a:	021f      	lsls	r7, r3, #8
 800254c:	d47c      	bmi.n	8002648 <__aeabi_dsub+0x524>
 800254e:	4647      	mov	r7, r8
 8002550:	431f      	orrs	r7, r3
 8002552:	d100      	bne.n	8002556 <__aeabi_dsub+0x432>
 8002554:	e0a6      	b.n	80026a4 <__aeabi_dsub+0x580>
 8002556:	001c      	movs	r4, r3
 8002558:	4647      	mov	r7, r8
 800255a:	e645      	b.n	80021e8 <__aeabi_dsub+0xc4>
 800255c:	4cb7      	ldr	r4, [pc, #732]	@ (800283c <__aeabi_dsub+0x718>)
 800255e:	1aed      	subs	r5, r5, r3
 8002560:	4014      	ands	r4, r2
 8002562:	077b      	lsls	r3, r7, #29
 8002564:	d000      	beq.n	8002568 <__aeabi_dsub+0x444>
 8002566:	e780      	b.n	800246a <__aeabi_dsub+0x346>
 8002568:	e784      	b.n	8002474 <__aeabi_dsub+0x350>
 800256a:	464b      	mov	r3, r9
 800256c:	0025      	movs	r5, r4
 800256e:	4305      	orrs	r5, r0
 8002570:	d066      	beq.n	8002640 <__aeabi_dsub+0x51c>
 8002572:	1e5f      	subs	r7, r3, #1
 8002574:	2b01      	cmp	r3, #1
 8002576:	d100      	bne.n	800257a <__aeabi_dsub+0x456>
 8002578:	e0fc      	b.n	8002774 <__aeabi_dsub+0x650>
 800257a:	4dae      	ldr	r5, [pc, #696]	@ (8002834 <__aeabi_dsub+0x710>)
 800257c:	42ab      	cmp	r3, r5
 800257e:	d100      	bne.n	8002582 <__aeabi_dsub+0x45e>
 8002580:	e15e      	b.n	8002840 <__aeabi_dsub+0x71c>
 8002582:	4666      	mov	r6, ip
 8002584:	2f38      	cmp	r7, #56	@ 0x38
 8002586:	dc00      	bgt.n	800258a <__aeabi_dsub+0x466>
 8002588:	e0b4      	b.n	80026f4 <__aeabi_dsub+0x5d0>
 800258a:	2001      	movs	r0, #1
 800258c:	1a17      	subs	r7, r2, r0
 800258e:	42ba      	cmp	r2, r7
 8002590:	4192      	sbcs	r2, r2
 8002592:	465b      	mov	r3, fp
 8002594:	4252      	negs	r2, r2
 8002596:	464d      	mov	r5, r9
 8002598:	1a9c      	subs	r4, r3, r2
 800259a:	e620      	b.n	80021de <__aeabi_dsub+0xba>
 800259c:	0767      	lsls	r7, r4, #29
 800259e:	08c0      	lsrs	r0, r0, #3
 80025a0:	4307      	orrs	r7, r0
 80025a2:	08e5      	lsrs	r5, r4, #3
 80025a4:	e6ba      	b.n	800231c <__aeabi_dsub+0x1f8>
 80025a6:	001f      	movs	r7, r3
 80025a8:	4659      	mov	r1, fp
 80025aa:	3f20      	subs	r7, #32
 80025ac:	40f9      	lsrs	r1, r7
 80025ae:	000f      	movs	r7, r1
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d005      	beq.n	80025c0 <__aeabi_dsub+0x49c>
 80025b4:	2140      	movs	r1, #64	@ 0x40
 80025b6:	1acb      	subs	r3, r1, r3
 80025b8:	4659      	mov	r1, fp
 80025ba:	4099      	lsls	r1, r3
 80025bc:	430a      	orrs	r2, r1
 80025be:	4692      	mov	sl, r2
 80025c0:	4653      	mov	r3, sl
 80025c2:	1e5a      	subs	r2, r3, #1
 80025c4:	4193      	sbcs	r3, r2
 80025c6:	431f      	orrs	r7, r3
 80025c8:	e604      	b.n	80021d4 <__aeabi_dsub+0xb0>
 80025ca:	1aeb      	subs	r3, r5, r3
 80025cc:	4d9b      	ldr	r5, [pc, #620]	@ (800283c <__aeabi_dsub+0x718>)
 80025ce:	4015      	ands	r5, r2
 80025d0:	076f      	lsls	r7, r5, #29
 80025d2:	08ed      	lsrs	r5, r5, #3
 80025d4:	032c      	lsls	r4, r5, #12
 80025d6:	055d      	lsls	r5, r3, #21
 80025d8:	0b24      	lsrs	r4, r4, #12
 80025da:	0d6d      	lsrs	r5, r5, #21
 80025dc:	e736      	b.n	800244c <__aeabi_dsub+0x328>
 80025de:	4d95      	ldr	r5, [pc, #596]	@ (8002834 <__aeabi_dsub+0x710>)
 80025e0:	42ab      	cmp	r3, r5
 80025e2:	d100      	bne.n	80025e6 <__aeabi_dsub+0x4c2>
 80025e4:	e0d6      	b.n	8002794 <__aeabi_dsub+0x670>
 80025e6:	1882      	adds	r2, r0, r2
 80025e8:	0021      	movs	r1, r4
 80025ea:	4282      	cmp	r2, r0
 80025ec:	4180      	sbcs	r0, r0
 80025ee:	4459      	add	r1, fp
 80025f0:	4240      	negs	r0, r0
 80025f2:	1808      	adds	r0, r1, r0
 80025f4:	07c7      	lsls	r7, r0, #31
 80025f6:	0852      	lsrs	r2, r2, #1
 80025f8:	4317      	orrs	r7, r2
 80025fa:	0844      	lsrs	r4, r0, #1
 80025fc:	0752      	lsls	r2, r2, #29
 80025fe:	d400      	bmi.n	8002602 <__aeabi_dsub+0x4de>
 8002600:	e185      	b.n	800290e <__aeabi_dsub+0x7ea>
 8002602:	220f      	movs	r2, #15
 8002604:	001d      	movs	r5, r3
 8002606:	403a      	ands	r2, r7
 8002608:	2a04      	cmp	r2, #4
 800260a:	d000      	beq.n	800260e <__aeabi_dsub+0x4ea>
 800260c:	e61a      	b.n	8002244 <__aeabi_dsub+0x120>
 800260e:	08ff      	lsrs	r7, r7, #3
 8002610:	0764      	lsls	r4, r4, #29
 8002612:	4327      	orrs	r7, r4
 8002614:	0905      	lsrs	r5, r0, #4
 8002616:	e7dd      	b.n	80025d4 <__aeabi_dsub+0x4b0>
 8002618:	465b      	mov	r3, fp
 800261a:	08d2      	lsrs	r2, r2, #3
 800261c:	075f      	lsls	r7, r3, #29
 800261e:	4317      	orrs	r7, r2
 8002620:	08dd      	lsrs	r5, r3, #3
 8002622:	e67b      	b.n	800231c <__aeabi_dsub+0x1f8>
 8002624:	2700      	movs	r7, #0
 8002626:	2400      	movs	r4, #0
 8002628:	e710      	b.n	800244c <__aeabi_dsub+0x328>
 800262a:	2b00      	cmp	r3, #0
 800262c:	d000      	beq.n	8002630 <__aeabi_dsub+0x50c>
 800262e:	e0d6      	b.n	80027de <__aeabi_dsub+0x6ba>
 8002630:	2900      	cmp	r1, #0
 8002632:	d000      	beq.n	8002636 <__aeabi_dsub+0x512>
 8002634:	e12f      	b.n	8002896 <__aeabi_dsub+0x772>
 8002636:	2480      	movs	r4, #128	@ 0x80
 8002638:	2600      	movs	r6, #0
 800263a:	4d7e      	ldr	r5, [pc, #504]	@ (8002834 <__aeabi_dsub+0x710>)
 800263c:	0324      	lsls	r4, r4, #12
 800263e:	e705      	b.n	800244c <__aeabi_dsub+0x328>
 8002640:	4666      	mov	r6, ip
 8002642:	465c      	mov	r4, fp
 8002644:	08d0      	lsrs	r0, r2, #3
 8002646:	e717      	b.n	8002478 <__aeabi_dsub+0x354>
 8002648:	465b      	mov	r3, fp
 800264a:	1a17      	subs	r7, r2, r0
 800264c:	42ba      	cmp	r2, r7
 800264e:	4192      	sbcs	r2, r2
 8002650:	1b1c      	subs	r4, r3, r4
 8002652:	2601      	movs	r6, #1
 8002654:	4663      	mov	r3, ip
 8002656:	4252      	negs	r2, r2
 8002658:	1aa4      	subs	r4, r4, r2
 800265a:	401e      	ands	r6, r3
 800265c:	e5c4      	b.n	80021e8 <__aeabi_dsub+0xc4>
 800265e:	1883      	adds	r3, r0, r2
 8002660:	4283      	cmp	r3, r0
 8002662:	4180      	sbcs	r0, r0
 8002664:	445c      	add	r4, fp
 8002666:	4240      	negs	r0, r0
 8002668:	1825      	adds	r5, r4, r0
 800266a:	022a      	lsls	r2, r5, #8
 800266c:	d400      	bmi.n	8002670 <__aeabi_dsub+0x54c>
 800266e:	e0da      	b.n	8002826 <__aeabi_dsub+0x702>
 8002670:	4a72      	ldr	r2, [pc, #456]	@ (800283c <__aeabi_dsub+0x718>)
 8002672:	085b      	lsrs	r3, r3, #1
 8002674:	4015      	ands	r5, r2
 8002676:	07ea      	lsls	r2, r5, #31
 8002678:	431a      	orrs	r2, r3
 800267a:	0869      	lsrs	r1, r5, #1
 800267c:	075b      	lsls	r3, r3, #29
 800267e:	d400      	bmi.n	8002682 <__aeabi_dsub+0x55e>
 8002680:	e14a      	b.n	8002918 <__aeabi_dsub+0x7f4>
 8002682:	230f      	movs	r3, #15
 8002684:	4013      	ands	r3, r2
 8002686:	2b04      	cmp	r3, #4
 8002688:	d100      	bne.n	800268c <__aeabi_dsub+0x568>
 800268a:	e0fc      	b.n	8002886 <__aeabi_dsub+0x762>
 800268c:	1d17      	adds	r7, r2, #4
 800268e:	4297      	cmp	r7, r2
 8002690:	41a4      	sbcs	r4, r4
 8002692:	4264      	negs	r4, r4
 8002694:	2502      	movs	r5, #2
 8002696:	1864      	adds	r4, r4, r1
 8002698:	e6ec      	b.n	8002474 <__aeabi_dsub+0x350>
 800269a:	4647      	mov	r7, r8
 800269c:	001c      	movs	r4, r3
 800269e:	431f      	orrs	r7, r3
 80026a0:	d000      	beq.n	80026a4 <__aeabi_dsub+0x580>
 80026a2:	e743      	b.n	800252c <__aeabi_dsub+0x408>
 80026a4:	2600      	movs	r6, #0
 80026a6:	2500      	movs	r5, #0
 80026a8:	2400      	movs	r4, #0
 80026aa:	e6cf      	b.n	800244c <__aeabi_dsub+0x328>
 80026ac:	08c0      	lsrs	r0, r0, #3
 80026ae:	0767      	lsls	r7, r4, #29
 80026b0:	4307      	orrs	r7, r0
 80026b2:	08e5      	lsrs	r5, r4, #3
 80026b4:	e632      	b.n	800231c <__aeabi_dsub+0x1f8>
 80026b6:	1a87      	subs	r7, r0, r2
 80026b8:	465b      	mov	r3, fp
 80026ba:	42b8      	cmp	r0, r7
 80026bc:	4180      	sbcs	r0, r0
 80026be:	1ae4      	subs	r4, r4, r3
 80026c0:	4240      	negs	r0, r0
 80026c2:	1a24      	subs	r4, r4, r0
 80026c4:	0223      	lsls	r3, r4, #8
 80026c6:	d428      	bmi.n	800271a <__aeabi_dsub+0x5f6>
 80026c8:	0763      	lsls	r3, r4, #29
 80026ca:	08ff      	lsrs	r7, r7, #3
 80026cc:	431f      	orrs	r7, r3
 80026ce:	08e5      	lsrs	r5, r4, #3
 80026d0:	2301      	movs	r3, #1
 80026d2:	e77f      	b.n	80025d4 <__aeabi_dsub+0x4b0>
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d100      	bne.n	80026da <__aeabi_dsub+0x5b6>
 80026d8:	e673      	b.n	80023c2 <__aeabi_dsub+0x29e>
 80026da:	464b      	mov	r3, r9
 80026dc:	1b5f      	subs	r7, r3, r5
 80026de:	003b      	movs	r3, r7
 80026e0:	2d00      	cmp	r5, #0
 80026e2:	d100      	bne.n	80026e6 <__aeabi_dsub+0x5c2>
 80026e4:	e742      	b.n	800256c <__aeabi_dsub+0x448>
 80026e6:	2f38      	cmp	r7, #56	@ 0x38
 80026e8:	dd00      	ble.n	80026ec <__aeabi_dsub+0x5c8>
 80026ea:	e0ec      	b.n	80028c6 <__aeabi_dsub+0x7a2>
 80026ec:	2380      	movs	r3, #128	@ 0x80
 80026ee:	000e      	movs	r6, r1
 80026f0:	041b      	lsls	r3, r3, #16
 80026f2:	431c      	orrs	r4, r3
 80026f4:	2f1f      	cmp	r7, #31
 80026f6:	dc25      	bgt.n	8002744 <__aeabi_dsub+0x620>
 80026f8:	2520      	movs	r5, #32
 80026fa:	0023      	movs	r3, r4
 80026fc:	1bed      	subs	r5, r5, r7
 80026fe:	0001      	movs	r1, r0
 8002700:	40a8      	lsls	r0, r5
 8002702:	40ab      	lsls	r3, r5
 8002704:	40f9      	lsrs	r1, r7
 8002706:	1e45      	subs	r5, r0, #1
 8002708:	41a8      	sbcs	r0, r5
 800270a:	430b      	orrs	r3, r1
 800270c:	40fc      	lsrs	r4, r7
 800270e:	4318      	orrs	r0, r3
 8002710:	465b      	mov	r3, fp
 8002712:	1b1b      	subs	r3, r3, r4
 8002714:	469b      	mov	fp, r3
 8002716:	e739      	b.n	800258c <__aeabi_dsub+0x468>
 8002718:	4666      	mov	r6, ip
 800271a:	2501      	movs	r5, #1
 800271c:	e562      	b.n	80021e4 <__aeabi_dsub+0xc0>
 800271e:	001f      	movs	r7, r3
 8002720:	4659      	mov	r1, fp
 8002722:	3f20      	subs	r7, #32
 8002724:	40f9      	lsrs	r1, r7
 8002726:	468c      	mov	ip, r1
 8002728:	2b20      	cmp	r3, #32
 800272a:	d005      	beq.n	8002738 <__aeabi_dsub+0x614>
 800272c:	2740      	movs	r7, #64	@ 0x40
 800272e:	4659      	mov	r1, fp
 8002730:	1afb      	subs	r3, r7, r3
 8002732:	4099      	lsls	r1, r3
 8002734:	430a      	orrs	r2, r1
 8002736:	4692      	mov	sl, r2
 8002738:	4657      	mov	r7, sl
 800273a:	1e7b      	subs	r3, r7, #1
 800273c:	419f      	sbcs	r7, r3
 800273e:	4663      	mov	r3, ip
 8002740:	431f      	orrs	r7, r3
 8002742:	e5c1      	b.n	80022c8 <__aeabi_dsub+0x1a4>
 8002744:	003b      	movs	r3, r7
 8002746:	0025      	movs	r5, r4
 8002748:	3b20      	subs	r3, #32
 800274a:	40dd      	lsrs	r5, r3
 800274c:	2f20      	cmp	r7, #32
 800274e:	d004      	beq.n	800275a <__aeabi_dsub+0x636>
 8002750:	2340      	movs	r3, #64	@ 0x40
 8002752:	1bdb      	subs	r3, r3, r7
 8002754:	409c      	lsls	r4, r3
 8002756:	4320      	orrs	r0, r4
 8002758:	4680      	mov	r8, r0
 800275a:	4640      	mov	r0, r8
 800275c:	1e43      	subs	r3, r0, #1
 800275e:	4198      	sbcs	r0, r3
 8002760:	4328      	orrs	r0, r5
 8002762:	e713      	b.n	800258c <__aeabi_dsub+0x468>
 8002764:	2900      	cmp	r1, #0
 8002766:	d09d      	beq.n	80026a4 <__aeabi_dsub+0x580>
 8002768:	2601      	movs	r6, #1
 800276a:	4663      	mov	r3, ip
 800276c:	465c      	mov	r4, fp
 800276e:	4690      	mov	r8, r2
 8002770:	401e      	ands	r6, r3
 8002772:	e6db      	b.n	800252c <__aeabi_dsub+0x408>
 8002774:	1a17      	subs	r7, r2, r0
 8002776:	465b      	mov	r3, fp
 8002778:	42ba      	cmp	r2, r7
 800277a:	4192      	sbcs	r2, r2
 800277c:	1b1c      	subs	r4, r3, r4
 800277e:	4252      	negs	r2, r2
 8002780:	1aa4      	subs	r4, r4, r2
 8002782:	0223      	lsls	r3, r4, #8
 8002784:	d4c8      	bmi.n	8002718 <__aeabi_dsub+0x5f4>
 8002786:	0763      	lsls	r3, r4, #29
 8002788:	08ff      	lsrs	r7, r7, #3
 800278a:	431f      	orrs	r7, r3
 800278c:	4666      	mov	r6, ip
 800278e:	2301      	movs	r3, #1
 8002790:	08e5      	lsrs	r5, r4, #3
 8002792:	e71f      	b.n	80025d4 <__aeabi_dsub+0x4b0>
 8002794:	001d      	movs	r5, r3
 8002796:	2400      	movs	r4, #0
 8002798:	2700      	movs	r7, #0
 800279a:	e657      	b.n	800244c <__aeabi_dsub+0x328>
 800279c:	465c      	mov	r4, fp
 800279e:	08d0      	lsrs	r0, r2, #3
 80027a0:	e66a      	b.n	8002478 <__aeabi_dsub+0x354>
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d100      	bne.n	80027a8 <__aeabi_dsub+0x684>
 80027a6:	e737      	b.n	8002618 <__aeabi_dsub+0x4f4>
 80027a8:	4653      	mov	r3, sl
 80027aa:	08c0      	lsrs	r0, r0, #3
 80027ac:	0767      	lsls	r7, r4, #29
 80027ae:	4307      	orrs	r7, r0
 80027b0:	08e5      	lsrs	r5, r4, #3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d100      	bne.n	80027b8 <__aeabi_dsub+0x694>
 80027b6:	e5b1      	b.n	800231c <__aeabi_dsub+0x1f8>
 80027b8:	2380      	movs	r3, #128	@ 0x80
 80027ba:	031b      	lsls	r3, r3, #12
 80027bc:	421d      	tst	r5, r3
 80027be:	d008      	beq.n	80027d2 <__aeabi_dsub+0x6ae>
 80027c0:	4659      	mov	r1, fp
 80027c2:	08c8      	lsrs	r0, r1, #3
 80027c4:	4218      	tst	r0, r3
 80027c6:	d104      	bne.n	80027d2 <__aeabi_dsub+0x6ae>
 80027c8:	08d2      	lsrs	r2, r2, #3
 80027ca:	0749      	lsls	r1, r1, #29
 80027cc:	430a      	orrs	r2, r1
 80027ce:	0017      	movs	r7, r2
 80027d0:	0005      	movs	r5, r0
 80027d2:	0f7b      	lsrs	r3, r7, #29
 80027d4:	00ff      	lsls	r7, r7, #3
 80027d6:	08ff      	lsrs	r7, r7, #3
 80027d8:	075b      	lsls	r3, r3, #29
 80027da:	431f      	orrs	r7, r3
 80027dc:	e59e      	b.n	800231c <__aeabi_dsub+0x1f8>
 80027de:	08c0      	lsrs	r0, r0, #3
 80027e0:	0763      	lsls	r3, r4, #29
 80027e2:	4318      	orrs	r0, r3
 80027e4:	08e5      	lsrs	r5, r4, #3
 80027e6:	2900      	cmp	r1, #0
 80027e8:	d053      	beq.n	8002892 <__aeabi_dsub+0x76e>
 80027ea:	2380      	movs	r3, #128	@ 0x80
 80027ec:	031b      	lsls	r3, r3, #12
 80027ee:	421d      	tst	r5, r3
 80027f0:	d00a      	beq.n	8002808 <__aeabi_dsub+0x6e4>
 80027f2:	4659      	mov	r1, fp
 80027f4:	08cc      	lsrs	r4, r1, #3
 80027f6:	421c      	tst	r4, r3
 80027f8:	d106      	bne.n	8002808 <__aeabi_dsub+0x6e4>
 80027fa:	2601      	movs	r6, #1
 80027fc:	4663      	mov	r3, ip
 80027fe:	0025      	movs	r5, r4
 8002800:	08d0      	lsrs	r0, r2, #3
 8002802:	0749      	lsls	r1, r1, #29
 8002804:	4308      	orrs	r0, r1
 8002806:	401e      	ands	r6, r3
 8002808:	0f47      	lsrs	r7, r0, #29
 800280a:	00c0      	lsls	r0, r0, #3
 800280c:	08c0      	lsrs	r0, r0, #3
 800280e:	077f      	lsls	r7, r7, #29
 8002810:	4307      	orrs	r7, r0
 8002812:	e583      	b.n	800231c <__aeabi_dsub+0x1f8>
 8002814:	1883      	adds	r3, r0, r2
 8002816:	4293      	cmp	r3, r2
 8002818:	4192      	sbcs	r2, r2
 800281a:	445c      	add	r4, fp
 800281c:	4252      	negs	r2, r2
 800281e:	18a5      	adds	r5, r4, r2
 8002820:	022a      	lsls	r2, r5, #8
 8002822:	d500      	bpl.n	8002826 <__aeabi_dsub+0x702>
 8002824:	e724      	b.n	8002670 <__aeabi_dsub+0x54c>
 8002826:	076f      	lsls	r7, r5, #29
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	431f      	orrs	r7, r3
 800282c:	08ed      	lsrs	r5, r5, #3
 800282e:	2301      	movs	r3, #1
 8002830:	e6d0      	b.n	80025d4 <__aeabi_dsub+0x4b0>
 8002832:	46c0      	nop			@ (mov r8, r8)
 8002834:	000007ff 	.word	0x000007ff
 8002838:	000007fe 	.word	0x000007fe
 800283c:	ff7fffff 	.word	0xff7fffff
 8002840:	465b      	mov	r3, fp
 8002842:	08d2      	lsrs	r2, r2, #3
 8002844:	075f      	lsls	r7, r3, #29
 8002846:	4666      	mov	r6, ip
 8002848:	4317      	orrs	r7, r2
 800284a:	08dd      	lsrs	r5, r3, #3
 800284c:	e566      	b.n	800231c <__aeabi_dsub+0x1f8>
 800284e:	0025      	movs	r5, r4
 8002850:	3b20      	subs	r3, #32
 8002852:	40dd      	lsrs	r5, r3
 8002854:	4663      	mov	r3, ip
 8002856:	2b20      	cmp	r3, #32
 8002858:	d005      	beq.n	8002866 <__aeabi_dsub+0x742>
 800285a:	2340      	movs	r3, #64	@ 0x40
 800285c:	4661      	mov	r1, ip
 800285e:	1a5b      	subs	r3, r3, r1
 8002860:	409c      	lsls	r4, r3
 8002862:	4320      	orrs	r0, r4
 8002864:	4680      	mov	r8, r0
 8002866:	4647      	mov	r7, r8
 8002868:	1e7b      	subs	r3, r7, #1
 800286a:	419f      	sbcs	r7, r3
 800286c:	432f      	orrs	r7, r5
 800286e:	e5a0      	b.n	80023b2 <__aeabi_dsub+0x28e>
 8002870:	2120      	movs	r1, #32
 8002872:	2700      	movs	r7, #0
 8002874:	1a09      	subs	r1, r1, r0
 8002876:	e4d2      	b.n	800221e <__aeabi_dsub+0xfa>
 8002878:	2f00      	cmp	r7, #0
 800287a:	d100      	bne.n	800287e <__aeabi_dsub+0x75a>
 800287c:	e713      	b.n	80026a6 <__aeabi_dsub+0x582>
 800287e:	465c      	mov	r4, fp
 8002880:	0017      	movs	r7, r2
 8002882:	2500      	movs	r5, #0
 8002884:	e5f6      	b.n	8002474 <__aeabi_dsub+0x350>
 8002886:	08d7      	lsrs	r7, r2, #3
 8002888:	0749      	lsls	r1, r1, #29
 800288a:	2302      	movs	r3, #2
 800288c:	430f      	orrs	r7, r1
 800288e:	092d      	lsrs	r5, r5, #4
 8002890:	e6a0      	b.n	80025d4 <__aeabi_dsub+0x4b0>
 8002892:	0007      	movs	r7, r0
 8002894:	e542      	b.n	800231c <__aeabi_dsub+0x1f8>
 8002896:	465b      	mov	r3, fp
 8002898:	2601      	movs	r6, #1
 800289a:	075f      	lsls	r7, r3, #29
 800289c:	08dd      	lsrs	r5, r3, #3
 800289e:	4663      	mov	r3, ip
 80028a0:	08d2      	lsrs	r2, r2, #3
 80028a2:	4317      	orrs	r7, r2
 80028a4:	401e      	ands	r6, r3
 80028a6:	e539      	b.n	800231c <__aeabi_dsub+0x1f8>
 80028a8:	465b      	mov	r3, fp
 80028aa:	08d2      	lsrs	r2, r2, #3
 80028ac:	075f      	lsls	r7, r3, #29
 80028ae:	4317      	orrs	r7, r2
 80028b0:	08dd      	lsrs	r5, r3, #3
 80028b2:	e533      	b.n	800231c <__aeabi_dsub+0x1f8>
 80028b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002930 <__aeabi_dsub+0x80c>)
 80028b6:	08db      	lsrs	r3, r3, #3
 80028b8:	4022      	ands	r2, r4
 80028ba:	0757      	lsls	r7, r2, #29
 80028bc:	0252      	lsls	r2, r2, #9
 80028be:	2501      	movs	r5, #1
 80028c0:	431f      	orrs	r7, r3
 80028c2:	0b14      	lsrs	r4, r2, #12
 80028c4:	e5c2      	b.n	800244c <__aeabi_dsub+0x328>
 80028c6:	000e      	movs	r6, r1
 80028c8:	2001      	movs	r0, #1
 80028ca:	e65f      	b.n	800258c <__aeabi_dsub+0x468>
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00d      	beq.n	80028ec <__aeabi_dsub+0x7c8>
 80028d0:	464b      	mov	r3, r9
 80028d2:	1b5b      	subs	r3, r3, r5
 80028d4:	469c      	mov	ip, r3
 80028d6:	2d00      	cmp	r5, #0
 80028d8:	d100      	bne.n	80028dc <__aeabi_dsub+0x7b8>
 80028da:	e548      	b.n	800236e <__aeabi_dsub+0x24a>
 80028dc:	2701      	movs	r7, #1
 80028de:	2b38      	cmp	r3, #56	@ 0x38
 80028e0:	dd00      	ble.n	80028e4 <__aeabi_dsub+0x7c0>
 80028e2:	e566      	b.n	80023b2 <__aeabi_dsub+0x28e>
 80028e4:	2380      	movs	r3, #128	@ 0x80
 80028e6:	041b      	lsls	r3, r3, #16
 80028e8:	431c      	orrs	r4, r3
 80028ea:	e550      	b.n	800238e <__aeabi_dsub+0x26a>
 80028ec:	1c6b      	adds	r3, r5, #1
 80028ee:	4d11      	ldr	r5, [pc, #68]	@ (8002934 <__aeabi_dsub+0x810>)
 80028f0:	422b      	tst	r3, r5
 80028f2:	d000      	beq.n	80028f6 <__aeabi_dsub+0x7d2>
 80028f4:	e673      	b.n	80025de <__aeabi_dsub+0x4ba>
 80028f6:	4659      	mov	r1, fp
 80028f8:	0023      	movs	r3, r4
 80028fa:	4311      	orrs	r1, r2
 80028fc:	468a      	mov	sl, r1
 80028fe:	4303      	orrs	r3, r0
 8002900:	e600      	b.n	8002504 <__aeabi_dsub+0x3e0>
 8002902:	0767      	lsls	r7, r4, #29
 8002904:	08c0      	lsrs	r0, r0, #3
 8002906:	2300      	movs	r3, #0
 8002908:	4307      	orrs	r7, r0
 800290a:	08e5      	lsrs	r5, r4, #3
 800290c:	e662      	b.n	80025d4 <__aeabi_dsub+0x4b0>
 800290e:	0764      	lsls	r4, r4, #29
 8002910:	08ff      	lsrs	r7, r7, #3
 8002912:	4327      	orrs	r7, r4
 8002914:	0905      	lsrs	r5, r0, #4
 8002916:	e65d      	b.n	80025d4 <__aeabi_dsub+0x4b0>
 8002918:	08d2      	lsrs	r2, r2, #3
 800291a:	0749      	lsls	r1, r1, #29
 800291c:	4311      	orrs	r1, r2
 800291e:	000f      	movs	r7, r1
 8002920:	2302      	movs	r3, #2
 8002922:	092d      	lsrs	r5, r5, #4
 8002924:	e656      	b.n	80025d4 <__aeabi_dsub+0x4b0>
 8002926:	0007      	movs	r7, r0
 8002928:	e5a4      	b.n	8002474 <__aeabi_dsub+0x350>
 800292a:	0038      	movs	r0, r7
 800292c:	e48f      	b.n	800224e <__aeabi_dsub+0x12a>
 800292e:	46c0      	nop			@ (mov r8, r8)
 8002930:	ff7fffff 	.word	0xff7fffff
 8002934:	000007fe 	.word	0x000007fe

08002938 <__aeabi_d2iz>:
 8002938:	000b      	movs	r3, r1
 800293a:	0002      	movs	r2, r0
 800293c:	b570      	push	{r4, r5, r6, lr}
 800293e:	4d16      	ldr	r5, [pc, #88]	@ (8002998 <__aeabi_d2iz+0x60>)
 8002940:	030c      	lsls	r4, r1, #12
 8002942:	b082      	sub	sp, #8
 8002944:	0049      	lsls	r1, r1, #1
 8002946:	2000      	movs	r0, #0
 8002948:	9200      	str	r2, [sp, #0]
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	0b24      	lsrs	r4, r4, #12
 800294e:	0d49      	lsrs	r1, r1, #21
 8002950:	0fde      	lsrs	r6, r3, #31
 8002952:	42a9      	cmp	r1, r5
 8002954:	dd04      	ble.n	8002960 <__aeabi_d2iz+0x28>
 8002956:	4811      	ldr	r0, [pc, #68]	@ (800299c <__aeabi_d2iz+0x64>)
 8002958:	4281      	cmp	r1, r0
 800295a:	dd03      	ble.n	8002964 <__aeabi_d2iz+0x2c>
 800295c:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <__aeabi_d2iz+0x68>)
 800295e:	18f0      	adds	r0, r6, r3
 8002960:	b002      	add	sp, #8
 8002962:	bd70      	pop	{r4, r5, r6, pc}
 8002964:	2080      	movs	r0, #128	@ 0x80
 8002966:	0340      	lsls	r0, r0, #13
 8002968:	4320      	orrs	r0, r4
 800296a:	4c0e      	ldr	r4, [pc, #56]	@ (80029a4 <__aeabi_d2iz+0x6c>)
 800296c:	1a64      	subs	r4, r4, r1
 800296e:	2c1f      	cmp	r4, #31
 8002970:	dd08      	ble.n	8002984 <__aeabi_d2iz+0x4c>
 8002972:	4b0d      	ldr	r3, [pc, #52]	@ (80029a8 <__aeabi_d2iz+0x70>)
 8002974:	1a5b      	subs	r3, r3, r1
 8002976:	40d8      	lsrs	r0, r3
 8002978:	0003      	movs	r3, r0
 800297a:	4258      	negs	r0, r3
 800297c:	2e00      	cmp	r6, #0
 800297e:	d1ef      	bne.n	8002960 <__aeabi_d2iz+0x28>
 8002980:	0018      	movs	r0, r3
 8002982:	e7ed      	b.n	8002960 <__aeabi_d2iz+0x28>
 8002984:	4b09      	ldr	r3, [pc, #36]	@ (80029ac <__aeabi_d2iz+0x74>)
 8002986:	9a00      	ldr	r2, [sp, #0]
 8002988:	469c      	mov	ip, r3
 800298a:	0003      	movs	r3, r0
 800298c:	4461      	add	r1, ip
 800298e:	408b      	lsls	r3, r1
 8002990:	40e2      	lsrs	r2, r4
 8002992:	4313      	orrs	r3, r2
 8002994:	e7f1      	b.n	800297a <__aeabi_d2iz+0x42>
 8002996:	46c0      	nop			@ (mov r8, r8)
 8002998:	000003fe 	.word	0x000003fe
 800299c:	0000041d 	.word	0x0000041d
 80029a0:	7fffffff 	.word	0x7fffffff
 80029a4:	00000433 	.word	0x00000433
 80029a8:	00000413 	.word	0x00000413
 80029ac:	fffffbed 	.word	0xfffffbed

080029b0 <__aeabi_i2d>:
 80029b0:	b570      	push	{r4, r5, r6, lr}
 80029b2:	2800      	cmp	r0, #0
 80029b4:	d016      	beq.n	80029e4 <__aeabi_i2d+0x34>
 80029b6:	17c3      	asrs	r3, r0, #31
 80029b8:	18c5      	adds	r5, r0, r3
 80029ba:	405d      	eors	r5, r3
 80029bc:	0fc4      	lsrs	r4, r0, #31
 80029be:	0028      	movs	r0, r5
 80029c0:	f000 f92c 	bl	8002c1c <__clzsi2>
 80029c4:	4b10      	ldr	r3, [pc, #64]	@ (8002a08 <__aeabi_i2d+0x58>)
 80029c6:	1a1b      	subs	r3, r3, r0
 80029c8:	055b      	lsls	r3, r3, #21
 80029ca:	0d5b      	lsrs	r3, r3, #21
 80029cc:	280a      	cmp	r0, #10
 80029ce:	dc14      	bgt.n	80029fa <__aeabi_i2d+0x4a>
 80029d0:	0002      	movs	r2, r0
 80029d2:	002e      	movs	r6, r5
 80029d4:	3215      	adds	r2, #21
 80029d6:	4096      	lsls	r6, r2
 80029d8:	220b      	movs	r2, #11
 80029da:	1a12      	subs	r2, r2, r0
 80029dc:	40d5      	lsrs	r5, r2
 80029de:	032d      	lsls	r5, r5, #12
 80029e0:	0b2d      	lsrs	r5, r5, #12
 80029e2:	e003      	b.n	80029ec <__aeabi_i2d+0x3c>
 80029e4:	2400      	movs	r4, #0
 80029e6:	2300      	movs	r3, #0
 80029e8:	2500      	movs	r5, #0
 80029ea:	2600      	movs	r6, #0
 80029ec:	051b      	lsls	r3, r3, #20
 80029ee:	432b      	orrs	r3, r5
 80029f0:	07e4      	lsls	r4, r4, #31
 80029f2:	4323      	orrs	r3, r4
 80029f4:	0030      	movs	r0, r6
 80029f6:	0019      	movs	r1, r3
 80029f8:	bd70      	pop	{r4, r5, r6, pc}
 80029fa:	380b      	subs	r0, #11
 80029fc:	4085      	lsls	r5, r0
 80029fe:	032d      	lsls	r5, r5, #12
 8002a00:	2600      	movs	r6, #0
 8002a02:	0b2d      	lsrs	r5, r5, #12
 8002a04:	e7f2      	b.n	80029ec <__aeabi_i2d+0x3c>
 8002a06:	46c0      	nop			@ (mov r8, r8)
 8002a08:	0000041e 	.word	0x0000041e

08002a0c <__aeabi_f2d>:
 8002a0c:	b570      	push	{r4, r5, r6, lr}
 8002a0e:	0242      	lsls	r2, r0, #9
 8002a10:	0043      	lsls	r3, r0, #1
 8002a12:	0fc4      	lsrs	r4, r0, #31
 8002a14:	20fe      	movs	r0, #254	@ 0xfe
 8002a16:	0e1b      	lsrs	r3, r3, #24
 8002a18:	1c59      	adds	r1, r3, #1
 8002a1a:	0a55      	lsrs	r5, r2, #9
 8002a1c:	4208      	tst	r0, r1
 8002a1e:	d00c      	beq.n	8002a3a <__aeabi_f2d+0x2e>
 8002a20:	21e0      	movs	r1, #224	@ 0xe0
 8002a22:	0089      	lsls	r1, r1, #2
 8002a24:	468c      	mov	ip, r1
 8002a26:	076d      	lsls	r5, r5, #29
 8002a28:	0b12      	lsrs	r2, r2, #12
 8002a2a:	4463      	add	r3, ip
 8002a2c:	051b      	lsls	r3, r3, #20
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	07e4      	lsls	r4, r4, #31
 8002a32:	4323      	orrs	r3, r4
 8002a34:	0028      	movs	r0, r5
 8002a36:	0019      	movs	r1, r3
 8002a38:	bd70      	pop	{r4, r5, r6, pc}
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d114      	bne.n	8002a68 <__aeabi_f2d+0x5c>
 8002a3e:	2d00      	cmp	r5, #0
 8002a40:	d01b      	beq.n	8002a7a <__aeabi_f2d+0x6e>
 8002a42:	0028      	movs	r0, r5
 8002a44:	f000 f8ea 	bl	8002c1c <__clzsi2>
 8002a48:	280a      	cmp	r0, #10
 8002a4a:	dc1c      	bgt.n	8002a86 <__aeabi_f2d+0x7a>
 8002a4c:	230b      	movs	r3, #11
 8002a4e:	002a      	movs	r2, r5
 8002a50:	1a1b      	subs	r3, r3, r0
 8002a52:	40da      	lsrs	r2, r3
 8002a54:	0003      	movs	r3, r0
 8002a56:	3315      	adds	r3, #21
 8002a58:	409d      	lsls	r5, r3
 8002a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a94 <__aeabi_f2d+0x88>)
 8002a5c:	0312      	lsls	r2, r2, #12
 8002a5e:	1a1b      	subs	r3, r3, r0
 8002a60:	055b      	lsls	r3, r3, #21
 8002a62:	0b12      	lsrs	r2, r2, #12
 8002a64:	0d5b      	lsrs	r3, r3, #21
 8002a66:	e7e1      	b.n	8002a2c <__aeabi_f2d+0x20>
 8002a68:	2d00      	cmp	r5, #0
 8002a6a:	d009      	beq.n	8002a80 <__aeabi_f2d+0x74>
 8002a6c:	0b13      	lsrs	r3, r2, #12
 8002a6e:	2280      	movs	r2, #128	@ 0x80
 8002a70:	0312      	lsls	r2, r2, #12
 8002a72:	431a      	orrs	r2, r3
 8002a74:	076d      	lsls	r5, r5, #29
 8002a76:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <__aeabi_f2d+0x8c>)
 8002a78:	e7d8      	b.n	8002a2c <__aeabi_f2d+0x20>
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	e7d5      	b.n	8002a2c <__aeabi_f2d+0x20>
 8002a80:	2200      	movs	r2, #0
 8002a82:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <__aeabi_f2d+0x8c>)
 8002a84:	e7d2      	b.n	8002a2c <__aeabi_f2d+0x20>
 8002a86:	0003      	movs	r3, r0
 8002a88:	002a      	movs	r2, r5
 8002a8a:	3b0b      	subs	r3, #11
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	2500      	movs	r5, #0
 8002a90:	e7e3      	b.n	8002a5a <__aeabi_f2d+0x4e>
 8002a92:	46c0      	nop			@ (mov r8, r8)
 8002a94:	00000389 	.word	0x00000389
 8002a98:	000007ff 	.word	0x000007ff

08002a9c <__aeabi_d2f>:
 8002a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a9e:	004b      	lsls	r3, r1, #1
 8002aa0:	030f      	lsls	r7, r1, #12
 8002aa2:	0d5b      	lsrs	r3, r3, #21
 8002aa4:	4c3a      	ldr	r4, [pc, #232]	@ (8002b90 <__aeabi_d2f+0xf4>)
 8002aa6:	0f45      	lsrs	r5, r0, #29
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	0a7f      	lsrs	r7, r7, #9
 8002aac:	1c5e      	adds	r6, r3, #1
 8002aae:	432f      	orrs	r7, r5
 8002ab0:	9000      	str	r0, [sp, #0]
 8002ab2:	9101      	str	r1, [sp, #4]
 8002ab4:	0fca      	lsrs	r2, r1, #31
 8002ab6:	00c5      	lsls	r5, r0, #3
 8002ab8:	4226      	tst	r6, r4
 8002aba:	d00b      	beq.n	8002ad4 <__aeabi_d2f+0x38>
 8002abc:	4935      	ldr	r1, [pc, #212]	@ (8002b94 <__aeabi_d2f+0xf8>)
 8002abe:	185c      	adds	r4, r3, r1
 8002ac0:	2cfe      	cmp	r4, #254	@ 0xfe
 8002ac2:	dd13      	ble.n	8002aec <__aeabi_d2f+0x50>
 8002ac4:	20ff      	movs	r0, #255	@ 0xff
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	05c0      	lsls	r0, r0, #23
 8002aca:	4318      	orrs	r0, r3
 8002acc:	07d2      	lsls	r2, r2, #31
 8002ace:	4310      	orrs	r0, r2
 8002ad0:	b003      	add	sp, #12
 8002ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad4:	433d      	orrs	r5, r7
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <__aeabi_d2f+0x42>
 8002ada:	2000      	movs	r0, #0
 8002adc:	e7f4      	b.n	8002ac8 <__aeabi_d2f+0x2c>
 8002ade:	2d00      	cmp	r5, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <__aeabi_d2f+0x28>
 8002ae2:	2380      	movs	r3, #128	@ 0x80
 8002ae4:	03db      	lsls	r3, r3, #15
 8002ae6:	20ff      	movs	r0, #255	@ 0xff
 8002ae8:	433b      	orrs	r3, r7
 8002aea:	e7ed      	b.n	8002ac8 <__aeabi_d2f+0x2c>
 8002aec:	2c00      	cmp	r4, #0
 8002aee:	dd0c      	ble.n	8002b0a <__aeabi_d2f+0x6e>
 8002af0:	9b00      	ldr	r3, [sp, #0]
 8002af2:	00ff      	lsls	r7, r7, #3
 8002af4:	019b      	lsls	r3, r3, #6
 8002af6:	1e58      	subs	r0, r3, #1
 8002af8:	4183      	sbcs	r3, r0
 8002afa:	0f69      	lsrs	r1, r5, #29
 8002afc:	433b      	orrs	r3, r7
 8002afe:	430b      	orrs	r3, r1
 8002b00:	0759      	lsls	r1, r3, #29
 8002b02:	d127      	bne.n	8002b54 <__aeabi_d2f+0xb8>
 8002b04:	08db      	lsrs	r3, r3, #3
 8002b06:	b2e0      	uxtb	r0, r4
 8002b08:	e7de      	b.n	8002ac8 <__aeabi_d2f+0x2c>
 8002b0a:	0021      	movs	r1, r4
 8002b0c:	3117      	adds	r1, #23
 8002b0e:	db31      	blt.n	8002b74 <__aeabi_d2f+0xd8>
 8002b10:	2180      	movs	r1, #128	@ 0x80
 8002b12:	201e      	movs	r0, #30
 8002b14:	0409      	lsls	r1, r1, #16
 8002b16:	4339      	orrs	r1, r7
 8002b18:	1b00      	subs	r0, r0, r4
 8002b1a:	281f      	cmp	r0, #31
 8002b1c:	dd2d      	ble.n	8002b7a <__aeabi_d2f+0xde>
 8002b1e:	2602      	movs	r6, #2
 8002b20:	4276      	negs	r6, r6
 8002b22:	1b34      	subs	r4, r6, r4
 8002b24:	000e      	movs	r6, r1
 8002b26:	40e6      	lsrs	r6, r4
 8002b28:	0034      	movs	r4, r6
 8002b2a:	2820      	cmp	r0, #32
 8002b2c:	d004      	beq.n	8002b38 <__aeabi_d2f+0x9c>
 8002b2e:	481a      	ldr	r0, [pc, #104]	@ (8002b98 <__aeabi_d2f+0xfc>)
 8002b30:	4684      	mov	ip, r0
 8002b32:	4463      	add	r3, ip
 8002b34:	4099      	lsls	r1, r3
 8002b36:	430d      	orrs	r5, r1
 8002b38:	002b      	movs	r3, r5
 8002b3a:	1e59      	subs	r1, r3, #1
 8002b3c:	418b      	sbcs	r3, r1
 8002b3e:	4323      	orrs	r3, r4
 8002b40:	0759      	lsls	r1, r3, #29
 8002b42:	d003      	beq.n	8002b4c <__aeabi_d2f+0xb0>
 8002b44:	210f      	movs	r1, #15
 8002b46:	4019      	ands	r1, r3
 8002b48:	2904      	cmp	r1, #4
 8002b4a:	d10b      	bne.n	8002b64 <__aeabi_d2f+0xc8>
 8002b4c:	019b      	lsls	r3, r3, #6
 8002b4e:	2000      	movs	r0, #0
 8002b50:	0a5b      	lsrs	r3, r3, #9
 8002b52:	e7b9      	b.n	8002ac8 <__aeabi_d2f+0x2c>
 8002b54:	210f      	movs	r1, #15
 8002b56:	4019      	ands	r1, r3
 8002b58:	2904      	cmp	r1, #4
 8002b5a:	d104      	bne.n	8002b66 <__aeabi_d2f+0xca>
 8002b5c:	019b      	lsls	r3, r3, #6
 8002b5e:	0a5b      	lsrs	r3, r3, #9
 8002b60:	b2e0      	uxtb	r0, r4
 8002b62:	e7b1      	b.n	8002ac8 <__aeabi_d2f+0x2c>
 8002b64:	2400      	movs	r4, #0
 8002b66:	3304      	adds	r3, #4
 8002b68:	0159      	lsls	r1, r3, #5
 8002b6a:	d5f7      	bpl.n	8002b5c <__aeabi_d2f+0xc0>
 8002b6c:	3401      	adds	r4, #1
 8002b6e:	2300      	movs	r3, #0
 8002b70:	b2e0      	uxtb	r0, r4
 8002b72:	e7a9      	b.n	8002ac8 <__aeabi_d2f+0x2c>
 8002b74:	2000      	movs	r0, #0
 8002b76:	2300      	movs	r3, #0
 8002b78:	e7a6      	b.n	8002ac8 <__aeabi_d2f+0x2c>
 8002b7a:	4c08      	ldr	r4, [pc, #32]	@ (8002b9c <__aeabi_d2f+0x100>)
 8002b7c:	191c      	adds	r4, r3, r4
 8002b7e:	002b      	movs	r3, r5
 8002b80:	40a5      	lsls	r5, r4
 8002b82:	40c3      	lsrs	r3, r0
 8002b84:	40a1      	lsls	r1, r4
 8002b86:	1e68      	subs	r0, r5, #1
 8002b88:	4185      	sbcs	r5, r0
 8002b8a:	4329      	orrs	r1, r5
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	e7d7      	b.n	8002b40 <__aeabi_d2f+0xa4>
 8002b90:	000007fe 	.word	0x000007fe
 8002b94:	fffffc80 	.word	0xfffffc80
 8002b98:	fffffca2 	.word	0xfffffca2
 8002b9c:	fffffc82 	.word	0xfffffc82

08002ba0 <__aeabi_cdrcmple>:
 8002ba0:	4684      	mov	ip, r0
 8002ba2:	0010      	movs	r0, r2
 8002ba4:	4662      	mov	r2, ip
 8002ba6:	468c      	mov	ip, r1
 8002ba8:	0019      	movs	r1, r3
 8002baa:	4663      	mov	r3, ip
 8002bac:	e000      	b.n	8002bb0 <__aeabi_cdcmpeq>
 8002bae:	46c0      	nop			@ (mov r8, r8)

08002bb0 <__aeabi_cdcmpeq>:
 8002bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002bb2:	f000 f905 	bl	8002dc0 <__ledf2>
 8002bb6:	2800      	cmp	r0, #0
 8002bb8:	d401      	bmi.n	8002bbe <__aeabi_cdcmpeq+0xe>
 8002bba:	2100      	movs	r1, #0
 8002bbc:	42c8      	cmn	r0, r1
 8002bbe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002bc0 <__aeabi_dcmpeq>:
 8002bc0:	b510      	push	{r4, lr}
 8002bc2:	f000 f849 	bl	8002c58 <__eqdf2>
 8002bc6:	4240      	negs	r0, r0
 8002bc8:	3001      	adds	r0, #1
 8002bca:	bd10      	pop	{r4, pc}

08002bcc <__aeabi_dcmplt>:
 8002bcc:	b510      	push	{r4, lr}
 8002bce:	f000 f8f7 	bl	8002dc0 <__ledf2>
 8002bd2:	2800      	cmp	r0, #0
 8002bd4:	db01      	blt.n	8002bda <__aeabi_dcmplt+0xe>
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	bd10      	pop	{r4, pc}
 8002bda:	2001      	movs	r0, #1
 8002bdc:	bd10      	pop	{r4, pc}
 8002bde:	46c0      	nop			@ (mov r8, r8)

08002be0 <__aeabi_dcmple>:
 8002be0:	b510      	push	{r4, lr}
 8002be2:	f000 f8ed 	bl	8002dc0 <__ledf2>
 8002be6:	2800      	cmp	r0, #0
 8002be8:	dd01      	ble.n	8002bee <__aeabi_dcmple+0xe>
 8002bea:	2000      	movs	r0, #0
 8002bec:	bd10      	pop	{r4, pc}
 8002bee:	2001      	movs	r0, #1
 8002bf0:	bd10      	pop	{r4, pc}
 8002bf2:	46c0      	nop			@ (mov r8, r8)

08002bf4 <__aeabi_dcmpgt>:
 8002bf4:	b510      	push	{r4, lr}
 8002bf6:	f000 f873 	bl	8002ce0 <__gedf2>
 8002bfa:	2800      	cmp	r0, #0
 8002bfc:	dc01      	bgt.n	8002c02 <__aeabi_dcmpgt+0xe>
 8002bfe:	2000      	movs	r0, #0
 8002c00:	bd10      	pop	{r4, pc}
 8002c02:	2001      	movs	r0, #1
 8002c04:	bd10      	pop	{r4, pc}
 8002c06:	46c0      	nop			@ (mov r8, r8)

08002c08 <__aeabi_dcmpge>:
 8002c08:	b510      	push	{r4, lr}
 8002c0a:	f000 f869 	bl	8002ce0 <__gedf2>
 8002c0e:	2800      	cmp	r0, #0
 8002c10:	da01      	bge.n	8002c16 <__aeabi_dcmpge+0xe>
 8002c12:	2000      	movs	r0, #0
 8002c14:	bd10      	pop	{r4, pc}
 8002c16:	2001      	movs	r0, #1
 8002c18:	bd10      	pop	{r4, pc}
 8002c1a:	46c0      	nop			@ (mov r8, r8)

08002c1c <__clzsi2>:
 8002c1c:	211c      	movs	r1, #28
 8002c1e:	2301      	movs	r3, #1
 8002c20:	041b      	lsls	r3, r3, #16
 8002c22:	4298      	cmp	r0, r3
 8002c24:	d301      	bcc.n	8002c2a <__clzsi2+0xe>
 8002c26:	0c00      	lsrs	r0, r0, #16
 8002c28:	3910      	subs	r1, #16
 8002c2a:	0a1b      	lsrs	r3, r3, #8
 8002c2c:	4298      	cmp	r0, r3
 8002c2e:	d301      	bcc.n	8002c34 <__clzsi2+0x18>
 8002c30:	0a00      	lsrs	r0, r0, #8
 8002c32:	3908      	subs	r1, #8
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	4298      	cmp	r0, r3
 8002c38:	d301      	bcc.n	8002c3e <__clzsi2+0x22>
 8002c3a:	0900      	lsrs	r0, r0, #4
 8002c3c:	3904      	subs	r1, #4
 8002c3e:	a202      	add	r2, pc, #8	@ (adr r2, 8002c48 <__clzsi2+0x2c>)
 8002c40:	5c10      	ldrb	r0, [r2, r0]
 8002c42:	1840      	adds	r0, r0, r1
 8002c44:	4770      	bx	lr
 8002c46:	46c0      	nop			@ (mov r8, r8)
 8002c48:	02020304 	.word	0x02020304
 8002c4c:	01010101 	.word	0x01010101
	...

08002c58 <__eqdf2>:
 8002c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5a:	4657      	mov	r7, sl
 8002c5c:	46de      	mov	lr, fp
 8002c5e:	464e      	mov	r6, r9
 8002c60:	4645      	mov	r5, r8
 8002c62:	b5e0      	push	{r5, r6, r7, lr}
 8002c64:	000d      	movs	r5, r1
 8002c66:	0004      	movs	r4, r0
 8002c68:	0fe8      	lsrs	r0, r5, #31
 8002c6a:	4683      	mov	fp, r0
 8002c6c:	0309      	lsls	r1, r1, #12
 8002c6e:	0fd8      	lsrs	r0, r3, #31
 8002c70:	0b09      	lsrs	r1, r1, #12
 8002c72:	4682      	mov	sl, r0
 8002c74:	4819      	ldr	r0, [pc, #100]	@ (8002cdc <__eqdf2+0x84>)
 8002c76:	468c      	mov	ip, r1
 8002c78:	031f      	lsls	r7, r3, #12
 8002c7a:	0069      	lsls	r1, r5, #1
 8002c7c:	005e      	lsls	r6, r3, #1
 8002c7e:	0d49      	lsrs	r1, r1, #21
 8002c80:	0b3f      	lsrs	r7, r7, #12
 8002c82:	0d76      	lsrs	r6, r6, #21
 8002c84:	4281      	cmp	r1, r0
 8002c86:	d018      	beq.n	8002cba <__eqdf2+0x62>
 8002c88:	4286      	cmp	r6, r0
 8002c8a:	d00f      	beq.n	8002cac <__eqdf2+0x54>
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	42b1      	cmp	r1, r6
 8002c90:	d10d      	bne.n	8002cae <__eqdf2+0x56>
 8002c92:	45bc      	cmp	ip, r7
 8002c94:	d10b      	bne.n	8002cae <__eqdf2+0x56>
 8002c96:	4294      	cmp	r4, r2
 8002c98:	d109      	bne.n	8002cae <__eqdf2+0x56>
 8002c9a:	45d3      	cmp	fp, sl
 8002c9c:	d01c      	beq.n	8002cd8 <__eqdf2+0x80>
 8002c9e:	2900      	cmp	r1, #0
 8002ca0:	d105      	bne.n	8002cae <__eqdf2+0x56>
 8002ca2:	4660      	mov	r0, ip
 8002ca4:	4320      	orrs	r0, r4
 8002ca6:	1e43      	subs	r3, r0, #1
 8002ca8:	4198      	sbcs	r0, r3
 8002caa:	e000      	b.n	8002cae <__eqdf2+0x56>
 8002cac:	2001      	movs	r0, #1
 8002cae:	bcf0      	pop	{r4, r5, r6, r7}
 8002cb0:	46bb      	mov	fp, r7
 8002cb2:	46b2      	mov	sl, r6
 8002cb4:	46a9      	mov	r9, r5
 8002cb6:	46a0      	mov	r8, r4
 8002cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cba:	2001      	movs	r0, #1
 8002cbc:	428e      	cmp	r6, r1
 8002cbe:	d1f6      	bne.n	8002cae <__eqdf2+0x56>
 8002cc0:	4661      	mov	r1, ip
 8002cc2:	4339      	orrs	r1, r7
 8002cc4:	000f      	movs	r7, r1
 8002cc6:	4317      	orrs	r7, r2
 8002cc8:	4327      	orrs	r7, r4
 8002cca:	d1f0      	bne.n	8002cae <__eqdf2+0x56>
 8002ccc:	465b      	mov	r3, fp
 8002cce:	4652      	mov	r2, sl
 8002cd0:	1a98      	subs	r0, r3, r2
 8002cd2:	1e43      	subs	r3, r0, #1
 8002cd4:	4198      	sbcs	r0, r3
 8002cd6:	e7ea      	b.n	8002cae <__eqdf2+0x56>
 8002cd8:	2000      	movs	r0, #0
 8002cda:	e7e8      	b.n	8002cae <__eqdf2+0x56>
 8002cdc:	000007ff 	.word	0x000007ff

08002ce0 <__gedf2>:
 8002ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ce2:	4657      	mov	r7, sl
 8002ce4:	464e      	mov	r6, r9
 8002ce6:	4645      	mov	r5, r8
 8002ce8:	46de      	mov	lr, fp
 8002cea:	b5e0      	push	{r5, r6, r7, lr}
 8002cec:	000d      	movs	r5, r1
 8002cee:	030e      	lsls	r6, r1, #12
 8002cf0:	0049      	lsls	r1, r1, #1
 8002cf2:	0d49      	lsrs	r1, r1, #21
 8002cf4:	468a      	mov	sl, r1
 8002cf6:	0fdf      	lsrs	r7, r3, #31
 8002cf8:	0fe9      	lsrs	r1, r5, #31
 8002cfa:	46bc      	mov	ip, r7
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	4f2f      	ldr	r7, [pc, #188]	@ (8002dbc <__gedf2+0xdc>)
 8002d00:	0004      	movs	r4, r0
 8002d02:	4680      	mov	r8, r0
 8002d04:	9101      	str	r1, [sp, #4]
 8002d06:	0058      	lsls	r0, r3, #1
 8002d08:	0319      	lsls	r1, r3, #12
 8002d0a:	4691      	mov	r9, r2
 8002d0c:	0b36      	lsrs	r6, r6, #12
 8002d0e:	0b09      	lsrs	r1, r1, #12
 8002d10:	0d40      	lsrs	r0, r0, #21
 8002d12:	45ba      	cmp	sl, r7
 8002d14:	d01d      	beq.n	8002d52 <__gedf2+0x72>
 8002d16:	42b8      	cmp	r0, r7
 8002d18:	d00d      	beq.n	8002d36 <__gedf2+0x56>
 8002d1a:	4657      	mov	r7, sl
 8002d1c:	2f00      	cmp	r7, #0
 8002d1e:	d12a      	bne.n	8002d76 <__gedf2+0x96>
 8002d20:	4334      	orrs	r4, r6
 8002d22:	2800      	cmp	r0, #0
 8002d24:	d124      	bne.n	8002d70 <__gedf2+0x90>
 8002d26:	430a      	orrs	r2, r1
 8002d28:	d036      	beq.n	8002d98 <__gedf2+0xb8>
 8002d2a:	2c00      	cmp	r4, #0
 8002d2c:	d141      	bne.n	8002db2 <__gedf2+0xd2>
 8002d2e:	4663      	mov	r3, ip
 8002d30:	0058      	lsls	r0, r3, #1
 8002d32:	3801      	subs	r0, #1
 8002d34:	e015      	b.n	8002d62 <__gedf2+0x82>
 8002d36:	4311      	orrs	r1, r2
 8002d38:	d138      	bne.n	8002dac <__gedf2+0xcc>
 8002d3a:	4653      	mov	r3, sl
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <__gedf2+0x64>
 8002d40:	4326      	orrs	r6, r4
 8002d42:	d0f4      	beq.n	8002d2e <__gedf2+0x4e>
 8002d44:	9b01      	ldr	r3, [sp, #4]
 8002d46:	4563      	cmp	r3, ip
 8002d48:	d107      	bne.n	8002d5a <__gedf2+0x7a>
 8002d4a:	9b01      	ldr	r3, [sp, #4]
 8002d4c:	0058      	lsls	r0, r3, #1
 8002d4e:	3801      	subs	r0, #1
 8002d50:	e007      	b.n	8002d62 <__gedf2+0x82>
 8002d52:	4326      	orrs	r6, r4
 8002d54:	d12a      	bne.n	8002dac <__gedf2+0xcc>
 8002d56:	4550      	cmp	r0, sl
 8002d58:	d021      	beq.n	8002d9e <__gedf2+0xbe>
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	9b01      	ldr	r3, [sp, #4]
 8002d5e:	425f      	negs	r7, r3
 8002d60:	4338      	orrs	r0, r7
 8002d62:	b003      	add	sp, #12
 8002d64:	bcf0      	pop	{r4, r5, r6, r7}
 8002d66:	46bb      	mov	fp, r7
 8002d68:	46b2      	mov	sl, r6
 8002d6a:	46a9      	mov	r9, r5
 8002d6c:	46a0      	mov	r8, r4
 8002d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d70:	2c00      	cmp	r4, #0
 8002d72:	d0dc      	beq.n	8002d2e <__gedf2+0x4e>
 8002d74:	e7e6      	b.n	8002d44 <__gedf2+0x64>
 8002d76:	2800      	cmp	r0, #0
 8002d78:	d0ef      	beq.n	8002d5a <__gedf2+0x7a>
 8002d7a:	9b01      	ldr	r3, [sp, #4]
 8002d7c:	4563      	cmp	r3, ip
 8002d7e:	d1ec      	bne.n	8002d5a <__gedf2+0x7a>
 8002d80:	4582      	cmp	sl, r0
 8002d82:	dcea      	bgt.n	8002d5a <__gedf2+0x7a>
 8002d84:	dbe1      	blt.n	8002d4a <__gedf2+0x6a>
 8002d86:	428e      	cmp	r6, r1
 8002d88:	d8e7      	bhi.n	8002d5a <__gedf2+0x7a>
 8002d8a:	d1de      	bne.n	8002d4a <__gedf2+0x6a>
 8002d8c:	45c8      	cmp	r8, r9
 8002d8e:	d8e4      	bhi.n	8002d5a <__gedf2+0x7a>
 8002d90:	2000      	movs	r0, #0
 8002d92:	45c8      	cmp	r8, r9
 8002d94:	d2e5      	bcs.n	8002d62 <__gedf2+0x82>
 8002d96:	e7d8      	b.n	8002d4a <__gedf2+0x6a>
 8002d98:	2c00      	cmp	r4, #0
 8002d9a:	d0e2      	beq.n	8002d62 <__gedf2+0x82>
 8002d9c:	e7dd      	b.n	8002d5a <__gedf2+0x7a>
 8002d9e:	4311      	orrs	r1, r2
 8002da0:	d104      	bne.n	8002dac <__gedf2+0xcc>
 8002da2:	9b01      	ldr	r3, [sp, #4]
 8002da4:	4563      	cmp	r3, ip
 8002da6:	d1d8      	bne.n	8002d5a <__gedf2+0x7a>
 8002da8:	2000      	movs	r0, #0
 8002daa:	e7da      	b.n	8002d62 <__gedf2+0x82>
 8002dac:	2002      	movs	r0, #2
 8002dae:	4240      	negs	r0, r0
 8002db0:	e7d7      	b.n	8002d62 <__gedf2+0x82>
 8002db2:	9b01      	ldr	r3, [sp, #4]
 8002db4:	4563      	cmp	r3, ip
 8002db6:	d0e6      	beq.n	8002d86 <__gedf2+0xa6>
 8002db8:	e7cf      	b.n	8002d5a <__gedf2+0x7a>
 8002dba:	46c0      	nop			@ (mov r8, r8)
 8002dbc:	000007ff 	.word	0x000007ff

08002dc0 <__ledf2>:
 8002dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc2:	4657      	mov	r7, sl
 8002dc4:	464e      	mov	r6, r9
 8002dc6:	4645      	mov	r5, r8
 8002dc8:	46de      	mov	lr, fp
 8002dca:	b5e0      	push	{r5, r6, r7, lr}
 8002dcc:	000d      	movs	r5, r1
 8002dce:	030e      	lsls	r6, r1, #12
 8002dd0:	0049      	lsls	r1, r1, #1
 8002dd2:	0d49      	lsrs	r1, r1, #21
 8002dd4:	468a      	mov	sl, r1
 8002dd6:	0fdf      	lsrs	r7, r3, #31
 8002dd8:	0fe9      	lsrs	r1, r5, #31
 8002dda:	46bc      	mov	ip, r7
 8002ddc:	b083      	sub	sp, #12
 8002dde:	4f2e      	ldr	r7, [pc, #184]	@ (8002e98 <__ledf2+0xd8>)
 8002de0:	0004      	movs	r4, r0
 8002de2:	4680      	mov	r8, r0
 8002de4:	9101      	str	r1, [sp, #4]
 8002de6:	0058      	lsls	r0, r3, #1
 8002de8:	0319      	lsls	r1, r3, #12
 8002dea:	4691      	mov	r9, r2
 8002dec:	0b36      	lsrs	r6, r6, #12
 8002dee:	0b09      	lsrs	r1, r1, #12
 8002df0:	0d40      	lsrs	r0, r0, #21
 8002df2:	45ba      	cmp	sl, r7
 8002df4:	d01e      	beq.n	8002e34 <__ledf2+0x74>
 8002df6:	42b8      	cmp	r0, r7
 8002df8:	d00d      	beq.n	8002e16 <__ledf2+0x56>
 8002dfa:	4657      	mov	r7, sl
 8002dfc:	2f00      	cmp	r7, #0
 8002dfe:	d127      	bne.n	8002e50 <__ledf2+0x90>
 8002e00:	4334      	orrs	r4, r6
 8002e02:	2800      	cmp	r0, #0
 8002e04:	d133      	bne.n	8002e6e <__ledf2+0xae>
 8002e06:	430a      	orrs	r2, r1
 8002e08:	d034      	beq.n	8002e74 <__ledf2+0xb4>
 8002e0a:	2c00      	cmp	r4, #0
 8002e0c:	d140      	bne.n	8002e90 <__ledf2+0xd0>
 8002e0e:	4663      	mov	r3, ip
 8002e10:	0058      	lsls	r0, r3, #1
 8002e12:	3801      	subs	r0, #1
 8002e14:	e015      	b.n	8002e42 <__ledf2+0x82>
 8002e16:	4311      	orrs	r1, r2
 8002e18:	d112      	bne.n	8002e40 <__ledf2+0x80>
 8002e1a:	4653      	mov	r3, sl
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <__ledf2+0x64>
 8002e20:	4326      	orrs	r6, r4
 8002e22:	d0f4      	beq.n	8002e0e <__ledf2+0x4e>
 8002e24:	9b01      	ldr	r3, [sp, #4]
 8002e26:	4563      	cmp	r3, ip
 8002e28:	d01d      	beq.n	8002e66 <__ledf2+0xa6>
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	9b01      	ldr	r3, [sp, #4]
 8002e2e:	425f      	negs	r7, r3
 8002e30:	4338      	orrs	r0, r7
 8002e32:	e006      	b.n	8002e42 <__ledf2+0x82>
 8002e34:	4326      	orrs	r6, r4
 8002e36:	d103      	bne.n	8002e40 <__ledf2+0x80>
 8002e38:	4550      	cmp	r0, sl
 8002e3a:	d1f6      	bne.n	8002e2a <__ledf2+0x6a>
 8002e3c:	4311      	orrs	r1, r2
 8002e3e:	d01c      	beq.n	8002e7a <__ledf2+0xba>
 8002e40:	2002      	movs	r0, #2
 8002e42:	b003      	add	sp, #12
 8002e44:	bcf0      	pop	{r4, r5, r6, r7}
 8002e46:	46bb      	mov	fp, r7
 8002e48:	46b2      	mov	sl, r6
 8002e4a:	46a9      	mov	r9, r5
 8002e4c:	46a0      	mov	r8, r4
 8002e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e50:	2800      	cmp	r0, #0
 8002e52:	d0ea      	beq.n	8002e2a <__ledf2+0x6a>
 8002e54:	9b01      	ldr	r3, [sp, #4]
 8002e56:	4563      	cmp	r3, ip
 8002e58:	d1e7      	bne.n	8002e2a <__ledf2+0x6a>
 8002e5a:	4582      	cmp	sl, r0
 8002e5c:	dce5      	bgt.n	8002e2a <__ledf2+0x6a>
 8002e5e:	db02      	blt.n	8002e66 <__ledf2+0xa6>
 8002e60:	428e      	cmp	r6, r1
 8002e62:	d8e2      	bhi.n	8002e2a <__ledf2+0x6a>
 8002e64:	d00e      	beq.n	8002e84 <__ledf2+0xc4>
 8002e66:	9b01      	ldr	r3, [sp, #4]
 8002e68:	0058      	lsls	r0, r3, #1
 8002e6a:	3801      	subs	r0, #1
 8002e6c:	e7e9      	b.n	8002e42 <__ledf2+0x82>
 8002e6e:	2c00      	cmp	r4, #0
 8002e70:	d0cd      	beq.n	8002e0e <__ledf2+0x4e>
 8002e72:	e7d7      	b.n	8002e24 <__ledf2+0x64>
 8002e74:	2c00      	cmp	r4, #0
 8002e76:	d0e4      	beq.n	8002e42 <__ledf2+0x82>
 8002e78:	e7d7      	b.n	8002e2a <__ledf2+0x6a>
 8002e7a:	9b01      	ldr	r3, [sp, #4]
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	4563      	cmp	r3, ip
 8002e80:	d0df      	beq.n	8002e42 <__ledf2+0x82>
 8002e82:	e7d2      	b.n	8002e2a <__ledf2+0x6a>
 8002e84:	45c8      	cmp	r8, r9
 8002e86:	d8d0      	bhi.n	8002e2a <__ledf2+0x6a>
 8002e88:	2000      	movs	r0, #0
 8002e8a:	45c8      	cmp	r8, r9
 8002e8c:	d2d9      	bcs.n	8002e42 <__ledf2+0x82>
 8002e8e:	e7ea      	b.n	8002e66 <__ledf2+0xa6>
 8002e90:	9b01      	ldr	r3, [sp, #4]
 8002e92:	4563      	cmp	r3, ip
 8002e94:	d0e4      	beq.n	8002e60 <__ledf2+0xa0>
 8002e96:	e7c8      	b.n	8002e2a <__ledf2+0x6a>
 8002e98:	000007ff 	.word	0x000007ff

08002e9c <can_send_Task>:
uint8_t RxDatacheck = 0; // Flag that indicates that a message has been received


osMessageQueueId_t canRxQueueHandle;

void can_send_Task(){
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0

	FDCAN_setup_std_header();
 8002ea0:	f000 f820 	bl	8002ee4 <FDCAN_setup_std_header>

	for(;;){

		//if (osSemaphoreAcquire(reg_pullHandle, osWaitForever) == osOK){

			FDCAN_set_header(TempertureCanID, 6);
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <can_send_Task+0x3c>)
 8002ea6:	2106      	movs	r1, #6
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f000 f837 	bl	8002f1c <FDCAN_set_header>

			CAN_Temps.Temp1 = 12.0;
 8002eae:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <can_send_Task+0x40>)
 8002eb0:	220c      	movs	r2, #12
 8002eb2:	801a      	strh	r2, [r3, #0]
			CAN_Temps.Temp2 = 13.0;
 8002eb4:	4b09      	ldr	r3, [pc, #36]	@ (8002edc <can_send_Task+0x40>)
 8002eb6:	220d      	movs	r2, #13
 8002eb8:	805a      	strh	r2, [r3, #2]
			CAN_Temps.Temp3 = 14.0;
 8002eba:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <can_send_Task+0x40>)
 8002ebc:	220e      	movs	r2, #14
 8002ebe:	809a      	strh	r2, [r3, #4]

    		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, TempertureCanID, &CAN_Temps);
 8002ec0:	4a06      	ldr	r2, [pc, #24]	@ (8002edc <can_send_Task+0x40>)
 8002ec2:	4905      	ldr	r1, [pc, #20]	@ (8002ed8 <can_send_Task+0x3c>)
 8002ec4:	4b06      	ldr	r3, [pc, #24]	@ (8002ee0 <can_send_Task+0x44>)
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f001 ffea 	bl	8004ea0 <HAL_FDCAN_AddMessageToTxFifoQ>

    		//osSemaphoreRelease(reg_pullHandle);

			// Yellow LED
			//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
			vTaskDelay(100);
 8002ecc:	2064      	movs	r0, #100	@ 0x64
 8002ece:	f005 fb39 	bl	8008544 <vTaskDelay>
			FDCAN_set_header(TempertureCanID, 6);
 8002ed2:	46c0      	nop			@ (mov r8, r8)
 8002ed4:	e7e6      	b.n	8002ea4 <can_send_Task+0x8>
 8002ed6:	46c0      	nop			@ (mov r8, r8)
 8002ed8:	00000266 	.word	0x00000266
 8002edc:	200000d8 	.word	0x200000d8
 8002ee0:	20000188 	.word	0x20000188

08002ee4 <FDCAN_setup_std_header>:

	return return_message;
}

void FDCAN_setup_std_header()
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <FDCAN_setup_std_header+0x34>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002eee:	4b0a      	ldr	r3, [pc, #40]	@ (8002f18 <FDCAN_setup_std_header+0x34>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	609a      	str	r2, [r3, #8]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002ef4:	4b08      	ldr	r3, [pc, #32]	@ (8002f18 <FDCAN_setup_std_header+0x34>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8002efa:	4b07      	ldr	r3, [pc, #28]	@ (8002f18 <FDCAN_setup_std_header+0x34>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8002f00:	4b05      	ldr	r3, [pc, #20]	@ (8002f18 <FDCAN_setup_std_header+0x34>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8002f06:	4b04      	ldr	r3, [pc, #16]	@ (8002f18 <FDCAN_setup_std_header+0x34>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8002f0c:	4b02      	ldr	r3, [pc, #8]	@ (8002f18 <FDCAN_setup_std_header+0x34>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	621a      	str	r2, [r3, #32]
}
 8002f12:	46c0      	nop			@ (mov r8, r8)
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	2000007c 	.word	0x2000007c

08002f1c <FDCAN_set_header>:

void FDCAN_set_header(uint16_t std_tx_id, uint8_t dlc)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	0002      	movs	r2, r0
 8002f24:	1dbb      	adds	r3, r7, #6
 8002f26:	801a      	strh	r2, [r3, #0]
 8002f28:	1d7b      	adds	r3, r7, #5
 8002f2a:	1c0a      	adds	r2, r1, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
	TxHeader.Identifier = std_tx_id;
 8002f2e:	1dbb      	adds	r3, r7, #6
 8002f30:	881a      	ldrh	r2, [r3, #0]
 8002f32:	4b04      	ldr	r3, [pc, #16]	@ (8002f44 <FDCAN_set_header+0x28>)
 8002f34:	601a      	str	r2, [r3, #0]
	TxHeader.DataLength = FDCAN_DLC_BYTES_6;
 8002f36:	4b03      	ldr	r3, [pc, #12]	@ (8002f44 <FDCAN_set_header+0x28>)
 8002f38:	2206      	movs	r2, #6
 8002f3a:	60da      	str	r2, [r3, #12]
}
 8002f3c:	46c0      	nop			@ (mov r8, r8)
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b002      	add	sp, #8
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	2000007c 	.word	0x2000007c

08002f48 <Cell_Motoring_Task>:

unsigned int CellVoltage[15];
float Gain = 0;
int iGain = 0;

void Cell_Motoring_Task(){
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002f4e:	4b34      	ldr	r3, [pc, #208]	@ (8003020 <Cell_Motoring_Task+0xd8>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	2140      	movs	r1, #64	@ 0x40
 8002f54:	0018      	movs	r0, r3
 8002f56:	f002 fa3d 	bl	80053d4 <HAL_GPIO_WritePin>
	vTaskDelay(1000);
 8002f5a:	23fa      	movs	r3, #250	@ 0xfa
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f005 faf0 	bl	8008544 <vTaskDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8002f64:	4b2e      	ldr	r3, [pc, #184]	@ (8003020 <Cell_Motoring_Task+0xd8>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	2140      	movs	r1, #64	@ 0x40
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f002 fa32 	bl	80053d4 <HAL_GPIO_WritePin>
	vTaskDelay(1000);
 8002f70:	23fa      	movs	r3, #250	@ 0xfa
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	0018      	movs	r0, r3
 8002f76:	f005 fae5 	bl	8008544 <vTaskDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002f7a:	4b29      	ldr	r3, [pc, #164]	@ (8003020 <Cell_Motoring_Task+0xd8>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2140      	movs	r1, #64	@ 0x40
 8002f80:	0018      	movs	r0, r3
 8002f82:	f002 fa27 	bl	80053d4 <HAL_GPIO_WritePin>
	vTaskDelay(1000);
 8002f86:	23fa      	movs	r3, #250	@ 0xfa
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f005 fada 	bl	8008544 <vTaskDelay>

	HAL_StatusTypeDef init_status = HAL_OK;
 8002f90:	1dbb      	adds	r3, r7, #6
 8002f92:	2200      	movs	r2, #0
 8002f94:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef import_status = HAL_OK;
 8002f96:	1dfb      	adds	r3, r7, #7
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]

	//init_status = TEST_I2C();

	init_status |= InitialisebqMaximo();
 8002f9c:	f000 f92a 	bl	80031f4 <InitialisebqMaximo>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	1dbb      	adds	r3, r7, #6
 8002fa6:	1dba      	adds	r2, r7, #6
 8002fa8:	7812      	ldrb	r2, [r2, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	701a      	strb	r2, [r3, #0]

	for(;;){

	    if (HAL_I2C_IsDeviceReady(&hi2c2, BQ76940_ADDR, 3, 1000) == HAL_OK)
 8002fae:	23fa      	movs	r3, #250	@ 0xfa
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	481c      	ldr	r0, [pc, #112]	@ (8003024 <Cell_Motoring_Task+0xdc>)
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	2110      	movs	r1, #16
 8002fb8:	f002 fd4c 	bl	8005a54 <HAL_I2C_IsDeviceReady>
 8002fbc:	1e03      	subs	r3, r0, #0
 8002fbe:	d11e      	bne.n	8002ffe <Cell_Motoring_Task+0xb6>
	    {

	    	//if (osSemaphoreAcquire(reg_pullHandle, osWaitForever) == 0){

				import_status |= UpdateVoltageFromBqMaximo();
 8002fc0:	f000 fa20 	bl	8003404 <UpdateVoltageFromBqMaximo>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	1dfb      	adds	r3, r7, #7
 8002fca:	1dfa      	adds	r2, r7, #7
 8002fcc:	7812      	ldrb	r2, [r2, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	701a      	strb	r2, [r3, #0]
				build_can_temps();
 8002fd2:	f000 fb3b 	bl	800364c <build_can_temps>

	    	    //osSemaphoreRelease(reg_memHandle);

		    	import_status |= UpdateTempertureFromBqMaximo();
 8002fd6:	f000 fa77 	bl	80034c8 <UpdateTempertureFromBqMaximo>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	0019      	movs	r1, r3
 8002fde:	1dfb      	adds	r3, r7, #7
 8002fe0:	1dfa      	adds	r2, r7, #7
 8002fe2:	7812      	ldrb	r2, [r2, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	701a      	strb	r2, [r3, #0]
				// Red LED
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8002fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8003028 <Cell_Motoring_Task+0xe0>)
 8002fea:	2120      	movs	r1, #32
 8002fec:	0018      	movs	r0, r3
 8002fee:	f002 fa0e 	bl	800540e <HAL_GPIO_TogglePin>
				vTaskDelay(1000);
 8002ff2:	23fa      	movs	r3, #250	@ 0xfa
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f005 faa4 	bl	8008544 <vTaskDelay>
 8002ffc:	e00c      	b.n	8003018 <Cell_Motoring_Task+0xd0>

	    }
		else
		{
			// Yellow LED
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8002ffe:	2380      	movs	r3, #128	@ 0x80
 8003000:	021a      	lsls	r2, r3, #8
 8003002:	23a0      	movs	r3, #160	@ 0xa0
 8003004:	05db      	lsls	r3, r3, #23
 8003006:	0011      	movs	r1, r2
 8003008:	0018      	movs	r0, r3
 800300a:	f002 fa00 	bl	800540e <HAL_GPIO_TogglePin>
			vTaskDelay(1000);
 800300e:	23fa      	movs	r3, #250	@ 0xfa
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	0018      	movs	r0, r3
 8003014:	f005 fa96 	bl	8008544 <vTaskDelay>
	    }

	    vTaskDelay(100);
 8003018:	2064      	movs	r0, #100	@ 0x64
 800301a:	f005 fa93 	bl	8008544 <vTaskDelay>
	    if (HAL_I2C_IsDeviceReady(&hi2c2, BQ76940_ADDR, 3, 1000) == HAL_OK)
 800301e:	e7c6      	b.n	8002fae <Cell_Motoring_Task+0x66>
 8003020:	50000800 	.word	0x50000800
 8003024:	200001ec 	.word	0x200001ec
 8003028:	50000400 	.word	0x50000400

0800302c <GetADCGainOffset>:

}


HAL_StatusTypeDef GetADCGainOffset()
{
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b087      	sub	sp, #28
 8003030:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef WriteStatus = HAL_OK;
 8003032:	1dfb      	adds	r3, r7, #7
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]

    WriteStatus = HAL_I2C_Mem_Read(&hi2c2, BQMAXIMO, ADCGAIN1, I2C_MEMADD_SIZE_8BIT, &(Registers.ADCGain1.ADCGain1Byte), 1, HAL_MAX_DELAY);
 8003038:	1dfc      	adds	r4, r7, #7
 800303a:	481c      	ldr	r0, [pc, #112]	@ (80030ac <GetADCGainOffset+0x80>)
 800303c:	2301      	movs	r3, #1
 800303e:	425b      	negs	r3, r3
 8003040:	9302      	str	r3, [sp, #8]
 8003042:	2301      	movs	r3, #1
 8003044:	9301      	str	r3, [sp, #4]
 8003046:	4b1a      	ldr	r3, [pc, #104]	@ (80030b0 <GetADCGainOffset+0x84>)
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	2301      	movs	r3, #1
 800304c:	2250      	movs	r2, #80	@ 0x50
 800304e:	2110      	movs	r1, #16
 8003050:	f002 fbcc 	bl	80057ec <HAL_I2C_Mem_Read>
 8003054:	0003      	movs	r3, r0
 8003056:	7023      	strb	r3, [r4, #0]
    WriteStatus = HAL_I2C_Mem_Read(&hi2c2, BQMAXIMO, ADCGAIN2, I2C_MEMADD_SIZE_8BIT, &(Registers.ADCGain2.ADCGain2Byte), 1, HAL_MAX_DELAY);
 8003058:	1dfc      	adds	r4, r7, #7
 800305a:	4814      	ldr	r0, [pc, #80]	@ (80030ac <GetADCGainOffset+0x80>)
 800305c:	2301      	movs	r3, #1
 800305e:	425b      	negs	r3, r3
 8003060:	9302      	str	r3, [sp, #8]
 8003062:	2301      	movs	r3, #1
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	4b13      	ldr	r3, [pc, #76]	@ (80030b4 <GetADCGainOffset+0x88>)
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	2301      	movs	r3, #1
 800306c:	2259      	movs	r2, #89	@ 0x59
 800306e:	2110      	movs	r1, #16
 8003070:	f002 fbbc 	bl	80057ec <HAL_I2C_Mem_Read>
 8003074:	0003      	movs	r3, r0
 8003076:	7023      	strb	r3, [r4, #0]
    WriteStatus|= HAL_I2C_Mem_Read(&hi2c2, BQMAXIMO, ADCOFFSET, I2C_MEMADD_SIZE_8BIT, &(Registers.ADCOffset), 1, HAL_MAX_DELAY);
 8003078:	480c      	ldr	r0, [pc, #48]	@ (80030ac <GetADCGainOffset+0x80>)
 800307a:	2301      	movs	r3, #1
 800307c:	425b      	negs	r3, r3
 800307e:	9302      	str	r3, [sp, #8]
 8003080:	2301      	movs	r3, #1
 8003082:	9301      	str	r3, [sp, #4]
 8003084:	4b0c      	ldr	r3, [pc, #48]	@ (80030b8 <GetADCGainOffset+0x8c>)
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	2301      	movs	r3, #1
 800308a:	2251      	movs	r2, #81	@ 0x51
 800308c:	2110      	movs	r1, #16
 800308e:	f002 fbad 	bl	80057ec <HAL_I2C_Mem_Read>
 8003092:	0003      	movs	r3, r0
 8003094:	0019      	movs	r1, r3
 8003096:	1dfb      	adds	r3, r7, #7
 8003098:	1dfa      	adds	r2, r7, #7
 800309a:	7812      	ldrb	r2, [r2, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	701a      	strb	r2, [r3, #0]

	return WriteStatus;
 80030a0:	1dfb      	adds	r3, r7, #7
 80030a2:	781b      	ldrb	r3, [r3, #0]
}
 80030a4:	0018      	movs	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b003      	add	sp, #12
 80030aa:	bd90      	pop	{r4, r7, pc}
 80030ac:	200001ec 	.word	0x200001ec
 80030b0:	200000d4 	.word	0x200000d4
 80030b4:	200000d6 	.word	0x200000d6
 80030b8:	200000d5 	.word	0x200000d5

080030bc <ConfigureBqMaximo>:

HAL_StatusTypeDef ConfigureBqMaximo()
{
 80030bc:	b590      	push	{r4, r7, lr}
 80030be:	b087      	sub	sp, #28
 80030c0:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef ConfigStatus = HAL_OK;
 80030c2:	1dfb      	adds	r3, r7, #7
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
	unsigned char bqMaximoProtectionConfig[5];

	//ConfigStatus = I2CWriteBlock(BQMAXIMO, PROTECT1, &(Registers.Protect1.Protect1Byte), 5);
	ConfigStatus = HAL_I2C_Mem_Write(&hi2c2, BQ76940_ADDR, PROTECT1, I2C_MEMADD_SIZE_8BIT, &(Registers.Protect1.Protect1Byte), 1, HAL_MAX_DELAY);
 80030c8:	1dfc      	adds	r4, r7, #7
 80030ca:	4843      	ldr	r0, [pc, #268]	@ (80031d8 <ConfigureBqMaximo+0x11c>)
 80030cc:	2301      	movs	r3, #1
 80030ce:	425b      	negs	r3, r3
 80030d0:	9302      	str	r3, [sp, #8]
 80030d2:	2301      	movs	r3, #1
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	4b41      	ldr	r3, [pc, #260]	@ (80031dc <ConfigureBqMaximo+0x120>)
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	2301      	movs	r3, #1
 80030dc:	2206      	movs	r2, #6
 80030de:	2110      	movs	r1, #16
 80030e0:	f002 fa56 	bl	8005590 <HAL_I2C_Mem_Write>
 80030e4:	0003      	movs	r3, r0
 80030e6:	7023      	strb	r3, [r4, #0]
	ConfigStatus = HAL_I2C_Mem_Write(&hi2c2, BQ76940_ADDR, PROTECT2, I2C_MEMADD_SIZE_8BIT, &(Registers.Protect2.Protect2Byte), 1, HAL_MAX_DELAY);
 80030e8:	1dfc      	adds	r4, r7, #7
 80030ea:	483b      	ldr	r0, [pc, #236]	@ (80031d8 <ConfigureBqMaximo+0x11c>)
 80030ec:	2301      	movs	r3, #1
 80030ee:	425b      	negs	r3, r3
 80030f0:	9302      	str	r3, [sp, #8]
 80030f2:	2301      	movs	r3, #1
 80030f4:	9301      	str	r3, [sp, #4]
 80030f6:	4b3a      	ldr	r3, [pc, #232]	@ (80031e0 <ConfigureBqMaximo+0x124>)
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	2301      	movs	r3, #1
 80030fc:	2207      	movs	r2, #7
 80030fe:	2110      	movs	r1, #16
 8003100:	f002 fa46 	bl	8005590 <HAL_I2C_Mem_Write>
 8003104:	0003      	movs	r3, r0
 8003106:	7023      	strb	r3, [r4, #0]
	ConfigStatus = HAL_I2C_Mem_Write(&hi2c2, BQ76940_ADDR, PROTECT3, I2C_MEMADD_SIZE_8BIT, &(Registers.Protect3.Protect3Byte), 1, HAL_MAX_DELAY);
 8003108:	1dfc      	adds	r4, r7, #7
 800310a:	4833      	ldr	r0, [pc, #204]	@ (80031d8 <ConfigureBqMaximo+0x11c>)
 800310c:	2301      	movs	r3, #1
 800310e:	425b      	negs	r3, r3
 8003110:	9302      	str	r3, [sp, #8]
 8003112:	2301      	movs	r3, #1
 8003114:	9301      	str	r3, [sp, #4]
 8003116:	4b33      	ldr	r3, [pc, #204]	@ (80031e4 <ConfigureBqMaximo+0x128>)
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	2301      	movs	r3, #1
 800311c:	2208      	movs	r2, #8
 800311e:	2110      	movs	r1, #16
 8003120:	f002 fa36 	bl	8005590 <HAL_I2C_Mem_Write>
 8003124:	0003      	movs	r3, r0
 8003126:	7023      	strb	r3, [r4, #0]
	ConfigStatus = HAL_I2C_Mem_Write(&hi2c2, BQ76940_ADDR, OV_TRIP, I2C_MEMADD_SIZE_8BIT, &(Registers.OVTrip), 1, HAL_MAX_DELAY);
 8003128:	1dfc      	adds	r4, r7, #7
 800312a:	482b      	ldr	r0, [pc, #172]	@ (80031d8 <ConfigureBqMaximo+0x11c>)
 800312c:	2301      	movs	r3, #1
 800312e:	425b      	negs	r3, r3
 8003130:	9302      	str	r3, [sp, #8]
 8003132:	2301      	movs	r3, #1
 8003134:	9301      	str	r3, [sp, #4]
 8003136:	4b2c      	ldr	r3, [pc, #176]	@ (80031e8 <ConfigureBqMaximo+0x12c>)
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	2301      	movs	r3, #1
 800313c:	2209      	movs	r2, #9
 800313e:	2110      	movs	r1, #16
 8003140:	f002 fa26 	bl	8005590 <HAL_I2C_Mem_Write>
 8003144:	0003      	movs	r3, r0
 8003146:	7023      	strb	r3, [r4, #0]
	ConfigStatus = HAL_I2C_Mem_Write(&hi2c2, BQ76940_ADDR, UV_TRIP, I2C_MEMADD_SIZE_8BIT, &(Registers.UVTrip), 1, HAL_MAX_DELAY);
 8003148:	1dfc      	adds	r4, r7, #7
 800314a:	4823      	ldr	r0, [pc, #140]	@ (80031d8 <ConfigureBqMaximo+0x11c>)
 800314c:	2301      	movs	r3, #1
 800314e:	425b      	negs	r3, r3
 8003150:	9302      	str	r3, [sp, #8]
 8003152:	2301      	movs	r3, #1
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	4b25      	ldr	r3, [pc, #148]	@ (80031ec <ConfigureBqMaximo+0x130>)
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	2301      	movs	r3, #1
 800315c:	220a      	movs	r2, #10
 800315e:	2110      	movs	r1, #16
 8003160:	f002 fa16 	bl	8005590 <HAL_I2C_Mem_Write>
 8003164:	0003      	movs	r3, r0
 8003166:	7023      	strb	r3, [r4, #0]

	//ConfigStatus = I2CReadBlock(BQMAXIMO, PROTECT1, bqMaximoProtectionConfig, 5);
	ConfigStatus = HAL_I2C_Mem_Read(&hi2c2, BQMAXIMO, PROTECT1, I2C_MEMADD_SIZE_8BIT, bqMaximoProtectionConfig, 5, HAL_MAX_DELAY);
 8003168:	1dfc      	adds	r4, r7, #7
 800316a:	481b      	ldr	r0, [pc, #108]	@ (80031d8 <ConfigureBqMaximo+0x11c>)
 800316c:	2301      	movs	r3, #1
 800316e:	425b      	negs	r3, r3
 8003170:	9302      	str	r3, [sp, #8]
 8003172:	2305      	movs	r3, #5
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	003b      	movs	r3, r7
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	2301      	movs	r3, #1
 800317c:	2206      	movs	r2, #6
 800317e:	2110      	movs	r1, #16
 8003180:	f002 fb34 	bl	80057ec <HAL_I2C_Mem_Read>
 8003184:	0003      	movs	r3, r0
 8003186:	7023      	strb	r3, [r4, #0]

	if(bqMaximoProtectionConfig[0] != Registers.Protect1.Protect1Byte
 8003188:	003b      	movs	r3, r7
 800318a:	781a      	ldrb	r2, [r3, #0]
 800318c:	4b18      	ldr	r3, [pc, #96]	@ (80031f0 <ConfigureBqMaximo+0x134>)
 800318e:	799b      	ldrb	r3, [r3, #6]
 8003190:	429a      	cmp	r2, r3
 8003192:	d117      	bne.n	80031c4 <ConfigureBqMaximo+0x108>
			|| bqMaximoProtectionConfig[1] != Registers.Protect2.Protect2Byte
 8003194:	003b      	movs	r3, r7
 8003196:	785a      	ldrb	r2, [r3, #1]
 8003198:	4b15      	ldr	r3, [pc, #84]	@ (80031f0 <ConfigureBqMaximo+0x134>)
 800319a:	79db      	ldrb	r3, [r3, #7]
 800319c:	429a      	cmp	r2, r3
 800319e:	d111      	bne.n	80031c4 <ConfigureBqMaximo+0x108>
			|| bqMaximoProtectionConfig[2] != Registers.Protect3.Protect3Byte
 80031a0:	003b      	movs	r3, r7
 80031a2:	789a      	ldrb	r2, [r3, #2]
 80031a4:	4b12      	ldr	r3, [pc, #72]	@ (80031f0 <ConfigureBqMaximo+0x134>)
 80031a6:	7a1b      	ldrb	r3, [r3, #8]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d10b      	bne.n	80031c4 <ConfigureBqMaximo+0x108>
			|| bqMaximoProtectionConfig[3] != Registers.OVTrip
 80031ac:	003b      	movs	r3, r7
 80031ae:	78da      	ldrb	r2, [r3, #3]
 80031b0:	4b0f      	ldr	r3, [pc, #60]	@ (80031f0 <ConfigureBqMaximo+0x134>)
 80031b2:	7a5b      	ldrb	r3, [r3, #9]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d105      	bne.n	80031c4 <ConfigureBqMaximo+0x108>
			|| bqMaximoProtectionConfig[4] != Registers.UVTrip)
 80031b8:	003b      	movs	r3, r7
 80031ba:	791a      	ldrb	r2, [r3, #4]
 80031bc:	4b0c      	ldr	r3, [pc, #48]	@ (80031f0 <ConfigureBqMaximo+0x134>)
 80031be:	7a9b      	ldrb	r3, [r3, #10]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d002      	beq.n	80031ca <ConfigureBqMaximo+0x10e>
	{
		ConfigStatus = HAL_ERROR;
 80031c4:	1dfb      	adds	r3, r7, #7
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
	}

	return ConfigStatus;
 80031ca:	1dfb      	adds	r3, r7, #7
 80031cc:	781b      	ldrb	r3, [r3, #0]
}
 80031ce:	0018      	movs	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b003      	add	sp, #12
 80031d4:	bd90      	pop	{r4, r7, pc}
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	200001ec 	.word	0x200001ec
 80031dc:	200000a6 	.word	0x200000a6
 80031e0:	200000a7 	.word	0x200000a7
 80031e4:	200000a8 	.word	0x200000a8
 80031e8:	200000a9 	.word	0x200000a9
 80031ec:	200000aa 	.word	0x200000aa
 80031f0:	200000a0 	.word	0x200000a0

080031f4 <InitialisebqMaximo>:

HAL_StatusTypeDef InitialisebqMaximo()
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef WriteStatus = HAL_OK;
 80031fa:	1dfb      	adds	r3, r7, #7
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]

	Registers.Protect1.Protect1Bit.SCD_DELAY = SCDDelay;
 8003200:	2301      	movs	r3, #1
 8003202:	1c1a      	adds	r2, r3, #0
 8003204:	2303      	movs	r3, #3
 8003206:	4013      	ands	r3, r2
 8003208:	b2da      	uxtb	r2, r3
 800320a:	4b75      	ldr	r3, [pc, #468]	@ (80033e0 <InitialisebqMaximo+0x1ec>)
 800320c:	2103      	movs	r1, #3
 800320e:	400a      	ands	r2, r1
 8003210:	00d0      	lsls	r0, r2, #3
 8003212:	799a      	ldrb	r2, [r3, #6]
 8003214:	2118      	movs	r1, #24
 8003216:	438a      	bics	r2, r1
 8003218:	1c11      	adds	r1, r2, #0
 800321a:	1c02      	adds	r2, r0, #0
 800321c:	430a      	orrs	r2, r1
 800321e:	719a      	strb	r2, [r3, #6]
	Registers.Protect1.Protect1Bit.SCD_THRESH = SCDThresh;
 8003220:	2302      	movs	r3, #2
 8003222:	1c1a      	adds	r2, r3, #0
 8003224:	2307      	movs	r3, #7
 8003226:	4013      	ands	r3, r2
 8003228:	b2da      	uxtb	r2, r3
 800322a:	4b6d      	ldr	r3, [pc, #436]	@ (80033e0 <InitialisebqMaximo+0x1ec>)
 800322c:	2107      	movs	r1, #7
 800322e:	400a      	ands	r2, r1
 8003230:	0010      	movs	r0, r2
 8003232:	799a      	ldrb	r2, [r3, #6]
 8003234:	2107      	movs	r1, #7
 8003236:	438a      	bics	r2, r1
 8003238:	1c11      	adds	r1, r2, #0
 800323a:	1c02      	adds	r2, r0, #0
 800323c:	430a      	orrs	r2, r1
 800323e:	719a      	strb	r2, [r3, #6]
	Registers.Protect2.Protect2Bit.OCD_DELAY = OCDDelay;
 8003240:	2305      	movs	r3, #5
 8003242:	1c1a      	adds	r2, r3, #0
 8003244:	2307      	movs	r3, #7
 8003246:	4013      	ands	r3, r2
 8003248:	b2da      	uxtb	r2, r3
 800324a:	4b65      	ldr	r3, [pc, #404]	@ (80033e0 <InitialisebqMaximo+0x1ec>)
 800324c:	2107      	movs	r1, #7
 800324e:	400a      	ands	r2, r1
 8003250:	0110      	lsls	r0, r2, #4
 8003252:	79da      	ldrb	r2, [r3, #7]
 8003254:	2170      	movs	r1, #112	@ 0x70
 8003256:	438a      	bics	r2, r1
 8003258:	1c11      	adds	r1, r2, #0
 800325a:	1c02      	adds	r2, r0, #0
 800325c:	430a      	orrs	r2, r1
 800325e:	71da      	strb	r2, [r3, #7]
	Registers.Protect2.Protect2Bit.OCD_THRESH = OCDThresh;
 8003260:	2301      	movs	r3, #1
 8003262:	1c1a      	adds	r2, r3, #0
 8003264:	230f      	movs	r3, #15
 8003266:	4013      	ands	r3, r2
 8003268:	b2da      	uxtb	r2, r3
 800326a:	4b5d      	ldr	r3, [pc, #372]	@ (80033e0 <InitialisebqMaximo+0x1ec>)
 800326c:	210f      	movs	r1, #15
 800326e:	400a      	ands	r2, r1
 8003270:	0010      	movs	r0, r2
 8003272:	79da      	ldrb	r2, [r3, #7]
 8003274:	210f      	movs	r1, #15
 8003276:	438a      	bics	r2, r1
 8003278:	1c11      	adds	r1, r2, #0
 800327a:	1c02      	adds	r2, r0, #0
 800327c:	430a      	orrs	r2, r1
 800327e:	71da      	strb	r2, [r3, #7]
	Registers.Protect3.Protect3Bit.OV_DELAY = OVDelay;
 8003280:	2301      	movs	r3, #1
 8003282:	1c1a      	adds	r2, r3, #0
 8003284:	2303      	movs	r3, #3
 8003286:	4013      	ands	r3, r2
 8003288:	b2da      	uxtb	r2, r3
 800328a:	4b55      	ldr	r3, [pc, #340]	@ (80033e0 <InitialisebqMaximo+0x1ec>)
 800328c:	2103      	movs	r1, #3
 800328e:	400a      	ands	r2, r1
 8003290:	0110      	lsls	r0, r2, #4
 8003292:	7a1a      	ldrb	r2, [r3, #8]
 8003294:	2130      	movs	r1, #48	@ 0x30
 8003296:	438a      	bics	r2, r1
 8003298:	1c11      	adds	r1, r2, #0
 800329a:	1c02      	adds	r2, r0, #0
 800329c:	430a      	orrs	r2, r1
 800329e:	721a      	strb	r2, [r3, #8]
	Registers.Protect3.Protect3Bit.UV_DELAY = UVDelay;
 80032a0:	2302      	movs	r3, #2
 80032a2:	1c1a      	adds	r2, r3, #0
 80032a4:	2303      	movs	r3, #3
 80032a6:	4013      	ands	r3, r2
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4b4d      	ldr	r3, [pc, #308]	@ (80033e0 <InitialisebqMaximo+0x1ec>)
 80032ac:	0190      	lsls	r0, r2, #6
 80032ae:	7a1a      	ldrb	r2, [r3, #8]
 80032b0:	213f      	movs	r1, #63	@ 0x3f
 80032b2:	400a      	ands	r2, r1
 80032b4:	1c11      	adds	r1, r2, #0
 80032b6:	1c02      	adds	r2, r0, #0
 80032b8:	430a      	orrs	r2, r1
 80032ba:	721a      	strb	r2, [r3, #8]

	WriteStatus |= GetADCGainOffset();
 80032bc:	f7ff feb6 	bl	800302c <GetADCGainOffset>
 80032c0:	0003      	movs	r3, r0
 80032c2:	0019      	movs	r1, r3
 80032c4:	1dfb      	adds	r3, r7, #7
 80032c6:	1dfa      	adds	r2, r7, #7
 80032c8:	7812      	ldrb	r2, [r2, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	701a      	strb	r2, [r3, #0]

	Gain = (365 + ((Registers.ADCGain1.ADCGain1Byte & 0x0C) << 1) + ((Registers.ADCGain2.ADCGain2Byte & 0xE0)>> 5)) / 1000.0;
 80032ce:	4b44      	ldr	r3, [pc, #272]	@ (80033e0 <InitialisebqMaximo+0x1ec>)
 80032d0:	2234      	movs	r2, #52	@ 0x34
 80032d2:	5c9b      	ldrb	r3, [r3, r2]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	2218      	movs	r2, #24
 80032d8:	4013      	ands	r3, r2
 80032da:	336e      	adds	r3, #110	@ 0x6e
 80032dc:	33ff      	adds	r3, #255	@ 0xff
 80032de:	4a40      	ldr	r2, [pc, #256]	@ (80033e0 <InitialisebqMaximo+0x1ec>)
 80032e0:	2136      	movs	r1, #54	@ 0x36
 80032e2:	5c52      	ldrb	r2, [r2, r1]
 80032e4:	0952      	lsrs	r2, r2, #5
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	189b      	adds	r3, r3, r2
 80032ea:	0018      	movs	r0, r3
 80032ec:	f7ff fb60 	bl	80029b0 <__aeabi_i2d>
 80032f0:	2200      	movs	r2, #0
 80032f2:	4b3c      	ldr	r3, [pc, #240]	@ (80033e4 <InitialisebqMaximo+0x1f0>)
 80032f4:	f7fe fbfe 	bl	8001af4 <__aeabi_ddiv>
 80032f8:	0002      	movs	r2, r0
 80032fa:	000b      	movs	r3, r1
 80032fc:	0010      	movs	r0, r2
 80032fe:	0019      	movs	r1, r3
 8003300:	f7ff fbcc 	bl	8002a9c <__aeabi_d2f>
 8003304:	1c02      	adds	r2, r0, #0
 8003306:	4b38      	ldr	r3, [pc, #224]	@ (80033e8 <InitialisebqMaximo+0x1f4>)
 8003308:	601a      	str	r2, [r3, #0]
	iGain = 365 + ((Registers.ADCGain1.ADCGain1Byte & 0x0C) << 1) + ((Registers.ADCGain2.ADCGain2Byte & 0xE0)>> 5);
 800330a:	4b35      	ldr	r3, [pc, #212]	@ (80033e0 <InitialisebqMaximo+0x1ec>)
 800330c:	2234      	movs	r2, #52	@ 0x34
 800330e:	5c9b      	ldrb	r3, [r3, r2]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	2218      	movs	r2, #24
 8003314:	4013      	ands	r3, r2
 8003316:	336e      	adds	r3, #110	@ 0x6e
 8003318:	33ff      	adds	r3, #255	@ 0xff
 800331a:	4a31      	ldr	r2, [pc, #196]	@ (80033e0 <InitialisebqMaximo+0x1ec>)
 800331c:	2136      	movs	r1, #54	@ 0x36
 800331e:	5c52      	ldrb	r2, [r2, r1]
 8003320:	0952      	lsrs	r2, r2, #5
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	189a      	adds	r2, r3, r2
 8003326:	4b31      	ldr	r3, [pc, #196]	@ (80033ec <InitialisebqMaximo+0x1f8>)
 8003328:	601a      	str	r2, [r3, #0]

    Registers.OVTrip = (unsigned char)((((unsigned short)((OVPThreshold - Registers.ADCOffset)/Gain + 0.5) - OV_THRESH_BASE) >> 4) & 0xFF);
 800332a:	4a31      	ldr	r2, [pc, #196]	@ (80033f0 <InitialisebqMaximo+0x1fc>)
 800332c:	4b2c      	ldr	r3, [pc, #176]	@ (80033e0 <InitialisebqMaximo+0x1ec>)
 800332e:	2135      	movs	r1, #53	@ 0x35
 8003330:	5c5b      	ldrb	r3, [r3, r1]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	0018      	movs	r0, r3
 8003336:	f7fd ffd1 	bl	80012dc <__aeabi_ui2f>
 800333a:	1c02      	adds	r2, r0, #0
 800333c:	4b2a      	ldr	r3, [pc, #168]	@ (80033e8 <InitialisebqMaximo+0x1f4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	1c19      	adds	r1, r3, #0
 8003342:	1c10      	adds	r0, r2, #0
 8003344:	f7fd f9ce 	bl	80006e4 <__aeabi_fdiv>
 8003348:	1c03      	adds	r3, r0, #0
 800334a:	1c18      	adds	r0, r3, #0
 800334c:	f7ff fb5e 	bl	8002a0c <__aeabi_f2d>
 8003350:	2200      	movs	r2, #0
 8003352:	4b28      	ldr	r3, [pc, #160]	@ (80033f4 <InitialisebqMaximo+0x200>)
 8003354:	f7fe f808 	bl	8001368 <__aeabi_dadd>
 8003358:	0002      	movs	r2, r0
 800335a:	000b      	movs	r3, r1
 800335c:	0010      	movs	r0, r2
 800335e:	0019      	movs	r1, r3
 8003360:	f7fc ffb0 	bl	80002c4 <__aeabi_d2uiz>
 8003364:	0003      	movs	r3, r0
 8003366:	b29b      	uxth	r3, r3
 8003368:	4a23      	ldr	r2, [pc, #140]	@ (80033f8 <InitialisebqMaximo+0x204>)
 800336a:	4694      	mov	ip, r2
 800336c:	4463      	add	r3, ip
 800336e:	111b      	asrs	r3, r3, #4
 8003370:	b2da      	uxtb	r2, r3
 8003372:	4b1b      	ldr	r3, [pc, #108]	@ (80033e0 <InitialisebqMaximo+0x1ec>)
 8003374:	725a      	strb	r2, [r3, #9]
    Registers.UVTrip = (unsigned char)((((unsigned short)((UVPThreshold - Registers.ADCOffset)/Gain + 0.5) - UV_THRESH_BASE) >> 4) & 0xFF);
 8003376:	4a21      	ldr	r2, [pc, #132]	@ (80033fc <InitialisebqMaximo+0x208>)
 8003378:	4b19      	ldr	r3, [pc, #100]	@ (80033e0 <InitialisebqMaximo+0x1ec>)
 800337a:	2135      	movs	r1, #53	@ 0x35
 800337c:	5c5b      	ldrb	r3, [r3, r1]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	0018      	movs	r0, r3
 8003382:	f7fd ffab 	bl	80012dc <__aeabi_ui2f>
 8003386:	1c02      	adds	r2, r0, #0
 8003388:	4b17      	ldr	r3, [pc, #92]	@ (80033e8 <InitialisebqMaximo+0x1f4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	1c19      	adds	r1, r3, #0
 800338e:	1c10      	adds	r0, r2, #0
 8003390:	f7fd f9a8 	bl	80006e4 <__aeabi_fdiv>
 8003394:	1c03      	adds	r3, r0, #0
 8003396:	1c18      	adds	r0, r3, #0
 8003398:	f7ff fb38 	bl	8002a0c <__aeabi_f2d>
 800339c:	2200      	movs	r2, #0
 800339e:	4b15      	ldr	r3, [pc, #84]	@ (80033f4 <InitialisebqMaximo+0x200>)
 80033a0:	f7fd ffe2 	bl	8001368 <__aeabi_dadd>
 80033a4:	0002      	movs	r2, r0
 80033a6:	000b      	movs	r3, r1
 80033a8:	0010      	movs	r0, r2
 80033aa:	0019      	movs	r1, r3
 80033ac:	f7fc ff8a 	bl	80002c4 <__aeabi_d2uiz>
 80033b0:	0003      	movs	r3, r0
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	4a12      	ldr	r2, [pc, #72]	@ (8003400 <InitialisebqMaximo+0x20c>)
 80033b6:	4694      	mov	ip, r2
 80033b8:	4463      	add	r3, ip
 80033ba:	111b      	asrs	r3, r3, #4
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	4b08      	ldr	r3, [pc, #32]	@ (80033e0 <InitialisebqMaximo+0x1ec>)
 80033c0:	729a      	strb	r2, [r3, #10]

    WriteStatus |= ConfigureBqMaximo();
 80033c2:	f7ff fe7b 	bl	80030bc <ConfigureBqMaximo>
 80033c6:	0003      	movs	r3, r0
 80033c8:	0019      	movs	r1, r3
 80033ca:	1dfb      	adds	r3, r7, #7
 80033cc:	1dfa      	adds	r2, r7, #7
 80033ce:	7812      	ldrb	r2, [r2, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	701a      	strb	r2, [r3, #0]

    return WriteStatus;
 80033d4:	1dfb      	adds	r3, r7, #7
 80033d6:	781b      	ldrb	r3, [r3, #0]
}
 80033d8:	0018      	movs	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	b002      	add	sp, #8
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	200000a0 	.word	0x200000a0
 80033e4:	408f4000 	.word	0x408f4000
 80033e8:	2000011c 	.word	0x2000011c
 80033ec:	20000120 	.word	0x20000120
 80033f0:	000010cc 	.word	0x000010cc
 80033f4:	3fe00000 	.word	0x3fe00000
 80033f8:	ffffdff8 	.word	0xffffdff8
 80033fc:	000009c4 	.word	0x000009c4
 8003400:	fffff000 	.word	0xfffff000

08003404 <UpdateVoltageFromBqMaximo>:

HAL_StatusTypeDef UpdateVoltageFromBqMaximo()
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b08b      	sub	sp, #44	@ 0x2c
 8003408:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef ReadStatus = HAL_OK;
 800340a:	240f      	movs	r4, #15
 800340c:	193b      	adds	r3, r7, r4
 800340e:	2200      	movs	r2, #0
 8003410:	701a      	strb	r2, [r3, #0]
	int i = 0;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
	unsigned char *pRawADCData = NULL;
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
	unsigned int iTemp = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	60bb      	str	r3, [r7, #8]
	unsigned long lTemp = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	607b      	str	r3, [r7, #4]

	ReadStatus |= HAL_I2C_Mem_Read(&hi2c2, BQ76940_ADDR, VC1_HI_BYTE, 1, &(Registers.VCell1.VCell1Byte.VC1_HI), 33, HAL_MAX_DELAY);
 8003422:	4824      	ldr	r0, [pc, #144]	@ (80034b4 <UpdateVoltageFromBqMaximo+0xb0>)
 8003424:	2301      	movs	r3, #1
 8003426:	425b      	negs	r3, r3
 8003428:	9302      	str	r3, [sp, #8]
 800342a:	2321      	movs	r3, #33	@ 0x21
 800342c:	9301      	str	r3, [sp, #4]
 800342e:	4b22      	ldr	r3, [pc, #136]	@ (80034b8 <UpdateVoltageFromBqMaximo+0xb4>)
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	2301      	movs	r3, #1
 8003434:	220c      	movs	r2, #12
 8003436:	2110      	movs	r1, #16
 8003438:	f002 f9d8 	bl	80057ec <HAL_I2C_Mem_Read>
 800343c:	0003      	movs	r3, r0
 800343e:	0019      	movs	r1, r3
 8003440:	193b      	adds	r3, r7, r4
 8003442:	193a      	adds	r2, r7, r4
 8003444:	7812      	ldrb	r2, [r2, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	701a      	strb	r2, [r3, #0]

	pRawADCData = &Registers.VCell1.VCell1Byte.VC1_HI;
 800344a:	4b1b      	ldr	r3, [pc, #108]	@ (80034b8 <UpdateVoltageFromBqMaximo+0xb4>)
 800344c:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 15; i++)
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	e025      	b.n	80034a0 <UpdateVoltageFromBqMaximo+0x9c>
	{
		iTemp = (unsigned int)(*pRawADCData << 8) + *(pRawADCData + 1);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	3201      	adds	r2, #1
 800345e:	7812      	ldrb	r2, [r2, #0]
 8003460:	189b      	adds	r3, r3, r2
 8003462:	60bb      	str	r3, [r7, #8]
		lTemp = ((unsigned long)iTemp * iGain)/1000;
 8003464:	4b15      	ldr	r3, [pc, #84]	@ (80034bc <UpdateVoltageFromBqMaximo+0xb8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	001a      	movs	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	4353      	muls	r3, r2
 800346e:	22fa      	movs	r2, #250	@ 0xfa
 8003470:	0091      	lsls	r1, r2, #2
 8003472:	0018      	movs	r0, r3
 8003474:	f7fc fe48 	bl	8000108 <__udivsi3>
 8003478:	0003      	movs	r3, r0
 800347a:	607b      	str	r3, [r7, #4]
		lTemp += Registers.ADCOffset;
 800347c:	4b10      	ldr	r3, [pc, #64]	@ (80034c0 <UpdateVoltageFromBqMaximo+0xbc>)
 800347e:	2235      	movs	r2, #53	@ 0x35
 8003480:	5c9b      	ldrb	r3, [r3, r2]
 8003482:	001a      	movs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	189b      	adds	r3, r3, r2
 8003488:	607b      	str	r3, [r7, #4]
		CellVoltage[i] = lTemp;
 800348a:	4b0e      	ldr	r3, [pc, #56]	@ (80034c4 <UpdateVoltageFromBqMaximo+0xc0>)
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	0092      	lsls	r2, r2, #2
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	50d1      	str	r1, [r2, r3]
		pRawADCData += 2;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	3302      	adds	r3, #2
 8003498:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 15; i++)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	3301      	adds	r3, #1
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2b0e      	cmp	r3, #14
 80034a4:	ddd6      	ble.n	8003454 <UpdateVoltageFromBqMaximo+0x50>
	}

	return ReadStatus;
 80034a6:	230f      	movs	r3, #15
 80034a8:	18fb      	adds	r3, r7, r3
 80034aa:	781b      	ldrb	r3, [r3, #0]
}
 80034ac:	0018      	movs	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b007      	add	sp, #28
 80034b2:	bd90      	pop	{r4, r7, pc}
 80034b4:	200001ec 	.word	0x200001ec
 80034b8:	200000ac 	.word	0x200000ac
 80034bc:	20000120 	.word	0x20000120
 80034c0:	200000a0 	.word	0x200000a0
 80034c4:	200000e0 	.word	0x200000e0

080034c8 <UpdateTempertureFromBqMaximo>:

HAL_StatusTypeDef UpdateTempertureFromBqMaximo()
{
 80034c8:	b590      	push	{r4, r7, lr}
 80034ca:	b08b      	sub	sp, #44	@ 0x2c
 80034cc:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef ReadStatus = HAL_OK;
 80034ce:	240f      	movs	r4, #15
 80034d0:	193b      	adds	r3, r7, r4
 80034d2:	2200      	movs	r2, #0
 80034d4:	701a      	strb	r2, [r3, #0]
	int i = 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
	unsigned char *pRawADCData = NULL;
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
	unsigned int iTemp = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]
	unsigned long lTemp = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	607b      	str	r3, [r7, #4]

	ReadStatus |= HAL_I2C_Mem_Read(&hi2c2, BQ76940_ADDR, TS1_HI_ADDR, 1, &(Registers.TS1.TS1Byte), 6, HAL_MAX_DELAY);
 80034e6:	4824      	ldr	r0, [pc, #144]	@ (8003578 <UpdateTempertureFromBqMaximo+0xb0>)
 80034e8:	2301      	movs	r3, #1
 80034ea:	425b      	negs	r3, r3
 80034ec:	9302      	str	r3, [sp, #8]
 80034ee:	2306      	movs	r3, #6
 80034f0:	9301      	str	r3, [sp, #4]
 80034f2:	4b22      	ldr	r3, [pc, #136]	@ (800357c <UpdateTempertureFromBqMaximo+0xb4>)
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	2301      	movs	r3, #1
 80034f8:	222c      	movs	r2, #44	@ 0x2c
 80034fa:	2110      	movs	r1, #16
 80034fc:	f002 f976 	bl	80057ec <HAL_I2C_Mem_Read>
 8003500:	0003      	movs	r3, r0
 8003502:	0019      	movs	r1, r3
 8003504:	193b      	adds	r3, r7, r4
 8003506:	193a      	adds	r2, r7, r4
 8003508:	7812      	ldrb	r2, [r2, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	701a      	strb	r2, [r3, #0]

	pRawADCData = &Registers.TS1.TS1Byte.TS1_HI;
 800350e:	4b1b      	ldr	r3, [pc, #108]	@ (800357c <UpdateTempertureFromBqMaximo+0xb4>)
 8003510:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 3; i++)
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	e025      	b.n	8003564 <UpdateTempertureFromBqMaximo+0x9c>
	{
		iTemp = (unsigned int)(*pRawADCData << 8) + *(pRawADCData + 1);
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	021b      	lsls	r3, r3, #8
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	3201      	adds	r2, #1
 8003522:	7812      	ldrb	r2, [r2, #0]
 8003524:	189b      	adds	r3, r3, r2
 8003526:	60bb      	str	r3, [r7, #8]
		lTemp = ((unsigned long)iTemp * iGain)/1000;
 8003528:	4b15      	ldr	r3, [pc, #84]	@ (8003580 <UpdateTempertureFromBqMaximo+0xb8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	001a      	movs	r2, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	4353      	muls	r3, r2
 8003532:	22fa      	movs	r2, #250	@ 0xfa
 8003534:	0091      	lsls	r1, r2, #2
 8003536:	0018      	movs	r0, r3
 8003538:	f7fc fde6 	bl	8000108 <__udivsi3>
 800353c:	0003      	movs	r3, r0
 800353e:	607b      	str	r3, [r7, #4]
		lTemp += Registers.ADCOffset;
 8003540:	4b10      	ldr	r3, [pc, #64]	@ (8003584 <UpdateTempertureFromBqMaximo+0xbc>)
 8003542:	2235      	movs	r2, #53	@ 0x35
 8003544:	5c9b      	ldrb	r3, [r3, r2]
 8003546:	001a      	movs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	189b      	adds	r3, r3, r2
 800354c:	607b      	str	r3, [r7, #4]
		CellVoltage[i] = lTemp;
 800354e:	4b0e      	ldr	r3, [pc, #56]	@ (8003588 <UpdateTempertureFromBqMaximo+0xc0>)
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	0092      	lsls	r2, r2, #2
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	50d1      	str	r1, [r2, r3]
		pRawADCData += 2;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	3302      	adds	r3, #2
 800355c:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 3; i++)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	3301      	adds	r3, #1
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2b02      	cmp	r3, #2
 8003568:	ddd6      	ble.n	8003518 <UpdateTempertureFromBqMaximo+0x50>
	}

	return ReadStatus;
 800356a:	230f      	movs	r3, #15
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	781b      	ldrb	r3, [r3, #0]
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	b007      	add	sp, #28
 8003576:	bd90      	pop	{r4, r7, pc}
 8003578:	200001ec 	.word	0x200001ec
 800357c:	200000cc 	.word	0x200000cc
 8003580:	20000120 	.word	0x20000120
 8003584:	200000a0 	.word	0x200000a0
 8003588:	200000e0 	.word	0x200000e0

0800358c <ConvertTempToUint16>:

// ChatGPT is my homie
uint16_t ConvertTempToUint16(uint8_t msb, uint8_t lsb) {
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	0002      	movs	r2, r0
 8003594:	1dfb      	adds	r3, r7, #7
 8003596:	701a      	strb	r2, [r3, #0]
 8003598:	1dbb      	adds	r3, r7, #6
 800359a:	1c0a      	adds	r2, r1, #0
 800359c:	701a      	strb	r2, [r3, #0]
    uint16_t adc_code = ((uint16_t)msb << 8) | lsb;
 800359e:	1dfb      	adds	r3, r7, #7
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	b21b      	sxth	r3, r3
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	b21a      	sxth	r2, r3
 80035a8:	1dbb      	adds	r3, r7, #6
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	b21b      	sxth	r3, r3
 80035ae:	4313      	orrs	r3, r2
 80035b0:	b21a      	sxth	r2, r3
 80035b2:	2112      	movs	r1, #18
 80035b4:	187b      	adds	r3, r7, r1
 80035b6:	801a      	strh	r2, [r3, #0]
    float voltage = (adc_code / 32768.0f) * 1.8f;
 80035b8:	187b      	adds	r3, r7, r1
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	0018      	movs	r0, r3
 80035be:	f7fd fe3d 	bl	800123c <__aeabi_i2f>
 80035c2:	1c03      	adds	r3, r0, #0
 80035c4:	218e      	movs	r1, #142	@ 0x8e
 80035c6:	05c9      	lsls	r1, r1, #23
 80035c8:	1c18      	adds	r0, r3, #0
 80035ca:	f7fd f88b 	bl	80006e4 <__aeabi_fdiv>
 80035ce:	1c03      	adds	r3, r0, #0
 80035d0:	491a      	ldr	r1, [pc, #104]	@ (800363c <ConvertTempToUint16+0xb0>)
 80035d2:	1c18      	adds	r0, r3, #0
 80035d4:	f7fd fa54 	bl	8000a80 <__aeabi_fmul>
 80035d8:	1c03      	adds	r3, r0, #0
 80035da:	60fb      	str	r3, [r7, #12]
    float temp_celsius = (voltage - 0.5f) / 0.01f;
 80035dc:	21fc      	movs	r1, #252	@ 0xfc
 80035de:	0589      	lsls	r1, r1, #22
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f7fd fba7 	bl	8000d34 <__aeabi_fsub>
 80035e6:	1c03      	adds	r3, r0, #0
 80035e8:	4915      	ldr	r1, [pc, #84]	@ (8003640 <ConvertTempToUint16+0xb4>)
 80035ea:	1c18      	adds	r0, r3, #0
 80035ec:	f7fd f87a 	bl	80006e4 <__aeabi_fdiv>
 80035f0:	1c03      	adds	r3, r0, #0
 80035f2:	617b      	str	r3, [r7, #20]

    // Optional: clip range to safe max
    if (temp_celsius < 0) temp_celsius = 0;
 80035f4:	2100      	movs	r1, #0
 80035f6:	6978      	ldr	r0, [r7, #20]
 80035f8:	f7fc fe24 	bl	8000244 <__aeabi_fcmplt>
 80035fc:	1e03      	subs	r3, r0, #0
 80035fe:	d001      	beq.n	8003604 <ConvertTempToUint16+0x78>
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
    if (temp_celsius > 6553.5f) temp_celsius = 6553.5f;
 8003604:	490f      	ldr	r1, [pc, #60]	@ (8003644 <ConvertTempToUint16+0xb8>)
 8003606:	6978      	ldr	r0, [r7, #20]
 8003608:	f7fc fe30 	bl	800026c <__aeabi_fcmpgt>
 800360c:	1e03      	subs	r3, r0, #0
 800360e:	d001      	beq.n	8003614 <ConvertTempToUint16+0x88>
 8003610:	4b0c      	ldr	r3, [pc, #48]	@ (8003644 <ConvertTempToUint16+0xb8>)
 8003612:	617b      	str	r3, [r7, #20]

    // Multiply by 10 to store 0.1°C resolution
    return (uint16_t)(temp_celsius * 10.0f + 0.5f);  // rounded
 8003614:	490c      	ldr	r1, [pc, #48]	@ (8003648 <ConvertTempToUint16+0xbc>)
 8003616:	6978      	ldr	r0, [r7, #20]
 8003618:	f7fd fa32 	bl	8000a80 <__aeabi_fmul>
 800361c:	1c03      	adds	r3, r0, #0
 800361e:	21fc      	movs	r1, #252	@ 0xfc
 8003620:	0589      	lsls	r1, r1, #22
 8003622:	1c18      	adds	r0, r3, #0
 8003624:	f7fc fe6c 	bl	8000300 <__aeabi_fadd>
 8003628:	1c03      	adds	r3, r0, #0
 800362a:	1c18      	adds	r0, r3, #0
 800362c:	f7fc fe32 	bl	8000294 <__aeabi_f2uiz>
 8003630:	0003      	movs	r3, r0
 8003632:	b29b      	uxth	r3, r3
}
 8003634:	0018      	movs	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	b006      	add	sp, #24
 800363a:	bd80      	pop	{r7, pc}
 800363c:	3fe66666 	.word	0x3fe66666
 8003640:	3c23d70a 	.word	0x3c23d70a
 8003644:	45cccc00 	.word	0x45cccc00
 8003648:	41200000 	.word	0x41200000

0800364c <build_can_temps>:

void build_can_temps(){
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0

	CAN_Temps.Temp1 = ConvertTempToUint16(Registers.TS1.TS1Byte.TS1_HI , Registers.TS1.TS1Byte.TS1_LO);
 8003650:	4b16      	ldr	r3, [pc, #88]	@ (80036ac <build_can_temps+0x60>)
 8003652:	222c      	movs	r2, #44	@ 0x2c
 8003654:	5c9a      	ldrb	r2, [r3, r2]
 8003656:	4b15      	ldr	r3, [pc, #84]	@ (80036ac <build_can_temps+0x60>)
 8003658:	212d      	movs	r1, #45	@ 0x2d
 800365a:	5c5b      	ldrb	r3, [r3, r1]
 800365c:	0019      	movs	r1, r3
 800365e:	0010      	movs	r0, r2
 8003660:	f7ff ff94 	bl	800358c <ConvertTempToUint16>
 8003664:	0003      	movs	r3, r0
 8003666:	001a      	movs	r2, r3
 8003668:	4b11      	ldr	r3, [pc, #68]	@ (80036b0 <build_can_temps+0x64>)
 800366a:	801a      	strh	r2, [r3, #0]
	CAN_Temps.Temp2 = ConvertTempToUint16(Registers.TS2.TS2Byte.TS2_HI , Registers.TS2.TS2Byte.TS2_LO);
 800366c:	4b0f      	ldr	r3, [pc, #60]	@ (80036ac <build_can_temps+0x60>)
 800366e:	222e      	movs	r2, #46	@ 0x2e
 8003670:	5c9a      	ldrb	r2, [r3, r2]
 8003672:	4b0e      	ldr	r3, [pc, #56]	@ (80036ac <build_can_temps+0x60>)
 8003674:	212f      	movs	r1, #47	@ 0x2f
 8003676:	5c5b      	ldrb	r3, [r3, r1]
 8003678:	0019      	movs	r1, r3
 800367a:	0010      	movs	r0, r2
 800367c:	f7ff ff86 	bl	800358c <ConvertTempToUint16>
 8003680:	0003      	movs	r3, r0
 8003682:	001a      	movs	r2, r3
 8003684:	4b0a      	ldr	r3, [pc, #40]	@ (80036b0 <build_can_temps+0x64>)
 8003686:	805a      	strh	r2, [r3, #2]
	CAN_Temps.Temp3 = ConvertTempToUint16(Registers.TS3.TS3Byte.TS3_HI , Registers.TS3.TS3Byte.TS3_LO);
 8003688:	4b08      	ldr	r3, [pc, #32]	@ (80036ac <build_can_temps+0x60>)
 800368a:	2230      	movs	r2, #48	@ 0x30
 800368c:	5c9a      	ldrb	r2, [r3, r2]
 800368e:	4b07      	ldr	r3, [pc, #28]	@ (80036ac <build_can_temps+0x60>)
 8003690:	2131      	movs	r1, #49	@ 0x31
 8003692:	5c5b      	ldrb	r3, [r3, r1]
 8003694:	0019      	movs	r1, r3
 8003696:	0010      	movs	r0, r2
 8003698:	f7ff ff78 	bl	800358c <ConvertTempToUint16>
 800369c:	0003      	movs	r3, r0
 800369e:	001a      	movs	r2, r3
 80036a0:	4b03      	ldr	r3, [pc, #12]	@ (80036b0 <build_can_temps+0x64>)
 80036a2:	809a      	strh	r2, [r3, #4]

}
 80036a4:	46c0      	nop			@ (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	46c0      	nop			@ (mov r8, r8)
 80036ac:	200000a0 	.word	0x200000a0
 80036b0:	200000d8 	.word	0x200000d8

080036b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036b8:	f000 fcbe 	bl	8004038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036bc:	f000 f858 	bl	8003770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036c0:	f000 f9d0 	bl	8003a64 <MX_GPIO_Init>
  MX_ADC1_Init();
 80036c4:	f000 f89c 	bl	8003800 <MX_ADC1_Init>
  MX_I2C3_Init();
 80036c8:	f000 f98c 	bl	80039e4 <MX_I2C3_Init>
  MX_I2C2_Init();
 80036cc:	f000 f94a 	bl	8003964 <MX_I2C2_Init>
  MX_FDCAN2_Init();
 80036d0:	f000 f900 	bl	80038d4 <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80036d4:	f003 fe2e 	bl	8007334 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of reg_pull */
  reg_pullHandle = osSemaphoreNew(1, 1, &reg_pull_attributes);
 80036d8:	4b18      	ldr	r3, [pc, #96]	@ (800373c <main+0x88>)
 80036da:	001a      	movs	r2, r3
 80036dc:	2101      	movs	r1, #1
 80036de:	2001      	movs	r0, #1
 80036e0:	f003 ff22 	bl	8007528 <osSemaphoreNew>
 80036e4:	0002      	movs	r2, r0
 80036e6:	4b16      	ldr	r3, [pc, #88]	@ (8003740 <main+0x8c>)
 80036e8:	601a      	str	r2, [r3, #0]

  /* creation of can_push */
  can_pushHandle = osSemaphoreNew(1, 0, &can_push_attributes);
 80036ea:	4b16      	ldr	r3, [pc, #88]	@ (8003744 <main+0x90>)
 80036ec:	001a      	movs	r2, r3
 80036ee:	2100      	movs	r1, #0
 80036f0:	2001      	movs	r0, #1
 80036f2:	f003 ff19 	bl	8007528 <osSemaphoreNew>
 80036f6:	0002      	movs	r2, r0
 80036f8:	4b13      	ldr	r3, [pc, #76]	@ (8003748 <main+0x94>)
 80036fa:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80036fc:	4a13      	ldr	r2, [pc, #76]	@ (800374c <main+0x98>)
 80036fe:	4b14      	ldr	r3, [pc, #80]	@ (8003750 <main+0x9c>)
 8003700:	2100      	movs	r1, #0
 8003702:	0018      	movs	r0, r3
 8003704:	f003 fe5e 	bl	80073c4 <osThreadNew>
 8003708:	0002      	movs	r2, r0
 800370a:	4b12      	ldr	r3, [pc, #72]	@ (8003754 <main+0xa0>)
 800370c:	601a      	str	r2, [r3, #0]

  /* creation of BatteryManager */
  BatteryManagerHandle = osThreadNew(Cell_Motoring_Task, NULL, &BatteryManager_attributes);
 800370e:	4a12      	ldr	r2, [pc, #72]	@ (8003758 <main+0xa4>)
 8003710:	4b12      	ldr	r3, [pc, #72]	@ (800375c <main+0xa8>)
 8003712:	2100      	movs	r1, #0
 8003714:	0018      	movs	r0, r3
 8003716:	f003 fe55 	bl	80073c4 <osThreadNew>
 800371a:	0002      	movs	r2, r0
 800371c:	4b10      	ldr	r3, [pc, #64]	@ (8003760 <main+0xac>)
 800371e:	601a      	str	r2, [r3, #0]

  /* creation of CAN_Send */
  CAN_SendHandle = osThreadNew(can_send_Task, NULL, &CAN_Send_attributes);
 8003720:	4a10      	ldr	r2, [pc, #64]	@ (8003764 <main+0xb0>)
 8003722:	4b11      	ldr	r3, [pc, #68]	@ (8003768 <main+0xb4>)
 8003724:	2100      	movs	r1, #0
 8003726:	0018      	movs	r0, r3
 8003728:	f003 fe4c 	bl	80073c4 <osThreadNew>
 800372c:	0002      	movs	r2, r0
 800372e:	4b0f      	ldr	r3, [pc, #60]	@ (800376c <main+0xb8>)
 8003730:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003732:	f003 fe21 	bl	8007378 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003736:	46c0      	nop			@ (mov r8, r8)
 8003738:	e7fd      	b.n	8003736 <main+0x82>
 800373a:	46c0      	nop			@ (mov r8, r8)
 800373c:	08009eb0 	.word	0x08009eb0
 8003740:	200002a0 	.word	0x200002a0
 8003744:	08009ec0 	.word	0x08009ec0
 8003748:	200002a4 	.word	0x200002a4
 800374c:	08009e44 	.word	0x08009e44
 8003750:	08003cb1 	.word	0x08003cb1
 8003754:	20000294 	.word	0x20000294
 8003758:	08009e68 	.word	0x08009e68
 800375c:	08002f49 	.word	0x08002f49
 8003760:	20000298 	.word	0x20000298
 8003764:	08009e8c 	.word	0x08009e8c
 8003768:	08002e9d 	.word	0x08002e9d
 800376c:	2000029c 	.word	0x2000029c

08003770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b095      	sub	sp, #84	@ 0x54
 8003774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003776:	2414      	movs	r4, #20
 8003778:	193b      	adds	r3, r7, r4
 800377a:	0018      	movs	r0, r3
 800377c:	233c      	movs	r3, #60	@ 0x3c
 800377e:	001a      	movs	r2, r3
 8003780:	2100      	movs	r1, #0
 8003782:	f006 f9cd 	bl	8009b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003786:	1d3b      	adds	r3, r7, #4
 8003788:	0018      	movs	r0, r3
 800378a:	2310      	movs	r3, #16
 800378c:	001a      	movs	r2, r3
 800378e:	2100      	movs	r1, #0
 8003790:	f006 f9c6 	bl	8009b20 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003794:	2380      	movs	r3, #128	@ 0x80
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	0018      	movs	r0, r3
 800379a:	f002 fdeb 	bl	8006374 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800379e:	193b      	adds	r3, r7, r4
 80037a0:	2202      	movs	r2, #2
 80037a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037a4:	193b      	adds	r3, r7, r4
 80037a6:	2280      	movs	r2, #128	@ 0x80
 80037a8:	0052      	lsls	r2, r2, #1
 80037aa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80037ac:	193b      	adds	r3, r7, r4
 80037ae:	2200      	movs	r2, #0
 80037b0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037b2:	193b      	adds	r3, r7, r4
 80037b4:	2240      	movs	r2, #64	@ 0x40
 80037b6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80037b8:	193b      	adds	r3, r7, r4
 80037ba:	2200      	movs	r2, #0
 80037bc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037be:	193b      	adds	r3, r7, r4
 80037c0:	0018      	movs	r0, r3
 80037c2:	f002 fe17 	bl	80063f4 <HAL_RCC_OscConfig>
 80037c6:	1e03      	subs	r3, r0, #0
 80037c8:	d001      	beq.n	80037ce <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80037ca:	f000 fa79 	bl	8003cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037ce:	1d3b      	adds	r3, r7, #4
 80037d0:	2207      	movs	r2, #7
 80037d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80037d4:	1d3b      	adds	r3, r7, #4
 80037d6:	2200      	movs	r2, #0
 80037d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037da:	1d3b      	adds	r3, r7, #4
 80037dc:	2200      	movs	r2, #0
 80037de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037e0:	1d3b      	adds	r3, r7, #4
 80037e2:	2200      	movs	r2, #0
 80037e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80037e6:	1d3b      	adds	r3, r7, #4
 80037e8:	2100      	movs	r1, #0
 80037ea:	0018      	movs	r0, r3
 80037ec:	f003 f962 	bl	8006ab4 <HAL_RCC_ClockConfig>
 80037f0:	1e03      	subs	r3, r0, #0
 80037f2:	d001      	beq.n	80037f8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80037f4:	f000 fa64 	bl	8003cc0 <Error_Handler>
  }
}
 80037f8:	46c0      	nop			@ (mov r8, r8)
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b015      	add	sp, #84	@ 0x54
 80037fe:	bd90      	pop	{r4, r7, pc}

08003800 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003806:	1d3b      	adds	r3, r7, #4
 8003808:	0018      	movs	r0, r3
 800380a:	230c      	movs	r3, #12
 800380c:	001a      	movs	r2, r3
 800380e:	2100      	movs	r1, #0
 8003810:	f006 f986 	bl	8009b20 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003814:	4b2d      	ldr	r3, [pc, #180]	@ (80038cc <MX_ADC1_Init+0xcc>)
 8003816:	4a2e      	ldr	r2, [pc, #184]	@ (80038d0 <MX_ADC1_Init+0xd0>)
 8003818:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800381a:	4b2c      	ldr	r3, [pc, #176]	@ (80038cc <MX_ADC1_Init+0xcc>)
 800381c:	2280      	movs	r2, #128	@ 0x80
 800381e:	05d2      	lsls	r2, r2, #23
 8003820:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003822:	4b2a      	ldr	r3, [pc, #168]	@ (80038cc <MX_ADC1_Init+0xcc>)
 8003824:	2200      	movs	r2, #0
 8003826:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003828:	4b28      	ldr	r3, [pc, #160]	@ (80038cc <MX_ADC1_Init+0xcc>)
 800382a:	2200      	movs	r2, #0
 800382c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800382e:	4b27      	ldr	r3, [pc, #156]	@ (80038cc <MX_ADC1_Init+0xcc>)
 8003830:	2200      	movs	r2, #0
 8003832:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003834:	4b25      	ldr	r3, [pc, #148]	@ (80038cc <MX_ADC1_Init+0xcc>)
 8003836:	2204      	movs	r2, #4
 8003838:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800383a:	4b24      	ldr	r3, [pc, #144]	@ (80038cc <MX_ADC1_Init+0xcc>)
 800383c:	2200      	movs	r2, #0
 800383e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003840:	4b22      	ldr	r3, [pc, #136]	@ (80038cc <MX_ADC1_Init+0xcc>)
 8003842:	2200      	movs	r2, #0
 8003844:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003846:	4b21      	ldr	r3, [pc, #132]	@ (80038cc <MX_ADC1_Init+0xcc>)
 8003848:	2200      	movs	r2, #0
 800384a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800384c:	4b1f      	ldr	r3, [pc, #124]	@ (80038cc <MX_ADC1_Init+0xcc>)
 800384e:	2201      	movs	r2, #1
 8003850:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003852:	4b1e      	ldr	r3, [pc, #120]	@ (80038cc <MX_ADC1_Init+0xcc>)
 8003854:	2220      	movs	r2, #32
 8003856:	2100      	movs	r1, #0
 8003858:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800385a:	4b1c      	ldr	r3, [pc, #112]	@ (80038cc <MX_ADC1_Init+0xcc>)
 800385c:	2200      	movs	r2, #0
 800385e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003860:	4b1a      	ldr	r3, [pc, #104]	@ (80038cc <MX_ADC1_Init+0xcc>)
 8003862:	2200      	movs	r2, #0
 8003864:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003866:	4b19      	ldr	r3, [pc, #100]	@ (80038cc <MX_ADC1_Init+0xcc>)
 8003868:	222c      	movs	r2, #44	@ 0x2c
 800386a:	2100      	movs	r1, #0
 800386c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800386e:	4b17      	ldr	r3, [pc, #92]	@ (80038cc <MX_ADC1_Init+0xcc>)
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003874:	4b15      	ldr	r3, [pc, #84]	@ (80038cc <MX_ADC1_Init+0xcc>)
 8003876:	2200      	movs	r2, #0
 8003878:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800387a:	4b14      	ldr	r3, [pc, #80]	@ (80038cc <MX_ADC1_Init+0xcc>)
 800387c:	2200      	movs	r2, #0
 800387e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003880:	4b12      	ldr	r3, [pc, #72]	@ (80038cc <MX_ADC1_Init+0xcc>)
 8003882:	223c      	movs	r2, #60	@ 0x3c
 8003884:	2100      	movs	r1, #0
 8003886:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003888:	4b10      	ldr	r3, [pc, #64]	@ (80038cc <MX_ADC1_Init+0xcc>)
 800388a:	2200      	movs	r2, #0
 800388c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800388e:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <MX_ADC1_Init+0xcc>)
 8003890:	0018      	movs	r0, r3
 8003892:	f000 fd6b 	bl	800436c <HAL_ADC_Init>
 8003896:	1e03      	subs	r3, r0, #0
 8003898:	d001      	beq.n	800389e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800389a:	f000 fa11 	bl	8003cc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800389e:	1d3b      	adds	r3, r7, #4
 80038a0:	2201      	movs	r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80038a4:	1d3b      	adds	r3, r7, #4
 80038a6:	2200      	movs	r2, #0
 80038a8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80038aa:	1d3b      	adds	r3, r7, #4
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038b0:	1d3a      	adds	r2, r7, #4
 80038b2:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <MX_ADC1_Init+0xcc>)
 80038b4:	0011      	movs	r1, r2
 80038b6:	0018      	movs	r0, r3
 80038b8:	f000 ff00 	bl	80046bc <HAL_ADC_ConfigChannel>
 80038bc:	1e03      	subs	r3, r0, #0
 80038be:	d001      	beq.n	80038c4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80038c0:	f000 f9fe 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80038c4:	46c0      	nop			@ (mov r8, r8)
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b004      	add	sp, #16
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20000124 	.word	0x20000124
 80038d0:	40012400 	.word	0x40012400

080038d4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80038d8:	4b20      	ldr	r3, [pc, #128]	@ (800395c <MX_FDCAN2_Init+0x88>)
 80038da:	4a21      	ldr	r2, [pc, #132]	@ (8003960 <MX_FDCAN2_Init+0x8c>)
 80038dc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80038de:	4b1f      	ldr	r3, [pc, #124]	@ (800395c <MX_FDCAN2_Init+0x88>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80038e4:	4b1d      	ldr	r3, [pc, #116]	@ (800395c <MX_FDCAN2_Init+0x88>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80038ea:	4b1c      	ldr	r3, [pc, #112]	@ (800395c <MX_FDCAN2_Init+0x88>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80038f0:	4b1a      	ldr	r3, [pc, #104]	@ (800395c <MX_FDCAN2_Init+0x88>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = ENABLE;
 80038f6:	4b19      	ldr	r3, [pc, #100]	@ (800395c <MX_FDCAN2_Init+0x88>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80038fc:	4b17      	ldr	r3, [pc, #92]	@ (800395c <MX_FDCAN2_Init+0x88>)
 80038fe:	2200      	movs	r2, #0
 8003900:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8003902:	4b16      	ldr	r3, [pc, #88]	@ (800395c <MX_FDCAN2_Init+0x88>)
 8003904:	2210      	movs	r2, #16
 8003906:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8003908:	4b14      	ldr	r3, [pc, #80]	@ (800395c <MX_FDCAN2_Init+0x88>)
 800390a:	2201      	movs	r2, #1
 800390c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800390e:	4b13      	ldr	r3, [pc, #76]	@ (800395c <MX_FDCAN2_Init+0x88>)
 8003910:	2202      	movs	r2, #2
 8003912:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 8003914:	4b11      	ldr	r3, [pc, #68]	@ (800395c <MX_FDCAN2_Init+0x88>)
 8003916:	2201      	movs	r2, #1
 8003918:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800391a:	4b10      	ldr	r3, [pc, #64]	@ (800395c <MX_FDCAN2_Init+0x88>)
 800391c:	2201      	movs	r2, #1
 800391e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8003920:	4b0e      	ldr	r3, [pc, #56]	@ (800395c <MX_FDCAN2_Init+0x88>)
 8003922:	2201      	movs	r2, #1
 8003924:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8003926:	4b0d      	ldr	r3, [pc, #52]	@ (800395c <MX_FDCAN2_Init+0x88>)
 8003928:	2201      	movs	r2, #1
 800392a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800392c:	4b0b      	ldr	r3, [pc, #44]	@ (800395c <MX_FDCAN2_Init+0x88>)
 800392e:	2201      	movs	r2, #1
 8003930:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8003932:	4b0a      	ldr	r3, [pc, #40]	@ (800395c <MX_FDCAN2_Init+0x88>)
 8003934:	2200      	movs	r2, #0
 8003936:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8003938:	4b08      	ldr	r3, [pc, #32]	@ (800395c <MX_FDCAN2_Init+0x88>)
 800393a:	2200      	movs	r2, #0
 800393c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800393e:	4b07      	ldr	r3, [pc, #28]	@ (800395c <MX_FDCAN2_Init+0x88>)
 8003940:	2200      	movs	r2, #0
 8003942:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8003944:	4b05      	ldr	r3, [pc, #20]	@ (800395c <MX_FDCAN2_Init+0x88>)
 8003946:	0018      	movs	r0, r3
 8003948:	f001 f944 	bl	8004bd4 <HAL_FDCAN_Init>
 800394c:	1e03      	subs	r3, r0, #0
 800394e:	d001      	beq.n	8003954 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8003950:	f000 f9b6 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8003954:	46c0      	nop			@ (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			@ (mov r8, r8)
 800395c:	20000188 	.word	0x20000188
 8003960:	40006800 	.word	0x40006800

08003964 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003968:	4b1b      	ldr	r3, [pc, #108]	@ (80039d8 <MX_I2C2_Init+0x74>)
 800396a:	4a1c      	ldr	r2, [pc, #112]	@ (80039dc <MX_I2C2_Init+0x78>)
 800396c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800396e:	4b1a      	ldr	r3, [pc, #104]	@ (80039d8 <MX_I2C2_Init+0x74>)
 8003970:	4a1b      	ldr	r2, [pc, #108]	@ (80039e0 <MX_I2C2_Init+0x7c>)
 8003972:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003974:	4b18      	ldr	r3, [pc, #96]	@ (80039d8 <MX_I2C2_Init+0x74>)
 8003976:	2200      	movs	r2, #0
 8003978:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800397a:	4b17      	ldr	r3, [pc, #92]	@ (80039d8 <MX_I2C2_Init+0x74>)
 800397c:	2201      	movs	r2, #1
 800397e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003980:	4b15      	ldr	r3, [pc, #84]	@ (80039d8 <MX_I2C2_Init+0x74>)
 8003982:	2200      	movs	r2, #0
 8003984:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003986:	4b14      	ldr	r3, [pc, #80]	@ (80039d8 <MX_I2C2_Init+0x74>)
 8003988:	2200      	movs	r2, #0
 800398a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800398c:	4b12      	ldr	r3, [pc, #72]	@ (80039d8 <MX_I2C2_Init+0x74>)
 800398e:	2200      	movs	r2, #0
 8003990:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003992:	4b11      	ldr	r3, [pc, #68]	@ (80039d8 <MX_I2C2_Init+0x74>)
 8003994:	2200      	movs	r2, #0
 8003996:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003998:	4b0f      	ldr	r3, [pc, #60]	@ (80039d8 <MX_I2C2_Init+0x74>)
 800399a:	2200      	movs	r2, #0
 800399c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800399e:	4b0e      	ldr	r3, [pc, #56]	@ (80039d8 <MX_I2C2_Init+0x74>)
 80039a0:	0018      	movs	r0, r3
 80039a2:	f001 fd4f 	bl	8005444 <HAL_I2C_Init>
 80039a6:	1e03      	subs	r3, r0, #0
 80039a8:	d001      	beq.n	80039ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80039aa:	f000 f989 	bl	8003cc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80039ae:	4b0a      	ldr	r3, [pc, #40]	@ (80039d8 <MX_I2C2_Init+0x74>)
 80039b0:	2100      	movs	r1, #0
 80039b2:	0018      	movs	r0, r3
 80039b4:	f002 fc46 	bl	8006244 <HAL_I2CEx_ConfigAnalogFilter>
 80039b8:	1e03      	subs	r3, r0, #0
 80039ba:	d001      	beq.n	80039c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80039bc:	f000 f980 	bl	8003cc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80039c0:	4b05      	ldr	r3, [pc, #20]	@ (80039d8 <MX_I2C2_Init+0x74>)
 80039c2:	2100      	movs	r1, #0
 80039c4:	0018      	movs	r0, r3
 80039c6:	f002 fc89 	bl	80062dc <HAL_I2CEx_ConfigDigitalFilter>
 80039ca:	1e03      	subs	r3, r0, #0
 80039cc:	d001      	beq.n	80039d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80039ce:	f000 f977 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	200001ec 	.word	0x200001ec
 80039dc:	40005800 	.word	0x40005800
 80039e0:	00503d58 	.word	0x00503d58

080039e4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80039e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a58 <MX_I2C3_Init+0x74>)
 80039ea:	4a1c      	ldr	r2, [pc, #112]	@ (8003a5c <MX_I2C3_Init+0x78>)
 80039ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 80039ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003a58 <MX_I2C3_Init+0x74>)
 80039f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003a60 <MX_I2C3_Init+0x7c>)
 80039f2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80039f4:	4b18      	ldr	r3, [pc, #96]	@ (8003a58 <MX_I2C3_Init+0x74>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039fa:	4b17      	ldr	r3, [pc, #92]	@ (8003a58 <MX_I2C3_Init+0x74>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a00:	4b15      	ldr	r3, [pc, #84]	@ (8003a58 <MX_I2C3_Init+0x74>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003a06:	4b14      	ldr	r3, [pc, #80]	@ (8003a58 <MX_I2C3_Init+0x74>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a0c:	4b12      	ldr	r3, [pc, #72]	@ (8003a58 <MX_I2C3_Init+0x74>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a12:	4b11      	ldr	r3, [pc, #68]	@ (8003a58 <MX_I2C3_Init+0x74>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a18:	4b0f      	ldr	r3, [pc, #60]	@ (8003a58 <MX_I2C3_Init+0x74>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a58 <MX_I2C3_Init+0x74>)
 8003a20:	0018      	movs	r0, r3
 8003a22:	f001 fd0f 	bl	8005444 <HAL_I2C_Init>
 8003a26:	1e03      	subs	r3, r0, #0
 8003a28:	d001      	beq.n	8003a2e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003a2a:	f000 f949 	bl	8003cc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a58 <MX_I2C3_Init+0x74>)
 8003a30:	2100      	movs	r1, #0
 8003a32:	0018      	movs	r0, r3
 8003a34:	f002 fc06 	bl	8006244 <HAL_I2CEx_ConfigAnalogFilter>
 8003a38:	1e03      	subs	r3, r0, #0
 8003a3a:	d001      	beq.n	8003a40 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003a3c:	f000 f940 	bl	8003cc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003a40:	4b05      	ldr	r3, [pc, #20]	@ (8003a58 <MX_I2C3_Init+0x74>)
 8003a42:	2100      	movs	r1, #0
 8003a44:	0018      	movs	r0, r3
 8003a46:	f002 fc49 	bl	80062dc <HAL_I2CEx_ConfigDigitalFilter>
 8003a4a:	1e03      	subs	r3, r0, #0
 8003a4c:	d001      	beq.n	8003a52 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8003a4e:	f000 f937 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000240 	.word	0x20000240
 8003a5c:	40008800 	.word	0x40008800
 8003a60:	00503d58 	.word	0x00503d58

08003a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a64:	b590      	push	{r4, r7, lr}
 8003a66:	b08b      	sub	sp, #44	@ 0x2c
 8003a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a6a:	2414      	movs	r4, #20
 8003a6c:	193b      	adds	r3, r7, r4
 8003a6e:	0018      	movs	r0, r3
 8003a70:	2314      	movs	r3, #20
 8003a72:	001a      	movs	r2, r3
 8003a74:	2100      	movs	r1, #0
 8003a76:	f006 f853 	bl	8009b20 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a7a:	4b85      	ldr	r3, [pc, #532]	@ (8003c90 <MX_GPIO_Init+0x22c>)
 8003a7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a7e:	4b84      	ldr	r3, [pc, #528]	@ (8003c90 <MX_GPIO_Init+0x22c>)
 8003a80:	2104      	movs	r1, #4
 8003a82:	430a      	orrs	r2, r1
 8003a84:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a86:	4b82      	ldr	r3, [pc, #520]	@ (8003c90 <MX_GPIO_Init+0x22c>)
 8003a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a92:	4b7f      	ldr	r3, [pc, #508]	@ (8003c90 <MX_GPIO_Init+0x22c>)
 8003a94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a96:	4b7e      	ldr	r3, [pc, #504]	@ (8003c90 <MX_GPIO_Init+0x22c>)
 8003a98:	2120      	movs	r1, #32
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a9e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c90 <MX_GPIO_Init+0x22c>)
 8003aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aaa:	4b79      	ldr	r3, [pc, #484]	@ (8003c90 <MX_GPIO_Init+0x22c>)
 8003aac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aae:	4b78      	ldr	r3, [pc, #480]	@ (8003c90 <MX_GPIO_Init+0x22c>)
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ab6:	4b76      	ldr	r3, [pc, #472]	@ (8003c90 <MX_GPIO_Init+0x22c>)
 8003ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aba:	2201      	movs	r2, #1
 8003abc:	4013      	ands	r3, r2
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac2:	4b73      	ldr	r3, [pc, #460]	@ (8003c90 <MX_GPIO_Init+0x22c>)
 8003ac4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ac6:	4b72      	ldr	r3, [pc, #456]	@ (8003c90 <MX_GPIO_Init+0x22c>)
 8003ac8:	2102      	movs	r1, #2
 8003aca:	430a      	orrs	r2, r1
 8003acc:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ace:	4b70      	ldr	r3, [pc, #448]	@ (8003c90 <MX_GPIO_Init+0x22c>)
 8003ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	607b      	str	r3, [r7, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BalanceEnableCell0_Pin|BalanceEnableCell1_Pin|BMS_BOOT_Pin, GPIO_PIN_RESET);
 8003ada:	496e      	ldr	r1, [pc, #440]	@ (8003c94 <MX_GPIO_Init+0x230>)
 8003adc:	4b6e      	ldr	r3, [pc, #440]	@ (8003c98 <MX_GPIO_Init+0x234>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f001 fc77 	bl	80053d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BalanceEnableCell2_Pin|BalanceEnableCell3_Pin|BalanceEnableCell4_Pin|BalanceEnableCell5_Pin
 8003ae6:	496d      	ldr	r1, [pc, #436]	@ (8003c9c <MX_GPIO_Init+0x238>)
 8003ae8:	23a0      	movs	r3, #160	@ 0xa0
 8003aea:	05db      	lsls	r3, r3, #23
 8003aec:	2200      	movs	r2, #0
 8003aee:	0018      	movs	r0, r3
 8003af0:	f001 fc70 	bl	80053d4 <HAL_GPIO_WritePin>
                          |BalanceEnableCell6_Pin|BalanceEnableCell7_Pin|BalanceEnableCell10_Pin|BalanceEnableCell11_Pin
                          |BalanceEnableCell12_Pin|BalanceEnableCell13_Pin|BalanceEnableCell14_Pin|YELLOW_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BalanceEnableCell8_Pin|BalanceEnableCell9_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8003af4:	496a      	ldr	r1, [pc, #424]	@ (8003ca0 <MX_GPIO_Init+0x23c>)
 8003af6:	4b6b      	ldr	r3, [pc, #428]	@ (8003ca4 <MX_GPIO_Init+0x240>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	0018      	movs	r0, r3
 8003afc:	f001 fc6a 	bl	80053d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BalanceEnableCell0_Pin BalanceEnableCell1_Pin */
  GPIO_InitStruct.Pin = BalanceEnableCell0_Pin|BalanceEnableCell1_Pin;
 8003b00:	193b      	adds	r3, r7, r4
 8003b02:	22c0      	movs	r2, #192	@ 0xc0
 8003b04:	0212      	lsls	r2, r2, #8
 8003b06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b08:	193b      	adds	r3, r7, r4
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b0e:	193b      	adds	r3, r7, r4
 8003b10:	2201      	movs	r2, #1
 8003b12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b14:	193b      	adds	r3, r7, r4
 8003b16:	2200      	movs	r2, #0
 8003b18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b1a:	193b      	adds	r3, r7, r4
 8003b1c:	4a5e      	ldr	r2, [pc, #376]	@ (8003c98 <MX_GPIO_Init+0x234>)
 8003b1e:	0019      	movs	r1, r3
 8003b20:	0010      	movs	r0, r2
 8003b22:	f001 faeb 	bl	80050fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003b26:	193b      	adds	r3, r7, r4
 8003b28:	2202      	movs	r2, #2
 8003b2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2c:	193b      	adds	r3, r7, r4
 8003b2e:	2202      	movs	r2, #2
 8003b30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b32:	193b      	adds	r3, r7, r4
 8003b34:	2200      	movs	r2, #0
 8003b36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b38:	193b      	adds	r3, r7, r4
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_OSC;
 8003b3e:	193b      	adds	r3, r7, r4
 8003b40:	2200      	movs	r2, #0
 8003b42:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b44:	193b      	adds	r3, r7, r4
 8003b46:	4a58      	ldr	r2, [pc, #352]	@ (8003ca8 <MX_GPIO_Init+0x244>)
 8003b48:	0019      	movs	r1, r3
 8003b4a:	0010      	movs	r0, r2
 8003b4c:	f001 fad6 	bl	80050fc <HAL_GPIO_Init>

  /*Configure GPIO pins : BalanceEnableCell2_Pin BalanceEnableCell3_Pin BalanceEnableCell4_Pin BalanceEnableCell5_Pin
                           BalanceEnableCell6_Pin BalanceEnableCell7_Pin BalanceEnableCell10_Pin BalanceEnableCell11_Pin
                           BalanceEnableCell13_Pin YELLOW_LED_Pin */
  GPIO_InitStruct.Pin = BalanceEnableCell2_Pin|BalanceEnableCell3_Pin|BalanceEnableCell4_Pin|BalanceEnableCell5_Pin
 8003b50:	193b      	adds	r3, r7, r4
 8003b52:	4a56      	ldr	r2, [pc, #344]	@ (8003cac <MX_GPIO_Init+0x248>)
 8003b54:	601a      	str	r2, [r3, #0]
                          |BalanceEnableCell6_Pin|BalanceEnableCell7_Pin|BalanceEnableCell10_Pin|BalanceEnableCell11_Pin
                          |BalanceEnableCell13_Pin|YELLOW_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b56:	193b      	adds	r3, r7, r4
 8003b58:	2201      	movs	r2, #1
 8003b5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b5c:	193b      	adds	r3, r7, r4
 8003b5e:	2201      	movs	r2, #1
 8003b60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b62:	193b      	adds	r3, r7, r4
 8003b64:	2200      	movs	r2, #0
 8003b66:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b68:	193a      	adds	r2, r7, r4
 8003b6a:	23a0      	movs	r3, #160	@ 0xa0
 8003b6c:	05db      	lsls	r3, r3, #23
 8003b6e:	0011      	movs	r1, r2
 8003b70:	0018      	movs	r0, r3
 8003b72:	f001 fac3 	bl	80050fc <HAL_GPIO_Init>

  /*Configure GPIO pins : BalanceEnableCell8_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = BalanceEnableCell8_Pin|RED_LED_Pin;
 8003b76:	193b      	adds	r3, r7, r4
 8003b78:	2224      	movs	r2, #36	@ 0x24
 8003b7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b7c:	193b      	adds	r3, r7, r4
 8003b7e:	2201      	movs	r2, #1
 8003b80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b82:	193b      	adds	r3, r7, r4
 8003b84:	2201      	movs	r2, #1
 8003b86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b88:	193b      	adds	r3, r7, r4
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b8e:	193b      	adds	r3, r7, r4
 8003b90:	4a44      	ldr	r2, [pc, #272]	@ (8003ca4 <MX_GPIO_Init+0x240>)
 8003b92:	0019      	movs	r1, r3
 8003b94:	0010      	movs	r0, r2
 8003b96:	f001 fab1 	bl	80050fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003b9a:	0021      	movs	r1, r4
 8003b9c:	187b      	adds	r3, r7, r1
 8003b9e:	22c0      	movs	r2, #192	@ 0xc0
 8003ba0:	0112      	lsls	r2, r2, #4
 8003ba2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba4:	000c      	movs	r4, r1
 8003ba6:	193b      	adds	r3, r7, r4
 8003ba8:	2202      	movs	r2, #2
 8003baa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bac:	193b      	adds	r3, r7, r4
 8003bae:	2200      	movs	r2, #0
 8003bb0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb2:	193b      	adds	r3, r7, r4
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003bb8:	193b      	adds	r3, r7, r4
 8003bba:	2204      	movs	r2, #4
 8003bbc:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bbe:	193b      	adds	r3, r7, r4
 8003bc0:	4a38      	ldr	r2, [pc, #224]	@ (8003ca4 <MX_GPIO_Init+0x240>)
 8003bc2:	0019      	movs	r1, r3
 8003bc4:	0010      	movs	r0, r2
 8003bc6:	f001 fa99 	bl	80050fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BalanceEnableCell9_Pin */
  GPIO_InitStruct.Pin = BalanceEnableCell9_Pin;
 8003bca:	0021      	movs	r1, r4
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	2280      	movs	r2, #128	@ 0x80
 8003bd0:	0152      	lsls	r2, r2, #5
 8003bd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bd4:	000c      	movs	r4, r1
 8003bd6:	193b      	adds	r3, r7, r4
 8003bd8:	2201      	movs	r2, #1
 8003bda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bdc:	193b      	adds	r3, r7, r4
 8003bde:	2200      	movs	r2, #0
 8003be0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be2:	193b      	adds	r3, r7, r4
 8003be4:	2200      	movs	r2, #0
 8003be6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BalanceEnableCell9_GPIO_Port, &GPIO_InitStruct);
 8003be8:	193b      	adds	r3, r7, r4
 8003bea:	4a2e      	ldr	r2, [pc, #184]	@ (8003ca4 <MX_GPIO_Init+0x240>)
 8003bec:	0019      	movs	r1, r3
 8003bee:	0010      	movs	r0, r2
 8003bf0:	f001 fa84 	bl	80050fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_ALERT_Pin */
  GPIO_InitStruct.Pin = BMS_ALERT_Pin;
 8003bf4:	0021      	movs	r1, r4
 8003bf6:	187b      	adds	r3, r7, r1
 8003bf8:	2280      	movs	r2, #128	@ 0x80
 8003bfa:	0212      	lsls	r2, r2, #8
 8003bfc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bfe:	000c      	movs	r4, r1
 8003c00:	193b      	adds	r3, r7, r4
 8003c02:	2200      	movs	r2, #0
 8003c04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c06:	193b      	adds	r3, r7, r4
 8003c08:	2202      	movs	r2, #2
 8003c0a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BMS_ALERT_GPIO_Port, &GPIO_InitStruct);
 8003c0c:	193b      	adds	r3, r7, r4
 8003c0e:	4a25      	ldr	r2, [pc, #148]	@ (8003ca4 <MX_GPIO_Init+0x240>)
 8003c10:	0019      	movs	r1, r3
 8003c12:	0010      	movs	r0, r2
 8003c14:	f001 fa72 	bl	80050fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_BOOT_Pin */
  GPIO_InitStruct.Pin = BMS_BOOT_Pin;
 8003c18:	193b      	adds	r3, r7, r4
 8003c1a:	2240      	movs	r2, #64	@ 0x40
 8003c1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c1e:	193b      	adds	r3, r7, r4
 8003c20:	2201      	movs	r2, #1
 8003c22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c24:	193b      	adds	r3, r7, r4
 8003c26:	2200      	movs	r2, #0
 8003c28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c2a:	193b      	adds	r3, r7, r4
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BMS_BOOT_GPIO_Port, &GPIO_InitStruct);
 8003c30:	193b      	adds	r3, r7, r4
 8003c32:	4a19      	ldr	r2, [pc, #100]	@ (8003c98 <MX_GPIO_Init+0x234>)
 8003c34:	0019      	movs	r1, r3
 8003c36:	0010      	movs	r0, r2
 8003c38:	f001 fa60 	bl	80050fc <HAL_GPIO_Init>

  /*Configure GPIO pins : BalanceEnableCell12_Pin BalanceEnableCell14_Pin */
  GPIO_InitStruct.Pin = BalanceEnableCell12_Pin|BalanceEnableCell14_Pin;
 8003c3c:	0021      	movs	r1, r4
 8003c3e:	187b      	adds	r3, r7, r1
 8003c40:	22a0      	movs	r2, #160	@ 0xa0
 8003c42:	0152      	lsls	r2, r2, #5
 8003c44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c46:	000c      	movs	r4, r1
 8003c48:	193b      	adds	r3, r7, r4
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4e:	193b      	adds	r3, r7, r4
 8003c50:	2200      	movs	r2, #0
 8003c52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c54:	193b      	adds	r3, r7, r4
 8003c56:	2200      	movs	r2, #0
 8003c58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c5a:	193a      	adds	r2, r7, r4
 8003c5c:	23a0      	movs	r3, #160	@ 0xa0
 8003c5e:	05db      	lsls	r3, r3, #23
 8003c60:	0011      	movs	r1, r2
 8003c62:	0018      	movs	r0, r3
 8003c64:	f001 fa4a 	bl	80050fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BalaResCheck_Pin */
  GPIO_InitStruct.Pin = BalaResCheck_Pin;
 8003c68:	193b      	adds	r3, r7, r4
 8003c6a:	2240      	movs	r2, #64	@ 0x40
 8003c6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c6e:	193b      	adds	r3, r7, r4
 8003c70:	2200      	movs	r2, #0
 8003c72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c74:	193b      	adds	r3, r7, r4
 8003c76:	2200      	movs	r2, #0
 8003c78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BalaResCheck_GPIO_Port, &GPIO_InitStruct);
 8003c7a:	193b      	adds	r3, r7, r4
 8003c7c:	4a09      	ldr	r2, [pc, #36]	@ (8003ca4 <MX_GPIO_Init+0x240>)
 8003c7e:	0019      	movs	r1, r3
 8003c80:	0010      	movs	r0, r2
 8003c82:	f001 fa3b 	bl	80050fc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003c86:	46c0      	nop			@ (mov r8, r8)
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b00b      	add	sp, #44	@ 0x2c
 8003c8c:	bd90      	pop	{r4, r7, pc}
 8003c8e:	46c0      	nop			@ (mov r8, r8)
 8003c90:	40021000 	.word	0x40021000
 8003c94:	0000c040 	.word	0x0000c040
 8003c98:	50000800 	.word	0x50000800
 8003c9c:	00009ffc 	.word	0x00009ffc
 8003ca0:	00001024 	.word	0x00001024
 8003ca4:	50000400 	.word	0x50000400
 8003ca8:	50001400 	.word	0x50001400
 8003cac:	00008bfc 	.word	0x00008bfc

08003cb0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003cb8:	2001      	movs	r0, #1
 8003cba:	f003 fc19 	bl	80074f0 <osDelay>
 8003cbe:	e7fb      	b.n	8003cb8 <StartDefaultTask+0x8>

08003cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cc4:	b672      	cpsid	i
}
 8003cc6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cc8:	46c0      	nop			@ (mov r8, r8)
 8003cca:	e7fd      	b.n	8003cc8 <Error_Handler+0x8>

08003ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd2:	4b15      	ldr	r3, [pc, #84]	@ (8003d28 <HAL_MspInit+0x5c>)
 8003cd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cd6:	4b14      	ldr	r3, [pc, #80]	@ (8003d28 <HAL_MspInit+0x5c>)
 8003cd8:	2101      	movs	r1, #1
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	641a      	str	r2, [r3, #64]	@ 0x40
 8003cde:	4b12      	ldr	r3, [pc, #72]	@ (8003d28 <HAL_MspInit+0x5c>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	607b      	str	r3, [r7, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cea:	4b0f      	ldr	r3, [pc, #60]	@ (8003d28 <HAL_MspInit+0x5c>)
 8003cec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cee:	4b0e      	ldr	r3, [pc, #56]	@ (8003d28 <HAL_MspInit+0x5c>)
 8003cf0:	2180      	movs	r1, #128	@ 0x80
 8003cf2:	0549      	lsls	r1, r1, #21
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d28 <HAL_MspInit+0x5c>)
 8003cfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cfc:	2380      	movs	r3, #128	@ 0x80
 8003cfe:	055b      	lsls	r3, r3, #21
 8003d00:	4013      	ands	r3, r2
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8003d06:	2302      	movs	r3, #2
 8003d08:	425b      	negs	r3, r3
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2103      	movs	r1, #3
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f000 ff3e 	bl	8004b90 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003d14:	23c0      	movs	r3, #192	@ 0xc0
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f000 fa13 	bl	8004144 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d1e:	46c0      	nop			@ (mov r8, r8)
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b002      	add	sp, #8
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	40021000 	.word	0x40021000

08003d2c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d2c:	b590      	push	{r4, r7, lr}
 8003d2e:	b08b      	sub	sp, #44	@ 0x2c
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d34:	2414      	movs	r4, #20
 8003d36:	193b      	adds	r3, r7, r4
 8003d38:	0018      	movs	r0, r3
 8003d3a:	2314      	movs	r3, #20
 8003d3c:	001a      	movs	r2, r3
 8003d3e:	2100      	movs	r1, #0
 8003d40:	f005 feee 	bl	8009b20 <memset>
  if(hadc->Instance==ADC1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a18      	ldr	r2, [pc, #96]	@ (8003dac <HAL_ADC_MspInit+0x80>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d129      	bne.n	8003da2 <HAL_ADC_MspInit+0x76>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003d4e:	4b18      	ldr	r3, [pc, #96]	@ (8003db0 <HAL_ADC_MspInit+0x84>)
 8003d50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d52:	4b17      	ldr	r3, [pc, #92]	@ (8003db0 <HAL_ADC_MspInit+0x84>)
 8003d54:	2180      	movs	r1, #128	@ 0x80
 8003d56:	0349      	lsls	r1, r1, #13
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d5c:	4b14      	ldr	r3, [pc, #80]	@ (8003db0 <HAL_ADC_MspInit+0x84>)
 8003d5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d60:	2380      	movs	r3, #128	@ 0x80
 8003d62:	035b      	lsls	r3, r3, #13
 8003d64:	4013      	ands	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d6a:	4b11      	ldr	r3, [pc, #68]	@ (8003db0 <HAL_ADC_MspInit+0x84>)
 8003d6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d6e:	4b10      	ldr	r3, [pc, #64]	@ (8003db0 <HAL_ADC_MspInit+0x84>)
 8003d70:	2101      	movs	r1, #1
 8003d72:	430a      	orrs	r2, r1
 8003d74:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d76:	4b0e      	ldr	r3, [pc, #56]	@ (8003db0 <HAL_ADC_MspInit+0x84>)
 8003d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = BalanceThermistor1_Pin|BalanceThermistor2_Pin;
 8003d82:	193b      	adds	r3, r7, r4
 8003d84:	2203      	movs	r2, #3
 8003d86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d88:	193b      	adds	r3, r7, r4
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8e:	193b      	adds	r3, r7, r4
 8003d90:	2200      	movs	r2, #0
 8003d92:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d94:	193a      	adds	r2, r7, r4
 8003d96:	23a0      	movs	r3, #160	@ 0xa0
 8003d98:	05db      	lsls	r3, r3, #23
 8003d9a:	0011      	movs	r1, r2
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f001 f9ad 	bl	80050fc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003da2:	46c0      	nop			@ (mov r8, r8)
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b00b      	add	sp, #44	@ 0x2c
 8003da8:	bd90      	pop	{r4, r7, pc}
 8003daa:	46c0      	nop			@ (mov r8, r8)
 8003dac:	40012400 	.word	0x40012400
 8003db0:	40021000 	.word	0x40021000

08003db4 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003db4:	b590      	push	{r4, r7, lr}
 8003db6:	b09d      	sub	sp, #116	@ 0x74
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dbc:	235c      	movs	r3, #92	@ 0x5c
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	2314      	movs	r3, #20
 8003dc4:	001a      	movs	r2, r3
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	f005 feaa 	bl	8009b20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003dcc:	2410      	movs	r4, #16
 8003dce:	193b      	adds	r3, r7, r4
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	234c      	movs	r3, #76	@ 0x4c
 8003dd4:	001a      	movs	r2, r3
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	f005 fea2 	bl	8009b20 <memset>
  if(hfdcan->Instance==FDCAN2)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a22      	ldr	r2, [pc, #136]	@ (8003e6c <HAL_FDCAN_MspInit+0xb8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d13e      	bne.n	8003e64 <HAL_FDCAN_MspInit+0xb0>

    /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003de6:	193b      	adds	r3, r7, r4
 8003de8:	2280      	movs	r2, #128	@ 0x80
 8003dea:	0492      	lsls	r2, r2, #18
 8003dec:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003dee:	193b      	adds	r3, r7, r4
 8003df0:	2200      	movs	r2, #0
 8003df2:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003df4:	193b      	adds	r3, r7, r4
 8003df6:	0018      	movs	r0, r3
 8003df8:	f002 ffe6 	bl	8006dc8 <HAL_RCCEx_PeriphCLKConfig>
 8003dfc:	1e03      	subs	r3, r0, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003e00:	f7ff ff5e 	bl	8003cc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003e04:	4b1a      	ldr	r3, [pc, #104]	@ (8003e70 <HAL_FDCAN_MspInit+0xbc>)
 8003e06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e08:	4b19      	ldr	r3, [pc, #100]	@ (8003e70 <HAL_FDCAN_MspInit+0xbc>)
 8003e0a:	2180      	movs	r1, #128	@ 0x80
 8003e0c:	0149      	lsls	r1, r1, #5
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e12:	4b17      	ldr	r3, [pc, #92]	@ (8003e70 <HAL_FDCAN_MspInit+0xbc>)
 8003e14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e16:	2380      	movs	r3, #128	@ 0x80
 8003e18:	015b      	lsls	r3, r3, #5
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e20:	4b13      	ldr	r3, [pc, #76]	@ (8003e70 <HAL_FDCAN_MspInit+0xbc>)
 8003e22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e24:	4b12      	ldr	r3, [pc, #72]	@ (8003e70 <HAL_FDCAN_MspInit+0xbc>)
 8003e26:	2102      	movs	r1, #2
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e2c:	4b10      	ldr	r3, [pc, #64]	@ (8003e70 <HAL_FDCAN_MspInit+0xbc>)
 8003e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e30:	2202      	movs	r2, #2
 8003e32:	4013      	ands	r3, r2
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB0     ------> FDCAN2_RX
    PB1     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003e38:	215c      	movs	r1, #92	@ 0x5c
 8003e3a:	187b      	adds	r3, r7, r1
 8003e3c:	2203      	movs	r2, #3
 8003e3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e40:	187b      	adds	r3, r7, r1
 8003e42:	2202      	movs	r2, #2
 8003e44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e46:	187b      	adds	r3, r7, r1
 8003e48:	2201      	movs	r2, #1
 8003e4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e4c:	187b      	adds	r3, r7, r1
 8003e4e:	2200      	movs	r2, #0
 8003e50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 8003e52:	187b      	adds	r3, r7, r1
 8003e54:	2203      	movs	r2, #3
 8003e56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e58:	187b      	adds	r3, r7, r1
 8003e5a:	4a06      	ldr	r2, [pc, #24]	@ (8003e74 <HAL_FDCAN_MspInit+0xc0>)
 8003e5c:	0019      	movs	r1, r3
 8003e5e:	0010      	movs	r0, r2
 8003e60:	f001 f94c 	bl	80050fc <HAL_GPIO_Init>

    /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8003e64:	46c0      	nop			@ (mov r8, r8)
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b01d      	add	sp, #116	@ 0x74
 8003e6a:	bd90      	pop	{r4, r7, pc}
 8003e6c:	40006800 	.word	0x40006800
 8003e70:	40021000 	.word	0x40021000
 8003e74:	50000400 	.word	0x50000400

08003e78 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e78:	b590      	push	{r4, r7, lr}
 8003e7a:	b09f      	sub	sp, #124	@ 0x7c
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e80:	2364      	movs	r3, #100	@ 0x64
 8003e82:	18fb      	adds	r3, r7, r3
 8003e84:	0018      	movs	r0, r3
 8003e86:	2314      	movs	r3, #20
 8003e88:	001a      	movs	r2, r3
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	f005 fe48 	bl	8009b20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e90:	2418      	movs	r4, #24
 8003e92:	193b      	adds	r3, r7, r4
 8003e94:	0018      	movs	r0, r3
 8003e96:	234c      	movs	r3, #76	@ 0x4c
 8003e98:	001a      	movs	r2, r3
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	f005 fe40 	bl	8009b20 <memset>
  if(hi2c->Instance==I2C2)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a3d      	ldr	r2, [pc, #244]	@ (8003f9c <HAL_I2C_MspInit+0x124>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d13f      	bne.n	8003f2a <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003eaa:	193b      	adds	r3, r7, r4
 8003eac:	2240      	movs	r2, #64	@ 0x40
 8003eae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003eb0:	193b      	adds	r3, r7, r4
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003eb6:	193b      	adds	r3, r7, r4
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f002 ff85 	bl	8006dc8 <HAL_RCCEx_PeriphCLKConfig>
 8003ebe:	1e03      	subs	r3, r0, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003ec2:	f7ff fefd 	bl	8003cc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec6:	4b36      	ldr	r3, [pc, #216]	@ (8003fa0 <HAL_I2C_MspInit+0x128>)
 8003ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003eca:	4b35      	ldr	r3, [pc, #212]	@ (8003fa0 <HAL_I2C_MspInit+0x128>)
 8003ecc:	2102      	movs	r1, #2
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ed2:	4b33      	ldr	r3, [pc, #204]	@ (8003fa0 <HAL_I2C_MspInit+0x128>)
 8003ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	4013      	ands	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BMS_SCL_Pin|BMS_SDA_Pin;
 8003ede:	2164      	movs	r1, #100	@ 0x64
 8003ee0:	187b      	adds	r3, r7, r1
 8003ee2:	22c0      	movs	r2, #192	@ 0xc0
 8003ee4:	01d2      	lsls	r2, r2, #7
 8003ee6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ee8:	187b      	adds	r3, r7, r1
 8003eea:	2212      	movs	r2, #18
 8003eec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003eee:	187b      	adds	r3, r7, r1
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003ef4:	187b      	adds	r3, r7, r1
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8003efa:	187b      	adds	r3, r7, r1
 8003efc:	2206      	movs	r2, #6
 8003efe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f00:	187b      	adds	r3, r7, r1
 8003f02:	4a28      	ldr	r2, [pc, #160]	@ (8003fa4 <HAL_I2C_MspInit+0x12c>)
 8003f04:	0019      	movs	r1, r3
 8003f06:	0010      	movs	r0, r2
 8003f08:	f001 f8f8 	bl	80050fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003f0c:	4b24      	ldr	r3, [pc, #144]	@ (8003fa0 <HAL_I2C_MspInit+0x128>)
 8003f0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f10:	4b23      	ldr	r3, [pc, #140]	@ (8003fa0 <HAL_I2C_MspInit+0x128>)
 8003f12:	2180      	movs	r1, #128	@ 0x80
 8003f14:	03c9      	lsls	r1, r1, #15
 8003f16:	430a      	orrs	r2, r1
 8003f18:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f1a:	4b21      	ldr	r3, [pc, #132]	@ (8003fa0 <HAL_I2C_MspInit+0x128>)
 8003f1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f1e:	2380      	movs	r3, #128	@ 0x80
 8003f20:	03db      	lsls	r3, r3, #15
 8003f22:	4013      	ands	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003f28:	e034      	b.n	8003f94 <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8003fa8 <HAL_I2C_MspInit+0x130>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d12f      	bne.n	8003f94 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f34:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa0 <HAL_I2C_MspInit+0x128>)
 8003f36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f38:	4b19      	ldr	r3, [pc, #100]	@ (8003fa0 <HAL_I2C_MspInit+0x128>)
 8003f3a:	2102      	movs	r1, #2
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f40:	4b17      	ldr	r3, [pc, #92]	@ (8003fa0 <HAL_I2C_MspInit+0x128>)
 8003f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f44:	2202      	movs	r2, #2
 8003f46:	4013      	ands	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003f4c:	2164      	movs	r1, #100	@ 0x64
 8003f4e:	187b      	adds	r3, r7, r1
 8003f50:	2218      	movs	r2, #24
 8003f52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f54:	187b      	adds	r3, r7, r1
 8003f56:	2212      	movs	r2, #18
 8003f58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5a:	187b      	adds	r3, r7, r1
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f60:	187b      	adds	r3, r7, r1
 8003f62:	2200      	movs	r2, #0
 8003f64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C3;
 8003f66:	187b      	adds	r3, r7, r1
 8003f68:	2206      	movs	r2, #6
 8003f6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f6c:	187b      	adds	r3, r7, r1
 8003f6e:	4a0d      	ldr	r2, [pc, #52]	@ (8003fa4 <HAL_I2C_MspInit+0x12c>)
 8003f70:	0019      	movs	r1, r3
 8003f72:	0010      	movs	r0, r2
 8003f74:	f001 f8c2 	bl	80050fc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003f78:	4b09      	ldr	r3, [pc, #36]	@ (8003fa0 <HAL_I2C_MspInit+0x128>)
 8003f7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f7c:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <HAL_I2C_MspInit+0x128>)
 8003f7e:	2180      	movs	r1, #128	@ 0x80
 8003f80:	0409      	lsls	r1, r1, #16
 8003f82:	430a      	orrs	r2, r1
 8003f84:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f86:	4b06      	ldr	r3, [pc, #24]	@ (8003fa0 <HAL_I2C_MspInit+0x128>)
 8003f88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f8a:	2380      	movs	r3, #128	@ 0x80
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	4013      	ands	r3, r2
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	68bb      	ldr	r3, [r7, #8]
}
 8003f94:	46c0      	nop			@ (mov r8, r8)
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b01f      	add	sp, #124	@ 0x7c
 8003f9a:	bd90      	pop	{r4, r7, pc}
 8003f9c:	40005800 	.word	0x40005800
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	50000400 	.word	0x50000400
 8003fa8:	40008800 	.word	0x40008800

08003fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003fb0:	46c0      	nop			@ (mov r8, r8)
 8003fb2:	e7fd      	b.n	8003fb0 <NMI_Handler+0x4>

08003fb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fb8:	46c0      	nop			@ (mov r8, r8)
 8003fba:	e7fd      	b.n	8003fb8 <HardFault_Handler+0x4>

08003fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fc0:	f000 f8a4 	bl	800410c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003fc4:	f004 fed8 	bl	8008d78 <xTaskGetSchedulerState>
 8003fc8:	0003      	movs	r3, r0
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d001      	beq.n	8003fd2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003fce:	f005 fbb3 	bl	8009738 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fd2:	46c0      	nop			@ (mov r8, r8)
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fdc:	46c0      	nop			@ (mov r8, r8)
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003fe4:	480d      	ldr	r0, [pc, #52]	@ (800401c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003fe6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fe8:	f7ff fff6 	bl	8003fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fec:	480c      	ldr	r0, [pc, #48]	@ (8004020 <LoopForever+0x6>)
  ldr r1, =_edata
 8003fee:	490d      	ldr	r1, [pc, #52]	@ (8004024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8004028 <LoopForever+0xe>)
  movs r3, #0
 8003ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ff4:	e002      	b.n	8003ffc <LoopCopyDataInit>

08003ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ffa:	3304      	adds	r3, #4

08003ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004000:	d3f9      	bcc.n	8003ff6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004002:	4a0a      	ldr	r2, [pc, #40]	@ (800402c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004004:	4c0a      	ldr	r4, [pc, #40]	@ (8004030 <LoopForever+0x16>)
  movs r3, #0
 8004006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004008:	e001      	b.n	800400e <LoopFillZerobss>

0800400a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800400a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800400c:	3204      	adds	r2, #4

0800400e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800400e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004010:	d3fb      	bcc.n	800400a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004012:	f005 fdf7 	bl	8009c04 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004016:	f7ff fb4d 	bl	80036b4 <main>

0800401a <LoopForever>:

LoopForever:
  b LoopForever
 800401a:	e7fe      	b.n	800401a <LoopForever>
  ldr   r0, =_estack
 800401c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8004020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004024:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8004028:	08009f50 	.word	0x08009f50
  ldr r2, =_sbss
 800402c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8004030:	20001dcc 	.word	0x20001dcc

08004034 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004034:	e7fe      	b.n	8004034 <ADC1_COMP_IRQHandler>
	...

08004038 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800403e:	1dfb      	adds	r3, r7, #7
 8004040:	2200      	movs	r2, #0
 8004042:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004044:	4b0b      	ldr	r3, [pc, #44]	@ (8004074 <HAL_Init+0x3c>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	4b0a      	ldr	r3, [pc, #40]	@ (8004074 <HAL_Init+0x3c>)
 800404a:	2180      	movs	r1, #128	@ 0x80
 800404c:	0049      	lsls	r1, r1, #1
 800404e:	430a      	orrs	r2, r1
 8004050:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004052:	2003      	movs	r0, #3
 8004054:	f000 f810 	bl	8004078 <HAL_InitTick>
 8004058:	1e03      	subs	r3, r0, #0
 800405a:	d003      	beq.n	8004064 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800405c:	1dfb      	adds	r3, r7, #7
 800405e:	2201      	movs	r2, #1
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	e001      	b.n	8004068 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004064:	f7ff fe32 	bl	8003ccc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004068:	1dfb      	adds	r3, r7, #7
 800406a:	781b      	ldrb	r3, [r3, #0]
}
 800406c:	0018      	movs	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	b002      	add	sp, #8
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40022000 	.word	0x40022000

08004078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004078:	b590      	push	{r4, r7, lr}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004080:	230f      	movs	r3, #15
 8004082:	18fb      	adds	r3, r7, r3
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004088:	4b1d      	ldr	r3, [pc, #116]	@ (8004100 <HAL_InitTick+0x88>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d02b      	beq.n	80040e8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004090:	4b1c      	ldr	r3, [pc, #112]	@ (8004104 <HAL_InitTick+0x8c>)
 8004092:	681c      	ldr	r4, [r3, #0]
 8004094:	4b1a      	ldr	r3, [pc, #104]	@ (8004100 <HAL_InitTick+0x88>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	0019      	movs	r1, r3
 800409a:	23fa      	movs	r3, #250	@ 0xfa
 800409c:	0098      	lsls	r0, r3, #2
 800409e:	f7fc f833 	bl	8000108 <__udivsi3>
 80040a2:	0003      	movs	r3, r0
 80040a4:	0019      	movs	r1, r3
 80040a6:	0020      	movs	r0, r4
 80040a8:	f7fc f82e 	bl	8000108 <__udivsi3>
 80040ac:	0003      	movs	r3, r0
 80040ae:	0018      	movs	r0, r3
 80040b0:	f000 fd83 	bl	8004bba <HAL_SYSTICK_Config>
 80040b4:	1e03      	subs	r3, r0, #0
 80040b6:	d112      	bne.n	80040de <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d80a      	bhi.n	80040d4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	2301      	movs	r3, #1
 80040c2:	425b      	negs	r3, r3
 80040c4:	2200      	movs	r2, #0
 80040c6:	0018      	movs	r0, r3
 80040c8:	f000 fd62 	bl	8004b90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80040cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004108 <HAL_InitTick+0x90>)
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	e00d      	b.n	80040f0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80040d4:	230f      	movs	r3, #15
 80040d6:	18fb      	adds	r3, r7, r3
 80040d8:	2201      	movs	r2, #1
 80040da:	701a      	strb	r2, [r3, #0]
 80040dc:	e008      	b.n	80040f0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80040de:	230f      	movs	r3, #15
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	2201      	movs	r2, #1
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	e003      	b.n	80040f0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80040e8:	230f      	movs	r3, #15
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	2201      	movs	r2, #1
 80040ee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80040f0:	230f      	movs	r3, #15
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	781b      	ldrb	r3, [r3, #0]
}
 80040f6:	0018      	movs	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b005      	add	sp, #20
 80040fc:	bd90      	pop	{r4, r7, pc}
 80040fe:	46c0      	nop			@ (mov r8, r8)
 8004100:	20000008 	.word	0x20000008
 8004104:	20000000 	.word	0x20000000
 8004108:	20000004 	.word	0x20000004

0800410c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004110:	4b05      	ldr	r3, [pc, #20]	@ (8004128 <HAL_IncTick+0x1c>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	001a      	movs	r2, r3
 8004116:	4b05      	ldr	r3, [pc, #20]	@ (800412c <HAL_IncTick+0x20>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	18d2      	adds	r2, r2, r3
 800411c:	4b03      	ldr	r3, [pc, #12]	@ (800412c <HAL_IncTick+0x20>)
 800411e:	601a      	str	r2, [r3, #0]
}
 8004120:	46c0      	nop			@ (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	46c0      	nop			@ (mov r8, r8)
 8004128:	20000008 	.word	0x20000008
 800412c:	200002a8 	.word	0x200002a8

08004130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  return uwTick;
 8004134:	4b02      	ldr	r3, [pc, #8]	@ (8004140 <HAL_GetTick+0x10>)
 8004136:	681b      	ldr	r3, [r3, #0]
}
 8004138:	0018      	movs	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	46c0      	nop			@ (mov r8, r8)
 8004140:	200002a8 	.word	0x200002a8

08004144 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800414c:	4b06      	ldr	r3, [pc, #24]	@ (8004168 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a06      	ldr	r2, [pc, #24]	@ (800416c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8004152:	4013      	ands	r3, r2
 8004154:	0019      	movs	r1, r3
 8004156:	4b04      	ldr	r3, [pc, #16]	@ (8004168 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	430a      	orrs	r2, r1
 800415c:	601a      	str	r2, [r3, #0]
}
 800415e:	46c0      	nop			@ (mov r8, r8)
 8004160:	46bd      	mov	sp, r7
 8004162:	b002      	add	sp, #8
 8004164:	bd80      	pop	{r7, pc}
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	40010000 	.word	0x40010000
 800416c:	fffff9ff 	.word	0xfffff9ff

08004170 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a05      	ldr	r2, [pc, #20]	@ (8004194 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004180:	401a      	ands	r2, r3
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	431a      	orrs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	601a      	str	r2, [r3, #0]
}
 800418a:	46c0      	nop			@ (mov r8, r8)
 800418c:	46bd      	mov	sp, r7
 800418e:	b002      	add	sp, #8
 8004190:	bd80      	pop	{r7, pc}
 8004192:	46c0      	nop			@ (mov r8, r8)
 8004194:	fe3fffff 	.word	0xfe3fffff

08004198 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	23e0      	movs	r3, #224	@ 0xe0
 80041a6:	045b      	lsls	r3, r3, #17
 80041a8:	4013      	ands	r3, r2
}
 80041aa:	0018      	movs	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	b002      	add	sp, #8
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	60f8      	str	r0, [r7, #12]
 80041ba:	60b9      	str	r1, [r7, #8]
 80041bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	2104      	movs	r1, #4
 80041c6:	400a      	ands	r2, r1
 80041c8:	2107      	movs	r1, #7
 80041ca:	4091      	lsls	r1, r2
 80041cc:	000a      	movs	r2, r1
 80041ce:	43d2      	mvns	r2, r2
 80041d0:	401a      	ands	r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2104      	movs	r1, #4
 80041d6:	400b      	ands	r3, r1
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4099      	lsls	r1, r3
 80041dc:	000b      	movs	r3, r1
 80041de:	431a      	orrs	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80041e4:	46c0      	nop			@ (mov r8, r8)
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b004      	add	sp, #16
 80041ea:	bd80      	pop	{r7, pc}

080041ec <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	2104      	movs	r1, #4
 80041fe:	400a      	ands	r2, r1
 8004200:	2107      	movs	r1, #7
 8004202:	4091      	lsls	r1, r2
 8004204:	000a      	movs	r2, r1
 8004206:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2104      	movs	r1, #4
 800420c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800420e:	40da      	lsrs	r2, r3
 8004210:	0013      	movs	r3, r2
}
 8004212:	0018      	movs	r0, r3
 8004214:	46bd      	mov	sp, r7
 8004216:	b002      	add	sp, #8
 8004218:	bd80      	pop	{r7, pc}

0800421a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	211f      	movs	r1, #31
 800422e:	400a      	ands	r2, r1
 8004230:	210f      	movs	r1, #15
 8004232:	4091      	lsls	r1, r2
 8004234:	000a      	movs	r2, r1
 8004236:	43d2      	mvns	r2, r2
 8004238:	401a      	ands	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	0e9b      	lsrs	r3, r3, #26
 800423e:	210f      	movs	r1, #15
 8004240:	4019      	ands	r1, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	201f      	movs	r0, #31
 8004246:	4003      	ands	r3, r0
 8004248:	4099      	lsls	r1, r3
 800424a:	000b      	movs	r3, r1
 800424c:	431a      	orrs	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004252:	46c0      	nop			@ (mov r8, r8)
 8004254:	46bd      	mov	sp, r7
 8004256:	b004      	add	sp, #16
 8004258:	bd80      	pop	{r7, pc}

0800425a <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	035b      	lsls	r3, r3, #13
 800426c:	0b5b      	lsrs	r3, r3, #13
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004274:	46c0      	nop			@ (mov r8, r8)
 8004276:	46bd      	mov	sp, r7
 8004278:	b002      	add	sp, #8
 800427a:	bd80      	pop	{r7, pc}

0800427c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	0352      	lsls	r2, r2, #13
 800428e:	0b52      	lsrs	r2, r2, #13
 8004290:	43d2      	mvns	r2, r2
 8004292:	401a      	ands	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004298:	46c0      	nop			@ (mov r8, r8)
 800429a:	46bd      	mov	sp, r7
 800429c:	b002      	add	sp, #8
 800429e:	bd80      	pop	{r7, pc}

080042a0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	0212      	lsls	r2, r2, #8
 80042b4:	43d2      	mvns	r2, r2
 80042b6:	401a      	ands	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	400b      	ands	r3, r1
 80042c0:	4904      	ldr	r1, [pc, #16]	@ (80042d4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80042c2:	400b      	ands	r3, r1
 80042c4:	431a      	orrs	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80042ca:	46c0      	nop			@ (mov r8, r8)
 80042cc:	46bd      	mov	sp, r7
 80042ce:	b004      	add	sp, #16
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	46c0      	nop			@ (mov r8, r8)
 80042d4:	07ffff00 	.word	0x07ffff00

080042d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4a05      	ldr	r2, [pc, #20]	@ (80042fc <LL_ADC_EnableInternalRegulator+0x24>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	2280      	movs	r2, #128	@ 0x80
 80042ea:	0552      	lsls	r2, r2, #21
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80042f2:	46c0      	nop			@ (mov r8, r8)
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b002      	add	sp, #8
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	46c0      	nop			@ (mov r8, r8)
 80042fc:	6fffffe8 	.word	0x6fffffe8

08004300 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	2380      	movs	r3, #128	@ 0x80
 800430e:	055b      	lsls	r3, r3, #21
 8004310:	401a      	ands	r2, r3
 8004312:	2380      	movs	r3, #128	@ 0x80
 8004314:	055b      	lsls	r3, r3, #21
 8004316:	429a      	cmp	r2, r3
 8004318:	d101      	bne.n	800431e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800431a:	2301      	movs	r3, #1
 800431c:	e000      	b.n	8004320 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800431e:	2300      	movs	r3, #0
}
 8004320:	0018      	movs	r0, r3
 8004322:	46bd      	mov	sp, r7
 8004324:	b002      	add	sp, #8
 8004326:	bd80      	pop	{r7, pc}

08004328 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2201      	movs	r2, #1
 8004336:	4013      	ands	r3, r2
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <LL_ADC_IsEnabled+0x18>
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <LL_ADC_IsEnabled+0x1a>
 8004340:	2300      	movs	r3, #0
}
 8004342:	0018      	movs	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	b002      	add	sp, #8
 8004348:	bd80      	pop	{r7, pc}

0800434a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b082      	sub	sp, #8
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2204      	movs	r2, #4
 8004358:	4013      	ands	r3, r2
 800435a:	2b04      	cmp	r3, #4
 800435c:	d101      	bne.n	8004362 <LL_ADC_REG_IsConversionOngoing+0x18>
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004362:	2300      	movs	r3, #0
}
 8004364:	0018      	movs	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	b002      	add	sp, #8
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004374:	231f      	movs	r3, #31
 8004376:	18fb      	adds	r3, r7, r3
 8004378:	2200      	movs	r2, #0
 800437a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800437c:	2300      	movs	r3, #0
 800437e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004384:	2300      	movs	r3, #0
 8004386:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e17f      	b.n	8004692 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10a      	bne.n	80043b0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	0018      	movs	r0, r3
 800439e:	f7ff fcc5 	bl	8003d2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2254      	movs	r2, #84	@ 0x54
 80043ac:	2100      	movs	r1, #0
 80043ae:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	0018      	movs	r0, r3
 80043b6:	f7ff ffa3 	bl	8004300 <LL_ADC_IsInternalRegulatorEnabled>
 80043ba:	1e03      	subs	r3, r0, #0
 80043bc:	d115      	bne.n	80043ea <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	0018      	movs	r0, r3
 80043c4:	f7ff ff88 	bl	80042d8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043c8:	4bb4      	ldr	r3, [pc, #720]	@ (800469c <HAL_ADC_Init+0x330>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	49b4      	ldr	r1, [pc, #720]	@ (80046a0 <HAL_ADC_Init+0x334>)
 80043ce:	0018      	movs	r0, r3
 80043d0:	f7fb fe9a 	bl	8000108 <__udivsi3>
 80043d4:	0003      	movs	r3, r0
 80043d6:	3301      	adds	r3, #1
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80043dc:	e002      	b.n	80043e4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f9      	bne.n	80043de <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	0018      	movs	r0, r3
 80043f0:	f7ff ff86 	bl	8004300 <LL_ADC_IsInternalRegulatorEnabled>
 80043f4:	1e03      	subs	r3, r0, #0
 80043f6:	d10f      	bne.n	8004418 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fc:	2210      	movs	r2, #16
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004408:	2201      	movs	r2, #1
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004410:	231f      	movs	r3, #31
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	2201      	movs	r2, #1
 8004416:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	0018      	movs	r0, r3
 800441e:	f7ff ff94 	bl	800434a <LL_ADC_REG_IsConversionOngoing>
 8004422:	0003      	movs	r3, r0
 8004424:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442a:	2210      	movs	r2, #16
 800442c:	4013      	ands	r3, r2
 800442e:	d000      	beq.n	8004432 <HAL_ADC_Init+0xc6>
 8004430:	e122      	b.n	8004678 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d000      	beq.n	800443a <HAL_ADC_Init+0xce>
 8004438:	e11e      	b.n	8004678 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800443e:	4a99      	ldr	r2, [pc, #612]	@ (80046a4 <HAL_ADC_Init+0x338>)
 8004440:	4013      	ands	r3, r2
 8004442:	2202      	movs	r2, #2
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	0018      	movs	r0, r3
 8004450:	f7ff ff6a 	bl	8004328 <LL_ADC_IsEnabled>
 8004454:	1e03      	subs	r3, r0, #0
 8004456:	d000      	beq.n	800445a <HAL_ADC_Init+0xee>
 8004458:	e0ad      	b.n	80045b6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	7e1b      	ldrb	r3, [r3, #24]
 8004462:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004464:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	7e5b      	ldrb	r3, [r3, #25]
 800446a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800446c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	7e9b      	ldrb	r3, [r3, #26]
 8004472:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004474:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_ADC_Init+0x118>
 800447e:	2380      	movs	r3, #128	@ 0x80
 8004480:	015b      	lsls	r3, r3, #5
 8004482:	e000      	b.n	8004486 <HAL_ADC_Init+0x11a>
 8004484:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004486:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800448c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	da04      	bge.n	80044a0 <HAL_ADC_Init+0x134>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	085b      	lsrs	r3, r3, #1
 800449e:	e001      	b.n	80044a4 <HAL_ADC_Init+0x138>
 80044a0:	2380      	movs	r3, #128	@ 0x80
 80044a2:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80044a4:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	212c      	movs	r1, #44	@ 0x2c
 80044aa:	5c5b      	ldrb	r3, [r3, r1]
 80044ac:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80044ae:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	5c9b      	ldrb	r3, [r3, r2]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d115      	bne.n	80044ec <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	7e9b      	ldrb	r3, [r3, #26]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d105      	bne.n	80044d4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	2280      	movs	r2, #128	@ 0x80
 80044cc:	0252      	lsls	r2, r2, #9
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
 80044d2:	e00b      	b.n	80044ec <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d8:	2220      	movs	r2, #32
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e4:	2201      	movs	r2, #1
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044f8:	23e0      	movs	r3, #224	@ 0xe0
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004502:	4313      	orrs	r3, r2
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	4313      	orrs	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4a65      	ldr	r2, [pc, #404]	@ (80046a8 <HAL_ADC_Init+0x33c>)
 8004512:	4013      	ands	r3, r2
 8004514:	0019      	movs	r1, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	430a      	orrs	r2, r1
 800451e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	0f9b      	lsrs	r3, r3, #30
 8004526:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800452c:	4313      	orrs	r3, r2
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4313      	orrs	r3, r2
 8004532:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	223c      	movs	r2, #60	@ 0x3c
 8004538:	5c9b      	ldrb	r3, [r3, r2]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d111      	bne.n	8004562 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	0f9b      	lsrs	r3, r3, #30
 8004544:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800454a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8004550:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8004556:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	4313      	orrs	r3, r2
 800455c:	2201      	movs	r2, #1
 800455e:	4313      	orrs	r3, r2
 8004560:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	4a50      	ldr	r2, [pc, #320]	@ (80046ac <HAL_ADC_Init+0x340>)
 800456a:	4013      	ands	r3, r2
 800456c:	0019      	movs	r1, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	430a      	orrs	r2, r1
 8004576:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	23c0      	movs	r3, #192	@ 0xc0
 800457e:	061b      	lsls	r3, r3, #24
 8004580:	429a      	cmp	r2, r3
 8004582:	d018      	beq.n	80045b6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004588:	2380      	movs	r3, #128	@ 0x80
 800458a:	05db      	lsls	r3, r3, #23
 800458c:	429a      	cmp	r2, r3
 800458e:	d012      	beq.n	80045b6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004594:	2380      	movs	r3, #128	@ 0x80
 8004596:	061b      	lsls	r3, r3, #24
 8004598:	429a      	cmp	r2, r3
 800459a:	d00c      	beq.n	80045b6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800459c:	4b44      	ldr	r3, [pc, #272]	@ (80046b0 <HAL_ADC_Init+0x344>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a44      	ldr	r2, [pc, #272]	@ (80046b4 <HAL_ADC_Init+0x348>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	0019      	movs	r1, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	23f0      	movs	r3, #240	@ 0xf0
 80045ac:	039b      	lsls	r3, r3, #14
 80045ae:	401a      	ands	r2, r3
 80045b0:	4b3f      	ldr	r3, [pc, #252]	@ (80046b0 <HAL_ADC_Init+0x344>)
 80045b2:	430a      	orrs	r2, r1
 80045b4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045be:	001a      	movs	r2, r3
 80045c0:	2100      	movs	r1, #0
 80045c2:	f7ff fdf6 	bl	80041b2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ce:	493a      	ldr	r1, [pc, #232]	@ (80046b8 <HAL_ADC_Init+0x34c>)
 80045d0:	001a      	movs	r2, r3
 80045d2:	f7ff fdee 	bl	80041b2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2110      	movs	r1, #16
 80045ea:	4249      	negs	r1, r1
 80045ec:	430a      	orrs	r2, r1
 80045ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80045f0:	e018      	b.n	8004624 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	2380      	movs	r3, #128	@ 0x80
 80045f8:	039b      	lsls	r3, r3, #14
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d112      	bne.n	8004624 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	3b01      	subs	r3, #1
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	221c      	movs	r2, #28
 800460e:	4013      	ands	r3, r2
 8004610:	2210      	movs	r2, #16
 8004612:	4252      	negs	r2, r2
 8004614:	409a      	lsls	r2, r3
 8004616:	0011      	movs	r1, r2
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2100      	movs	r1, #0
 800462a:	0018      	movs	r0, r3
 800462c:	f7ff fdde 	bl	80041ec <LL_ADC_GetSamplingTimeCommonChannels>
 8004630:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004636:	429a      	cmp	r2, r3
 8004638:	d10b      	bne.n	8004652 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004644:	2203      	movs	r2, #3
 8004646:	4393      	bics	r3, r2
 8004648:	2201      	movs	r2, #1
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004650:	e01c      	b.n	800468c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004656:	2212      	movs	r2, #18
 8004658:	4393      	bics	r3, r2
 800465a:	2210      	movs	r2, #16
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004666:	2201      	movs	r2, #1
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800466e:	231f      	movs	r3, #31
 8004670:	18fb      	adds	r3, r7, r3
 8004672:	2201      	movs	r2, #1
 8004674:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004676:	e009      	b.n	800468c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467c:	2210      	movs	r2, #16
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004684:	231f      	movs	r3, #31
 8004686:	18fb      	adds	r3, r7, r3
 8004688:	2201      	movs	r2, #1
 800468a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800468c:	231f      	movs	r3, #31
 800468e:	18fb      	adds	r3, r7, r3
 8004690:	781b      	ldrb	r3, [r3, #0]
}
 8004692:	0018      	movs	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	b008      	add	sp, #32
 8004698:	bd80      	pop	{r7, pc}
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	20000000 	.word	0x20000000
 80046a0:	00030d40 	.word	0x00030d40
 80046a4:	fffffefd 	.word	0xfffffefd
 80046a8:	ffde0201 	.word	0xffde0201
 80046ac:	1ffffc02 	.word	0x1ffffc02
 80046b0:	40012708 	.word	0x40012708
 80046b4:	ffc3ffff 	.word	0xffc3ffff
 80046b8:	07ffff04 	.word	0x07ffff04

080046bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046c6:	2317      	movs	r3, #23
 80046c8:	18fb      	adds	r3, r7, r3
 80046ca:	2200      	movs	r2, #0
 80046cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2254      	movs	r2, #84	@ 0x54
 80046d6:	5c9b      	ldrb	r3, [r3, r2]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0x24>
 80046dc:	2302      	movs	r3, #2
 80046de:	e1c0      	b.n	8004a62 <HAL_ADC_ConfigChannel+0x3a6>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2254      	movs	r2, #84	@ 0x54
 80046e4:	2101      	movs	r1, #1
 80046e6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	0018      	movs	r0, r3
 80046ee:	f7ff fe2c 	bl	800434a <LL_ADC_REG_IsConversionOngoing>
 80046f2:	1e03      	subs	r3, r0, #0
 80046f4:	d000      	beq.n	80046f8 <HAL_ADC_ConfigChannel+0x3c>
 80046f6:	e1a3      	b.n	8004a40 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d100      	bne.n	8004702 <HAL_ADC_ConfigChannel+0x46>
 8004700:	e143      	b.n	800498a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691a      	ldr	r2, [r3, #16]
 8004706:	2380      	movs	r3, #128	@ 0x80
 8004708:	061b      	lsls	r3, r3, #24
 800470a:	429a      	cmp	r2, r3
 800470c:	d004      	beq.n	8004718 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004712:	4ac1      	ldr	r2, [pc, #772]	@ (8004a18 <HAL_ADC_ConfigChannel+0x35c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d108      	bne.n	800472a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	0019      	movs	r1, r3
 8004722:	0010      	movs	r0, r2
 8004724:	f7ff fd99 	bl	800425a <LL_ADC_REG_SetSequencerChAdd>
 8004728:	e0c9      	b.n	80048be <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	211f      	movs	r1, #31
 8004734:	400b      	ands	r3, r1
 8004736:	210f      	movs	r1, #15
 8004738:	4099      	lsls	r1, r3
 800473a:	000b      	movs	r3, r1
 800473c:	43db      	mvns	r3, r3
 800473e:	4013      	ands	r3, r2
 8004740:	0019      	movs	r1, r3
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	035b      	lsls	r3, r3, #13
 8004748:	0b5b      	lsrs	r3, r3, #13
 800474a:	d105      	bne.n	8004758 <HAL_ADC_ConfigChannel+0x9c>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	0e9b      	lsrs	r3, r3, #26
 8004752:	221f      	movs	r2, #31
 8004754:	4013      	ands	r3, r2
 8004756:	e098      	b.n	800488a <HAL_ADC_ConfigChannel+0x1ce>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2201      	movs	r2, #1
 800475e:	4013      	ands	r3, r2
 8004760:	d000      	beq.n	8004764 <HAL_ADC_ConfigChannel+0xa8>
 8004762:	e091      	b.n	8004888 <HAL_ADC_ConfigChannel+0x1cc>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2202      	movs	r2, #2
 800476a:	4013      	ands	r3, r2
 800476c:	d000      	beq.n	8004770 <HAL_ADC_ConfigChannel+0xb4>
 800476e:	e089      	b.n	8004884 <HAL_ADC_ConfigChannel+0x1c8>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2204      	movs	r2, #4
 8004776:	4013      	ands	r3, r2
 8004778:	d000      	beq.n	800477c <HAL_ADC_ConfigChannel+0xc0>
 800477a:	e081      	b.n	8004880 <HAL_ADC_ConfigChannel+0x1c4>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2208      	movs	r2, #8
 8004782:	4013      	ands	r3, r2
 8004784:	d000      	beq.n	8004788 <HAL_ADC_ConfigChannel+0xcc>
 8004786:	e079      	b.n	800487c <HAL_ADC_ConfigChannel+0x1c0>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2210      	movs	r2, #16
 800478e:	4013      	ands	r3, r2
 8004790:	d000      	beq.n	8004794 <HAL_ADC_ConfigChannel+0xd8>
 8004792:	e071      	b.n	8004878 <HAL_ADC_ConfigChannel+0x1bc>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2220      	movs	r2, #32
 800479a:	4013      	ands	r3, r2
 800479c:	d000      	beq.n	80047a0 <HAL_ADC_ConfigChannel+0xe4>
 800479e:	e069      	b.n	8004874 <HAL_ADC_ConfigChannel+0x1b8>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2240      	movs	r2, #64	@ 0x40
 80047a6:	4013      	ands	r3, r2
 80047a8:	d000      	beq.n	80047ac <HAL_ADC_ConfigChannel+0xf0>
 80047aa:	e061      	b.n	8004870 <HAL_ADC_ConfigChannel+0x1b4>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2280      	movs	r2, #128	@ 0x80
 80047b2:	4013      	ands	r3, r2
 80047b4:	d000      	beq.n	80047b8 <HAL_ADC_ConfigChannel+0xfc>
 80047b6:	e059      	b.n	800486c <HAL_ADC_ConfigChannel+0x1b0>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	2380      	movs	r3, #128	@ 0x80
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	4013      	ands	r3, r2
 80047c2:	d151      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x1ac>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	2380      	movs	r3, #128	@ 0x80
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4013      	ands	r3, r2
 80047ce:	d149      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x1a8>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	2380      	movs	r3, #128	@ 0x80
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4013      	ands	r3, r2
 80047da:	d141      	bne.n	8004860 <HAL_ADC_ConfigChannel+0x1a4>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	2380      	movs	r3, #128	@ 0x80
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	4013      	ands	r3, r2
 80047e6:	d139      	bne.n	800485c <HAL_ADC_ConfigChannel+0x1a0>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	2380      	movs	r3, #128	@ 0x80
 80047ee:	015b      	lsls	r3, r3, #5
 80047f0:	4013      	ands	r3, r2
 80047f2:	d131      	bne.n	8004858 <HAL_ADC_ConfigChannel+0x19c>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	2380      	movs	r3, #128	@ 0x80
 80047fa:	019b      	lsls	r3, r3, #6
 80047fc:	4013      	ands	r3, r2
 80047fe:	d129      	bne.n	8004854 <HAL_ADC_ConfigChannel+0x198>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	2380      	movs	r3, #128	@ 0x80
 8004806:	01db      	lsls	r3, r3, #7
 8004808:	4013      	ands	r3, r2
 800480a:	d121      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x194>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	2380      	movs	r3, #128	@ 0x80
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	4013      	ands	r3, r2
 8004816:	d119      	bne.n	800484c <HAL_ADC_ConfigChannel+0x190>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	2380      	movs	r3, #128	@ 0x80
 800481e:	025b      	lsls	r3, r3, #9
 8004820:	4013      	ands	r3, r2
 8004822:	d111      	bne.n	8004848 <HAL_ADC_ConfigChannel+0x18c>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	2380      	movs	r3, #128	@ 0x80
 800482a:	029b      	lsls	r3, r3, #10
 800482c:	4013      	ands	r3, r2
 800482e:	d109      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x188>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	2380      	movs	r3, #128	@ 0x80
 8004836:	02db      	lsls	r3, r3, #11
 8004838:	4013      	ands	r3, r2
 800483a:	d001      	beq.n	8004840 <HAL_ADC_ConfigChannel+0x184>
 800483c:	2312      	movs	r3, #18
 800483e:	e024      	b.n	800488a <HAL_ADC_ConfigChannel+0x1ce>
 8004840:	2300      	movs	r3, #0
 8004842:	e022      	b.n	800488a <HAL_ADC_ConfigChannel+0x1ce>
 8004844:	2311      	movs	r3, #17
 8004846:	e020      	b.n	800488a <HAL_ADC_ConfigChannel+0x1ce>
 8004848:	2310      	movs	r3, #16
 800484a:	e01e      	b.n	800488a <HAL_ADC_ConfigChannel+0x1ce>
 800484c:	230f      	movs	r3, #15
 800484e:	e01c      	b.n	800488a <HAL_ADC_ConfigChannel+0x1ce>
 8004850:	230e      	movs	r3, #14
 8004852:	e01a      	b.n	800488a <HAL_ADC_ConfigChannel+0x1ce>
 8004854:	230d      	movs	r3, #13
 8004856:	e018      	b.n	800488a <HAL_ADC_ConfigChannel+0x1ce>
 8004858:	230c      	movs	r3, #12
 800485a:	e016      	b.n	800488a <HAL_ADC_ConfigChannel+0x1ce>
 800485c:	230b      	movs	r3, #11
 800485e:	e014      	b.n	800488a <HAL_ADC_ConfigChannel+0x1ce>
 8004860:	230a      	movs	r3, #10
 8004862:	e012      	b.n	800488a <HAL_ADC_ConfigChannel+0x1ce>
 8004864:	2309      	movs	r3, #9
 8004866:	e010      	b.n	800488a <HAL_ADC_ConfigChannel+0x1ce>
 8004868:	2308      	movs	r3, #8
 800486a:	e00e      	b.n	800488a <HAL_ADC_ConfigChannel+0x1ce>
 800486c:	2307      	movs	r3, #7
 800486e:	e00c      	b.n	800488a <HAL_ADC_ConfigChannel+0x1ce>
 8004870:	2306      	movs	r3, #6
 8004872:	e00a      	b.n	800488a <HAL_ADC_ConfigChannel+0x1ce>
 8004874:	2305      	movs	r3, #5
 8004876:	e008      	b.n	800488a <HAL_ADC_ConfigChannel+0x1ce>
 8004878:	2304      	movs	r3, #4
 800487a:	e006      	b.n	800488a <HAL_ADC_ConfigChannel+0x1ce>
 800487c:	2303      	movs	r3, #3
 800487e:	e004      	b.n	800488a <HAL_ADC_ConfigChannel+0x1ce>
 8004880:	2302      	movs	r3, #2
 8004882:	e002      	b.n	800488a <HAL_ADC_ConfigChannel+0x1ce>
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <HAL_ADC_ConfigChannel+0x1ce>
 8004888:	2300      	movs	r3, #0
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	6852      	ldr	r2, [r2, #4]
 800488e:	201f      	movs	r0, #31
 8004890:	4002      	ands	r2, r0
 8004892:	4093      	lsls	r3, r2
 8004894:	000a      	movs	r2, r1
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	089b      	lsrs	r3, r3, #2
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d808      	bhi.n	80048be <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6818      	ldr	r0, [r3, #0]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	6859      	ldr	r1, [r3, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	001a      	movs	r2, r3
 80048ba:	f7ff fcae 	bl	800421a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6819      	ldr	r1, [r3, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	001a      	movs	r2, r3
 80048cc:	f7ff fce8 	bl	80042a0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	db00      	blt.n	80048da <HAL_ADC_ConfigChannel+0x21e>
 80048d8:	e0bc      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048da:	4b50      	ldr	r3, [pc, #320]	@ (8004a1c <HAL_ADC_ConfigChannel+0x360>)
 80048dc:	0018      	movs	r0, r3
 80048de:	f7ff fc5b 	bl	8004198 <LL_ADC_GetCommonPathInternalCh>
 80048e2:	0003      	movs	r3, r0
 80048e4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a4d      	ldr	r2, [pc, #308]	@ (8004a20 <HAL_ADC_ConfigChannel+0x364>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d122      	bne.n	8004936 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	2380      	movs	r3, #128	@ 0x80
 80048f4:	041b      	lsls	r3, r3, #16
 80048f6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80048f8:	d11d      	bne.n	8004936 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2280      	movs	r2, #128	@ 0x80
 80048fe:	0412      	lsls	r2, r2, #16
 8004900:	4313      	orrs	r3, r2
 8004902:	4a46      	ldr	r2, [pc, #280]	@ (8004a1c <HAL_ADC_ConfigChannel+0x360>)
 8004904:	0019      	movs	r1, r3
 8004906:	0010      	movs	r0, r2
 8004908:	f7ff fc32 	bl	8004170 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800490c:	4b45      	ldr	r3, [pc, #276]	@ (8004a24 <HAL_ADC_ConfigChannel+0x368>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4945      	ldr	r1, [pc, #276]	@ (8004a28 <HAL_ADC_ConfigChannel+0x36c>)
 8004912:	0018      	movs	r0, r3
 8004914:	f7fb fbf8 	bl	8000108 <__udivsi3>
 8004918:	0003      	movs	r3, r0
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	0013      	movs	r3, r2
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	189b      	adds	r3, r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004926:	e002      	b.n	800492e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3b01      	subs	r3, #1
 800492c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1f9      	bne.n	8004928 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004934:	e08e      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a3c      	ldr	r2, [pc, #240]	@ (8004a2c <HAL_ADC_ConfigChannel+0x370>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d10e      	bne.n	800495e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	2380      	movs	r3, #128	@ 0x80
 8004944:	045b      	lsls	r3, r3, #17
 8004946:	4013      	ands	r3, r2
 8004948:	d109      	bne.n	800495e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2280      	movs	r2, #128	@ 0x80
 800494e:	0452      	lsls	r2, r2, #17
 8004950:	4313      	orrs	r3, r2
 8004952:	4a32      	ldr	r2, [pc, #200]	@ (8004a1c <HAL_ADC_ConfigChannel+0x360>)
 8004954:	0019      	movs	r1, r3
 8004956:	0010      	movs	r0, r2
 8004958:	f7ff fc0a 	bl	8004170 <LL_ADC_SetCommonPathInternalCh>
 800495c:	e07a      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a33      	ldr	r2, [pc, #204]	@ (8004a30 <HAL_ADC_ConfigChannel+0x374>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d000      	beq.n	800496a <HAL_ADC_ConfigChannel+0x2ae>
 8004968:	e074      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	2380      	movs	r3, #128	@ 0x80
 800496e:	03db      	lsls	r3, r3, #15
 8004970:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004972:	d000      	beq.n	8004976 <HAL_ADC_ConfigChannel+0x2ba>
 8004974:	e06e      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	2280      	movs	r2, #128	@ 0x80
 800497a:	03d2      	lsls	r2, r2, #15
 800497c:	4313      	orrs	r3, r2
 800497e:	4a27      	ldr	r2, [pc, #156]	@ (8004a1c <HAL_ADC_ConfigChannel+0x360>)
 8004980:	0019      	movs	r1, r3
 8004982:	0010      	movs	r0, r2
 8004984:	f7ff fbf4 	bl	8004170 <LL_ADC_SetCommonPathInternalCh>
 8004988:	e064      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	2380      	movs	r3, #128	@ 0x80
 8004990:	061b      	lsls	r3, r3, #24
 8004992:	429a      	cmp	r2, r3
 8004994:	d004      	beq.n	80049a0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800499a:	4a1f      	ldr	r2, [pc, #124]	@ (8004a18 <HAL_ADC_ConfigChannel+0x35c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d107      	bne.n	80049b0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	0019      	movs	r1, r3
 80049aa:	0010      	movs	r0, r2
 80049ac:	f7ff fc66 	bl	800427c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	da4d      	bge.n	8004a54 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049b8:	4b18      	ldr	r3, [pc, #96]	@ (8004a1c <HAL_ADC_ConfigChannel+0x360>)
 80049ba:	0018      	movs	r0, r3
 80049bc:	f7ff fbec 	bl	8004198 <LL_ADC_GetCommonPathInternalCh>
 80049c0:	0003      	movs	r3, r0
 80049c2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a15      	ldr	r2, [pc, #84]	@ (8004a20 <HAL_ADC_ConfigChannel+0x364>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d108      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	4a18      	ldr	r2, [pc, #96]	@ (8004a34 <HAL_ADC_ConfigChannel+0x378>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	4a11      	ldr	r2, [pc, #68]	@ (8004a1c <HAL_ADC_ConfigChannel+0x360>)
 80049d6:	0019      	movs	r1, r3
 80049d8:	0010      	movs	r0, r2
 80049da:	f7ff fbc9 	bl	8004170 <LL_ADC_SetCommonPathInternalCh>
 80049de:	e039      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a11      	ldr	r2, [pc, #68]	@ (8004a2c <HAL_ADC_ConfigChannel+0x370>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d108      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	4a12      	ldr	r2, [pc, #72]	@ (8004a38 <HAL_ADC_ConfigChannel+0x37c>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	4a0a      	ldr	r2, [pc, #40]	@ (8004a1c <HAL_ADC_ConfigChannel+0x360>)
 80049f2:	0019      	movs	r1, r3
 80049f4:	0010      	movs	r0, r2
 80049f6:	f7ff fbbb 	bl	8004170 <LL_ADC_SetCommonPathInternalCh>
 80049fa:	e02b      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a0b      	ldr	r2, [pc, #44]	@ (8004a30 <HAL_ADC_ConfigChannel+0x374>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d126      	bne.n	8004a54 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	4a0c      	ldr	r2, [pc, #48]	@ (8004a3c <HAL_ADC_ConfigChannel+0x380>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	4a03      	ldr	r2, [pc, #12]	@ (8004a1c <HAL_ADC_ConfigChannel+0x360>)
 8004a0e:	0019      	movs	r1, r3
 8004a10:	0010      	movs	r0, r2
 8004a12:	f7ff fbad 	bl	8004170 <LL_ADC_SetCommonPathInternalCh>
 8004a16:	e01d      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x398>
 8004a18:	80000004 	.word	0x80000004
 8004a1c:	40012708 	.word	0x40012708
 8004a20:	b0001000 	.word	0xb0001000
 8004a24:	20000000 	.word	0x20000000
 8004a28:	00030d40 	.word	0x00030d40
 8004a2c:	b8004000 	.word	0xb8004000
 8004a30:	b4002000 	.word	0xb4002000
 8004a34:	ff7fffff 	.word	0xff7fffff
 8004a38:	feffffff 	.word	0xfeffffff
 8004a3c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a44:	2220      	movs	r2, #32
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004a4c:	2317      	movs	r3, #23
 8004a4e:	18fb      	adds	r3, r7, r3
 8004a50:	2201      	movs	r2, #1
 8004a52:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2254      	movs	r2, #84	@ 0x54
 8004a58:	2100      	movs	r1, #0
 8004a5a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004a5c:	2317      	movs	r3, #23
 8004a5e:	18fb      	adds	r3, r7, r3
 8004a60:	781b      	ldrb	r3, [r3, #0]
}
 8004a62:	0018      	movs	r0, r3
 8004a64:	46bd      	mov	sp, r7
 8004a66:	b006      	add	sp, #24
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	46c0      	nop			@ (mov r8, r8)

08004a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a6c:	b590      	push	{r4, r7, lr}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	0002      	movs	r2, r0
 8004a74:	6039      	str	r1, [r7, #0]
 8004a76:	1dfb      	adds	r3, r7, #7
 8004a78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004a7a:	1dfb      	adds	r3, r7, #7
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a80:	d828      	bhi.n	8004ad4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a82:	4a2f      	ldr	r2, [pc, #188]	@ (8004b40 <__NVIC_SetPriority+0xd4>)
 8004a84:	1dfb      	adds	r3, r7, #7
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	b25b      	sxtb	r3, r3
 8004a8a:	089b      	lsrs	r3, r3, #2
 8004a8c:	33c0      	adds	r3, #192	@ 0xc0
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	589b      	ldr	r3, [r3, r2]
 8004a92:	1dfa      	adds	r2, r7, #7
 8004a94:	7812      	ldrb	r2, [r2, #0]
 8004a96:	0011      	movs	r1, r2
 8004a98:	2203      	movs	r2, #3
 8004a9a:	400a      	ands	r2, r1
 8004a9c:	00d2      	lsls	r2, r2, #3
 8004a9e:	21ff      	movs	r1, #255	@ 0xff
 8004aa0:	4091      	lsls	r1, r2
 8004aa2:	000a      	movs	r2, r1
 8004aa4:	43d2      	mvns	r2, r2
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	019b      	lsls	r3, r3, #6
 8004aae:	22ff      	movs	r2, #255	@ 0xff
 8004ab0:	401a      	ands	r2, r3
 8004ab2:	1dfb      	adds	r3, r7, #7
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	2303      	movs	r3, #3
 8004aba:	4003      	ands	r3, r0
 8004abc:	00db      	lsls	r3, r3, #3
 8004abe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ac0:	481f      	ldr	r0, [pc, #124]	@ (8004b40 <__NVIC_SetPriority+0xd4>)
 8004ac2:	1dfb      	adds	r3, r7, #7
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	b25b      	sxtb	r3, r3
 8004ac8:	089b      	lsrs	r3, r3, #2
 8004aca:	430a      	orrs	r2, r1
 8004acc:	33c0      	adds	r3, #192	@ 0xc0
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004ad2:	e031      	b.n	8004b38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b44 <__NVIC_SetPriority+0xd8>)
 8004ad6:	1dfb      	adds	r3, r7, #7
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	0019      	movs	r1, r3
 8004adc:	230f      	movs	r3, #15
 8004ade:	400b      	ands	r3, r1
 8004ae0:	3b08      	subs	r3, #8
 8004ae2:	089b      	lsrs	r3, r3, #2
 8004ae4:	3306      	adds	r3, #6
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	18d3      	adds	r3, r2, r3
 8004aea:	3304      	adds	r3, #4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	1dfa      	adds	r2, r7, #7
 8004af0:	7812      	ldrb	r2, [r2, #0]
 8004af2:	0011      	movs	r1, r2
 8004af4:	2203      	movs	r2, #3
 8004af6:	400a      	ands	r2, r1
 8004af8:	00d2      	lsls	r2, r2, #3
 8004afa:	21ff      	movs	r1, #255	@ 0xff
 8004afc:	4091      	lsls	r1, r2
 8004afe:	000a      	movs	r2, r1
 8004b00:	43d2      	mvns	r2, r2
 8004b02:	401a      	ands	r2, r3
 8004b04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	019b      	lsls	r3, r3, #6
 8004b0a:	22ff      	movs	r2, #255	@ 0xff
 8004b0c:	401a      	ands	r2, r3
 8004b0e:	1dfb      	adds	r3, r7, #7
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	0018      	movs	r0, r3
 8004b14:	2303      	movs	r3, #3
 8004b16:	4003      	ands	r3, r0
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b1c:	4809      	ldr	r0, [pc, #36]	@ (8004b44 <__NVIC_SetPriority+0xd8>)
 8004b1e:	1dfb      	adds	r3, r7, #7
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	001c      	movs	r4, r3
 8004b24:	230f      	movs	r3, #15
 8004b26:	4023      	ands	r3, r4
 8004b28:	3b08      	subs	r3, #8
 8004b2a:	089b      	lsrs	r3, r3, #2
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	3306      	adds	r3, #6
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	18c3      	adds	r3, r0, r3
 8004b34:	3304      	adds	r3, #4
 8004b36:	601a      	str	r2, [r3, #0]
}
 8004b38:	46c0      	nop			@ (mov r8, r8)
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b003      	add	sp, #12
 8004b3e:	bd90      	pop	{r4, r7, pc}
 8004b40:	e000e100 	.word	0xe000e100
 8004b44:	e000ed00 	.word	0xe000ed00

08004b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	1e5a      	subs	r2, r3, #1
 8004b54:	2380      	movs	r3, #128	@ 0x80
 8004b56:	045b      	lsls	r3, r3, #17
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d301      	bcc.n	8004b60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e010      	b.n	8004b82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b60:	4b0a      	ldr	r3, [pc, #40]	@ (8004b8c <SysTick_Config+0x44>)
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	3a01      	subs	r2, #1
 8004b66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b68:	2301      	movs	r3, #1
 8004b6a:	425b      	negs	r3, r3
 8004b6c:	2103      	movs	r1, #3
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f7ff ff7c 	bl	8004a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b74:	4b05      	ldr	r3, [pc, #20]	@ (8004b8c <SysTick_Config+0x44>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b7a:	4b04      	ldr	r3, [pc, #16]	@ (8004b8c <SysTick_Config+0x44>)
 8004b7c:	2207      	movs	r2, #7
 8004b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	0018      	movs	r0, r3
 8004b84:	46bd      	mov	sp, r7
 8004b86:	b002      	add	sp, #8
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	46c0      	nop			@ (mov r8, r8)
 8004b8c:	e000e010 	.word	0xe000e010

08004b90 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60b9      	str	r1, [r7, #8]
 8004b98:	607a      	str	r2, [r7, #4]
 8004b9a:	210f      	movs	r1, #15
 8004b9c:	187b      	adds	r3, r7, r1
 8004b9e:	1c02      	adds	r2, r0, #0
 8004ba0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	187b      	adds	r3, r7, r1
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	b25b      	sxtb	r3, r3
 8004baa:	0011      	movs	r1, r2
 8004bac:	0018      	movs	r0, r3
 8004bae:	f7ff ff5d 	bl	8004a6c <__NVIC_SetPriority>
}
 8004bb2:	46c0      	nop			@ (mov r8, r8)
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	b004      	add	sp, #16
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f7ff ffbf 	bl	8004b48 <SysTick_Config>
 8004bca:	0003      	movs	r3, r0
}
 8004bcc:	0018      	movs	r0, r3
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	b002      	add	sp, #8
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e14e      	b.n	8004e84 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	225c      	movs	r2, #92	@ 0x5c
 8004bea:	5c9b      	ldrb	r3, [r3, r2]
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d107      	bne.n	8004c02 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	225d      	movs	r2, #93	@ 0x5d
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f7ff f8d9 	bl	8003db4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699a      	ldr	r2, [r3, #24]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2110      	movs	r1, #16
 8004c0e:	438a      	bics	r2, r1
 8004c10:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c12:	f7ff fa8d 	bl	8004130 <HAL_GetTick>
 8004c16:	0003      	movs	r3, r0
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004c1a:	e012      	b.n	8004c42 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004c1c:	f7ff fa88 	bl	8004130 <HAL_GetTick>
 8004c20:	0002      	movs	r2, r0
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b0a      	cmp	r3, #10
 8004c28:	d90b      	bls.n	8004c42 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c2e:	2201      	movs	r2, #1
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	225c      	movs	r2, #92	@ 0x5c
 8004c3a:	2103      	movs	r1, #3
 8004c3c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e120      	b.n	8004e84 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	2208      	movs	r2, #8
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d0e5      	beq.n	8004c1c <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699a      	ldr	r2, [r3, #24]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c60:	f7ff fa66 	bl	8004130 <HAL_GetTick>
 8004c64:	0003      	movs	r3, r0
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004c68:	e012      	b.n	8004c90 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004c6a:	f7ff fa61 	bl	8004130 <HAL_GetTick>
 8004c6e:	0002      	movs	r2, r0
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b0a      	cmp	r3, #10
 8004c76:	d90b      	bls.n	8004c90 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	225c      	movs	r2, #92	@ 0x5c
 8004c88:	2103      	movs	r1, #3
 8004c8a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e0f9      	b.n	8004e84 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	2201      	movs	r2, #1
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d0e6      	beq.n	8004c6a <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2102      	movs	r1, #2
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a76      	ldr	r2, [pc, #472]	@ (8004e8c <HAL_FDCAN_Init+0x2b8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d103      	bne.n	8004cbe <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004cb6:	4a76      	ldr	r2, [pc, #472]	@ (8004e90 <HAL_FDCAN_Init+0x2bc>)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	7c1b      	ldrb	r3, [r3, #16]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d108      	bne.n	8004cd8 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	699a      	ldr	r2, [r3, #24]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2140      	movs	r1, #64	@ 0x40
 8004cd2:	438a      	bics	r2, r1
 8004cd4:	619a      	str	r2, [r3, #24]
 8004cd6:	e007      	b.n	8004ce8 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2140      	movs	r1, #64	@ 0x40
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	7c5b      	ldrb	r3, [r3, #17]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d109      	bne.n	8004d04 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699a      	ldr	r2, [r3, #24]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2180      	movs	r1, #128	@ 0x80
 8004cfc:	01c9      	lsls	r1, r1, #7
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	619a      	str	r2, [r3, #24]
 8004d02:	e007      	b.n	8004d14 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699a      	ldr	r2, [r3, #24]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4961      	ldr	r1, [pc, #388]	@ (8004e94 <HAL_FDCAN_Init+0x2c0>)
 8004d10:	400a      	ands	r2, r1
 8004d12:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	7c9b      	ldrb	r3, [r3, #18]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d108      	bne.n	8004d2e <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699a      	ldr	r2, [r3, #24]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	495c      	ldr	r1, [pc, #368]	@ (8004e98 <HAL_FDCAN_Init+0x2c4>)
 8004d28:	400a      	ands	r2, r1
 8004d2a:	619a      	str	r2, [r3, #24]
 8004d2c:	e008      	b.n	8004d40 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	699a      	ldr	r2, [r3, #24]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2180      	movs	r1, #128	@ 0x80
 8004d3a:	0149      	lsls	r1, r1, #5
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	4a55      	ldr	r2, [pc, #340]	@ (8004e9c <HAL_FDCAN_Init+0x2c8>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	0019      	movs	r1, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	21a4      	movs	r1, #164	@ 0xa4
 8004d64:	438a      	bics	r2, r1
 8004d66:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691a      	ldr	r2, [r3, #16]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2110      	movs	r1, #16
 8004d74:	438a      	bics	r2, r1
 8004d76:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d108      	bne.n	8004d92 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2104      	movs	r1, #4
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	619a      	str	r2, [r3, #24]
 8004d90:	e02c      	b.n	8004dec <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d028      	beq.n	8004dec <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d01c      	beq.n	8004ddc <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	699a      	ldr	r2, [r3, #24]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2180      	movs	r1, #128	@ 0x80
 8004dae:	430a      	orrs	r2, r1
 8004db0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2110      	movs	r1, #16
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	d110      	bne.n	8004dec <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	699a      	ldr	r2, [r3, #24]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2120      	movs	r1, #32
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	619a      	str	r2, [r3, #24]
 8004dda:	e007      	b.n	8004dec <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2120      	movs	r1, #32
 8004de8:	430a      	orrs	r2, r1
 8004dea:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004dfc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004e04:	431a      	orrs	r2, r3
 8004e06:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004e14:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e16:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	23c0      	movs	r3, #192	@ 0xc0
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d115      	bne.n	8004e50 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e28:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004e32:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e44:	3b01      	subs	r3, #1
 8004e46:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004e4c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004e4e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	22c0      	movs	r2, #192	@ 0xc0
 8004e56:	5899      	ldr	r1, [r3, r2]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	21c0      	movs	r1, #192	@ 0xc0
 8004e64:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	0018      	movs	r0, r3
 8004e6a:	f000 f85f 	bl	8004f2c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	225c      	movs	r2, #92	@ 0x5c
 8004e7e:	2101      	movs	r1, #1
 8004e80:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	0018      	movs	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	b004      	add	sp, #16
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40006400 	.word	0x40006400
 8004e90:	40006500 	.word	0x40006500
 8004e94:	ffffbfff 	.word	0xffffbfff
 8004e98:	ffffefff 	.word	0xffffefff
 8004e9c:	fffffcff 	.word	0xfffffcff

08004ea0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	225c      	movs	r2, #92	@ 0x5c
 8004eb0:	5c9b      	ldrb	r3, [r3, r2]
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d12d      	bne.n	8004f14 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	22c4      	movs	r2, #196	@ 0xc4
 8004ebe:	589a      	ldr	r2, [r3, r2]
 8004ec0:	2380      	movs	r3, #128	@ 0x80
 8004ec2:	039b      	lsls	r3, r3, #14
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	d008      	beq.n	8004eda <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ecc:	2280      	movs	r2, #128	@ 0x80
 8004ece:	0092      	lsls	r2, r2, #2
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e023      	b.n	8004f22 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	22c4      	movs	r2, #196	@ 0xc4
 8004ee0:	589b      	ldr	r3, [r3, r2]
 8004ee2:	0c1b      	lsrs	r3, r3, #16
 8004ee4:	2203      	movs	r2, #3
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	68b9      	ldr	r1, [r7, #8]
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f887 	bl	8005004 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2101      	movs	r1, #1
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	4091      	lsls	r1, r2
 8004f00:	000a      	movs	r2, r1
 8004f02:	21cc      	movs	r1, #204	@ 0xcc
 8004f04:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004f06:	2201      	movs	r2, #1
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	409a      	lsls	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	e006      	b.n	8004f22 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f18:	2208      	movs	r2, #8
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
  }
}
 8004f22:	0018      	movs	r0, r3
 8004f24:	46bd      	mov	sp, r7
 8004f26:	b006      	add	sp, #24
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004f34:	4b2f      	ldr	r3, [pc, #188]	@ (8004ff4 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8004f36:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ff8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d105      	bne.n	8004f4e <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	22d4      	movs	r2, #212	@ 0xd4
 8004f46:	0092      	lsls	r2, r2, #2
 8004f48:	4694      	mov	ip, r2
 8004f4a:	4463      	add	r3, ip
 8004f4c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2280      	movs	r2, #128	@ 0x80
 8004f5a:	589b      	ldr	r3, [r3, r2]
 8004f5c:	4a27      	ldr	r2, [pc, #156]	@ (8004ffc <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	0019      	movs	r1, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f66:	041a      	lsls	r2, r3, #16
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	2180      	movs	r1, #128	@ 0x80
 8004f70:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	3370      	adds	r3, #112	@ 0x70
 8004f76:	001a      	movs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2280      	movs	r2, #128	@ 0x80
 8004f82:	589b      	ldr	r3, [r3, r2]
 8004f84:	4a1e      	ldr	r2, [pc, #120]	@ (8005000 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004f86:	4013      	ands	r3, r2
 8004f88:	0019      	movs	r1, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8e:	061a      	lsls	r2, r3, #24
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	2180      	movs	r1, #128	@ 0x80
 8004f98:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	33b0      	adds	r3, #176	@ 0xb0
 8004f9e:	001a      	movs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	3389      	adds	r3, #137	@ 0x89
 8004fa8:	33ff      	adds	r3, #255	@ 0xff
 8004faa:	001a      	movs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2298      	movs	r2, #152	@ 0x98
 8004fb4:	0092      	lsls	r2, r2, #2
 8004fb6:	189a      	adds	r2, r3, r2
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	229e      	movs	r2, #158	@ 0x9e
 8004fc0:	0092      	lsls	r2, r2, #2
 8004fc2:	189a      	adds	r2, r3, r2
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	e005      	b.n	8004fda <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	22d4      	movs	r2, #212	@ 0xd4
 8004fde:	0092      	lsls	r2, r2, #2
 8004fe0:	4694      	mov	ip, r2
 8004fe2:	4463      	add	r3, ip
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d3f1      	bcc.n	8004fce <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8004fea:	46c0      	nop			@ (mov r8, r8)
 8004fec:	46c0      	nop			@ (mov r8, r8)
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	b004      	add	sp, #16
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	4000b400 	.word	0x4000b400
 8004ff8:	40006800 	.word	0x40006800
 8004ffc:	ffe0ffff 	.word	0xffe0ffff
 8005000:	f0ffffff 	.word	0xf0ffffff

08005004 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10a      	bne.n	8005030 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005022:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800502a:	4313      	orrs	r3, r2
 800502c:	61fb      	str	r3, [r7, #28]
 800502e:	e00b      	b.n	8005048 <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005038:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800503e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005040:	2280      	movs	r2, #128	@ 0x80
 8005042:	05d2      	lsls	r2, r2, #23
 8005044:	4313      	orrs	r3, r2
 8005046:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005052:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005058:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800505e:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	0013      	movs	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	189b      	adds	r3, r3, r2
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	18cb      	adds	r3, r1, r3
 800507a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	69fa      	ldr	r2, [r7, #28]
 8005080:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	3304      	adds	r3, #4
 8005086:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	3304      	adds	r3, #4
 8005092:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005094:	2300      	movs	r3, #0
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	e020      	b.n	80050dc <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	3303      	adds	r3, #3
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	18d3      	adds	r3, r2, r3
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	3302      	adds	r3, #2
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	18cb      	adds	r3, r1, r3
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80050b2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	3301      	adds	r3, #1
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	18cb      	adds	r3, r1, r3
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80050c0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	188a      	adds	r2, r1, r2
 80050c8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80050ca:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	3304      	adds	r3, #4
 80050d4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	3304      	adds	r3, #4
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	4a05      	ldr	r2, [pc, #20]	@ (80050f8 <FDCAN_CopyMessageToRAM+0xf4>)
 80050e2:	5cd3      	ldrb	r3, [r2, r3]
 80050e4:	001a      	movs	r2, r3
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d3d6      	bcc.n	800509a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80050ec:	46c0      	nop			@ (mov r8, r8)
 80050ee:	46c0      	nop			@ (mov r8, r8)
 80050f0:	46bd      	mov	sp, r7
 80050f2:	b008      	add	sp, #32
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	46c0      	nop			@ (mov r8, r8)
 80050f8:	08009f10 	.word	0x08009f10

080050fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800510a:	e14d      	b.n	80053a8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2101      	movs	r1, #1
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	4091      	lsls	r1, r2
 8005116:	000a      	movs	r2, r1
 8005118:	4013      	ands	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d100      	bne.n	8005124 <HAL_GPIO_Init+0x28>
 8005122:	e13e      	b.n	80053a2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2203      	movs	r2, #3
 800512a:	4013      	ands	r3, r2
 800512c:	2b01      	cmp	r3, #1
 800512e:	d005      	beq.n	800513c <HAL_GPIO_Init+0x40>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2203      	movs	r2, #3
 8005136:	4013      	ands	r3, r2
 8005138:	2b02      	cmp	r3, #2
 800513a:	d130      	bne.n	800519e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	2203      	movs	r2, #3
 8005148:	409a      	lsls	r2, r3
 800514a:	0013      	movs	r3, r2
 800514c:	43da      	mvns	r2, r3
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	4013      	ands	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	409a      	lsls	r2, r3
 800515e:	0013      	movs	r3, r2
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	4313      	orrs	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005172:	2201      	movs	r2, #1
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	409a      	lsls	r2, r3
 8005178:	0013      	movs	r3, r2
 800517a:	43da      	mvns	r2, r3
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	4013      	ands	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	091b      	lsrs	r3, r3, #4
 8005188:	2201      	movs	r2, #1
 800518a:	401a      	ands	r2, r3
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	409a      	lsls	r2, r3
 8005190:	0013      	movs	r3, r2
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2203      	movs	r2, #3
 80051a4:	4013      	ands	r3, r2
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d017      	beq.n	80051da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	2203      	movs	r2, #3
 80051b6:	409a      	lsls	r2, r3
 80051b8:	0013      	movs	r3, r2
 80051ba:	43da      	mvns	r2, r3
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4013      	ands	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	409a      	lsls	r2, r3
 80051cc:	0013      	movs	r3, r2
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2203      	movs	r2, #3
 80051e0:	4013      	ands	r3, r2
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d123      	bne.n	800522e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	08da      	lsrs	r2, r3, #3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3208      	adds	r2, #8
 80051ee:	0092      	lsls	r2, r2, #2
 80051f0:	58d3      	ldr	r3, [r2, r3]
 80051f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	2207      	movs	r2, #7
 80051f8:	4013      	ands	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	220f      	movs	r2, #15
 80051fe:	409a      	lsls	r2, r3
 8005200:	0013      	movs	r3, r2
 8005202:	43da      	mvns	r2, r3
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4013      	ands	r3, r2
 8005208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	691a      	ldr	r2, [r3, #16]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2107      	movs	r1, #7
 8005212:	400b      	ands	r3, r1
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	409a      	lsls	r2, r3
 8005218:	0013      	movs	r3, r2
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	08da      	lsrs	r2, r3, #3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3208      	adds	r2, #8
 8005228:	0092      	lsls	r2, r2, #2
 800522a:	6939      	ldr	r1, [r7, #16]
 800522c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	2203      	movs	r2, #3
 800523a:	409a      	lsls	r2, r3
 800523c:	0013      	movs	r3, r2
 800523e:	43da      	mvns	r2, r3
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	4013      	ands	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2203      	movs	r2, #3
 800524c:	401a      	ands	r2, r3
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	409a      	lsls	r2, r3
 8005254:	0013      	movs	r3, r2
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	23c0      	movs	r3, #192	@ 0xc0
 8005268:	029b      	lsls	r3, r3, #10
 800526a:	4013      	ands	r3, r2
 800526c:	d100      	bne.n	8005270 <HAL_GPIO_Init+0x174>
 800526e:	e098      	b.n	80053a2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005270:	4a53      	ldr	r2, [pc, #332]	@ (80053c0 <HAL_GPIO_Init+0x2c4>)
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	089b      	lsrs	r3, r3, #2
 8005276:	3318      	adds	r3, #24
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	589b      	ldr	r3, [r3, r2]
 800527c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2203      	movs	r2, #3
 8005282:	4013      	ands	r3, r2
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	220f      	movs	r2, #15
 8005288:	409a      	lsls	r2, r3
 800528a:	0013      	movs	r3, r2
 800528c:	43da      	mvns	r2, r3
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4013      	ands	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	23a0      	movs	r3, #160	@ 0xa0
 8005298:	05db      	lsls	r3, r3, #23
 800529a:	429a      	cmp	r2, r3
 800529c:	d019      	beq.n	80052d2 <HAL_GPIO_Init+0x1d6>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a48      	ldr	r2, [pc, #288]	@ (80053c4 <HAL_GPIO_Init+0x2c8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <HAL_GPIO_Init+0x1d2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a47      	ldr	r2, [pc, #284]	@ (80053c8 <HAL_GPIO_Init+0x2cc>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00d      	beq.n	80052ca <HAL_GPIO_Init+0x1ce>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a46      	ldr	r2, [pc, #280]	@ (80053cc <HAL_GPIO_Init+0x2d0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d007      	beq.n	80052c6 <HAL_GPIO_Init+0x1ca>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a45      	ldr	r2, [pc, #276]	@ (80053d0 <HAL_GPIO_Init+0x2d4>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d101      	bne.n	80052c2 <HAL_GPIO_Init+0x1c6>
 80052be:	2304      	movs	r3, #4
 80052c0:	e008      	b.n	80052d4 <HAL_GPIO_Init+0x1d8>
 80052c2:	2305      	movs	r3, #5
 80052c4:	e006      	b.n	80052d4 <HAL_GPIO_Init+0x1d8>
 80052c6:	2303      	movs	r3, #3
 80052c8:	e004      	b.n	80052d4 <HAL_GPIO_Init+0x1d8>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e002      	b.n	80052d4 <HAL_GPIO_Init+0x1d8>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <HAL_GPIO_Init+0x1d8>
 80052d2:	2300      	movs	r3, #0
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	2103      	movs	r1, #3
 80052d8:	400a      	ands	r2, r1
 80052da:	00d2      	lsls	r2, r2, #3
 80052dc:	4093      	lsls	r3, r2
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80052e4:	4936      	ldr	r1, [pc, #216]	@ (80053c0 <HAL_GPIO_Init+0x2c4>)
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	089b      	lsrs	r3, r3, #2
 80052ea:	3318      	adds	r3, #24
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052f2:	4b33      	ldr	r3, [pc, #204]	@ (80053c0 <HAL_GPIO_Init+0x2c4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	43da      	mvns	r2, r3
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	4013      	ands	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	2380      	movs	r3, #128	@ 0x80
 8005308:	035b      	lsls	r3, r3, #13
 800530a:	4013      	ands	r3, r2
 800530c:	d003      	beq.n	8005316 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005316:	4b2a      	ldr	r3, [pc, #168]	@ (80053c0 <HAL_GPIO_Init+0x2c4>)
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800531c:	4b28      	ldr	r3, [pc, #160]	@ (80053c0 <HAL_GPIO_Init+0x2c4>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	43da      	mvns	r2, r3
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4013      	ands	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	2380      	movs	r3, #128	@ 0x80
 8005332:	039b      	lsls	r3, r3, #14
 8005334:	4013      	ands	r3, r2
 8005336:	d003      	beq.n	8005340 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005340:	4b1f      	ldr	r3, [pc, #124]	@ (80053c0 <HAL_GPIO_Init+0x2c4>)
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005346:	4a1e      	ldr	r2, [pc, #120]	@ (80053c0 <HAL_GPIO_Init+0x2c4>)
 8005348:	2384      	movs	r3, #132	@ 0x84
 800534a:	58d3      	ldr	r3, [r2, r3]
 800534c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	43da      	mvns	r2, r3
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4013      	ands	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	2380      	movs	r3, #128	@ 0x80
 800535e:	029b      	lsls	r3, r3, #10
 8005360:	4013      	ands	r3, r2
 8005362:	d003      	beq.n	800536c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800536c:	4914      	ldr	r1, [pc, #80]	@ (80053c0 <HAL_GPIO_Init+0x2c4>)
 800536e:	2284      	movs	r2, #132	@ 0x84
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005374:	4a12      	ldr	r2, [pc, #72]	@ (80053c0 <HAL_GPIO_Init+0x2c4>)
 8005376:	2380      	movs	r3, #128	@ 0x80
 8005378:	58d3      	ldr	r3, [r2, r3]
 800537a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	43da      	mvns	r2, r3
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	4013      	ands	r3, r2
 8005384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	2380      	movs	r3, #128	@ 0x80
 800538c:	025b      	lsls	r3, r3, #9
 800538e:	4013      	ands	r3, r2
 8005390:	d003      	beq.n	800539a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800539a:	4909      	ldr	r1, [pc, #36]	@ (80053c0 <HAL_GPIO_Init+0x2c4>)
 800539c:	2280      	movs	r2, #128	@ 0x80
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	3301      	adds	r3, #1
 80053a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	40da      	lsrs	r2, r3
 80053b0:	1e13      	subs	r3, r2, #0
 80053b2:	d000      	beq.n	80053b6 <HAL_GPIO_Init+0x2ba>
 80053b4:	e6aa      	b.n	800510c <HAL_GPIO_Init+0x10>
  }
}
 80053b6:	46c0      	nop			@ (mov r8, r8)
 80053b8:	46c0      	nop			@ (mov r8, r8)
 80053ba:	46bd      	mov	sp, r7
 80053bc:	b006      	add	sp, #24
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40021800 	.word	0x40021800
 80053c4:	50000400 	.word	0x50000400
 80053c8:	50000800 	.word	0x50000800
 80053cc:	50000c00 	.word	0x50000c00
 80053d0:	50001000 	.word	0x50001000

080053d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	0008      	movs	r0, r1
 80053de:	0011      	movs	r1, r2
 80053e0:	1cbb      	adds	r3, r7, #2
 80053e2:	1c02      	adds	r2, r0, #0
 80053e4:	801a      	strh	r2, [r3, #0]
 80053e6:	1c7b      	adds	r3, r7, #1
 80053e8:	1c0a      	adds	r2, r1, #0
 80053ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053ec:	1c7b      	adds	r3, r7, #1
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d004      	beq.n	80053fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053f4:	1cbb      	adds	r3, r7, #2
 80053f6:	881a      	ldrh	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053fc:	e003      	b.n	8005406 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053fe:	1cbb      	adds	r3, r7, #2
 8005400:	881a      	ldrh	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005406:	46c0      	nop			@ (mov r8, r8)
 8005408:	46bd      	mov	sp, r7
 800540a:	b002      	add	sp, #8
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b084      	sub	sp, #16
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	000a      	movs	r2, r1
 8005418:	1cbb      	adds	r3, r7, #2
 800541a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005422:	1cbb      	adds	r3, r7, #2
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4013      	ands	r3, r2
 800542a:	041a      	lsls	r2, r3, #16
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	43db      	mvns	r3, r3
 8005430:	1cb9      	adds	r1, r7, #2
 8005432:	8809      	ldrh	r1, [r1, #0]
 8005434:	400b      	ands	r3, r1
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	619a      	str	r2, [r3, #24]
}
 800543c:	46c0      	nop			@ (mov r8, r8)
 800543e:	46bd      	mov	sp, r7
 8005440:	b004      	add	sp, #16
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e08f      	b.n	8005576 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2241      	movs	r2, #65	@ 0x41
 800545a:	5c9b      	ldrb	r3, [r3, r2]
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d107      	bne.n	8005472 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2240      	movs	r2, #64	@ 0x40
 8005466:	2100      	movs	r1, #0
 8005468:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	0018      	movs	r0, r3
 800546e:	f7fe fd03 	bl	8003e78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2241      	movs	r2, #65	@ 0x41
 8005476:	2124      	movs	r1, #36	@ 0x24
 8005478:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2101      	movs	r1, #1
 8005486:	438a      	bics	r2, r1
 8005488:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	493b      	ldr	r1, [pc, #236]	@ (8005580 <HAL_I2C_Init+0x13c>)
 8005494:	400a      	ands	r2, r1
 8005496:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4938      	ldr	r1, [pc, #224]	@ (8005584 <HAL_I2C_Init+0x140>)
 80054a4:	400a      	ands	r2, r1
 80054a6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d108      	bne.n	80054c2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2180      	movs	r1, #128	@ 0x80
 80054ba:	0209      	lsls	r1, r1, #8
 80054bc:	430a      	orrs	r2, r1
 80054be:	609a      	str	r2, [r3, #8]
 80054c0:	e007      	b.n	80054d2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2184      	movs	r1, #132	@ 0x84
 80054cc:	0209      	lsls	r1, r1, #8
 80054ce:	430a      	orrs	r2, r1
 80054d0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d109      	bne.n	80054ee <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2180      	movs	r1, #128	@ 0x80
 80054e6:	0109      	lsls	r1, r1, #4
 80054e8:	430a      	orrs	r2, r1
 80054ea:	605a      	str	r2, [r3, #4]
 80054ec:	e007      	b.n	80054fe <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4923      	ldr	r1, [pc, #140]	@ (8005588 <HAL_I2C_Init+0x144>)
 80054fa:	400a      	ands	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4920      	ldr	r1, [pc, #128]	@ (800558c <HAL_I2C_Init+0x148>)
 800550a:	430a      	orrs	r2, r1
 800550c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	491a      	ldr	r1, [pc, #104]	@ (8005584 <HAL_I2C_Init+0x140>)
 800551a:	400a      	ands	r2, r1
 800551c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691a      	ldr	r2, [r3, #16]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	431a      	orrs	r2, r3
 8005528:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	69d9      	ldr	r1, [r3, #28]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1a      	ldr	r2, [r3, #32]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2101      	movs	r1, #1
 8005554:	430a      	orrs	r2, r1
 8005556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2241      	movs	r2, #65	@ 0x41
 8005562:	2120      	movs	r1, #32
 8005564:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2242      	movs	r2, #66	@ 0x42
 8005570:	2100      	movs	r1, #0
 8005572:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	0018      	movs	r0, r3
 8005578:	46bd      	mov	sp, r7
 800557a:	b002      	add	sp, #8
 800557c:	bd80      	pop	{r7, pc}
 800557e:	46c0      	nop			@ (mov r8, r8)
 8005580:	f0ffffff 	.word	0xf0ffffff
 8005584:	ffff7fff 	.word	0xffff7fff
 8005588:	fffff7ff 	.word	0xfffff7ff
 800558c:	02008000 	.word	0x02008000

08005590 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005590:	b590      	push	{r4, r7, lr}
 8005592:	b089      	sub	sp, #36	@ 0x24
 8005594:	af02      	add	r7, sp, #8
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	000c      	movs	r4, r1
 800559a:	0010      	movs	r0, r2
 800559c:	0019      	movs	r1, r3
 800559e:	230a      	movs	r3, #10
 80055a0:	18fb      	adds	r3, r7, r3
 80055a2:	1c22      	adds	r2, r4, #0
 80055a4:	801a      	strh	r2, [r3, #0]
 80055a6:	2308      	movs	r3, #8
 80055a8:	18fb      	adds	r3, r7, r3
 80055aa:	1c02      	adds	r2, r0, #0
 80055ac:	801a      	strh	r2, [r3, #0]
 80055ae:	1dbb      	adds	r3, r7, #6
 80055b0:	1c0a      	adds	r2, r1, #0
 80055b2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2241      	movs	r2, #65	@ 0x41
 80055b8:	5c9b      	ldrb	r3, [r3, r2]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d000      	beq.n	80055c2 <HAL_I2C_Mem_Write+0x32>
 80055c0:	e10c      	b.n	80057dc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d004      	beq.n	80055d2 <HAL_I2C_Mem_Write+0x42>
 80055c8:	232c      	movs	r3, #44	@ 0x2c
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d105      	bne.n	80055de <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2280      	movs	r2, #128	@ 0x80
 80055d6:	0092      	lsls	r2, r2, #2
 80055d8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e0ff      	b.n	80057de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2240      	movs	r2, #64	@ 0x40
 80055e2:	5c9b      	ldrb	r3, [r3, r2]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_I2C_Mem_Write+0x5c>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e0f8      	b.n	80057de <HAL_I2C_Mem_Write+0x24e>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2240      	movs	r2, #64	@ 0x40
 80055f0:	2101      	movs	r1, #1
 80055f2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055f4:	f7fe fd9c 	bl	8004130 <HAL_GetTick>
 80055f8:	0003      	movs	r3, r0
 80055fa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055fc:	2380      	movs	r3, #128	@ 0x80
 80055fe:	0219      	lsls	r1, r3, #8
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	2319      	movs	r3, #25
 8005608:	2201      	movs	r2, #1
 800560a:	f000 fc07 	bl	8005e1c <I2C_WaitOnFlagUntilTimeout>
 800560e:	1e03      	subs	r3, r0, #0
 8005610:	d001      	beq.n	8005616 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e0e3      	b.n	80057de <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2241      	movs	r2, #65	@ 0x41
 800561a:	2121      	movs	r1, #33	@ 0x21
 800561c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2242      	movs	r2, #66	@ 0x42
 8005622:	2140      	movs	r1, #64	@ 0x40
 8005624:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005630:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	222c      	movs	r2, #44	@ 0x2c
 8005636:	18ba      	adds	r2, r7, r2
 8005638:	8812      	ldrh	r2, [r2, #0]
 800563a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005642:	1dbb      	adds	r3, r7, #6
 8005644:	881c      	ldrh	r4, [r3, #0]
 8005646:	2308      	movs	r3, #8
 8005648:	18fb      	adds	r3, r7, r3
 800564a:	881a      	ldrh	r2, [r3, #0]
 800564c:	230a      	movs	r3, #10
 800564e:	18fb      	adds	r3, r7, r3
 8005650:	8819      	ldrh	r1, [r3, #0]
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	9301      	str	r3, [sp, #4]
 8005658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	0023      	movs	r3, r4
 800565e:	f000 faf5 	bl	8005c4c <I2C_RequestMemoryWrite>
 8005662:	1e03      	subs	r3, r0, #0
 8005664:	d005      	beq.n	8005672 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2240      	movs	r2, #64	@ 0x40
 800566a:	2100      	movs	r1, #0
 800566c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e0b5      	b.n	80057de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005676:	b29b      	uxth	r3, r3
 8005678:	2bff      	cmp	r3, #255	@ 0xff
 800567a:	d911      	bls.n	80056a0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	22ff      	movs	r2, #255	@ 0xff
 8005680:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005686:	b2da      	uxtb	r2, r3
 8005688:	2380      	movs	r3, #128	@ 0x80
 800568a:	045c      	lsls	r4, r3, #17
 800568c:	230a      	movs	r3, #10
 800568e:	18fb      	adds	r3, r7, r3
 8005690:	8819      	ldrh	r1, [r3, #0]
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	2300      	movs	r3, #0
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	0023      	movs	r3, r4
 800569a:	f000 fd99 	bl	80061d0 <I2C_TransferConfig>
 800569e:	e012      	b.n	80056c6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	2380      	movs	r3, #128	@ 0x80
 80056b2:	049c      	lsls	r4, r3, #18
 80056b4:	230a      	movs	r3, #10
 80056b6:	18fb      	adds	r3, r7, r3
 80056b8:	8819      	ldrh	r1, [r3, #0]
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	2300      	movs	r3, #0
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	0023      	movs	r3, r4
 80056c2:	f000 fd85 	bl	80061d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	0018      	movs	r0, r3
 80056ce:	f000 fbfd 	bl	8005ecc <I2C_WaitOnTXISFlagUntilTimeout>
 80056d2:	1e03      	subs	r3, r0, #0
 80056d4:	d001      	beq.n	80056da <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e081      	b.n	80057de <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056de:	781a      	ldrb	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005702:	3b01      	subs	r3, #1
 8005704:	b29a      	uxth	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800570e:	b29b      	uxth	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d03a      	beq.n	800578a <HAL_I2C_Mem_Write+0x1fa>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005718:	2b00      	cmp	r3, #0
 800571a:	d136      	bne.n	800578a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800571c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	0013      	movs	r3, r2
 8005726:	2200      	movs	r2, #0
 8005728:	2180      	movs	r1, #128	@ 0x80
 800572a:	f000 fb77 	bl	8005e1c <I2C_WaitOnFlagUntilTimeout>
 800572e:	1e03      	subs	r3, r0, #0
 8005730:	d001      	beq.n	8005736 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e053      	b.n	80057de <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800573a:	b29b      	uxth	r3, r3
 800573c:	2bff      	cmp	r3, #255	@ 0xff
 800573e:	d911      	bls.n	8005764 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	22ff      	movs	r2, #255	@ 0xff
 8005744:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800574a:	b2da      	uxtb	r2, r3
 800574c:	2380      	movs	r3, #128	@ 0x80
 800574e:	045c      	lsls	r4, r3, #17
 8005750:	230a      	movs	r3, #10
 8005752:	18fb      	adds	r3, r7, r3
 8005754:	8819      	ldrh	r1, [r3, #0]
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	2300      	movs	r3, #0
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	0023      	movs	r3, r4
 800575e:	f000 fd37 	bl	80061d0 <I2C_TransferConfig>
 8005762:	e012      	b.n	800578a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005772:	b2da      	uxtb	r2, r3
 8005774:	2380      	movs	r3, #128	@ 0x80
 8005776:	049c      	lsls	r4, r3, #18
 8005778:	230a      	movs	r3, #10
 800577a:	18fb      	adds	r3, r7, r3
 800577c:	8819      	ldrh	r1, [r3, #0]
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	2300      	movs	r3, #0
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	0023      	movs	r3, r4
 8005786:	f000 fd23 	bl	80061d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d198      	bne.n	80056c6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	0018      	movs	r0, r3
 800579c:	f000 fbdc 	bl	8005f58 <I2C_WaitOnSTOPFlagUntilTimeout>
 80057a0:	1e03      	subs	r3, r0, #0
 80057a2:	d001      	beq.n	80057a8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e01a      	b.n	80057de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2220      	movs	r2, #32
 80057ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	490b      	ldr	r1, [pc, #44]	@ (80057e8 <HAL_I2C_Mem_Write+0x258>)
 80057bc:	400a      	ands	r2, r1
 80057be:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2241      	movs	r2, #65	@ 0x41
 80057c4:	2120      	movs	r1, #32
 80057c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2242      	movs	r2, #66	@ 0x42
 80057cc:	2100      	movs	r1, #0
 80057ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2240      	movs	r2, #64	@ 0x40
 80057d4:	2100      	movs	r1, #0
 80057d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80057d8:	2300      	movs	r3, #0
 80057da:	e000      	b.n	80057de <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80057dc:	2302      	movs	r3, #2
  }
}
 80057de:	0018      	movs	r0, r3
 80057e0:	46bd      	mov	sp, r7
 80057e2:	b007      	add	sp, #28
 80057e4:	bd90      	pop	{r4, r7, pc}
 80057e6:	46c0      	nop			@ (mov r8, r8)
 80057e8:	fe00e800 	.word	0xfe00e800

080057ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ec:	b590      	push	{r4, r7, lr}
 80057ee:	b089      	sub	sp, #36	@ 0x24
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	000c      	movs	r4, r1
 80057f6:	0010      	movs	r0, r2
 80057f8:	0019      	movs	r1, r3
 80057fa:	230a      	movs	r3, #10
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	1c22      	adds	r2, r4, #0
 8005800:	801a      	strh	r2, [r3, #0]
 8005802:	2308      	movs	r3, #8
 8005804:	18fb      	adds	r3, r7, r3
 8005806:	1c02      	adds	r2, r0, #0
 8005808:	801a      	strh	r2, [r3, #0]
 800580a:	1dbb      	adds	r3, r7, #6
 800580c:	1c0a      	adds	r2, r1, #0
 800580e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2241      	movs	r2, #65	@ 0x41
 8005814:	5c9b      	ldrb	r3, [r3, r2]
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b20      	cmp	r3, #32
 800581a:	d000      	beq.n	800581e <HAL_I2C_Mem_Read+0x32>
 800581c:	e110      	b.n	8005a40 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800581e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005820:	2b00      	cmp	r3, #0
 8005822:	d004      	beq.n	800582e <HAL_I2C_Mem_Read+0x42>
 8005824:	232c      	movs	r3, #44	@ 0x2c
 8005826:	18fb      	adds	r3, r7, r3
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d105      	bne.n	800583a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2280      	movs	r2, #128	@ 0x80
 8005832:	0092      	lsls	r2, r2, #2
 8005834:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e103      	b.n	8005a42 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2240      	movs	r2, #64	@ 0x40
 800583e:	5c9b      	ldrb	r3, [r3, r2]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_I2C_Mem_Read+0x5c>
 8005844:	2302      	movs	r3, #2
 8005846:	e0fc      	b.n	8005a42 <HAL_I2C_Mem_Read+0x256>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2240      	movs	r2, #64	@ 0x40
 800584c:	2101      	movs	r1, #1
 800584e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005850:	f7fe fc6e 	bl	8004130 <HAL_GetTick>
 8005854:	0003      	movs	r3, r0
 8005856:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005858:	2380      	movs	r3, #128	@ 0x80
 800585a:	0219      	lsls	r1, r3, #8
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	2319      	movs	r3, #25
 8005864:	2201      	movs	r2, #1
 8005866:	f000 fad9 	bl	8005e1c <I2C_WaitOnFlagUntilTimeout>
 800586a:	1e03      	subs	r3, r0, #0
 800586c:	d001      	beq.n	8005872 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e0e7      	b.n	8005a42 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2241      	movs	r2, #65	@ 0x41
 8005876:	2122      	movs	r1, #34	@ 0x22
 8005878:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2242      	movs	r2, #66	@ 0x42
 800587e:	2140      	movs	r1, #64	@ 0x40
 8005880:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800588c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	222c      	movs	r2, #44	@ 0x2c
 8005892:	18ba      	adds	r2, r7, r2
 8005894:	8812      	ldrh	r2, [r2, #0]
 8005896:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800589e:	1dbb      	adds	r3, r7, #6
 80058a0:	881c      	ldrh	r4, [r3, #0]
 80058a2:	2308      	movs	r3, #8
 80058a4:	18fb      	adds	r3, r7, r3
 80058a6:	881a      	ldrh	r2, [r3, #0]
 80058a8:	230a      	movs	r3, #10
 80058aa:	18fb      	adds	r3, r7, r3
 80058ac:	8819      	ldrh	r1, [r3, #0]
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	0023      	movs	r3, r4
 80058ba:	f000 fa2b 	bl	8005d14 <I2C_RequestMemoryRead>
 80058be:	1e03      	subs	r3, r0, #0
 80058c0:	d005      	beq.n	80058ce <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2240      	movs	r2, #64	@ 0x40
 80058c6:	2100      	movs	r1, #0
 80058c8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e0b9      	b.n	8005a42 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2bff      	cmp	r3, #255	@ 0xff
 80058d6:	d911      	bls.n	80058fc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	22ff      	movs	r2, #255	@ 0xff
 80058dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	2380      	movs	r3, #128	@ 0x80
 80058e6:	045c      	lsls	r4, r3, #17
 80058e8:	230a      	movs	r3, #10
 80058ea:	18fb      	adds	r3, r7, r3
 80058ec:	8819      	ldrh	r1, [r3, #0]
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	4b56      	ldr	r3, [pc, #344]	@ (8005a4c <HAL_I2C_Mem_Read+0x260>)
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	0023      	movs	r3, r4
 80058f6:	f000 fc6b 	bl	80061d0 <I2C_TransferConfig>
 80058fa:	e012      	b.n	8005922 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005900:	b29a      	uxth	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800590a:	b2da      	uxtb	r2, r3
 800590c:	2380      	movs	r3, #128	@ 0x80
 800590e:	049c      	lsls	r4, r3, #18
 8005910:	230a      	movs	r3, #10
 8005912:	18fb      	adds	r3, r7, r3
 8005914:	8819      	ldrh	r1, [r3, #0]
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	4b4c      	ldr	r3, [pc, #304]	@ (8005a4c <HAL_I2C_Mem_Read+0x260>)
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	0023      	movs	r3, r4
 800591e:	f000 fc57 	bl	80061d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	0013      	movs	r3, r2
 800592c:	2200      	movs	r2, #0
 800592e:	2104      	movs	r1, #4
 8005930:	f000 fa74 	bl	8005e1c <I2C_WaitOnFlagUntilTimeout>
 8005934:	1e03      	subs	r3, r0, #0
 8005936:	d001      	beq.n	800593c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e082      	b.n	8005a42 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005958:	3b01      	subs	r3, #1
 800595a:	b29a      	uxth	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005964:	b29b      	uxth	r3, r3
 8005966:	3b01      	subs	r3, #1
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005972:	b29b      	uxth	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d03a      	beq.n	80059ee <HAL_I2C_Mem_Read+0x202>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800597c:	2b00      	cmp	r3, #0
 800597e:	d136      	bne.n	80059ee <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	0013      	movs	r3, r2
 800598a:	2200      	movs	r2, #0
 800598c:	2180      	movs	r1, #128	@ 0x80
 800598e:	f000 fa45 	bl	8005e1c <I2C_WaitOnFlagUntilTimeout>
 8005992:	1e03      	subs	r3, r0, #0
 8005994:	d001      	beq.n	800599a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e053      	b.n	8005a42 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800599e:	b29b      	uxth	r3, r3
 80059a0:	2bff      	cmp	r3, #255	@ 0xff
 80059a2:	d911      	bls.n	80059c8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	22ff      	movs	r2, #255	@ 0xff
 80059a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	2380      	movs	r3, #128	@ 0x80
 80059b2:	045c      	lsls	r4, r3, #17
 80059b4:	230a      	movs	r3, #10
 80059b6:	18fb      	adds	r3, r7, r3
 80059b8:	8819      	ldrh	r1, [r3, #0]
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	2300      	movs	r3, #0
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	0023      	movs	r3, r4
 80059c2:	f000 fc05 	bl	80061d0 <I2C_TransferConfig>
 80059c6:	e012      	b.n	80059ee <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	2380      	movs	r3, #128	@ 0x80
 80059da:	049c      	lsls	r4, r3, #18
 80059dc:	230a      	movs	r3, #10
 80059de:	18fb      	adds	r3, r7, r3
 80059e0:	8819      	ldrh	r1, [r3, #0]
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	2300      	movs	r3, #0
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	0023      	movs	r3, r4
 80059ea:	f000 fbf1 	bl	80061d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d194      	bne.n	8005922 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	0018      	movs	r0, r3
 8005a00:	f000 faaa 	bl	8005f58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a04:	1e03      	subs	r3, r0, #0
 8005a06:	d001      	beq.n	8005a0c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e01a      	b.n	8005a42 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2220      	movs	r2, #32
 8005a12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	490c      	ldr	r1, [pc, #48]	@ (8005a50 <HAL_I2C_Mem_Read+0x264>)
 8005a20:	400a      	ands	r2, r1
 8005a22:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2241      	movs	r2, #65	@ 0x41
 8005a28:	2120      	movs	r1, #32
 8005a2a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2242      	movs	r2, #66	@ 0x42
 8005a30:	2100      	movs	r1, #0
 8005a32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2240      	movs	r2, #64	@ 0x40
 8005a38:	2100      	movs	r1, #0
 8005a3a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	e000      	b.n	8005a42 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005a40:	2302      	movs	r3, #2
  }
}
 8005a42:	0018      	movs	r0, r3
 8005a44:	46bd      	mov	sp, r7
 8005a46:	b007      	add	sp, #28
 8005a48:	bd90      	pop	{r4, r7, pc}
 8005a4a:	46c0      	nop			@ (mov r8, r8)
 8005a4c:	80002400 	.word	0x80002400
 8005a50:	fe00e800 	.word	0xfe00e800

08005a54 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b08a      	sub	sp, #40	@ 0x28
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	607a      	str	r2, [r7, #4]
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	230a      	movs	r3, #10
 8005a62:	18fb      	adds	r3, r7, r3
 8005a64:	1c0a      	adds	r2, r1, #0
 8005a66:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2241      	movs	r2, #65	@ 0x41
 8005a70:	5c9b      	ldrb	r3, [r3, r2]
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	d000      	beq.n	8005a7a <HAL_I2C_IsDeviceReady+0x26>
 8005a78:	e0df      	b.n	8005c3a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	699a      	ldr	r2, [r3, #24]
 8005a80:	2380      	movs	r3, #128	@ 0x80
 8005a82:	021b      	lsls	r3, r3, #8
 8005a84:	401a      	ands	r2, r3
 8005a86:	2380      	movs	r3, #128	@ 0x80
 8005a88:	021b      	lsls	r3, r3, #8
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d101      	bne.n	8005a92 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e0d4      	b.n	8005c3c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2240      	movs	r2, #64	@ 0x40
 8005a96:	5c9b      	ldrb	r3, [r3, r2]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_I2C_IsDeviceReady+0x4c>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e0cd      	b.n	8005c3c <HAL_I2C_IsDeviceReady+0x1e8>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2240      	movs	r2, #64	@ 0x40
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2241      	movs	r2, #65	@ 0x41
 8005aac:	2124      	movs	r1, #36	@ 0x24
 8005aae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d107      	bne.n	8005ace <HAL_I2C_IsDeviceReady+0x7a>
 8005abe:	230a      	movs	r3, #10
 8005ac0:	18fb      	adds	r3, r7, r3
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	059b      	lsls	r3, r3, #22
 8005ac6:	0d9b      	lsrs	r3, r3, #22
 8005ac8:	4a5e      	ldr	r2, [pc, #376]	@ (8005c44 <HAL_I2C_IsDeviceReady+0x1f0>)
 8005aca:	431a      	orrs	r2, r3
 8005acc:	e006      	b.n	8005adc <HAL_I2C_IsDeviceReady+0x88>
 8005ace:	230a      	movs	r3, #10
 8005ad0:	18fb      	adds	r3, r7, r3
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	059b      	lsls	r3, r3, #22
 8005ad6:	0d9b      	lsrs	r3, r3, #22
 8005ad8:	4a5b      	ldr	r2, [pc, #364]	@ (8005c48 <HAL_I2C_IsDeviceReady+0x1f4>)
 8005ada:	431a      	orrs	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005ae2:	f7fe fb25 	bl	8004130 <HAL_GetTick>
 8005ae6:	0003      	movs	r3, r0
 8005ae8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	2220      	movs	r2, #32
 8005af2:	4013      	ands	r3, r2
 8005af4:	3b20      	subs	r3, #32
 8005af6:	425a      	negs	r2, r3
 8005af8:	4153      	adcs	r3, r2
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	231f      	movs	r3, #31
 8005afe:	18fb      	adds	r3, r7, r3
 8005b00:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	2210      	movs	r2, #16
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	3b10      	subs	r3, #16
 8005b0e:	425a      	negs	r2, r3
 8005b10:	4153      	adcs	r3, r2
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	231e      	movs	r3, #30
 8005b16:	18fb      	adds	r3, r7, r3
 8005b18:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005b1a:	e035      	b.n	8005b88 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	d01a      	beq.n	8005b58 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b22:	f7fe fb05 	bl	8004130 <HAL_GetTick>
 8005b26:	0002      	movs	r2, r0
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d302      	bcc.n	8005b38 <HAL_I2C_IsDeviceReady+0xe4>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10f      	bne.n	8005b58 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2241      	movs	r2, #65	@ 0x41
 8005b3c:	2120      	movs	r1, #32
 8005b3e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b44:	2220      	movs	r2, #32
 8005b46:	431a      	orrs	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2240      	movs	r2, #64	@ 0x40
 8005b50:	2100      	movs	r1, #0
 8005b52:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e071      	b.n	8005c3c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	4013      	ands	r3, r2
 8005b62:	3b20      	subs	r3, #32
 8005b64:	425a      	negs	r2, r3
 8005b66:	4153      	adcs	r3, r2
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	231f      	movs	r3, #31
 8005b6c:	18fb      	adds	r3, r7, r3
 8005b6e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	2210      	movs	r2, #16
 8005b78:	4013      	ands	r3, r2
 8005b7a:	3b10      	subs	r3, #16
 8005b7c:	425a      	negs	r2, r3
 8005b7e:	4153      	adcs	r3, r2
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	231e      	movs	r3, #30
 8005b84:	18fb      	adds	r3, r7, r3
 8005b86:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005b88:	231f      	movs	r3, #31
 8005b8a:	18fb      	adds	r3, r7, r3
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d104      	bne.n	8005b9c <HAL_I2C_IsDeviceReady+0x148>
 8005b92:	231e      	movs	r3, #30
 8005b94:	18fb      	adds	r3, r7, r3
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0bf      	beq.n	8005b1c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	2210      	movs	r2, #16
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	2b10      	cmp	r3, #16
 8005ba8:	d01a      	beq.n	8005be0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	0013      	movs	r3, r2
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2120      	movs	r1, #32
 8005bb8:	f000 f930 	bl	8005e1c <I2C_WaitOnFlagUntilTimeout>
 8005bbc:	1e03      	subs	r3, r0, #0
 8005bbe:	d001      	beq.n	8005bc4 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e03b      	b.n	8005c3c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2241      	movs	r2, #65	@ 0x41
 8005bd0:	2120      	movs	r1, #32
 8005bd2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2240      	movs	r2, #64	@ 0x40
 8005bd8:	2100      	movs	r1, #0
 8005bda:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e02d      	b.n	8005c3c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	0013      	movs	r3, r2
 8005bea:	2200      	movs	r2, #0
 8005bec:	2120      	movs	r1, #32
 8005bee:	f000 f915 	bl	8005e1c <I2C_WaitOnFlagUntilTimeout>
 8005bf2:	1e03      	subs	r3, r0, #0
 8005bf4:	d001      	beq.n	8005bfa <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e020      	b.n	8005c3c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2210      	movs	r2, #16
 8005c00:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2220      	movs	r2, #32
 8005c08:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d900      	bls.n	8005c1a <HAL_I2C_IsDeviceReady+0x1c6>
 8005c18:	e74d      	b.n	8005ab6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2241      	movs	r2, #65	@ 0x41
 8005c1e:	2120      	movs	r1, #32
 8005c20:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c26:	2220      	movs	r2, #32
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2240      	movs	r2, #64	@ 0x40
 8005c32:	2100      	movs	r1, #0
 8005c34:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8005c3a:	2302      	movs	r3, #2
  }
}
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	b008      	add	sp, #32
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	02002000 	.word	0x02002000
 8005c48:	02002800 	.word	0x02002800

08005c4c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005c4c:	b5b0      	push	{r4, r5, r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af02      	add	r7, sp, #8
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	000c      	movs	r4, r1
 8005c56:	0010      	movs	r0, r2
 8005c58:	0019      	movs	r1, r3
 8005c5a:	250a      	movs	r5, #10
 8005c5c:	197b      	adds	r3, r7, r5
 8005c5e:	1c22      	adds	r2, r4, #0
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	2308      	movs	r3, #8
 8005c64:	18fb      	adds	r3, r7, r3
 8005c66:	1c02      	adds	r2, r0, #0
 8005c68:	801a      	strh	r2, [r3, #0]
 8005c6a:	1dbb      	adds	r3, r7, #6
 8005c6c:	1c0a      	adds	r2, r1, #0
 8005c6e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c70:	1dbb      	adds	r3, r7, #6
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	2380      	movs	r3, #128	@ 0x80
 8005c78:	045c      	lsls	r4, r3, #17
 8005c7a:	197b      	adds	r3, r7, r5
 8005c7c:	8819      	ldrh	r1, [r3, #0]
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	4b23      	ldr	r3, [pc, #140]	@ (8005d10 <I2C_RequestMemoryWrite+0xc4>)
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	0023      	movs	r3, r4
 8005c86:	f000 faa3 	bl	80061d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c8c:	6a39      	ldr	r1, [r7, #32]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	0018      	movs	r0, r3
 8005c92:	f000 f91b 	bl	8005ecc <I2C_WaitOnTXISFlagUntilTimeout>
 8005c96:	1e03      	subs	r3, r0, #0
 8005c98:	d001      	beq.n	8005c9e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e033      	b.n	8005d06 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c9e:	1dbb      	adds	r3, r7, #6
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d107      	bne.n	8005cb6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ca6:	2308      	movs	r3, #8
 8005ca8:	18fb      	adds	r3, r7, r3
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005cb4:	e019      	b.n	8005cea <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005cb6:	2308      	movs	r3, #8
 8005cb8:	18fb      	adds	r3, r7, r3
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	0a1b      	lsrs	r3, r3, #8
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cca:	6a39      	ldr	r1, [r7, #32]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f000 f8fc 	bl	8005ecc <I2C_WaitOnTXISFlagUntilTimeout>
 8005cd4:	1e03      	subs	r3, r0, #0
 8005cd6:	d001      	beq.n	8005cdc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e014      	b.n	8005d06 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cdc:	2308      	movs	r3, #8
 8005cde:	18fb      	adds	r3, r7, r3
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005cea:	6a3a      	ldr	r2, [r7, #32]
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	0013      	movs	r3, r2
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2180      	movs	r1, #128	@ 0x80
 8005cf8:	f000 f890 	bl	8005e1c <I2C_WaitOnFlagUntilTimeout>
 8005cfc:	1e03      	subs	r3, r0, #0
 8005cfe:	d001      	beq.n	8005d04 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	0018      	movs	r0, r3
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	b004      	add	sp, #16
 8005d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8005d0e:	46c0      	nop			@ (mov r8, r8)
 8005d10:	80002000 	.word	0x80002000

08005d14 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005d14:	b5b0      	push	{r4, r5, r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af02      	add	r7, sp, #8
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	000c      	movs	r4, r1
 8005d1e:	0010      	movs	r0, r2
 8005d20:	0019      	movs	r1, r3
 8005d22:	250a      	movs	r5, #10
 8005d24:	197b      	adds	r3, r7, r5
 8005d26:	1c22      	adds	r2, r4, #0
 8005d28:	801a      	strh	r2, [r3, #0]
 8005d2a:	2308      	movs	r3, #8
 8005d2c:	18fb      	adds	r3, r7, r3
 8005d2e:	1c02      	adds	r2, r0, #0
 8005d30:	801a      	strh	r2, [r3, #0]
 8005d32:	1dbb      	adds	r3, r7, #6
 8005d34:	1c0a      	adds	r2, r1, #0
 8005d36:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d38:	1dbb      	adds	r3, r7, #6
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	197b      	adds	r3, r7, r5
 8005d40:	8819      	ldrh	r1, [r3, #0]
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	4b23      	ldr	r3, [pc, #140]	@ (8005dd4 <I2C_RequestMemoryRead+0xc0>)
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f000 fa41 	bl	80061d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d50:	6a39      	ldr	r1, [r7, #32]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	0018      	movs	r0, r3
 8005d56:	f000 f8b9 	bl	8005ecc <I2C_WaitOnTXISFlagUntilTimeout>
 8005d5a:	1e03      	subs	r3, r0, #0
 8005d5c:	d001      	beq.n	8005d62 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e033      	b.n	8005dca <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d62:	1dbb      	adds	r3, r7, #6
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d107      	bne.n	8005d7a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	18fb      	adds	r3, r7, r3
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d78:	e019      	b.n	8005dae <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d7a:	2308      	movs	r3, #8
 8005d7c:	18fb      	adds	r3, r7, r3
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	0a1b      	lsrs	r3, r3, #8
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d8e:	6a39      	ldr	r1, [r7, #32]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	0018      	movs	r0, r3
 8005d94:	f000 f89a 	bl	8005ecc <I2C_WaitOnTXISFlagUntilTimeout>
 8005d98:	1e03      	subs	r3, r0, #0
 8005d9a:	d001      	beq.n	8005da0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e014      	b.n	8005dca <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005da0:	2308      	movs	r3, #8
 8005da2:	18fb      	adds	r3, r7, r3
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005dae:	6a3a      	ldr	r2, [r7, #32]
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	0013      	movs	r3, r2
 8005db8:	2200      	movs	r2, #0
 8005dba:	2140      	movs	r1, #64	@ 0x40
 8005dbc:	f000 f82e 	bl	8005e1c <I2C_WaitOnFlagUntilTimeout>
 8005dc0:	1e03      	subs	r3, r0, #0
 8005dc2:	d001      	beq.n	8005dc8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e000      	b.n	8005dca <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	0018      	movs	r0, r3
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	b004      	add	sp, #16
 8005dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8005dd2:	46c0      	nop			@ (mov r8, r8)
 8005dd4:	80002000 	.word	0x80002000

08005dd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	2202      	movs	r2, #2
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d103      	bne.n	8005df6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2200      	movs	r2, #0
 8005df4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	4013      	ands	r3, r2
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d007      	beq.n	8005e14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	699a      	ldr	r2, [r3, #24]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2101      	movs	r1, #1
 8005e10:	430a      	orrs	r2, r1
 8005e12:	619a      	str	r2, [r3, #24]
  }
}
 8005e14:	46c0      	nop			@ (mov r8, r8)
 8005e16:	46bd      	mov	sp, r7
 8005e18:	b002      	add	sp, #8
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	1dfb      	adds	r3, r7, #7
 8005e2a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e2c:	e03a      	b.n	8005ea4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	6839      	ldr	r1, [r7, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	0018      	movs	r0, r3
 8005e36:	f000 f8d3 	bl	8005fe0 <I2C_IsErrorOccurred>
 8005e3a:	1e03      	subs	r3, r0, #0
 8005e3c:	d001      	beq.n	8005e42 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e040      	b.n	8005ec4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	3301      	adds	r3, #1
 8005e46:	d02d      	beq.n	8005ea4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e48:	f7fe f972 	bl	8004130 <HAL_GetTick>
 8005e4c:	0002      	movs	r2, r0
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d302      	bcc.n	8005e5e <I2C_WaitOnFlagUntilTimeout+0x42>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d122      	bne.n	8005ea4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	4013      	ands	r3, r2
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	425a      	negs	r2, r3
 8005e6e:	4153      	adcs	r3, r2
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	001a      	movs	r2, r3
 8005e74:	1dfb      	adds	r3, r7, #7
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d113      	bne.n	8005ea4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e80:	2220      	movs	r2, #32
 8005e82:	431a      	orrs	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2241      	movs	r2, #65	@ 0x41
 8005e8c:	2120      	movs	r1, #32
 8005e8e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2242      	movs	r2, #66	@ 0x42
 8005e94:	2100      	movs	r1, #0
 8005e96:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2240      	movs	r2, #64	@ 0x40
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e00f      	b.n	8005ec4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	4013      	ands	r3, r2
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	425a      	negs	r2, r3
 8005eb4:	4153      	adcs	r3, r2
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	001a      	movs	r2, r3
 8005eba:	1dfb      	adds	r3, r7, #7
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d0b5      	beq.n	8005e2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b004      	add	sp, #16
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ed8:	e032      	b.n	8005f40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	68b9      	ldr	r1, [r7, #8]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	f000 f87d 	bl	8005fe0 <I2C_IsErrorOccurred>
 8005ee6:	1e03      	subs	r3, r0, #0
 8005ee8:	d001      	beq.n	8005eee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e030      	b.n	8005f50 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	d025      	beq.n	8005f40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ef4:	f7fe f91c 	bl	8004130 <HAL_GetTick>
 8005ef8:	0002      	movs	r2, r0
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d302      	bcc.n	8005f0a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d11a      	bne.n	8005f40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	2202      	movs	r2, #2
 8005f12:	4013      	ands	r3, r2
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d013      	beq.n	8005f40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2241      	movs	r2, #65	@ 0x41
 8005f28:	2120      	movs	r1, #32
 8005f2a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2242      	movs	r2, #66	@ 0x42
 8005f30:	2100      	movs	r1, #0
 8005f32:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2240      	movs	r2, #64	@ 0x40
 8005f38:	2100      	movs	r1, #0
 8005f3a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e007      	b.n	8005f50 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	2202      	movs	r2, #2
 8005f48:	4013      	ands	r3, r2
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d1c5      	bne.n	8005eda <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	0018      	movs	r0, r3
 8005f52:	46bd      	mov	sp, r7
 8005f54:	b004      	add	sp, #16
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f64:	e02f      	b.n	8005fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	f000 f837 	bl	8005fe0 <I2C_IsErrorOccurred>
 8005f72:	1e03      	subs	r3, r0, #0
 8005f74:	d001      	beq.n	8005f7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e02d      	b.n	8005fd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7a:	f7fe f8d9 	bl	8004130 <HAL_GetTick>
 8005f7e:	0002      	movs	r2, r0
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d302      	bcc.n	8005f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d11a      	bne.n	8005fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	2220      	movs	r2, #32
 8005f98:	4013      	ands	r3, r2
 8005f9a:	2b20      	cmp	r3, #32
 8005f9c:	d013      	beq.n	8005fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2241      	movs	r2, #65	@ 0x41
 8005fae:	2120      	movs	r1, #32
 8005fb0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2242      	movs	r2, #66	@ 0x42
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2240      	movs	r2, #64	@ 0x40
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e007      	b.n	8005fd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	4013      	ands	r3, r2
 8005fd0:	2b20      	cmp	r3, #32
 8005fd2:	d1c8      	bne.n	8005f66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	0018      	movs	r0, r3
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	b004      	add	sp, #16
 8005fdc:	bd80      	pop	{r7, pc}
	...

08005fe0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08a      	sub	sp, #40	@ 0x28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fec:	2327      	movs	r3, #39	@ 0x27
 8005fee:	18fb      	adds	r3, r7, r3
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	2210      	movs	r2, #16
 8006008:	4013      	ands	r3, r2
 800600a:	d100      	bne.n	800600e <I2C_IsErrorOccurred+0x2e>
 800600c:	e079      	b.n	8006102 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2210      	movs	r2, #16
 8006014:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006016:	e057      	b.n	80060c8 <I2C_IsErrorOccurred+0xe8>
 8006018:	2227      	movs	r2, #39	@ 0x27
 800601a:	18bb      	adds	r3, r7, r2
 800601c:	18ba      	adds	r2, r7, r2
 800601e:	7812      	ldrb	r2, [r2, #0]
 8006020:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	3301      	adds	r3, #1
 8006026:	d04f      	beq.n	80060c8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006028:	f7fe f882 	bl	8004130 <HAL_GetTick>
 800602c:	0002      	movs	r2, r0
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	429a      	cmp	r2, r3
 8006036:	d302      	bcc.n	800603e <I2C_IsErrorOccurred+0x5e>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d144      	bne.n	80060c8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	2380      	movs	r3, #128	@ 0x80
 8006046:	01db      	lsls	r3, r3, #7
 8006048:	4013      	ands	r3, r2
 800604a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800604c:	2013      	movs	r0, #19
 800604e:	183b      	adds	r3, r7, r0
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	2142      	movs	r1, #66	@ 0x42
 8006054:	5c52      	ldrb	r2, [r2, r1]
 8006056:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699a      	ldr	r2, [r3, #24]
 800605e:	2380      	movs	r3, #128	@ 0x80
 8006060:	021b      	lsls	r3, r3, #8
 8006062:	401a      	ands	r2, r3
 8006064:	2380      	movs	r3, #128	@ 0x80
 8006066:	021b      	lsls	r3, r3, #8
 8006068:	429a      	cmp	r2, r3
 800606a:	d126      	bne.n	80060ba <I2C_IsErrorOccurred+0xda>
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	2380      	movs	r3, #128	@ 0x80
 8006070:	01db      	lsls	r3, r3, #7
 8006072:	429a      	cmp	r2, r3
 8006074:	d021      	beq.n	80060ba <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8006076:	183b      	adds	r3, r7, r0
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2b20      	cmp	r3, #32
 800607c:	d01d      	beq.n	80060ba <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2180      	movs	r1, #128	@ 0x80
 800608a:	01c9      	lsls	r1, r1, #7
 800608c:	430a      	orrs	r2, r1
 800608e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006090:	f7fe f84e 	bl	8004130 <HAL_GetTick>
 8006094:	0003      	movs	r3, r0
 8006096:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006098:	e00f      	b.n	80060ba <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800609a:	f7fe f849 	bl	8004130 <HAL_GetTick>
 800609e:	0002      	movs	r2, r0
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b19      	cmp	r3, #25
 80060a6:	d908      	bls.n	80060ba <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	2220      	movs	r2, #32
 80060ac:	4313      	orrs	r3, r2
 80060ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80060b0:	2327      	movs	r3, #39	@ 0x27
 80060b2:	18fb      	adds	r3, r7, r3
 80060b4:	2201      	movs	r2, #1
 80060b6:	701a      	strb	r2, [r3, #0]

              break;
 80060b8:	e006      	b.n	80060c8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	2220      	movs	r2, #32
 80060c2:	4013      	ands	r3, r2
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	d1e8      	bne.n	800609a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	2220      	movs	r2, #32
 80060d0:	4013      	ands	r3, r2
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d004      	beq.n	80060e0 <I2C_IsErrorOccurred+0x100>
 80060d6:	2327      	movs	r3, #39	@ 0x27
 80060d8:	18fb      	adds	r3, r7, r3
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d09b      	beq.n	8006018 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80060e0:	2327      	movs	r3, #39	@ 0x27
 80060e2:	18fb      	adds	r3, r7, r3
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d103      	bne.n	80060f2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2220      	movs	r2, #32
 80060f0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	2204      	movs	r2, #4
 80060f6:	4313      	orrs	r3, r2
 80060f8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80060fa:	2327      	movs	r3, #39	@ 0x27
 80060fc:	18fb      	adds	r3, r7, r3
 80060fe:	2201      	movs	r2, #1
 8006100:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	2380      	movs	r3, #128	@ 0x80
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	4013      	ands	r3, r2
 8006112:	d00c      	beq.n	800612e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	2201      	movs	r2, #1
 8006118:	4313      	orrs	r3, r2
 800611a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2280      	movs	r2, #128	@ 0x80
 8006122:	0052      	lsls	r2, r2, #1
 8006124:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006126:	2327      	movs	r3, #39	@ 0x27
 8006128:	18fb      	adds	r3, r7, r3
 800612a:	2201      	movs	r2, #1
 800612c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	2380      	movs	r3, #128	@ 0x80
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	4013      	ands	r3, r2
 8006136:	d00c      	beq.n	8006152 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	2208      	movs	r2, #8
 800613c:	4313      	orrs	r3, r2
 800613e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2280      	movs	r2, #128	@ 0x80
 8006146:	00d2      	lsls	r2, r2, #3
 8006148:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800614a:	2327      	movs	r3, #39	@ 0x27
 800614c:	18fb      	adds	r3, r7, r3
 800614e:	2201      	movs	r2, #1
 8006150:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	2380      	movs	r3, #128	@ 0x80
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4013      	ands	r3, r2
 800615a:	d00c      	beq.n	8006176 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	2202      	movs	r2, #2
 8006160:	4313      	orrs	r3, r2
 8006162:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2280      	movs	r2, #128	@ 0x80
 800616a:	0092      	lsls	r2, r2, #2
 800616c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800616e:	2327      	movs	r3, #39	@ 0x27
 8006170:	18fb      	adds	r3, r7, r3
 8006172:	2201      	movs	r2, #1
 8006174:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006176:	2327      	movs	r3, #39	@ 0x27
 8006178:	18fb      	adds	r3, r7, r3
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d01d      	beq.n	80061bc <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	0018      	movs	r0, r3
 8006184:	f7ff fe28 	bl	8005dd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	490e      	ldr	r1, [pc, #56]	@ (80061cc <I2C_IsErrorOccurred+0x1ec>)
 8006194:	400a      	ands	r2, r1
 8006196:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	431a      	orrs	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2241      	movs	r2, #65	@ 0x41
 80061a8:	2120      	movs	r1, #32
 80061aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2242      	movs	r2, #66	@ 0x42
 80061b0:	2100      	movs	r1, #0
 80061b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2240      	movs	r2, #64	@ 0x40
 80061b8:	2100      	movs	r1, #0
 80061ba:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80061bc:	2327      	movs	r3, #39	@ 0x27
 80061be:	18fb      	adds	r3, r7, r3
 80061c0:	781b      	ldrb	r3, [r3, #0]
}
 80061c2:	0018      	movs	r0, r3
 80061c4:	46bd      	mov	sp, r7
 80061c6:	b00a      	add	sp, #40	@ 0x28
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	46c0      	nop			@ (mov r8, r8)
 80061cc:	fe00e800 	.word	0xfe00e800

080061d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80061d0:	b590      	push	{r4, r7, lr}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	0008      	movs	r0, r1
 80061da:	0011      	movs	r1, r2
 80061dc:	607b      	str	r3, [r7, #4]
 80061de:	240a      	movs	r4, #10
 80061e0:	193b      	adds	r3, r7, r4
 80061e2:	1c02      	adds	r2, r0, #0
 80061e4:	801a      	strh	r2, [r3, #0]
 80061e6:	2009      	movs	r0, #9
 80061e8:	183b      	adds	r3, r7, r0
 80061ea:	1c0a      	adds	r2, r1, #0
 80061ec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061ee:	193b      	adds	r3, r7, r4
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	059b      	lsls	r3, r3, #22
 80061f4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80061f6:	183b      	adds	r3, r7, r0
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	0419      	lsls	r1, r3, #16
 80061fc:	23ff      	movs	r3, #255	@ 0xff
 80061fe:	041b      	lsls	r3, r3, #16
 8006200:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006202:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620a:	4313      	orrs	r3, r2
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	085b      	lsrs	r3, r3, #1
 8006210:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800621a:	0d51      	lsrs	r1, r2, #21
 800621c:	2280      	movs	r2, #128	@ 0x80
 800621e:	00d2      	lsls	r2, r2, #3
 8006220:	400a      	ands	r2, r1
 8006222:	4907      	ldr	r1, [pc, #28]	@ (8006240 <I2C_TransferConfig+0x70>)
 8006224:	430a      	orrs	r2, r1
 8006226:	43d2      	mvns	r2, r2
 8006228:	401a      	ands	r2, r3
 800622a:	0011      	movs	r1, r2
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	430a      	orrs	r2, r1
 8006234:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006236:	46c0      	nop			@ (mov r8, r8)
 8006238:	46bd      	mov	sp, r7
 800623a:	b007      	add	sp, #28
 800623c:	bd90      	pop	{r4, r7, pc}
 800623e:	46c0      	nop			@ (mov r8, r8)
 8006240:	03ff63ff 	.word	0x03ff63ff

08006244 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2241      	movs	r2, #65	@ 0x41
 8006252:	5c9b      	ldrb	r3, [r3, r2]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b20      	cmp	r3, #32
 8006258:	d138      	bne.n	80062cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2240      	movs	r2, #64	@ 0x40
 800625e:	5c9b      	ldrb	r3, [r3, r2]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d101      	bne.n	8006268 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006264:	2302      	movs	r3, #2
 8006266:	e032      	b.n	80062ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2240      	movs	r2, #64	@ 0x40
 800626c:	2101      	movs	r1, #1
 800626e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2241      	movs	r2, #65	@ 0x41
 8006274:	2124      	movs	r1, #36	@ 0x24
 8006276:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2101      	movs	r1, #1
 8006284:	438a      	bics	r2, r1
 8006286:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4911      	ldr	r1, [pc, #68]	@ (80062d8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006294:	400a      	ands	r2, r1
 8006296:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6819      	ldr	r1, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	430a      	orrs	r2, r1
 80062a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2101      	movs	r1, #1
 80062b4:	430a      	orrs	r2, r1
 80062b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2241      	movs	r2, #65	@ 0x41
 80062bc:	2120      	movs	r1, #32
 80062be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2240      	movs	r2, #64	@ 0x40
 80062c4:	2100      	movs	r1, #0
 80062c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	e000      	b.n	80062ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062cc:	2302      	movs	r3, #2
  }
}
 80062ce:	0018      	movs	r0, r3
 80062d0:	46bd      	mov	sp, r7
 80062d2:	b002      	add	sp, #8
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	46c0      	nop			@ (mov r8, r8)
 80062d8:	ffffefff 	.word	0xffffefff

080062dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2241      	movs	r2, #65	@ 0x41
 80062ea:	5c9b      	ldrb	r3, [r3, r2]
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b20      	cmp	r3, #32
 80062f0:	d139      	bne.n	8006366 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2240      	movs	r2, #64	@ 0x40
 80062f6:	5c9b      	ldrb	r3, [r3, r2]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d101      	bne.n	8006300 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e033      	b.n	8006368 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2240      	movs	r2, #64	@ 0x40
 8006304:	2101      	movs	r1, #1
 8006306:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2241      	movs	r2, #65	@ 0x41
 800630c:	2124      	movs	r1, #36	@ 0x24
 800630e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2101      	movs	r1, #1
 800631c:	438a      	bics	r2, r1
 800631e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4a11      	ldr	r2, [pc, #68]	@ (8006370 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800632c:	4013      	ands	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2101      	movs	r1, #1
 800634e:	430a      	orrs	r2, r1
 8006350:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2241      	movs	r2, #65	@ 0x41
 8006356:	2120      	movs	r1, #32
 8006358:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2240      	movs	r2, #64	@ 0x40
 800635e:	2100      	movs	r1, #0
 8006360:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	e000      	b.n	8006368 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006366:	2302      	movs	r3, #2
  }
}
 8006368:	0018      	movs	r0, r3
 800636a:	46bd      	mov	sp, r7
 800636c:	b004      	add	sp, #16
 800636e:	bd80      	pop	{r7, pc}
 8006370:	fffff0ff 	.word	0xfffff0ff

08006374 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800637c:	4b19      	ldr	r3, [pc, #100]	@ (80063e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a19      	ldr	r2, [pc, #100]	@ (80063e8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006382:	4013      	ands	r3, r2
 8006384:	0019      	movs	r1, r3
 8006386:	4b17      	ldr	r3, [pc, #92]	@ (80063e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	430a      	orrs	r2, r1
 800638c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	2380      	movs	r3, #128	@ 0x80
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	429a      	cmp	r2, r3
 8006396:	d11f      	bne.n	80063d8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006398:	4b14      	ldr	r3, [pc, #80]	@ (80063ec <HAL_PWREx_ControlVoltageScaling+0x78>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	0013      	movs	r3, r2
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	189b      	adds	r3, r3, r2
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	4912      	ldr	r1, [pc, #72]	@ (80063f0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80063a6:	0018      	movs	r0, r3
 80063a8:	f7f9 feae 	bl	8000108 <__udivsi3>
 80063ac:	0003      	movs	r3, r0
 80063ae:	3301      	adds	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063b2:	e008      	b.n	80063c6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3b01      	subs	r3, #1
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	e001      	b.n	80063c6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e009      	b.n	80063da <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063c6:	4b07      	ldr	r3, [pc, #28]	@ (80063e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80063c8:	695a      	ldr	r2, [r3, #20]
 80063ca:	2380      	movs	r3, #128	@ 0x80
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	401a      	ands	r2, r3
 80063d0:	2380      	movs	r3, #128	@ 0x80
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d0ed      	beq.n	80063b4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	0018      	movs	r0, r3
 80063dc:	46bd      	mov	sp, r7
 80063de:	b004      	add	sp, #16
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	46c0      	nop			@ (mov r8, r8)
 80063e4:	40007000 	.word	0x40007000
 80063e8:	fffff9ff 	.word	0xfffff9ff
 80063ec:	20000000 	.word	0x20000000
 80063f0:	000f4240 	.word	0x000f4240

080063f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d102      	bne.n	8006408 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	f000 fb50 	bl	8006aa8 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2201      	movs	r2, #1
 800640e:	4013      	ands	r3, r2
 8006410:	d100      	bne.n	8006414 <HAL_RCC_OscConfig+0x20>
 8006412:	e07c      	b.n	800650e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006414:	4bc3      	ldr	r3, [pc, #780]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	2238      	movs	r2, #56	@ 0x38
 800641a:	4013      	ands	r3, r2
 800641c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800641e:	4bc1      	ldr	r3, [pc, #772]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	2203      	movs	r2, #3
 8006424:	4013      	ands	r3, r2
 8006426:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	2b10      	cmp	r3, #16
 800642c:	d102      	bne.n	8006434 <HAL_RCC_OscConfig+0x40>
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	2b03      	cmp	r3, #3
 8006432:	d002      	beq.n	800643a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	2b08      	cmp	r3, #8
 8006438:	d10b      	bne.n	8006452 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800643a:	4bba      	ldr	r3, [pc, #744]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	2380      	movs	r3, #128	@ 0x80
 8006440:	029b      	lsls	r3, r3, #10
 8006442:	4013      	ands	r3, r2
 8006444:	d062      	beq.n	800650c <HAL_RCC_OscConfig+0x118>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d15e      	bne.n	800650c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e32a      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	2380      	movs	r3, #128	@ 0x80
 8006458:	025b      	lsls	r3, r3, #9
 800645a:	429a      	cmp	r2, r3
 800645c:	d107      	bne.n	800646e <HAL_RCC_OscConfig+0x7a>
 800645e:	4bb1      	ldr	r3, [pc, #708]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	4bb0      	ldr	r3, [pc, #704]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 8006464:	2180      	movs	r1, #128	@ 0x80
 8006466:	0249      	lsls	r1, r1, #9
 8006468:	430a      	orrs	r2, r1
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	e020      	b.n	80064b0 <HAL_RCC_OscConfig+0xbc>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	23a0      	movs	r3, #160	@ 0xa0
 8006474:	02db      	lsls	r3, r3, #11
 8006476:	429a      	cmp	r2, r3
 8006478:	d10e      	bne.n	8006498 <HAL_RCC_OscConfig+0xa4>
 800647a:	4baa      	ldr	r3, [pc, #680]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	4ba9      	ldr	r3, [pc, #676]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 8006480:	2180      	movs	r1, #128	@ 0x80
 8006482:	02c9      	lsls	r1, r1, #11
 8006484:	430a      	orrs	r2, r1
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	4ba6      	ldr	r3, [pc, #664]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	4ba5      	ldr	r3, [pc, #660]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 800648e:	2180      	movs	r1, #128	@ 0x80
 8006490:	0249      	lsls	r1, r1, #9
 8006492:	430a      	orrs	r2, r1
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	e00b      	b.n	80064b0 <HAL_RCC_OscConfig+0xbc>
 8006498:	4ba2      	ldr	r3, [pc, #648]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	4ba1      	ldr	r3, [pc, #644]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 800649e:	49a2      	ldr	r1, [pc, #648]	@ (8006728 <HAL_RCC_OscConfig+0x334>)
 80064a0:	400a      	ands	r2, r1
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	4b9f      	ldr	r3, [pc, #636]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	4b9e      	ldr	r3, [pc, #632]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 80064aa:	49a0      	ldr	r1, [pc, #640]	@ (800672c <HAL_RCC_OscConfig+0x338>)
 80064ac:	400a      	ands	r2, r1
 80064ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d014      	beq.n	80064e2 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b8:	f7fd fe3a 	bl	8004130 <HAL_GetTick>
 80064bc:	0003      	movs	r3, r0
 80064be:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064c0:	e008      	b.n	80064d4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064c2:	f7fd fe35 	bl	8004130 <HAL_GetTick>
 80064c6:	0002      	movs	r2, r0
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b64      	cmp	r3, #100	@ 0x64
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e2e9      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064d4:	4b93      	ldr	r3, [pc, #588]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	2380      	movs	r3, #128	@ 0x80
 80064da:	029b      	lsls	r3, r3, #10
 80064dc:	4013      	ands	r3, r2
 80064de:	d0f0      	beq.n	80064c2 <HAL_RCC_OscConfig+0xce>
 80064e0:	e015      	b.n	800650e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e2:	f7fd fe25 	bl	8004130 <HAL_GetTick>
 80064e6:	0003      	movs	r3, r0
 80064e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80064ea:	e008      	b.n	80064fe <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064ec:	f7fd fe20 	bl	8004130 <HAL_GetTick>
 80064f0:	0002      	movs	r2, r0
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b64      	cmp	r3, #100	@ 0x64
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e2d4      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80064fe:	4b89      	ldr	r3, [pc, #548]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	2380      	movs	r3, #128	@ 0x80
 8006504:	029b      	lsls	r3, r3, #10
 8006506:	4013      	ands	r3, r2
 8006508:	d1f0      	bne.n	80064ec <HAL_RCC_OscConfig+0xf8>
 800650a:	e000      	b.n	800650e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800650c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2202      	movs	r2, #2
 8006514:	4013      	ands	r3, r2
 8006516:	d100      	bne.n	800651a <HAL_RCC_OscConfig+0x126>
 8006518:	e099      	b.n	800664e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800651a:	4b82      	ldr	r3, [pc, #520]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	2238      	movs	r2, #56	@ 0x38
 8006520:	4013      	ands	r3, r2
 8006522:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006524:	4b7f      	ldr	r3, [pc, #508]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	2203      	movs	r2, #3
 800652a:	4013      	ands	r3, r2
 800652c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	2b10      	cmp	r3, #16
 8006532:	d102      	bne.n	800653a <HAL_RCC_OscConfig+0x146>
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	2b02      	cmp	r3, #2
 8006538:	d002      	beq.n	8006540 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d135      	bne.n	80065ac <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006540:	4b78      	ldr	r3, [pc, #480]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	2380      	movs	r3, #128	@ 0x80
 8006546:	00db      	lsls	r3, r3, #3
 8006548:	4013      	ands	r3, r2
 800654a:	d005      	beq.n	8006558 <HAL_RCC_OscConfig+0x164>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e2a7      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006558:	4b72      	ldr	r3, [pc, #456]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	4a74      	ldr	r2, [pc, #464]	@ (8006730 <HAL_RCC_OscConfig+0x33c>)
 800655e:	4013      	ands	r3, r2
 8006560:	0019      	movs	r1, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	021a      	lsls	r2, r3, #8
 8006568:	4b6e      	ldr	r3, [pc, #440]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d112      	bne.n	800659a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006574:	4b6b      	ldr	r3, [pc, #428]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a6e      	ldr	r2, [pc, #440]	@ (8006734 <HAL_RCC_OscConfig+0x340>)
 800657a:	4013      	ands	r3, r2
 800657c:	0019      	movs	r1, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691a      	ldr	r2, [r3, #16]
 8006582:	4b68      	ldr	r3, [pc, #416]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 8006584:	430a      	orrs	r2, r1
 8006586:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006588:	4b66      	ldr	r3, [pc, #408]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	0adb      	lsrs	r3, r3, #11
 800658e:	2207      	movs	r2, #7
 8006590:	4013      	ands	r3, r2
 8006592:	4a69      	ldr	r2, [pc, #420]	@ (8006738 <HAL_RCC_OscConfig+0x344>)
 8006594:	40da      	lsrs	r2, r3
 8006596:	4b69      	ldr	r3, [pc, #420]	@ (800673c <HAL_RCC_OscConfig+0x348>)
 8006598:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800659a:	4b69      	ldr	r3, [pc, #420]	@ (8006740 <HAL_RCC_OscConfig+0x34c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	0018      	movs	r0, r3
 80065a0:	f7fd fd6a 	bl	8004078 <HAL_InitTick>
 80065a4:	1e03      	subs	r3, r0, #0
 80065a6:	d051      	beq.n	800664c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e27d      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d030      	beq.n	8006616 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80065b4:	4b5b      	ldr	r3, [pc, #364]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a5e      	ldr	r2, [pc, #376]	@ (8006734 <HAL_RCC_OscConfig+0x340>)
 80065ba:	4013      	ands	r3, r2
 80065bc:	0019      	movs	r1, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691a      	ldr	r2, [r3, #16]
 80065c2:	4b58      	ldr	r3, [pc, #352]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 80065c4:	430a      	orrs	r2, r1
 80065c6:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80065c8:	4b56      	ldr	r3, [pc, #344]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	4b55      	ldr	r3, [pc, #340]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 80065ce:	2180      	movs	r1, #128	@ 0x80
 80065d0:	0049      	lsls	r1, r1, #1
 80065d2:	430a      	orrs	r2, r1
 80065d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d6:	f7fd fdab 	bl	8004130 <HAL_GetTick>
 80065da:	0003      	movs	r3, r0
 80065dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065de:	e008      	b.n	80065f2 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065e0:	f7fd fda6 	bl	8004130 <HAL_GetTick>
 80065e4:	0002      	movs	r2, r0
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e25a      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065f2:	4b4c      	ldr	r3, [pc, #304]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	2380      	movs	r3, #128	@ 0x80
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	4013      	ands	r3, r2
 80065fc:	d0f0      	beq.n	80065e0 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065fe:	4b49      	ldr	r3, [pc, #292]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	4a4b      	ldr	r2, [pc, #300]	@ (8006730 <HAL_RCC_OscConfig+0x33c>)
 8006604:	4013      	ands	r3, r2
 8006606:	0019      	movs	r1, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	021a      	lsls	r2, r3, #8
 800660e:	4b45      	ldr	r3, [pc, #276]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 8006610:	430a      	orrs	r2, r1
 8006612:	605a      	str	r2, [r3, #4]
 8006614:	e01b      	b.n	800664e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006616:	4b43      	ldr	r3, [pc, #268]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	4b42      	ldr	r3, [pc, #264]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 800661c:	4949      	ldr	r1, [pc, #292]	@ (8006744 <HAL_RCC_OscConfig+0x350>)
 800661e:	400a      	ands	r2, r1
 8006620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006622:	f7fd fd85 	bl	8004130 <HAL_GetTick>
 8006626:	0003      	movs	r3, r0
 8006628:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800662c:	f7fd fd80 	bl	8004130 <HAL_GetTick>
 8006630:	0002      	movs	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e234      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800663e:	4b39      	ldr	r3, [pc, #228]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	2380      	movs	r3, #128	@ 0x80
 8006644:	00db      	lsls	r3, r3, #3
 8006646:	4013      	ands	r3, r2
 8006648:	d1f0      	bne.n	800662c <HAL_RCC_OscConfig+0x238>
 800664a:	e000      	b.n	800664e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800664c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2208      	movs	r2, #8
 8006654:	4013      	ands	r3, r2
 8006656:	d047      	beq.n	80066e8 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006658:	4b32      	ldr	r3, [pc, #200]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	2238      	movs	r2, #56	@ 0x38
 800665e:	4013      	ands	r3, r2
 8006660:	2b18      	cmp	r3, #24
 8006662:	d10a      	bne.n	800667a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006664:	4b2f      	ldr	r3, [pc, #188]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 8006666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006668:	2202      	movs	r2, #2
 800666a:	4013      	ands	r3, r2
 800666c:	d03c      	beq.n	80066e8 <HAL_RCC_OscConfig+0x2f4>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d138      	bne.n	80066e8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e216      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d019      	beq.n	80066b6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006682:	4b28      	ldr	r3, [pc, #160]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 8006684:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006686:	4b27      	ldr	r3, [pc, #156]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 8006688:	2101      	movs	r1, #1
 800668a:	430a      	orrs	r2, r1
 800668c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668e:	f7fd fd4f 	bl	8004130 <HAL_GetTick>
 8006692:	0003      	movs	r3, r0
 8006694:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006698:	f7fd fd4a 	bl	8004130 <HAL_GetTick>
 800669c:	0002      	movs	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e1fe      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066aa:	4b1e      	ldr	r3, [pc, #120]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 80066ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ae:	2202      	movs	r2, #2
 80066b0:	4013      	ands	r3, r2
 80066b2:	d0f1      	beq.n	8006698 <HAL_RCC_OscConfig+0x2a4>
 80066b4:	e018      	b.n	80066e8 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80066b6:	4b1b      	ldr	r3, [pc, #108]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 80066b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80066ba:	4b1a      	ldr	r3, [pc, #104]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 80066bc:	2101      	movs	r1, #1
 80066be:	438a      	bics	r2, r1
 80066c0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c2:	f7fd fd35 	bl	8004130 <HAL_GetTick>
 80066c6:	0003      	movs	r3, r0
 80066c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066ca:	e008      	b.n	80066de <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066cc:	f7fd fd30 	bl	8004130 <HAL_GetTick>
 80066d0:	0002      	movs	r2, r0
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e1e4      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066de:	4b11      	ldr	r3, [pc, #68]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 80066e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e2:	2202      	movs	r2, #2
 80066e4:	4013      	ands	r3, r2
 80066e6:	d1f1      	bne.n	80066cc <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2204      	movs	r2, #4
 80066ee:	4013      	ands	r3, r2
 80066f0:	d100      	bne.n	80066f4 <HAL_RCC_OscConfig+0x300>
 80066f2:	e0c7      	b.n	8006884 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066f4:	231f      	movs	r3, #31
 80066f6:	18fb      	adds	r3, r7, r3
 80066f8:	2200      	movs	r2, #0
 80066fa:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80066fc:	4b09      	ldr	r3, [pc, #36]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	2238      	movs	r2, #56	@ 0x38
 8006702:	4013      	ands	r3, r2
 8006704:	2b20      	cmp	r3, #32
 8006706:	d11f      	bne.n	8006748 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006708:	4b06      	ldr	r3, [pc, #24]	@ (8006724 <HAL_RCC_OscConfig+0x330>)
 800670a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800670c:	2202      	movs	r2, #2
 800670e:	4013      	ands	r3, r2
 8006710:	d100      	bne.n	8006714 <HAL_RCC_OscConfig+0x320>
 8006712:	e0b7      	b.n	8006884 <HAL_RCC_OscConfig+0x490>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d000      	beq.n	800671e <HAL_RCC_OscConfig+0x32a>
 800671c:	e0b2      	b.n	8006884 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e1c2      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
 8006722:	46c0      	nop			@ (mov r8, r8)
 8006724:	40021000 	.word	0x40021000
 8006728:	fffeffff 	.word	0xfffeffff
 800672c:	fffbffff 	.word	0xfffbffff
 8006730:	ffff80ff 	.word	0xffff80ff
 8006734:	ffffc7ff 	.word	0xffffc7ff
 8006738:	00f42400 	.word	0x00f42400
 800673c:	20000000 	.word	0x20000000
 8006740:	20000004 	.word	0x20000004
 8006744:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006748:	4bb5      	ldr	r3, [pc, #724]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 800674a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800674c:	2380      	movs	r3, #128	@ 0x80
 800674e:	055b      	lsls	r3, r3, #21
 8006750:	4013      	ands	r3, r2
 8006752:	d101      	bne.n	8006758 <HAL_RCC_OscConfig+0x364>
 8006754:	2301      	movs	r3, #1
 8006756:	e000      	b.n	800675a <HAL_RCC_OscConfig+0x366>
 8006758:	2300      	movs	r3, #0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d011      	beq.n	8006782 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800675e:	4bb0      	ldr	r3, [pc, #704]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 8006760:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006762:	4baf      	ldr	r3, [pc, #700]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 8006764:	2180      	movs	r1, #128	@ 0x80
 8006766:	0549      	lsls	r1, r1, #21
 8006768:	430a      	orrs	r2, r1
 800676a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800676c:	4bac      	ldr	r3, [pc, #688]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 800676e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006770:	2380      	movs	r3, #128	@ 0x80
 8006772:	055b      	lsls	r3, r3, #21
 8006774:	4013      	ands	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800677a:	231f      	movs	r3, #31
 800677c:	18fb      	adds	r3, r7, r3
 800677e:	2201      	movs	r2, #1
 8006780:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006782:	4ba8      	ldr	r3, [pc, #672]	@ (8006a24 <HAL_RCC_OscConfig+0x630>)
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	2380      	movs	r3, #128	@ 0x80
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	4013      	ands	r3, r2
 800678c:	d11a      	bne.n	80067c4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800678e:	4ba5      	ldr	r3, [pc, #660]	@ (8006a24 <HAL_RCC_OscConfig+0x630>)
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	4ba4      	ldr	r3, [pc, #656]	@ (8006a24 <HAL_RCC_OscConfig+0x630>)
 8006794:	2180      	movs	r1, #128	@ 0x80
 8006796:	0049      	lsls	r1, r1, #1
 8006798:	430a      	orrs	r2, r1
 800679a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800679c:	f7fd fcc8 	bl	8004130 <HAL_GetTick>
 80067a0:	0003      	movs	r3, r0
 80067a2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067a4:	e008      	b.n	80067b8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067a6:	f7fd fcc3 	bl	8004130 <HAL_GetTick>
 80067aa:	0002      	movs	r2, r0
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e177      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067b8:	4b9a      	ldr	r3, [pc, #616]	@ (8006a24 <HAL_RCC_OscConfig+0x630>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	2380      	movs	r3, #128	@ 0x80
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	4013      	ands	r3, r2
 80067c2:	d0f0      	beq.n	80067a6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d106      	bne.n	80067da <HAL_RCC_OscConfig+0x3e6>
 80067cc:	4b94      	ldr	r3, [pc, #592]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 80067ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80067d0:	4b93      	ldr	r3, [pc, #588]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 80067d2:	2101      	movs	r1, #1
 80067d4:	430a      	orrs	r2, r1
 80067d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80067d8:	e01c      	b.n	8006814 <HAL_RCC_OscConfig+0x420>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	2b05      	cmp	r3, #5
 80067e0:	d10c      	bne.n	80067fc <HAL_RCC_OscConfig+0x408>
 80067e2:	4b8f      	ldr	r3, [pc, #572]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 80067e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80067e6:	4b8e      	ldr	r3, [pc, #568]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 80067e8:	2104      	movs	r1, #4
 80067ea:	430a      	orrs	r2, r1
 80067ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80067ee:	4b8c      	ldr	r3, [pc, #560]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 80067f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80067f2:	4b8b      	ldr	r3, [pc, #556]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 80067f4:	2101      	movs	r1, #1
 80067f6:	430a      	orrs	r2, r1
 80067f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80067fa:	e00b      	b.n	8006814 <HAL_RCC_OscConfig+0x420>
 80067fc:	4b88      	ldr	r3, [pc, #544]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 80067fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006800:	4b87      	ldr	r3, [pc, #540]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 8006802:	2101      	movs	r1, #1
 8006804:	438a      	bics	r2, r1
 8006806:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006808:	4b85      	ldr	r3, [pc, #532]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 800680a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800680c:	4b84      	ldr	r3, [pc, #528]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 800680e:	2104      	movs	r1, #4
 8006810:	438a      	bics	r2, r1
 8006812:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d014      	beq.n	8006846 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681c:	f7fd fc88 	bl	8004130 <HAL_GetTick>
 8006820:	0003      	movs	r3, r0
 8006822:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006824:	e009      	b.n	800683a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006826:	f7fd fc83 	bl	8004130 <HAL_GetTick>
 800682a:	0002      	movs	r2, r0
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	4a7d      	ldr	r2, [pc, #500]	@ (8006a28 <HAL_RCC_OscConfig+0x634>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e136      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800683a:	4b79      	ldr	r3, [pc, #484]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 800683c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800683e:	2202      	movs	r2, #2
 8006840:	4013      	ands	r3, r2
 8006842:	d0f0      	beq.n	8006826 <HAL_RCC_OscConfig+0x432>
 8006844:	e013      	b.n	800686e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006846:	f7fd fc73 	bl	8004130 <HAL_GetTick>
 800684a:	0003      	movs	r3, r0
 800684c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800684e:	e009      	b.n	8006864 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006850:	f7fd fc6e 	bl	8004130 <HAL_GetTick>
 8006854:	0002      	movs	r2, r0
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	4a73      	ldr	r2, [pc, #460]	@ (8006a28 <HAL_RCC_OscConfig+0x634>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d901      	bls.n	8006864 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e121      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006864:	4b6e      	ldr	r3, [pc, #440]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 8006866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006868:	2202      	movs	r2, #2
 800686a:	4013      	ands	r3, r2
 800686c:	d1f0      	bne.n	8006850 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800686e:	231f      	movs	r3, #31
 8006870:	18fb      	adds	r3, r7, r3
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d105      	bne.n	8006884 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006878:	4b69      	ldr	r3, [pc, #420]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 800687a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800687c:	4b68      	ldr	r3, [pc, #416]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 800687e:	496b      	ldr	r1, [pc, #428]	@ (8006a2c <HAL_RCC_OscConfig+0x638>)
 8006880:	400a      	ands	r2, r1
 8006882:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2220      	movs	r2, #32
 800688a:	4013      	ands	r3, r2
 800688c:	d039      	beq.n	8006902 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d01b      	beq.n	80068ce <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006896:	4b62      	ldr	r3, [pc, #392]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	4b61      	ldr	r3, [pc, #388]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 800689c:	2180      	movs	r1, #128	@ 0x80
 800689e:	03c9      	lsls	r1, r1, #15
 80068a0:	430a      	orrs	r2, r1
 80068a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068a4:	f7fd fc44 	bl	8004130 <HAL_GetTick>
 80068a8:	0003      	movs	r3, r0
 80068aa:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80068ac:	e008      	b.n	80068c0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068ae:	f7fd fc3f 	bl	8004130 <HAL_GetTick>
 80068b2:	0002      	movs	r2, r0
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d901      	bls.n	80068c0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e0f3      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80068c0:	4b57      	ldr	r3, [pc, #348]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	2380      	movs	r3, #128	@ 0x80
 80068c6:	041b      	lsls	r3, r3, #16
 80068c8:	4013      	ands	r3, r2
 80068ca:	d0f0      	beq.n	80068ae <HAL_RCC_OscConfig+0x4ba>
 80068cc:	e019      	b.n	8006902 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068ce:	4b54      	ldr	r3, [pc, #336]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	4b53      	ldr	r3, [pc, #332]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 80068d4:	4956      	ldr	r1, [pc, #344]	@ (8006a30 <HAL_RCC_OscConfig+0x63c>)
 80068d6:	400a      	ands	r2, r1
 80068d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068da:	f7fd fc29 	bl	8004130 <HAL_GetTick>
 80068de:	0003      	movs	r3, r0
 80068e0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80068e2:	e008      	b.n	80068f6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068e4:	f7fd fc24 	bl	8004130 <HAL_GetTick>
 80068e8:	0002      	movs	r2, r0
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d901      	bls.n	80068f6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e0d8      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80068f6:	4b4a      	ldr	r3, [pc, #296]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	2380      	movs	r3, #128	@ 0x80
 80068fc:	041b      	lsls	r3, r3, #16
 80068fe:	4013      	ands	r3, r2
 8006900:	d1f0      	bne.n	80068e4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d100      	bne.n	800690c <HAL_RCC_OscConfig+0x518>
 800690a:	e0cc      	b.n	8006aa6 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800690c:	4b44      	ldr	r3, [pc, #272]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	2238      	movs	r2, #56	@ 0x38
 8006912:	4013      	ands	r3, r2
 8006914:	2b10      	cmp	r3, #16
 8006916:	d100      	bne.n	800691a <HAL_RCC_OscConfig+0x526>
 8006918:	e07b      	b.n	8006a12 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	2b02      	cmp	r3, #2
 8006920:	d156      	bne.n	80069d0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006922:	4b3f      	ldr	r3, [pc, #252]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	4b3e      	ldr	r3, [pc, #248]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 8006928:	4942      	ldr	r1, [pc, #264]	@ (8006a34 <HAL_RCC_OscConfig+0x640>)
 800692a:	400a      	ands	r2, r1
 800692c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692e:	f7fd fbff 	bl	8004130 <HAL_GetTick>
 8006932:	0003      	movs	r3, r0
 8006934:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006936:	e008      	b.n	800694a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006938:	f7fd fbfa 	bl	8004130 <HAL_GetTick>
 800693c:	0002      	movs	r2, r0
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d901      	bls.n	800694a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e0ae      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800694a:	4b35      	ldr	r3, [pc, #212]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	2380      	movs	r3, #128	@ 0x80
 8006950:	049b      	lsls	r3, r3, #18
 8006952:	4013      	ands	r3, r2
 8006954:	d1f0      	bne.n	8006938 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006956:	4b32      	ldr	r3, [pc, #200]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	4a37      	ldr	r2, [pc, #220]	@ (8006a38 <HAL_RCC_OscConfig+0x644>)
 800695c:	4013      	ands	r3, r2
 800695e:	0019      	movs	r1, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696e:	021b      	lsls	r3, r3, #8
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006982:	431a      	orrs	r2, r3
 8006984:	4b26      	ldr	r3, [pc, #152]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 8006986:	430a      	orrs	r2, r1
 8006988:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800698a:	4b25      	ldr	r3, [pc, #148]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	4b24      	ldr	r3, [pc, #144]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 8006990:	2180      	movs	r1, #128	@ 0x80
 8006992:	0449      	lsls	r1, r1, #17
 8006994:	430a      	orrs	r2, r1
 8006996:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006998:	4b21      	ldr	r3, [pc, #132]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 800699a:	68da      	ldr	r2, [r3, #12]
 800699c:	4b20      	ldr	r3, [pc, #128]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 800699e:	2180      	movs	r1, #128	@ 0x80
 80069a0:	0549      	lsls	r1, r1, #21
 80069a2:	430a      	orrs	r2, r1
 80069a4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a6:	f7fd fbc3 	bl	8004130 <HAL_GetTick>
 80069aa:	0003      	movs	r3, r0
 80069ac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069b0:	f7fd fbbe 	bl	8004130 <HAL_GetTick>
 80069b4:	0002      	movs	r2, r0
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e072      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069c2:	4b17      	ldr	r3, [pc, #92]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	2380      	movs	r3, #128	@ 0x80
 80069c8:	049b      	lsls	r3, r3, #18
 80069ca:	4013      	ands	r3, r2
 80069cc:	d0f0      	beq.n	80069b0 <HAL_RCC_OscConfig+0x5bc>
 80069ce:	e06a      	b.n	8006aa6 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069d0:	4b13      	ldr	r3, [pc, #76]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	4b12      	ldr	r3, [pc, #72]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 80069d6:	4917      	ldr	r1, [pc, #92]	@ (8006a34 <HAL_RCC_OscConfig+0x640>)
 80069d8:	400a      	ands	r2, r1
 80069da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069dc:	f7fd fba8 	bl	8004130 <HAL_GetTick>
 80069e0:	0003      	movs	r3, r0
 80069e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069e4:	e008      	b.n	80069f8 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e6:	f7fd fba3 	bl	8004130 <HAL_GetTick>
 80069ea:	0002      	movs	r2, r0
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e057      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069f8:	4b09      	ldr	r3, [pc, #36]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	2380      	movs	r3, #128	@ 0x80
 80069fe:	049b      	lsls	r3, r3, #18
 8006a00:	4013      	ands	r3, r2
 8006a02:	d1f0      	bne.n	80069e6 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006a04:	4b06      	ldr	r3, [pc, #24]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 8006a06:	68da      	ldr	r2, [r3, #12]
 8006a08:	4b05      	ldr	r3, [pc, #20]	@ (8006a20 <HAL_RCC_OscConfig+0x62c>)
 8006a0a:	490c      	ldr	r1, [pc, #48]	@ (8006a3c <HAL_RCC_OscConfig+0x648>)
 8006a0c:	400a      	ands	r2, r1
 8006a0e:	60da      	str	r2, [r3, #12]
 8006a10:	e049      	b.n	8006aa6 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d112      	bne.n	8006a40 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e044      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
 8006a1e:	46c0      	nop			@ (mov r8, r8)
 8006a20:	40021000 	.word	0x40021000
 8006a24:	40007000 	.word	0x40007000
 8006a28:	00001388 	.word	0x00001388
 8006a2c:	efffffff 	.word	0xefffffff
 8006a30:	ffbfffff 	.word	0xffbfffff
 8006a34:	feffffff 	.word	0xfeffffff
 8006a38:	11c1808c 	.word	0x11c1808c
 8006a3c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006a40:	4b1b      	ldr	r3, [pc, #108]	@ (8006ab0 <HAL_RCC_OscConfig+0x6bc>)
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2203      	movs	r2, #3
 8006a4a:	401a      	ands	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d126      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	2270      	movs	r2, #112	@ 0x70
 8006a58:	401a      	ands	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d11f      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	23fe      	movs	r3, #254	@ 0xfe
 8006a66:	01db      	lsls	r3, r3, #7
 8006a68:	401a      	ands	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d116      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	23f8      	movs	r3, #248	@ 0xf8
 8006a78:	039b      	lsls	r3, r3, #14
 8006a7a:	401a      	ands	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d10e      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	23e0      	movs	r3, #224	@ 0xe0
 8006a88:	051b      	lsls	r3, r3, #20
 8006a8a:	401a      	ands	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d106      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	0f5b      	lsrs	r3, r3, #29
 8006a98:	075a      	lsls	r2, r3, #29
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d001      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	0018      	movs	r0, r3
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	b008      	add	sp, #32
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	40021000 	.word	0x40021000

08006ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e0e9      	b.n	8006c9c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ac8:	4b76      	ldr	r3, [pc, #472]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2207      	movs	r2, #7
 8006ace:	4013      	ands	r3, r2
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d91e      	bls.n	8006b14 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ad6:	4b73      	ldr	r3, [pc, #460]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2207      	movs	r2, #7
 8006adc:	4393      	bics	r3, r2
 8006ade:	0019      	movs	r1, r3
 8006ae0:	4b70      	ldr	r3, [pc, #448]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006ae8:	f7fd fb22 	bl	8004130 <HAL_GetTick>
 8006aec:	0003      	movs	r3, r0
 8006aee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006af0:	e009      	b.n	8006b06 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006af2:	f7fd fb1d 	bl	8004130 <HAL_GetTick>
 8006af6:	0002      	movs	r2, r0
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	4a6a      	ldr	r2, [pc, #424]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1f4>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e0ca      	b.n	8006c9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006b06:	4b67      	ldr	r3, [pc, #412]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2207      	movs	r2, #7
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d1ee      	bne.n	8006af2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	d015      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2204      	movs	r2, #4
 8006b24:	4013      	ands	r3, r2
 8006b26:	d006      	beq.n	8006b36 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006b28:	4b60      	ldr	r3, [pc, #384]	@ (8006cac <HAL_RCC_ClockConfig+0x1f8>)
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	4b5f      	ldr	r3, [pc, #380]	@ (8006cac <HAL_RCC_ClockConfig+0x1f8>)
 8006b2e:	21e0      	movs	r1, #224	@ 0xe0
 8006b30:	01c9      	lsls	r1, r1, #7
 8006b32:	430a      	orrs	r2, r1
 8006b34:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b36:	4b5d      	ldr	r3, [pc, #372]	@ (8006cac <HAL_RCC_ClockConfig+0x1f8>)
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	4a5d      	ldr	r2, [pc, #372]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1fc>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	0019      	movs	r1, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	4b59      	ldr	r3, [pc, #356]	@ (8006cac <HAL_RCC_ClockConfig+0x1f8>)
 8006b46:	430a      	orrs	r2, r1
 8006b48:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	4013      	ands	r3, r2
 8006b52:	d057      	beq.n	8006c04 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d107      	bne.n	8006b6c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b5c:	4b53      	ldr	r3, [pc, #332]	@ (8006cac <HAL_RCC_ClockConfig+0x1f8>)
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	2380      	movs	r3, #128	@ 0x80
 8006b62:	029b      	lsls	r3, r3, #10
 8006b64:	4013      	ands	r3, r2
 8006b66:	d12b      	bne.n	8006bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e097      	b.n	8006c9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d107      	bne.n	8006b84 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b74:	4b4d      	ldr	r3, [pc, #308]	@ (8006cac <HAL_RCC_ClockConfig+0x1f8>)
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	2380      	movs	r3, #128	@ 0x80
 8006b7a:	049b      	lsls	r3, r3, #18
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	d11f      	bne.n	8006bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e08b      	b.n	8006c9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d107      	bne.n	8006b9c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b8c:	4b47      	ldr	r3, [pc, #284]	@ (8006cac <HAL_RCC_ClockConfig+0x1f8>)
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	2380      	movs	r3, #128	@ 0x80
 8006b92:	00db      	lsls	r3, r3, #3
 8006b94:	4013      	ands	r3, r2
 8006b96:	d113      	bne.n	8006bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e07f      	b.n	8006c9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	2b03      	cmp	r3, #3
 8006ba2:	d106      	bne.n	8006bb2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ba4:	4b41      	ldr	r3, [pc, #260]	@ (8006cac <HAL_RCC_ClockConfig+0x1f8>)
 8006ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ba8:	2202      	movs	r2, #2
 8006baa:	4013      	ands	r3, r2
 8006bac:	d108      	bne.n	8006bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e074      	b.n	8006c9c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bb2:	4b3e      	ldr	r3, [pc, #248]	@ (8006cac <HAL_RCC_ClockConfig+0x1f8>)
 8006bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	4013      	ands	r3, r2
 8006bba:	d101      	bne.n	8006bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e06d      	b.n	8006c9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8006cac <HAL_RCC_ClockConfig+0x1f8>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	2207      	movs	r2, #7
 8006bc6:	4393      	bics	r3, r2
 8006bc8:	0019      	movs	r1, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	4b37      	ldr	r3, [pc, #220]	@ (8006cac <HAL_RCC_ClockConfig+0x1f8>)
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bd4:	f7fd faac 	bl	8004130 <HAL_GetTick>
 8006bd8:	0003      	movs	r3, r0
 8006bda:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bdc:	e009      	b.n	8006bf2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bde:	f7fd faa7 	bl	8004130 <HAL_GetTick>
 8006be2:	0002      	movs	r2, r0
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	4a2f      	ldr	r2, [pc, #188]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1f4>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d901      	bls.n	8006bf2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e054      	b.n	8006c9c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8006cac <HAL_RCC_ClockConfig+0x1f8>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	2238      	movs	r2, #56	@ 0x38
 8006bf8:	401a      	ands	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d1ec      	bne.n	8006bde <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c04:	4b27      	ldr	r3, [pc, #156]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2207      	movs	r2, #7
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d21e      	bcs.n	8006c50 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c12:	4b24      	ldr	r3, [pc, #144]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2207      	movs	r2, #7
 8006c18:	4393      	bics	r3, r2
 8006c1a:	0019      	movs	r1, r3
 8006c1c:	4b21      	ldr	r3, [pc, #132]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c24:	f7fd fa84 	bl	8004130 <HAL_GetTick>
 8006c28:	0003      	movs	r3, r0
 8006c2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006c2c:	e009      	b.n	8006c42 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c2e:	f7fd fa7f 	bl	8004130 <HAL_GetTick>
 8006c32:	0002      	movs	r2, r0
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	4a1b      	ldr	r2, [pc, #108]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1f4>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e02c      	b.n	8006c9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006c42:	4b18      	ldr	r3, [pc, #96]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2207      	movs	r2, #7
 8006c48:	4013      	ands	r3, r2
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d1ee      	bne.n	8006c2e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2204      	movs	r2, #4
 8006c56:	4013      	ands	r3, r2
 8006c58:	d009      	beq.n	8006c6e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006c5a:	4b14      	ldr	r3, [pc, #80]	@ (8006cac <HAL_RCC_ClockConfig+0x1f8>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	4a15      	ldr	r2, [pc, #84]	@ (8006cb4 <HAL_RCC_ClockConfig+0x200>)
 8006c60:	4013      	ands	r3, r2
 8006c62:	0019      	movs	r1, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68da      	ldr	r2, [r3, #12]
 8006c68:	4b10      	ldr	r3, [pc, #64]	@ (8006cac <HAL_RCC_ClockConfig+0x1f8>)
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006c6e:	f000 f829 	bl	8006cc4 <HAL_RCC_GetSysClockFreq>
 8006c72:	0001      	movs	r1, r0
 8006c74:	4b0d      	ldr	r3, [pc, #52]	@ (8006cac <HAL_RCC_ClockConfig+0x1f8>)
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	0a1b      	lsrs	r3, r3, #8
 8006c7a:	220f      	movs	r2, #15
 8006c7c:	401a      	ands	r2, r3
 8006c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006cb8 <HAL_RCC_ClockConfig+0x204>)
 8006c80:	0092      	lsls	r2, r2, #2
 8006c82:	58d3      	ldr	r3, [r2, r3]
 8006c84:	221f      	movs	r2, #31
 8006c86:	4013      	ands	r3, r2
 8006c88:	000a      	movs	r2, r1
 8006c8a:	40da      	lsrs	r2, r3
 8006c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006cbc <HAL_RCC_ClockConfig+0x208>)
 8006c8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006c90:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc0 <HAL_RCC_ClockConfig+0x20c>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	0018      	movs	r0, r3
 8006c96:	f7fd f9ef 	bl	8004078 <HAL_InitTick>
 8006c9a:	0003      	movs	r3, r0
}
 8006c9c:	0018      	movs	r0, r3
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	b004      	add	sp, #16
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	40022000 	.word	0x40022000
 8006ca8:	00001388 	.word	0x00001388
 8006cac:	40021000 	.word	0x40021000
 8006cb0:	fffff0ff 	.word	0xfffff0ff
 8006cb4:	ffff8fff 	.word	0xffff8fff
 8006cb8:	08009ed0 	.word	0x08009ed0
 8006cbc:	20000000 	.word	0x20000000
 8006cc0:	20000004 	.word	0x20000004

08006cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006cca:	4b3c      	ldr	r3, [pc, #240]	@ (8006dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	2238      	movs	r2, #56	@ 0x38
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	d10f      	bne.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006cd4:	4b39      	ldr	r3, [pc, #228]	@ (8006dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	0adb      	lsrs	r3, r3, #11
 8006cda:	2207      	movs	r2, #7
 8006cdc:	4013      	ands	r3, r2
 8006cde:	2201      	movs	r2, #1
 8006ce0:	409a      	lsls	r2, r3
 8006ce2:	0013      	movs	r3, r2
 8006ce4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	4835      	ldr	r0, [pc, #212]	@ (8006dc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006cea:	f7f9 fa0d 	bl	8000108 <__udivsi3>
 8006cee:	0003      	movs	r3, r0
 8006cf0:	613b      	str	r3, [r7, #16]
 8006cf2:	e05d      	b.n	8006db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cf4:	4b31      	ldr	r3, [pc, #196]	@ (8006dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	2238      	movs	r2, #56	@ 0x38
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	d102      	bne.n	8006d06 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d00:	4b30      	ldr	r3, [pc, #192]	@ (8006dc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8006d02:	613b      	str	r3, [r7, #16]
 8006d04:	e054      	b.n	8006db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d06:	4b2d      	ldr	r3, [pc, #180]	@ (8006dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	2238      	movs	r2, #56	@ 0x38
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	2b10      	cmp	r3, #16
 8006d10:	d138      	bne.n	8006d84 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006d12:	4b2a      	ldr	r3, [pc, #168]	@ (8006dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	2203      	movs	r2, #3
 8006d18:	4013      	ands	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d1c:	4b27      	ldr	r3, [pc, #156]	@ (8006dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	091b      	lsrs	r3, r3, #4
 8006d22:	2207      	movs	r2, #7
 8006d24:	4013      	ands	r3, r2
 8006d26:	3301      	adds	r3, #1
 8006d28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d10d      	bne.n	8006d4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d30:	68b9      	ldr	r1, [r7, #8]
 8006d32:	4824      	ldr	r0, [pc, #144]	@ (8006dc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8006d34:	f7f9 f9e8 	bl	8000108 <__udivsi3>
 8006d38:	0003      	movs	r3, r0
 8006d3a:	0019      	movs	r1, r3
 8006d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8006dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	0a1b      	lsrs	r3, r3, #8
 8006d42:	227f      	movs	r2, #127	@ 0x7f
 8006d44:	4013      	ands	r3, r2
 8006d46:	434b      	muls	r3, r1
 8006d48:	617b      	str	r3, [r7, #20]
        break;
 8006d4a:	e00d      	b.n	8006d68 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	481c      	ldr	r0, [pc, #112]	@ (8006dc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006d50:	f7f9 f9da 	bl	8000108 <__udivsi3>
 8006d54:	0003      	movs	r3, r0
 8006d56:	0019      	movs	r1, r3
 8006d58:	4b18      	ldr	r3, [pc, #96]	@ (8006dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	0a1b      	lsrs	r3, r3, #8
 8006d5e:	227f      	movs	r2, #127	@ 0x7f
 8006d60:	4013      	ands	r3, r2
 8006d62:	434b      	muls	r3, r1
 8006d64:	617b      	str	r3, [r7, #20]
        break;
 8006d66:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006d68:	4b14      	ldr	r3, [pc, #80]	@ (8006dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	0f5b      	lsrs	r3, r3, #29
 8006d6e:	2207      	movs	r2, #7
 8006d70:	4013      	ands	r3, r2
 8006d72:	3301      	adds	r3, #1
 8006d74:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006d76:	6879      	ldr	r1, [r7, #4]
 8006d78:	6978      	ldr	r0, [r7, #20]
 8006d7a:	f7f9 f9c5 	bl	8000108 <__udivsi3>
 8006d7e:	0003      	movs	r3, r0
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	e015      	b.n	8006db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006d84:	4b0d      	ldr	r3, [pc, #52]	@ (8006dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	2238      	movs	r2, #56	@ 0x38
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	2b20      	cmp	r3, #32
 8006d8e:	d103      	bne.n	8006d98 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006d90:	2380      	movs	r3, #128	@ 0x80
 8006d92:	021b      	lsls	r3, r3, #8
 8006d94:	613b      	str	r3, [r7, #16]
 8006d96:	e00b      	b.n	8006db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006d98:	4b08      	ldr	r3, [pc, #32]	@ (8006dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	2238      	movs	r2, #56	@ 0x38
 8006d9e:	4013      	ands	r3, r2
 8006da0:	2b18      	cmp	r3, #24
 8006da2:	d103      	bne.n	8006dac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006da4:	23fa      	movs	r3, #250	@ 0xfa
 8006da6:	01db      	lsls	r3, r3, #7
 8006da8:	613b      	str	r3, [r7, #16]
 8006daa:	e001      	b.n	8006db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006db0:	693b      	ldr	r3, [r7, #16]
}
 8006db2:	0018      	movs	r0, r3
 8006db4:	46bd      	mov	sp, r7
 8006db6:	b006      	add	sp, #24
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	46c0      	nop			@ (mov r8, r8)
 8006dbc:	40021000 	.word	0x40021000
 8006dc0:	00f42400 	.word	0x00f42400
 8006dc4:	007a1200 	.word	0x007a1200

08006dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006dd0:	2313      	movs	r3, #19
 8006dd2:	18fb      	adds	r3, r7, r3
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006dd8:	2312      	movs	r3, #18
 8006dda:	18fb      	adds	r3, r7, r3
 8006ddc:	2200      	movs	r2, #0
 8006dde:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	2380      	movs	r3, #128	@ 0x80
 8006de6:	029b      	lsls	r3, r3, #10
 8006de8:	4013      	ands	r3, r2
 8006dea:	d100      	bne.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006dec:	e0ad      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dee:	2011      	movs	r0, #17
 8006df0:	183b      	adds	r3, r7, r0
 8006df2:	2200      	movs	r2, #0
 8006df4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006df6:	4b47      	ldr	r3, [pc, #284]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006df8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dfa:	2380      	movs	r3, #128	@ 0x80
 8006dfc:	055b      	lsls	r3, r3, #21
 8006dfe:	4013      	ands	r3, r2
 8006e00:	d110      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e02:	4b44      	ldr	r3, [pc, #272]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006e04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e06:	4b43      	ldr	r3, [pc, #268]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006e08:	2180      	movs	r1, #128	@ 0x80
 8006e0a:	0549      	lsls	r1, r1, #21
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006e10:	4b40      	ldr	r3, [pc, #256]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006e12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e14:	2380      	movs	r3, #128	@ 0x80
 8006e16:	055b      	lsls	r3, r3, #21
 8006e18:	4013      	ands	r3, r2
 8006e1a:	60bb      	str	r3, [r7, #8]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e1e:	183b      	adds	r3, r7, r0
 8006e20:	2201      	movs	r2, #1
 8006e22:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e24:	4b3c      	ldr	r3, [pc, #240]	@ (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	4b3b      	ldr	r3, [pc, #236]	@ (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006e2a:	2180      	movs	r1, #128	@ 0x80
 8006e2c:	0049      	lsls	r1, r1, #1
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e32:	f7fd f97d 	bl	8004130 <HAL_GetTick>
 8006e36:	0003      	movs	r3, r0
 8006e38:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e3a:	e00b      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e3c:	f7fd f978 	bl	8004130 <HAL_GetTick>
 8006e40:	0002      	movs	r2, r0
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d904      	bls.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006e4a:	2313      	movs	r3, #19
 8006e4c:	18fb      	adds	r3, r7, r3
 8006e4e:	2203      	movs	r2, #3
 8006e50:	701a      	strb	r2, [r3, #0]
        break;
 8006e52:	e005      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e54:	4b30      	ldr	r3, [pc, #192]	@ (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	2380      	movs	r3, #128	@ 0x80
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	d0ed      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006e60:	2313      	movs	r3, #19
 8006e62:	18fb      	adds	r3, r7, r3
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d15e      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006e6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e6e:	23c0      	movs	r3, #192	@ 0xc0
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4013      	ands	r3, r2
 8006e74:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d019      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d014      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e86:	4b23      	ldr	r3, [pc, #140]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e8a:	4a24      	ldr	r2, [pc, #144]	@ (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e90:	4b20      	ldr	r3, [pc, #128]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006e92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e94:	4b1f      	ldr	r3, [pc, #124]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006e96:	2180      	movs	r1, #128	@ 0x80
 8006e98:	0249      	lsls	r1, r1, #9
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006ea0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006ea4:	491e      	ldr	r1, [pc, #120]	@ (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8006ea6:	400a      	ands	r2, r1
 8006ea8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	d016      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb8:	f7fd f93a 	bl	8004130 <HAL_GetTick>
 8006ebc:	0003      	movs	r3, r0
 8006ebe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ec0:	e00c      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ec2:	f7fd f935 	bl	8004130 <HAL_GetTick>
 8006ec6:	0002      	movs	r2, r0
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	4a15      	ldr	r2, [pc, #84]	@ (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d904      	bls.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006ed2:	2313      	movs	r3, #19
 8006ed4:	18fb      	adds	r3, r7, r3
 8006ed6:	2203      	movs	r2, #3
 8006ed8:	701a      	strb	r2, [r3, #0]
            break;
 8006eda:	e004      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006edc:	4b0d      	ldr	r3, [pc, #52]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	d0ed      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006ee6:	2313      	movs	r3, #19
 8006ee8:	18fb      	adds	r3, r7, r3
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ef0:	4b08      	ldr	r3, [pc, #32]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ef4:	4a09      	ldr	r2, [pc, #36]	@ (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	0019      	movs	r1, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006efe:	4b05      	ldr	r3, [pc, #20]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006f00:	430a      	orrs	r2, r1
 8006f02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006f04:	e016      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f06:	2312      	movs	r3, #18
 8006f08:	18fb      	adds	r3, r7, r3
 8006f0a:	2213      	movs	r2, #19
 8006f0c:	18ba      	adds	r2, r7, r2
 8006f0e:	7812      	ldrb	r2, [r2, #0]
 8006f10:	701a      	strb	r2, [r3, #0]
 8006f12:	e00f      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006f14:	40021000 	.word	0x40021000
 8006f18:	40007000 	.word	0x40007000
 8006f1c:	fffffcff 	.word	0xfffffcff
 8006f20:	fffeffff 	.word	0xfffeffff
 8006f24:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f28:	2312      	movs	r3, #18
 8006f2a:	18fb      	adds	r3, r7, r3
 8006f2c:	2213      	movs	r2, #19
 8006f2e:	18ba      	adds	r2, r7, r2
 8006f30:	7812      	ldrb	r2, [r2, #0]
 8006f32:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f34:	2311      	movs	r3, #17
 8006f36:	18fb      	adds	r3, r7, r3
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d105      	bne.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f3e:	4bb6      	ldr	r3, [pc, #728]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f42:	4bb5      	ldr	r3, [pc, #724]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f44:	49b5      	ldr	r1, [pc, #724]	@ (800721c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8006f46:	400a      	ands	r2, r1
 8006f48:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	4013      	ands	r3, r2
 8006f52:	d009      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f54:	4bb0      	ldr	r3, [pc, #704]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f58:	2203      	movs	r2, #3
 8006f5a:	4393      	bics	r3, r2
 8006f5c:	0019      	movs	r1, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	4bad      	ldr	r3, [pc, #692]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f64:	430a      	orrs	r2, r1
 8006f66:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	4013      	ands	r3, r2
 8006f70:	d009      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f72:	4ba9      	ldr	r3, [pc, #676]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f76:	220c      	movs	r2, #12
 8006f78:	4393      	bics	r3, r2
 8006f7a:	0019      	movs	r1, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	4ba5      	ldr	r3, [pc, #660]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f82:	430a      	orrs	r2, r1
 8006f84:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2204      	movs	r2, #4
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	d009      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f90:	4ba1      	ldr	r3, [pc, #644]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f94:	2230      	movs	r2, #48	@ 0x30
 8006f96:	4393      	bics	r3, r2
 8006f98:	0019      	movs	r1, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	4b9e      	ldr	r3, [pc, #632]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2210      	movs	r2, #16
 8006faa:	4013      	ands	r3, r2
 8006fac:	d009      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fae:	4b9a      	ldr	r3, [pc, #616]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb2:	4a9b      	ldr	r2, [pc, #620]	@ (8007220 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	0019      	movs	r1, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	691a      	ldr	r2, [r3, #16]
 8006fbc:	4b96      	ldr	r3, [pc, #600]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	2380      	movs	r3, #128	@ 0x80
 8006fc8:	015b      	lsls	r3, r3, #5
 8006fca:	4013      	ands	r3, r2
 8006fcc:	d009      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8006fce:	4b92      	ldr	r3, [pc, #584]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd2:	4a94      	ldr	r2, [pc, #592]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	0019      	movs	r1, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	695a      	ldr	r2, [r3, #20]
 8006fdc:	4b8e      	ldr	r3, [pc, #568]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	2380      	movs	r3, #128	@ 0x80
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4013      	ands	r3, r2
 8006fec:	d009      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fee:	4b8a      	ldr	r3, [pc, #552]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ff2:	4a8d      	ldr	r2, [pc, #564]	@ (8007228 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	0019      	movs	r1, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ffc:	4b86      	ldr	r3, [pc, #536]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ffe:	430a      	orrs	r2, r1
 8007000:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	2380      	movs	r3, #128	@ 0x80
 8007008:	00db      	lsls	r3, r3, #3
 800700a:	4013      	ands	r3, r2
 800700c:	d009      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800700e:	4b82      	ldr	r3, [pc, #520]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007012:	4a86      	ldr	r2, [pc, #536]	@ (800722c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8007014:	4013      	ands	r3, r2
 8007016:	0019      	movs	r1, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800701c:	4b7e      	ldr	r3, [pc, #504]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800701e:	430a      	orrs	r2, r1
 8007020:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2220      	movs	r2, #32
 8007028:	4013      	ands	r3, r2
 800702a:	d009      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800702c:	4b7a      	ldr	r3, [pc, #488]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800702e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007030:	4a7f      	ldr	r2, [pc, #508]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007032:	4013      	ands	r3, r2
 8007034:	0019      	movs	r1, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	699a      	ldr	r2, [r3, #24]
 800703a:	4b77      	ldr	r3, [pc, #476]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800703c:	430a      	orrs	r2, r1
 800703e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2240      	movs	r2, #64	@ 0x40
 8007046:	4013      	ands	r3, r2
 8007048:	d009      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800704a:	4b73      	ldr	r3, [pc, #460]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800704c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800704e:	4a79      	ldr	r2, [pc, #484]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8007050:	4013      	ands	r3, r2
 8007052:	0019      	movs	r1, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	69da      	ldr	r2, [r3, #28]
 8007058:	4b6f      	ldr	r3, [pc, #444]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800705a:	430a      	orrs	r2, r1
 800705c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	2380      	movs	r3, #128	@ 0x80
 8007064:	01db      	lsls	r3, r3, #7
 8007066:	4013      	ands	r3, r2
 8007068:	d015      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800706a:	4b6b      	ldr	r3, [pc, #428]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800706c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	0899      	lsrs	r1, r3, #2
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007076:	4b68      	ldr	r3, [pc, #416]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007078:	430a      	orrs	r2, r1
 800707a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007080:	2380      	movs	r3, #128	@ 0x80
 8007082:	05db      	lsls	r3, r3, #23
 8007084:	429a      	cmp	r2, r3
 8007086:	d106      	bne.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007088:	4b63      	ldr	r3, [pc, #396]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800708a:	68da      	ldr	r2, [r3, #12]
 800708c:	4b62      	ldr	r3, [pc, #392]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800708e:	2180      	movs	r1, #128	@ 0x80
 8007090:	0249      	lsls	r1, r1, #9
 8007092:	430a      	orrs	r2, r1
 8007094:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	2380      	movs	r3, #128	@ 0x80
 800709c:	031b      	lsls	r3, r3, #12
 800709e:	4013      	ands	r3, r2
 80070a0:	d009      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80070a2:	4b5d      	ldr	r3, [pc, #372]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070a6:	2240      	movs	r2, #64	@ 0x40
 80070a8:	4393      	bics	r3, r2
 80070aa:	0019      	movs	r1, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070b0:	4b59      	ldr	r3, [pc, #356]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070b2:	430a      	orrs	r2, r1
 80070b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	2380      	movs	r3, #128	@ 0x80
 80070bc:	039b      	lsls	r3, r3, #14
 80070be:	4013      	ands	r3, r2
 80070c0:	d016      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80070c2:	4b55      	ldr	r3, [pc, #340]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070c6:	4a5c      	ldr	r2, [pc, #368]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	0019      	movs	r1, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070d0:	4b51      	ldr	r3, [pc, #324]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070d2:	430a      	orrs	r2, r1
 80070d4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070da:	2380      	movs	r3, #128	@ 0x80
 80070dc:	03db      	lsls	r3, r3, #15
 80070de:	429a      	cmp	r2, r3
 80070e0:	d106      	bne.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80070e2:	4b4d      	ldr	r3, [pc, #308]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	4b4c      	ldr	r3, [pc, #304]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070e8:	2180      	movs	r1, #128	@ 0x80
 80070ea:	0449      	lsls	r1, r1, #17
 80070ec:	430a      	orrs	r2, r1
 80070ee:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	2380      	movs	r3, #128	@ 0x80
 80070f6:	03db      	lsls	r3, r3, #15
 80070f8:	4013      	ands	r3, r2
 80070fa:	d016      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80070fc:	4b46      	ldr	r3, [pc, #280]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007100:	4a4e      	ldr	r2, [pc, #312]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007102:	4013      	ands	r3, r2
 8007104:	0019      	movs	r1, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800710a:	4b43      	ldr	r3, [pc, #268]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800710c:	430a      	orrs	r2, r1
 800710e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007114:	2380      	movs	r3, #128	@ 0x80
 8007116:	045b      	lsls	r3, r3, #17
 8007118:	429a      	cmp	r2, r3
 800711a:	d106      	bne.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800711c:	4b3e      	ldr	r3, [pc, #248]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	4b3d      	ldr	r3, [pc, #244]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007122:	2180      	movs	r1, #128	@ 0x80
 8007124:	0449      	lsls	r1, r1, #17
 8007126:	430a      	orrs	r2, r1
 8007128:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	2380      	movs	r3, #128	@ 0x80
 8007130:	011b      	lsls	r3, r3, #4
 8007132:	4013      	ands	r3, r2
 8007134:	d014      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007136:	4b38      	ldr	r3, [pc, #224]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800713a:	2203      	movs	r2, #3
 800713c:	4393      	bics	r3, r2
 800713e:	0019      	movs	r1, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a1a      	ldr	r2, [r3, #32]
 8007144:	4b34      	ldr	r3, [pc, #208]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007146:	430a      	orrs	r2, r1
 8007148:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d106      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007152:	4b31      	ldr	r3, [pc, #196]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	4b30      	ldr	r3, [pc, #192]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007158:	2180      	movs	r1, #128	@ 0x80
 800715a:	0249      	lsls	r1, r1, #9
 800715c:	430a      	orrs	r2, r1
 800715e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	2380      	movs	r3, #128	@ 0x80
 8007166:	019b      	lsls	r3, r3, #6
 8007168:	4013      	ands	r3, r2
 800716a:	d014      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800716c:	4b2a      	ldr	r3, [pc, #168]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800716e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007170:	220c      	movs	r2, #12
 8007172:	4393      	bics	r3, r2
 8007174:	0019      	movs	r1, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800717a:	4b27      	ldr	r3, [pc, #156]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800717c:	430a      	orrs	r2, r1
 800717e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007184:	2b04      	cmp	r3, #4
 8007186:	d106      	bne.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007188:	4b23      	ldr	r3, [pc, #140]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	4b22      	ldr	r3, [pc, #136]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800718e:	2180      	movs	r1, #128	@ 0x80
 8007190:	0249      	lsls	r1, r1, #9
 8007192:	430a      	orrs	r2, r1
 8007194:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	2380      	movs	r3, #128	@ 0x80
 800719c:	045b      	lsls	r3, r3, #17
 800719e:	4013      	ands	r3, r2
 80071a0:	d016      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071a2:	4b1d      	ldr	r3, [pc, #116]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80071a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071a6:	4a22      	ldr	r2, [pc, #136]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80071a8:	4013      	ands	r3, r2
 80071aa:	0019      	movs	r1, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071b0:	4b19      	ldr	r3, [pc, #100]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80071b2:	430a      	orrs	r2, r1
 80071b4:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071ba:	2380      	movs	r3, #128	@ 0x80
 80071bc:	019b      	lsls	r3, r3, #6
 80071be:	429a      	cmp	r2, r3
 80071c0:	d106      	bne.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80071c2:	4b15      	ldr	r3, [pc, #84]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80071c4:	68da      	ldr	r2, [r3, #12]
 80071c6:	4b14      	ldr	r3, [pc, #80]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80071c8:	2180      	movs	r1, #128	@ 0x80
 80071ca:	0449      	lsls	r1, r1, #17
 80071cc:	430a      	orrs	r2, r1
 80071ce:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	2380      	movs	r3, #128	@ 0x80
 80071d6:	049b      	lsls	r3, r3, #18
 80071d8:	4013      	ands	r3, r2
 80071da:	d016      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80071de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071e0:	4a10      	ldr	r2, [pc, #64]	@ (8007224 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80071e2:	4013      	ands	r3, r2
 80071e4:	0019      	movs	r1, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80071ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80071ec:	430a      	orrs	r2, r1
 80071ee:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80071f4:	2380      	movs	r3, #128	@ 0x80
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d106      	bne.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80071fc:	4b06      	ldr	r3, [pc, #24]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80071fe:	68da      	ldr	r2, [r3, #12]
 8007200:	4b05      	ldr	r3, [pc, #20]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007202:	2180      	movs	r1, #128	@ 0x80
 8007204:	0449      	lsls	r1, r1, #17
 8007206:	430a      	orrs	r2, r1
 8007208:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800720a:	2312      	movs	r3, #18
 800720c:	18fb      	adds	r3, r7, r3
 800720e:	781b      	ldrb	r3, [r3, #0]
}
 8007210:	0018      	movs	r0, r3
 8007212:	46bd      	mov	sp, r7
 8007214:	b006      	add	sp, #24
 8007216:	bd80      	pop	{r7, pc}
 8007218:	40021000 	.word	0x40021000
 800721c:	efffffff 	.word	0xefffffff
 8007220:	fffff3ff 	.word	0xfffff3ff
 8007224:	fffffcff 	.word	0xfffffcff
 8007228:	fff3ffff 	.word	0xfff3ffff
 800722c:	ffcfffff 	.word	0xffcfffff
 8007230:	ffffcfff 	.word	0xffffcfff
 8007234:	ffff3fff 	.word	0xffff3fff
 8007238:	ffbfffff 	.word	0xffbfffff
 800723c:	feffffff 	.word	0xfeffffff

08007240 <__NVIC_SetPriority>:
{
 8007240:	b590      	push	{r4, r7, lr}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	0002      	movs	r2, r0
 8007248:	6039      	str	r1, [r7, #0]
 800724a:	1dfb      	adds	r3, r7, #7
 800724c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800724e:	1dfb      	adds	r3, r7, #7
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	2b7f      	cmp	r3, #127	@ 0x7f
 8007254:	d828      	bhi.n	80072a8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007256:	4a2f      	ldr	r2, [pc, #188]	@ (8007314 <__NVIC_SetPriority+0xd4>)
 8007258:	1dfb      	adds	r3, r7, #7
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	b25b      	sxtb	r3, r3
 800725e:	089b      	lsrs	r3, r3, #2
 8007260:	33c0      	adds	r3, #192	@ 0xc0
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	589b      	ldr	r3, [r3, r2]
 8007266:	1dfa      	adds	r2, r7, #7
 8007268:	7812      	ldrb	r2, [r2, #0]
 800726a:	0011      	movs	r1, r2
 800726c:	2203      	movs	r2, #3
 800726e:	400a      	ands	r2, r1
 8007270:	00d2      	lsls	r2, r2, #3
 8007272:	21ff      	movs	r1, #255	@ 0xff
 8007274:	4091      	lsls	r1, r2
 8007276:	000a      	movs	r2, r1
 8007278:	43d2      	mvns	r2, r2
 800727a:	401a      	ands	r2, r3
 800727c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	019b      	lsls	r3, r3, #6
 8007282:	22ff      	movs	r2, #255	@ 0xff
 8007284:	401a      	ands	r2, r3
 8007286:	1dfb      	adds	r3, r7, #7
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	0018      	movs	r0, r3
 800728c:	2303      	movs	r3, #3
 800728e:	4003      	ands	r3, r0
 8007290:	00db      	lsls	r3, r3, #3
 8007292:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007294:	481f      	ldr	r0, [pc, #124]	@ (8007314 <__NVIC_SetPriority+0xd4>)
 8007296:	1dfb      	adds	r3, r7, #7
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	b25b      	sxtb	r3, r3
 800729c:	089b      	lsrs	r3, r3, #2
 800729e:	430a      	orrs	r2, r1
 80072a0:	33c0      	adds	r3, #192	@ 0xc0
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	501a      	str	r2, [r3, r0]
}
 80072a6:	e031      	b.n	800730c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80072a8:	4a1b      	ldr	r2, [pc, #108]	@ (8007318 <__NVIC_SetPriority+0xd8>)
 80072aa:	1dfb      	adds	r3, r7, #7
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	0019      	movs	r1, r3
 80072b0:	230f      	movs	r3, #15
 80072b2:	400b      	ands	r3, r1
 80072b4:	3b08      	subs	r3, #8
 80072b6:	089b      	lsrs	r3, r3, #2
 80072b8:	3306      	adds	r3, #6
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	18d3      	adds	r3, r2, r3
 80072be:	3304      	adds	r3, #4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	1dfa      	adds	r2, r7, #7
 80072c4:	7812      	ldrb	r2, [r2, #0]
 80072c6:	0011      	movs	r1, r2
 80072c8:	2203      	movs	r2, #3
 80072ca:	400a      	ands	r2, r1
 80072cc:	00d2      	lsls	r2, r2, #3
 80072ce:	21ff      	movs	r1, #255	@ 0xff
 80072d0:	4091      	lsls	r1, r2
 80072d2:	000a      	movs	r2, r1
 80072d4:	43d2      	mvns	r2, r2
 80072d6:	401a      	ands	r2, r3
 80072d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	019b      	lsls	r3, r3, #6
 80072de:	22ff      	movs	r2, #255	@ 0xff
 80072e0:	401a      	ands	r2, r3
 80072e2:	1dfb      	adds	r3, r7, #7
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	0018      	movs	r0, r3
 80072e8:	2303      	movs	r3, #3
 80072ea:	4003      	ands	r3, r0
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80072f0:	4809      	ldr	r0, [pc, #36]	@ (8007318 <__NVIC_SetPriority+0xd8>)
 80072f2:	1dfb      	adds	r3, r7, #7
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	001c      	movs	r4, r3
 80072f8:	230f      	movs	r3, #15
 80072fa:	4023      	ands	r3, r4
 80072fc:	3b08      	subs	r3, #8
 80072fe:	089b      	lsrs	r3, r3, #2
 8007300:	430a      	orrs	r2, r1
 8007302:	3306      	adds	r3, #6
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	18c3      	adds	r3, r0, r3
 8007308:	3304      	adds	r3, #4
 800730a:	601a      	str	r2, [r3, #0]
}
 800730c:	46c0      	nop			@ (mov r8, r8)
 800730e:	46bd      	mov	sp, r7
 8007310:	b003      	add	sp, #12
 8007312:	bd90      	pop	{r4, r7, pc}
 8007314:	e000e100 	.word	0xe000e100
 8007318:	e000ed00 	.word	0xe000ed00

0800731c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800731c:	b580      	push	{r7, lr}
 800731e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007320:	2305      	movs	r3, #5
 8007322:	425b      	negs	r3, r3
 8007324:	2100      	movs	r1, #0
 8007326:	0018      	movs	r0, r3
 8007328:	f7ff ff8a 	bl	8007240 <__NVIC_SetPriority>
#endif
}
 800732c:	46c0      	nop			@ (mov r8, r8)
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
	...

08007334 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800733a:	f3ef 8305 	mrs	r3, IPSR
 800733e:	603b      	str	r3, [r7, #0]
  return(result);
 8007340:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007346:	2306      	movs	r3, #6
 8007348:	425b      	negs	r3, r3
 800734a:	607b      	str	r3, [r7, #4]
 800734c:	e00c      	b.n	8007368 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800734e:	4b09      	ldr	r3, [pc, #36]	@ (8007374 <osKernelInitialize+0x40>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d105      	bne.n	8007362 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007356:	4b07      	ldr	r3, [pc, #28]	@ (8007374 <osKernelInitialize+0x40>)
 8007358:	2201      	movs	r2, #1
 800735a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800735c:	2300      	movs	r3, #0
 800735e:	607b      	str	r3, [r7, #4]
 8007360:	e002      	b.n	8007368 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007362:	2301      	movs	r3, #1
 8007364:	425b      	negs	r3, r3
 8007366:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007368:	687b      	ldr	r3, [r7, #4]
}
 800736a:	0018      	movs	r0, r3
 800736c:	46bd      	mov	sp, r7
 800736e:	b002      	add	sp, #8
 8007370:	bd80      	pop	{r7, pc}
 8007372:	46c0      	nop			@ (mov r8, r8)
 8007374:	200002ac 	.word	0x200002ac

08007378 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800737e:	f3ef 8305 	mrs	r3, IPSR
 8007382:	603b      	str	r3, [r7, #0]
  return(result);
 8007384:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <osKernelStart+0x1a>
    stat = osErrorISR;
 800738a:	2306      	movs	r3, #6
 800738c:	425b      	negs	r3, r3
 800738e:	607b      	str	r3, [r7, #4]
 8007390:	e010      	b.n	80073b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007392:	4b0b      	ldr	r3, [pc, #44]	@ (80073c0 <osKernelStart+0x48>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d109      	bne.n	80073ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800739a:	f7ff ffbf 	bl	800731c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800739e:	4b08      	ldr	r3, [pc, #32]	@ (80073c0 <osKernelStart+0x48>)
 80073a0:	2202      	movs	r2, #2
 80073a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80073a4:	f001 f8f4 	bl	8008590 <vTaskStartScheduler>
      stat = osOK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	607b      	str	r3, [r7, #4]
 80073ac:	e002      	b.n	80073b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80073ae:	2301      	movs	r3, #1
 80073b0:	425b      	negs	r3, r3
 80073b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073b4:	687b      	ldr	r3, [r7, #4]
}
 80073b6:	0018      	movs	r0, r3
 80073b8:	46bd      	mov	sp, r7
 80073ba:	b002      	add	sp, #8
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	46c0      	nop			@ (mov r8, r8)
 80073c0:	200002ac 	.word	0x200002ac

080073c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80073c4:	b5b0      	push	{r4, r5, r7, lr}
 80073c6:	b08e      	sub	sp, #56	@ 0x38
 80073c8:	af04      	add	r7, sp, #16
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80073d0:	2300      	movs	r3, #0
 80073d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073d4:	f3ef 8305 	mrs	r3, IPSR
 80073d8:	617b      	str	r3, [r7, #20]
  return(result);
 80073da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d000      	beq.n	80073e2 <osThreadNew+0x1e>
 80073e0:	e081      	b.n	80074e6 <osThreadNew+0x122>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d100      	bne.n	80073ea <osThreadNew+0x26>
 80073e8:	e07d      	b.n	80074e6 <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 80073ea:	2380      	movs	r3, #128	@ 0x80
 80073ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80073ee:	2318      	movs	r3, #24
 80073f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80073f2:	2300      	movs	r3, #0
 80073f4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80073f6:	2301      	movs	r3, #1
 80073f8:	425b      	negs	r3, r3
 80073fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d044      	beq.n	800748c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <osThreadNew+0x4c>
        name = attr->name;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d007      	beq.n	8007434 <osThreadNew+0x70>
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	2b38      	cmp	r3, #56	@ 0x38
 8007428:	d804      	bhi.n	8007434 <osThreadNew+0x70>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	4013      	ands	r3, r2
 8007432:	d001      	beq.n	8007438 <osThreadNew+0x74>
        return (NULL);
 8007434:	2300      	movs	r3, #0
 8007436:	e057      	b.n	80074e8 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d003      	beq.n	8007448 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	089b      	lsrs	r3, r3, #2
 8007446:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00e      	beq.n	800746e <osThreadNew+0xaa>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	2ba7      	cmp	r3, #167	@ 0xa7
 8007456:	d90a      	bls.n	800746e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800745c:	2b00      	cmp	r3, #0
 800745e:	d006      	beq.n	800746e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <osThreadNew+0xaa>
        mem = 1;
 8007468:	2301      	movs	r3, #1
 800746a:	61bb      	str	r3, [r7, #24]
 800746c:	e010      	b.n	8007490 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10c      	bne.n	8007490 <osThreadNew+0xcc>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d108      	bne.n	8007490 <osThreadNew+0xcc>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d104      	bne.n	8007490 <osThreadNew+0xcc>
          mem = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	61bb      	str	r3, [r7, #24]
 800748a:	e001      	b.n	8007490 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d112      	bne.n	80074bc <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800749e:	68bd      	ldr	r5, [r7, #8]
 80074a0:	6a3c      	ldr	r4, [r7, #32]
 80074a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	9302      	str	r3, [sp, #8]
 80074a8:	9201      	str	r2, [sp, #4]
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	002b      	movs	r3, r5
 80074b0:	0022      	movs	r2, r4
 80074b2:	f000 feaa 	bl	800820a <xTaskCreateStatic>
 80074b6:	0003      	movs	r3, r0
 80074b8:	613b      	str	r3, [r7, #16]
 80074ba:	e014      	b.n	80074e6 <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d111      	bne.n	80074e6 <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	68bc      	ldr	r4, [r7, #8]
 80074c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	2310      	movs	r3, #16
 80074ce:	18fb      	adds	r3, r7, r3
 80074d0:	9301      	str	r3, [sp, #4]
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	0023      	movs	r3, r4
 80074d8:	f000 fede 	bl	8008298 <xTaskCreate>
 80074dc:	0003      	movs	r3, r0
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d001      	beq.n	80074e6 <osThreadNew+0x122>
            hTask = NULL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074e6:	693b      	ldr	r3, [r7, #16]
}
 80074e8:	0018      	movs	r0, r3
 80074ea:	46bd      	mov	sp, r7
 80074ec:	b00a      	add	sp, #40	@ 0x28
 80074ee:	bdb0      	pop	{r4, r5, r7, pc}

080074f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074f8:	f3ef 8305 	mrs	r3, IPSR
 80074fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80074fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007500:	2b00      	cmp	r3, #0
 8007502:	d003      	beq.n	800750c <osDelay+0x1c>
    stat = osErrorISR;
 8007504:	2306      	movs	r3, #6
 8007506:	425b      	negs	r3, r3
 8007508:	60fb      	str	r3, [r7, #12]
 800750a:	e008      	b.n	800751e <osDelay+0x2e>
  }
  else {
    stat = osOK;
 800750c:	2300      	movs	r3, #0
 800750e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <osDelay+0x2e>
      vTaskDelay(ticks);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	0018      	movs	r0, r3
 800751a:	f001 f813 	bl	8008544 <vTaskDelay>
    }
  }

  return (stat);
 800751e:	68fb      	ldr	r3, [r7, #12]
}
 8007520:	0018      	movs	r0, r3
 8007522:	46bd      	mov	sp, r7
 8007524:	b004      	add	sp, #16
 8007526:	bd80      	pop	{r7, pc}

08007528 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007528:	b580      	push	{r7, lr}
 800752a:	b08a      	sub	sp, #40	@ 0x28
 800752c:	af02      	add	r7, sp, #8
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007534:	2300      	movs	r3, #0
 8007536:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007538:	f3ef 8305 	mrs	r3, IPSR
 800753c:	613b      	str	r3, [r7, #16]
  return(result);
 800753e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007540:	2b00      	cmp	r3, #0
 8007542:	d000      	beq.n	8007546 <osSemaphoreNew+0x1e>
 8007544:	e07f      	b.n	8007646 <osSemaphoreNew+0x11e>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d100      	bne.n	800754e <osSemaphoreNew+0x26>
 800754c:	e07b      	b.n	8007646 <osSemaphoreNew+0x11e>
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	429a      	cmp	r2, r3
 8007554:	d900      	bls.n	8007558 <osSemaphoreNew+0x30>
 8007556:	e076      	b.n	8007646 <osSemaphoreNew+0x11e>
    mem = -1;
 8007558:	2301      	movs	r3, #1
 800755a:	425b      	negs	r3, r3
 800755c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d015      	beq.n	8007590 <osSemaphoreNew+0x68>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d006      	beq.n	800757a <osSemaphoreNew+0x52>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	2b4f      	cmp	r3, #79	@ 0x4f
 8007572:	d902      	bls.n	800757a <osSemaphoreNew+0x52>
        mem = 1;
 8007574:	2301      	movs	r3, #1
 8007576:	61bb      	str	r3, [r7, #24]
 8007578:	e00c      	b.n	8007594 <osSemaphoreNew+0x6c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d108      	bne.n	8007594 <osSemaphoreNew+0x6c>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d104      	bne.n	8007594 <osSemaphoreNew+0x6c>
          mem = 0;
 800758a:	2300      	movs	r3, #0
 800758c:	61bb      	str	r3, [r7, #24]
 800758e:	e001      	b.n	8007594 <osSemaphoreNew+0x6c>
        }
      }
    }
    else {
      mem = 0;
 8007590:	2300      	movs	r3, #0
 8007592:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	3301      	adds	r3, #1
 8007598:	d055      	beq.n	8007646 <osSemaphoreNew+0x11e>
      if (max_count == 1U) {
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d12b      	bne.n	80075f8 <osSemaphoreNew+0xd0>
        if (mem == 1) {
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d10b      	bne.n	80075be <osSemaphoreNew+0x96>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	2203      	movs	r2, #3
 80075ac:	9200      	str	r2, [sp, #0]
 80075ae:	2200      	movs	r2, #0
 80075b0:	2100      	movs	r1, #0
 80075b2:	2001      	movs	r0, #1
 80075b4:	f000 f97a 	bl	80078ac <xQueueGenericCreateStatic>
 80075b8:	0003      	movs	r3, r0
 80075ba:	61fb      	str	r3, [r7, #28]
 80075bc:	e006      	b.n	80075cc <osSemaphoreNew+0xa4>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80075be:	2203      	movs	r2, #3
 80075c0:	2100      	movs	r1, #0
 80075c2:	2001      	movs	r0, #1
 80075c4:	f000 f9c3 	bl	800794e <xQueueGenericCreate>
 80075c8:	0003      	movs	r3, r0
 80075ca:	61fb      	str	r3, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d027      	beq.n	8007622 <osSemaphoreNew+0xfa>
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d024      	beq.n	8007622 <osSemaphoreNew+0xfa>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80075d8:	69f8      	ldr	r0, [r7, #28]
 80075da:	2300      	movs	r3, #0
 80075dc:	2200      	movs	r2, #0
 80075de:	2100      	movs	r1, #0
 80075e0:	f000 fa5c 	bl	8007a9c <xQueueGenericSend>
 80075e4:	0003      	movs	r3, r0
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d01b      	beq.n	8007622 <osSemaphoreNew+0xfa>
            vSemaphoreDelete (hSemaphore);
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	0018      	movs	r0, r3
 80075ee:	f000 fc4c 	bl	8007e8a <vQueueDelete>
            hSemaphore = NULL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	61fb      	str	r3, [r7, #28]
 80075f6:	e014      	b.n	8007622 <osSemaphoreNew+0xfa>
          }
        }
      }
      else {
        if (mem == 1) {
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d109      	bne.n	8007612 <osSemaphoreNew+0xea>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	689a      	ldr	r2, [r3, #8]
 8007602:	68b9      	ldr	r1, [r7, #8]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	0018      	movs	r0, r3
 8007608:	f000 f9fb 	bl	8007a02 <xQueueCreateCountingSemaphoreStatic>
 800760c:	0003      	movs	r3, r0
 800760e:	61fb      	str	r3, [r7, #28]
 8007610:	e007      	b.n	8007622 <osSemaphoreNew+0xfa>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	0011      	movs	r1, r2
 8007618:	0018      	movs	r0, r3
 800761a:	f000 fa1a 	bl	8007a52 <xQueueCreateCountingSemaphore>
 800761e:	0003      	movs	r3, r0
 8007620:	61fb      	str	r3, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00e      	beq.n	8007646 <osSemaphoreNew+0x11e>
        if (attr != NULL) {
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <osSemaphoreNew+0x10e>
          name = attr->name;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	617b      	str	r3, [r7, #20]
 8007634:	e001      	b.n	800763a <osSemaphoreNew+0x112>
        } else {
          name = NULL;
 8007636:	2300      	movs	r3, #0
 8007638:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	0011      	movs	r1, r2
 8007640:	0018      	movs	r0, r3
 8007642:	f000 fd5d 	bl	8008100 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007646:	69fb      	ldr	r3, [r7, #28]
}
 8007648:	0018      	movs	r0, r3
 800764a:	46bd      	mov	sp, r7
 800764c:	b008      	add	sp, #32
 800764e:	bd80      	pop	{r7, pc}

08007650 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4a06      	ldr	r2, [pc, #24]	@ (8007678 <vApplicationGetIdleTaskMemory+0x28>)
 8007660:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	4a05      	ldr	r2, [pc, #20]	@ (800767c <vApplicationGetIdleTaskMemory+0x2c>)
 8007666:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2280      	movs	r2, #128	@ 0x80
 800766c:	601a      	str	r2, [r3, #0]
}
 800766e:	46c0      	nop			@ (mov r8, r8)
 8007670:	46bd      	mov	sp, r7
 8007672:	b004      	add	sp, #16
 8007674:	bd80      	pop	{r7, pc}
 8007676:	46c0      	nop			@ (mov r8, r8)
 8007678:	200002b0 	.word	0x200002b0
 800767c:	20000358 	.word	0x20000358

08007680 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4a06      	ldr	r2, [pc, #24]	@ (80076a8 <vApplicationGetTimerTaskMemory+0x28>)
 8007690:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	4a05      	ldr	r2, [pc, #20]	@ (80076ac <vApplicationGetTimerTaskMemory+0x2c>)
 8007696:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2280      	movs	r2, #128	@ 0x80
 800769c:	0052      	lsls	r2, r2, #1
 800769e:	601a      	str	r2, [r3, #0]
}
 80076a0:	46c0      	nop			@ (mov r8, r8)
 80076a2:	46bd      	mov	sp, r7
 80076a4:	b004      	add	sp, #16
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	20000558 	.word	0x20000558
 80076ac:	20000600 	.word	0x20000600

080076b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3308      	adds	r3, #8
 80076bc:	001a      	movs	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	4252      	negs	r2, r2
 80076c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	3308      	adds	r3, #8
 80076ce:	001a      	movs	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3308      	adds	r3, #8
 80076d8:	001a      	movs	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076e4:	46c0      	nop			@ (mov r8, r8)
 80076e6:	46bd      	mov	sp, r7
 80076e8:	b002      	add	sp, #8
 80076ea:	bd80      	pop	{r7, pc}

080076ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076fa:	46c0      	nop			@ (mov r8, r8)
 80076fc:	46bd      	mov	sp, r7
 80076fe:	b002      	add	sp, #8
 8007700:	bd80      	pop	{r7, pc}

08007702 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b084      	sub	sp, #16
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	601a      	str	r2, [r3, #0]
}
 800773e:	46c0      	nop			@ (mov r8, r8)
 8007740:	46bd      	mov	sp, r7
 8007742:	b004      	add	sp, #16
 8007744:	bd80      	pop	{r7, pc}

08007746 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	3301      	adds	r3, #1
 800775a:	d103      	bne.n	8007764 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	60fb      	str	r3, [r7, #12]
 8007762:	e00c      	b.n	800777e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3308      	adds	r3, #8
 8007768:	60fb      	str	r3, [r7, #12]
 800776a:	e002      	b.n	8007772 <vListInsert+0x2c>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	60fb      	str	r3, [r7, #12]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	429a      	cmp	r2, r3
 800777c:	d2f6      	bcs.n	800776c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	685a      	ldr	r2, [r3, #4]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	601a      	str	r2, [r3, #0]
}
 80077aa:	46c0      	nop			@ (mov r8, r8)
 80077ac:	46bd      	mov	sp, r7
 80077ae:	b004      	add	sp, #16
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	6892      	ldr	r2, [r2, #8]
 80077c8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	6852      	ldr	r2, [r2, #4]
 80077d2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d103      	bne.n	80077e6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	689a      	ldr	r2, [r3, #8]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	1e5a      	subs	r2, r3, #1
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
}
 80077fa:	0018      	movs	r0, r3
 80077fc:	46bd      	mov	sp, r7
 80077fe:	b004      	add	sp, #16
 8007800:	bd80      	pop	{r7, pc}

08007802 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b084      	sub	sp, #16
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d102      	bne.n	800781c <xQueueGenericReset+0x1a>
 8007816:	b672      	cpsid	i
 8007818:	46c0      	nop			@ (mov r8, r8)
 800781a:	e7fd      	b.n	8007818 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800781c:	f001 ff30 	bl	8009680 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782c:	434b      	muls	r3, r1
 800782e:	18d2      	adds	r2, r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800784a:	1e59      	subs	r1, r3, #1
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007850:	434b      	muls	r3, r1
 8007852:	18d2      	adds	r2, r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2244      	movs	r2, #68	@ 0x44
 800785c:	21ff      	movs	r1, #255	@ 0xff
 800785e:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2245      	movs	r2, #69	@ 0x45
 8007864:	21ff      	movs	r1, #255	@ 0xff
 8007866:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10d      	bne.n	800788a <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d013      	beq.n	800789e <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3310      	adds	r3, #16
 800787a:	0018      	movs	r0, r3
 800787c:	f001 f8e0 	bl	8008a40 <xTaskRemoveFromEventList>
 8007880:	1e03      	subs	r3, r0, #0
 8007882:	d00c      	beq.n	800789e <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007884:	f001 feec 	bl	8009660 <vPortYield>
 8007888:	e009      	b.n	800789e <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	3310      	adds	r3, #16
 800788e:	0018      	movs	r0, r3
 8007890:	f7ff ff0e 	bl	80076b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	3324      	adds	r3, #36	@ 0x24
 8007898:	0018      	movs	r0, r3
 800789a:	f7ff ff09 	bl	80076b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800789e:	f001 ff01 	bl	80096a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078a2:	2301      	movs	r3, #1
}
 80078a4:	0018      	movs	r0, r3
 80078a6:	46bd      	mov	sp, r7
 80078a8:	b004      	add	sp, #16
 80078aa:	bd80      	pop	{r7, pc}

080078ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078ac:	b590      	push	{r4, r7, lr}
 80078ae:	b089      	sub	sp, #36	@ 0x24
 80078b0:	af02      	add	r7, sp, #8
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
 80078b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d102      	bne.n	80078c6 <xQueueGenericCreateStatic+0x1a>
 80078c0:	b672      	cpsid	i
 80078c2:	46c0      	nop			@ (mov r8, r8)
 80078c4:	e7fd      	b.n	80078c2 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d102      	bne.n	80078d2 <xQueueGenericCreateStatic+0x26>
 80078cc:	b672      	cpsid	i
 80078ce:	46c0      	nop			@ (mov r8, r8)
 80078d0:	e7fd      	b.n	80078ce <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <xQueueGenericCreateStatic+0x32>
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <xQueueGenericCreateStatic+0x36>
 80078de:	2301      	movs	r3, #1
 80078e0:	e000      	b.n	80078e4 <xQueueGenericCreateStatic+0x38>
 80078e2:	2300      	movs	r3, #0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d102      	bne.n	80078ee <xQueueGenericCreateStatic+0x42>
 80078e8:	b672      	cpsid	i
 80078ea:	46c0      	nop			@ (mov r8, r8)
 80078ec:	e7fd      	b.n	80078ea <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d102      	bne.n	80078fa <xQueueGenericCreateStatic+0x4e>
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <xQueueGenericCreateStatic+0x52>
 80078fa:	2301      	movs	r3, #1
 80078fc:	e000      	b.n	8007900 <xQueueGenericCreateStatic+0x54>
 80078fe:	2300      	movs	r3, #0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d102      	bne.n	800790a <xQueueGenericCreateStatic+0x5e>
 8007904:	b672      	cpsid	i
 8007906:	46c0      	nop			@ (mov r8, r8)
 8007908:	e7fd      	b.n	8007906 <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800790a:	2350      	movs	r3, #80	@ 0x50
 800790c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	2b50      	cmp	r3, #80	@ 0x50
 8007912:	d002      	beq.n	800791a <xQueueGenericCreateStatic+0x6e>
 8007914:	b672      	cpsid	i
 8007916:	46c0      	nop			@ (mov r8, r8)
 8007918:	e7fd      	b.n	8007916 <xQueueGenericCreateStatic+0x6a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800791a:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00e      	beq.n	8007944 <xQueueGenericCreateStatic+0x98>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2246      	movs	r2, #70	@ 0x46
 800792a:	2101      	movs	r1, #1
 800792c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800792e:	2328      	movs	r3, #40	@ 0x28
 8007930:	18fb      	adds	r3, r7, r3
 8007932:	781c      	ldrb	r4, [r3, #0]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	68b9      	ldr	r1, [r7, #8]
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	0023      	movs	r3, r4
 8007940:	f000 f838 	bl	80079b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007944:	697b      	ldr	r3, [r7, #20]
	}
 8007946:	0018      	movs	r0, r3
 8007948:	46bd      	mov	sp, r7
 800794a:	b007      	add	sp, #28
 800794c:	bd90      	pop	{r4, r7, pc}

0800794e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800794e:	b590      	push	{r4, r7, lr}
 8007950:	b08b      	sub	sp, #44	@ 0x2c
 8007952:	af02      	add	r7, sp, #8
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	1dfb      	adds	r3, r7, #7
 800795a:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d102      	bne.n	8007968 <xQueueGenericCreate+0x1a>
 8007962:	b672      	cpsid	i
 8007964:	46c0      	nop			@ (mov r8, r8)
 8007966:	e7fd      	b.n	8007964 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	4353      	muls	r3, r2
 800796e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	3350      	adds	r3, #80	@ 0x50
 8007974:	0018      	movs	r0, r3
 8007976:	f001 ff1b 	bl	80097b0 <pvPortMalloc>
 800797a:	0003      	movs	r3, r0
 800797c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d012      	beq.n	80079aa <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	3350      	adds	r3, #80	@ 0x50
 800798c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	2246      	movs	r2, #70	@ 0x46
 8007992:	2100      	movs	r1, #0
 8007994:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007996:	1dfb      	adds	r3, r7, #7
 8007998:	781c      	ldrb	r4, [r3, #0]
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	68b9      	ldr	r1, [r7, #8]
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	0023      	movs	r3, r4
 80079a6:	f000 f805 	bl	80079b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079aa:	69bb      	ldr	r3, [r7, #24]
	}
 80079ac:	0018      	movs	r0, r3
 80079ae:	46bd      	mov	sp, r7
 80079b0:	b009      	add	sp, #36	@ 0x24
 80079b2:	bd90      	pop	{r4, r7, pc}

080079b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
 80079c0:	001a      	movs	r2, r3
 80079c2:	1cfb      	adds	r3, r7, #3
 80079c4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d103      	bne.n	80079d4 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	601a      	str	r2, [r3, #0]
 80079d2:	e002      	b.n	80079da <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	2101      	movs	r1, #1
 80079ea:	0018      	movs	r0, r3
 80079ec:	f7ff ff09 	bl	8007802 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	1cfa      	adds	r2, r7, #3
 80079f4:	214c      	movs	r1, #76	@ 0x4c
 80079f6:	7812      	ldrb	r2, [r2, #0]
 80079f8:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80079fa:	46c0      	nop			@ (mov r8, r8)
 80079fc:	46bd      	mov	sp, r7
 80079fe:	b004      	add	sp, #16
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b088      	sub	sp, #32
 8007a06:	af02      	add	r7, sp, #8
 8007a08:	60f8      	str	r0, [r7, #12]
 8007a0a:	60b9      	str	r1, [r7, #8]
 8007a0c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d102      	bne.n	8007a1a <xQueueCreateCountingSemaphoreStatic+0x18>
 8007a14:	b672      	cpsid	i
 8007a16:	46c0      	nop			@ (mov r8, r8)
 8007a18:	e7fd      	b.n	8007a16 <xQueueCreateCountingSemaphoreStatic+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d902      	bls.n	8007a28 <xQueueCreateCountingSemaphoreStatic+0x26>
 8007a22:	b672      	cpsid	i
 8007a24:	46c0      	nop			@ (mov r8, r8)
 8007a26:	e7fd      	b.n	8007a24 <xQueueCreateCountingSemaphoreStatic+0x22>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	9200      	str	r2, [sp, #0]
 8007a30:	2200      	movs	r2, #0
 8007a32:	2100      	movs	r1, #0
 8007a34:	f7ff ff3a 	bl	80078ac <xQueueGenericCreateStatic>
 8007a38:	0003      	movs	r3, r0
 8007a3a:	617b      	str	r3, [r7, #20]

		if( xHandle != NULL )
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d002      	beq.n	8007a48 <xQueueCreateCountingSemaphoreStatic+0x46>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007a48:	697b      	ldr	r3, [r7, #20]
	}
 8007a4a:	0018      	movs	r0, r3
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	b006      	add	sp, #24
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d102      	bne.n	8007a68 <xQueueCreateCountingSemaphore+0x16>
 8007a62:	b672      	cpsid	i
 8007a64:	46c0      	nop			@ (mov r8, r8)
 8007a66:	e7fd      	b.n	8007a64 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d902      	bls.n	8007a76 <xQueueCreateCountingSemaphore+0x24>
 8007a70:	b672      	cpsid	i
 8007a72:	46c0      	nop			@ (mov r8, r8)
 8007a74:	e7fd      	b.n	8007a72 <xQueueCreateCountingSemaphore+0x20>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	0018      	movs	r0, r3
 8007a7e:	f7ff ff66 	bl	800794e <xQueueGenericCreate>
 8007a82:	0003      	movs	r3, r0
 8007a84:	60fb      	str	r3, [r7, #12]

		if( xHandle != NULL )
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d002      	beq.n	8007a92 <xQueueCreateCountingSemaphore+0x40>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007a92:	68fb      	ldr	r3, [r7, #12]
	}
 8007a94:	0018      	movs	r0, r3
 8007a96:	46bd      	mov	sp, r7
 8007a98:	b004      	add	sp, #16
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b08a      	sub	sp, #40	@ 0x28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
 8007aa8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d102      	bne.n	8007abe <xQueueGenericSend+0x22>
 8007ab8:	b672      	cpsid	i
 8007aba:	46c0      	nop			@ (mov r8, r8)
 8007abc:	e7fd      	b.n	8007aba <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d103      	bne.n	8007acc <xQueueGenericSend+0x30>
 8007ac4:	6a3b      	ldr	r3, [r7, #32]
 8007ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d101      	bne.n	8007ad0 <xQueueGenericSend+0x34>
 8007acc:	2301      	movs	r3, #1
 8007ace:	e000      	b.n	8007ad2 <xQueueGenericSend+0x36>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d102      	bne.n	8007adc <xQueueGenericSend+0x40>
 8007ad6:	b672      	cpsid	i
 8007ad8:	46c0      	nop			@ (mov r8, r8)
 8007ada:	e7fd      	b.n	8007ad8 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d103      	bne.n	8007aea <xQueueGenericSend+0x4e>
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d101      	bne.n	8007aee <xQueueGenericSend+0x52>
 8007aea:	2301      	movs	r3, #1
 8007aec:	e000      	b.n	8007af0 <xQueueGenericSend+0x54>
 8007aee:	2300      	movs	r3, #0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d102      	bne.n	8007afa <xQueueGenericSend+0x5e>
 8007af4:	b672      	cpsid	i
 8007af6:	46c0      	nop			@ (mov r8, r8)
 8007af8:	e7fd      	b.n	8007af6 <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007afa:	f001 f93d 	bl	8008d78 <xTaskGetSchedulerState>
 8007afe:	1e03      	subs	r3, r0, #0
 8007b00:	d102      	bne.n	8007b08 <xQueueGenericSend+0x6c>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <xQueueGenericSend+0x70>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e000      	b.n	8007b0e <xQueueGenericSend+0x72>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <xQueueGenericSend+0x7c>
 8007b12:	b672      	cpsid	i
 8007b14:	46c0      	nop			@ (mov r8, r8)
 8007b16:	e7fd      	b.n	8007b14 <xQueueGenericSend+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b18:	f001 fdb2 	bl	8009680 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d302      	bcc.n	8007b2e <xQueueGenericSend+0x92>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d11e      	bne.n	8007b6c <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	68b9      	ldr	r1, [r7, #8]
 8007b32:	6a3b      	ldr	r3, [r7, #32]
 8007b34:	0018      	movs	r0, r3
 8007b36:	f000 f9c5 	bl	8007ec4 <prvCopyDataToQueue>
 8007b3a:	0003      	movs	r3, r0
 8007b3c:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d009      	beq.n	8007b5a <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b46:	6a3b      	ldr	r3, [r7, #32]
 8007b48:	3324      	adds	r3, #36	@ 0x24
 8007b4a:	0018      	movs	r0, r3
 8007b4c:	f000 ff78 	bl	8008a40 <xTaskRemoveFromEventList>
 8007b50:	1e03      	subs	r3, r0, #0
 8007b52:	d007      	beq.n	8007b64 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b54:	f001 fd84 	bl	8009660 <vPortYield>
 8007b58:	e004      	b.n	8007b64 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b60:	f001 fd7e 	bl	8009660 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b64:	f001 fd9e 	bl	80096a4 <vPortExitCritical>
				return pdPASS;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e05b      	b.n	8007c24 <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d103      	bne.n	8007b7a <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b72:	f001 fd97 	bl	80096a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	e054      	b.n	8007c24 <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d106      	bne.n	8007b8e <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b80:	2314      	movs	r3, #20
 8007b82:	18fb      	adds	r3, r7, r3
 8007b84:	0018      	movs	r0, r3
 8007b86:	f000 ffb9 	bl	8008afc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b8e:	f001 fd89 	bl	80096a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b92:	f000 fd5d 	bl	8008650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b96:	f001 fd73 	bl	8009680 <vPortEnterCritical>
 8007b9a:	6a3b      	ldr	r3, [r7, #32]
 8007b9c:	2244      	movs	r2, #68	@ 0x44
 8007b9e:	5c9b      	ldrb	r3, [r3, r2]
 8007ba0:	b25b      	sxtb	r3, r3
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	d103      	bne.n	8007bae <xQueueGenericSend+0x112>
 8007ba6:	6a3b      	ldr	r3, [r7, #32]
 8007ba8:	2244      	movs	r2, #68	@ 0x44
 8007baa:	2100      	movs	r1, #0
 8007bac:	5499      	strb	r1, [r3, r2]
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	2245      	movs	r2, #69	@ 0x45
 8007bb2:	5c9b      	ldrb	r3, [r3, r2]
 8007bb4:	b25b      	sxtb	r3, r3
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	d103      	bne.n	8007bc2 <xQueueGenericSend+0x126>
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	2245      	movs	r2, #69	@ 0x45
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	5499      	strb	r1, [r3, r2]
 8007bc2:	f001 fd6f 	bl	80096a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bc6:	1d3a      	adds	r2, r7, #4
 8007bc8:	2314      	movs	r3, #20
 8007bca:	18fb      	adds	r3, r7, r3
 8007bcc:	0011      	movs	r1, r2
 8007bce:	0018      	movs	r0, r3
 8007bd0:	f000 ffa8 	bl	8008b24 <xTaskCheckForTimeOut>
 8007bd4:	1e03      	subs	r3, r0, #0
 8007bd6:	d11e      	bne.n	8007c16 <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	0018      	movs	r0, r3
 8007bdc:	f000 fa77 	bl	80080ce <prvIsQueueFull>
 8007be0:	1e03      	subs	r3, r0, #0
 8007be2:	d011      	beq.n	8007c08 <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	3310      	adds	r3, #16
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	0011      	movs	r1, r2
 8007bec:	0018      	movs	r0, r3
 8007bee:	f000 fedf 	bl	80089b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	0018      	movs	r0, r3
 8007bf6:	f000 f9f6 	bl	8007fe6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007bfa:	f000 fd35 	bl	8008668 <xTaskResumeAll>
 8007bfe:	1e03      	subs	r3, r0, #0
 8007c00:	d18a      	bne.n	8007b18 <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 8007c02:	f001 fd2d 	bl	8009660 <vPortYield>
 8007c06:	e787      	b.n	8007b18 <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	0018      	movs	r0, r3
 8007c0c:	f000 f9eb 	bl	8007fe6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c10:	f000 fd2a 	bl	8008668 <xTaskResumeAll>
 8007c14:	e780      	b.n	8007b18 <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	0018      	movs	r0, r3
 8007c1a:	f000 f9e4 	bl	8007fe6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c1e:	f000 fd23 	bl	8008668 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c24:	0018      	movs	r0, r3
 8007c26:	46bd      	mov	sp, r7
 8007c28:	b00a      	add	sp, #40	@ 0x28
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c2c:	b590      	push	{r4, r7, lr}
 8007c2e:	b08b      	sub	sp, #44	@ 0x2c
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
 8007c38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d102      	bne.n	8007c4a <xQueueGenericSendFromISR+0x1e>
 8007c44:	b672      	cpsid	i
 8007c46:	46c0      	nop			@ (mov r8, r8)
 8007c48:	e7fd      	b.n	8007c46 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d103      	bne.n	8007c58 <xQueueGenericSendFromISR+0x2c>
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <xQueueGenericSendFromISR+0x30>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e000      	b.n	8007c5e <xQueueGenericSendFromISR+0x32>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d102      	bne.n	8007c68 <xQueueGenericSendFromISR+0x3c>
 8007c62:	b672      	cpsid	i
 8007c64:	46c0      	nop			@ (mov r8, r8)
 8007c66:	e7fd      	b.n	8007c64 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d103      	bne.n	8007c76 <xQueueGenericSendFromISR+0x4a>
 8007c6e:	6a3b      	ldr	r3, [r7, #32]
 8007c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d101      	bne.n	8007c7a <xQueueGenericSendFromISR+0x4e>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e000      	b.n	8007c7c <xQueueGenericSendFromISR+0x50>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d102      	bne.n	8007c86 <xQueueGenericSendFromISR+0x5a>
 8007c80:	b672      	cpsid	i
 8007c82:	46c0      	nop			@ (mov r8, r8)
 8007c84:	e7fd      	b.n	8007c82 <xQueueGenericSendFromISR+0x56>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c86:	f001 fd25 	bl	80096d4 <ulSetInterruptMaskFromISR>
 8007c8a:	0003      	movs	r3, r0
 8007c8c:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d302      	bcc.n	8007ca0 <xQueueGenericSendFromISR+0x74>
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d131      	bne.n	8007d04 <xQueueGenericSendFromISR+0xd8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ca0:	241b      	movs	r4, #27
 8007ca2:	193b      	adds	r3, r7, r4
 8007ca4:	6a3a      	ldr	r2, [r7, #32]
 8007ca6:	2145      	movs	r1, #69	@ 0x45
 8007ca8:	5c52      	ldrb	r2, [r2, r1]
 8007caa:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cac:	6a3b      	ldr	r3, [r7, #32]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb0:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	68b9      	ldr	r1, [r7, #8]
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	0018      	movs	r0, r3
 8007cba:	f000 f903 	bl	8007ec4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007cbe:	193b      	adds	r3, r7, r4
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	b25b      	sxtb	r3, r3
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	d111      	bne.n	8007cec <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cc8:	6a3b      	ldr	r3, [r7, #32]
 8007cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d016      	beq.n	8007cfe <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	3324      	adds	r3, #36	@ 0x24
 8007cd4:	0018      	movs	r0, r3
 8007cd6:	f000 feb3 	bl	8008a40 <xTaskRemoveFromEventList>
 8007cda:	1e03      	subs	r3, r0, #0
 8007cdc:	d00f      	beq.n	8007cfe <xQueueGenericSendFromISR+0xd2>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00c      	beq.n	8007cfe <xQueueGenericSendFromISR+0xd2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	e008      	b.n	8007cfe <xQueueGenericSendFromISR+0xd2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007cec:	231b      	movs	r3, #27
 8007cee:	18fb      	adds	r3, r7, r3
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	b259      	sxtb	r1, r3
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	2245      	movs	r2, #69	@ 0x45
 8007cfc:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	627b      	str	r3, [r7, #36]	@ 0x24
		{
 8007d02:	e001      	b.n	8007d08 <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d04:	2300      	movs	r3, #0
 8007d06:	627b      	str	r3, [r7, #36]	@ 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	0018      	movs	r0, r3
 8007d0c:	f001 fce8 	bl	80096e0 <vClearInterruptMaskFromISR>

	return xReturn;
 8007d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007d12:	0018      	movs	r0, r3
 8007d14:	46bd      	mov	sp, r7
 8007d16:	b00b      	add	sp, #44	@ 0x2c
 8007d18:	bd90      	pop	{r4, r7, pc}

08007d1a <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b08a      	sub	sp, #40	@ 0x28
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	60f8      	str	r0, [r7, #12]
 8007d22:	60b9      	str	r1, [r7, #8]
 8007d24:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d26:	2300      	movs	r3, #0
 8007d28:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d2e:	6a3b      	ldr	r3, [r7, #32]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d102      	bne.n	8007d3a <xQueueReceive+0x20>
 8007d34:	b672      	cpsid	i
 8007d36:	46c0      	nop			@ (mov r8, r8)
 8007d38:	e7fd      	b.n	8007d36 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d103      	bne.n	8007d48 <xQueueReceive+0x2e>
 8007d40:	6a3b      	ldr	r3, [r7, #32]
 8007d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d101      	bne.n	8007d4c <xQueueReceive+0x32>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e000      	b.n	8007d4e <xQueueReceive+0x34>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d102      	bne.n	8007d58 <xQueueReceive+0x3e>
 8007d52:	b672      	cpsid	i
 8007d54:	46c0      	nop			@ (mov r8, r8)
 8007d56:	e7fd      	b.n	8007d54 <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d58:	f001 f80e 	bl	8008d78 <xTaskGetSchedulerState>
 8007d5c:	1e03      	subs	r3, r0, #0
 8007d5e:	d102      	bne.n	8007d66 <xQueueReceive+0x4c>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <xQueueReceive+0x50>
 8007d66:	2301      	movs	r3, #1
 8007d68:	e000      	b.n	8007d6c <xQueueReceive+0x52>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d102      	bne.n	8007d76 <xQueueReceive+0x5c>
 8007d70:	b672      	cpsid	i
 8007d72:	46c0      	nop			@ (mov r8, r8)
 8007d74:	e7fd      	b.n	8007d72 <xQueueReceive+0x58>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d76:	f001 fc83 	bl	8009680 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d7e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d01a      	beq.n	8007dbc <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	0011      	movs	r1, r2
 8007d8c:	0018      	movs	r0, r3
 8007d8e:	f000 f904 	bl	8007f9a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	1e5a      	subs	r2, r3, #1
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d008      	beq.n	8007db4 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007da2:	6a3b      	ldr	r3, [r7, #32]
 8007da4:	3310      	adds	r3, #16
 8007da6:	0018      	movs	r0, r3
 8007da8:	f000 fe4a 	bl	8008a40 <xTaskRemoveFromEventList>
 8007dac:	1e03      	subs	r3, r0, #0
 8007dae:	d001      	beq.n	8007db4 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007db0:	f001 fc56 	bl	8009660 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007db4:	f001 fc76 	bl	80096a4 <vPortExitCritical>
				return pdPASS;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e062      	b.n	8007e82 <xQueueReceive+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d103      	bne.n	8007dca <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dc2:	f001 fc6f 	bl	80096a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	e05b      	b.n	8007e82 <xQueueReceive+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d106      	bne.n	8007dde <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dd0:	2314      	movs	r3, #20
 8007dd2:	18fb      	adds	r3, r7, r3
 8007dd4:	0018      	movs	r0, r3
 8007dd6:	f000 fe91 	bl	8008afc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007dde:	f001 fc61 	bl	80096a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007de2:	f000 fc35 	bl	8008650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007de6:	f001 fc4b 	bl	8009680 <vPortEnterCritical>
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	2244      	movs	r2, #68	@ 0x44
 8007dee:	5c9b      	ldrb	r3, [r3, r2]
 8007df0:	b25b      	sxtb	r3, r3
 8007df2:	3301      	adds	r3, #1
 8007df4:	d103      	bne.n	8007dfe <xQueueReceive+0xe4>
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	2244      	movs	r2, #68	@ 0x44
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	5499      	strb	r1, [r3, r2]
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	2245      	movs	r2, #69	@ 0x45
 8007e02:	5c9b      	ldrb	r3, [r3, r2]
 8007e04:	b25b      	sxtb	r3, r3
 8007e06:	3301      	adds	r3, #1
 8007e08:	d103      	bne.n	8007e12 <xQueueReceive+0xf8>
 8007e0a:	6a3b      	ldr	r3, [r7, #32]
 8007e0c:	2245      	movs	r2, #69	@ 0x45
 8007e0e:	2100      	movs	r1, #0
 8007e10:	5499      	strb	r1, [r3, r2]
 8007e12:	f001 fc47 	bl	80096a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e16:	1d3a      	adds	r2, r7, #4
 8007e18:	2314      	movs	r3, #20
 8007e1a:	18fb      	adds	r3, r7, r3
 8007e1c:	0011      	movs	r1, r2
 8007e1e:	0018      	movs	r0, r3
 8007e20:	f000 fe80 	bl	8008b24 <xTaskCheckForTimeOut>
 8007e24:	1e03      	subs	r3, r0, #0
 8007e26:	d11e      	bne.n	8007e66 <xQueueReceive+0x14c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	0018      	movs	r0, r3
 8007e2c:	f000 f939 	bl	80080a2 <prvIsQueueEmpty>
 8007e30:	1e03      	subs	r3, r0, #0
 8007e32:	d011      	beq.n	8007e58 <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	3324      	adds	r3, #36	@ 0x24
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	0011      	movs	r1, r2
 8007e3c:	0018      	movs	r0, r3
 8007e3e:	f000 fdb7 	bl	80089b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	0018      	movs	r0, r3
 8007e46:	f000 f8ce 	bl	8007fe6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e4a:	f000 fc0d 	bl	8008668 <xTaskResumeAll>
 8007e4e:	1e03      	subs	r3, r0, #0
 8007e50:	d191      	bne.n	8007d76 <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 8007e52:	f001 fc05 	bl	8009660 <vPortYield>
 8007e56:	e78e      	b.n	8007d76 <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e58:	6a3b      	ldr	r3, [r7, #32]
 8007e5a:	0018      	movs	r0, r3
 8007e5c:	f000 f8c3 	bl	8007fe6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e60:	f000 fc02 	bl	8008668 <xTaskResumeAll>
 8007e64:	e787      	b.n	8007d76 <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	0018      	movs	r0, r3
 8007e6a:	f000 f8bc 	bl	8007fe6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e6e:	f000 fbfb 	bl	8008668 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e72:	6a3b      	ldr	r3, [r7, #32]
 8007e74:	0018      	movs	r0, r3
 8007e76:	f000 f914 	bl	80080a2 <prvIsQueueEmpty>
 8007e7a:	1e03      	subs	r3, r0, #0
 8007e7c:	d100      	bne.n	8007e80 <xQueueReceive+0x166>
 8007e7e:	e77a      	b.n	8007d76 <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e82:	0018      	movs	r0, r3
 8007e84:	46bd      	mov	sp, r7
 8007e86:	b00a      	add	sp, #40	@ 0x28
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d102      	bne.n	8007ea2 <vQueueDelete+0x18>
 8007e9c:	b672      	cpsid	i
 8007e9e:	46c0      	nop			@ (mov r8, r8)
 8007ea0:	e7fd      	b.n	8007e9e <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	0018      	movs	r0, r3
 8007ea6:	f000 f953 	bl	8008150 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2246      	movs	r2, #70	@ 0x46
 8007eae:	5c9b      	ldrb	r3, [r3, r2]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d103      	bne.n	8007ebc <vQueueDelete+0x32>
		{
			vPortFree( pxQueue );
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	0018      	movs	r0, r3
 8007eb8:	f001 fd2a 	bl	8009910 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007ebc:	46c0      	nop			@ (mov r8, r8)
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	b004      	add	sp, #16
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10e      	bne.n	8007f00 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d14e      	bne.n	8007f88 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	0018      	movs	r0, r3
 8007ef0:	f000 ff5e 	bl	8008db0 <xTaskPriorityDisinherit>
 8007ef4:	0003      	movs	r3, r0
 8007ef6:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	609a      	str	r2, [r3, #8]
 8007efe:	e043      	b.n	8007f88 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d119      	bne.n	8007f3a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6858      	ldr	r0, [r3, #4]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	0019      	movs	r1, r3
 8007f12:	f001 fe9d 	bl	8009c50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	685a      	ldr	r2, [r3, #4]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1e:	18d2      	adds	r2, r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d32b      	bcc.n	8007f88 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	605a      	str	r2, [r3, #4]
 8007f38:	e026      	b.n	8007f88 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	68d8      	ldr	r0, [r3, #12]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	0019      	movs	r1, r3
 8007f46:	f001 fe83 	bl	8009c50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	68da      	ldr	r2, [r3, #12]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f52:	425b      	negs	r3, r3
 8007f54:	18d2      	adds	r2, r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d207      	bcs.n	8007f76 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	689a      	ldr	r2, [r3, #8]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f6e:	425b      	negs	r3, r3
 8007f70:	18d2      	adds	r2, r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d105      	bne.n	8007f88 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	3b01      	subs	r3, #1
 8007f86:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	1c5a      	adds	r2, r3, #1
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007f90:	697b      	ldr	r3, [r7, #20]
}
 8007f92:	0018      	movs	r0, r3
 8007f94:	46bd      	mov	sp, r7
 8007f96:	b006      	add	sp, #24
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d018      	beq.n	8007fde <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb4:	18d2      	adds	r2, r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	68da      	ldr	r2, [r3, #12]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d303      	bcc.n	8007fce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68d9      	ldr	r1, [r3, #12]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	0018      	movs	r0, r3
 8007fda:	f001 fe39 	bl	8009c50 <memcpy>
	}
}
 8007fde:	46c0      	nop			@ (mov r8, r8)
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	b002      	add	sp, #8
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007fee:	f001 fb47 	bl	8009680 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ff2:	230f      	movs	r3, #15
 8007ff4:	18fb      	adds	r3, r7, r3
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	2145      	movs	r1, #69	@ 0x45
 8007ffa:	5c52      	ldrb	r2, [r2, r1]
 8007ffc:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ffe:	e013      	b.n	8008028 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008004:	2b00      	cmp	r3, #0
 8008006:	d016      	beq.n	8008036 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	3324      	adds	r3, #36	@ 0x24
 800800c:	0018      	movs	r0, r3
 800800e:	f000 fd17 	bl	8008a40 <xTaskRemoveFromEventList>
 8008012:	1e03      	subs	r3, r0, #0
 8008014:	d001      	beq.n	800801a <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008016:	f000 fdd7 	bl	8008bc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800801a:	210f      	movs	r1, #15
 800801c:	187b      	adds	r3, r7, r1
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	3b01      	subs	r3, #1
 8008022:	b2da      	uxtb	r2, r3
 8008024:	187b      	adds	r3, r7, r1
 8008026:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008028:	230f      	movs	r3, #15
 800802a:	18fb      	adds	r3, r7, r3
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	b25b      	sxtb	r3, r3
 8008030:	2b00      	cmp	r3, #0
 8008032:	dce5      	bgt.n	8008000 <prvUnlockQueue+0x1a>
 8008034:	e000      	b.n	8008038 <prvUnlockQueue+0x52>
					break;
 8008036:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2245      	movs	r2, #69	@ 0x45
 800803c:	21ff      	movs	r1, #255	@ 0xff
 800803e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8008040:	f001 fb30 	bl	80096a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008044:	f001 fb1c 	bl	8009680 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008048:	230e      	movs	r3, #14
 800804a:	18fb      	adds	r3, r7, r3
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	2144      	movs	r1, #68	@ 0x44
 8008050:	5c52      	ldrb	r2, [r2, r1]
 8008052:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008054:	e013      	b.n	800807e <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d016      	beq.n	800808c <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	3310      	adds	r3, #16
 8008062:	0018      	movs	r0, r3
 8008064:	f000 fcec 	bl	8008a40 <xTaskRemoveFromEventList>
 8008068:	1e03      	subs	r3, r0, #0
 800806a:	d001      	beq.n	8008070 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800806c:	f000 fdac 	bl	8008bc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008070:	210e      	movs	r1, #14
 8008072:	187b      	adds	r3, r7, r1
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	3b01      	subs	r3, #1
 8008078:	b2da      	uxtb	r2, r3
 800807a:	187b      	adds	r3, r7, r1
 800807c:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800807e:	230e      	movs	r3, #14
 8008080:	18fb      	adds	r3, r7, r3
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	b25b      	sxtb	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	dce5      	bgt.n	8008056 <prvUnlockQueue+0x70>
 800808a:	e000      	b.n	800808e <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800808c:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2244      	movs	r2, #68	@ 0x44
 8008092:	21ff      	movs	r1, #255	@ 0xff
 8008094:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8008096:	f001 fb05 	bl	80096a4 <vPortExitCritical>
}
 800809a:	46c0      	nop			@ (mov r8, r8)
 800809c:	46bd      	mov	sp, r7
 800809e:	b004      	add	sp, #16
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b084      	sub	sp, #16
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080aa:	f001 fae9 	bl	8009680 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d102      	bne.n	80080bc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80080b6:	2301      	movs	r3, #1
 80080b8:	60fb      	str	r3, [r7, #12]
 80080ba:	e001      	b.n	80080c0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80080bc:	2300      	movs	r3, #0
 80080be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080c0:	f001 faf0 	bl	80096a4 <vPortExitCritical>

	return xReturn;
 80080c4:	68fb      	ldr	r3, [r7, #12]
}
 80080c6:	0018      	movs	r0, r3
 80080c8:	46bd      	mov	sp, r7
 80080ca:	b004      	add	sp, #16
 80080cc:	bd80      	pop	{r7, pc}

080080ce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080d6:	f001 fad3 	bl	8009680 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d102      	bne.n	80080ec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80080e6:	2301      	movs	r3, #1
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	e001      	b.n	80080f0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80080ec:	2300      	movs	r3, #0
 80080ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080f0:	f001 fad8 	bl	80096a4 <vPortExitCritical>

	return xReturn;
 80080f4:	68fb      	ldr	r3, [r7, #12]
}
 80080f6:	0018      	movs	r0, r3
 80080f8:	46bd      	mov	sp, r7
 80080fa:	b004      	add	sp, #16
 80080fc:	bd80      	pop	{r7, pc}
	...

08008100 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800810a:	2300      	movs	r3, #0
 800810c:	60fb      	str	r3, [r7, #12]
 800810e:	e015      	b.n	800813c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008110:	4b0e      	ldr	r3, [pc, #56]	@ (800814c <vQueueAddToRegistry+0x4c>)
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	00d2      	lsls	r2, r2, #3
 8008116:	58d3      	ldr	r3, [r2, r3]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10c      	bne.n	8008136 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800811c:	4b0b      	ldr	r3, [pc, #44]	@ (800814c <vQueueAddToRegistry+0x4c>)
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	00d2      	lsls	r2, r2, #3
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008126:	4a09      	ldr	r2, [pc, #36]	@ (800814c <vQueueAddToRegistry+0x4c>)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	18d3      	adds	r3, r2, r3
 800812e:	3304      	adds	r3, #4
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008134:	e006      	b.n	8008144 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3301      	adds	r3, #1
 800813a:	60fb      	str	r3, [r7, #12]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2b07      	cmp	r3, #7
 8008140:	d9e6      	bls.n	8008110 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008142:	46c0      	nop			@ (mov r8, r8)
 8008144:	46c0      	nop			@ (mov r8, r8)
 8008146:	46bd      	mov	sp, r7
 8008148:	b004      	add	sp, #16
 800814a:	bd80      	pop	{r7, pc}
 800814c:	20000a00 	.word	0x20000a00

08008150 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008158:	2300      	movs	r3, #0
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	e018      	b.n	8008190 <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800815e:	4a10      	ldr	r2, [pc, #64]	@ (80081a0 <vQueueUnregisterQueue+0x50>)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	00db      	lsls	r3, r3, #3
 8008164:	18d3      	adds	r3, r2, r3
 8008166:	3304      	adds	r3, #4
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	429a      	cmp	r2, r3
 800816e:	d10c      	bne.n	800818a <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008170:	4b0b      	ldr	r3, [pc, #44]	@ (80081a0 <vQueueUnregisterQueue+0x50>)
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	00d2      	lsls	r2, r2, #3
 8008176:	2100      	movs	r1, #0
 8008178:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800817a:	4a09      	ldr	r2, [pc, #36]	@ (80081a0 <vQueueUnregisterQueue+0x50>)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	00db      	lsls	r3, r3, #3
 8008180:	18d3      	adds	r3, r2, r3
 8008182:	3304      	adds	r3, #4
 8008184:	2200      	movs	r2, #0
 8008186:	601a      	str	r2, [r3, #0]
				break;
 8008188:	e006      	b.n	8008198 <vQueueUnregisterQueue+0x48>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	3301      	adds	r3, #1
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2b07      	cmp	r3, #7
 8008194:	d9e3      	bls.n	800815e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008196:	46c0      	nop			@ (mov r8, r8)
 8008198:	46c0      	nop			@ (mov r8, r8)
 800819a:	46bd      	mov	sp, r7
 800819c:	b004      	add	sp, #16
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20000a00 	.word	0x20000a00

080081a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80081b4:	f001 fa64 	bl	8009680 <vPortEnterCritical>
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	2244      	movs	r2, #68	@ 0x44
 80081bc:	5c9b      	ldrb	r3, [r3, r2]
 80081be:	b25b      	sxtb	r3, r3
 80081c0:	3301      	adds	r3, #1
 80081c2:	d103      	bne.n	80081cc <vQueueWaitForMessageRestricted+0x28>
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	2244      	movs	r2, #68	@ 0x44
 80081c8:	2100      	movs	r1, #0
 80081ca:	5499      	strb	r1, [r3, r2]
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	2245      	movs	r2, #69	@ 0x45
 80081d0:	5c9b      	ldrb	r3, [r3, r2]
 80081d2:	b25b      	sxtb	r3, r3
 80081d4:	3301      	adds	r3, #1
 80081d6:	d103      	bne.n	80081e0 <vQueueWaitForMessageRestricted+0x3c>
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	2245      	movs	r2, #69	@ 0x45
 80081dc:	2100      	movs	r1, #0
 80081de:	5499      	strb	r1, [r3, r2]
 80081e0:	f001 fa60 	bl	80096a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d106      	bne.n	80081fa <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	3324      	adds	r3, #36	@ 0x24
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	68b9      	ldr	r1, [r7, #8]
 80081f4:	0018      	movs	r0, r3
 80081f6:	f000 fbfb 	bl	80089f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	0018      	movs	r0, r3
 80081fe:	f7ff fef2 	bl	8007fe6 <prvUnlockQueue>
	}
 8008202:	46c0      	nop			@ (mov r8, r8)
 8008204:	46bd      	mov	sp, r7
 8008206:	b006      	add	sp, #24
 8008208:	bd80      	pop	{r7, pc}

0800820a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800820a:	b590      	push	{r4, r7, lr}
 800820c:	b08d      	sub	sp, #52	@ 0x34
 800820e:	af04      	add	r7, sp, #16
 8008210:	60f8      	str	r0, [r7, #12]
 8008212:	60b9      	str	r1, [r7, #8]
 8008214:	607a      	str	r2, [r7, #4]
 8008216:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800821a:	2b00      	cmp	r3, #0
 800821c:	d102      	bne.n	8008224 <xTaskCreateStatic+0x1a>
 800821e:	b672      	cpsid	i
 8008220:	46c0      	nop			@ (mov r8, r8)
 8008222:	e7fd      	b.n	8008220 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8008224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008226:	2b00      	cmp	r3, #0
 8008228:	d102      	bne.n	8008230 <xTaskCreateStatic+0x26>
 800822a:	b672      	cpsid	i
 800822c:	46c0      	nop			@ (mov r8, r8)
 800822e:	e7fd      	b.n	800822c <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008230:	23a8      	movs	r3, #168	@ 0xa8
 8008232:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2ba8      	cmp	r3, #168	@ 0xa8
 8008238:	d002      	beq.n	8008240 <xTaskCreateStatic+0x36>
 800823a:	b672      	cpsid	i
 800823c:	46c0      	nop			@ (mov r8, r8)
 800823e:	e7fd      	b.n	800823c <xTaskCreateStatic+0x32>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008240:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008244:	2b00      	cmp	r3, #0
 8008246:	d020      	beq.n	800828a <xTaskCreateStatic+0x80>
 8008248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800824a:	2b00      	cmp	r3, #0
 800824c:	d01d      	beq.n	800828a <xTaskCreateStatic+0x80>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800824e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008250:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008256:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	22a5      	movs	r2, #165	@ 0xa5
 800825c:	2102      	movs	r1, #2
 800825e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008260:	683c      	ldr	r4, [r7, #0]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	68b9      	ldr	r1, [r7, #8]
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	2300      	movs	r3, #0
 800826a:	9303      	str	r3, [sp, #12]
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	9302      	str	r3, [sp, #8]
 8008270:	2318      	movs	r3, #24
 8008272:	18fb      	adds	r3, r7, r3
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	0023      	movs	r3, r4
 800827c:	f000 f858 	bl	8008330 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	0018      	movs	r0, r3
 8008284:	f000 f8f6 	bl	8008474 <prvAddNewTaskToReadyList>
 8008288:	e001      	b.n	800828e <xTaskCreateStatic+0x84>
		}
		else
		{
			xReturn = NULL;
 800828a:	2300      	movs	r3, #0
 800828c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800828e:	69bb      	ldr	r3, [r7, #24]
	}
 8008290:	0018      	movs	r0, r3
 8008292:	46bd      	mov	sp, r7
 8008294:	b009      	add	sp, #36	@ 0x24
 8008296:	bd90      	pop	{r4, r7, pc}

08008298 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008298:	b590      	push	{r4, r7, lr}
 800829a:	b08d      	sub	sp, #52	@ 0x34
 800829c:	af04      	add	r7, sp, #16
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	603b      	str	r3, [r7, #0]
 80082a4:	1dbb      	adds	r3, r7, #6
 80082a6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082a8:	1dbb      	adds	r3, r7, #6
 80082aa:	881b      	ldrh	r3, [r3, #0]
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	0018      	movs	r0, r3
 80082b0:	f001 fa7e 	bl	80097b0 <pvPortMalloc>
 80082b4:	0003      	movs	r3, r0
 80082b6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d010      	beq.n	80082e0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082be:	20a8      	movs	r0, #168	@ 0xa8
 80082c0:	f001 fa76 	bl	80097b0 <pvPortMalloc>
 80082c4:	0003      	movs	r3, r0
 80082c6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80082d4:	e006      	b.n	80082e4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	0018      	movs	r0, r3
 80082da:	f001 fb19 	bl	8009910 <vPortFree>
 80082de:	e001      	b.n	80082e4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082e0:	2300      	movs	r3, #0
 80082e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d01a      	beq.n	8008320 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	22a5      	movs	r2, #165	@ 0xa5
 80082ee:	2100      	movs	r1, #0
 80082f0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082f2:	1dbb      	adds	r3, r7, #6
 80082f4:	881a      	ldrh	r2, [r3, #0]
 80082f6:	683c      	ldr	r4, [r7, #0]
 80082f8:	68b9      	ldr	r1, [r7, #8]
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	2300      	movs	r3, #0
 80082fe:	9303      	str	r3, [sp, #12]
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	9302      	str	r3, [sp, #8]
 8008304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	0023      	movs	r3, r4
 800830e:	f000 f80f 	bl	8008330 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	0018      	movs	r0, r3
 8008316:	f000 f8ad 	bl	8008474 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800831a:	2301      	movs	r3, #1
 800831c:	61bb      	str	r3, [r7, #24]
 800831e:	e002      	b.n	8008326 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008320:	2301      	movs	r3, #1
 8008322:	425b      	negs	r3, r3
 8008324:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008326:	69bb      	ldr	r3, [r7, #24]
	}
 8008328:	0018      	movs	r0, r3
 800832a:	46bd      	mov	sp, r7
 800832c:	b009      	add	sp, #36	@ 0x24
 800832e:	bd90      	pop	{r4, r7, pc}

08008330 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
 800833c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800833e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008340:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	001a      	movs	r2, r3
 8008348:	21a5      	movs	r1, #165	@ 0xa5
 800834a:	f001 fbe9 	bl	8009b20 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800834e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008350:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4943      	ldr	r1, [pc, #268]	@ (8008464 <prvInitialiseNewTask+0x134>)
 8008356:	468c      	mov	ip, r1
 8008358:	4463      	add	r3, ip
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	18d3      	adds	r3, r2, r3
 800835e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	2207      	movs	r2, #7
 8008364:	4393      	bics	r3, r2
 8008366:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	2207      	movs	r2, #7
 800836c:	4013      	ands	r3, r2
 800836e:	d002      	beq.n	8008376 <prvInitialiseNewTask+0x46>
 8008370:	b672      	cpsid	i
 8008372:	46c0      	nop			@ (mov r8, r8)
 8008374:	e7fd      	b.n	8008372 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d020      	beq.n	80083be <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800837c:	2300      	movs	r3, #0
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	e013      	b.n	80083aa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	18d3      	adds	r3, r2, r3
 8008388:	7818      	ldrb	r0, [r3, #0]
 800838a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800838c:	2134      	movs	r1, #52	@ 0x34
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	18d3      	adds	r3, r2, r3
 8008392:	185b      	adds	r3, r3, r1
 8008394:	1c02      	adds	r2, r0, #0
 8008396:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	18d3      	adds	r3, r2, r3
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d006      	beq.n	80083b2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	3301      	adds	r3, #1
 80083a8:	617b      	str	r3, [r7, #20]
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2b0f      	cmp	r3, #15
 80083ae:	d9e8      	bls.n	8008382 <prvInitialiseNewTask+0x52>
 80083b0:	e000      	b.n	80083b4 <prvInitialiseNewTask+0x84>
			{
				break;
 80083b2:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b6:	2243      	movs	r2, #67	@ 0x43
 80083b8:	2100      	movs	r1, #0
 80083ba:	5499      	strb	r1, [r3, r2]
 80083bc:	e003      	b.n	80083c6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80083be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c0:	2234      	movs	r2, #52	@ 0x34
 80083c2:	2100      	movs	r1, #0
 80083c4:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	2b37      	cmp	r3, #55	@ 0x37
 80083ca:	d901      	bls.n	80083d0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083cc:	2337      	movs	r3, #55	@ 0x37
 80083ce:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d2:	6a3a      	ldr	r2, [r7, #32]
 80083d4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d8:	6a3a      	ldr	r2, [r7, #32]
 80083da:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80083dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083de:	2200      	movs	r2, #0
 80083e0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e4:	3304      	adds	r3, #4
 80083e6:	0018      	movs	r0, r3
 80083e8:	f7ff f980 	bl	80076ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ee:	3318      	adds	r3, #24
 80083f0:	0018      	movs	r0, r3
 80083f2:	f7ff f97b 	bl	80076ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80083f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083fc:	6a3b      	ldr	r3, [r7, #32]
 80083fe:	2238      	movs	r2, #56	@ 0x38
 8008400:	1ad2      	subs	r2, r2, r3
 8008402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008404:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008408:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800840a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800840c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840e:	22a0      	movs	r2, #160	@ 0xa0
 8008410:	2100      	movs	r1, #0
 8008412:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008416:	22a4      	movs	r2, #164	@ 0xa4
 8008418:	2100      	movs	r1, #0
 800841a:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800841c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841e:	3354      	adds	r3, #84	@ 0x54
 8008420:	224c      	movs	r2, #76	@ 0x4c
 8008422:	2100      	movs	r1, #0
 8008424:	0018      	movs	r0, r3
 8008426:	f001 fb7b 	bl	8009b20 <memset>
 800842a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842c:	4a0e      	ldr	r2, [pc, #56]	@ (8008468 <prvInitialiseNewTask+0x138>)
 800842e:	659a      	str	r2, [r3, #88]	@ 0x58
 8008430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008432:	4a0e      	ldr	r2, [pc, #56]	@ (800846c <prvInitialiseNewTask+0x13c>)
 8008434:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008438:	4a0d      	ldr	r2, [pc, #52]	@ (8008470 <prvInitialiseNewTask+0x140>)
 800843a:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	68f9      	ldr	r1, [r7, #12]
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	0018      	movs	r0, r3
 8008444:	f001 f884 	bl	8009550 <pxPortInitialiseStack>
 8008448:	0002      	movs	r2, r0
 800844a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800844e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008456:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008458:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800845a:	46c0      	nop			@ (mov r8, r8)
 800845c:	46bd      	mov	sp, r7
 800845e:	b006      	add	sp, #24
 8008460:	bd80      	pop	{r7, pc}
 8008462:	46c0      	nop			@ (mov r8, r8)
 8008464:	3fffffff 	.word	0x3fffffff
 8008468:	20001c8c 	.word	0x20001c8c
 800846c:	20001cf4 	.word	0x20001cf4
 8008470:	20001d5c 	.word	0x20001d5c

08008474 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800847c:	f001 f900 	bl	8009680 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008480:	4b2a      	ldr	r3, [pc, #168]	@ (800852c <prvAddNewTaskToReadyList+0xb8>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	1c5a      	adds	r2, r3, #1
 8008486:	4b29      	ldr	r3, [pc, #164]	@ (800852c <prvAddNewTaskToReadyList+0xb8>)
 8008488:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800848a:	4b29      	ldr	r3, [pc, #164]	@ (8008530 <prvAddNewTaskToReadyList+0xbc>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d109      	bne.n	80084a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008492:	4b27      	ldr	r3, [pc, #156]	@ (8008530 <prvAddNewTaskToReadyList+0xbc>)
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008498:	4b24      	ldr	r3, [pc, #144]	@ (800852c <prvAddNewTaskToReadyList+0xb8>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d110      	bne.n	80084c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80084a0:	f000 fbac 	bl	8008bfc <prvInitialiseTaskLists>
 80084a4:	e00d      	b.n	80084c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80084a6:	4b23      	ldr	r3, [pc, #140]	@ (8008534 <prvAddNewTaskToReadyList+0xc0>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d109      	bne.n	80084c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084ae:	4b20      	ldr	r3, [pc, #128]	@ (8008530 <prvAddNewTaskToReadyList+0xbc>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d802      	bhi.n	80084c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80084bc:	4b1c      	ldr	r3, [pc, #112]	@ (8008530 <prvAddNewTaskToReadyList+0xbc>)
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80084c2:	4b1d      	ldr	r3, [pc, #116]	@ (8008538 <prvAddNewTaskToReadyList+0xc4>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008538 <prvAddNewTaskToReadyList+0xc4>)
 80084ca:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80084cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008538 <prvAddNewTaskToReadyList+0xc4>)
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084d8:	4b18      	ldr	r3, [pc, #96]	@ (800853c <prvAddNewTaskToReadyList+0xc8>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d903      	bls.n	80084e8 <prvAddNewTaskToReadyList+0x74>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084e4:	4b15      	ldr	r3, [pc, #84]	@ (800853c <prvAddNewTaskToReadyList+0xc8>)
 80084e6:	601a      	str	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ec:	0013      	movs	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	189b      	adds	r3, r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4a12      	ldr	r2, [pc, #72]	@ (8008540 <prvAddNewTaskToReadyList+0xcc>)
 80084f6:	189a      	adds	r2, r3, r2
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	3304      	adds	r3, #4
 80084fc:	0019      	movs	r1, r3
 80084fe:	0010      	movs	r0, r2
 8008500:	f7ff f8ff 	bl	8007702 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008504:	f001 f8ce 	bl	80096a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008508:	4b0a      	ldr	r3, [pc, #40]	@ (8008534 <prvAddNewTaskToReadyList+0xc0>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d008      	beq.n	8008522 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008510:	4b07      	ldr	r3, [pc, #28]	@ (8008530 <prvAddNewTaskToReadyList+0xbc>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800851a:	429a      	cmp	r2, r3
 800851c:	d201      	bcs.n	8008522 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800851e:	f001 f89f 	bl	8009660 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008522:	46c0      	nop			@ (mov r8, r8)
 8008524:	46bd      	mov	sp, r7
 8008526:	b002      	add	sp, #8
 8008528:	bd80      	pop	{r7, pc}
 800852a:	46c0      	nop			@ (mov r8, r8)
 800852c:	20000f14 	.word	0x20000f14
 8008530:	20000a40 	.word	0x20000a40
 8008534:	20000f20 	.word	0x20000f20
 8008538:	20000f30 	.word	0x20000f30
 800853c:	20000f1c 	.word	0x20000f1c
 8008540:	20000a44 	.word	0x20000a44

08008544 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800854c:	2300      	movs	r3, #0
 800854e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d011      	beq.n	800857a <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008556:	4b0d      	ldr	r3, [pc, #52]	@ (800858c <vTaskDelay+0x48>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d002      	beq.n	8008564 <vTaskDelay+0x20>
 800855e:	b672      	cpsid	i
 8008560:	46c0      	nop			@ (mov r8, r8)
 8008562:	e7fd      	b.n	8008560 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8008564:	f000 f874 	bl	8008650 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2100      	movs	r1, #0
 800856c:	0018      	movs	r0, r3
 800856e:	f000 fc7d 	bl	8008e6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008572:	f000 f879 	bl	8008668 <xTaskResumeAll>
 8008576:	0003      	movs	r3, r0
 8008578:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8008580:	f001 f86e 	bl	8009660 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008584:	46c0      	nop			@ (mov r8, r8)
 8008586:	46bd      	mov	sp, r7
 8008588:	b004      	add	sp, #16
 800858a:	bd80      	pop	{r7, pc}
 800858c:	20000f3c 	.word	0x20000f3c

08008590 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008590:	b590      	push	{r4, r7, lr}
 8008592:	b089      	sub	sp, #36	@ 0x24
 8008594:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008596:	2300      	movs	r3, #0
 8008598:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800859a:	2300      	movs	r3, #0
 800859c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800859e:	003a      	movs	r2, r7
 80085a0:	1d39      	adds	r1, r7, #4
 80085a2:	2308      	movs	r3, #8
 80085a4:	18fb      	adds	r3, r7, r3
 80085a6:	0018      	movs	r0, r3
 80085a8:	f7ff f852 	bl	8007650 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085ac:	683c      	ldr	r4, [r7, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	491f      	ldr	r1, [pc, #124]	@ (8008630 <vTaskStartScheduler+0xa0>)
 80085b4:	481f      	ldr	r0, [pc, #124]	@ (8008634 <vTaskStartScheduler+0xa4>)
 80085b6:	9202      	str	r2, [sp, #8]
 80085b8:	9301      	str	r3, [sp, #4]
 80085ba:	2300      	movs	r3, #0
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	2300      	movs	r3, #0
 80085c0:	0022      	movs	r2, r4
 80085c2:	f7ff fe22 	bl	800820a <xTaskCreateStatic>
 80085c6:	0002      	movs	r2, r0
 80085c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008638 <vTaskStartScheduler+0xa8>)
 80085ca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80085cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008638 <vTaskStartScheduler+0xa8>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d002      	beq.n	80085da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085d4:	2301      	movs	r3, #1
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	e001      	b.n	80085de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085da:	2300      	movs	r3, #0
 80085dc:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d103      	bne.n	80085ec <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80085e4:	f000 fc96 	bl	8008f14 <xTimerCreateTimerTask>
 80085e8:	0003      	movs	r3, r0
 80085ea:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d113      	bne.n	800861a <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80085f2:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085f4:	4b11      	ldr	r3, [pc, #68]	@ (800863c <vTaskStartScheduler+0xac>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3354      	adds	r3, #84	@ 0x54
 80085fa:	001a      	movs	r2, r3
 80085fc:	4b10      	ldr	r3, [pc, #64]	@ (8008640 <vTaskStartScheduler+0xb0>)
 80085fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008600:	4b10      	ldr	r3, [pc, #64]	@ (8008644 <vTaskStartScheduler+0xb4>)
 8008602:	2201      	movs	r2, #1
 8008604:	4252      	negs	r2, r2
 8008606:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008608:	4b0f      	ldr	r3, [pc, #60]	@ (8008648 <vTaskStartScheduler+0xb8>)
 800860a:	2201      	movs	r2, #1
 800860c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800860e:	4b0f      	ldr	r3, [pc, #60]	@ (800864c <vTaskStartScheduler+0xbc>)
 8008610:	2200      	movs	r2, #0
 8008612:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008614:	f001 f800 	bl	8009618 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008618:	e005      	b.n	8008626 <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	3301      	adds	r3, #1
 800861e:	d102      	bne.n	8008626 <vTaskStartScheduler+0x96>
 8008620:	b672      	cpsid	i
 8008622:	46c0      	nop			@ (mov r8, r8)
 8008624:	e7fd      	b.n	8008622 <vTaskStartScheduler+0x92>
}
 8008626:	46c0      	nop			@ (mov r8, r8)
 8008628:	46bd      	mov	sp, r7
 800862a:	b005      	add	sp, #20
 800862c:	bd90      	pop	{r4, r7, pc}
 800862e:	46c0      	nop			@ (mov r8, r8)
 8008630:	08009d70 	.word	0x08009d70
 8008634:	08008bdd 	.word	0x08008bdd
 8008638:	20000f38 	.word	0x20000f38
 800863c:	20000a40 	.word	0x20000a40
 8008640:	20000010 	.word	0x20000010
 8008644:	20000f34 	.word	0x20000f34
 8008648:	20000f20 	.word	0x20000f20
 800864c:	20000f18 	.word	0x20000f18

08008650 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008654:	4b03      	ldr	r3, [pc, #12]	@ (8008664 <vTaskSuspendAll+0x14>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	1c5a      	adds	r2, r3, #1
 800865a:	4b02      	ldr	r3, [pc, #8]	@ (8008664 <vTaskSuspendAll+0x14>)
 800865c:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800865e:	46c0      	nop			@ (mov r8, r8)
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	20000f3c 	.word	0x20000f3c

08008668 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800866e:	2300      	movs	r3, #0
 8008670:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008672:	2300      	movs	r3, #0
 8008674:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008676:	4b3a      	ldr	r3, [pc, #232]	@ (8008760 <xTaskResumeAll+0xf8>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d102      	bne.n	8008684 <xTaskResumeAll+0x1c>
 800867e:	b672      	cpsid	i
 8008680:	46c0      	nop			@ (mov r8, r8)
 8008682:	e7fd      	b.n	8008680 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008684:	f000 fffc 	bl	8009680 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008688:	4b35      	ldr	r3, [pc, #212]	@ (8008760 <xTaskResumeAll+0xf8>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	1e5a      	subs	r2, r3, #1
 800868e:	4b34      	ldr	r3, [pc, #208]	@ (8008760 <xTaskResumeAll+0xf8>)
 8008690:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008692:	4b33      	ldr	r3, [pc, #204]	@ (8008760 <xTaskResumeAll+0xf8>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d15b      	bne.n	8008752 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800869a:	4b32      	ldr	r3, [pc, #200]	@ (8008764 <xTaskResumeAll+0xfc>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d057      	beq.n	8008752 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086a2:	e02f      	b.n	8008704 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086a4:	4b30      	ldr	r3, [pc, #192]	@ (8008768 <xTaskResumeAll+0x100>)
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	3318      	adds	r3, #24
 80086b0:	0018      	movs	r0, r3
 80086b2:	f7ff f87e 	bl	80077b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	3304      	adds	r3, #4
 80086ba:	0018      	movs	r0, r3
 80086bc:	f7ff f879 	bl	80077b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086c4:	4b29      	ldr	r3, [pc, #164]	@ (800876c <xTaskResumeAll+0x104>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d903      	bls.n	80086d4 <xTaskResumeAll+0x6c>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086d0:	4b26      	ldr	r3, [pc, #152]	@ (800876c <xTaskResumeAll+0x104>)
 80086d2:	601a      	str	r2, [r3, #0]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086d8:	0013      	movs	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	189b      	adds	r3, r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4a23      	ldr	r2, [pc, #140]	@ (8008770 <xTaskResumeAll+0x108>)
 80086e2:	189a      	adds	r2, r3, r2
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	3304      	adds	r3, #4
 80086e8:	0019      	movs	r1, r3
 80086ea:	0010      	movs	r0, r2
 80086ec:	f7ff f809 	bl	8007702 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086f4:	4b1f      	ldr	r3, [pc, #124]	@ (8008774 <xTaskResumeAll+0x10c>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d302      	bcc.n	8008704 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 80086fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008778 <xTaskResumeAll+0x110>)
 8008700:	2201      	movs	r2, #1
 8008702:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008704:	4b18      	ldr	r3, [pc, #96]	@ (8008768 <xTaskResumeAll+0x100>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1cb      	bne.n	80086a4 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008712:	f000 fb13 	bl	8008d3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008716:	4b19      	ldr	r3, [pc, #100]	@ (800877c <xTaskResumeAll+0x114>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00f      	beq.n	8008742 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008722:	f000 f83b 	bl	800879c <xTaskIncrementTick>
 8008726:	1e03      	subs	r3, r0, #0
 8008728:	d002      	beq.n	8008730 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 800872a:	4b13      	ldr	r3, [pc, #76]	@ (8008778 <xTaskResumeAll+0x110>)
 800872c:	2201      	movs	r2, #1
 800872e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	3b01      	subs	r3, #1
 8008734:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1f2      	bne.n	8008722 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 800873c:	4b0f      	ldr	r3, [pc, #60]	@ (800877c <xTaskResumeAll+0x114>)
 800873e:	2200      	movs	r2, #0
 8008740:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008742:	4b0d      	ldr	r3, [pc, #52]	@ (8008778 <xTaskResumeAll+0x110>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d003      	beq.n	8008752 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800874a:	2301      	movs	r3, #1
 800874c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800874e:	f000 ff87 	bl	8009660 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008752:	f000 ffa7 	bl	80096a4 <vPortExitCritical>

	return xAlreadyYielded;
 8008756:	68bb      	ldr	r3, [r7, #8]
}
 8008758:	0018      	movs	r0, r3
 800875a:	46bd      	mov	sp, r7
 800875c:	b004      	add	sp, #16
 800875e:	bd80      	pop	{r7, pc}
 8008760:	20000f3c 	.word	0x20000f3c
 8008764:	20000f14 	.word	0x20000f14
 8008768:	20000ed4 	.word	0x20000ed4
 800876c:	20000f1c 	.word	0x20000f1c
 8008770:	20000a44 	.word	0x20000a44
 8008774:	20000a40 	.word	0x20000a40
 8008778:	20000f28 	.word	0x20000f28
 800877c:	20000f24 	.word	0x20000f24

08008780 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008786:	4b04      	ldr	r3, [pc, #16]	@ (8008798 <xTaskGetTickCount+0x18>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800878c:	687b      	ldr	r3, [r7, #4]
}
 800878e:	0018      	movs	r0, r3
 8008790:	46bd      	mov	sp, r7
 8008792:	b002      	add	sp, #8
 8008794:	bd80      	pop	{r7, pc}
 8008796:	46c0      	nop			@ (mov r8, r8)
 8008798:	20000f18 	.word	0x20000f18

0800879c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087a2:	2300      	movs	r3, #0
 80087a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087a6:	4b4a      	ldr	r3, [pc, #296]	@ (80088d0 <xTaskIncrementTick+0x134>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d000      	beq.n	80087b0 <xTaskIncrementTick+0x14>
 80087ae:	e085      	b.n	80088bc <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087b0:	4b48      	ldr	r3, [pc, #288]	@ (80088d4 <xTaskIncrementTick+0x138>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	3301      	adds	r3, #1
 80087b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80087b8:	4b46      	ldr	r3, [pc, #280]	@ (80088d4 <xTaskIncrementTick+0x138>)
 80087ba:	693a      	ldr	r2, [r7, #16]
 80087bc:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d118      	bne.n	80087f6 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 80087c4:	4b44      	ldr	r3, [pc, #272]	@ (80088d8 <xTaskIncrementTick+0x13c>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d002      	beq.n	80087d4 <xTaskIncrementTick+0x38>
 80087ce:	b672      	cpsid	i
 80087d0:	46c0      	nop			@ (mov r8, r8)
 80087d2:	e7fd      	b.n	80087d0 <xTaskIncrementTick+0x34>
 80087d4:	4b40      	ldr	r3, [pc, #256]	@ (80088d8 <xTaskIncrementTick+0x13c>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	60fb      	str	r3, [r7, #12]
 80087da:	4b40      	ldr	r3, [pc, #256]	@ (80088dc <xTaskIncrementTick+0x140>)
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	4b3e      	ldr	r3, [pc, #248]	@ (80088d8 <xTaskIncrementTick+0x13c>)
 80087e0:	601a      	str	r2, [r3, #0]
 80087e2:	4b3e      	ldr	r3, [pc, #248]	@ (80088dc <xTaskIncrementTick+0x140>)
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	601a      	str	r2, [r3, #0]
 80087e8:	4b3d      	ldr	r3, [pc, #244]	@ (80088e0 <xTaskIncrementTick+0x144>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	4b3c      	ldr	r3, [pc, #240]	@ (80088e0 <xTaskIncrementTick+0x144>)
 80087f0:	601a      	str	r2, [r3, #0]
 80087f2:	f000 faa3 	bl	8008d3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80087f6:	4b3b      	ldr	r3, [pc, #236]	@ (80088e4 <xTaskIncrementTick+0x148>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d349      	bcc.n	8008894 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008800:	4b35      	ldr	r3, [pc, #212]	@ (80088d8 <xTaskIncrementTick+0x13c>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d104      	bne.n	8008814 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800880a:	4b36      	ldr	r3, [pc, #216]	@ (80088e4 <xTaskIncrementTick+0x148>)
 800880c:	2201      	movs	r2, #1
 800880e:	4252      	negs	r2, r2
 8008810:	601a      	str	r2, [r3, #0]
					break;
 8008812:	e03f      	b.n	8008894 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008814:	4b30      	ldr	r3, [pc, #192]	@ (80088d8 <xTaskIncrementTick+0x13c>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008824:	693a      	ldr	r2, [r7, #16]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	429a      	cmp	r2, r3
 800882a:	d203      	bcs.n	8008834 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800882c:	4b2d      	ldr	r3, [pc, #180]	@ (80088e4 <xTaskIncrementTick+0x148>)
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008832:	e02f      	b.n	8008894 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	3304      	adds	r3, #4
 8008838:	0018      	movs	r0, r3
 800883a:	f7fe ffba 	bl	80077b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008842:	2b00      	cmp	r3, #0
 8008844:	d004      	beq.n	8008850 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	3318      	adds	r3, #24
 800884a:	0018      	movs	r0, r3
 800884c:	f7fe ffb1 	bl	80077b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008854:	4b24      	ldr	r3, [pc, #144]	@ (80088e8 <xTaskIncrementTick+0x14c>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	429a      	cmp	r2, r3
 800885a:	d903      	bls.n	8008864 <xTaskIncrementTick+0xc8>
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008860:	4b21      	ldr	r3, [pc, #132]	@ (80088e8 <xTaskIncrementTick+0x14c>)
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008868:	0013      	movs	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	189b      	adds	r3, r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4a1e      	ldr	r2, [pc, #120]	@ (80088ec <xTaskIncrementTick+0x150>)
 8008872:	189a      	adds	r2, r3, r2
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	3304      	adds	r3, #4
 8008878:	0019      	movs	r1, r3
 800887a:	0010      	movs	r0, r2
 800887c:	f7fe ff41 	bl	8007702 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008884:	4b1a      	ldr	r3, [pc, #104]	@ (80088f0 <xTaskIncrementTick+0x154>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800888a:	429a      	cmp	r2, r3
 800888c:	d3b8      	bcc.n	8008800 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 800888e:	2301      	movs	r3, #1
 8008890:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008892:	e7b5      	b.n	8008800 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008894:	4b16      	ldr	r3, [pc, #88]	@ (80088f0 <xTaskIncrementTick+0x154>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800889a:	4914      	ldr	r1, [pc, #80]	@ (80088ec <xTaskIncrementTick+0x150>)
 800889c:	0013      	movs	r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	189b      	adds	r3, r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	585b      	ldr	r3, [r3, r1]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d901      	bls.n	80088ae <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 80088aa:	2301      	movs	r3, #1
 80088ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80088ae:	4b11      	ldr	r3, [pc, #68]	@ (80088f4 <xTaskIncrementTick+0x158>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d007      	beq.n	80088c6 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 80088b6:	2301      	movs	r3, #1
 80088b8:	617b      	str	r3, [r7, #20]
 80088ba:	e004      	b.n	80088c6 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80088bc:	4b0e      	ldr	r3, [pc, #56]	@ (80088f8 <xTaskIncrementTick+0x15c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	1c5a      	adds	r2, r3, #1
 80088c2:	4b0d      	ldr	r3, [pc, #52]	@ (80088f8 <xTaskIncrementTick+0x15c>)
 80088c4:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80088c6:	697b      	ldr	r3, [r7, #20]
}
 80088c8:	0018      	movs	r0, r3
 80088ca:	46bd      	mov	sp, r7
 80088cc:	b006      	add	sp, #24
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	20000f3c 	.word	0x20000f3c
 80088d4:	20000f18 	.word	0x20000f18
 80088d8:	20000ecc 	.word	0x20000ecc
 80088dc:	20000ed0 	.word	0x20000ed0
 80088e0:	20000f2c 	.word	0x20000f2c
 80088e4:	20000f34 	.word	0x20000f34
 80088e8:	20000f1c 	.word	0x20000f1c
 80088ec:	20000a44 	.word	0x20000a44
 80088f0:	20000a40 	.word	0x20000a40
 80088f4:	20000f28 	.word	0x20000f28
 80088f8:	20000f24 	.word	0x20000f24

080088fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008902:	4b25      	ldr	r3, [pc, #148]	@ (8008998 <vTaskSwitchContext+0x9c>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800890a:	4b24      	ldr	r3, [pc, #144]	@ (800899c <vTaskSwitchContext+0xa0>)
 800890c:	2201      	movs	r2, #1
 800890e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008910:	e03e      	b.n	8008990 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008912:	4b22      	ldr	r3, [pc, #136]	@ (800899c <vTaskSwitchContext+0xa0>)
 8008914:	2200      	movs	r2, #0
 8008916:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008918:	4b21      	ldr	r3, [pc, #132]	@ (80089a0 <vTaskSwitchContext+0xa4>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	607b      	str	r3, [r7, #4]
 800891e:	e008      	b.n	8008932 <vTaskSwitchContext+0x36>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d102      	bne.n	800892c <vTaskSwitchContext+0x30>
 8008926:	b672      	cpsid	i
 8008928:	46c0      	nop			@ (mov r8, r8)
 800892a:	e7fd      	b.n	8008928 <vTaskSwitchContext+0x2c>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	3b01      	subs	r3, #1
 8008930:	607b      	str	r3, [r7, #4]
 8008932:	491c      	ldr	r1, [pc, #112]	@ (80089a4 <vTaskSwitchContext+0xa8>)
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	0013      	movs	r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	189b      	adds	r3, r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	585b      	ldr	r3, [r3, r1]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d0ed      	beq.n	8008920 <vTaskSwitchContext+0x24>
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	0013      	movs	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	189b      	adds	r3, r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4a15      	ldr	r2, [pc, #84]	@ (80089a4 <vTaskSwitchContext+0xa8>)
 8008950:	189b      	adds	r3, r3, r2
 8008952:	603b      	str	r3, [r7, #0]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	605a      	str	r2, [r3, #4]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	685a      	ldr	r2, [r3, #4]
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	3308      	adds	r3, #8
 8008966:	429a      	cmp	r2, r3
 8008968:	d104      	bne.n	8008974 <vTaskSwitchContext+0x78>
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	685a      	ldr	r2, [r3, #4]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	605a      	str	r2, [r3, #4]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	68da      	ldr	r2, [r3, #12]
 800897a:	4b0b      	ldr	r3, [pc, #44]	@ (80089a8 <vTaskSwitchContext+0xac>)
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	4b08      	ldr	r3, [pc, #32]	@ (80089a0 <vTaskSwitchContext+0xa4>)
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008984:	4b08      	ldr	r3, [pc, #32]	@ (80089a8 <vTaskSwitchContext+0xac>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3354      	adds	r3, #84	@ 0x54
 800898a:	001a      	movs	r2, r3
 800898c:	4b07      	ldr	r3, [pc, #28]	@ (80089ac <vTaskSwitchContext+0xb0>)
 800898e:	601a      	str	r2, [r3, #0]
}
 8008990:	46c0      	nop			@ (mov r8, r8)
 8008992:	46bd      	mov	sp, r7
 8008994:	b002      	add	sp, #8
 8008996:	bd80      	pop	{r7, pc}
 8008998:	20000f3c 	.word	0x20000f3c
 800899c:	20000f28 	.word	0x20000f28
 80089a0:	20000f1c 	.word	0x20000f1c
 80089a4:	20000a44 	.word	0x20000a44
 80089a8:	20000a40 	.word	0x20000a40
 80089ac:	20000010 	.word	0x20000010

080089b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d102      	bne.n	80089c6 <vTaskPlaceOnEventList+0x16>
 80089c0:	b672      	cpsid	i
 80089c2:	46c0      	nop			@ (mov r8, r8)
 80089c4:	e7fd      	b.n	80089c2 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089c6:	4b09      	ldr	r3, [pc, #36]	@ (80089ec <vTaskPlaceOnEventList+0x3c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3318      	adds	r3, #24
 80089cc:	001a      	movs	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	0011      	movs	r1, r2
 80089d2:	0018      	movs	r0, r3
 80089d4:	f7fe feb7 	bl	8007746 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2101      	movs	r1, #1
 80089dc:	0018      	movs	r0, r3
 80089de:	f000 fa45 	bl	8008e6c <prvAddCurrentTaskToDelayedList>
}
 80089e2:	46c0      	nop			@ (mov r8, r8)
 80089e4:	46bd      	mov	sp, r7
 80089e6:	b002      	add	sp, #8
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	46c0      	nop			@ (mov r8, r8)
 80089ec:	20000a40 	.word	0x20000a40

080089f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d102      	bne.n	8008a08 <vTaskPlaceOnEventListRestricted+0x18>
 8008a02:	b672      	cpsid	i
 8008a04:	46c0      	nop			@ (mov r8, r8)
 8008a06:	e7fd      	b.n	8008a04 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a08:	4b0c      	ldr	r3, [pc, #48]	@ (8008a3c <vTaskPlaceOnEventListRestricted+0x4c>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	3318      	adds	r3, #24
 8008a0e:	001a      	movs	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	0011      	movs	r1, r2
 8008a14:	0018      	movs	r0, r3
 8008a16:	f7fe fe74 	bl	8007702 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 8008a20:	2301      	movs	r3, #1
 8008a22:	425b      	negs	r3, r3
 8008a24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	0011      	movs	r1, r2
 8008a2c:	0018      	movs	r0, r3
 8008a2e:	f000 fa1d 	bl	8008e6c <prvAddCurrentTaskToDelayedList>
	}
 8008a32:	46c0      	nop			@ (mov r8, r8)
 8008a34:	46bd      	mov	sp, r7
 8008a36:	b004      	add	sp, #16
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	46c0      	nop			@ (mov r8, r8)
 8008a3c:	20000a40 	.word	0x20000a40

08008a40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d102      	bne.n	8008a5c <xTaskRemoveFromEventList+0x1c>
 8008a56:	b672      	cpsid	i
 8008a58:	46c0      	nop			@ (mov r8, r8)
 8008a5a:	e7fd      	b.n	8008a58 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	3318      	adds	r3, #24
 8008a60:	0018      	movs	r0, r3
 8008a62:	f7fe fea6 	bl	80077b2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a66:	4b1f      	ldr	r3, [pc, #124]	@ (8008ae4 <xTaskRemoveFromEventList+0xa4>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d11d      	bne.n	8008aaa <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	3304      	adds	r3, #4
 8008a72:	0018      	movs	r0, r3
 8008a74:	f7fe fe9d 	bl	80077b2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ae8 <xTaskRemoveFromEventList+0xa8>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d903      	bls.n	8008a8c <xTaskRemoveFromEventList+0x4c>
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a88:	4b17      	ldr	r3, [pc, #92]	@ (8008ae8 <xTaskRemoveFromEventList+0xa8>)
 8008a8a:	601a      	str	r2, [r3, #0]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a90:	0013      	movs	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	189b      	adds	r3, r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4a14      	ldr	r2, [pc, #80]	@ (8008aec <xTaskRemoveFromEventList+0xac>)
 8008a9a:	189a      	adds	r2, r3, r2
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	0019      	movs	r1, r3
 8008aa2:	0010      	movs	r0, r2
 8008aa4:	f7fe fe2d 	bl	8007702 <vListInsertEnd>
 8008aa8:	e007      	b.n	8008aba <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	3318      	adds	r3, #24
 8008aae:	001a      	movs	r2, r3
 8008ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8008af0 <xTaskRemoveFromEventList+0xb0>)
 8008ab2:	0011      	movs	r1, r2
 8008ab4:	0018      	movs	r0, r3
 8008ab6:	f7fe fe24 	bl	8007702 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008abe:	4b0d      	ldr	r3, [pc, #52]	@ (8008af4 <xTaskRemoveFromEventList+0xb4>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d905      	bls.n	8008ad4 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008acc:	4b0a      	ldr	r3, [pc, #40]	@ (8008af8 <xTaskRemoveFromEventList+0xb8>)
 8008ace:	2201      	movs	r2, #1
 8008ad0:	601a      	str	r2, [r3, #0]
 8008ad2:	e001      	b.n	8008ad8 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
}
 8008ada:	0018      	movs	r0, r3
 8008adc:	46bd      	mov	sp, r7
 8008ade:	b004      	add	sp, #16
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	46c0      	nop			@ (mov r8, r8)
 8008ae4:	20000f3c 	.word	0x20000f3c
 8008ae8:	20000f1c 	.word	0x20000f1c
 8008aec:	20000a44 	.word	0x20000a44
 8008af0:	20000ed4 	.word	0x20000ed4
 8008af4:	20000a40 	.word	0x20000a40
 8008af8:	20000f28 	.word	0x20000f28

08008afc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b04:	4b05      	ldr	r3, [pc, #20]	@ (8008b1c <vTaskInternalSetTimeOutState+0x20>)
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b0c:	4b04      	ldr	r3, [pc, #16]	@ (8008b20 <vTaskInternalSetTimeOutState+0x24>)
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	605a      	str	r2, [r3, #4]
}
 8008b14:	46c0      	nop			@ (mov r8, r8)
 8008b16:	46bd      	mov	sp, r7
 8008b18:	b002      	add	sp, #8
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	20000f2c 	.word	0x20000f2c
 8008b20:	20000f18 	.word	0x20000f18

08008b24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b086      	sub	sp, #24
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d102      	bne.n	8008b3a <xTaskCheckForTimeOut+0x16>
 8008b34:	b672      	cpsid	i
 8008b36:	46c0      	nop			@ (mov r8, r8)
 8008b38:	e7fd      	b.n	8008b36 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d102      	bne.n	8008b46 <xTaskCheckForTimeOut+0x22>
 8008b40:	b672      	cpsid	i
 8008b42:	46c0      	nop			@ (mov r8, r8)
 8008b44:	e7fd      	b.n	8008b42 <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 8008b46:	f000 fd9b 	bl	8009680 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8008bc0 <xTaskCheckForTimeOut+0x9c>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	d102      	bne.n	8008b68 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b62:	2300      	movs	r3, #0
 8008b64:	617b      	str	r3, [r7, #20]
 8008b66:	e024      	b.n	8008bb2 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	4b15      	ldr	r3, [pc, #84]	@ (8008bc4 <xTaskCheckForTimeOut+0xa0>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d007      	beq.n	8008b84 <xTaskCheckForTimeOut+0x60>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d302      	bcc.n	8008b84 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	617b      	str	r3, [r7, #20]
 8008b82:	e016      	b.n	8008bb2 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d20c      	bcs.n	8008ba8 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	1ad2      	subs	r2, r2, r3
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	0018      	movs	r0, r3
 8008b9e:	f7ff ffad 	bl	8008afc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	617b      	str	r3, [r7, #20]
 8008ba6:	e004      	b.n	8008bb2 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	2200      	movs	r2, #0
 8008bac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008bb2:	f000 fd77 	bl	80096a4 <vPortExitCritical>

	return xReturn;
 8008bb6:	697b      	ldr	r3, [r7, #20]
}
 8008bb8:	0018      	movs	r0, r3
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	b006      	add	sp, #24
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	20000f18 	.word	0x20000f18
 8008bc4:	20000f2c 	.word	0x20000f2c

08008bc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008bcc:	4b02      	ldr	r3, [pc, #8]	@ (8008bd8 <vTaskMissedYield+0x10>)
 8008bce:	2201      	movs	r2, #1
 8008bd0:	601a      	str	r2, [r3, #0]
}
 8008bd2:	46c0      	nop			@ (mov r8, r8)
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	20000f28 	.word	0x20000f28

08008bdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008be4:	f000 f84e 	bl	8008c84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008be8:	4b03      	ldr	r3, [pc, #12]	@ (8008bf8 <prvIdleTask+0x1c>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d9f9      	bls.n	8008be4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bf0:	f000 fd36 	bl	8009660 <vPortYield>
		prvCheckTasksWaitingTermination();
 8008bf4:	e7f6      	b.n	8008be4 <prvIdleTask+0x8>
 8008bf6:	46c0      	nop			@ (mov r8, r8)
 8008bf8:	20000a44 	.word	0x20000a44

08008bfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c02:	2300      	movs	r3, #0
 8008c04:	607b      	str	r3, [r7, #4]
 8008c06:	e00c      	b.n	8008c22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	0013      	movs	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	189b      	adds	r3, r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4a14      	ldr	r2, [pc, #80]	@ (8008c64 <prvInitialiseTaskLists+0x68>)
 8008c14:	189b      	adds	r3, r3, r2
 8008c16:	0018      	movs	r0, r3
 8008c18:	f7fe fd4a 	bl	80076b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	607b      	str	r3, [r7, #4]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2b37      	cmp	r3, #55	@ 0x37
 8008c26:	d9ef      	bls.n	8008c08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c28:	4b0f      	ldr	r3, [pc, #60]	@ (8008c68 <prvInitialiseTaskLists+0x6c>)
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	f7fe fd40 	bl	80076b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c30:	4b0e      	ldr	r3, [pc, #56]	@ (8008c6c <prvInitialiseTaskLists+0x70>)
 8008c32:	0018      	movs	r0, r3
 8008c34:	f7fe fd3c 	bl	80076b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c38:	4b0d      	ldr	r3, [pc, #52]	@ (8008c70 <prvInitialiseTaskLists+0x74>)
 8008c3a:	0018      	movs	r0, r3
 8008c3c:	f7fe fd38 	bl	80076b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c40:	4b0c      	ldr	r3, [pc, #48]	@ (8008c74 <prvInitialiseTaskLists+0x78>)
 8008c42:	0018      	movs	r0, r3
 8008c44:	f7fe fd34 	bl	80076b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c48:	4b0b      	ldr	r3, [pc, #44]	@ (8008c78 <prvInitialiseTaskLists+0x7c>)
 8008c4a:	0018      	movs	r0, r3
 8008c4c:	f7fe fd30 	bl	80076b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c50:	4b0a      	ldr	r3, [pc, #40]	@ (8008c7c <prvInitialiseTaskLists+0x80>)
 8008c52:	4a05      	ldr	r2, [pc, #20]	@ (8008c68 <prvInitialiseTaskLists+0x6c>)
 8008c54:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c56:	4b0a      	ldr	r3, [pc, #40]	@ (8008c80 <prvInitialiseTaskLists+0x84>)
 8008c58:	4a04      	ldr	r2, [pc, #16]	@ (8008c6c <prvInitialiseTaskLists+0x70>)
 8008c5a:	601a      	str	r2, [r3, #0]
}
 8008c5c:	46c0      	nop			@ (mov r8, r8)
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	b002      	add	sp, #8
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	20000a44 	.word	0x20000a44
 8008c68:	20000ea4 	.word	0x20000ea4
 8008c6c:	20000eb8 	.word	0x20000eb8
 8008c70:	20000ed4 	.word	0x20000ed4
 8008c74:	20000ee8 	.word	0x20000ee8
 8008c78:	20000f00 	.word	0x20000f00
 8008c7c:	20000ecc 	.word	0x20000ecc
 8008c80:	20000ed0 	.word	0x20000ed0

08008c84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c8a:	e01a      	b.n	8008cc2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8008c8c:	f000 fcf8 	bl	8009680 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c90:	4b10      	ldr	r3, [pc, #64]	@ (8008cd4 <prvCheckTasksWaitingTermination+0x50>)
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	3304      	adds	r3, #4
 8008c9c:	0018      	movs	r0, r3
 8008c9e:	f7fe fd88 	bl	80077b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8008cd8 <prvCheckTasksWaitingTermination+0x54>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	1e5a      	subs	r2, r3, #1
 8008ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8008cd8 <prvCheckTasksWaitingTermination+0x54>)
 8008caa:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008cac:	4b0b      	ldr	r3, [pc, #44]	@ (8008cdc <prvCheckTasksWaitingTermination+0x58>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	1e5a      	subs	r2, r3, #1
 8008cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8008cdc <prvCheckTasksWaitingTermination+0x58>)
 8008cb4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8008cb6:	f000 fcf5 	bl	80096a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	0018      	movs	r0, r3
 8008cbe:	f000 f80f 	bl	8008ce0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cc2:	4b06      	ldr	r3, [pc, #24]	@ (8008cdc <prvCheckTasksWaitingTermination+0x58>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1e0      	bne.n	8008c8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008cca:	46c0      	nop			@ (mov r8, r8)
 8008ccc:	46c0      	nop			@ (mov r8, r8)
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	b002      	add	sp, #8
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	20000ee8 	.word	0x20000ee8
 8008cd8:	20000f14 	.word	0x20000f14
 8008cdc:	20000efc 	.word	0x20000efc

08008ce0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	3354      	adds	r3, #84	@ 0x54
 8008cec:	0018      	movs	r0, r3
 8008cee:	f000 ff1f 	bl	8009b30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	22a5      	movs	r2, #165	@ 0xa5
 8008cf6:	5c9b      	ldrb	r3, [r3, r2]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d109      	bne.n	8008d10 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d00:	0018      	movs	r0, r3
 8008d02:	f000 fe05 	bl	8009910 <vPortFree>
				vPortFree( pxTCB );
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	0018      	movs	r0, r3
 8008d0a:	f000 fe01 	bl	8009910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d0e:	e011      	b.n	8008d34 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	22a5      	movs	r2, #165	@ 0xa5
 8008d14:	5c9b      	ldrb	r3, [r3, r2]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d104      	bne.n	8008d24 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	0018      	movs	r0, r3
 8008d1e:	f000 fdf7 	bl	8009910 <vPortFree>
	}
 8008d22:	e007      	b.n	8008d34 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	22a5      	movs	r2, #165	@ 0xa5
 8008d28:	5c9b      	ldrb	r3, [r3, r2]
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d002      	beq.n	8008d34 <prvDeleteTCB+0x54>
 8008d2e:	b672      	cpsid	i
 8008d30:	46c0      	nop			@ (mov r8, r8)
 8008d32:	e7fd      	b.n	8008d30 <prvDeleteTCB+0x50>
	}
 8008d34:	46c0      	nop			@ (mov r8, r8)
 8008d36:	46bd      	mov	sp, r7
 8008d38:	b002      	add	sp, #8
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d42:	4b0b      	ldr	r3, [pc, #44]	@ (8008d70 <prvResetNextTaskUnblockTime+0x34>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d104      	bne.n	8008d56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d4c:	4b09      	ldr	r3, [pc, #36]	@ (8008d74 <prvResetNextTaskUnblockTime+0x38>)
 8008d4e:	2201      	movs	r2, #1
 8008d50:	4252      	negs	r2, r2
 8008d52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d54:	e008      	b.n	8008d68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d56:	4b06      	ldr	r3, [pc, #24]	@ (8008d70 <prvResetNextTaskUnblockTime+0x34>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	4b03      	ldr	r3, [pc, #12]	@ (8008d74 <prvResetNextTaskUnblockTime+0x38>)
 8008d66:	601a      	str	r2, [r3, #0]
}
 8008d68:	46c0      	nop			@ (mov r8, r8)
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	b002      	add	sp, #8
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	20000ecc 	.word	0x20000ecc
 8008d74:	20000f34 	.word	0x20000f34

08008d78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8008da8 <xTaskGetSchedulerState+0x30>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d102      	bne.n	8008d8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d86:	2301      	movs	r3, #1
 8008d88:	607b      	str	r3, [r7, #4]
 8008d8a:	e008      	b.n	8008d9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d8c:	4b07      	ldr	r3, [pc, #28]	@ (8008dac <xTaskGetSchedulerState+0x34>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d102      	bne.n	8008d9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d94:	2302      	movs	r3, #2
 8008d96:	607b      	str	r3, [r7, #4]
 8008d98:	e001      	b.n	8008d9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d9e:	687b      	ldr	r3, [r7, #4]
	}
 8008da0:	0018      	movs	r0, r3
 8008da2:	46bd      	mov	sp, r7
 8008da4:	b002      	add	sp, #8
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	20000f20 	.word	0x20000f20
 8008dac:	20000f3c 	.word	0x20000f3c

08008db0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d046      	beq.n	8008e54 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008dc6:	4b26      	ldr	r3, [pc, #152]	@ (8008e60 <xTaskPriorityDisinherit+0xb0>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d002      	beq.n	8008dd6 <xTaskPriorityDisinherit+0x26>
 8008dd0:	b672      	cpsid	i
 8008dd2:	46c0      	nop			@ (mov r8, r8)
 8008dd4:	e7fd      	b.n	8008dd2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d102      	bne.n	8008de4 <xTaskPriorityDisinherit+0x34>
 8008dde:	b672      	cpsid	i
 8008de0:	46c0      	nop			@ (mov r8, r8)
 8008de2:	e7fd      	b.n	8008de0 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008de8:	1e5a      	subs	r2, r3, #1
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d02c      	beq.n	8008e54 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d128      	bne.n	8008e54 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	3304      	adds	r3, #4
 8008e06:	0018      	movs	r0, r3
 8008e08:	f7fe fcd3 	bl	80077b2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e18:	2238      	movs	r2, #56	@ 0x38
 8008e1a:	1ad2      	subs	r2, r2, r3
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e24:	4b0f      	ldr	r3, [pc, #60]	@ (8008e64 <xTaskPriorityDisinherit+0xb4>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d903      	bls.n	8008e34 <xTaskPriorityDisinherit+0x84>
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e30:	4b0c      	ldr	r3, [pc, #48]	@ (8008e64 <xTaskPriorityDisinherit+0xb4>)
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e38:	0013      	movs	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	189b      	adds	r3, r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4a09      	ldr	r2, [pc, #36]	@ (8008e68 <xTaskPriorityDisinherit+0xb8>)
 8008e42:	189a      	adds	r2, r3, r2
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	3304      	adds	r3, #4
 8008e48:	0019      	movs	r1, r3
 8008e4a:	0010      	movs	r0, r2
 8008e4c:	f7fe fc59 	bl	8007702 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e50:	2301      	movs	r3, #1
 8008e52:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e54:	68fb      	ldr	r3, [r7, #12]
	}
 8008e56:	0018      	movs	r0, r3
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	b004      	add	sp, #16
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	46c0      	nop			@ (mov r8, r8)
 8008e60:	20000a40 	.word	0x20000a40
 8008e64:	20000f1c 	.word	0x20000f1c
 8008e68:	20000a44 	.word	0x20000a44

08008e6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e76:	4b21      	ldr	r3, [pc, #132]	@ (8008efc <prvAddCurrentTaskToDelayedList+0x90>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e7c:	4b20      	ldr	r3, [pc, #128]	@ (8008f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	3304      	adds	r3, #4
 8008e82:	0018      	movs	r0, r3
 8008e84:	f7fe fc95 	bl	80077b2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	d10b      	bne.n	8008ea6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d008      	beq.n	8008ea6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e94:	4b1a      	ldr	r3, [pc, #104]	@ (8008f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	1d1a      	adds	r2, r3, #4
 8008e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8008f04 <prvAddCurrentTaskToDelayedList+0x98>)
 8008e9c:	0011      	movs	r1, r2
 8008e9e:	0018      	movs	r0, r3
 8008ea0:	f7fe fc2f 	bl	8007702 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ea4:	e026      	b.n	8008ef4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	18d3      	adds	r3, r2, r3
 8008eac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008eae:	4b14      	ldr	r3, [pc, #80]	@ (8008f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d209      	bcs.n	8008ed2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ebe:	4b12      	ldr	r3, [pc, #72]	@ (8008f08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8008f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3304      	adds	r3, #4
 8008ec8:	0019      	movs	r1, r3
 8008eca:	0010      	movs	r0, r2
 8008ecc:	f7fe fc3b 	bl	8007746 <vListInsert>
}
 8008ed0:	e010      	b.n	8008ef4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8008f0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8008f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3304      	adds	r3, #4
 8008edc:	0019      	movs	r1, r3
 8008ede:	0010      	movs	r0, r2
 8008ee0:	f7fe fc31 	bl	8007746 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8008f10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d202      	bcs.n	8008ef4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008eee:	4b08      	ldr	r3, [pc, #32]	@ (8008f10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	601a      	str	r2, [r3, #0]
}
 8008ef4:	46c0      	nop			@ (mov r8, r8)
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	b004      	add	sp, #16
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	20000f18 	.word	0x20000f18
 8008f00:	20000a40 	.word	0x20000a40
 8008f04:	20000f00 	.word	0x20000f00
 8008f08:	20000ed0 	.word	0x20000ed0
 8008f0c:	20000ecc 	.word	0x20000ecc
 8008f10:	20000f34 	.word	0x20000f34

08008f14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f14:	b590      	push	{r4, r7, lr}
 8008f16:	b089      	sub	sp, #36	@ 0x24
 8008f18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f1e:	f000 fad5 	bl	80094cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f22:	4b18      	ldr	r3, [pc, #96]	@ (8008f84 <xTimerCreateTimerTask+0x70>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d020      	beq.n	8008f6c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f32:	003a      	movs	r2, r7
 8008f34:	1d39      	adds	r1, r7, #4
 8008f36:	2308      	movs	r3, #8
 8008f38:	18fb      	adds	r3, r7, r3
 8008f3a:	0018      	movs	r0, r3
 8008f3c:	f7fe fba0 	bl	8007680 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f40:	683c      	ldr	r4, [r7, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	4910      	ldr	r1, [pc, #64]	@ (8008f88 <xTimerCreateTimerTask+0x74>)
 8008f48:	4810      	ldr	r0, [pc, #64]	@ (8008f8c <xTimerCreateTimerTask+0x78>)
 8008f4a:	9202      	str	r2, [sp, #8]
 8008f4c:	9301      	str	r3, [sp, #4]
 8008f4e:	2302      	movs	r3, #2
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	2300      	movs	r3, #0
 8008f54:	0022      	movs	r2, r4
 8008f56:	f7ff f958 	bl	800820a <xTaskCreateStatic>
 8008f5a:	0002      	movs	r2, r0
 8008f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f90 <xTimerCreateTimerTask+0x7c>)
 8008f5e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f60:	4b0b      	ldr	r3, [pc, #44]	@ (8008f90 <xTimerCreateTimerTask+0x7c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d102      	bne.n	8008f78 <xTimerCreateTimerTask+0x64>
 8008f72:	b672      	cpsid	i
 8008f74:	46c0      	nop			@ (mov r8, r8)
 8008f76:	e7fd      	b.n	8008f74 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8008f78:	68fb      	ldr	r3, [r7, #12]
}
 8008f7a:	0018      	movs	r0, r3
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	b005      	add	sp, #20
 8008f80:	bd90      	pop	{r4, r7, pc}
 8008f82:	46c0      	nop			@ (mov r8, r8)
 8008f84:	20000f70 	.word	0x20000f70
 8008f88:	08009d78 	.word	0x08009d78
 8008f8c:	080090b9 	.word	0x080090b9
 8008f90:	20000f74 	.word	0x20000f74

08008f94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f94:	b590      	push	{r4, r7, lr}
 8008f96:	b08b      	sub	sp, #44	@ 0x2c
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
 8008fa0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d102      	bne.n	8008fb2 <xTimerGenericCommand+0x1e>
 8008fac:	b672      	cpsid	i
 8008fae:	46c0      	nop			@ (mov r8, r8)
 8008fb0:	e7fd      	b.n	8008fae <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8009028 <xTimerGenericCommand+0x94>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d030      	beq.n	800901c <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008fba:	2414      	movs	r4, #20
 8008fbc:	193b      	adds	r3, r7, r4
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008fc2:	193b      	adds	r3, r7, r4
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008fc8:	193b      	adds	r3, r7, r4
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	2b05      	cmp	r3, #5
 8008fd2:	dc19      	bgt.n	8009008 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008fd4:	f7ff fed0 	bl	8008d78 <xTaskGetSchedulerState>
 8008fd8:	0003      	movs	r3, r0
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d109      	bne.n	8008ff2 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008fde:	4b12      	ldr	r3, [pc, #72]	@ (8009028 <xTimerGenericCommand+0x94>)
 8008fe0:	6818      	ldr	r0, [r3, #0]
 8008fe2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008fe4:	1939      	adds	r1, r7, r4
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	f7fe fd58 	bl	8007a9c <xQueueGenericSend>
 8008fec:	0003      	movs	r3, r0
 8008fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ff0:	e014      	b.n	800901c <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8009028 <xTimerGenericCommand+0x94>)
 8008ff4:	6818      	ldr	r0, [r3, #0]
 8008ff6:	2314      	movs	r3, #20
 8008ff8:	18f9      	adds	r1, r7, r3
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f7fe fd4d 	bl	8007a9c <xQueueGenericSend>
 8009002:	0003      	movs	r3, r0
 8009004:	627b      	str	r3, [r7, #36]	@ 0x24
 8009006:	e009      	b.n	800901c <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009008:	4b07      	ldr	r3, [pc, #28]	@ (8009028 <xTimerGenericCommand+0x94>)
 800900a:	6818      	ldr	r0, [r3, #0]
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	2314      	movs	r3, #20
 8009010:	18f9      	adds	r1, r7, r3
 8009012:	2300      	movs	r3, #0
 8009014:	f7fe fe0a 	bl	8007c2c <xQueueGenericSendFromISR>
 8009018:	0003      	movs	r3, r0
 800901a:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800901c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800901e:	0018      	movs	r0, r3
 8009020:	46bd      	mov	sp, r7
 8009022:	b00b      	add	sp, #44	@ 0x2c
 8009024:	bd90      	pop	{r4, r7, pc}
 8009026:	46c0      	nop			@ (mov r8, r8)
 8009028:	20000f70 	.word	0x20000f70

0800902c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af02      	add	r7, sp, #8
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009036:	4b1f      	ldr	r3, [pc, #124]	@ (80090b4 <prvProcessExpiredTimer+0x88>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	3304      	adds	r3, #4
 8009044:	0018      	movs	r0, r3
 8009046:	f7fe fbb4 	bl	80077b2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2228      	movs	r2, #40	@ 0x28
 800904e:	5c9b      	ldrb	r3, [r3, r2]
 8009050:	001a      	movs	r2, r3
 8009052:	2304      	movs	r3, #4
 8009054:	4013      	ands	r3, r2
 8009056:	d01a      	beq.n	800908e <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	699a      	ldr	r2, [r3, #24]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	18d1      	adds	r1, r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f000 f8c7 	bl	80091f8 <prvInsertTimerInActiveList>
 800906a:	1e03      	subs	r3, r0, #0
 800906c:	d018      	beq.n	80090a0 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	2300      	movs	r3, #0
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	2300      	movs	r3, #0
 8009078:	2100      	movs	r1, #0
 800907a:	f7ff ff8b 	bl	8008f94 <xTimerGenericCommand>
 800907e:	0003      	movs	r3, r0
 8009080:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d10b      	bne.n	80090a0 <prvProcessExpiredTimer+0x74>
 8009088:	b672      	cpsid	i
 800908a:	46c0      	nop			@ (mov r8, r8)
 800908c:	e7fd      	b.n	800908a <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2228      	movs	r2, #40	@ 0x28
 8009092:	5c9b      	ldrb	r3, [r3, r2]
 8009094:	2201      	movs	r2, #1
 8009096:	4393      	bics	r3, r2
 8009098:	b2d9      	uxtb	r1, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2228      	movs	r2, #40	@ 0x28
 800909e:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6a1b      	ldr	r3, [r3, #32]
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	0010      	movs	r0, r2
 80090a8:	4798      	blx	r3
}
 80090aa:	46c0      	nop			@ (mov r8, r8)
 80090ac:	46bd      	mov	sp, r7
 80090ae:	b004      	add	sp, #16
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	46c0      	nop			@ (mov r8, r8)
 80090b4:	20000f68 	.word	0x20000f68

080090b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090c0:	2308      	movs	r3, #8
 80090c2:	18fb      	adds	r3, r7, r3
 80090c4:	0018      	movs	r0, r3
 80090c6:	f000 f855 	bl	8009174 <prvGetNextExpireTime>
 80090ca:	0003      	movs	r3, r0
 80090cc:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	0011      	movs	r1, r2
 80090d4:	0018      	movs	r0, r3
 80090d6:	f000 f805 	bl	80090e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80090da:	f000 f8cf 	bl	800927c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090de:	46c0      	nop			@ (mov r8, r8)
 80090e0:	e7ee      	b.n	80090c0 <prvTimerTask+0x8>
	...

080090e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80090ee:	f7ff faaf 	bl	8008650 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80090f2:	2308      	movs	r3, #8
 80090f4:	18fb      	adds	r3, r7, r3
 80090f6:	0018      	movs	r0, r3
 80090f8:	f000 f85e 	bl	80091b8 <prvSampleTimeNow>
 80090fc:	0003      	movs	r3, r0
 80090fe:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d12b      	bne.n	800915e <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10c      	bne.n	8009126 <prvProcessTimerOrBlockTask+0x42>
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	429a      	cmp	r2, r3
 8009112:	d808      	bhi.n	8009126 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8009114:	f7ff faa8 	bl	8008668 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	0011      	movs	r1, r2
 800911e:	0018      	movs	r0, r3
 8009120:	f7ff ff84 	bl	800902c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009124:	e01d      	b.n	8009162 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d008      	beq.n	800913e <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800912c:	4b0f      	ldr	r3, [pc, #60]	@ (800916c <prvProcessTimerOrBlockTask+0x88>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d101      	bne.n	800913a <prvProcessTimerOrBlockTask+0x56>
 8009136:	2301      	movs	r3, #1
 8009138:	e000      	b.n	800913c <prvProcessTimerOrBlockTask+0x58>
 800913a:	2300      	movs	r3, #0
 800913c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800913e:	4b0c      	ldr	r3, [pc, #48]	@ (8009170 <prvProcessTimerOrBlockTask+0x8c>)
 8009140:	6818      	ldr	r0, [r3, #0]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	683a      	ldr	r2, [r7, #0]
 800914a:	0019      	movs	r1, r3
 800914c:	f7ff f82a 	bl	80081a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009150:	f7ff fa8a 	bl	8008668 <xTaskResumeAll>
 8009154:	1e03      	subs	r3, r0, #0
 8009156:	d104      	bne.n	8009162 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8009158:	f000 fa82 	bl	8009660 <vPortYield>
}
 800915c:	e001      	b.n	8009162 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800915e:	f7ff fa83 	bl	8008668 <xTaskResumeAll>
}
 8009162:	46c0      	nop			@ (mov r8, r8)
 8009164:	46bd      	mov	sp, r7
 8009166:	b004      	add	sp, #16
 8009168:	bd80      	pop	{r7, pc}
 800916a:	46c0      	nop			@ (mov r8, r8)
 800916c:	20000f6c 	.word	0x20000f6c
 8009170:	20000f70 	.word	0x20000f70

08009174 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800917c:	4b0d      	ldr	r3, [pc, #52]	@ (80091b4 <prvGetNextExpireTime+0x40>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d101      	bne.n	800918a <prvGetNextExpireTime+0x16>
 8009186:	2201      	movs	r2, #1
 8009188:	e000      	b.n	800918c <prvGetNextExpireTime+0x18>
 800918a:	2200      	movs	r2, #0
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d105      	bne.n	80091a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009198:	4b06      	ldr	r3, [pc, #24]	@ (80091b4 <prvGetNextExpireTime+0x40>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	60fb      	str	r3, [r7, #12]
 80091a2:	e001      	b.n	80091a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80091a4:	2300      	movs	r3, #0
 80091a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80091a8:	68fb      	ldr	r3, [r7, #12]
}
 80091aa:	0018      	movs	r0, r3
 80091ac:	46bd      	mov	sp, r7
 80091ae:	b004      	add	sp, #16
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	46c0      	nop			@ (mov r8, r8)
 80091b4:	20000f68 	.word	0x20000f68

080091b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80091c0:	f7ff fade 	bl	8008780 <xTaskGetTickCount>
 80091c4:	0003      	movs	r3, r0
 80091c6:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80091c8:	4b0a      	ldr	r3, [pc, #40]	@ (80091f4 <prvSampleTimeNow+0x3c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d205      	bcs.n	80091de <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80091d2:	f000 f91d 	bl	8009410 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	e002      	b.n	80091e4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80091e4:	4b03      	ldr	r3, [pc, #12]	@ (80091f4 <prvSampleTimeNow+0x3c>)
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80091ea:	68fb      	ldr	r3, [r7, #12]
}
 80091ec:	0018      	movs	r0, r3
 80091ee:	46bd      	mov	sp, r7
 80091f0:	b004      	add	sp, #16
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	20000f78 	.word	0x20000f78

080091f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
 8009204:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009206:	2300      	movs	r3, #0
 8009208:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	429a      	cmp	r2, r3
 800921c:	d812      	bhi.n	8009244 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	1ad2      	subs	r2, r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	429a      	cmp	r2, r3
 800922a:	d302      	bcc.n	8009232 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800922c:	2301      	movs	r3, #1
 800922e:	617b      	str	r3, [r7, #20]
 8009230:	e01b      	b.n	800926a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009232:	4b10      	ldr	r3, [pc, #64]	@ (8009274 <prvInsertTimerInActiveList+0x7c>)
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	3304      	adds	r3, #4
 800923a:	0019      	movs	r1, r3
 800923c:	0010      	movs	r0, r2
 800923e:	f7fe fa82 	bl	8007746 <vListInsert>
 8009242:	e012      	b.n	800926a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	429a      	cmp	r2, r3
 800924a:	d206      	bcs.n	800925a <prvInsertTimerInActiveList+0x62>
 800924c:	68ba      	ldr	r2, [r7, #8]
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	429a      	cmp	r2, r3
 8009252:	d302      	bcc.n	800925a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009254:	2301      	movs	r3, #1
 8009256:	617b      	str	r3, [r7, #20]
 8009258:	e007      	b.n	800926a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800925a:	4b07      	ldr	r3, [pc, #28]	@ (8009278 <prvInsertTimerInActiveList+0x80>)
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3304      	adds	r3, #4
 8009262:	0019      	movs	r1, r3
 8009264:	0010      	movs	r0, r2
 8009266:	f7fe fa6e 	bl	8007746 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800926a:	697b      	ldr	r3, [r7, #20]
}
 800926c:	0018      	movs	r0, r3
 800926e:	46bd      	mov	sp, r7
 8009270:	b006      	add	sp, #24
 8009272:	bd80      	pop	{r7, pc}
 8009274:	20000f6c 	.word	0x20000f6c
 8009278:	20000f68 	.word	0x20000f68

0800927c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800927c:	b590      	push	{r4, r7, lr}
 800927e:	b08d      	sub	sp, #52	@ 0x34
 8009280:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009282:	e0b1      	b.n	80093e8 <prvProcessReceivedCommands+0x16c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009284:	2208      	movs	r2, #8
 8009286:	18bb      	adds	r3, r7, r2
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	da10      	bge.n	80092b0 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800928e:	18bb      	adds	r3, r7, r2
 8009290:	3304      	adds	r3, #4
 8009292:	627b      	str	r3, [r7, #36]	@ 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009296:	2b00      	cmp	r3, #0
 8009298:	d102      	bne.n	80092a0 <prvProcessReceivedCommands+0x24>
 800929a:	b672      	cpsid	i
 800929c:	46c0      	nop			@ (mov r8, r8)
 800929e:	e7fd      	b.n	800929c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80092a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a6:	6858      	ldr	r0, [r3, #4]
 80092a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	0019      	movs	r1, r3
 80092ae:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80092b0:	2208      	movs	r2, #8
 80092b2:	18bb      	adds	r3, r7, r2
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	da00      	bge.n	80092bc <prvProcessReceivedCommands+0x40>
 80092ba:	e095      	b.n	80093e8 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80092bc:	18bb      	adds	r3, r7, r2
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80092c2:	6a3b      	ldr	r3, [r7, #32]
 80092c4:	695b      	ldr	r3, [r3, #20]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d004      	beq.n	80092d4 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	3304      	adds	r3, #4
 80092ce:	0018      	movs	r0, r3
 80092d0:	f7fe fa6f 	bl	80077b2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092d4:	1d3b      	adds	r3, r7, #4
 80092d6:	0018      	movs	r0, r3
 80092d8:	f7ff ff6e 	bl	80091b8 <prvSampleTimeNow>
 80092dc:	0003      	movs	r3, r0
 80092de:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80092e0:	2308      	movs	r3, #8
 80092e2:	18fb      	adds	r3, r7, r3
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2b09      	cmp	r3, #9
 80092e8:	d900      	bls.n	80092ec <prvProcessReceivedCommands+0x70>
 80092ea:	e07a      	b.n	80093e2 <prvProcessReceivedCommands+0x166>
 80092ec:	009a      	lsls	r2, r3, #2
 80092ee:	4b46      	ldr	r3, [pc, #280]	@ (8009408 <prvProcessReceivedCommands+0x18c>)
 80092f0:	18d3      	adds	r3, r2, r3
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	2228      	movs	r2, #40	@ 0x28
 80092fa:	5c9b      	ldrb	r3, [r3, r2]
 80092fc:	2201      	movs	r2, #1
 80092fe:	4313      	orrs	r3, r2
 8009300:	b2d9      	uxtb	r1, r3
 8009302:	6a3b      	ldr	r3, [r7, #32]
 8009304:	2228      	movs	r2, #40	@ 0x28
 8009306:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009308:	2408      	movs	r4, #8
 800930a:	193b      	adds	r3, r7, r4
 800930c:	685a      	ldr	r2, [r3, #4]
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	18d1      	adds	r1, r2, r3
 8009314:	193b      	adds	r3, r7, r4
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	69fa      	ldr	r2, [r7, #28]
 800931a:	6a38      	ldr	r0, [r7, #32]
 800931c:	f7ff ff6c 	bl	80091f8 <prvInsertTimerInActiveList>
 8009320:	1e03      	subs	r3, r0, #0
 8009322:	d060      	beq.n	80093e6 <prvProcessReceivedCommands+0x16a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009324:	6a3b      	ldr	r3, [r7, #32]
 8009326:	6a1b      	ldr	r3, [r3, #32]
 8009328:	6a3a      	ldr	r2, [r7, #32]
 800932a:	0010      	movs	r0, r2
 800932c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	2228      	movs	r2, #40	@ 0x28
 8009332:	5c9b      	ldrb	r3, [r3, r2]
 8009334:	001a      	movs	r2, r3
 8009336:	2304      	movs	r3, #4
 8009338:	4013      	ands	r3, r2
 800933a:	d054      	beq.n	80093e6 <prvProcessReceivedCommands+0x16a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800933c:	193b      	adds	r3, r7, r4
 800933e:	685a      	ldr	r2, [r3, #4]
 8009340:	6a3b      	ldr	r3, [r7, #32]
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	18d2      	adds	r2, r2, r3
 8009346:	6a38      	ldr	r0, [r7, #32]
 8009348:	2300      	movs	r3, #0
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	2300      	movs	r3, #0
 800934e:	2100      	movs	r1, #0
 8009350:	f7ff fe20 	bl	8008f94 <xTimerGenericCommand>
 8009354:	0003      	movs	r3, r0
 8009356:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d143      	bne.n	80093e6 <prvProcessReceivedCommands+0x16a>
 800935e:	b672      	cpsid	i
 8009360:	46c0      	nop			@ (mov r8, r8)
 8009362:	e7fd      	b.n	8009360 <prvProcessReceivedCommands+0xe4>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009364:	6a3b      	ldr	r3, [r7, #32]
 8009366:	2228      	movs	r2, #40	@ 0x28
 8009368:	5c9b      	ldrb	r3, [r3, r2]
 800936a:	2201      	movs	r2, #1
 800936c:	4393      	bics	r3, r2
 800936e:	b2d9      	uxtb	r1, r3
 8009370:	6a3b      	ldr	r3, [r7, #32]
 8009372:	2228      	movs	r2, #40	@ 0x28
 8009374:	5499      	strb	r1, [r3, r2]
					break;
 8009376:	e037      	b.n	80093e8 <prvProcessReceivedCommands+0x16c>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	2228      	movs	r2, #40	@ 0x28
 800937c:	5c9b      	ldrb	r3, [r3, r2]
 800937e:	2201      	movs	r2, #1
 8009380:	4313      	orrs	r3, r2
 8009382:	b2d9      	uxtb	r1, r3
 8009384:	6a3b      	ldr	r3, [r7, #32]
 8009386:	2228      	movs	r2, #40	@ 0x28
 8009388:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800938a:	2308      	movs	r3, #8
 800938c:	18fb      	adds	r3, r7, r3
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	6a3b      	ldr	r3, [r7, #32]
 8009392:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009394:	6a3b      	ldr	r3, [r7, #32]
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d102      	bne.n	80093a2 <prvProcessReceivedCommands+0x126>
 800939c:	b672      	cpsid	i
 800939e:	46c0      	nop			@ (mov r8, r8)
 80093a0:	e7fd      	b.n	800939e <prvProcessReceivedCommands+0x122>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80093a2:	6a3b      	ldr	r3, [r7, #32]
 80093a4:	699a      	ldr	r2, [r3, #24]
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	18d1      	adds	r1, r2, r3
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	69fa      	ldr	r2, [r7, #28]
 80093ae:	6a38      	ldr	r0, [r7, #32]
 80093b0:	f7ff ff22 	bl	80091f8 <prvInsertTimerInActiveList>
					break;
 80093b4:	e018      	b.n	80093e8 <prvProcessReceivedCommands+0x16c>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	2228      	movs	r2, #40	@ 0x28
 80093ba:	5c9b      	ldrb	r3, [r3, r2]
 80093bc:	001a      	movs	r2, r3
 80093be:	2302      	movs	r3, #2
 80093c0:	4013      	ands	r3, r2
 80093c2:	d104      	bne.n	80093ce <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	0018      	movs	r0, r3
 80093c8:	f000 faa2 	bl	8009910 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80093cc:	e00c      	b.n	80093e8 <prvProcessReceivedCommands+0x16c>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093ce:	6a3b      	ldr	r3, [r7, #32]
 80093d0:	2228      	movs	r2, #40	@ 0x28
 80093d2:	5c9b      	ldrb	r3, [r3, r2]
 80093d4:	2201      	movs	r2, #1
 80093d6:	4393      	bics	r3, r2
 80093d8:	b2d9      	uxtb	r1, r3
 80093da:	6a3b      	ldr	r3, [r7, #32]
 80093dc:	2228      	movs	r2, #40	@ 0x28
 80093de:	5499      	strb	r1, [r3, r2]
					break;
 80093e0:	e002      	b.n	80093e8 <prvProcessReceivedCommands+0x16c>

				default	:
					/* Don't expect to get here. */
					break;
 80093e2:	46c0      	nop			@ (mov r8, r8)
 80093e4:	e000      	b.n	80093e8 <prvProcessReceivedCommands+0x16c>
					break;
 80093e6:	46c0      	nop			@ (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093e8:	4b08      	ldr	r3, [pc, #32]	@ (800940c <prvProcessReceivedCommands+0x190>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2208      	movs	r2, #8
 80093ee:	18b9      	adds	r1, r7, r2
 80093f0:	2200      	movs	r2, #0
 80093f2:	0018      	movs	r0, r3
 80093f4:	f7fe fc91 	bl	8007d1a <xQueueReceive>
 80093f8:	1e03      	subs	r3, r0, #0
 80093fa:	d000      	beq.n	80093fe <prvProcessReceivedCommands+0x182>
 80093fc:	e742      	b.n	8009284 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80093fe:	46c0      	nop			@ (mov r8, r8)
 8009400:	46c0      	nop			@ (mov r8, r8)
 8009402:	46bd      	mov	sp, r7
 8009404:	b00b      	add	sp, #44	@ 0x2c
 8009406:	bd90      	pop	{r4, r7, pc}
 8009408:	08009f20 	.word	0x08009f20
 800940c:	20000f70 	.word	0x20000f70

08009410 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b088      	sub	sp, #32
 8009414:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009416:	e042      	b.n	800949e <prvSwitchTimerLists+0x8e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009418:	4b2a      	ldr	r3, [pc, #168]	@ (80094c4 <prvSwitchTimerLists+0xb4>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009422:	4b28      	ldr	r3, [pc, #160]	@ (80094c4 <prvSwitchTimerLists+0xb4>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	3304      	adds	r3, #4
 8009430:	0018      	movs	r0, r3
 8009432:	f7fe f9be 	bl	80077b2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6a1b      	ldr	r3, [r3, #32]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	0010      	movs	r0, r2
 800943e:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2228      	movs	r2, #40	@ 0x28
 8009444:	5c9b      	ldrb	r3, [r3, r2]
 8009446:	001a      	movs	r2, r3
 8009448:	2304      	movs	r3, #4
 800944a:	4013      	ands	r3, r2
 800944c:	d027      	beq.n	800949e <prvSwitchTimerLists+0x8e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	699b      	ldr	r3, [r3, #24]
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	18d3      	adds	r3, r2, r3
 8009456:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009458:	68ba      	ldr	r2, [r7, #8]
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	429a      	cmp	r2, r3
 800945e:	d90e      	bls.n	800947e <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800946c:	4b15      	ldr	r3, [pc, #84]	@ (80094c4 <prvSwitchTimerLists+0xb4>)
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	3304      	adds	r3, #4
 8009474:	0019      	movs	r1, r3
 8009476:	0010      	movs	r0, r2
 8009478:	f7fe f965 	bl	8007746 <vListInsert>
 800947c:	e00f      	b.n	800949e <prvSwitchTimerLists+0x8e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800947e:	693a      	ldr	r2, [r7, #16]
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	2300      	movs	r3, #0
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	2300      	movs	r3, #0
 8009488:	2100      	movs	r1, #0
 800948a:	f7ff fd83 	bl	8008f94 <xTimerGenericCommand>
 800948e:	0003      	movs	r3, r0
 8009490:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d102      	bne.n	800949e <prvSwitchTimerLists+0x8e>
 8009498:	b672      	cpsid	i
 800949a:	46c0      	nop			@ (mov r8, r8)
 800949c:	e7fd      	b.n	800949a <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800949e:	4b09      	ldr	r3, [pc, #36]	@ (80094c4 <prvSwitchTimerLists+0xb4>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d1b7      	bne.n	8009418 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80094a8:	4b06      	ldr	r3, [pc, #24]	@ (80094c4 <prvSwitchTimerLists+0xb4>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80094ae:	4b06      	ldr	r3, [pc, #24]	@ (80094c8 <prvSwitchTimerLists+0xb8>)
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	4b04      	ldr	r3, [pc, #16]	@ (80094c4 <prvSwitchTimerLists+0xb4>)
 80094b4:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80094b6:	4b04      	ldr	r3, [pc, #16]	@ (80094c8 <prvSwitchTimerLists+0xb8>)
 80094b8:	697a      	ldr	r2, [r7, #20]
 80094ba:	601a      	str	r2, [r3, #0]
}
 80094bc:	46c0      	nop			@ (mov r8, r8)
 80094be:	46bd      	mov	sp, r7
 80094c0:	b006      	add	sp, #24
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	20000f68 	.word	0x20000f68
 80094c8:	20000f6c 	.word	0x20000f6c

080094cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80094d2:	f000 f8d5 	bl	8009680 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80094d6:	4b16      	ldr	r3, [pc, #88]	@ (8009530 <prvCheckForValidListAndQueue+0x64>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d123      	bne.n	8009526 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 80094de:	4b15      	ldr	r3, [pc, #84]	@ (8009534 <prvCheckForValidListAndQueue+0x68>)
 80094e0:	0018      	movs	r0, r3
 80094e2:	f7fe f8e5 	bl	80076b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80094e6:	4b14      	ldr	r3, [pc, #80]	@ (8009538 <prvCheckForValidListAndQueue+0x6c>)
 80094e8:	0018      	movs	r0, r3
 80094ea:	f7fe f8e1 	bl	80076b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80094ee:	4b13      	ldr	r3, [pc, #76]	@ (800953c <prvCheckForValidListAndQueue+0x70>)
 80094f0:	4a10      	ldr	r2, [pc, #64]	@ (8009534 <prvCheckForValidListAndQueue+0x68>)
 80094f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80094f4:	4b12      	ldr	r3, [pc, #72]	@ (8009540 <prvCheckForValidListAndQueue+0x74>)
 80094f6:	4a10      	ldr	r2, [pc, #64]	@ (8009538 <prvCheckForValidListAndQueue+0x6c>)
 80094f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80094fa:	4b12      	ldr	r3, [pc, #72]	@ (8009544 <prvCheckForValidListAndQueue+0x78>)
 80094fc:	4a12      	ldr	r2, [pc, #72]	@ (8009548 <prvCheckForValidListAndQueue+0x7c>)
 80094fe:	2100      	movs	r1, #0
 8009500:	9100      	str	r1, [sp, #0]
 8009502:	2110      	movs	r1, #16
 8009504:	200a      	movs	r0, #10
 8009506:	f7fe f9d1 	bl	80078ac <xQueueGenericCreateStatic>
 800950a:	0002      	movs	r2, r0
 800950c:	4b08      	ldr	r3, [pc, #32]	@ (8009530 <prvCheckForValidListAndQueue+0x64>)
 800950e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009510:	4b07      	ldr	r3, [pc, #28]	@ (8009530 <prvCheckForValidListAndQueue+0x64>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d006      	beq.n	8009526 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009518:	4b05      	ldr	r3, [pc, #20]	@ (8009530 <prvCheckForValidListAndQueue+0x64>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a0b      	ldr	r2, [pc, #44]	@ (800954c <prvCheckForValidListAndQueue+0x80>)
 800951e:	0011      	movs	r1, r2
 8009520:	0018      	movs	r0, r3
 8009522:	f7fe fded 	bl	8008100 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009526:	f000 f8bd 	bl	80096a4 <vPortExitCritical>
}
 800952a:	46c0      	nop			@ (mov r8, r8)
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	20000f70 	.word	0x20000f70
 8009534:	20000f40 	.word	0x20000f40
 8009538:	20000f54 	.word	0x20000f54
 800953c:	20000f68 	.word	0x20000f68
 8009540:	20000f6c 	.word	0x20000f6c
 8009544:	2000101c 	.word	0x2000101c
 8009548:	20000f7c 	.word	0x20000f7c
 800954c:	08009d80 	.word	0x08009d80

08009550 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	3b04      	subs	r3, #4
 8009560:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2280      	movs	r2, #128	@ 0x80
 8009566:	0452      	lsls	r2, r2, #17
 8009568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3b04      	subs	r3, #4
 800956e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	3b04      	subs	r3, #4
 800957a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800957c:	4a08      	ldr	r2, [pc, #32]	@ (80095a0 <pxPortInitialiseStack+0x50>)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3b14      	subs	r3, #20
 8009586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	3b20      	subs	r3, #32
 8009592:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009594:	68fb      	ldr	r3, [r7, #12]
}
 8009596:	0018      	movs	r0, r3
 8009598:	46bd      	mov	sp, r7
 800959a:	b004      	add	sp, #16
 800959c:	bd80      	pop	{r7, pc}
 800959e:	46c0      	nop			@ (mov r8, r8)
 80095a0:	080095a5 	.word	0x080095a5

080095a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80095aa:	2300      	movs	r3, #0
 80095ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80095ae:	4b08      	ldr	r3, [pc, #32]	@ (80095d0 <prvTaskExitError+0x2c>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	3301      	adds	r3, #1
 80095b4:	d002      	beq.n	80095bc <prvTaskExitError+0x18>
 80095b6:	b672      	cpsid	i
 80095b8:	46c0      	nop			@ (mov r8, r8)
 80095ba:	e7fd      	b.n	80095b8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80095bc:	b672      	cpsid	i
	while( ulDummy == 0 )
 80095be:	46c0      	nop			@ (mov r8, r8)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d0fc      	beq.n	80095c0 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80095c6:	46c0      	nop			@ (mov r8, r8)
 80095c8:	46c0      	nop			@ (mov r8, r8)
 80095ca:	46bd      	mov	sp, r7
 80095cc:	b002      	add	sp, #8
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	2000000c 	.word	0x2000000c

080095d4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80095d8:	46c0      	nop			@ (mov r8, r8)
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
	...

080095e0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80095e0:	4a0b      	ldr	r2, [pc, #44]	@ (8009610 <pxCurrentTCBConst2>)
 80095e2:	6813      	ldr	r3, [r2, #0]
 80095e4:	6818      	ldr	r0, [r3, #0]
 80095e6:	3020      	adds	r0, #32
 80095e8:	f380 8809 	msr	PSP, r0
 80095ec:	2002      	movs	r0, #2
 80095ee:	f380 8814 	msr	CONTROL, r0
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80095f8:	46ae      	mov	lr, r5
 80095fa:	bc08      	pop	{r3}
 80095fc:	bc04      	pop	{r2}
 80095fe:	b662      	cpsie	i
 8009600:	4718      	bx	r3
 8009602:	46c0      	nop			@ (mov r8, r8)
 8009604:	46c0      	nop			@ (mov r8, r8)
 8009606:	46c0      	nop			@ (mov r8, r8)
 8009608:	46c0      	nop			@ (mov r8, r8)
 800960a:	46c0      	nop			@ (mov r8, r8)
 800960c:	46c0      	nop			@ (mov r8, r8)
 800960e:	46c0      	nop			@ (mov r8, r8)

08009610 <pxCurrentTCBConst2>:
 8009610:	20000a40 	.word	0x20000a40
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8009614:	46c0      	nop			@ (mov r8, r8)
 8009616:	46c0      	nop			@ (mov r8, r8)

08009618 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800961c:	4b0e      	ldr	r3, [pc, #56]	@ (8009658 <xPortStartScheduler+0x40>)
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	4b0d      	ldr	r3, [pc, #52]	@ (8009658 <xPortStartScheduler+0x40>)
 8009622:	21ff      	movs	r1, #255	@ 0xff
 8009624:	0409      	lsls	r1, r1, #16
 8009626:	430a      	orrs	r2, r1
 8009628:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800962a:	4b0b      	ldr	r3, [pc, #44]	@ (8009658 <xPortStartScheduler+0x40>)
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	4b0a      	ldr	r3, [pc, #40]	@ (8009658 <xPortStartScheduler+0x40>)
 8009630:	21ff      	movs	r1, #255	@ 0xff
 8009632:	0609      	lsls	r1, r1, #24
 8009634:	430a      	orrs	r2, r1
 8009636:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009638:	f000 f898 	bl	800976c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800963c:	4b07      	ldr	r3, [pc, #28]	@ (800965c <xPortStartScheduler+0x44>)
 800963e:	2200      	movs	r2, #0
 8009640:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8009642:	f7ff ffcd 	bl	80095e0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009646:	f7ff f959 	bl	80088fc <vTaskSwitchContext>
	prvTaskExitError();
 800964a:	f7ff ffab 	bl	80095a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800964e:	2300      	movs	r3, #0
}
 8009650:	0018      	movs	r0, r3
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	46c0      	nop			@ (mov r8, r8)
 8009658:	e000ed20 	.word	0xe000ed20
 800965c:	2000000c 	.word	0x2000000c

08009660 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009664:	4b05      	ldr	r3, [pc, #20]	@ (800967c <vPortYield+0x1c>)
 8009666:	2280      	movs	r2, #128	@ 0x80
 8009668:	0552      	lsls	r2, r2, #21
 800966a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800966c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009670:	f3bf 8f6f 	isb	sy
}
 8009674:	46c0      	nop			@ (mov r8, r8)
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	46c0      	nop			@ (mov r8, r8)
 800967c:	e000ed04 	.word	0xe000ed04

08009680 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8009684:	b672      	cpsid	i
	uxCriticalNesting++;
 8009686:	4b06      	ldr	r3, [pc, #24]	@ (80096a0 <vPortEnterCritical+0x20>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	1c5a      	adds	r2, r3, #1
 800968c:	4b04      	ldr	r3, [pc, #16]	@ (80096a0 <vPortEnterCritical+0x20>)
 800968e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8009690:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009694:	f3bf 8f6f 	isb	sy
}
 8009698:	46c0      	nop			@ (mov r8, r8)
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	46c0      	nop			@ (mov r8, r8)
 80096a0:	2000000c 	.word	0x2000000c

080096a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80096a8:	4b09      	ldr	r3, [pc, #36]	@ (80096d0 <vPortExitCritical+0x2c>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d102      	bne.n	80096b6 <vPortExitCritical+0x12>
 80096b0:	b672      	cpsid	i
 80096b2:	46c0      	nop			@ (mov r8, r8)
 80096b4:	e7fd      	b.n	80096b2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80096b6:	4b06      	ldr	r3, [pc, #24]	@ (80096d0 <vPortExitCritical+0x2c>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	1e5a      	subs	r2, r3, #1
 80096bc:	4b04      	ldr	r3, [pc, #16]	@ (80096d0 <vPortExitCritical+0x2c>)
 80096be:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80096c0:	4b03      	ldr	r3, [pc, #12]	@ (80096d0 <vPortExitCritical+0x2c>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d100      	bne.n	80096ca <vPortExitCritical+0x26>
	{
		portENABLE_INTERRUPTS();
 80096c8:	b662      	cpsie	i
	}
}
 80096ca:	46c0      	nop			@ (mov r8, r8)
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	2000000c 	.word	0x2000000c

080096d4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80096d4:	f3ef 8010 	mrs	r0, PRIMASK
 80096d8:	b672      	cpsid	i
 80096da:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80096dc:	46c0      	nop			@ (mov r8, r8)
 80096de:	0018      	movs	r0, r3

080096e0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80096e0:	f380 8810 	msr	PRIMASK, r0
 80096e4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80096e6:	46c0      	nop			@ (mov r8, r8)
	...

080096f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80096f0:	f3ef 8009 	mrs	r0, PSP
 80096f4:	4b0e      	ldr	r3, [pc, #56]	@ (8009730 <pxCurrentTCBConst>)
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	3820      	subs	r0, #32
 80096fa:	6010      	str	r0, [r2, #0]
 80096fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80096fe:	4644      	mov	r4, r8
 8009700:	464d      	mov	r5, r9
 8009702:	4656      	mov	r6, sl
 8009704:	465f      	mov	r7, fp
 8009706:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8009708:	b508      	push	{r3, lr}
 800970a:	b672      	cpsid	i
 800970c:	f7ff f8f6 	bl	80088fc <vTaskSwitchContext>
 8009710:	b662      	cpsie	i
 8009712:	bc0c      	pop	{r2, r3}
 8009714:	6811      	ldr	r1, [r2, #0]
 8009716:	6808      	ldr	r0, [r1, #0]
 8009718:	3010      	adds	r0, #16
 800971a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800971c:	46a0      	mov	r8, r4
 800971e:	46a9      	mov	r9, r5
 8009720:	46b2      	mov	sl, r6
 8009722:	46bb      	mov	fp, r7
 8009724:	f380 8809 	msr	PSP, r0
 8009728:	3820      	subs	r0, #32
 800972a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800972c:	4718      	bx	r3
 800972e:	46c0      	nop			@ (mov r8, r8)

08009730 <pxCurrentTCBConst>:
 8009730:	20000a40 	.word	0x20000a40
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8009734:	46c0      	nop			@ (mov r8, r8)
 8009736:	46c0      	nop			@ (mov r8, r8)

08009738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800973e:	f7ff ffc9 	bl	80096d4 <ulSetInterruptMaskFromISR>
 8009742:	0003      	movs	r3, r0
 8009744:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009746:	f7ff f829 	bl	800879c <xTaskIncrementTick>
 800974a:	1e03      	subs	r3, r0, #0
 800974c:	d003      	beq.n	8009756 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800974e:	4b06      	ldr	r3, [pc, #24]	@ (8009768 <xPortSysTickHandler+0x30>)
 8009750:	2280      	movs	r2, #128	@ 0x80
 8009752:	0552      	lsls	r2, r2, #21
 8009754:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	0018      	movs	r0, r3
 800975a:	f7ff ffc1 	bl	80096e0 <vClearInterruptMaskFromISR>
}
 800975e:	46c0      	nop			@ (mov r8, r8)
 8009760:	46bd      	mov	sp, r7
 8009762:	b002      	add	sp, #8
 8009764:	bd80      	pop	{r7, pc}
 8009766:	46c0      	nop			@ (mov r8, r8)
 8009768:	e000ed04 	.word	0xe000ed04

0800976c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009770:	4b0b      	ldr	r3, [pc, #44]	@ (80097a0 <vPortSetupTimerInterrupt+0x34>)
 8009772:	2200      	movs	r2, #0
 8009774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009776:	4b0b      	ldr	r3, [pc, #44]	@ (80097a4 <vPortSetupTimerInterrupt+0x38>)
 8009778:	2200      	movs	r2, #0
 800977a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800977c:	4b0a      	ldr	r3, [pc, #40]	@ (80097a8 <vPortSetupTimerInterrupt+0x3c>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	22fa      	movs	r2, #250	@ 0xfa
 8009782:	0091      	lsls	r1, r2, #2
 8009784:	0018      	movs	r0, r3
 8009786:	f7f6 fcbf 	bl	8000108 <__udivsi3>
 800978a:	0003      	movs	r3, r0
 800978c:	001a      	movs	r2, r3
 800978e:	4b07      	ldr	r3, [pc, #28]	@ (80097ac <vPortSetupTimerInterrupt+0x40>)
 8009790:	3a01      	subs	r2, #1
 8009792:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8009794:	4b02      	ldr	r3, [pc, #8]	@ (80097a0 <vPortSetupTimerInterrupt+0x34>)
 8009796:	2207      	movs	r2, #7
 8009798:	601a      	str	r2, [r3, #0]
}
 800979a:	46c0      	nop			@ (mov r8, r8)
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	e000e010 	.word	0xe000e010
 80097a4:	e000e018 	.word	0xe000e018
 80097a8:	20000000 	.word	0x20000000
 80097ac:	e000e014 	.word	0xe000e014

080097b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80097b8:	2300      	movs	r3, #0
 80097ba:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80097bc:	f7fe ff48 	bl	8008650 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80097c0:	4b4d      	ldr	r3, [pc, #308]	@ (80098f8 <pvPortMalloc+0x148>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d101      	bne.n	80097cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80097c8:	f000 f8f2 	bl	80099b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80097cc:	4b4b      	ldr	r3, [pc, #300]	@ (80098fc <pvPortMalloc+0x14c>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	4013      	ands	r3, r2
 80097d4:	d000      	beq.n	80097d8 <pvPortMalloc+0x28>
 80097d6:	e080      	b.n	80098da <pvPortMalloc+0x12a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d013      	beq.n	8009806 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 80097de:	2208      	movs	r2, #8
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	189b      	adds	r3, r3, r2
 80097e4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2207      	movs	r2, #7
 80097ea:	4013      	ands	r3, r2
 80097ec:	d00b      	beq.n	8009806 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2207      	movs	r2, #7
 80097f2:	4393      	bics	r3, r2
 80097f4:	3308      	adds	r3, #8
 80097f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2207      	movs	r2, #7
 80097fc:	4013      	ands	r3, r2
 80097fe:	d002      	beq.n	8009806 <pvPortMalloc+0x56>
 8009800:	b672      	cpsid	i
 8009802:	46c0      	nop			@ (mov r8, r8)
 8009804:	e7fd      	b.n	8009802 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d066      	beq.n	80098da <pvPortMalloc+0x12a>
 800980c:	4b3c      	ldr	r3, [pc, #240]	@ (8009900 <pvPortMalloc+0x150>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	429a      	cmp	r2, r3
 8009814:	d861      	bhi.n	80098da <pvPortMalloc+0x12a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009816:	4b3b      	ldr	r3, [pc, #236]	@ (8009904 <pvPortMalloc+0x154>)
 8009818:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800981a:	4b3a      	ldr	r3, [pc, #232]	@ (8009904 <pvPortMalloc+0x154>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009820:	e004      	b.n	800982c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	429a      	cmp	r2, r3
 8009834:	d903      	bls.n	800983e <pvPortMalloc+0x8e>
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1f1      	bne.n	8009822 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800983e:	4b2e      	ldr	r3, [pc, #184]	@ (80098f8 <pvPortMalloc+0x148>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	429a      	cmp	r2, r3
 8009846:	d048      	beq.n	80098da <pvPortMalloc+0x12a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2208      	movs	r2, #8
 800984e:	189b      	adds	r3, r3, r2
 8009850:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	1ad2      	subs	r2, r2, r3
 8009862:	2308      	movs	r3, #8
 8009864:	005b      	lsls	r3, r3, #1
 8009866:	429a      	cmp	r2, r3
 8009868:	d917      	bls.n	800989a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	18d3      	adds	r3, r2, r3
 8009870:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	2207      	movs	r2, #7
 8009876:	4013      	ands	r3, r2
 8009878:	d002      	beq.n	8009880 <pvPortMalloc+0xd0>
 800987a:	b672      	cpsid	i
 800987c:	46c0      	nop			@ (mov r8, r8)
 800987e:	e7fd      	b.n	800987c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	685a      	ldr	r2, [r3, #4]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	1ad2      	subs	r2, r2, r3
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	0018      	movs	r0, r3
 8009896:	f000 f8eb 	bl	8009a70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800989a:	4b19      	ldr	r3, [pc, #100]	@ (8009900 <pvPortMalloc+0x150>)
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	1ad2      	subs	r2, r2, r3
 80098a4:	4b16      	ldr	r3, [pc, #88]	@ (8009900 <pvPortMalloc+0x150>)
 80098a6:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098a8:	4b15      	ldr	r3, [pc, #84]	@ (8009900 <pvPortMalloc+0x150>)
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	4b16      	ldr	r3, [pc, #88]	@ (8009908 <pvPortMalloc+0x158>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d203      	bcs.n	80098bc <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098b4:	4b12      	ldr	r3, [pc, #72]	@ (8009900 <pvPortMalloc+0x150>)
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	4b13      	ldr	r3, [pc, #76]	@ (8009908 <pvPortMalloc+0x158>)
 80098ba:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	685a      	ldr	r2, [r3, #4]
 80098c0:	4b0e      	ldr	r3, [pc, #56]	@ (80098fc <pvPortMalloc+0x14c>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	431a      	orrs	r2, r3
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	2200      	movs	r2, #0
 80098ce:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80098d0:	4b0e      	ldr	r3, [pc, #56]	@ (800990c <pvPortMalloc+0x15c>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	1c5a      	adds	r2, r3, #1
 80098d6:	4b0d      	ldr	r3, [pc, #52]	@ (800990c <pvPortMalloc+0x15c>)
 80098d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80098da:	f7fe fec5 	bl	8008668 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2207      	movs	r2, #7
 80098e2:	4013      	ands	r3, r2
 80098e4:	d002      	beq.n	80098ec <pvPortMalloc+0x13c>
 80098e6:	b672      	cpsid	i
 80098e8:	46c0      	nop			@ (mov r8, r8)
 80098ea:	e7fd      	b.n	80098e8 <pvPortMalloc+0x138>
	return pvReturn;
 80098ec:	68fb      	ldr	r3, [r7, #12]
}
 80098ee:	0018      	movs	r0, r3
 80098f0:	46bd      	mov	sp, r7
 80098f2:	b006      	add	sp, #24
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	46c0      	nop			@ (mov r8, r8)
 80098f8:	20001c74 	.word	0x20001c74
 80098fc:	20001c88 	.word	0x20001c88
 8009900:	20001c78 	.word	0x20001c78
 8009904:	20001c6c 	.word	0x20001c6c
 8009908:	20001c7c 	.word	0x20001c7c
 800990c:	20001c80 	.word	0x20001c80

08009910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d03c      	beq.n	800999c <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009922:	2308      	movs	r3, #8
 8009924:	425b      	negs	r3, r3
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	18d3      	adds	r3, r2, r3
 800992a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	685a      	ldr	r2, [r3, #4]
 8009934:	4b1b      	ldr	r3, [pc, #108]	@ (80099a4 <vPortFree+0x94>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4013      	ands	r3, r2
 800993a:	d102      	bne.n	8009942 <vPortFree+0x32>
 800993c:	b672      	cpsid	i
 800993e:	46c0      	nop			@ (mov r8, r8)
 8009940:	e7fd      	b.n	800993e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d002      	beq.n	8009950 <vPortFree+0x40>
 800994a:	b672      	cpsid	i
 800994c:	46c0      	nop			@ (mov r8, r8)
 800994e:	e7fd      	b.n	800994c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	4b13      	ldr	r3, [pc, #76]	@ (80099a4 <vPortFree+0x94>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4013      	ands	r3, r2
 800995a:	d01f      	beq.n	800999c <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d11b      	bne.n	800999c <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	685a      	ldr	r2, [r3, #4]
 8009968:	4b0e      	ldr	r3, [pc, #56]	@ (80099a4 <vPortFree+0x94>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	43db      	mvns	r3, r3
 800996e:	401a      	ands	r2, r3
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009974:	f7fe fe6c 	bl	8008650 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	685a      	ldr	r2, [r3, #4]
 800997c:	4b0a      	ldr	r3, [pc, #40]	@ (80099a8 <vPortFree+0x98>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	18d2      	adds	r2, r2, r3
 8009982:	4b09      	ldr	r3, [pc, #36]	@ (80099a8 <vPortFree+0x98>)
 8009984:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	0018      	movs	r0, r3
 800998a:	f000 f871 	bl	8009a70 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800998e:	4b07      	ldr	r3, [pc, #28]	@ (80099ac <vPortFree+0x9c>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	1c5a      	adds	r2, r3, #1
 8009994:	4b05      	ldr	r3, [pc, #20]	@ (80099ac <vPortFree+0x9c>)
 8009996:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8009998:	f7fe fe66 	bl	8008668 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800999c:	46c0      	nop			@ (mov r8, r8)
 800999e:	46bd      	mov	sp, r7
 80099a0:	b004      	add	sp, #16
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	20001c88 	.word	0x20001c88
 80099a8:	20001c78 	.word	0x20001c78
 80099ac:	20001c84 	.word	0x20001c84

080099b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099b6:	23c0      	movs	r3, #192	@ 0xc0
 80099b8:	011b      	lsls	r3, r3, #4
 80099ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80099bc:	4b26      	ldr	r3, [pc, #152]	@ (8009a58 <prvHeapInit+0xa8>)
 80099be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2207      	movs	r2, #7
 80099c4:	4013      	ands	r3, r2
 80099c6:	d00c      	beq.n	80099e2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	3307      	adds	r3, #7
 80099cc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2207      	movs	r2, #7
 80099d2:	4393      	bics	r3, r2
 80099d4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	1ad2      	subs	r2, r2, r3
 80099dc:	4b1e      	ldr	r3, [pc, #120]	@ (8009a58 <prvHeapInit+0xa8>)
 80099de:	18d3      	adds	r3, r2, r3
 80099e0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80099e6:	4b1d      	ldr	r3, [pc, #116]	@ (8009a5c <prvHeapInit+0xac>)
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80099ec:	4b1b      	ldr	r3, [pc, #108]	@ (8009a5c <prvHeapInit+0xac>)
 80099ee:	2200      	movs	r2, #0
 80099f0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	18d3      	adds	r3, r2, r3
 80099f8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099fa:	2208      	movs	r2, #8
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	1a9b      	subs	r3, r3, r2
 8009a00:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2207      	movs	r2, #7
 8009a06:	4393      	bics	r3, r2
 8009a08:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	4b14      	ldr	r3, [pc, #80]	@ (8009a60 <prvHeapInit+0xb0>)
 8009a0e:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8009a10:	4b13      	ldr	r3, [pc, #76]	@ (8009a60 <prvHeapInit+0xb0>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2200      	movs	r2, #0
 8009a16:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a18:	4b11      	ldr	r3, [pc, #68]	@ (8009a60 <prvHeapInit+0xb0>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	1ad2      	subs	r2, r2, r3
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8009a60 <prvHeapInit+0xb0>)
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	685a      	ldr	r2, [r3, #4]
 8009a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8009a64 <prvHeapInit+0xb4>)
 8009a3c:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	685a      	ldr	r2, [r3, #4]
 8009a42:	4b09      	ldr	r3, [pc, #36]	@ (8009a68 <prvHeapInit+0xb8>)
 8009a44:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a46:	4b09      	ldr	r3, [pc, #36]	@ (8009a6c <prvHeapInit+0xbc>)
 8009a48:	2280      	movs	r2, #128	@ 0x80
 8009a4a:	0612      	lsls	r2, r2, #24
 8009a4c:	601a      	str	r2, [r3, #0]
}
 8009a4e:	46c0      	nop			@ (mov r8, r8)
 8009a50:	46bd      	mov	sp, r7
 8009a52:	b004      	add	sp, #16
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	46c0      	nop			@ (mov r8, r8)
 8009a58:	2000106c 	.word	0x2000106c
 8009a5c:	20001c6c 	.word	0x20001c6c
 8009a60:	20001c74 	.word	0x20001c74
 8009a64:	20001c7c 	.word	0x20001c7c
 8009a68:	20001c78 	.word	0x20001c78
 8009a6c:	20001c88 	.word	0x20001c88

08009a70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a78:	4b27      	ldr	r3, [pc, #156]	@ (8009b18 <prvInsertBlockIntoFreeList+0xa8>)
 8009a7a:	60fb      	str	r3, [r7, #12]
 8009a7c:	e002      	b.n	8009a84 <prvInsertBlockIntoFreeList+0x14>
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	60fb      	str	r3, [r7, #12]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d8f7      	bhi.n	8009a7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	18d3      	adds	r3, r2, r3
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d108      	bne.n	8009ab2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	685a      	ldr	r2, [r3, #4]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	18d2      	adds	r2, r2, r3
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	18d2      	adds	r2, r2, r3
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d118      	bne.n	8009af8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	4b14      	ldr	r3, [pc, #80]	@ (8009b1c <prvInsertBlockIntoFreeList+0xac>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d00d      	beq.n	8009aee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	18d2      	adds	r2, r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	601a      	str	r2, [r3, #0]
 8009aec:	e008      	b.n	8009b00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009aee:	4b0b      	ldr	r3, [pc, #44]	@ (8009b1c <prvInsertBlockIntoFreeList+0xac>)
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	601a      	str	r2, [r3, #0]
 8009af6:	e003      	b.n	8009b00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d002      	beq.n	8009b0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b0e:	46c0      	nop			@ (mov r8, r8)
 8009b10:	46bd      	mov	sp, r7
 8009b12:	b004      	add	sp, #16
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	46c0      	nop			@ (mov r8, r8)
 8009b18:	20001c6c 	.word	0x20001c6c
 8009b1c:	20001c74 	.word	0x20001c74

08009b20 <memset>:
 8009b20:	0003      	movs	r3, r0
 8009b22:	1882      	adds	r2, r0, r2
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d100      	bne.n	8009b2a <memset+0xa>
 8009b28:	4770      	bx	lr
 8009b2a:	7019      	strb	r1, [r3, #0]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	e7f9      	b.n	8009b24 <memset+0x4>

08009b30 <_reclaim_reent>:
 8009b30:	4b33      	ldr	r3, [pc, #204]	@ (8009c00 <_reclaim_reent+0xd0>)
 8009b32:	b570      	push	{r4, r5, r6, lr}
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	0004      	movs	r4, r0
 8009b38:	4283      	cmp	r3, r0
 8009b3a:	d05f      	beq.n	8009bfc <_reclaim_reent+0xcc>
 8009b3c:	69c3      	ldr	r3, [r0, #28]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d027      	beq.n	8009b92 <_reclaim_reent+0x62>
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00d      	beq.n	8009b64 <_reclaim_reent+0x34>
 8009b48:	2500      	movs	r5, #0
 8009b4a:	69e3      	ldr	r3, [r4, #28]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	5959      	ldr	r1, [r3, r5]
 8009b50:	2900      	cmp	r1, #0
 8009b52:	d118      	bne.n	8009b86 <_reclaim_reent+0x56>
 8009b54:	3504      	adds	r5, #4
 8009b56:	2d80      	cmp	r5, #128	@ 0x80
 8009b58:	d1f7      	bne.n	8009b4a <_reclaim_reent+0x1a>
 8009b5a:	69e3      	ldr	r3, [r4, #28]
 8009b5c:	0020      	movs	r0, r4
 8009b5e:	68d9      	ldr	r1, [r3, #12]
 8009b60:	f000 f880 	bl	8009c64 <_free_r>
 8009b64:	69e3      	ldr	r3, [r4, #28]
 8009b66:	6819      	ldr	r1, [r3, #0]
 8009b68:	2900      	cmp	r1, #0
 8009b6a:	d002      	beq.n	8009b72 <_reclaim_reent+0x42>
 8009b6c:	0020      	movs	r0, r4
 8009b6e:	f000 f879 	bl	8009c64 <_free_r>
 8009b72:	69e3      	ldr	r3, [r4, #28]
 8009b74:	689d      	ldr	r5, [r3, #8]
 8009b76:	2d00      	cmp	r5, #0
 8009b78:	d00b      	beq.n	8009b92 <_reclaim_reent+0x62>
 8009b7a:	0029      	movs	r1, r5
 8009b7c:	0020      	movs	r0, r4
 8009b7e:	682d      	ldr	r5, [r5, #0]
 8009b80:	f000 f870 	bl	8009c64 <_free_r>
 8009b84:	e7f7      	b.n	8009b76 <_reclaim_reent+0x46>
 8009b86:	680e      	ldr	r6, [r1, #0]
 8009b88:	0020      	movs	r0, r4
 8009b8a:	f000 f86b 	bl	8009c64 <_free_r>
 8009b8e:	0031      	movs	r1, r6
 8009b90:	e7de      	b.n	8009b50 <_reclaim_reent+0x20>
 8009b92:	6961      	ldr	r1, [r4, #20]
 8009b94:	2900      	cmp	r1, #0
 8009b96:	d002      	beq.n	8009b9e <_reclaim_reent+0x6e>
 8009b98:	0020      	movs	r0, r4
 8009b9a:	f000 f863 	bl	8009c64 <_free_r>
 8009b9e:	69e1      	ldr	r1, [r4, #28]
 8009ba0:	2900      	cmp	r1, #0
 8009ba2:	d002      	beq.n	8009baa <_reclaim_reent+0x7a>
 8009ba4:	0020      	movs	r0, r4
 8009ba6:	f000 f85d 	bl	8009c64 <_free_r>
 8009baa:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009bac:	2900      	cmp	r1, #0
 8009bae:	d002      	beq.n	8009bb6 <_reclaim_reent+0x86>
 8009bb0:	0020      	movs	r0, r4
 8009bb2:	f000 f857 	bl	8009c64 <_free_r>
 8009bb6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bb8:	2900      	cmp	r1, #0
 8009bba:	d002      	beq.n	8009bc2 <_reclaim_reent+0x92>
 8009bbc:	0020      	movs	r0, r4
 8009bbe:	f000 f851 	bl	8009c64 <_free_r>
 8009bc2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009bc4:	2900      	cmp	r1, #0
 8009bc6:	d002      	beq.n	8009bce <_reclaim_reent+0x9e>
 8009bc8:	0020      	movs	r0, r4
 8009bca:	f000 f84b 	bl	8009c64 <_free_r>
 8009bce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009bd0:	2900      	cmp	r1, #0
 8009bd2:	d002      	beq.n	8009bda <_reclaim_reent+0xaa>
 8009bd4:	0020      	movs	r0, r4
 8009bd6:	f000 f845 	bl	8009c64 <_free_r>
 8009bda:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009bdc:	2900      	cmp	r1, #0
 8009bde:	d002      	beq.n	8009be6 <_reclaim_reent+0xb6>
 8009be0:	0020      	movs	r0, r4
 8009be2:	f000 f83f 	bl	8009c64 <_free_r>
 8009be6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009be8:	2900      	cmp	r1, #0
 8009bea:	d002      	beq.n	8009bf2 <_reclaim_reent+0xc2>
 8009bec:	0020      	movs	r0, r4
 8009bee:	f000 f839 	bl	8009c64 <_free_r>
 8009bf2:	6a23      	ldr	r3, [r4, #32]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <_reclaim_reent+0xcc>
 8009bf8:	0020      	movs	r0, r4
 8009bfa:	4798      	blx	r3
 8009bfc:	bd70      	pop	{r4, r5, r6, pc}
 8009bfe:	46c0      	nop			@ (mov r8, r8)
 8009c00:	20000010 	.word	0x20000010

08009c04 <__libc_init_array>:
 8009c04:	b570      	push	{r4, r5, r6, lr}
 8009c06:	2600      	movs	r6, #0
 8009c08:	4c0c      	ldr	r4, [pc, #48]	@ (8009c3c <__libc_init_array+0x38>)
 8009c0a:	4d0d      	ldr	r5, [pc, #52]	@ (8009c40 <__libc_init_array+0x3c>)
 8009c0c:	1b64      	subs	r4, r4, r5
 8009c0e:	10a4      	asrs	r4, r4, #2
 8009c10:	42a6      	cmp	r6, r4
 8009c12:	d109      	bne.n	8009c28 <__libc_init_array+0x24>
 8009c14:	2600      	movs	r6, #0
 8009c16:	f000 f87f 	bl	8009d18 <_init>
 8009c1a:	4c0a      	ldr	r4, [pc, #40]	@ (8009c44 <__libc_init_array+0x40>)
 8009c1c:	4d0a      	ldr	r5, [pc, #40]	@ (8009c48 <__libc_init_array+0x44>)
 8009c1e:	1b64      	subs	r4, r4, r5
 8009c20:	10a4      	asrs	r4, r4, #2
 8009c22:	42a6      	cmp	r6, r4
 8009c24:	d105      	bne.n	8009c32 <__libc_init_array+0x2e>
 8009c26:	bd70      	pop	{r4, r5, r6, pc}
 8009c28:	00b3      	lsls	r3, r6, #2
 8009c2a:	58eb      	ldr	r3, [r5, r3]
 8009c2c:	4798      	blx	r3
 8009c2e:	3601      	adds	r6, #1
 8009c30:	e7ee      	b.n	8009c10 <__libc_init_array+0xc>
 8009c32:	00b3      	lsls	r3, r6, #2
 8009c34:	58eb      	ldr	r3, [r5, r3]
 8009c36:	4798      	blx	r3
 8009c38:	3601      	adds	r6, #1
 8009c3a:	e7f2      	b.n	8009c22 <__libc_init_array+0x1e>
 8009c3c:	08009f48 	.word	0x08009f48
 8009c40:	08009f48 	.word	0x08009f48
 8009c44:	08009f4c 	.word	0x08009f4c
 8009c48:	08009f48 	.word	0x08009f48

08009c4c <__retarget_lock_acquire_recursive>:
 8009c4c:	4770      	bx	lr

08009c4e <__retarget_lock_release_recursive>:
 8009c4e:	4770      	bx	lr

08009c50 <memcpy>:
 8009c50:	2300      	movs	r3, #0
 8009c52:	b510      	push	{r4, lr}
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d100      	bne.n	8009c5a <memcpy+0xa>
 8009c58:	bd10      	pop	{r4, pc}
 8009c5a:	5ccc      	ldrb	r4, [r1, r3]
 8009c5c:	54c4      	strb	r4, [r0, r3]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	e7f8      	b.n	8009c54 <memcpy+0x4>
	...

08009c64 <_free_r>:
 8009c64:	b570      	push	{r4, r5, r6, lr}
 8009c66:	0005      	movs	r5, r0
 8009c68:	1e0c      	subs	r4, r1, #0
 8009c6a:	d010      	beq.n	8009c8e <_free_r+0x2a>
 8009c6c:	3c04      	subs	r4, #4
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	da00      	bge.n	8009c76 <_free_r+0x12>
 8009c74:	18e4      	adds	r4, r4, r3
 8009c76:	0028      	movs	r0, r5
 8009c78:	f000 f83e 	bl	8009cf8 <__malloc_lock>
 8009c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8009cf4 <_free_r+0x90>)
 8009c7e:	6813      	ldr	r3, [r2, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d105      	bne.n	8009c90 <_free_r+0x2c>
 8009c84:	6063      	str	r3, [r4, #4]
 8009c86:	6014      	str	r4, [r2, #0]
 8009c88:	0028      	movs	r0, r5
 8009c8a:	f000 f83d 	bl	8009d08 <__malloc_unlock>
 8009c8e:	bd70      	pop	{r4, r5, r6, pc}
 8009c90:	42a3      	cmp	r3, r4
 8009c92:	d908      	bls.n	8009ca6 <_free_r+0x42>
 8009c94:	6820      	ldr	r0, [r4, #0]
 8009c96:	1821      	adds	r1, r4, r0
 8009c98:	428b      	cmp	r3, r1
 8009c9a:	d1f3      	bne.n	8009c84 <_free_r+0x20>
 8009c9c:	6819      	ldr	r1, [r3, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	1809      	adds	r1, r1, r0
 8009ca2:	6021      	str	r1, [r4, #0]
 8009ca4:	e7ee      	b.n	8009c84 <_free_r+0x20>
 8009ca6:	001a      	movs	r2, r3
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d001      	beq.n	8009cb2 <_free_r+0x4e>
 8009cae:	42a3      	cmp	r3, r4
 8009cb0:	d9f9      	bls.n	8009ca6 <_free_r+0x42>
 8009cb2:	6811      	ldr	r1, [r2, #0]
 8009cb4:	1850      	adds	r0, r2, r1
 8009cb6:	42a0      	cmp	r0, r4
 8009cb8:	d10b      	bne.n	8009cd2 <_free_r+0x6e>
 8009cba:	6820      	ldr	r0, [r4, #0]
 8009cbc:	1809      	adds	r1, r1, r0
 8009cbe:	1850      	adds	r0, r2, r1
 8009cc0:	6011      	str	r1, [r2, #0]
 8009cc2:	4283      	cmp	r3, r0
 8009cc4:	d1e0      	bne.n	8009c88 <_free_r+0x24>
 8009cc6:	6818      	ldr	r0, [r3, #0]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	1841      	adds	r1, r0, r1
 8009ccc:	6011      	str	r1, [r2, #0]
 8009cce:	6053      	str	r3, [r2, #4]
 8009cd0:	e7da      	b.n	8009c88 <_free_r+0x24>
 8009cd2:	42a0      	cmp	r0, r4
 8009cd4:	d902      	bls.n	8009cdc <_free_r+0x78>
 8009cd6:	230c      	movs	r3, #12
 8009cd8:	602b      	str	r3, [r5, #0]
 8009cda:	e7d5      	b.n	8009c88 <_free_r+0x24>
 8009cdc:	6820      	ldr	r0, [r4, #0]
 8009cde:	1821      	adds	r1, r4, r0
 8009ce0:	428b      	cmp	r3, r1
 8009ce2:	d103      	bne.n	8009cec <_free_r+0x88>
 8009ce4:	6819      	ldr	r1, [r3, #0]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	1809      	adds	r1, r1, r0
 8009cea:	6021      	str	r1, [r4, #0]
 8009cec:	6063      	str	r3, [r4, #4]
 8009cee:	6054      	str	r4, [r2, #4]
 8009cf0:	e7ca      	b.n	8009c88 <_free_r+0x24>
 8009cf2:	46c0      	nop			@ (mov r8, r8)
 8009cf4:	20001dc8 	.word	0x20001dc8

08009cf8 <__malloc_lock>:
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	4802      	ldr	r0, [pc, #8]	@ (8009d04 <__malloc_lock+0xc>)
 8009cfc:	f7ff ffa6 	bl	8009c4c <__retarget_lock_acquire_recursive>
 8009d00:	bd10      	pop	{r4, pc}
 8009d02:	46c0      	nop			@ (mov r8, r8)
 8009d04:	20001dc4 	.word	0x20001dc4

08009d08 <__malloc_unlock>:
 8009d08:	b510      	push	{r4, lr}
 8009d0a:	4802      	ldr	r0, [pc, #8]	@ (8009d14 <__malloc_unlock+0xc>)
 8009d0c:	f7ff ff9f 	bl	8009c4e <__retarget_lock_release_recursive>
 8009d10:	bd10      	pop	{r4, pc}
 8009d12:	46c0      	nop			@ (mov r8, r8)
 8009d14:	20001dc4 	.word	0x20001dc4

08009d18 <_init>:
 8009d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1a:	46c0      	nop			@ (mov r8, r8)
 8009d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d1e:	bc08      	pop	{r3}
 8009d20:	469e      	mov	lr, r3
 8009d22:	4770      	bx	lr

08009d24 <_fini>:
 8009d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d26:	46c0      	nop			@ (mov r8, r8)
 8009d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d2a:	bc08      	pop	{r3}
 8009d2c:	469e      	mov	lr, r3
 8009d2e:	4770      	bx	lr
