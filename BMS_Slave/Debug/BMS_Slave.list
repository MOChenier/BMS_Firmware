
BMS_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000673c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080067f8  080067f8  000077f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068f4  080068f4  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080068f4  080068f4  0000800c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080068f4  080068f4  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068f4  080068f4  000078f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068f8  080068f8  000078f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080068fc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000000c  08006908  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08006908  00008218  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcfe  00000000  00000000  00008034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b2  00000000  00000000  00015d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00017de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a30  00000000  00000000  00018b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000241f  00000000  00000000  00019568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f57d  00000000  00000000  0001b987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba444  00000000  00000000  0002af04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5348  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000324c  00000000  00000000  000e538c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e85d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080067e0 	.word	0x080067e0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080067e0 	.word	0x080067e0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_d2uiz>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	2200      	movs	r2, #0
 8000220:	4b0c      	ldr	r3, [pc, #48]	@ (8000254 <__aeabi_d2uiz+0x38>)
 8000222:	0004      	movs	r4, r0
 8000224:	000d      	movs	r5, r1
 8000226:	f001 fdc3 	bl	8001db0 <__aeabi_dcmpge>
 800022a:	2800      	cmp	r0, #0
 800022c:	d104      	bne.n	8000238 <__aeabi_d2uiz+0x1c>
 800022e:	0020      	movs	r0, r4
 8000230:	0029      	movs	r1, r5
 8000232:	f001 fc55 	bl	8001ae0 <__aeabi_d2iz>
 8000236:	bd70      	pop	{r4, r5, r6, pc}
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <__aeabi_d2uiz+0x38>)
 800023a:	2200      	movs	r2, #0
 800023c:	0020      	movs	r0, r4
 800023e:	0029      	movs	r1, r5
 8000240:	f001 f844 	bl	80012cc <__aeabi_dsub>
 8000244:	f001 fc4c 	bl	8001ae0 <__aeabi_d2iz>
 8000248:	2380      	movs	r3, #128	@ 0x80
 800024a:	061b      	lsls	r3, r3, #24
 800024c:	469c      	mov	ip, r3
 800024e:	4460      	add	r0, ip
 8000250:	e7f1      	b.n	8000236 <__aeabi_d2uiz+0x1a>
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	41e00000 	.word	0x41e00000

08000258 <__aeabi_fdiv>:
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	4646      	mov	r6, r8
 800025c:	464f      	mov	r7, r9
 800025e:	46d6      	mov	lr, sl
 8000260:	0245      	lsls	r5, r0, #9
 8000262:	b5c0      	push	{r6, r7, lr}
 8000264:	0fc3      	lsrs	r3, r0, #31
 8000266:	0047      	lsls	r7, r0, #1
 8000268:	4698      	mov	r8, r3
 800026a:	1c0e      	adds	r6, r1, #0
 800026c:	0a6d      	lsrs	r5, r5, #9
 800026e:	0e3f      	lsrs	r7, r7, #24
 8000270:	d05b      	beq.n	800032a <__aeabi_fdiv+0xd2>
 8000272:	2fff      	cmp	r7, #255	@ 0xff
 8000274:	d021      	beq.n	80002ba <__aeabi_fdiv+0x62>
 8000276:	2380      	movs	r3, #128	@ 0x80
 8000278:	00ed      	lsls	r5, r5, #3
 800027a:	04db      	lsls	r3, r3, #19
 800027c:	431d      	orrs	r5, r3
 800027e:	2300      	movs	r3, #0
 8000280:	4699      	mov	r9, r3
 8000282:	469a      	mov	sl, r3
 8000284:	3f7f      	subs	r7, #127	@ 0x7f
 8000286:	0274      	lsls	r4, r6, #9
 8000288:	0073      	lsls	r3, r6, #1
 800028a:	0a64      	lsrs	r4, r4, #9
 800028c:	0e1b      	lsrs	r3, r3, #24
 800028e:	0ff6      	lsrs	r6, r6, #31
 8000290:	2b00      	cmp	r3, #0
 8000292:	d020      	beq.n	80002d6 <__aeabi_fdiv+0x7e>
 8000294:	2bff      	cmp	r3, #255	@ 0xff
 8000296:	d043      	beq.n	8000320 <__aeabi_fdiv+0xc8>
 8000298:	2280      	movs	r2, #128	@ 0x80
 800029a:	2000      	movs	r0, #0
 800029c:	00e4      	lsls	r4, r4, #3
 800029e:	04d2      	lsls	r2, r2, #19
 80002a0:	4314      	orrs	r4, r2
 80002a2:	3b7f      	subs	r3, #127	@ 0x7f
 80002a4:	4642      	mov	r2, r8
 80002a6:	1aff      	subs	r7, r7, r3
 80002a8:	464b      	mov	r3, r9
 80002aa:	4072      	eors	r2, r6
 80002ac:	2b0f      	cmp	r3, #15
 80002ae:	d900      	bls.n	80002b2 <__aeabi_fdiv+0x5a>
 80002b0:	e09d      	b.n	80003ee <__aeabi_fdiv+0x196>
 80002b2:	4971      	ldr	r1, [pc, #452]	@ (8000478 <__aeabi_fdiv+0x220>)
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	58cb      	ldr	r3, [r1, r3]
 80002b8:	469f      	mov	pc, r3
 80002ba:	2d00      	cmp	r5, #0
 80002bc:	d15a      	bne.n	8000374 <__aeabi_fdiv+0x11c>
 80002be:	2308      	movs	r3, #8
 80002c0:	4699      	mov	r9, r3
 80002c2:	3b06      	subs	r3, #6
 80002c4:	0274      	lsls	r4, r6, #9
 80002c6:	469a      	mov	sl, r3
 80002c8:	0073      	lsls	r3, r6, #1
 80002ca:	27ff      	movs	r7, #255	@ 0xff
 80002cc:	0a64      	lsrs	r4, r4, #9
 80002ce:	0e1b      	lsrs	r3, r3, #24
 80002d0:	0ff6      	lsrs	r6, r6, #31
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d1de      	bne.n	8000294 <__aeabi_fdiv+0x3c>
 80002d6:	2c00      	cmp	r4, #0
 80002d8:	d13b      	bne.n	8000352 <__aeabi_fdiv+0xfa>
 80002da:	2301      	movs	r3, #1
 80002dc:	4642      	mov	r2, r8
 80002de:	4649      	mov	r1, r9
 80002e0:	4072      	eors	r2, r6
 80002e2:	4319      	orrs	r1, r3
 80002e4:	290e      	cmp	r1, #14
 80002e6:	d818      	bhi.n	800031a <__aeabi_fdiv+0xc2>
 80002e8:	4864      	ldr	r0, [pc, #400]	@ (800047c <__aeabi_fdiv+0x224>)
 80002ea:	0089      	lsls	r1, r1, #2
 80002ec:	5841      	ldr	r1, [r0, r1]
 80002ee:	468f      	mov	pc, r1
 80002f0:	4653      	mov	r3, sl
 80002f2:	2b02      	cmp	r3, #2
 80002f4:	d100      	bne.n	80002f8 <__aeabi_fdiv+0xa0>
 80002f6:	e0b8      	b.n	800046a <__aeabi_fdiv+0x212>
 80002f8:	2b03      	cmp	r3, #3
 80002fa:	d06e      	beq.n	80003da <__aeabi_fdiv+0x182>
 80002fc:	4642      	mov	r2, r8
 80002fe:	002c      	movs	r4, r5
 8000300:	2b01      	cmp	r3, #1
 8000302:	d140      	bne.n	8000386 <__aeabi_fdiv+0x12e>
 8000304:	2000      	movs	r0, #0
 8000306:	2400      	movs	r4, #0
 8000308:	05c0      	lsls	r0, r0, #23
 800030a:	4320      	orrs	r0, r4
 800030c:	07d2      	lsls	r2, r2, #31
 800030e:	4310      	orrs	r0, r2
 8000310:	bce0      	pop	{r5, r6, r7}
 8000312:	46ba      	mov	sl, r7
 8000314:	46b1      	mov	r9, r6
 8000316:	46a8      	mov	r8, r5
 8000318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800031a:	20ff      	movs	r0, #255	@ 0xff
 800031c:	2400      	movs	r4, #0
 800031e:	e7f3      	b.n	8000308 <__aeabi_fdiv+0xb0>
 8000320:	2c00      	cmp	r4, #0
 8000322:	d120      	bne.n	8000366 <__aeabi_fdiv+0x10e>
 8000324:	2302      	movs	r3, #2
 8000326:	3fff      	subs	r7, #255	@ 0xff
 8000328:	e7d8      	b.n	80002dc <__aeabi_fdiv+0x84>
 800032a:	2d00      	cmp	r5, #0
 800032c:	d105      	bne.n	800033a <__aeabi_fdiv+0xe2>
 800032e:	2304      	movs	r3, #4
 8000330:	4699      	mov	r9, r3
 8000332:	3b03      	subs	r3, #3
 8000334:	2700      	movs	r7, #0
 8000336:	469a      	mov	sl, r3
 8000338:	e7a5      	b.n	8000286 <__aeabi_fdiv+0x2e>
 800033a:	0028      	movs	r0, r5
 800033c:	f001 fd42 	bl	8001dc4 <__clzsi2>
 8000340:	2776      	movs	r7, #118	@ 0x76
 8000342:	1f43      	subs	r3, r0, #5
 8000344:	409d      	lsls	r5, r3
 8000346:	2300      	movs	r3, #0
 8000348:	427f      	negs	r7, r7
 800034a:	4699      	mov	r9, r3
 800034c:	469a      	mov	sl, r3
 800034e:	1a3f      	subs	r7, r7, r0
 8000350:	e799      	b.n	8000286 <__aeabi_fdiv+0x2e>
 8000352:	0020      	movs	r0, r4
 8000354:	f001 fd36 	bl	8001dc4 <__clzsi2>
 8000358:	1f43      	subs	r3, r0, #5
 800035a:	409c      	lsls	r4, r3
 800035c:	2376      	movs	r3, #118	@ 0x76
 800035e:	425b      	negs	r3, r3
 8000360:	1a1b      	subs	r3, r3, r0
 8000362:	2000      	movs	r0, #0
 8000364:	e79e      	b.n	80002a4 <__aeabi_fdiv+0x4c>
 8000366:	2303      	movs	r3, #3
 8000368:	464a      	mov	r2, r9
 800036a:	431a      	orrs	r2, r3
 800036c:	4691      	mov	r9, r2
 800036e:	2003      	movs	r0, #3
 8000370:	33fc      	adds	r3, #252	@ 0xfc
 8000372:	e797      	b.n	80002a4 <__aeabi_fdiv+0x4c>
 8000374:	230c      	movs	r3, #12
 8000376:	4699      	mov	r9, r3
 8000378:	3b09      	subs	r3, #9
 800037a:	27ff      	movs	r7, #255	@ 0xff
 800037c:	469a      	mov	sl, r3
 800037e:	e782      	b.n	8000286 <__aeabi_fdiv+0x2e>
 8000380:	2803      	cmp	r0, #3
 8000382:	d02c      	beq.n	80003de <__aeabi_fdiv+0x186>
 8000384:	0032      	movs	r2, r6
 8000386:	0038      	movs	r0, r7
 8000388:	307f      	adds	r0, #127	@ 0x7f
 800038a:	2800      	cmp	r0, #0
 800038c:	dd47      	ble.n	800041e <__aeabi_fdiv+0x1c6>
 800038e:	0763      	lsls	r3, r4, #29
 8000390:	d004      	beq.n	800039c <__aeabi_fdiv+0x144>
 8000392:	230f      	movs	r3, #15
 8000394:	4023      	ands	r3, r4
 8000396:	2b04      	cmp	r3, #4
 8000398:	d000      	beq.n	800039c <__aeabi_fdiv+0x144>
 800039a:	3404      	adds	r4, #4
 800039c:	0123      	lsls	r3, r4, #4
 800039e:	d503      	bpl.n	80003a8 <__aeabi_fdiv+0x150>
 80003a0:	0038      	movs	r0, r7
 80003a2:	4b37      	ldr	r3, [pc, #220]	@ (8000480 <__aeabi_fdiv+0x228>)
 80003a4:	3080      	adds	r0, #128	@ 0x80
 80003a6:	401c      	ands	r4, r3
 80003a8:	28fe      	cmp	r0, #254	@ 0xfe
 80003aa:	dcb6      	bgt.n	800031a <__aeabi_fdiv+0xc2>
 80003ac:	01a4      	lsls	r4, r4, #6
 80003ae:	0a64      	lsrs	r4, r4, #9
 80003b0:	b2c0      	uxtb	r0, r0
 80003b2:	e7a9      	b.n	8000308 <__aeabi_fdiv+0xb0>
 80003b4:	2480      	movs	r4, #128	@ 0x80
 80003b6:	2200      	movs	r2, #0
 80003b8:	20ff      	movs	r0, #255	@ 0xff
 80003ba:	03e4      	lsls	r4, r4, #15
 80003bc:	e7a4      	b.n	8000308 <__aeabi_fdiv+0xb0>
 80003be:	2380      	movs	r3, #128	@ 0x80
 80003c0:	03db      	lsls	r3, r3, #15
 80003c2:	421d      	tst	r5, r3
 80003c4:	d001      	beq.n	80003ca <__aeabi_fdiv+0x172>
 80003c6:	421c      	tst	r4, r3
 80003c8:	d00b      	beq.n	80003e2 <__aeabi_fdiv+0x18a>
 80003ca:	2480      	movs	r4, #128	@ 0x80
 80003cc:	03e4      	lsls	r4, r4, #15
 80003ce:	432c      	orrs	r4, r5
 80003d0:	0264      	lsls	r4, r4, #9
 80003d2:	4642      	mov	r2, r8
 80003d4:	20ff      	movs	r0, #255	@ 0xff
 80003d6:	0a64      	lsrs	r4, r4, #9
 80003d8:	e796      	b.n	8000308 <__aeabi_fdiv+0xb0>
 80003da:	4646      	mov	r6, r8
 80003dc:	002c      	movs	r4, r5
 80003de:	2380      	movs	r3, #128	@ 0x80
 80003e0:	03db      	lsls	r3, r3, #15
 80003e2:	431c      	orrs	r4, r3
 80003e4:	0264      	lsls	r4, r4, #9
 80003e6:	0032      	movs	r2, r6
 80003e8:	20ff      	movs	r0, #255	@ 0xff
 80003ea:	0a64      	lsrs	r4, r4, #9
 80003ec:	e78c      	b.n	8000308 <__aeabi_fdiv+0xb0>
 80003ee:	016d      	lsls	r5, r5, #5
 80003f0:	0160      	lsls	r0, r4, #5
 80003f2:	4285      	cmp	r5, r0
 80003f4:	d22d      	bcs.n	8000452 <__aeabi_fdiv+0x1fa>
 80003f6:	231b      	movs	r3, #27
 80003f8:	2400      	movs	r4, #0
 80003fa:	3f01      	subs	r7, #1
 80003fc:	2601      	movs	r6, #1
 80003fe:	0029      	movs	r1, r5
 8000400:	0064      	lsls	r4, r4, #1
 8000402:	006d      	lsls	r5, r5, #1
 8000404:	2900      	cmp	r1, #0
 8000406:	db01      	blt.n	800040c <__aeabi_fdiv+0x1b4>
 8000408:	4285      	cmp	r5, r0
 800040a:	d301      	bcc.n	8000410 <__aeabi_fdiv+0x1b8>
 800040c:	1a2d      	subs	r5, r5, r0
 800040e:	4334      	orrs	r4, r6
 8000410:	3b01      	subs	r3, #1
 8000412:	2b00      	cmp	r3, #0
 8000414:	d1f3      	bne.n	80003fe <__aeabi_fdiv+0x1a6>
 8000416:	1e6b      	subs	r3, r5, #1
 8000418:	419d      	sbcs	r5, r3
 800041a:	432c      	orrs	r4, r5
 800041c:	e7b3      	b.n	8000386 <__aeabi_fdiv+0x12e>
 800041e:	2301      	movs	r3, #1
 8000420:	1a1b      	subs	r3, r3, r0
 8000422:	2b1b      	cmp	r3, #27
 8000424:	dd00      	ble.n	8000428 <__aeabi_fdiv+0x1d0>
 8000426:	e76d      	b.n	8000304 <__aeabi_fdiv+0xac>
 8000428:	0021      	movs	r1, r4
 800042a:	379e      	adds	r7, #158	@ 0x9e
 800042c:	40d9      	lsrs	r1, r3
 800042e:	40bc      	lsls	r4, r7
 8000430:	000b      	movs	r3, r1
 8000432:	1e61      	subs	r1, r4, #1
 8000434:	418c      	sbcs	r4, r1
 8000436:	4323      	orrs	r3, r4
 8000438:	0759      	lsls	r1, r3, #29
 800043a:	d004      	beq.n	8000446 <__aeabi_fdiv+0x1ee>
 800043c:	210f      	movs	r1, #15
 800043e:	4019      	ands	r1, r3
 8000440:	2904      	cmp	r1, #4
 8000442:	d000      	beq.n	8000446 <__aeabi_fdiv+0x1ee>
 8000444:	3304      	adds	r3, #4
 8000446:	0159      	lsls	r1, r3, #5
 8000448:	d413      	bmi.n	8000472 <__aeabi_fdiv+0x21a>
 800044a:	019b      	lsls	r3, r3, #6
 800044c:	2000      	movs	r0, #0
 800044e:	0a5c      	lsrs	r4, r3, #9
 8000450:	e75a      	b.n	8000308 <__aeabi_fdiv+0xb0>
 8000452:	231a      	movs	r3, #26
 8000454:	2401      	movs	r4, #1
 8000456:	1a2d      	subs	r5, r5, r0
 8000458:	e7d0      	b.n	80003fc <__aeabi_fdiv+0x1a4>
 800045a:	1e98      	subs	r0, r3, #2
 800045c:	4243      	negs	r3, r0
 800045e:	4158      	adcs	r0, r3
 8000460:	4240      	negs	r0, r0
 8000462:	0032      	movs	r2, r6
 8000464:	2400      	movs	r4, #0
 8000466:	b2c0      	uxtb	r0, r0
 8000468:	e74e      	b.n	8000308 <__aeabi_fdiv+0xb0>
 800046a:	4642      	mov	r2, r8
 800046c:	20ff      	movs	r0, #255	@ 0xff
 800046e:	2400      	movs	r4, #0
 8000470:	e74a      	b.n	8000308 <__aeabi_fdiv+0xb0>
 8000472:	2001      	movs	r0, #1
 8000474:	2400      	movs	r4, #0
 8000476:	e747      	b.n	8000308 <__aeabi_fdiv+0xb0>
 8000478:	080067f8 	.word	0x080067f8
 800047c:	08006838 	.word	0x08006838
 8000480:	f7ffffff 	.word	0xf7ffffff

08000484 <__aeabi_ui2f>:
 8000484:	b510      	push	{r4, lr}
 8000486:	1e04      	subs	r4, r0, #0
 8000488:	d00d      	beq.n	80004a6 <__aeabi_ui2f+0x22>
 800048a:	f001 fc9b 	bl	8001dc4 <__clzsi2>
 800048e:	239e      	movs	r3, #158	@ 0x9e
 8000490:	1a1b      	subs	r3, r3, r0
 8000492:	2b96      	cmp	r3, #150	@ 0x96
 8000494:	dc0c      	bgt.n	80004b0 <__aeabi_ui2f+0x2c>
 8000496:	2808      	cmp	r0, #8
 8000498:	d034      	beq.n	8000504 <__aeabi_ui2f+0x80>
 800049a:	3808      	subs	r0, #8
 800049c:	4084      	lsls	r4, r0
 800049e:	0264      	lsls	r4, r4, #9
 80004a0:	0a64      	lsrs	r4, r4, #9
 80004a2:	b2d8      	uxtb	r0, r3
 80004a4:	e001      	b.n	80004aa <__aeabi_ui2f+0x26>
 80004a6:	2000      	movs	r0, #0
 80004a8:	2400      	movs	r4, #0
 80004aa:	05c0      	lsls	r0, r0, #23
 80004ac:	4320      	orrs	r0, r4
 80004ae:	bd10      	pop	{r4, pc}
 80004b0:	2b99      	cmp	r3, #153	@ 0x99
 80004b2:	dc13      	bgt.n	80004dc <__aeabi_ui2f+0x58>
 80004b4:	1f42      	subs	r2, r0, #5
 80004b6:	4094      	lsls	r4, r2
 80004b8:	4a14      	ldr	r2, [pc, #80]	@ (800050c <__aeabi_ui2f+0x88>)
 80004ba:	4022      	ands	r2, r4
 80004bc:	0761      	lsls	r1, r4, #29
 80004be:	d01c      	beq.n	80004fa <__aeabi_ui2f+0x76>
 80004c0:	210f      	movs	r1, #15
 80004c2:	4021      	ands	r1, r4
 80004c4:	2904      	cmp	r1, #4
 80004c6:	d018      	beq.n	80004fa <__aeabi_ui2f+0x76>
 80004c8:	3204      	adds	r2, #4
 80004ca:	08d4      	lsrs	r4, r2, #3
 80004cc:	0152      	lsls	r2, r2, #5
 80004ce:	d515      	bpl.n	80004fc <__aeabi_ui2f+0x78>
 80004d0:	239f      	movs	r3, #159	@ 0x9f
 80004d2:	0264      	lsls	r4, r4, #9
 80004d4:	1a18      	subs	r0, r3, r0
 80004d6:	0a64      	lsrs	r4, r4, #9
 80004d8:	b2c0      	uxtb	r0, r0
 80004da:	e7e6      	b.n	80004aa <__aeabi_ui2f+0x26>
 80004dc:	0002      	movs	r2, r0
 80004de:	0021      	movs	r1, r4
 80004e0:	321b      	adds	r2, #27
 80004e2:	4091      	lsls	r1, r2
 80004e4:	000a      	movs	r2, r1
 80004e6:	1e51      	subs	r1, r2, #1
 80004e8:	418a      	sbcs	r2, r1
 80004ea:	2105      	movs	r1, #5
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	40cc      	lsrs	r4, r1
 80004f0:	4314      	orrs	r4, r2
 80004f2:	4a06      	ldr	r2, [pc, #24]	@ (800050c <__aeabi_ui2f+0x88>)
 80004f4:	4022      	ands	r2, r4
 80004f6:	0761      	lsls	r1, r4, #29
 80004f8:	d1e2      	bne.n	80004c0 <__aeabi_ui2f+0x3c>
 80004fa:	08d4      	lsrs	r4, r2, #3
 80004fc:	0264      	lsls	r4, r4, #9
 80004fe:	0a64      	lsrs	r4, r4, #9
 8000500:	b2d8      	uxtb	r0, r3
 8000502:	e7d2      	b.n	80004aa <__aeabi_ui2f+0x26>
 8000504:	0264      	lsls	r4, r4, #9
 8000506:	0a64      	lsrs	r4, r4, #9
 8000508:	308e      	adds	r0, #142	@ 0x8e
 800050a:	e7ce      	b.n	80004aa <__aeabi_ui2f+0x26>
 800050c:	fbffffff 	.word	0xfbffffff

08000510 <__aeabi_dadd>:
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	464f      	mov	r7, r9
 8000514:	4646      	mov	r6, r8
 8000516:	46d6      	mov	lr, sl
 8000518:	b5c0      	push	{r6, r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	9000      	str	r0, [sp, #0]
 800051e:	9101      	str	r1, [sp, #4]
 8000520:	030e      	lsls	r6, r1, #12
 8000522:	004c      	lsls	r4, r1, #1
 8000524:	0fcd      	lsrs	r5, r1, #31
 8000526:	0a71      	lsrs	r1, r6, #9
 8000528:	9e00      	ldr	r6, [sp, #0]
 800052a:	005f      	lsls	r7, r3, #1
 800052c:	0f76      	lsrs	r6, r6, #29
 800052e:	430e      	orrs	r6, r1
 8000530:	9900      	ldr	r1, [sp, #0]
 8000532:	9200      	str	r2, [sp, #0]
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	00c9      	lsls	r1, r1, #3
 8000538:	4689      	mov	r9, r1
 800053a:	0319      	lsls	r1, r3, #12
 800053c:	0d7b      	lsrs	r3, r7, #21
 800053e:	4698      	mov	r8, r3
 8000540:	9b01      	ldr	r3, [sp, #4]
 8000542:	0a49      	lsrs	r1, r1, #9
 8000544:	0fdb      	lsrs	r3, r3, #31
 8000546:	469c      	mov	ip, r3
 8000548:	9b00      	ldr	r3, [sp, #0]
 800054a:	9a00      	ldr	r2, [sp, #0]
 800054c:	0f5b      	lsrs	r3, r3, #29
 800054e:	430b      	orrs	r3, r1
 8000550:	4641      	mov	r1, r8
 8000552:	0d64      	lsrs	r4, r4, #21
 8000554:	00d2      	lsls	r2, r2, #3
 8000556:	1a61      	subs	r1, r4, r1
 8000558:	4565      	cmp	r5, ip
 800055a:	d100      	bne.n	800055e <__aeabi_dadd+0x4e>
 800055c:	e0a6      	b.n	80006ac <__aeabi_dadd+0x19c>
 800055e:	2900      	cmp	r1, #0
 8000560:	dd72      	ble.n	8000648 <__aeabi_dadd+0x138>
 8000562:	4647      	mov	r7, r8
 8000564:	2f00      	cmp	r7, #0
 8000566:	d100      	bne.n	800056a <__aeabi_dadd+0x5a>
 8000568:	e0dd      	b.n	8000726 <__aeabi_dadd+0x216>
 800056a:	4fcc      	ldr	r7, [pc, #816]	@ (800089c <__aeabi_dadd+0x38c>)
 800056c:	42bc      	cmp	r4, r7
 800056e:	d100      	bne.n	8000572 <__aeabi_dadd+0x62>
 8000570:	e19a      	b.n	80008a8 <__aeabi_dadd+0x398>
 8000572:	2701      	movs	r7, #1
 8000574:	2938      	cmp	r1, #56	@ 0x38
 8000576:	dc17      	bgt.n	80005a8 <__aeabi_dadd+0x98>
 8000578:	2780      	movs	r7, #128	@ 0x80
 800057a:	043f      	lsls	r7, r7, #16
 800057c:	433b      	orrs	r3, r7
 800057e:	291f      	cmp	r1, #31
 8000580:	dd00      	ble.n	8000584 <__aeabi_dadd+0x74>
 8000582:	e1dd      	b.n	8000940 <__aeabi_dadd+0x430>
 8000584:	2720      	movs	r7, #32
 8000586:	1a78      	subs	r0, r7, r1
 8000588:	001f      	movs	r7, r3
 800058a:	4087      	lsls	r7, r0
 800058c:	46ba      	mov	sl, r7
 800058e:	0017      	movs	r7, r2
 8000590:	40cf      	lsrs	r7, r1
 8000592:	4684      	mov	ip, r0
 8000594:	0038      	movs	r0, r7
 8000596:	4657      	mov	r7, sl
 8000598:	4307      	orrs	r7, r0
 800059a:	4660      	mov	r0, ip
 800059c:	4082      	lsls	r2, r0
 800059e:	40cb      	lsrs	r3, r1
 80005a0:	1e50      	subs	r0, r2, #1
 80005a2:	4182      	sbcs	r2, r0
 80005a4:	1af6      	subs	r6, r6, r3
 80005a6:	4317      	orrs	r7, r2
 80005a8:	464b      	mov	r3, r9
 80005aa:	1bdf      	subs	r7, r3, r7
 80005ac:	45b9      	cmp	r9, r7
 80005ae:	4180      	sbcs	r0, r0
 80005b0:	4240      	negs	r0, r0
 80005b2:	1a36      	subs	r6, r6, r0
 80005b4:	0233      	lsls	r3, r6, #8
 80005b6:	d400      	bmi.n	80005ba <__aeabi_dadd+0xaa>
 80005b8:	e0ff      	b.n	80007ba <__aeabi_dadd+0x2aa>
 80005ba:	0276      	lsls	r6, r6, #9
 80005bc:	0a76      	lsrs	r6, r6, #9
 80005be:	2e00      	cmp	r6, #0
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0xb4>
 80005c2:	e13c      	b.n	800083e <__aeabi_dadd+0x32e>
 80005c4:	0030      	movs	r0, r6
 80005c6:	f001 fbfd 	bl	8001dc4 <__clzsi2>
 80005ca:	0003      	movs	r3, r0
 80005cc:	3b08      	subs	r3, #8
 80005ce:	2120      	movs	r1, #32
 80005d0:	0038      	movs	r0, r7
 80005d2:	1aca      	subs	r2, r1, r3
 80005d4:	40d0      	lsrs	r0, r2
 80005d6:	409e      	lsls	r6, r3
 80005d8:	0002      	movs	r2, r0
 80005da:	409f      	lsls	r7, r3
 80005dc:	4332      	orrs	r2, r6
 80005de:	429c      	cmp	r4, r3
 80005e0:	dd00      	ble.n	80005e4 <__aeabi_dadd+0xd4>
 80005e2:	e1a6      	b.n	8000932 <__aeabi_dadd+0x422>
 80005e4:	1b18      	subs	r0, r3, r4
 80005e6:	3001      	adds	r0, #1
 80005e8:	1a09      	subs	r1, r1, r0
 80005ea:	003e      	movs	r6, r7
 80005ec:	408f      	lsls	r7, r1
 80005ee:	40c6      	lsrs	r6, r0
 80005f0:	1e7b      	subs	r3, r7, #1
 80005f2:	419f      	sbcs	r7, r3
 80005f4:	0013      	movs	r3, r2
 80005f6:	408b      	lsls	r3, r1
 80005f8:	4337      	orrs	r7, r6
 80005fa:	431f      	orrs	r7, r3
 80005fc:	40c2      	lsrs	r2, r0
 80005fe:	003b      	movs	r3, r7
 8000600:	0016      	movs	r6, r2
 8000602:	2400      	movs	r4, #0
 8000604:	4313      	orrs	r3, r2
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0xfa>
 8000608:	e1df      	b.n	80009ca <__aeabi_dadd+0x4ba>
 800060a:	077b      	lsls	r3, r7, #29
 800060c:	d100      	bne.n	8000610 <__aeabi_dadd+0x100>
 800060e:	e332      	b.n	8000c76 <__aeabi_dadd+0x766>
 8000610:	230f      	movs	r3, #15
 8000612:	003a      	movs	r2, r7
 8000614:	403b      	ands	r3, r7
 8000616:	2b04      	cmp	r3, #4
 8000618:	d004      	beq.n	8000624 <__aeabi_dadd+0x114>
 800061a:	1d3a      	adds	r2, r7, #4
 800061c:	42ba      	cmp	r2, r7
 800061e:	41bf      	sbcs	r7, r7
 8000620:	427f      	negs	r7, r7
 8000622:	19f6      	adds	r6, r6, r7
 8000624:	0233      	lsls	r3, r6, #8
 8000626:	d400      	bmi.n	800062a <__aeabi_dadd+0x11a>
 8000628:	e323      	b.n	8000c72 <__aeabi_dadd+0x762>
 800062a:	4b9c      	ldr	r3, [pc, #624]	@ (800089c <__aeabi_dadd+0x38c>)
 800062c:	3401      	adds	r4, #1
 800062e:	429c      	cmp	r4, r3
 8000630:	d100      	bne.n	8000634 <__aeabi_dadd+0x124>
 8000632:	e0b4      	b.n	800079e <__aeabi_dadd+0x28e>
 8000634:	4b9a      	ldr	r3, [pc, #616]	@ (80008a0 <__aeabi_dadd+0x390>)
 8000636:	0564      	lsls	r4, r4, #21
 8000638:	401e      	ands	r6, r3
 800063a:	0d64      	lsrs	r4, r4, #21
 800063c:	0777      	lsls	r7, r6, #29
 800063e:	08d2      	lsrs	r2, r2, #3
 8000640:	0276      	lsls	r6, r6, #9
 8000642:	4317      	orrs	r7, r2
 8000644:	0b36      	lsrs	r6, r6, #12
 8000646:	e0ac      	b.n	80007a2 <__aeabi_dadd+0x292>
 8000648:	2900      	cmp	r1, #0
 800064a:	d100      	bne.n	800064e <__aeabi_dadd+0x13e>
 800064c:	e07e      	b.n	800074c <__aeabi_dadd+0x23c>
 800064e:	4641      	mov	r1, r8
 8000650:	1b09      	subs	r1, r1, r4
 8000652:	2c00      	cmp	r4, #0
 8000654:	d000      	beq.n	8000658 <__aeabi_dadd+0x148>
 8000656:	e160      	b.n	800091a <__aeabi_dadd+0x40a>
 8000658:	0034      	movs	r4, r6
 800065a:	4648      	mov	r0, r9
 800065c:	4304      	orrs	r4, r0
 800065e:	d100      	bne.n	8000662 <__aeabi_dadd+0x152>
 8000660:	e1c9      	b.n	80009f6 <__aeabi_dadd+0x4e6>
 8000662:	1e4c      	subs	r4, r1, #1
 8000664:	2901      	cmp	r1, #1
 8000666:	d100      	bne.n	800066a <__aeabi_dadd+0x15a>
 8000668:	e22e      	b.n	8000ac8 <__aeabi_dadd+0x5b8>
 800066a:	4d8c      	ldr	r5, [pc, #560]	@ (800089c <__aeabi_dadd+0x38c>)
 800066c:	42a9      	cmp	r1, r5
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x162>
 8000670:	e224      	b.n	8000abc <__aeabi_dadd+0x5ac>
 8000672:	2701      	movs	r7, #1
 8000674:	2c38      	cmp	r4, #56	@ 0x38
 8000676:	dc11      	bgt.n	800069c <__aeabi_dadd+0x18c>
 8000678:	0021      	movs	r1, r4
 800067a:	291f      	cmp	r1, #31
 800067c:	dd00      	ble.n	8000680 <__aeabi_dadd+0x170>
 800067e:	e20b      	b.n	8000a98 <__aeabi_dadd+0x588>
 8000680:	2420      	movs	r4, #32
 8000682:	0037      	movs	r7, r6
 8000684:	4648      	mov	r0, r9
 8000686:	1a64      	subs	r4, r4, r1
 8000688:	40a7      	lsls	r7, r4
 800068a:	40c8      	lsrs	r0, r1
 800068c:	4307      	orrs	r7, r0
 800068e:	4648      	mov	r0, r9
 8000690:	40a0      	lsls	r0, r4
 8000692:	40ce      	lsrs	r6, r1
 8000694:	1e44      	subs	r4, r0, #1
 8000696:	41a0      	sbcs	r0, r4
 8000698:	1b9b      	subs	r3, r3, r6
 800069a:	4307      	orrs	r7, r0
 800069c:	1bd7      	subs	r7, r2, r7
 800069e:	42ba      	cmp	r2, r7
 80006a0:	4192      	sbcs	r2, r2
 80006a2:	4252      	negs	r2, r2
 80006a4:	4665      	mov	r5, ip
 80006a6:	4644      	mov	r4, r8
 80006a8:	1a9e      	subs	r6, r3, r2
 80006aa:	e783      	b.n	80005b4 <__aeabi_dadd+0xa4>
 80006ac:	2900      	cmp	r1, #0
 80006ae:	dc00      	bgt.n	80006b2 <__aeabi_dadd+0x1a2>
 80006b0:	e09c      	b.n	80007ec <__aeabi_dadd+0x2dc>
 80006b2:	4647      	mov	r7, r8
 80006b4:	2f00      	cmp	r7, #0
 80006b6:	d167      	bne.n	8000788 <__aeabi_dadd+0x278>
 80006b8:	001f      	movs	r7, r3
 80006ba:	4317      	orrs	r7, r2
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x1b0>
 80006be:	e0e4      	b.n	800088a <__aeabi_dadd+0x37a>
 80006c0:	1e48      	subs	r0, r1, #1
 80006c2:	2901      	cmp	r1, #1
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x1b8>
 80006c6:	e19b      	b.n	8000a00 <__aeabi_dadd+0x4f0>
 80006c8:	4f74      	ldr	r7, [pc, #464]	@ (800089c <__aeabi_dadd+0x38c>)
 80006ca:	42b9      	cmp	r1, r7
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x1c0>
 80006ce:	e0eb      	b.n	80008a8 <__aeabi_dadd+0x398>
 80006d0:	2701      	movs	r7, #1
 80006d2:	0001      	movs	r1, r0
 80006d4:	2838      	cmp	r0, #56	@ 0x38
 80006d6:	dc11      	bgt.n	80006fc <__aeabi_dadd+0x1ec>
 80006d8:	291f      	cmp	r1, #31
 80006da:	dd00      	ble.n	80006de <__aeabi_dadd+0x1ce>
 80006dc:	e1c7      	b.n	8000a6e <__aeabi_dadd+0x55e>
 80006de:	2720      	movs	r7, #32
 80006e0:	1a78      	subs	r0, r7, r1
 80006e2:	001f      	movs	r7, r3
 80006e4:	4684      	mov	ip, r0
 80006e6:	4087      	lsls	r7, r0
 80006e8:	0010      	movs	r0, r2
 80006ea:	40c8      	lsrs	r0, r1
 80006ec:	4307      	orrs	r7, r0
 80006ee:	4660      	mov	r0, ip
 80006f0:	4082      	lsls	r2, r0
 80006f2:	40cb      	lsrs	r3, r1
 80006f4:	1e50      	subs	r0, r2, #1
 80006f6:	4182      	sbcs	r2, r0
 80006f8:	18f6      	adds	r6, r6, r3
 80006fa:	4317      	orrs	r7, r2
 80006fc:	444f      	add	r7, r9
 80006fe:	454f      	cmp	r7, r9
 8000700:	4180      	sbcs	r0, r0
 8000702:	4240      	negs	r0, r0
 8000704:	1836      	adds	r6, r6, r0
 8000706:	0233      	lsls	r3, r6, #8
 8000708:	d557      	bpl.n	80007ba <__aeabi_dadd+0x2aa>
 800070a:	4b64      	ldr	r3, [pc, #400]	@ (800089c <__aeabi_dadd+0x38c>)
 800070c:	3401      	adds	r4, #1
 800070e:	429c      	cmp	r4, r3
 8000710:	d045      	beq.n	800079e <__aeabi_dadd+0x28e>
 8000712:	2101      	movs	r1, #1
 8000714:	4b62      	ldr	r3, [pc, #392]	@ (80008a0 <__aeabi_dadd+0x390>)
 8000716:	087a      	lsrs	r2, r7, #1
 8000718:	401e      	ands	r6, r3
 800071a:	4039      	ands	r1, r7
 800071c:	430a      	orrs	r2, r1
 800071e:	07f7      	lsls	r7, r6, #31
 8000720:	4317      	orrs	r7, r2
 8000722:	0876      	lsrs	r6, r6, #1
 8000724:	e771      	b.n	800060a <__aeabi_dadd+0xfa>
 8000726:	001f      	movs	r7, r3
 8000728:	4317      	orrs	r7, r2
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0x21e>
 800072c:	e0ad      	b.n	800088a <__aeabi_dadd+0x37a>
 800072e:	1e4f      	subs	r7, r1, #1
 8000730:	46bc      	mov	ip, r7
 8000732:	2901      	cmp	r1, #1
 8000734:	d100      	bne.n	8000738 <__aeabi_dadd+0x228>
 8000736:	e182      	b.n	8000a3e <__aeabi_dadd+0x52e>
 8000738:	4f58      	ldr	r7, [pc, #352]	@ (800089c <__aeabi_dadd+0x38c>)
 800073a:	42b9      	cmp	r1, r7
 800073c:	d100      	bne.n	8000740 <__aeabi_dadd+0x230>
 800073e:	e190      	b.n	8000a62 <__aeabi_dadd+0x552>
 8000740:	4661      	mov	r1, ip
 8000742:	2701      	movs	r7, #1
 8000744:	2938      	cmp	r1, #56	@ 0x38
 8000746:	dd00      	ble.n	800074a <__aeabi_dadd+0x23a>
 8000748:	e72e      	b.n	80005a8 <__aeabi_dadd+0x98>
 800074a:	e718      	b.n	800057e <__aeabi_dadd+0x6e>
 800074c:	4f55      	ldr	r7, [pc, #340]	@ (80008a4 <__aeabi_dadd+0x394>)
 800074e:	1c61      	adds	r1, r4, #1
 8000750:	4239      	tst	r1, r7
 8000752:	d000      	beq.n	8000756 <__aeabi_dadd+0x246>
 8000754:	e0d0      	b.n	80008f8 <__aeabi_dadd+0x3e8>
 8000756:	0031      	movs	r1, r6
 8000758:	4648      	mov	r0, r9
 800075a:	001f      	movs	r7, r3
 800075c:	4301      	orrs	r1, r0
 800075e:	4317      	orrs	r7, r2
 8000760:	2c00      	cmp	r4, #0
 8000762:	d000      	beq.n	8000766 <__aeabi_dadd+0x256>
 8000764:	e13d      	b.n	80009e2 <__aeabi_dadd+0x4d2>
 8000766:	2900      	cmp	r1, #0
 8000768:	d100      	bne.n	800076c <__aeabi_dadd+0x25c>
 800076a:	e1bc      	b.n	8000ae6 <__aeabi_dadd+0x5d6>
 800076c:	2f00      	cmp	r7, #0
 800076e:	d000      	beq.n	8000772 <__aeabi_dadd+0x262>
 8000770:	e1bf      	b.n	8000af2 <__aeabi_dadd+0x5e2>
 8000772:	464b      	mov	r3, r9
 8000774:	2100      	movs	r1, #0
 8000776:	08d8      	lsrs	r0, r3, #3
 8000778:	0777      	lsls	r7, r6, #29
 800077a:	4307      	orrs	r7, r0
 800077c:	08f0      	lsrs	r0, r6, #3
 800077e:	0306      	lsls	r6, r0, #12
 8000780:	054c      	lsls	r4, r1, #21
 8000782:	0b36      	lsrs	r6, r6, #12
 8000784:	0d64      	lsrs	r4, r4, #21
 8000786:	e00c      	b.n	80007a2 <__aeabi_dadd+0x292>
 8000788:	4f44      	ldr	r7, [pc, #272]	@ (800089c <__aeabi_dadd+0x38c>)
 800078a:	42bc      	cmp	r4, r7
 800078c:	d100      	bne.n	8000790 <__aeabi_dadd+0x280>
 800078e:	e08b      	b.n	80008a8 <__aeabi_dadd+0x398>
 8000790:	2701      	movs	r7, #1
 8000792:	2938      	cmp	r1, #56	@ 0x38
 8000794:	dcb2      	bgt.n	80006fc <__aeabi_dadd+0x1ec>
 8000796:	2780      	movs	r7, #128	@ 0x80
 8000798:	043f      	lsls	r7, r7, #16
 800079a:	433b      	orrs	r3, r7
 800079c:	e79c      	b.n	80006d8 <__aeabi_dadd+0x1c8>
 800079e:	2600      	movs	r6, #0
 80007a0:	2700      	movs	r7, #0
 80007a2:	0524      	lsls	r4, r4, #20
 80007a4:	4334      	orrs	r4, r6
 80007a6:	07ed      	lsls	r5, r5, #31
 80007a8:	432c      	orrs	r4, r5
 80007aa:	0038      	movs	r0, r7
 80007ac:	0021      	movs	r1, r4
 80007ae:	b002      	add	sp, #8
 80007b0:	bce0      	pop	{r5, r6, r7}
 80007b2:	46ba      	mov	sl, r7
 80007b4:	46b1      	mov	r9, r6
 80007b6:	46a8      	mov	r8, r5
 80007b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ba:	077b      	lsls	r3, r7, #29
 80007bc:	d004      	beq.n	80007c8 <__aeabi_dadd+0x2b8>
 80007be:	230f      	movs	r3, #15
 80007c0:	403b      	ands	r3, r7
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	d000      	beq.n	80007c8 <__aeabi_dadd+0x2b8>
 80007c6:	e728      	b.n	800061a <__aeabi_dadd+0x10a>
 80007c8:	08f8      	lsrs	r0, r7, #3
 80007ca:	4b34      	ldr	r3, [pc, #208]	@ (800089c <__aeabi_dadd+0x38c>)
 80007cc:	0777      	lsls	r7, r6, #29
 80007ce:	4307      	orrs	r7, r0
 80007d0:	08f0      	lsrs	r0, r6, #3
 80007d2:	429c      	cmp	r4, r3
 80007d4:	d000      	beq.n	80007d8 <__aeabi_dadd+0x2c8>
 80007d6:	e24a      	b.n	8000c6e <__aeabi_dadd+0x75e>
 80007d8:	003b      	movs	r3, r7
 80007da:	4303      	orrs	r3, r0
 80007dc:	d059      	beq.n	8000892 <__aeabi_dadd+0x382>
 80007de:	2680      	movs	r6, #128	@ 0x80
 80007e0:	0336      	lsls	r6, r6, #12
 80007e2:	4306      	orrs	r6, r0
 80007e4:	0336      	lsls	r6, r6, #12
 80007e6:	4c2d      	ldr	r4, [pc, #180]	@ (800089c <__aeabi_dadd+0x38c>)
 80007e8:	0b36      	lsrs	r6, r6, #12
 80007ea:	e7da      	b.n	80007a2 <__aeabi_dadd+0x292>
 80007ec:	2900      	cmp	r1, #0
 80007ee:	d061      	beq.n	80008b4 <__aeabi_dadd+0x3a4>
 80007f0:	4641      	mov	r1, r8
 80007f2:	1b09      	subs	r1, r1, r4
 80007f4:	2c00      	cmp	r4, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x2ea>
 80007f8:	e0b9      	b.n	800096e <__aeabi_dadd+0x45e>
 80007fa:	4c28      	ldr	r4, [pc, #160]	@ (800089c <__aeabi_dadd+0x38c>)
 80007fc:	45a0      	cmp	r8, r4
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x2f2>
 8000800:	e1a5      	b.n	8000b4e <__aeabi_dadd+0x63e>
 8000802:	2701      	movs	r7, #1
 8000804:	2938      	cmp	r1, #56	@ 0x38
 8000806:	dc13      	bgt.n	8000830 <__aeabi_dadd+0x320>
 8000808:	2480      	movs	r4, #128	@ 0x80
 800080a:	0424      	lsls	r4, r4, #16
 800080c:	4326      	orrs	r6, r4
 800080e:	291f      	cmp	r1, #31
 8000810:	dd00      	ble.n	8000814 <__aeabi_dadd+0x304>
 8000812:	e1c8      	b.n	8000ba6 <__aeabi_dadd+0x696>
 8000814:	2420      	movs	r4, #32
 8000816:	0037      	movs	r7, r6
 8000818:	4648      	mov	r0, r9
 800081a:	1a64      	subs	r4, r4, r1
 800081c:	40a7      	lsls	r7, r4
 800081e:	40c8      	lsrs	r0, r1
 8000820:	4307      	orrs	r7, r0
 8000822:	4648      	mov	r0, r9
 8000824:	40a0      	lsls	r0, r4
 8000826:	40ce      	lsrs	r6, r1
 8000828:	1e44      	subs	r4, r0, #1
 800082a:	41a0      	sbcs	r0, r4
 800082c:	199b      	adds	r3, r3, r6
 800082e:	4307      	orrs	r7, r0
 8000830:	18bf      	adds	r7, r7, r2
 8000832:	4297      	cmp	r7, r2
 8000834:	4192      	sbcs	r2, r2
 8000836:	4252      	negs	r2, r2
 8000838:	4644      	mov	r4, r8
 800083a:	18d6      	adds	r6, r2, r3
 800083c:	e763      	b.n	8000706 <__aeabi_dadd+0x1f6>
 800083e:	0038      	movs	r0, r7
 8000840:	f001 fac0 	bl	8001dc4 <__clzsi2>
 8000844:	0003      	movs	r3, r0
 8000846:	3318      	adds	r3, #24
 8000848:	2b1f      	cmp	r3, #31
 800084a:	dc00      	bgt.n	800084e <__aeabi_dadd+0x33e>
 800084c:	e6bf      	b.n	80005ce <__aeabi_dadd+0xbe>
 800084e:	003a      	movs	r2, r7
 8000850:	3808      	subs	r0, #8
 8000852:	4082      	lsls	r2, r0
 8000854:	429c      	cmp	r4, r3
 8000856:	dd00      	ble.n	800085a <__aeabi_dadd+0x34a>
 8000858:	e083      	b.n	8000962 <__aeabi_dadd+0x452>
 800085a:	1b1b      	subs	r3, r3, r4
 800085c:	1c58      	adds	r0, r3, #1
 800085e:	281f      	cmp	r0, #31
 8000860:	dc00      	bgt.n	8000864 <__aeabi_dadd+0x354>
 8000862:	e1b4      	b.n	8000bce <__aeabi_dadd+0x6be>
 8000864:	0017      	movs	r7, r2
 8000866:	3b1f      	subs	r3, #31
 8000868:	40df      	lsrs	r7, r3
 800086a:	2820      	cmp	r0, #32
 800086c:	d005      	beq.n	800087a <__aeabi_dadd+0x36a>
 800086e:	2340      	movs	r3, #64	@ 0x40
 8000870:	1a1b      	subs	r3, r3, r0
 8000872:	409a      	lsls	r2, r3
 8000874:	1e53      	subs	r3, r2, #1
 8000876:	419a      	sbcs	r2, r3
 8000878:	4317      	orrs	r7, r2
 800087a:	2400      	movs	r4, #0
 800087c:	2f00      	cmp	r7, #0
 800087e:	d00a      	beq.n	8000896 <__aeabi_dadd+0x386>
 8000880:	077b      	lsls	r3, r7, #29
 8000882:	d000      	beq.n	8000886 <__aeabi_dadd+0x376>
 8000884:	e6c4      	b.n	8000610 <__aeabi_dadd+0x100>
 8000886:	0026      	movs	r6, r4
 8000888:	e79e      	b.n	80007c8 <__aeabi_dadd+0x2b8>
 800088a:	464b      	mov	r3, r9
 800088c:	000c      	movs	r4, r1
 800088e:	08d8      	lsrs	r0, r3, #3
 8000890:	e79b      	b.n	80007ca <__aeabi_dadd+0x2ba>
 8000892:	2700      	movs	r7, #0
 8000894:	4c01      	ldr	r4, [pc, #4]	@ (800089c <__aeabi_dadd+0x38c>)
 8000896:	2600      	movs	r6, #0
 8000898:	e783      	b.n	80007a2 <__aeabi_dadd+0x292>
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	000007ff 	.word	0x000007ff
 80008a0:	ff7fffff 	.word	0xff7fffff
 80008a4:	000007fe 	.word	0x000007fe
 80008a8:	464b      	mov	r3, r9
 80008aa:	0777      	lsls	r7, r6, #29
 80008ac:	08d8      	lsrs	r0, r3, #3
 80008ae:	4307      	orrs	r7, r0
 80008b0:	08f0      	lsrs	r0, r6, #3
 80008b2:	e791      	b.n	80007d8 <__aeabi_dadd+0x2c8>
 80008b4:	4fcd      	ldr	r7, [pc, #820]	@ (8000bec <__aeabi_dadd+0x6dc>)
 80008b6:	1c61      	adds	r1, r4, #1
 80008b8:	4239      	tst	r1, r7
 80008ba:	d16b      	bne.n	8000994 <__aeabi_dadd+0x484>
 80008bc:	0031      	movs	r1, r6
 80008be:	4648      	mov	r0, r9
 80008c0:	4301      	orrs	r1, r0
 80008c2:	2c00      	cmp	r4, #0
 80008c4:	d000      	beq.n	80008c8 <__aeabi_dadd+0x3b8>
 80008c6:	e14b      	b.n	8000b60 <__aeabi_dadd+0x650>
 80008c8:	001f      	movs	r7, r3
 80008ca:	4317      	orrs	r7, r2
 80008cc:	2900      	cmp	r1, #0
 80008ce:	d100      	bne.n	80008d2 <__aeabi_dadd+0x3c2>
 80008d0:	e181      	b.n	8000bd6 <__aeabi_dadd+0x6c6>
 80008d2:	2f00      	cmp	r7, #0
 80008d4:	d100      	bne.n	80008d8 <__aeabi_dadd+0x3c8>
 80008d6:	e74c      	b.n	8000772 <__aeabi_dadd+0x262>
 80008d8:	444a      	add	r2, r9
 80008da:	454a      	cmp	r2, r9
 80008dc:	4180      	sbcs	r0, r0
 80008de:	18f6      	adds	r6, r6, r3
 80008e0:	4240      	negs	r0, r0
 80008e2:	1836      	adds	r6, r6, r0
 80008e4:	0233      	lsls	r3, r6, #8
 80008e6:	d500      	bpl.n	80008ea <__aeabi_dadd+0x3da>
 80008e8:	e1b0      	b.n	8000c4c <__aeabi_dadd+0x73c>
 80008ea:	0017      	movs	r7, r2
 80008ec:	4691      	mov	r9, r2
 80008ee:	4337      	orrs	r7, r6
 80008f0:	d000      	beq.n	80008f4 <__aeabi_dadd+0x3e4>
 80008f2:	e73e      	b.n	8000772 <__aeabi_dadd+0x262>
 80008f4:	2600      	movs	r6, #0
 80008f6:	e754      	b.n	80007a2 <__aeabi_dadd+0x292>
 80008f8:	4649      	mov	r1, r9
 80008fa:	1a89      	subs	r1, r1, r2
 80008fc:	4688      	mov	r8, r1
 80008fe:	45c1      	cmp	r9, r8
 8000900:	41bf      	sbcs	r7, r7
 8000902:	1af1      	subs	r1, r6, r3
 8000904:	427f      	negs	r7, r7
 8000906:	1bc9      	subs	r1, r1, r7
 8000908:	020f      	lsls	r7, r1, #8
 800090a:	d461      	bmi.n	80009d0 <__aeabi_dadd+0x4c0>
 800090c:	4647      	mov	r7, r8
 800090e:	430f      	orrs	r7, r1
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x404>
 8000912:	e0bd      	b.n	8000a90 <__aeabi_dadd+0x580>
 8000914:	000e      	movs	r6, r1
 8000916:	4647      	mov	r7, r8
 8000918:	e651      	b.n	80005be <__aeabi_dadd+0xae>
 800091a:	4cb5      	ldr	r4, [pc, #724]	@ (8000bf0 <__aeabi_dadd+0x6e0>)
 800091c:	45a0      	cmp	r8, r4
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x412>
 8000920:	e100      	b.n	8000b24 <__aeabi_dadd+0x614>
 8000922:	2701      	movs	r7, #1
 8000924:	2938      	cmp	r1, #56	@ 0x38
 8000926:	dd00      	ble.n	800092a <__aeabi_dadd+0x41a>
 8000928:	e6b8      	b.n	800069c <__aeabi_dadd+0x18c>
 800092a:	2480      	movs	r4, #128	@ 0x80
 800092c:	0424      	lsls	r4, r4, #16
 800092e:	4326      	orrs	r6, r4
 8000930:	e6a3      	b.n	800067a <__aeabi_dadd+0x16a>
 8000932:	4eb0      	ldr	r6, [pc, #704]	@ (8000bf4 <__aeabi_dadd+0x6e4>)
 8000934:	1ae4      	subs	r4, r4, r3
 8000936:	4016      	ands	r6, r2
 8000938:	077b      	lsls	r3, r7, #29
 800093a:	d000      	beq.n	800093e <__aeabi_dadd+0x42e>
 800093c:	e73f      	b.n	80007be <__aeabi_dadd+0x2ae>
 800093e:	e743      	b.n	80007c8 <__aeabi_dadd+0x2b8>
 8000940:	000f      	movs	r7, r1
 8000942:	0018      	movs	r0, r3
 8000944:	3f20      	subs	r7, #32
 8000946:	40f8      	lsrs	r0, r7
 8000948:	4684      	mov	ip, r0
 800094a:	2920      	cmp	r1, #32
 800094c:	d003      	beq.n	8000956 <__aeabi_dadd+0x446>
 800094e:	2740      	movs	r7, #64	@ 0x40
 8000950:	1a79      	subs	r1, r7, r1
 8000952:	408b      	lsls	r3, r1
 8000954:	431a      	orrs	r2, r3
 8000956:	1e53      	subs	r3, r2, #1
 8000958:	419a      	sbcs	r2, r3
 800095a:	4663      	mov	r3, ip
 800095c:	0017      	movs	r7, r2
 800095e:	431f      	orrs	r7, r3
 8000960:	e622      	b.n	80005a8 <__aeabi_dadd+0x98>
 8000962:	48a4      	ldr	r0, [pc, #656]	@ (8000bf4 <__aeabi_dadd+0x6e4>)
 8000964:	1ae1      	subs	r1, r4, r3
 8000966:	4010      	ands	r0, r2
 8000968:	0747      	lsls	r7, r0, #29
 800096a:	08c0      	lsrs	r0, r0, #3
 800096c:	e707      	b.n	800077e <__aeabi_dadd+0x26e>
 800096e:	0034      	movs	r4, r6
 8000970:	4648      	mov	r0, r9
 8000972:	4304      	orrs	r4, r0
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x468>
 8000976:	e0fa      	b.n	8000b6e <__aeabi_dadd+0x65e>
 8000978:	1e4c      	subs	r4, r1, #1
 800097a:	2901      	cmp	r1, #1
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x470>
 800097e:	e0d7      	b.n	8000b30 <__aeabi_dadd+0x620>
 8000980:	4f9b      	ldr	r7, [pc, #620]	@ (8000bf0 <__aeabi_dadd+0x6e0>)
 8000982:	42b9      	cmp	r1, r7
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x478>
 8000986:	e0e2      	b.n	8000b4e <__aeabi_dadd+0x63e>
 8000988:	2701      	movs	r7, #1
 800098a:	2c38      	cmp	r4, #56	@ 0x38
 800098c:	dd00      	ble.n	8000990 <__aeabi_dadd+0x480>
 800098e:	e74f      	b.n	8000830 <__aeabi_dadd+0x320>
 8000990:	0021      	movs	r1, r4
 8000992:	e73c      	b.n	800080e <__aeabi_dadd+0x2fe>
 8000994:	4c96      	ldr	r4, [pc, #600]	@ (8000bf0 <__aeabi_dadd+0x6e0>)
 8000996:	42a1      	cmp	r1, r4
 8000998:	d100      	bne.n	800099c <__aeabi_dadd+0x48c>
 800099a:	e0dd      	b.n	8000b58 <__aeabi_dadd+0x648>
 800099c:	444a      	add	r2, r9
 800099e:	454a      	cmp	r2, r9
 80009a0:	4180      	sbcs	r0, r0
 80009a2:	18f3      	adds	r3, r6, r3
 80009a4:	4240      	negs	r0, r0
 80009a6:	1818      	adds	r0, r3, r0
 80009a8:	07c7      	lsls	r7, r0, #31
 80009aa:	0852      	lsrs	r2, r2, #1
 80009ac:	4317      	orrs	r7, r2
 80009ae:	0846      	lsrs	r6, r0, #1
 80009b0:	0752      	lsls	r2, r2, #29
 80009b2:	d005      	beq.n	80009c0 <__aeabi_dadd+0x4b0>
 80009b4:	220f      	movs	r2, #15
 80009b6:	000c      	movs	r4, r1
 80009b8:	403a      	ands	r2, r7
 80009ba:	2a04      	cmp	r2, #4
 80009bc:	d000      	beq.n	80009c0 <__aeabi_dadd+0x4b0>
 80009be:	e62c      	b.n	800061a <__aeabi_dadd+0x10a>
 80009c0:	0776      	lsls	r6, r6, #29
 80009c2:	08ff      	lsrs	r7, r7, #3
 80009c4:	4337      	orrs	r7, r6
 80009c6:	0900      	lsrs	r0, r0, #4
 80009c8:	e6d9      	b.n	800077e <__aeabi_dadd+0x26e>
 80009ca:	2700      	movs	r7, #0
 80009cc:	2600      	movs	r6, #0
 80009ce:	e6e8      	b.n	80007a2 <__aeabi_dadd+0x292>
 80009d0:	4649      	mov	r1, r9
 80009d2:	1a57      	subs	r7, r2, r1
 80009d4:	42ba      	cmp	r2, r7
 80009d6:	4192      	sbcs	r2, r2
 80009d8:	1b9e      	subs	r6, r3, r6
 80009da:	4252      	negs	r2, r2
 80009dc:	4665      	mov	r5, ip
 80009de:	1ab6      	subs	r6, r6, r2
 80009e0:	e5ed      	b.n	80005be <__aeabi_dadd+0xae>
 80009e2:	2900      	cmp	r1, #0
 80009e4:	d000      	beq.n	80009e8 <__aeabi_dadd+0x4d8>
 80009e6:	e0c6      	b.n	8000b76 <__aeabi_dadd+0x666>
 80009e8:	2f00      	cmp	r7, #0
 80009ea:	d167      	bne.n	8000abc <__aeabi_dadd+0x5ac>
 80009ec:	2680      	movs	r6, #128	@ 0x80
 80009ee:	2500      	movs	r5, #0
 80009f0:	4c7f      	ldr	r4, [pc, #508]	@ (8000bf0 <__aeabi_dadd+0x6e0>)
 80009f2:	0336      	lsls	r6, r6, #12
 80009f4:	e6d5      	b.n	80007a2 <__aeabi_dadd+0x292>
 80009f6:	4665      	mov	r5, ip
 80009f8:	000c      	movs	r4, r1
 80009fa:	001e      	movs	r6, r3
 80009fc:	08d0      	lsrs	r0, r2, #3
 80009fe:	e6e4      	b.n	80007ca <__aeabi_dadd+0x2ba>
 8000a00:	444a      	add	r2, r9
 8000a02:	454a      	cmp	r2, r9
 8000a04:	4180      	sbcs	r0, r0
 8000a06:	18f3      	adds	r3, r6, r3
 8000a08:	4240      	negs	r0, r0
 8000a0a:	1818      	adds	r0, r3, r0
 8000a0c:	0011      	movs	r1, r2
 8000a0e:	0203      	lsls	r3, r0, #8
 8000a10:	d400      	bmi.n	8000a14 <__aeabi_dadd+0x504>
 8000a12:	e096      	b.n	8000b42 <__aeabi_dadd+0x632>
 8000a14:	4b77      	ldr	r3, [pc, #476]	@ (8000bf4 <__aeabi_dadd+0x6e4>)
 8000a16:	0849      	lsrs	r1, r1, #1
 8000a18:	4018      	ands	r0, r3
 8000a1a:	07c3      	lsls	r3, r0, #31
 8000a1c:	430b      	orrs	r3, r1
 8000a1e:	0844      	lsrs	r4, r0, #1
 8000a20:	0749      	lsls	r1, r1, #29
 8000a22:	d100      	bne.n	8000a26 <__aeabi_dadd+0x516>
 8000a24:	e129      	b.n	8000c7a <__aeabi_dadd+0x76a>
 8000a26:	220f      	movs	r2, #15
 8000a28:	401a      	ands	r2, r3
 8000a2a:	2a04      	cmp	r2, #4
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_dadd+0x520>
 8000a2e:	e0ea      	b.n	8000c06 <__aeabi_dadd+0x6f6>
 8000a30:	1d1f      	adds	r7, r3, #4
 8000a32:	429f      	cmp	r7, r3
 8000a34:	41b6      	sbcs	r6, r6
 8000a36:	4276      	negs	r6, r6
 8000a38:	1936      	adds	r6, r6, r4
 8000a3a:	2402      	movs	r4, #2
 8000a3c:	e6c4      	b.n	80007c8 <__aeabi_dadd+0x2b8>
 8000a3e:	4649      	mov	r1, r9
 8000a40:	1a8f      	subs	r7, r1, r2
 8000a42:	45b9      	cmp	r9, r7
 8000a44:	4180      	sbcs	r0, r0
 8000a46:	1af6      	subs	r6, r6, r3
 8000a48:	4240      	negs	r0, r0
 8000a4a:	1a36      	subs	r6, r6, r0
 8000a4c:	0233      	lsls	r3, r6, #8
 8000a4e:	d406      	bmi.n	8000a5e <__aeabi_dadd+0x54e>
 8000a50:	0773      	lsls	r3, r6, #29
 8000a52:	08ff      	lsrs	r7, r7, #3
 8000a54:	2101      	movs	r1, #1
 8000a56:	431f      	orrs	r7, r3
 8000a58:	08f0      	lsrs	r0, r6, #3
 8000a5a:	e690      	b.n	800077e <__aeabi_dadd+0x26e>
 8000a5c:	4665      	mov	r5, ip
 8000a5e:	2401      	movs	r4, #1
 8000a60:	e5ab      	b.n	80005ba <__aeabi_dadd+0xaa>
 8000a62:	464b      	mov	r3, r9
 8000a64:	0777      	lsls	r7, r6, #29
 8000a66:	08d8      	lsrs	r0, r3, #3
 8000a68:	4307      	orrs	r7, r0
 8000a6a:	08f0      	lsrs	r0, r6, #3
 8000a6c:	e6b4      	b.n	80007d8 <__aeabi_dadd+0x2c8>
 8000a6e:	000f      	movs	r7, r1
 8000a70:	0018      	movs	r0, r3
 8000a72:	3f20      	subs	r7, #32
 8000a74:	40f8      	lsrs	r0, r7
 8000a76:	4684      	mov	ip, r0
 8000a78:	2920      	cmp	r1, #32
 8000a7a:	d003      	beq.n	8000a84 <__aeabi_dadd+0x574>
 8000a7c:	2740      	movs	r7, #64	@ 0x40
 8000a7e:	1a79      	subs	r1, r7, r1
 8000a80:	408b      	lsls	r3, r1
 8000a82:	431a      	orrs	r2, r3
 8000a84:	1e53      	subs	r3, r2, #1
 8000a86:	419a      	sbcs	r2, r3
 8000a88:	4663      	mov	r3, ip
 8000a8a:	0017      	movs	r7, r2
 8000a8c:	431f      	orrs	r7, r3
 8000a8e:	e635      	b.n	80006fc <__aeabi_dadd+0x1ec>
 8000a90:	2500      	movs	r5, #0
 8000a92:	2400      	movs	r4, #0
 8000a94:	2600      	movs	r6, #0
 8000a96:	e684      	b.n	80007a2 <__aeabi_dadd+0x292>
 8000a98:	000c      	movs	r4, r1
 8000a9a:	0035      	movs	r5, r6
 8000a9c:	3c20      	subs	r4, #32
 8000a9e:	40e5      	lsrs	r5, r4
 8000aa0:	2920      	cmp	r1, #32
 8000aa2:	d005      	beq.n	8000ab0 <__aeabi_dadd+0x5a0>
 8000aa4:	2440      	movs	r4, #64	@ 0x40
 8000aa6:	1a61      	subs	r1, r4, r1
 8000aa8:	408e      	lsls	r6, r1
 8000aaa:	4649      	mov	r1, r9
 8000aac:	4331      	orrs	r1, r6
 8000aae:	4689      	mov	r9, r1
 8000ab0:	4648      	mov	r0, r9
 8000ab2:	1e41      	subs	r1, r0, #1
 8000ab4:	4188      	sbcs	r0, r1
 8000ab6:	0007      	movs	r7, r0
 8000ab8:	432f      	orrs	r7, r5
 8000aba:	e5ef      	b.n	800069c <__aeabi_dadd+0x18c>
 8000abc:	08d2      	lsrs	r2, r2, #3
 8000abe:	075f      	lsls	r7, r3, #29
 8000ac0:	4665      	mov	r5, ip
 8000ac2:	4317      	orrs	r7, r2
 8000ac4:	08d8      	lsrs	r0, r3, #3
 8000ac6:	e687      	b.n	80007d8 <__aeabi_dadd+0x2c8>
 8000ac8:	1a17      	subs	r7, r2, r0
 8000aca:	42ba      	cmp	r2, r7
 8000acc:	4192      	sbcs	r2, r2
 8000ace:	1b9e      	subs	r6, r3, r6
 8000ad0:	4252      	negs	r2, r2
 8000ad2:	1ab6      	subs	r6, r6, r2
 8000ad4:	0233      	lsls	r3, r6, #8
 8000ad6:	d4c1      	bmi.n	8000a5c <__aeabi_dadd+0x54c>
 8000ad8:	0773      	lsls	r3, r6, #29
 8000ada:	08ff      	lsrs	r7, r7, #3
 8000adc:	4665      	mov	r5, ip
 8000ade:	2101      	movs	r1, #1
 8000ae0:	431f      	orrs	r7, r3
 8000ae2:	08f0      	lsrs	r0, r6, #3
 8000ae4:	e64b      	b.n	800077e <__aeabi_dadd+0x26e>
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d07b      	beq.n	8000be2 <__aeabi_dadd+0x6d2>
 8000aea:	4665      	mov	r5, ip
 8000aec:	001e      	movs	r6, r3
 8000aee:	4691      	mov	r9, r2
 8000af0:	e63f      	b.n	8000772 <__aeabi_dadd+0x262>
 8000af2:	1a81      	subs	r1, r0, r2
 8000af4:	4688      	mov	r8, r1
 8000af6:	45c1      	cmp	r9, r8
 8000af8:	41a4      	sbcs	r4, r4
 8000afa:	1af1      	subs	r1, r6, r3
 8000afc:	4264      	negs	r4, r4
 8000afe:	1b09      	subs	r1, r1, r4
 8000b00:	2480      	movs	r4, #128	@ 0x80
 8000b02:	0424      	lsls	r4, r4, #16
 8000b04:	4221      	tst	r1, r4
 8000b06:	d077      	beq.n	8000bf8 <__aeabi_dadd+0x6e8>
 8000b08:	1a10      	subs	r0, r2, r0
 8000b0a:	4282      	cmp	r2, r0
 8000b0c:	4192      	sbcs	r2, r2
 8000b0e:	0007      	movs	r7, r0
 8000b10:	1b9e      	subs	r6, r3, r6
 8000b12:	4252      	negs	r2, r2
 8000b14:	1ab6      	subs	r6, r6, r2
 8000b16:	4337      	orrs	r7, r6
 8000b18:	d000      	beq.n	8000b1c <__aeabi_dadd+0x60c>
 8000b1a:	e0a0      	b.n	8000c5e <__aeabi_dadd+0x74e>
 8000b1c:	4665      	mov	r5, ip
 8000b1e:	2400      	movs	r4, #0
 8000b20:	2600      	movs	r6, #0
 8000b22:	e63e      	b.n	80007a2 <__aeabi_dadd+0x292>
 8000b24:	075f      	lsls	r7, r3, #29
 8000b26:	08d2      	lsrs	r2, r2, #3
 8000b28:	4665      	mov	r5, ip
 8000b2a:	4317      	orrs	r7, r2
 8000b2c:	08d8      	lsrs	r0, r3, #3
 8000b2e:	e653      	b.n	80007d8 <__aeabi_dadd+0x2c8>
 8000b30:	1881      	adds	r1, r0, r2
 8000b32:	4291      	cmp	r1, r2
 8000b34:	4192      	sbcs	r2, r2
 8000b36:	18f0      	adds	r0, r6, r3
 8000b38:	4252      	negs	r2, r2
 8000b3a:	1880      	adds	r0, r0, r2
 8000b3c:	0203      	lsls	r3, r0, #8
 8000b3e:	d500      	bpl.n	8000b42 <__aeabi_dadd+0x632>
 8000b40:	e768      	b.n	8000a14 <__aeabi_dadd+0x504>
 8000b42:	0747      	lsls	r7, r0, #29
 8000b44:	08c9      	lsrs	r1, r1, #3
 8000b46:	430f      	orrs	r7, r1
 8000b48:	08c0      	lsrs	r0, r0, #3
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	e617      	b.n	800077e <__aeabi_dadd+0x26e>
 8000b4e:	08d2      	lsrs	r2, r2, #3
 8000b50:	075f      	lsls	r7, r3, #29
 8000b52:	4317      	orrs	r7, r2
 8000b54:	08d8      	lsrs	r0, r3, #3
 8000b56:	e63f      	b.n	80007d8 <__aeabi_dadd+0x2c8>
 8000b58:	000c      	movs	r4, r1
 8000b5a:	2600      	movs	r6, #0
 8000b5c:	2700      	movs	r7, #0
 8000b5e:	e620      	b.n	80007a2 <__aeabi_dadd+0x292>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	d156      	bne.n	8000c12 <__aeabi_dadd+0x702>
 8000b64:	075f      	lsls	r7, r3, #29
 8000b66:	08d2      	lsrs	r2, r2, #3
 8000b68:	4317      	orrs	r7, r2
 8000b6a:	08d8      	lsrs	r0, r3, #3
 8000b6c:	e634      	b.n	80007d8 <__aeabi_dadd+0x2c8>
 8000b6e:	000c      	movs	r4, r1
 8000b70:	001e      	movs	r6, r3
 8000b72:	08d0      	lsrs	r0, r2, #3
 8000b74:	e629      	b.n	80007ca <__aeabi_dadd+0x2ba>
 8000b76:	08c1      	lsrs	r1, r0, #3
 8000b78:	0770      	lsls	r0, r6, #29
 8000b7a:	4301      	orrs	r1, r0
 8000b7c:	08f0      	lsrs	r0, r6, #3
 8000b7e:	2f00      	cmp	r7, #0
 8000b80:	d062      	beq.n	8000c48 <__aeabi_dadd+0x738>
 8000b82:	2480      	movs	r4, #128	@ 0x80
 8000b84:	0324      	lsls	r4, r4, #12
 8000b86:	4220      	tst	r0, r4
 8000b88:	d007      	beq.n	8000b9a <__aeabi_dadd+0x68a>
 8000b8a:	08de      	lsrs	r6, r3, #3
 8000b8c:	4226      	tst	r6, r4
 8000b8e:	d104      	bne.n	8000b9a <__aeabi_dadd+0x68a>
 8000b90:	4665      	mov	r5, ip
 8000b92:	0030      	movs	r0, r6
 8000b94:	08d1      	lsrs	r1, r2, #3
 8000b96:	075b      	lsls	r3, r3, #29
 8000b98:	4319      	orrs	r1, r3
 8000b9a:	0f4f      	lsrs	r7, r1, #29
 8000b9c:	00c9      	lsls	r1, r1, #3
 8000b9e:	08c9      	lsrs	r1, r1, #3
 8000ba0:	077f      	lsls	r7, r7, #29
 8000ba2:	430f      	orrs	r7, r1
 8000ba4:	e618      	b.n	80007d8 <__aeabi_dadd+0x2c8>
 8000ba6:	000c      	movs	r4, r1
 8000ba8:	0030      	movs	r0, r6
 8000baa:	3c20      	subs	r4, #32
 8000bac:	40e0      	lsrs	r0, r4
 8000bae:	4684      	mov	ip, r0
 8000bb0:	2920      	cmp	r1, #32
 8000bb2:	d005      	beq.n	8000bc0 <__aeabi_dadd+0x6b0>
 8000bb4:	2440      	movs	r4, #64	@ 0x40
 8000bb6:	1a61      	subs	r1, r4, r1
 8000bb8:	408e      	lsls	r6, r1
 8000bba:	4649      	mov	r1, r9
 8000bbc:	4331      	orrs	r1, r6
 8000bbe:	4689      	mov	r9, r1
 8000bc0:	4648      	mov	r0, r9
 8000bc2:	1e41      	subs	r1, r0, #1
 8000bc4:	4188      	sbcs	r0, r1
 8000bc6:	4661      	mov	r1, ip
 8000bc8:	0007      	movs	r7, r0
 8000bca:	430f      	orrs	r7, r1
 8000bcc:	e630      	b.n	8000830 <__aeabi_dadd+0x320>
 8000bce:	2120      	movs	r1, #32
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	1a09      	subs	r1, r1, r0
 8000bd4:	e50e      	b.n	80005f4 <__aeabi_dadd+0xe4>
 8000bd6:	001e      	movs	r6, r3
 8000bd8:	2f00      	cmp	r7, #0
 8000bda:	d000      	beq.n	8000bde <__aeabi_dadd+0x6ce>
 8000bdc:	e522      	b.n	8000624 <__aeabi_dadd+0x114>
 8000bde:	2400      	movs	r4, #0
 8000be0:	e758      	b.n	8000a94 <__aeabi_dadd+0x584>
 8000be2:	2500      	movs	r5, #0
 8000be4:	2400      	movs	r4, #0
 8000be6:	2600      	movs	r6, #0
 8000be8:	e5db      	b.n	80007a2 <__aeabi_dadd+0x292>
 8000bea:	46c0      	nop			@ (mov r8, r8)
 8000bec:	000007fe 	.word	0x000007fe
 8000bf0:	000007ff 	.word	0x000007ff
 8000bf4:	ff7fffff 	.word	0xff7fffff
 8000bf8:	4647      	mov	r7, r8
 8000bfa:	430f      	orrs	r7, r1
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_dadd+0x6f0>
 8000bfe:	e747      	b.n	8000a90 <__aeabi_dadd+0x580>
 8000c00:	000e      	movs	r6, r1
 8000c02:	46c1      	mov	r9, r8
 8000c04:	e5b5      	b.n	8000772 <__aeabi_dadd+0x262>
 8000c06:	08df      	lsrs	r7, r3, #3
 8000c08:	0764      	lsls	r4, r4, #29
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4327      	orrs	r7, r4
 8000c0e:	0900      	lsrs	r0, r0, #4
 8000c10:	e5b5      	b.n	800077e <__aeabi_dadd+0x26e>
 8000c12:	0019      	movs	r1, r3
 8000c14:	08c0      	lsrs	r0, r0, #3
 8000c16:	0777      	lsls	r7, r6, #29
 8000c18:	4307      	orrs	r7, r0
 8000c1a:	4311      	orrs	r1, r2
 8000c1c:	08f0      	lsrs	r0, r6, #3
 8000c1e:	2900      	cmp	r1, #0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0x714>
 8000c22:	e5d9      	b.n	80007d8 <__aeabi_dadd+0x2c8>
 8000c24:	2180      	movs	r1, #128	@ 0x80
 8000c26:	0309      	lsls	r1, r1, #12
 8000c28:	4208      	tst	r0, r1
 8000c2a:	d007      	beq.n	8000c3c <__aeabi_dadd+0x72c>
 8000c2c:	08dc      	lsrs	r4, r3, #3
 8000c2e:	420c      	tst	r4, r1
 8000c30:	d104      	bne.n	8000c3c <__aeabi_dadd+0x72c>
 8000c32:	08d2      	lsrs	r2, r2, #3
 8000c34:	075b      	lsls	r3, r3, #29
 8000c36:	431a      	orrs	r2, r3
 8000c38:	0017      	movs	r7, r2
 8000c3a:	0020      	movs	r0, r4
 8000c3c:	0f7b      	lsrs	r3, r7, #29
 8000c3e:	00ff      	lsls	r7, r7, #3
 8000c40:	08ff      	lsrs	r7, r7, #3
 8000c42:	075b      	lsls	r3, r3, #29
 8000c44:	431f      	orrs	r7, r3
 8000c46:	e5c7      	b.n	80007d8 <__aeabi_dadd+0x2c8>
 8000c48:	000f      	movs	r7, r1
 8000c4a:	e5c5      	b.n	80007d8 <__aeabi_dadd+0x2c8>
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <__aeabi_dadd+0x788>)
 8000c4e:	08d2      	lsrs	r2, r2, #3
 8000c50:	4033      	ands	r3, r6
 8000c52:	075f      	lsls	r7, r3, #29
 8000c54:	025b      	lsls	r3, r3, #9
 8000c56:	2401      	movs	r4, #1
 8000c58:	4317      	orrs	r7, r2
 8000c5a:	0b1e      	lsrs	r6, r3, #12
 8000c5c:	e5a1      	b.n	80007a2 <__aeabi_dadd+0x292>
 8000c5e:	4226      	tst	r6, r4
 8000c60:	d012      	beq.n	8000c88 <__aeabi_dadd+0x778>
 8000c62:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <__aeabi_dadd+0x788>)
 8000c64:	4665      	mov	r5, ip
 8000c66:	0002      	movs	r2, r0
 8000c68:	2401      	movs	r4, #1
 8000c6a:	401e      	ands	r6, r3
 8000c6c:	e4e6      	b.n	800063c <__aeabi_dadd+0x12c>
 8000c6e:	0021      	movs	r1, r4
 8000c70:	e585      	b.n	800077e <__aeabi_dadd+0x26e>
 8000c72:	0017      	movs	r7, r2
 8000c74:	e5a8      	b.n	80007c8 <__aeabi_dadd+0x2b8>
 8000c76:	003a      	movs	r2, r7
 8000c78:	e4d4      	b.n	8000624 <__aeabi_dadd+0x114>
 8000c7a:	08db      	lsrs	r3, r3, #3
 8000c7c:	0764      	lsls	r4, r4, #29
 8000c7e:	431c      	orrs	r4, r3
 8000c80:	0027      	movs	r7, r4
 8000c82:	2102      	movs	r1, #2
 8000c84:	0900      	lsrs	r0, r0, #4
 8000c86:	e57a      	b.n	800077e <__aeabi_dadd+0x26e>
 8000c88:	08c0      	lsrs	r0, r0, #3
 8000c8a:	0777      	lsls	r7, r6, #29
 8000c8c:	4307      	orrs	r7, r0
 8000c8e:	4665      	mov	r5, ip
 8000c90:	2100      	movs	r1, #0
 8000c92:	08f0      	lsrs	r0, r6, #3
 8000c94:	e573      	b.n	800077e <__aeabi_dadd+0x26e>
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	ff7fffff 	.word	0xff7fffff

08000c9c <__aeabi_ddiv>:
 8000c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9e:	46de      	mov	lr, fp
 8000ca0:	4645      	mov	r5, r8
 8000ca2:	4657      	mov	r7, sl
 8000ca4:	464e      	mov	r6, r9
 8000ca6:	b5e0      	push	{r5, r6, r7, lr}
 8000ca8:	b087      	sub	sp, #28
 8000caa:	9200      	str	r2, [sp, #0]
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	030b      	lsls	r3, r1, #12
 8000cb0:	0b1b      	lsrs	r3, r3, #12
 8000cb2:	469b      	mov	fp, r3
 8000cb4:	0fca      	lsrs	r2, r1, #31
 8000cb6:	004b      	lsls	r3, r1, #1
 8000cb8:	0004      	movs	r4, r0
 8000cba:	4680      	mov	r8, r0
 8000cbc:	0d5b      	lsrs	r3, r3, #21
 8000cbe:	9202      	str	r2, [sp, #8]
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_ddiv+0x28>
 8000cc2:	e098      	b.n	8000df6 <__aeabi_ddiv+0x15a>
 8000cc4:	4a7c      	ldr	r2, [pc, #496]	@ (8000eb8 <__aeabi_ddiv+0x21c>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d037      	beq.n	8000d3a <__aeabi_ddiv+0x9e>
 8000cca:	4659      	mov	r1, fp
 8000ccc:	0f42      	lsrs	r2, r0, #29
 8000cce:	00c9      	lsls	r1, r1, #3
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	2180      	movs	r1, #128	@ 0x80
 8000cd4:	0409      	lsls	r1, r1, #16
 8000cd6:	4311      	orrs	r1, r2
 8000cd8:	00c2      	lsls	r2, r0, #3
 8000cda:	4690      	mov	r8, r2
 8000cdc:	4a77      	ldr	r2, [pc, #476]	@ (8000ebc <__aeabi_ddiv+0x220>)
 8000cde:	4689      	mov	r9, r1
 8000ce0:	4692      	mov	sl, r2
 8000ce2:	449a      	add	sl, r3
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	2400      	movs	r4, #0
 8000ce8:	9303      	str	r3, [sp, #12]
 8000cea:	9e00      	ldr	r6, [sp, #0]
 8000cec:	9f01      	ldr	r7, [sp, #4]
 8000cee:	033b      	lsls	r3, r7, #12
 8000cf0:	0b1b      	lsrs	r3, r3, #12
 8000cf2:	469b      	mov	fp, r3
 8000cf4:	007b      	lsls	r3, r7, #1
 8000cf6:	0030      	movs	r0, r6
 8000cf8:	0d5b      	lsrs	r3, r3, #21
 8000cfa:	0ffd      	lsrs	r5, r7, #31
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d059      	beq.n	8000db4 <__aeabi_ddiv+0x118>
 8000d00:	4a6d      	ldr	r2, [pc, #436]	@ (8000eb8 <__aeabi_ddiv+0x21c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d048      	beq.n	8000d98 <__aeabi_ddiv+0xfc>
 8000d06:	4659      	mov	r1, fp
 8000d08:	0f72      	lsrs	r2, r6, #29
 8000d0a:	00c9      	lsls	r1, r1, #3
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	2180      	movs	r1, #128	@ 0x80
 8000d10:	0409      	lsls	r1, r1, #16
 8000d12:	4311      	orrs	r1, r2
 8000d14:	468b      	mov	fp, r1
 8000d16:	4969      	ldr	r1, [pc, #420]	@ (8000ebc <__aeabi_ddiv+0x220>)
 8000d18:	00f2      	lsls	r2, r6, #3
 8000d1a:	468c      	mov	ip, r1
 8000d1c:	4651      	mov	r1, sl
 8000d1e:	4463      	add	r3, ip
 8000d20:	1acb      	subs	r3, r1, r3
 8000d22:	469a      	mov	sl, r3
 8000d24:	2100      	movs	r1, #0
 8000d26:	9e02      	ldr	r6, [sp, #8]
 8000d28:	406e      	eors	r6, r5
 8000d2a:	b2f6      	uxtb	r6, r6
 8000d2c:	2c0f      	cmp	r4, #15
 8000d2e:	d900      	bls.n	8000d32 <__aeabi_ddiv+0x96>
 8000d30:	e0ce      	b.n	8000ed0 <__aeabi_ddiv+0x234>
 8000d32:	4b63      	ldr	r3, [pc, #396]	@ (8000ec0 <__aeabi_ddiv+0x224>)
 8000d34:	00a4      	lsls	r4, r4, #2
 8000d36:	591b      	ldr	r3, [r3, r4]
 8000d38:	469f      	mov	pc, r3
 8000d3a:	465a      	mov	r2, fp
 8000d3c:	4302      	orrs	r2, r0
 8000d3e:	4691      	mov	r9, r2
 8000d40:	d000      	beq.n	8000d44 <__aeabi_ddiv+0xa8>
 8000d42:	e090      	b.n	8000e66 <__aeabi_ddiv+0x1ca>
 8000d44:	469a      	mov	sl, r3
 8000d46:	2302      	movs	r3, #2
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2408      	movs	r4, #8
 8000d4c:	9303      	str	r3, [sp, #12]
 8000d4e:	e7cc      	b.n	8000cea <__aeabi_ddiv+0x4e>
 8000d50:	46cb      	mov	fp, r9
 8000d52:	4642      	mov	r2, r8
 8000d54:	9d02      	ldr	r5, [sp, #8]
 8000d56:	9903      	ldr	r1, [sp, #12]
 8000d58:	2902      	cmp	r1, #2
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_ddiv+0xc2>
 8000d5c:	e1de      	b.n	800111c <__aeabi_ddiv+0x480>
 8000d5e:	2903      	cmp	r1, #3
 8000d60:	d100      	bne.n	8000d64 <__aeabi_ddiv+0xc8>
 8000d62:	e08d      	b.n	8000e80 <__aeabi_ddiv+0x1e4>
 8000d64:	2901      	cmp	r1, #1
 8000d66:	d000      	beq.n	8000d6a <__aeabi_ddiv+0xce>
 8000d68:	e179      	b.n	800105e <__aeabi_ddiv+0x3c2>
 8000d6a:	002e      	movs	r6, r5
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2300      	movs	r3, #0
 8000d70:	2400      	movs	r4, #0
 8000d72:	4690      	mov	r8, r2
 8000d74:	051b      	lsls	r3, r3, #20
 8000d76:	4323      	orrs	r3, r4
 8000d78:	07f6      	lsls	r6, r6, #31
 8000d7a:	4333      	orrs	r3, r6
 8000d7c:	4640      	mov	r0, r8
 8000d7e:	0019      	movs	r1, r3
 8000d80:	b007      	add	sp, #28
 8000d82:	bcf0      	pop	{r4, r5, r6, r7}
 8000d84:	46bb      	mov	fp, r7
 8000d86:	46b2      	mov	sl, r6
 8000d88:	46a9      	mov	r9, r5
 8000d8a:	46a0      	mov	r8, r4
 8000d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2400      	movs	r4, #0
 8000d92:	4690      	mov	r8, r2
 8000d94:	4b48      	ldr	r3, [pc, #288]	@ (8000eb8 <__aeabi_ddiv+0x21c>)
 8000d96:	e7ed      	b.n	8000d74 <__aeabi_ddiv+0xd8>
 8000d98:	465a      	mov	r2, fp
 8000d9a:	9b00      	ldr	r3, [sp, #0]
 8000d9c:	431a      	orrs	r2, r3
 8000d9e:	4b49      	ldr	r3, [pc, #292]	@ (8000ec4 <__aeabi_ddiv+0x228>)
 8000da0:	469c      	mov	ip, r3
 8000da2:	44e2      	add	sl, ip
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	d159      	bne.n	8000e5c <__aeabi_ddiv+0x1c0>
 8000da8:	2302      	movs	r3, #2
 8000daa:	431c      	orrs	r4, r3
 8000dac:	2300      	movs	r3, #0
 8000dae:	2102      	movs	r1, #2
 8000db0:	469b      	mov	fp, r3
 8000db2:	e7b8      	b.n	8000d26 <__aeabi_ddiv+0x8a>
 8000db4:	465a      	mov	r2, fp
 8000db6:	9b00      	ldr	r3, [sp, #0]
 8000db8:	431a      	orrs	r2, r3
 8000dba:	d049      	beq.n	8000e50 <__aeabi_ddiv+0x1b4>
 8000dbc:	465b      	mov	r3, fp
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_ddiv+0x128>
 8000dc2:	e19c      	b.n	80010fe <__aeabi_ddiv+0x462>
 8000dc4:	4658      	mov	r0, fp
 8000dc6:	f000 fffd 	bl	8001dc4 <__clzsi2>
 8000dca:	0002      	movs	r2, r0
 8000dcc:	0003      	movs	r3, r0
 8000dce:	3a0b      	subs	r2, #11
 8000dd0:	271d      	movs	r7, #29
 8000dd2:	9e00      	ldr	r6, [sp, #0]
 8000dd4:	1aba      	subs	r2, r7, r2
 8000dd6:	0019      	movs	r1, r3
 8000dd8:	4658      	mov	r0, fp
 8000dda:	40d6      	lsrs	r6, r2
 8000ddc:	3908      	subs	r1, #8
 8000dde:	4088      	lsls	r0, r1
 8000de0:	0032      	movs	r2, r6
 8000de2:	4302      	orrs	r2, r0
 8000de4:	4693      	mov	fp, r2
 8000de6:	9a00      	ldr	r2, [sp, #0]
 8000de8:	408a      	lsls	r2, r1
 8000dea:	4937      	ldr	r1, [pc, #220]	@ (8000ec8 <__aeabi_ddiv+0x22c>)
 8000dec:	4453      	add	r3, sl
 8000dee:	468a      	mov	sl, r1
 8000df0:	2100      	movs	r1, #0
 8000df2:	449a      	add	sl, r3
 8000df4:	e797      	b.n	8000d26 <__aeabi_ddiv+0x8a>
 8000df6:	465b      	mov	r3, fp
 8000df8:	4303      	orrs	r3, r0
 8000dfa:	4699      	mov	r9, r3
 8000dfc:	d021      	beq.n	8000e42 <__aeabi_ddiv+0x1a6>
 8000dfe:	465b      	mov	r3, fp
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d100      	bne.n	8000e06 <__aeabi_ddiv+0x16a>
 8000e04:	e169      	b.n	80010da <__aeabi_ddiv+0x43e>
 8000e06:	4658      	mov	r0, fp
 8000e08:	f000 ffdc 	bl	8001dc4 <__clzsi2>
 8000e0c:	230b      	movs	r3, #11
 8000e0e:	425b      	negs	r3, r3
 8000e10:	469c      	mov	ip, r3
 8000e12:	0002      	movs	r2, r0
 8000e14:	4484      	add	ip, r0
 8000e16:	4666      	mov	r6, ip
 8000e18:	231d      	movs	r3, #29
 8000e1a:	1b9b      	subs	r3, r3, r6
 8000e1c:	0026      	movs	r6, r4
 8000e1e:	0011      	movs	r1, r2
 8000e20:	4658      	mov	r0, fp
 8000e22:	40de      	lsrs	r6, r3
 8000e24:	3908      	subs	r1, #8
 8000e26:	4088      	lsls	r0, r1
 8000e28:	0033      	movs	r3, r6
 8000e2a:	4303      	orrs	r3, r0
 8000e2c:	4699      	mov	r9, r3
 8000e2e:	0023      	movs	r3, r4
 8000e30:	408b      	lsls	r3, r1
 8000e32:	4698      	mov	r8, r3
 8000e34:	4b25      	ldr	r3, [pc, #148]	@ (8000ecc <__aeabi_ddiv+0x230>)
 8000e36:	2400      	movs	r4, #0
 8000e38:	1a9b      	subs	r3, r3, r2
 8000e3a:	469a      	mov	sl, r3
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	9303      	str	r3, [sp, #12]
 8000e40:	e753      	b.n	8000cea <__aeabi_ddiv+0x4e>
 8000e42:	2300      	movs	r3, #0
 8000e44:	4698      	mov	r8, r3
 8000e46:	469a      	mov	sl, r3
 8000e48:	3301      	adds	r3, #1
 8000e4a:	2404      	movs	r4, #4
 8000e4c:	9303      	str	r3, [sp, #12]
 8000e4e:	e74c      	b.n	8000cea <__aeabi_ddiv+0x4e>
 8000e50:	2301      	movs	r3, #1
 8000e52:	431c      	orrs	r4, r3
 8000e54:	2300      	movs	r3, #0
 8000e56:	2101      	movs	r1, #1
 8000e58:	469b      	mov	fp, r3
 8000e5a:	e764      	b.n	8000d26 <__aeabi_ddiv+0x8a>
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	0032      	movs	r2, r6
 8000e60:	2103      	movs	r1, #3
 8000e62:	431c      	orrs	r4, r3
 8000e64:	e75f      	b.n	8000d26 <__aeabi_ddiv+0x8a>
 8000e66:	469a      	mov	sl, r3
 8000e68:	2303      	movs	r3, #3
 8000e6a:	46d9      	mov	r9, fp
 8000e6c:	240c      	movs	r4, #12
 8000e6e:	9303      	str	r3, [sp, #12]
 8000e70:	e73b      	b.n	8000cea <__aeabi_ddiv+0x4e>
 8000e72:	2300      	movs	r3, #0
 8000e74:	2480      	movs	r4, #128	@ 0x80
 8000e76:	4698      	mov	r8, r3
 8000e78:	2600      	movs	r6, #0
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <__aeabi_ddiv+0x21c>)
 8000e7c:	0324      	lsls	r4, r4, #12
 8000e7e:	e779      	b.n	8000d74 <__aeabi_ddiv+0xd8>
 8000e80:	2480      	movs	r4, #128	@ 0x80
 8000e82:	465b      	mov	r3, fp
 8000e84:	0324      	lsls	r4, r4, #12
 8000e86:	431c      	orrs	r4, r3
 8000e88:	0324      	lsls	r4, r4, #12
 8000e8a:	002e      	movs	r6, r5
 8000e8c:	4690      	mov	r8, r2
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <__aeabi_ddiv+0x21c>)
 8000e90:	0b24      	lsrs	r4, r4, #12
 8000e92:	e76f      	b.n	8000d74 <__aeabi_ddiv+0xd8>
 8000e94:	2480      	movs	r4, #128	@ 0x80
 8000e96:	464b      	mov	r3, r9
 8000e98:	0324      	lsls	r4, r4, #12
 8000e9a:	4223      	tst	r3, r4
 8000e9c:	d002      	beq.n	8000ea4 <__aeabi_ddiv+0x208>
 8000e9e:	465b      	mov	r3, fp
 8000ea0:	4223      	tst	r3, r4
 8000ea2:	d0f0      	beq.n	8000e86 <__aeabi_ddiv+0x1ea>
 8000ea4:	2480      	movs	r4, #128	@ 0x80
 8000ea6:	464b      	mov	r3, r9
 8000ea8:	0324      	lsls	r4, r4, #12
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	0324      	lsls	r4, r4, #12
 8000eae:	9e02      	ldr	r6, [sp, #8]
 8000eb0:	4b01      	ldr	r3, [pc, #4]	@ (8000eb8 <__aeabi_ddiv+0x21c>)
 8000eb2:	0b24      	lsrs	r4, r4, #12
 8000eb4:	e75e      	b.n	8000d74 <__aeabi_ddiv+0xd8>
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	000007ff 	.word	0x000007ff
 8000ebc:	fffffc01 	.word	0xfffffc01
 8000ec0:	08006874 	.word	0x08006874
 8000ec4:	fffff801 	.word	0xfffff801
 8000ec8:	000003f3 	.word	0x000003f3
 8000ecc:	fffffc0d 	.word	0xfffffc0d
 8000ed0:	45cb      	cmp	fp, r9
 8000ed2:	d200      	bcs.n	8000ed6 <__aeabi_ddiv+0x23a>
 8000ed4:	e0f8      	b.n	80010c8 <__aeabi_ddiv+0x42c>
 8000ed6:	d100      	bne.n	8000eda <__aeabi_ddiv+0x23e>
 8000ed8:	e0f3      	b.n	80010c2 <__aeabi_ddiv+0x426>
 8000eda:	2301      	movs	r3, #1
 8000edc:	425b      	negs	r3, r3
 8000ede:	469c      	mov	ip, r3
 8000ee0:	4644      	mov	r4, r8
 8000ee2:	4648      	mov	r0, r9
 8000ee4:	2500      	movs	r5, #0
 8000ee6:	44e2      	add	sl, ip
 8000ee8:	465b      	mov	r3, fp
 8000eea:	0e17      	lsrs	r7, r2, #24
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	0c19      	lsrs	r1, r3, #16
 8000ef2:	043b      	lsls	r3, r7, #16
 8000ef4:	0212      	lsls	r2, r2, #8
 8000ef6:	9700      	str	r7, [sp, #0]
 8000ef8:	0c1f      	lsrs	r7, r3, #16
 8000efa:	4691      	mov	r9, r2
 8000efc:	9102      	str	r1, [sp, #8]
 8000efe:	9703      	str	r7, [sp, #12]
 8000f00:	f7ff f986 	bl	8000210 <__aeabi_uidivmod>
 8000f04:	0002      	movs	r2, r0
 8000f06:	437a      	muls	r2, r7
 8000f08:	040b      	lsls	r3, r1, #16
 8000f0a:	0c21      	lsrs	r1, r4, #16
 8000f0c:	4680      	mov	r8, r0
 8000f0e:	4319      	orrs	r1, r3
 8000f10:	428a      	cmp	r2, r1
 8000f12:	d909      	bls.n	8000f28 <__aeabi_ddiv+0x28c>
 8000f14:	9f00      	ldr	r7, [sp, #0]
 8000f16:	2301      	movs	r3, #1
 8000f18:	46bc      	mov	ip, r7
 8000f1a:	425b      	negs	r3, r3
 8000f1c:	4461      	add	r1, ip
 8000f1e:	469c      	mov	ip, r3
 8000f20:	44e0      	add	r8, ip
 8000f22:	428f      	cmp	r7, r1
 8000f24:	d800      	bhi.n	8000f28 <__aeabi_ddiv+0x28c>
 8000f26:	e15c      	b.n	80011e2 <__aeabi_ddiv+0x546>
 8000f28:	1a88      	subs	r0, r1, r2
 8000f2a:	9902      	ldr	r1, [sp, #8]
 8000f2c:	f7ff f970 	bl	8000210 <__aeabi_uidivmod>
 8000f30:	9a03      	ldr	r2, [sp, #12]
 8000f32:	0424      	lsls	r4, r4, #16
 8000f34:	4342      	muls	r2, r0
 8000f36:	0409      	lsls	r1, r1, #16
 8000f38:	0c24      	lsrs	r4, r4, #16
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	430c      	orrs	r4, r1
 8000f3e:	42a2      	cmp	r2, r4
 8000f40:	d906      	bls.n	8000f50 <__aeabi_ddiv+0x2b4>
 8000f42:	9900      	ldr	r1, [sp, #0]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	468c      	mov	ip, r1
 8000f48:	4464      	add	r4, ip
 8000f4a:	42a1      	cmp	r1, r4
 8000f4c:	d800      	bhi.n	8000f50 <__aeabi_ddiv+0x2b4>
 8000f4e:	e142      	b.n	80011d6 <__aeabi_ddiv+0x53a>
 8000f50:	1aa0      	subs	r0, r4, r2
 8000f52:	4642      	mov	r2, r8
 8000f54:	0412      	lsls	r2, r2, #16
 8000f56:	431a      	orrs	r2, r3
 8000f58:	4693      	mov	fp, r2
 8000f5a:	464b      	mov	r3, r9
 8000f5c:	4659      	mov	r1, fp
 8000f5e:	0c1b      	lsrs	r3, r3, #16
 8000f60:	001f      	movs	r7, r3
 8000f62:	9304      	str	r3, [sp, #16]
 8000f64:	040b      	lsls	r3, r1, #16
 8000f66:	4649      	mov	r1, r9
 8000f68:	0409      	lsls	r1, r1, #16
 8000f6a:	0c09      	lsrs	r1, r1, #16
 8000f6c:	000c      	movs	r4, r1
 8000f6e:	0c1b      	lsrs	r3, r3, #16
 8000f70:	435c      	muls	r4, r3
 8000f72:	0c12      	lsrs	r2, r2, #16
 8000f74:	437b      	muls	r3, r7
 8000f76:	4688      	mov	r8, r1
 8000f78:	4351      	muls	r1, r2
 8000f7a:	437a      	muls	r2, r7
 8000f7c:	0c27      	lsrs	r7, r4, #16
 8000f7e:	46bc      	mov	ip, r7
 8000f80:	185b      	adds	r3, r3, r1
 8000f82:	4463      	add	r3, ip
 8000f84:	4299      	cmp	r1, r3
 8000f86:	d903      	bls.n	8000f90 <__aeabi_ddiv+0x2f4>
 8000f88:	2180      	movs	r1, #128	@ 0x80
 8000f8a:	0249      	lsls	r1, r1, #9
 8000f8c:	468c      	mov	ip, r1
 8000f8e:	4462      	add	r2, ip
 8000f90:	0c19      	lsrs	r1, r3, #16
 8000f92:	0424      	lsls	r4, r4, #16
 8000f94:	041b      	lsls	r3, r3, #16
 8000f96:	0c24      	lsrs	r4, r4, #16
 8000f98:	188a      	adds	r2, r1, r2
 8000f9a:	191c      	adds	r4, r3, r4
 8000f9c:	4290      	cmp	r0, r2
 8000f9e:	d302      	bcc.n	8000fa6 <__aeabi_ddiv+0x30a>
 8000fa0:	d116      	bne.n	8000fd0 <__aeabi_ddiv+0x334>
 8000fa2:	42a5      	cmp	r5, r4
 8000fa4:	d214      	bcs.n	8000fd0 <__aeabi_ddiv+0x334>
 8000fa6:	465b      	mov	r3, fp
 8000fa8:	9f00      	ldr	r7, [sp, #0]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	444d      	add	r5, r9
 8000fae:	9305      	str	r3, [sp, #20]
 8000fb0:	454d      	cmp	r5, r9
 8000fb2:	419b      	sbcs	r3, r3
 8000fb4:	46bc      	mov	ip, r7
 8000fb6:	425b      	negs	r3, r3
 8000fb8:	4463      	add	r3, ip
 8000fba:	18c0      	adds	r0, r0, r3
 8000fbc:	4287      	cmp	r7, r0
 8000fbe:	d300      	bcc.n	8000fc2 <__aeabi_ddiv+0x326>
 8000fc0:	e102      	b.n	80011c8 <__aeabi_ddiv+0x52c>
 8000fc2:	4282      	cmp	r2, r0
 8000fc4:	d900      	bls.n	8000fc8 <__aeabi_ddiv+0x32c>
 8000fc6:	e129      	b.n	800121c <__aeabi_ddiv+0x580>
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_ddiv+0x330>
 8000fca:	e124      	b.n	8001216 <__aeabi_ddiv+0x57a>
 8000fcc:	9b05      	ldr	r3, [sp, #20]
 8000fce:	469b      	mov	fp, r3
 8000fd0:	1b2c      	subs	r4, r5, r4
 8000fd2:	42a5      	cmp	r5, r4
 8000fd4:	41ad      	sbcs	r5, r5
 8000fd6:	9b00      	ldr	r3, [sp, #0]
 8000fd8:	1a80      	subs	r0, r0, r2
 8000fda:	426d      	negs	r5, r5
 8000fdc:	1b40      	subs	r0, r0, r5
 8000fde:	4283      	cmp	r3, r0
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_ddiv+0x348>
 8000fe2:	e10f      	b.n	8001204 <__aeabi_ddiv+0x568>
 8000fe4:	9902      	ldr	r1, [sp, #8]
 8000fe6:	f7ff f913 	bl	8000210 <__aeabi_uidivmod>
 8000fea:	9a03      	ldr	r2, [sp, #12]
 8000fec:	040b      	lsls	r3, r1, #16
 8000fee:	4342      	muls	r2, r0
 8000ff0:	0c21      	lsrs	r1, r4, #16
 8000ff2:	0005      	movs	r5, r0
 8000ff4:	4319      	orrs	r1, r3
 8000ff6:	428a      	cmp	r2, r1
 8000ff8:	d900      	bls.n	8000ffc <__aeabi_ddiv+0x360>
 8000ffa:	e0cb      	b.n	8001194 <__aeabi_ddiv+0x4f8>
 8000ffc:	1a88      	subs	r0, r1, r2
 8000ffe:	9902      	ldr	r1, [sp, #8]
 8001000:	f7ff f906 	bl	8000210 <__aeabi_uidivmod>
 8001004:	9a03      	ldr	r2, [sp, #12]
 8001006:	0424      	lsls	r4, r4, #16
 8001008:	4342      	muls	r2, r0
 800100a:	0409      	lsls	r1, r1, #16
 800100c:	0c24      	lsrs	r4, r4, #16
 800100e:	0003      	movs	r3, r0
 8001010:	430c      	orrs	r4, r1
 8001012:	42a2      	cmp	r2, r4
 8001014:	d900      	bls.n	8001018 <__aeabi_ddiv+0x37c>
 8001016:	e0ca      	b.n	80011ae <__aeabi_ddiv+0x512>
 8001018:	4641      	mov	r1, r8
 800101a:	1aa4      	subs	r4, r4, r2
 800101c:	042a      	lsls	r2, r5, #16
 800101e:	431a      	orrs	r2, r3
 8001020:	9f04      	ldr	r7, [sp, #16]
 8001022:	0413      	lsls	r3, r2, #16
 8001024:	0c1b      	lsrs	r3, r3, #16
 8001026:	4359      	muls	r1, r3
 8001028:	4640      	mov	r0, r8
 800102a:	437b      	muls	r3, r7
 800102c:	469c      	mov	ip, r3
 800102e:	0c15      	lsrs	r5, r2, #16
 8001030:	4368      	muls	r0, r5
 8001032:	0c0b      	lsrs	r3, r1, #16
 8001034:	4484      	add	ip, r0
 8001036:	4463      	add	r3, ip
 8001038:	437d      	muls	r5, r7
 800103a:	4298      	cmp	r0, r3
 800103c:	d903      	bls.n	8001046 <__aeabi_ddiv+0x3aa>
 800103e:	2080      	movs	r0, #128	@ 0x80
 8001040:	0240      	lsls	r0, r0, #9
 8001042:	4684      	mov	ip, r0
 8001044:	4465      	add	r5, ip
 8001046:	0c18      	lsrs	r0, r3, #16
 8001048:	0409      	lsls	r1, r1, #16
 800104a:	041b      	lsls	r3, r3, #16
 800104c:	0c09      	lsrs	r1, r1, #16
 800104e:	1940      	adds	r0, r0, r5
 8001050:	185b      	adds	r3, r3, r1
 8001052:	4284      	cmp	r4, r0
 8001054:	d327      	bcc.n	80010a6 <__aeabi_ddiv+0x40a>
 8001056:	d023      	beq.n	80010a0 <__aeabi_ddiv+0x404>
 8001058:	2301      	movs	r3, #1
 800105a:	0035      	movs	r5, r6
 800105c:	431a      	orrs	r2, r3
 800105e:	4b94      	ldr	r3, [pc, #592]	@ (80012b0 <__aeabi_ddiv+0x614>)
 8001060:	4453      	add	r3, sl
 8001062:	2b00      	cmp	r3, #0
 8001064:	dd60      	ble.n	8001128 <__aeabi_ddiv+0x48c>
 8001066:	0751      	lsls	r1, r2, #29
 8001068:	d000      	beq.n	800106c <__aeabi_ddiv+0x3d0>
 800106a:	e086      	b.n	800117a <__aeabi_ddiv+0x4de>
 800106c:	002e      	movs	r6, r5
 800106e:	08d1      	lsrs	r1, r2, #3
 8001070:	465a      	mov	r2, fp
 8001072:	01d2      	lsls	r2, r2, #7
 8001074:	d506      	bpl.n	8001084 <__aeabi_ddiv+0x3e8>
 8001076:	465a      	mov	r2, fp
 8001078:	4b8e      	ldr	r3, [pc, #568]	@ (80012b4 <__aeabi_ddiv+0x618>)
 800107a:	401a      	ands	r2, r3
 800107c:	2380      	movs	r3, #128	@ 0x80
 800107e:	4693      	mov	fp, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	4453      	add	r3, sl
 8001084:	4a8c      	ldr	r2, [pc, #560]	@ (80012b8 <__aeabi_ddiv+0x61c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	dd00      	ble.n	800108c <__aeabi_ddiv+0x3f0>
 800108a:	e680      	b.n	8000d8e <__aeabi_ddiv+0xf2>
 800108c:	465a      	mov	r2, fp
 800108e:	0752      	lsls	r2, r2, #29
 8001090:	430a      	orrs	r2, r1
 8001092:	4690      	mov	r8, r2
 8001094:	465a      	mov	r2, fp
 8001096:	055b      	lsls	r3, r3, #21
 8001098:	0254      	lsls	r4, r2, #9
 800109a:	0b24      	lsrs	r4, r4, #12
 800109c:	0d5b      	lsrs	r3, r3, #21
 800109e:	e669      	b.n	8000d74 <__aeabi_ddiv+0xd8>
 80010a0:	0035      	movs	r5, r6
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0db      	beq.n	800105e <__aeabi_ddiv+0x3c2>
 80010a6:	9d00      	ldr	r5, [sp, #0]
 80010a8:	1e51      	subs	r1, r2, #1
 80010aa:	46ac      	mov	ip, r5
 80010ac:	4464      	add	r4, ip
 80010ae:	42ac      	cmp	r4, r5
 80010b0:	d200      	bcs.n	80010b4 <__aeabi_ddiv+0x418>
 80010b2:	e09e      	b.n	80011f2 <__aeabi_ddiv+0x556>
 80010b4:	4284      	cmp	r4, r0
 80010b6:	d200      	bcs.n	80010ba <__aeabi_ddiv+0x41e>
 80010b8:	e0e1      	b.n	800127e <__aeabi_ddiv+0x5e2>
 80010ba:	d100      	bne.n	80010be <__aeabi_ddiv+0x422>
 80010bc:	e0ee      	b.n	800129c <__aeabi_ddiv+0x600>
 80010be:	000a      	movs	r2, r1
 80010c0:	e7ca      	b.n	8001058 <__aeabi_ddiv+0x3bc>
 80010c2:	4542      	cmp	r2, r8
 80010c4:	d900      	bls.n	80010c8 <__aeabi_ddiv+0x42c>
 80010c6:	e708      	b.n	8000eda <__aeabi_ddiv+0x23e>
 80010c8:	464b      	mov	r3, r9
 80010ca:	07dc      	lsls	r4, r3, #31
 80010cc:	0858      	lsrs	r0, r3, #1
 80010ce:	4643      	mov	r3, r8
 80010d0:	085b      	lsrs	r3, r3, #1
 80010d2:	431c      	orrs	r4, r3
 80010d4:	4643      	mov	r3, r8
 80010d6:	07dd      	lsls	r5, r3, #31
 80010d8:	e706      	b.n	8000ee8 <__aeabi_ddiv+0x24c>
 80010da:	f000 fe73 	bl	8001dc4 <__clzsi2>
 80010de:	2315      	movs	r3, #21
 80010e0:	469c      	mov	ip, r3
 80010e2:	4484      	add	ip, r0
 80010e4:	0002      	movs	r2, r0
 80010e6:	4663      	mov	r3, ip
 80010e8:	3220      	adds	r2, #32
 80010ea:	2b1c      	cmp	r3, #28
 80010ec:	dc00      	bgt.n	80010f0 <__aeabi_ddiv+0x454>
 80010ee:	e692      	b.n	8000e16 <__aeabi_ddiv+0x17a>
 80010f0:	0023      	movs	r3, r4
 80010f2:	3808      	subs	r0, #8
 80010f4:	4083      	lsls	r3, r0
 80010f6:	4699      	mov	r9, r3
 80010f8:	2300      	movs	r3, #0
 80010fa:	4698      	mov	r8, r3
 80010fc:	e69a      	b.n	8000e34 <__aeabi_ddiv+0x198>
 80010fe:	f000 fe61 	bl	8001dc4 <__clzsi2>
 8001102:	0002      	movs	r2, r0
 8001104:	0003      	movs	r3, r0
 8001106:	3215      	adds	r2, #21
 8001108:	3320      	adds	r3, #32
 800110a:	2a1c      	cmp	r2, #28
 800110c:	dc00      	bgt.n	8001110 <__aeabi_ddiv+0x474>
 800110e:	e65f      	b.n	8000dd0 <__aeabi_ddiv+0x134>
 8001110:	9900      	ldr	r1, [sp, #0]
 8001112:	3808      	subs	r0, #8
 8001114:	4081      	lsls	r1, r0
 8001116:	2200      	movs	r2, #0
 8001118:	468b      	mov	fp, r1
 800111a:	e666      	b.n	8000dea <__aeabi_ddiv+0x14e>
 800111c:	2200      	movs	r2, #0
 800111e:	002e      	movs	r6, r5
 8001120:	2400      	movs	r4, #0
 8001122:	4690      	mov	r8, r2
 8001124:	4b65      	ldr	r3, [pc, #404]	@ (80012bc <__aeabi_ddiv+0x620>)
 8001126:	e625      	b.n	8000d74 <__aeabi_ddiv+0xd8>
 8001128:	002e      	movs	r6, r5
 800112a:	2101      	movs	r1, #1
 800112c:	1ac9      	subs	r1, r1, r3
 800112e:	2938      	cmp	r1, #56	@ 0x38
 8001130:	dd00      	ble.n	8001134 <__aeabi_ddiv+0x498>
 8001132:	e61b      	b.n	8000d6c <__aeabi_ddiv+0xd0>
 8001134:	291f      	cmp	r1, #31
 8001136:	dc7e      	bgt.n	8001236 <__aeabi_ddiv+0x59a>
 8001138:	4861      	ldr	r0, [pc, #388]	@ (80012c0 <__aeabi_ddiv+0x624>)
 800113a:	0014      	movs	r4, r2
 800113c:	4450      	add	r0, sl
 800113e:	465b      	mov	r3, fp
 8001140:	4082      	lsls	r2, r0
 8001142:	4083      	lsls	r3, r0
 8001144:	40cc      	lsrs	r4, r1
 8001146:	1e50      	subs	r0, r2, #1
 8001148:	4182      	sbcs	r2, r0
 800114a:	4323      	orrs	r3, r4
 800114c:	431a      	orrs	r2, r3
 800114e:	465b      	mov	r3, fp
 8001150:	40cb      	lsrs	r3, r1
 8001152:	0751      	lsls	r1, r2, #29
 8001154:	d009      	beq.n	800116a <__aeabi_ddiv+0x4ce>
 8001156:	210f      	movs	r1, #15
 8001158:	4011      	ands	r1, r2
 800115a:	2904      	cmp	r1, #4
 800115c:	d005      	beq.n	800116a <__aeabi_ddiv+0x4ce>
 800115e:	1d11      	adds	r1, r2, #4
 8001160:	4291      	cmp	r1, r2
 8001162:	4192      	sbcs	r2, r2
 8001164:	4252      	negs	r2, r2
 8001166:	189b      	adds	r3, r3, r2
 8001168:	000a      	movs	r2, r1
 800116a:	0219      	lsls	r1, r3, #8
 800116c:	d400      	bmi.n	8001170 <__aeabi_ddiv+0x4d4>
 800116e:	e09b      	b.n	80012a8 <__aeabi_ddiv+0x60c>
 8001170:	2200      	movs	r2, #0
 8001172:	2301      	movs	r3, #1
 8001174:	2400      	movs	r4, #0
 8001176:	4690      	mov	r8, r2
 8001178:	e5fc      	b.n	8000d74 <__aeabi_ddiv+0xd8>
 800117a:	210f      	movs	r1, #15
 800117c:	4011      	ands	r1, r2
 800117e:	2904      	cmp	r1, #4
 8001180:	d100      	bne.n	8001184 <__aeabi_ddiv+0x4e8>
 8001182:	e773      	b.n	800106c <__aeabi_ddiv+0x3d0>
 8001184:	1d11      	adds	r1, r2, #4
 8001186:	4291      	cmp	r1, r2
 8001188:	4192      	sbcs	r2, r2
 800118a:	4252      	negs	r2, r2
 800118c:	002e      	movs	r6, r5
 800118e:	08c9      	lsrs	r1, r1, #3
 8001190:	4493      	add	fp, r2
 8001192:	e76d      	b.n	8001070 <__aeabi_ddiv+0x3d4>
 8001194:	9b00      	ldr	r3, [sp, #0]
 8001196:	3d01      	subs	r5, #1
 8001198:	469c      	mov	ip, r3
 800119a:	4461      	add	r1, ip
 800119c:	428b      	cmp	r3, r1
 800119e:	d900      	bls.n	80011a2 <__aeabi_ddiv+0x506>
 80011a0:	e72c      	b.n	8000ffc <__aeabi_ddiv+0x360>
 80011a2:	428a      	cmp	r2, r1
 80011a4:	d800      	bhi.n	80011a8 <__aeabi_ddiv+0x50c>
 80011a6:	e729      	b.n	8000ffc <__aeabi_ddiv+0x360>
 80011a8:	1e85      	subs	r5, r0, #2
 80011aa:	4461      	add	r1, ip
 80011ac:	e726      	b.n	8000ffc <__aeabi_ddiv+0x360>
 80011ae:	9900      	ldr	r1, [sp, #0]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	468c      	mov	ip, r1
 80011b4:	4464      	add	r4, ip
 80011b6:	42a1      	cmp	r1, r4
 80011b8:	d900      	bls.n	80011bc <__aeabi_ddiv+0x520>
 80011ba:	e72d      	b.n	8001018 <__aeabi_ddiv+0x37c>
 80011bc:	42a2      	cmp	r2, r4
 80011be:	d800      	bhi.n	80011c2 <__aeabi_ddiv+0x526>
 80011c0:	e72a      	b.n	8001018 <__aeabi_ddiv+0x37c>
 80011c2:	1e83      	subs	r3, r0, #2
 80011c4:	4464      	add	r4, ip
 80011c6:	e727      	b.n	8001018 <__aeabi_ddiv+0x37c>
 80011c8:	4287      	cmp	r7, r0
 80011ca:	d000      	beq.n	80011ce <__aeabi_ddiv+0x532>
 80011cc:	e6fe      	b.n	8000fcc <__aeabi_ddiv+0x330>
 80011ce:	45a9      	cmp	r9, r5
 80011d0:	d900      	bls.n	80011d4 <__aeabi_ddiv+0x538>
 80011d2:	e6fb      	b.n	8000fcc <__aeabi_ddiv+0x330>
 80011d4:	e6f5      	b.n	8000fc2 <__aeabi_ddiv+0x326>
 80011d6:	42a2      	cmp	r2, r4
 80011d8:	d800      	bhi.n	80011dc <__aeabi_ddiv+0x540>
 80011da:	e6b9      	b.n	8000f50 <__aeabi_ddiv+0x2b4>
 80011dc:	1e83      	subs	r3, r0, #2
 80011de:	4464      	add	r4, ip
 80011e0:	e6b6      	b.n	8000f50 <__aeabi_ddiv+0x2b4>
 80011e2:	428a      	cmp	r2, r1
 80011e4:	d800      	bhi.n	80011e8 <__aeabi_ddiv+0x54c>
 80011e6:	e69f      	b.n	8000f28 <__aeabi_ddiv+0x28c>
 80011e8:	46bc      	mov	ip, r7
 80011ea:	1e83      	subs	r3, r0, #2
 80011ec:	4698      	mov	r8, r3
 80011ee:	4461      	add	r1, ip
 80011f0:	e69a      	b.n	8000f28 <__aeabi_ddiv+0x28c>
 80011f2:	000a      	movs	r2, r1
 80011f4:	4284      	cmp	r4, r0
 80011f6:	d000      	beq.n	80011fa <__aeabi_ddiv+0x55e>
 80011f8:	e72e      	b.n	8001058 <__aeabi_ddiv+0x3bc>
 80011fa:	454b      	cmp	r3, r9
 80011fc:	d000      	beq.n	8001200 <__aeabi_ddiv+0x564>
 80011fe:	e72b      	b.n	8001058 <__aeabi_ddiv+0x3bc>
 8001200:	0035      	movs	r5, r6
 8001202:	e72c      	b.n	800105e <__aeabi_ddiv+0x3c2>
 8001204:	4b2a      	ldr	r3, [pc, #168]	@ (80012b0 <__aeabi_ddiv+0x614>)
 8001206:	4a2f      	ldr	r2, [pc, #188]	@ (80012c4 <__aeabi_ddiv+0x628>)
 8001208:	4453      	add	r3, sl
 800120a:	4592      	cmp	sl, r2
 800120c:	db43      	blt.n	8001296 <__aeabi_ddiv+0x5fa>
 800120e:	2201      	movs	r2, #1
 8001210:	2100      	movs	r1, #0
 8001212:	4493      	add	fp, r2
 8001214:	e72c      	b.n	8001070 <__aeabi_ddiv+0x3d4>
 8001216:	42ac      	cmp	r4, r5
 8001218:	d800      	bhi.n	800121c <__aeabi_ddiv+0x580>
 800121a:	e6d7      	b.n	8000fcc <__aeabi_ddiv+0x330>
 800121c:	2302      	movs	r3, #2
 800121e:	425b      	negs	r3, r3
 8001220:	469c      	mov	ip, r3
 8001222:	9900      	ldr	r1, [sp, #0]
 8001224:	444d      	add	r5, r9
 8001226:	454d      	cmp	r5, r9
 8001228:	419b      	sbcs	r3, r3
 800122a:	44e3      	add	fp, ip
 800122c:	468c      	mov	ip, r1
 800122e:	425b      	negs	r3, r3
 8001230:	4463      	add	r3, ip
 8001232:	18c0      	adds	r0, r0, r3
 8001234:	e6cc      	b.n	8000fd0 <__aeabi_ddiv+0x334>
 8001236:	201f      	movs	r0, #31
 8001238:	4240      	negs	r0, r0
 800123a:	1ac3      	subs	r3, r0, r3
 800123c:	4658      	mov	r0, fp
 800123e:	40d8      	lsrs	r0, r3
 8001240:	2920      	cmp	r1, #32
 8001242:	d004      	beq.n	800124e <__aeabi_ddiv+0x5b2>
 8001244:	4659      	mov	r1, fp
 8001246:	4b20      	ldr	r3, [pc, #128]	@ (80012c8 <__aeabi_ddiv+0x62c>)
 8001248:	4453      	add	r3, sl
 800124a:	4099      	lsls	r1, r3
 800124c:	430a      	orrs	r2, r1
 800124e:	1e53      	subs	r3, r2, #1
 8001250:	419a      	sbcs	r2, r3
 8001252:	2307      	movs	r3, #7
 8001254:	0019      	movs	r1, r3
 8001256:	4302      	orrs	r2, r0
 8001258:	2400      	movs	r4, #0
 800125a:	4011      	ands	r1, r2
 800125c:	4213      	tst	r3, r2
 800125e:	d009      	beq.n	8001274 <__aeabi_ddiv+0x5d8>
 8001260:	3308      	adds	r3, #8
 8001262:	4013      	ands	r3, r2
 8001264:	2b04      	cmp	r3, #4
 8001266:	d01d      	beq.n	80012a4 <__aeabi_ddiv+0x608>
 8001268:	1d13      	adds	r3, r2, #4
 800126a:	4293      	cmp	r3, r2
 800126c:	4189      	sbcs	r1, r1
 800126e:	001a      	movs	r2, r3
 8001270:	4249      	negs	r1, r1
 8001272:	0749      	lsls	r1, r1, #29
 8001274:	08d2      	lsrs	r2, r2, #3
 8001276:	430a      	orrs	r2, r1
 8001278:	4690      	mov	r8, r2
 800127a:	2300      	movs	r3, #0
 800127c:	e57a      	b.n	8000d74 <__aeabi_ddiv+0xd8>
 800127e:	4649      	mov	r1, r9
 8001280:	9f00      	ldr	r7, [sp, #0]
 8001282:	004d      	lsls	r5, r1, #1
 8001284:	454d      	cmp	r5, r9
 8001286:	4189      	sbcs	r1, r1
 8001288:	46bc      	mov	ip, r7
 800128a:	4249      	negs	r1, r1
 800128c:	4461      	add	r1, ip
 800128e:	46a9      	mov	r9, r5
 8001290:	3a02      	subs	r2, #2
 8001292:	1864      	adds	r4, r4, r1
 8001294:	e7ae      	b.n	80011f4 <__aeabi_ddiv+0x558>
 8001296:	2201      	movs	r2, #1
 8001298:	4252      	negs	r2, r2
 800129a:	e746      	b.n	800112a <__aeabi_ddiv+0x48e>
 800129c:	4599      	cmp	r9, r3
 800129e:	d3ee      	bcc.n	800127e <__aeabi_ddiv+0x5e2>
 80012a0:	000a      	movs	r2, r1
 80012a2:	e7aa      	b.n	80011fa <__aeabi_ddiv+0x55e>
 80012a4:	2100      	movs	r1, #0
 80012a6:	e7e5      	b.n	8001274 <__aeabi_ddiv+0x5d8>
 80012a8:	0759      	lsls	r1, r3, #29
 80012aa:	025b      	lsls	r3, r3, #9
 80012ac:	0b1c      	lsrs	r4, r3, #12
 80012ae:	e7e1      	b.n	8001274 <__aeabi_ddiv+0x5d8>
 80012b0:	000003ff 	.word	0x000003ff
 80012b4:	feffffff 	.word	0xfeffffff
 80012b8:	000007fe 	.word	0x000007fe
 80012bc:	000007ff 	.word	0x000007ff
 80012c0:	0000041e 	.word	0x0000041e
 80012c4:	fffffc02 	.word	0xfffffc02
 80012c8:	0000043e 	.word	0x0000043e

080012cc <__aeabi_dsub>:
 80012cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ce:	4657      	mov	r7, sl
 80012d0:	464e      	mov	r6, r9
 80012d2:	4645      	mov	r5, r8
 80012d4:	46de      	mov	lr, fp
 80012d6:	b5e0      	push	{r5, r6, r7, lr}
 80012d8:	b083      	sub	sp, #12
 80012da:	9000      	str	r0, [sp, #0]
 80012dc:	9101      	str	r1, [sp, #4]
 80012de:	030c      	lsls	r4, r1, #12
 80012e0:	004d      	lsls	r5, r1, #1
 80012e2:	0fce      	lsrs	r6, r1, #31
 80012e4:	0a61      	lsrs	r1, r4, #9
 80012e6:	9c00      	ldr	r4, [sp, #0]
 80012e8:	005f      	lsls	r7, r3, #1
 80012ea:	0f64      	lsrs	r4, r4, #29
 80012ec:	430c      	orrs	r4, r1
 80012ee:	9900      	ldr	r1, [sp, #0]
 80012f0:	9200      	str	r2, [sp, #0]
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	00c8      	lsls	r0, r1, #3
 80012f6:	0319      	lsls	r1, r3, #12
 80012f8:	0d7b      	lsrs	r3, r7, #21
 80012fa:	4699      	mov	r9, r3
 80012fc:	9b01      	ldr	r3, [sp, #4]
 80012fe:	4fcc      	ldr	r7, [pc, #816]	@ (8001630 <__aeabi_dsub+0x364>)
 8001300:	0fdb      	lsrs	r3, r3, #31
 8001302:	469c      	mov	ip, r3
 8001304:	0a4b      	lsrs	r3, r1, #9
 8001306:	9900      	ldr	r1, [sp, #0]
 8001308:	4680      	mov	r8, r0
 800130a:	0f49      	lsrs	r1, r1, #29
 800130c:	4319      	orrs	r1, r3
 800130e:	9b00      	ldr	r3, [sp, #0]
 8001310:	468b      	mov	fp, r1
 8001312:	00da      	lsls	r2, r3, #3
 8001314:	4692      	mov	sl, r2
 8001316:	0d6d      	lsrs	r5, r5, #21
 8001318:	45b9      	cmp	r9, r7
 800131a:	d100      	bne.n	800131e <__aeabi_dsub+0x52>
 800131c:	e0bf      	b.n	800149e <__aeabi_dsub+0x1d2>
 800131e:	2301      	movs	r3, #1
 8001320:	4661      	mov	r1, ip
 8001322:	4059      	eors	r1, r3
 8001324:	464b      	mov	r3, r9
 8001326:	468c      	mov	ip, r1
 8001328:	1aeb      	subs	r3, r5, r3
 800132a:	428e      	cmp	r6, r1
 800132c:	d075      	beq.n	800141a <__aeabi_dsub+0x14e>
 800132e:	2b00      	cmp	r3, #0
 8001330:	dc00      	bgt.n	8001334 <__aeabi_dsub+0x68>
 8001332:	e2a3      	b.n	800187c <__aeabi_dsub+0x5b0>
 8001334:	4649      	mov	r1, r9
 8001336:	2900      	cmp	r1, #0
 8001338:	d100      	bne.n	800133c <__aeabi_dsub+0x70>
 800133a:	e0ce      	b.n	80014da <__aeabi_dsub+0x20e>
 800133c:	42bd      	cmp	r5, r7
 800133e:	d100      	bne.n	8001342 <__aeabi_dsub+0x76>
 8001340:	e200      	b.n	8001744 <__aeabi_dsub+0x478>
 8001342:	2701      	movs	r7, #1
 8001344:	2b38      	cmp	r3, #56	@ 0x38
 8001346:	dc19      	bgt.n	800137c <__aeabi_dsub+0xb0>
 8001348:	2780      	movs	r7, #128	@ 0x80
 800134a:	4659      	mov	r1, fp
 800134c:	043f      	lsls	r7, r7, #16
 800134e:	4339      	orrs	r1, r7
 8001350:	468b      	mov	fp, r1
 8001352:	2b1f      	cmp	r3, #31
 8001354:	dd00      	ble.n	8001358 <__aeabi_dsub+0x8c>
 8001356:	e1fa      	b.n	800174e <__aeabi_dsub+0x482>
 8001358:	2720      	movs	r7, #32
 800135a:	1af9      	subs	r1, r7, r3
 800135c:	468c      	mov	ip, r1
 800135e:	4659      	mov	r1, fp
 8001360:	4667      	mov	r7, ip
 8001362:	40b9      	lsls	r1, r7
 8001364:	000f      	movs	r7, r1
 8001366:	0011      	movs	r1, r2
 8001368:	40d9      	lsrs	r1, r3
 800136a:	430f      	orrs	r7, r1
 800136c:	4661      	mov	r1, ip
 800136e:	408a      	lsls	r2, r1
 8001370:	1e51      	subs	r1, r2, #1
 8001372:	418a      	sbcs	r2, r1
 8001374:	4659      	mov	r1, fp
 8001376:	40d9      	lsrs	r1, r3
 8001378:	4317      	orrs	r7, r2
 800137a:	1a64      	subs	r4, r4, r1
 800137c:	1bc7      	subs	r7, r0, r7
 800137e:	42b8      	cmp	r0, r7
 8001380:	4180      	sbcs	r0, r0
 8001382:	4240      	negs	r0, r0
 8001384:	1a24      	subs	r4, r4, r0
 8001386:	0223      	lsls	r3, r4, #8
 8001388:	d400      	bmi.n	800138c <__aeabi_dsub+0xc0>
 800138a:	e140      	b.n	800160e <__aeabi_dsub+0x342>
 800138c:	0264      	lsls	r4, r4, #9
 800138e:	0a64      	lsrs	r4, r4, #9
 8001390:	2c00      	cmp	r4, #0
 8001392:	d100      	bne.n	8001396 <__aeabi_dsub+0xca>
 8001394:	e154      	b.n	8001640 <__aeabi_dsub+0x374>
 8001396:	0020      	movs	r0, r4
 8001398:	f000 fd14 	bl	8001dc4 <__clzsi2>
 800139c:	0003      	movs	r3, r0
 800139e:	3b08      	subs	r3, #8
 80013a0:	2120      	movs	r1, #32
 80013a2:	0038      	movs	r0, r7
 80013a4:	1aca      	subs	r2, r1, r3
 80013a6:	40d0      	lsrs	r0, r2
 80013a8:	409c      	lsls	r4, r3
 80013aa:	0002      	movs	r2, r0
 80013ac:	409f      	lsls	r7, r3
 80013ae:	4322      	orrs	r2, r4
 80013b0:	429d      	cmp	r5, r3
 80013b2:	dd00      	ble.n	80013b6 <__aeabi_dsub+0xea>
 80013b4:	e1a6      	b.n	8001704 <__aeabi_dsub+0x438>
 80013b6:	1b58      	subs	r0, r3, r5
 80013b8:	3001      	adds	r0, #1
 80013ba:	1a09      	subs	r1, r1, r0
 80013bc:	003c      	movs	r4, r7
 80013be:	408f      	lsls	r7, r1
 80013c0:	40c4      	lsrs	r4, r0
 80013c2:	1e7b      	subs	r3, r7, #1
 80013c4:	419f      	sbcs	r7, r3
 80013c6:	0013      	movs	r3, r2
 80013c8:	408b      	lsls	r3, r1
 80013ca:	4327      	orrs	r7, r4
 80013cc:	431f      	orrs	r7, r3
 80013ce:	40c2      	lsrs	r2, r0
 80013d0:	003b      	movs	r3, r7
 80013d2:	0014      	movs	r4, r2
 80013d4:	2500      	movs	r5, #0
 80013d6:	4313      	orrs	r3, r2
 80013d8:	d100      	bne.n	80013dc <__aeabi_dsub+0x110>
 80013da:	e1f7      	b.n	80017cc <__aeabi_dsub+0x500>
 80013dc:	077b      	lsls	r3, r7, #29
 80013de:	d100      	bne.n	80013e2 <__aeabi_dsub+0x116>
 80013e0:	e377      	b.n	8001ad2 <__aeabi_dsub+0x806>
 80013e2:	230f      	movs	r3, #15
 80013e4:	0038      	movs	r0, r7
 80013e6:	403b      	ands	r3, r7
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d004      	beq.n	80013f6 <__aeabi_dsub+0x12a>
 80013ec:	1d38      	adds	r0, r7, #4
 80013ee:	42b8      	cmp	r0, r7
 80013f0:	41bf      	sbcs	r7, r7
 80013f2:	427f      	negs	r7, r7
 80013f4:	19e4      	adds	r4, r4, r7
 80013f6:	0223      	lsls	r3, r4, #8
 80013f8:	d400      	bmi.n	80013fc <__aeabi_dsub+0x130>
 80013fa:	e368      	b.n	8001ace <__aeabi_dsub+0x802>
 80013fc:	4b8c      	ldr	r3, [pc, #560]	@ (8001630 <__aeabi_dsub+0x364>)
 80013fe:	3501      	adds	r5, #1
 8001400:	429d      	cmp	r5, r3
 8001402:	d100      	bne.n	8001406 <__aeabi_dsub+0x13a>
 8001404:	e0f4      	b.n	80015f0 <__aeabi_dsub+0x324>
 8001406:	4b8b      	ldr	r3, [pc, #556]	@ (8001634 <__aeabi_dsub+0x368>)
 8001408:	056d      	lsls	r5, r5, #21
 800140a:	401c      	ands	r4, r3
 800140c:	0d6d      	lsrs	r5, r5, #21
 800140e:	0767      	lsls	r7, r4, #29
 8001410:	08c0      	lsrs	r0, r0, #3
 8001412:	0264      	lsls	r4, r4, #9
 8001414:	4307      	orrs	r7, r0
 8001416:	0b24      	lsrs	r4, r4, #12
 8001418:	e0ec      	b.n	80015f4 <__aeabi_dsub+0x328>
 800141a:	2b00      	cmp	r3, #0
 800141c:	dc00      	bgt.n	8001420 <__aeabi_dsub+0x154>
 800141e:	e329      	b.n	8001a74 <__aeabi_dsub+0x7a8>
 8001420:	4649      	mov	r1, r9
 8001422:	2900      	cmp	r1, #0
 8001424:	d000      	beq.n	8001428 <__aeabi_dsub+0x15c>
 8001426:	e0d6      	b.n	80015d6 <__aeabi_dsub+0x30a>
 8001428:	4659      	mov	r1, fp
 800142a:	4311      	orrs	r1, r2
 800142c:	d100      	bne.n	8001430 <__aeabi_dsub+0x164>
 800142e:	e12e      	b.n	800168e <__aeabi_dsub+0x3c2>
 8001430:	1e59      	subs	r1, r3, #1
 8001432:	2b01      	cmp	r3, #1
 8001434:	d100      	bne.n	8001438 <__aeabi_dsub+0x16c>
 8001436:	e1e6      	b.n	8001806 <__aeabi_dsub+0x53a>
 8001438:	42bb      	cmp	r3, r7
 800143a:	d100      	bne.n	800143e <__aeabi_dsub+0x172>
 800143c:	e182      	b.n	8001744 <__aeabi_dsub+0x478>
 800143e:	2701      	movs	r7, #1
 8001440:	000b      	movs	r3, r1
 8001442:	2938      	cmp	r1, #56	@ 0x38
 8001444:	dc14      	bgt.n	8001470 <__aeabi_dsub+0x1a4>
 8001446:	2b1f      	cmp	r3, #31
 8001448:	dd00      	ble.n	800144c <__aeabi_dsub+0x180>
 800144a:	e23c      	b.n	80018c6 <__aeabi_dsub+0x5fa>
 800144c:	2720      	movs	r7, #32
 800144e:	1af9      	subs	r1, r7, r3
 8001450:	468c      	mov	ip, r1
 8001452:	4659      	mov	r1, fp
 8001454:	4667      	mov	r7, ip
 8001456:	40b9      	lsls	r1, r7
 8001458:	000f      	movs	r7, r1
 800145a:	0011      	movs	r1, r2
 800145c:	40d9      	lsrs	r1, r3
 800145e:	430f      	orrs	r7, r1
 8001460:	4661      	mov	r1, ip
 8001462:	408a      	lsls	r2, r1
 8001464:	1e51      	subs	r1, r2, #1
 8001466:	418a      	sbcs	r2, r1
 8001468:	4659      	mov	r1, fp
 800146a:	40d9      	lsrs	r1, r3
 800146c:	4317      	orrs	r7, r2
 800146e:	1864      	adds	r4, r4, r1
 8001470:	183f      	adds	r7, r7, r0
 8001472:	4287      	cmp	r7, r0
 8001474:	4180      	sbcs	r0, r0
 8001476:	4240      	negs	r0, r0
 8001478:	1824      	adds	r4, r4, r0
 800147a:	0223      	lsls	r3, r4, #8
 800147c:	d400      	bmi.n	8001480 <__aeabi_dsub+0x1b4>
 800147e:	e0c6      	b.n	800160e <__aeabi_dsub+0x342>
 8001480:	4b6b      	ldr	r3, [pc, #428]	@ (8001630 <__aeabi_dsub+0x364>)
 8001482:	3501      	adds	r5, #1
 8001484:	429d      	cmp	r5, r3
 8001486:	d100      	bne.n	800148a <__aeabi_dsub+0x1be>
 8001488:	e0b2      	b.n	80015f0 <__aeabi_dsub+0x324>
 800148a:	2101      	movs	r1, #1
 800148c:	4b69      	ldr	r3, [pc, #420]	@ (8001634 <__aeabi_dsub+0x368>)
 800148e:	087a      	lsrs	r2, r7, #1
 8001490:	401c      	ands	r4, r3
 8001492:	4039      	ands	r1, r7
 8001494:	430a      	orrs	r2, r1
 8001496:	07e7      	lsls	r7, r4, #31
 8001498:	4317      	orrs	r7, r2
 800149a:	0864      	lsrs	r4, r4, #1
 800149c:	e79e      	b.n	80013dc <__aeabi_dsub+0x110>
 800149e:	4b66      	ldr	r3, [pc, #408]	@ (8001638 <__aeabi_dsub+0x36c>)
 80014a0:	4311      	orrs	r1, r2
 80014a2:	468a      	mov	sl, r1
 80014a4:	18eb      	adds	r3, r5, r3
 80014a6:	2900      	cmp	r1, #0
 80014a8:	d028      	beq.n	80014fc <__aeabi_dsub+0x230>
 80014aa:	4566      	cmp	r6, ip
 80014ac:	d02c      	beq.n	8001508 <__aeabi_dsub+0x23c>
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d05b      	beq.n	800156a <__aeabi_dsub+0x29e>
 80014b2:	2d00      	cmp	r5, #0
 80014b4:	d100      	bne.n	80014b8 <__aeabi_dsub+0x1ec>
 80014b6:	e12c      	b.n	8001712 <__aeabi_dsub+0x446>
 80014b8:	465b      	mov	r3, fp
 80014ba:	4666      	mov	r6, ip
 80014bc:	075f      	lsls	r7, r3, #29
 80014be:	08d2      	lsrs	r2, r2, #3
 80014c0:	4317      	orrs	r7, r2
 80014c2:	08dd      	lsrs	r5, r3, #3
 80014c4:	003b      	movs	r3, r7
 80014c6:	432b      	orrs	r3, r5
 80014c8:	d100      	bne.n	80014cc <__aeabi_dsub+0x200>
 80014ca:	e0e2      	b.n	8001692 <__aeabi_dsub+0x3c6>
 80014cc:	2480      	movs	r4, #128	@ 0x80
 80014ce:	0324      	lsls	r4, r4, #12
 80014d0:	432c      	orrs	r4, r5
 80014d2:	0324      	lsls	r4, r4, #12
 80014d4:	4d56      	ldr	r5, [pc, #344]	@ (8001630 <__aeabi_dsub+0x364>)
 80014d6:	0b24      	lsrs	r4, r4, #12
 80014d8:	e08c      	b.n	80015f4 <__aeabi_dsub+0x328>
 80014da:	4659      	mov	r1, fp
 80014dc:	4311      	orrs	r1, r2
 80014de:	d100      	bne.n	80014e2 <__aeabi_dsub+0x216>
 80014e0:	e0d5      	b.n	800168e <__aeabi_dsub+0x3c2>
 80014e2:	1e59      	subs	r1, r3, #1
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d100      	bne.n	80014ea <__aeabi_dsub+0x21e>
 80014e8:	e1b9      	b.n	800185e <__aeabi_dsub+0x592>
 80014ea:	42bb      	cmp	r3, r7
 80014ec:	d100      	bne.n	80014f0 <__aeabi_dsub+0x224>
 80014ee:	e1b1      	b.n	8001854 <__aeabi_dsub+0x588>
 80014f0:	2701      	movs	r7, #1
 80014f2:	000b      	movs	r3, r1
 80014f4:	2938      	cmp	r1, #56	@ 0x38
 80014f6:	dd00      	ble.n	80014fa <__aeabi_dsub+0x22e>
 80014f8:	e740      	b.n	800137c <__aeabi_dsub+0xb0>
 80014fa:	e72a      	b.n	8001352 <__aeabi_dsub+0x86>
 80014fc:	4661      	mov	r1, ip
 80014fe:	2701      	movs	r7, #1
 8001500:	4079      	eors	r1, r7
 8001502:	468c      	mov	ip, r1
 8001504:	4566      	cmp	r6, ip
 8001506:	d1d2      	bne.n	80014ae <__aeabi_dsub+0x1e2>
 8001508:	2b00      	cmp	r3, #0
 800150a:	d100      	bne.n	800150e <__aeabi_dsub+0x242>
 800150c:	e0c5      	b.n	800169a <__aeabi_dsub+0x3ce>
 800150e:	2d00      	cmp	r5, #0
 8001510:	d000      	beq.n	8001514 <__aeabi_dsub+0x248>
 8001512:	e155      	b.n	80017c0 <__aeabi_dsub+0x4f4>
 8001514:	464b      	mov	r3, r9
 8001516:	0025      	movs	r5, r4
 8001518:	4305      	orrs	r5, r0
 800151a:	d100      	bne.n	800151e <__aeabi_dsub+0x252>
 800151c:	e212      	b.n	8001944 <__aeabi_dsub+0x678>
 800151e:	1e59      	subs	r1, r3, #1
 8001520:	468c      	mov	ip, r1
 8001522:	2b01      	cmp	r3, #1
 8001524:	d100      	bne.n	8001528 <__aeabi_dsub+0x25c>
 8001526:	e249      	b.n	80019bc <__aeabi_dsub+0x6f0>
 8001528:	4d41      	ldr	r5, [pc, #260]	@ (8001630 <__aeabi_dsub+0x364>)
 800152a:	42ab      	cmp	r3, r5
 800152c:	d100      	bne.n	8001530 <__aeabi_dsub+0x264>
 800152e:	e28f      	b.n	8001a50 <__aeabi_dsub+0x784>
 8001530:	2701      	movs	r7, #1
 8001532:	2938      	cmp	r1, #56	@ 0x38
 8001534:	dc11      	bgt.n	800155a <__aeabi_dsub+0x28e>
 8001536:	4663      	mov	r3, ip
 8001538:	2b1f      	cmp	r3, #31
 800153a:	dd00      	ble.n	800153e <__aeabi_dsub+0x272>
 800153c:	e25b      	b.n	80019f6 <__aeabi_dsub+0x72a>
 800153e:	4661      	mov	r1, ip
 8001540:	2320      	movs	r3, #32
 8001542:	0027      	movs	r7, r4
 8001544:	1a5b      	subs	r3, r3, r1
 8001546:	0005      	movs	r5, r0
 8001548:	4098      	lsls	r0, r3
 800154a:	409f      	lsls	r7, r3
 800154c:	40cd      	lsrs	r5, r1
 800154e:	1e43      	subs	r3, r0, #1
 8001550:	4198      	sbcs	r0, r3
 8001552:	40cc      	lsrs	r4, r1
 8001554:	432f      	orrs	r7, r5
 8001556:	4307      	orrs	r7, r0
 8001558:	44a3      	add	fp, r4
 800155a:	18bf      	adds	r7, r7, r2
 800155c:	4297      	cmp	r7, r2
 800155e:	4192      	sbcs	r2, r2
 8001560:	4252      	negs	r2, r2
 8001562:	445a      	add	r2, fp
 8001564:	0014      	movs	r4, r2
 8001566:	464d      	mov	r5, r9
 8001568:	e787      	b.n	800147a <__aeabi_dsub+0x1ae>
 800156a:	4f34      	ldr	r7, [pc, #208]	@ (800163c <__aeabi_dsub+0x370>)
 800156c:	1c6b      	adds	r3, r5, #1
 800156e:	423b      	tst	r3, r7
 8001570:	d000      	beq.n	8001574 <__aeabi_dsub+0x2a8>
 8001572:	e0b6      	b.n	80016e2 <__aeabi_dsub+0x416>
 8001574:	4659      	mov	r1, fp
 8001576:	0023      	movs	r3, r4
 8001578:	4311      	orrs	r1, r2
 800157a:	000f      	movs	r7, r1
 800157c:	4303      	orrs	r3, r0
 800157e:	2d00      	cmp	r5, #0
 8001580:	d000      	beq.n	8001584 <__aeabi_dsub+0x2b8>
 8001582:	e126      	b.n	80017d2 <__aeabi_dsub+0x506>
 8001584:	2b00      	cmp	r3, #0
 8001586:	d100      	bne.n	800158a <__aeabi_dsub+0x2be>
 8001588:	e1c0      	b.n	800190c <__aeabi_dsub+0x640>
 800158a:	2900      	cmp	r1, #0
 800158c:	d100      	bne.n	8001590 <__aeabi_dsub+0x2c4>
 800158e:	e0a1      	b.n	80016d4 <__aeabi_dsub+0x408>
 8001590:	1a83      	subs	r3, r0, r2
 8001592:	4698      	mov	r8, r3
 8001594:	465b      	mov	r3, fp
 8001596:	4540      	cmp	r0, r8
 8001598:	41ad      	sbcs	r5, r5
 800159a:	1ae3      	subs	r3, r4, r3
 800159c:	426d      	negs	r5, r5
 800159e:	1b5b      	subs	r3, r3, r5
 80015a0:	2580      	movs	r5, #128	@ 0x80
 80015a2:	042d      	lsls	r5, r5, #16
 80015a4:	422b      	tst	r3, r5
 80015a6:	d100      	bne.n	80015aa <__aeabi_dsub+0x2de>
 80015a8:	e14b      	b.n	8001842 <__aeabi_dsub+0x576>
 80015aa:	465b      	mov	r3, fp
 80015ac:	1a10      	subs	r0, r2, r0
 80015ae:	4282      	cmp	r2, r0
 80015b0:	4192      	sbcs	r2, r2
 80015b2:	1b1c      	subs	r4, r3, r4
 80015b4:	0007      	movs	r7, r0
 80015b6:	2601      	movs	r6, #1
 80015b8:	4663      	mov	r3, ip
 80015ba:	4252      	negs	r2, r2
 80015bc:	1aa4      	subs	r4, r4, r2
 80015be:	4327      	orrs	r7, r4
 80015c0:	401e      	ands	r6, r3
 80015c2:	2f00      	cmp	r7, #0
 80015c4:	d100      	bne.n	80015c8 <__aeabi_dsub+0x2fc>
 80015c6:	e142      	b.n	800184e <__aeabi_dsub+0x582>
 80015c8:	422c      	tst	r4, r5
 80015ca:	d100      	bne.n	80015ce <__aeabi_dsub+0x302>
 80015cc:	e26d      	b.n	8001aaa <__aeabi_dsub+0x7de>
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <__aeabi_dsub+0x368>)
 80015d0:	2501      	movs	r5, #1
 80015d2:	401c      	ands	r4, r3
 80015d4:	e71b      	b.n	800140e <__aeabi_dsub+0x142>
 80015d6:	42bd      	cmp	r5, r7
 80015d8:	d100      	bne.n	80015dc <__aeabi_dsub+0x310>
 80015da:	e13b      	b.n	8001854 <__aeabi_dsub+0x588>
 80015dc:	2701      	movs	r7, #1
 80015de:	2b38      	cmp	r3, #56	@ 0x38
 80015e0:	dd00      	ble.n	80015e4 <__aeabi_dsub+0x318>
 80015e2:	e745      	b.n	8001470 <__aeabi_dsub+0x1a4>
 80015e4:	2780      	movs	r7, #128	@ 0x80
 80015e6:	4659      	mov	r1, fp
 80015e8:	043f      	lsls	r7, r7, #16
 80015ea:	4339      	orrs	r1, r7
 80015ec:	468b      	mov	fp, r1
 80015ee:	e72a      	b.n	8001446 <__aeabi_dsub+0x17a>
 80015f0:	2400      	movs	r4, #0
 80015f2:	2700      	movs	r7, #0
 80015f4:	052d      	lsls	r5, r5, #20
 80015f6:	4325      	orrs	r5, r4
 80015f8:	07f6      	lsls	r6, r6, #31
 80015fa:	4335      	orrs	r5, r6
 80015fc:	0038      	movs	r0, r7
 80015fe:	0029      	movs	r1, r5
 8001600:	b003      	add	sp, #12
 8001602:	bcf0      	pop	{r4, r5, r6, r7}
 8001604:	46bb      	mov	fp, r7
 8001606:	46b2      	mov	sl, r6
 8001608:	46a9      	mov	r9, r5
 800160a:	46a0      	mov	r8, r4
 800160c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800160e:	077b      	lsls	r3, r7, #29
 8001610:	d004      	beq.n	800161c <__aeabi_dsub+0x350>
 8001612:	230f      	movs	r3, #15
 8001614:	403b      	ands	r3, r7
 8001616:	2b04      	cmp	r3, #4
 8001618:	d000      	beq.n	800161c <__aeabi_dsub+0x350>
 800161a:	e6e7      	b.n	80013ec <__aeabi_dsub+0x120>
 800161c:	002b      	movs	r3, r5
 800161e:	08f8      	lsrs	r0, r7, #3
 8001620:	4a03      	ldr	r2, [pc, #12]	@ (8001630 <__aeabi_dsub+0x364>)
 8001622:	0767      	lsls	r7, r4, #29
 8001624:	4307      	orrs	r7, r0
 8001626:	08e5      	lsrs	r5, r4, #3
 8001628:	4293      	cmp	r3, r2
 800162a:	d100      	bne.n	800162e <__aeabi_dsub+0x362>
 800162c:	e74a      	b.n	80014c4 <__aeabi_dsub+0x1f8>
 800162e:	e0a5      	b.n	800177c <__aeabi_dsub+0x4b0>
 8001630:	000007ff 	.word	0x000007ff
 8001634:	ff7fffff 	.word	0xff7fffff
 8001638:	fffff801 	.word	0xfffff801
 800163c:	000007fe 	.word	0x000007fe
 8001640:	0038      	movs	r0, r7
 8001642:	f000 fbbf 	bl	8001dc4 <__clzsi2>
 8001646:	0003      	movs	r3, r0
 8001648:	3318      	adds	r3, #24
 800164a:	2b1f      	cmp	r3, #31
 800164c:	dc00      	bgt.n	8001650 <__aeabi_dsub+0x384>
 800164e:	e6a7      	b.n	80013a0 <__aeabi_dsub+0xd4>
 8001650:	003a      	movs	r2, r7
 8001652:	3808      	subs	r0, #8
 8001654:	4082      	lsls	r2, r0
 8001656:	429d      	cmp	r5, r3
 8001658:	dd00      	ble.n	800165c <__aeabi_dsub+0x390>
 800165a:	e08a      	b.n	8001772 <__aeabi_dsub+0x4a6>
 800165c:	1b5b      	subs	r3, r3, r5
 800165e:	1c58      	adds	r0, r3, #1
 8001660:	281f      	cmp	r0, #31
 8001662:	dc00      	bgt.n	8001666 <__aeabi_dsub+0x39a>
 8001664:	e1d8      	b.n	8001a18 <__aeabi_dsub+0x74c>
 8001666:	0017      	movs	r7, r2
 8001668:	3b1f      	subs	r3, #31
 800166a:	40df      	lsrs	r7, r3
 800166c:	2820      	cmp	r0, #32
 800166e:	d005      	beq.n	800167c <__aeabi_dsub+0x3b0>
 8001670:	2340      	movs	r3, #64	@ 0x40
 8001672:	1a1b      	subs	r3, r3, r0
 8001674:	409a      	lsls	r2, r3
 8001676:	1e53      	subs	r3, r2, #1
 8001678:	419a      	sbcs	r2, r3
 800167a:	4317      	orrs	r7, r2
 800167c:	2500      	movs	r5, #0
 800167e:	2f00      	cmp	r7, #0
 8001680:	d100      	bne.n	8001684 <__aeabi_dsub+0x3b8>
 8001682:	e0e5      	b.n	8001850 <__aeabi_dsub+0x584>
 8001684:	077b      	lsls	r3, r7, #29
 8001686:	d000      	beq.n	800168a <__aeabi_dsub+0x3be>
 8001688:	e6ab      	b.n	80013e2 <__aeabi_dsub+0x116>
 800168a:	002c      	movs	r4, r5
 800168c:	e7c6      	b.n	800161c <__aeabi_dsub+0x350>
 800168e:	08c0      	lsrs	r0, r0, #3
 8001690:	e7c6      	b.n	8001620 <__aeabi_dsub+0x354>
 8001692:	2700      	movs	r7, #0
 8001694:	2400      	movs	r4, #0
 8001696:	4dd1      	ldr	r5, [pc, #836]	@ (80019dc <__aeabi_dsub+0x710>)
 8001698:	e7ac      	b.n	80015f4 <__aeabi_dsub+0x328>
 800169a:	4fd1      	ldr	r7, [pc, #836]	@ (80019e0 <__aeabi_dsub+0x714>)
 800169c:	1c6b      	adds	r3, r5, #1
 800169e:	423b      	tst	r3, r7
 80016a0:	d171      	bne.n	8001786 <__aeabi_dsub+0x4ba>
 80016a2:	0023      	movs	r3, r4
 80016a4:	4303      	orrs	r3, r0
 80016a6:	2d00      	cmp	r5, #0
 80016a8:	d000      	beq.n	80016ac <__aeabi_dsub+0x3e0>
 80016aa:	e14e      	b.n	800194a <__aeabi_dsub+0x67e>
 80016ac:	4657      	mov	r7, sl
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d100      	bne.n	80016b4 <__aeabi_dsub+0x3e8>
 80016b2:	e1b5      	b.n	8001a20 <__aeabi_dsub+0x754>
 80016b4:	2f00      	cmp	r7, #0
 80016b6:	d00d      	beq.n	80016d4 <__aeabi_dsub+0x408>
 80016b8:	1883      	adds	r3, r0, r2
 80016ba:	4283      	cmp	r3, r0
 80016bc:	4180      	sbcs	r0, r0
 80016be:	445c      	add	r4, fp
 80016c0:	4240      	negs	r0, r0
 80016c2:	1824      	adds	r4, r4, r0
 80016c4:	0222      	lsls	r2, r4, #8
 80016c6:	d500      	bpl.n	80016ca <__aeabi_dsub+0x3fe>
 80016c8:	e1c8      	b.n	8001a5c <__aeabi_dsub+0x790>
 80016ca:	001f      	movs	r7, r3
 80016cc:	4698      	mov	r8, r3
 80016ce:	4327      	orrs	r7, r4
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dsub+0x408>
 80016d2:	e0bc      	b.n	800184e <__aeabi_dsub+0x582>
 80016d4:	4643      	mov	r3, r8
 80016d6:	0767      	lsls	r7, r4, #29
 80016d8:	08db      	lsrs	r3, r3, #3
 80016da:	431f      	orrs	r7, r3
 80016dc:	08e5      	lsrs	r5, r4, #3
 80016de:	2300      	movs	r3, #0
 80016e0:	e04c      	b.n	800177c <__aeabi_dsub+0x4b0>
 80016e2:	1a83      	subs	r3, r0, r2
 80016e4:	4698      	mov	r8, r3
 80016e6:	465b      	mov	r3, fp
 80016e8:	4540      	cmp	r0, r8
 80016ea:	41bf      	sbcs	r7, r7
 80016ec:	1ae3      	subs	r3, r4, r3
 80016ee:	427f      	negs	r7, r7
 80016f0:	1bdb      	subs	r3, r3, r7
 80016f2:	021f      	lsls	r7, r3, #8
 80016f4:	d47c      	bmi.n	80017f0 <__aeabi_dsub+0x524>
 80016f6:	4647      	mov	r7, r8
 80016f8:	431f      	orrs	r7, r3
 80016fa:	d100      	bne.n	80016fe <__aeabi_dsub+0x432>
 80016fc:	e0a6      	b.n	800184c <__aeabi_dsub+0x580>
 80016fe:	001c      	movs	r4, r3
 8001700:	4647      	mov	r7, r8
 8001702:	e645      	b.n	8001390 <__aeabi_dsub+0xc4>
 8001704:	4cb7      	ldr	r4, [pc, #732]	@ (80019e4 <__aeabi_dsub+0x718>)
 8001706:	1aed      	subs	r5, r5, r3
 8001708:	4014      	ands	r4, r2
 800170a:	077b      	lsls	r3, r7, #29
 800170c:	d000      	beq.n	8001710 <__aeabi_dsub+0x444>
 800170e:	e780      	b.n	8001612 <__aeabi_dsub+0x346>
 8001710:	e784      	b.n	800161c <__aeabi_dsub+0x350>
 8001712:	464b      	mov	r3, r9
 8001714:	0025      	movs	r5, r4
 8001716:	4305      	orrs	r5, r0
 8001718:	d066      	beq.n	80017e8 <__aeabi_dsub+0x51c>
 800171a:	1e5f      	subs	r7, r3, #1
 800171c:	2b01      	cmp	r3, #1
 800171e:	d100      	bne.n	8001722 <__aeabi_dsub+0x456>
 8001720:	e0fc      	b.n	800191c <__aeabi_dsub+0x650>
 8001722:	4dae      	ldr	r5, [pc, #696]	@ (80019dc <__aeabi_dsub+0x710>)
 8001724:	42ab      	cmp	r3, r5
 8001726:	d100      	bne.n	800172a <__aeabi_dsub+0x45e>
 8001728:	e15e      	b.n	80019e8 <__aeabi_dsub+0x71c>
 800172a:	4666      	mov	r6, ip
 800172c:	2f38      	cmp	r7, #56	@ 0x38
 800172e:	dc00      	bgt.n	8001732 <__aeabi_dsub+0x466>
 8001730:	e0b4      	b.n	800189c <__aeabi_dsub+0x5d0>
 8001732:	2001      	movs	r0, #1
 8001734:	1a17      	subs	r7, r2, r0
 8001736:	42ba      	cmp	r2, r7
 8001738:	4192      	sbcs	r2, r2
 800173a:	465b      	mov	r3, fp
 800173c:	4252      	negs	r2, r2
 800173e:	464d      	mov	r5, r9
 8001740:	1a9c      	subs	r4, r3, r2
 8001742:	e620      	b.n	8001386 <__aeabi_dsub+0xba>
 8001744:	0767      	lsls	r7, r4, #29
 8001746:	08c0      	lsrs	r0, r0, #3
 8001748:	4307      	orrs	r7, r0
 800174a:	08e5      	lsrs	r5, r4, #3
 800174c:	e6ba      	b.n	80014c4 <__aeabi_dsub+0x1f8>
 800174e:	001f      	movs	r7, r3
 8001750:	4659      	mov	r1, fp
 8001752:	3f20      	subs	r7, #32
 8001754:	40f9      	lsrs	r1, r7
 8001756:	000f      	movs	r7, r1
 8001758:	2b20      	cmp	r3, #32
 800175a:	d005      	beq.n	8001768 <__aeabi_dsub+0x49c>
 800175c:	2140      	movs	r1, #64	@ 0x40
 800175e:	1acb      	subs	r3, r1, r3
 8001760:	4659      	mov	r1, fp
 8001762:	4099      	lsls	r1, r3
 8001764:	430a      	orrs	r2, r1
 8001766:	4692      	mov	sl, r2
 8001768:	4653      	mov	r3, sl
 800176a:	1e5a      	subs	r2, r3, #1
 800176c:	4193      	sbcs	r3, r2
 800176e:	431f      	orrs	r7, r3
 8001770:	e604      	b.n	800137c <__aeabi_dsub+0xb0>
 8001772:	1aeb      	subs	r3, r5, r3
 8001774:	4d9b      	ldr	r5, [pc, #620]	@ (80019e4 <__aeabi_dsub+0x718>)
 8001776:	4015      	ands	r5, r2
 8001778:	076f      	lsls	r7, r5, #29
 800177a:	08ed      	lsrs	r5, r5, #3
 800177c:	032c      	lsls	r4, r5, #12
 800177e:	055d      	lsls	r5, r3, #21
 8001780:	0b24      	lsrs	r4, r4, #12
 8001782:	0d6d      	lsrs	r5, r5, #21
 8001784:	e736      	b.n	80015f4 <__aeabi_dsub+0x328>
 8001786:	4d95      	ldr	r5, [pc, #596]	@ (80019dc <__aeabi_dsub+0x710>)
 8001788:	42ab      	cmp	r3, r5
 800178a:	d100      	bne.n	800178e <__aeabi_dsub+0x4c2>
 800178c:	e0d6      	b.n	800193c <__aeabi_dsub+0x670>
 800178e:	1882      	adds	r2, r0, r2
 8001790:	0021      	movs	r1, r4
 8001792:	4282      	cmp	r2, r0
 8001794:	4180      	sbcs	r0, r0
 8001796:	4459      	add	r1, fp
 8001798:	4240      	negs	r0, r0
 800179a:	1808      	adds	r0, r1, r0
 800179c:	07c7      	lsls	r7, r0, #31
 800179e:	0852      	lsrs	r2, r2, #1
 80017a0:	4317      	orrs	r7, r2
 80017a2:	0844      	lsrs	r4, r0, #1
 80017a4:	0752      	lsls	r2, r2, #29
 80017a6:	d400      	bmi.n	80017aa <__aeabi_dsub+0x4de>
 80017a8:	e185      	b.n	8001ab6 <__aeabi_dsub+0x7ea>
 80017aa:	220f      	movs	r2, #15
 80017ac:	001d      	movs	r5, r3
 80017ae:	403a      	ands	r2, r7
 80017b0:	2a04      	cmp	r2, #4
 80017b2:	d000      	beq.n	80017b6 <__aeabi_dsub+0x4ea>
 80017b4:	e61a      	b.n	80013ec <__aeabi_dsub+0x120>
 80017b6:	08ff      	lsrs	r7, r7, #3
 80017b8:	0764      	lsls	r4, r4, #29
 80017ba:	4327      	orrs	r7, r4
 80017bc:	0905      	lsrs	r5, r0, #4
 80017be:	e7dd      	b.n	800177c <__aeabi_dsub+0x4b0>
 80017c0:	465b      	mov	r3, fp
 80017c2:	08d2      	lsrs	r2, r2, #3
 80017c4:	075f      	lsls	r7, r3, #29
 80017c6:	4317      	orrs	r7, r2
 80017c8:	08dd      	lsrs	r5, r3, #3
 80017ca:	e67b      	b.n	80014c4 <__aeabi_dsub+0x1f8>
 80017cc:	2700      	movs	r7, #0
 80017ce:	2400      	movs	r4, #0
 80017d0:	e710      	b.n	80015f4 <__aeabi_dsub+0x328>
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d000      	beq.n	80017d8 <__aeabi_dsub+0x50c>
 80017d6:	e0d6      	b.n	8001986 <__aeabi_dsub+0x6ba>
 80017d8:	2900      	cmp	r1, #0
 80017da:	d000      	beq.n	80017de <__aeabi_dsub+0x512>
 80017dc:	e12f      	b.n	8001a3e <__aeabi_dsub+0x772>
 80017de:	2480      	movs	r4, #128	@ 0x80
 80017e0:	2600      	movs	r6, #0
 80017e2:	4d7e      	ldr	r5, [pc, #504]	@ (80019dc <__aeabi_dsub+0x710>)
 80017e4:	0324      	lsls	r4, r4, #12
 80017e6:	e705      	b.n	80015f4 <__aeabi_dsub+0x328>
 80017e8:	4666      	mov	r6, ip
 80017ea:	465c      	mov	r4, fp
 80017ec:	08d0      	lsrs	r0, r2, #3
 80017ee:	e717      	b.n	8001620 <__aeabi_dsub+0x354>
 80017f0:	465b      	mov	r3, fp
 80017f2:	1a17      	subs	r7, r2, r0
 80017f4:	42ba      	cmp	r2, r7
 80017f6:	4192      	sbcs	r2, r2
 80017f8:	1b1c      	subs	r4, r3, r4
 80017fa:	2601      	movs	r6, #1
 80017fc:	4663      	mov	r3, ip
 80017fe:	4252      	negs	r2, r2
 8001800:	1aa4      	subs	r4, r4, r2
 8001802:	401e      	ands	r6, r3
 8001804:	e5c4      	b.n	8001390 <__aeabi_dsub+0xc4>
 8001806:	1883      	adds	r3, r0, r2
 8001808:	4283      	cmp	r3, r0
 800180a:	4180      	sbcs	r0, r0
 800180c:	445c      	add	r4, fp
 800180e:	4240      	negs	r0, r0
 8001810:	1825      	adds	r5, r4, r0
 8001812:	022a      	lsls	r2, r5, #8
 8001814:	d400      	bmi.n	8001818 <__aeabi_dsub+0x54c>
 8001816:	e0da      	b.n	80019ce <__aeabi_dsub+0x702>
 8001818:	4a72      	ldr	r2, [pc, #456]	@ (80019e4 <__aeabi_dsub+0x718>)
 800181a:	085b      	lsrs	r3, r3, #1
 800181c:	4015      	ands	r5, r2
 800181e:	07ea      	lsls	r2, r5, #31
 8001820:	431a      	orrs	r2, r3
 8001822:	0869      	lsrs	r1, r5, #1
 8001824:	075b      	lsls	r3, r3, #29
 8001826:	d400      	bmi.n	800182a <__aeabi_dsub+0x55e>
 8001828:	e14a      	b.n	8001ac0 <__aeabi_dsub+0x7f4>
 800182a:	230f      	movs	r3, #15
 800182c:	4013      	ands	r3, r2
 800182e:	2b04      	cmp	r3, #4
 8001830:	d100      	bne.n	8001834 <__aeabi_dsub+0x568>
 8001832:	e0fc      	b.n	8001a2e <__aeabi_dsub+0x762>
 8001834:	1d17      	adds	r7, r2, #4
 8001836:	4297      	cmp	r7, r2
 8001838:	41a4      	sbcs	r4, r4
 800183a:	4264      	negs	r4, r4
 800183c:	2502      	movs	r5, #2
 800183e:	1864      	adds	r4, r4, r1
 8001840:	e6ec      	b.n	800161c <__aeabi_dsub+0x350>
 8001842:	4647      	mov	r7, r8
 8001844:	001c      	movs	r4, r3
 8001846:	431f      	orrs	r7, r3
 8001848:	d000      	beq.n	800184c <__aeabi_dsub+0x580>
 800184a:	e743      	b.n	80016d4 <__aeabi_dsub+0x408>
 800184c:	2600      	movs	r6, #0
 800184e:	2500      	movs	r5, #0
 8001850:	2400      	movs	r4, #0
 8001852:	e6cf      	b.n	80015f4 <__aeabi_dsub+0x328>
 8001854:	08c0      	lsrs	r0, r0, #3
 8001856:	0767      	lsls	r7, r4, #29
 8001858:	4307      	orrs	r7, r0
 800185a:	08e5      	lsrs	r5, r4, #3
 800185c:	e632      	b.n	80014c4 <__aeabi_dsub+0x1f8>
 800185e:	1a87      	subs	r7, r0, r2
 8001860:	465b      	mov	r3, fp
 8001862:	42b8      	cmp	r0, r7
 8001864:	4180      	sbcs	r0, r0
 8001866:	1ae4      	subs	r4, r4, r3
 8001868:	4240      	negs	r0, r0
 800186a:	1a24      	subs	r4, r4, r0
 800186c:	0223      	lsls	r3, r4, #8
 800186e:	d428      	bmi.n	80018c2 <__aeabi_dsub+0x5f6>
 8001870:	0763      	lsls	r3, r4, #29
 8001872:	08ff      	lsrs	r7, r7, #3
 8001874:	431f      	orrs	r7, r3
 8001876:	08e5      	lsrs	r5, r4, #3
 8001878:	2301      	movs	r3, #1
 800187a:	e77f      	b.n	800177c <__aeabi_dsub+0x4b0>
 800187c:	2b00      	cmp	r3, #0
 800187e:	d100      	bne.n	8001882 <__aeabi_dsub+0x5b6>
 8001880:	e673      	b.n	800156a <__aeabi_dsub+0x29e>
 8001882:	464b      	mov	r3, r9
 8001884:	1b5f      	subs	r7, r3, r5
 8001886:	003b      	movs	r3, r7
 8001888:	2d00      	cmp	r5, #0
 800188a:	d100      	bne.n	800188e <__aeabi_dsub+0x5c2>
 800188c:	e742      	b.n	8001714 <__aeabi_dsub+0x448>
 800188e:	2f38      	cmp	r7, #56	@ 0x38
 8001890:	dd00      	ble.n	8001894 <__aeabi_dsub+0x5c8>
 8001892:	e0ec      	b.n	8001a6e <__aeabi_dsub+0x7a2>
 8001894:	2380      	movs	r3, #128	@ 0x80
 8001896:	000e      	movs	r6, r1
 8001898:	041b      	lsls	r3, r3, #16
 800189a:	431c      	orrs	r4, r3
 800189c:	2f1f      	cmp	r7, #31
 800189e:	dc25      	bgt.n	80018ec <__aeabi_dsub+0x620>
 80018a0:	2520      	movs	r5, #32
 80018a2:	0023      	movs	r3, r4
 80018a4:	1bed      	subs	r5, r5, r7
 80018a6:	0001      	movs	r1, r0
 80018a8:	40a8      	lsls	r0, r5
 80018aa:	40ab      	lsls	r3, r5
 80018ac:	40f9      	lsrs	r1, r7
 80018ae:	1e45      	subs	r5, r0, #1
 80018b0:	41a8      	sbcs	r0, r5
 80018b2:	430b      	orrs	r3, r1
 80018b4:	40fc      	lsrs	r4, r7
 80018b6:	4318      	orrs	r0, r3
 80018b8:	465b      	mov	r3, fp
 80018ba:	1b1b      	subs	r3, r3, r4
 80018bc:	469b      	mov	fp, r3
 80018be:	e739      	b.n	8001734 <__aeabi_dsub+0x468>
 80018c0:	4666      	mov	r6, ip
 80018c2:	2501      	movs	r5, #1
 80018c4:	e562      	b.n	800138c <__aeabi_dsub+0xc0>
 80018c6:	001f      	movs	r7, r3
 80018c8:	4659      	mov	r1, fp
 80018ca:	3f20      	subs	r7, #32
 80018cc:	40f9      	lsrs	r1, r7
 80018ce:	468c      	mov	ip, r1
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	d005      	beq.n	80018e0 <__aeabi_dsub+0x614>
 80018d4:	2740      	movs	r7, #64	@ 0x40
 80018d6:	4659      	mov	r1, fp
 80018d8:	1afb      	subs	r3, r7, r3
 80018da:	4099      	lsls	r1, r3
 80018dc:	430a      	orrs	r2, r1
 80018de:	4692      	mov	sl, r2
 80018e0:	4657      	mov	r7, sl
 80018e2:	1e7b      	subs	r3, r7, #1
 80018e4:	419f      	sbcs	r7, r3
 80018e6:	4663      	mov	r3, ip
 80018e8:	431f      	orrs	r7, r3
 80018ea:	e5c1      	b.n	8001470 <__aeabi_dsub+0x1a4>
 80018ec:	003b      	movs	r3, r7
 80018ee:	0025      	movs	r5, r4
 80018f0:	3b20      	subs	r3, #32
 80018f2:	40dd      	lsrs	r5, r3
 80018f4:	2f20      	cmp	r7, #32
 80018f6:	d004      	beq.n	8001902 <__aeabi_dsub+0x636>
 80018f8:	2340      	movs	r3, #64	@ 0x40
 80018fa:	1bdb      	subs	r3, r3, r7
 80018fc:	409c      	lsls	r4, r3
 80018fe:	4320      	orrs	r0, r4
 8001900:	4680      	mov	r8, r0
 8001902:	4640      	mov	r0, r8
 8001904:	1e43      	subs	r3, r0, #1
 8001906:	4198      	sbcs	r0, r3
 8001908:	4328      	orrs	r0, r5
 800190a:	e713      	b.n	8001734 <__aeabi_dsub+0x468>
 800190c:	2900      	cmp	r1, #0
 800190e:	d09d      	beq.n	800184c <__aeabi_dsub+0x580>
 8001910:	2601      	movs	r6, #1
 8001912:	4663      	mov	r3, ip
 8001914:	465c      	mov	r4, fp
 8001916:	4690      	mov	r8, r2
 8001918:	401e      	ands	r6, r3
 800191a:	e6db      	b.n	80016d4 <__aeabi_dsub+0x408>
 800191c:	1a17      	subs	r7, r2, r0
 800191e:	465b      	mov	r3, fp
 8001920:	42ba      	cmp	r2, r7
 8001922:	4192      	sbcs	r2, r2
 8001924:	1b1c      	subs	r4, r3, r4
 8001926:	4252      	negs	r2, r2
 8001928:	1aa4      	subs	r4, r4, r2
 800192a:	0223      	lsls	r3, r4, #8
 800192c:	d4c8      	bmi.n	80018c0 <__aeabi_dsub+0x5f4>
 800192e:	0763      	lsls	r3, r4, #29
 8001930:	08ff      	lsrs	r7, r7, #3
 8001932:	431f      	orrs	r7, r3
 8001934:	4666      	mov	r6, ip
 8001936:	2301      	movs	r3, #1
 8001938:	08e5      	lsrs	r5, r4, #3
 800193a:	e71f      	b.n	800177c <__aeabi_dsub+0x4b0>
 800193c:	001d      	movs	r5, r3
 800193e:	2400      	movs	r4, #0
 8001940:	2700      	movs	r7, #0
 8001942:	e657      	b.n	80015f4 <__aeabi_dsub+0x328>
 8001944:	465c      	mov	r4, fp
 8001946:	08d0      	lsrs	r0, r2, #3
 8001948:	e66a      	b.n	8001620 <__aeabi_dsub+0x354>
 800194a:	2b00      	cmp	r3, #0
 800194c:	d100      	bne.n	8001950 <__aeabi_dsub+0x684>
 800194e:	e737      	b.n	80017c0 <__aeabi_dsub+0x4f4>
 8001950:	4653      	mov	r3, sl
 8001952:	08c0      	lsrs	r0, r0, #3
 8001954:	0767      	lsls	r7, r4, #29
 8001956:	4307      	orrs	r7, r0
 8001958:	08e5      	lsrs	r5, r4, #3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d100      	bne.n	8001960 <__aeabi_dsub+0x694>
 800195e:	e5b1      	b.n	80014c4 <__aeabi_dsub+0x1f8>
 8001960:	2380      	movs	r3, #128	@ 0x80
 8001962:	031b      	lsls	r3, r3, #12
 8001964:	421d      	tst	r5, r3
 8001966:	d008      	beq.n	800197a <__aeabi_dsub+0x6ae>
 8001968:	4659      	mov	r1, fp
 800196a:	08c8      	lsrs	r0, r1, #3
 800196c:	4218      	tst	r0, r3
 800196e:	d104      	bne.n	800197a <__aeabi_dsub+0x6ae>
 8001970:	08d2      	lsrs	r2, r2, #3
 8001972:	0749      	lsls	r1, r1, #29
 8001974:	430a      	orrs	r2, r1
 8001976:	0017      	movs	r7, r2
 8001978:	0005      	movs	r5, r0
 800197a:	0f7b      	lsrs	r3, r7, #29
 800197c:	00ff      	lsls	r7, r7, #3
 800197e:	08ff      	lsrs	r7, r7, #3
 8001980:	075b      	lsls	r3, r3, #29
 8001982:	431f      	orrs	r7, r3
 8001984:	e59e      	b.n	80014c4 <__aeabi_dsub+0x1f8>
 8001986:	08c0      	lsrs	r0, r0, #3
 8001988:	0763      	lsls	r3, r4, #29
 800198a:	4318      	orrs	r0, r3
 800198c:	08e5      	lsrs	r5, r4, #3
 800198e:	2900      	cmp	r1, #0
 8001990:	d053      	beq.n	8001a3a <__aeabi_dsub+0x76e>
 8001992:	2380      	movs	r3, #128	@ 0x80
 8001994:	031b      	lsls	r3, r3, #12
 8001996:	421d      	tst	r5, r3
 8001998:	d00a      	beq.n	80019b0 <__aeabi_dsub+0x6e4>
 800199a:	4659      	mov	r1, fp
 800199c:	08cc      	lsrs	r4, r1, #3
 800199e:	421c      	tst	r4, r3
 80019a0:	d106      	bne.n	80019b0 <__aeabi_dsub+0x6e4>
 80019a2:	2601      	movs	r6, #1
 80019a4:	4663      	mov	r3, ip
 80019a6:	0025      	movs	r5, r4
 80019a8:	08d0      	lsrs	r0, r2, #3
 80019aa:	0749      	lsls	r1, r1, #29
 80019ac:	4308      	orrs	r0, r1
 80019ae:	401e      	ands	r6, r3
 80019b0:	0f47      	lsrs	r7, r0, #29
 80019b2:	00c0      	lsls	r0, r0, #3
 80019b4:	08c0      	lsrs	r0, r0, #3
 80019b6:	077f      	lsls	r7, r7, #29
 80019b8:	4307      	orrs	r7, r0
 80019ba:	e583      	b.n	80014c4 <__aeabi_dsub+0x1f8>
 80019bc:	1883      	adds	r3, r0, r2
 80019be:	4293      	cmp	r3, r2
 80019c0:	4192      	sbcs	r2, r2
 80019c2:	445c      	add	r4, fp
 80019c4:	4252      	negs	r2, r2
 80019c6:	18a5      	adds	r5, r4, r2
 80019c8:	022a      	lsls	r2, r5, #8
 80019ca:	d500      	bpl.n	80019ce <__aeabi_dsub+0x702>
 80019cc:	e724      	b.n	8001818 <__aeabi_dsub+0x54c>
 80019ce:	076f      	lsls	r7, r5, #29
 80019d0:	08db      	lsrs	r3, r3, #3
 80019d2:	431f      	orrs	r7, r3
 80019d4:	08ed      	lsrs	r5, r5, #3
 80019d6:	2301      	movs	r3, #1
 80019d8:	e6d0      	b.n	800177c <__aeabi_dsub+0x4b0>
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	000007ff 	.word	0x000007ff
 80019e0:	000007fe 	.word	0x000007fe
 80019e4:	ff7fffff 	.word	0xff7fffff
 80019e8:	465b      	mov	r3, fp
 80019ea:	08d2      	lsrs	r2, r2, #3
 80019ec:	075f      	lsls	r7, r3, #29
 80019ee:	4666      	mov	r6, ip
 80019f0:	4317      	orrs	r7, r2
 80019f2:	08dd      	lsrs	r5, r3, #3
 80019f4:	e566      	b.n	80014c4 <__aeabi_dsub+0x1f8>
 80019f6:	0025      	movs	r5, r4
 80019f8:	3b20      	subs	r3, #32
 80019fa:	40dd      	lsrs	r5, r3
 80019fc:	4663      	mov	r3, ip
 80019fe:	2b20      	cmp	r3, #32
 8001a00:	d005      	beq.n	8001a0e <__aeabi_dsub+0x742>
 8001a02:	2340      	movs	r3, #64	@ 0x40
 8001a04:	4661      	mov	r1, ip
 8001a06:	1a5b      	subs	r3, r3, r1
 8001a08:	409c      	lsls	r4, r3
 8001a0a:	4320      	orrs	r0, r4
 8001a0c:	4680      	mov	r8, r0
 8001a0e:	4647      	mov	r7, r8
 8001a10:	1e7b      	subs	r3, r7, #1
 8001a12:	419f      	sbcs	r7, r3
 8001a14:	432f      	orrs	r7, r5
 8001a16:	e5a0      	b.n	800155a <__aeabi_dsub+0x28e>
 8001a18:	2120      	movs	r1, #32
 8001a1a:	2700      	movs	r7, #0
 8001a1c:	1a09      	subs	r1, r1, r0
 8001a1e:	e4d2      	b.n	80013c6 <__aeabi_dsub+0xfa>
 8001a20:	2f00      	cmp	r7, #0
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dsub+0x75a>
 8001a24:	e713      	b.n	800184e <__aeabi_dsub+0x582>
 8001a26:	465c      	mov	r4, fp
 8001a28:	0017      	movs	r7, r2
 8001a2a:	2500      	movs	r5, #0
 8001a2c:	e5f6      	b.n	800161c <__aeabi_dsub+0x350>
 8001a2e:	08d7      	lsrs	r7, r2, #3
 8001a30:	0749      	lsls	r1, r1, #29
 8001a32:	2302      	movs	r3, #2
 8001a34:	430f      	orrs	r7, r1
 8001a36:	092d      	lsrs	r5, r5, #4
 8001a38:	e6a0      	b.n	800177c <__aeabi_dsub+0x4b0>
 8001a3a:	0007      	movs	r7, r0
 8001a3c:	e542      	b.n	80014c4 <__aeabi_dsub+0x1f8>
 8001a3e:	465b      	mov	r3, fp
 8001a40:	2601      	movs	r6, #1
 8001a42:	075f      	lsls	r7, r3, #29
 8001a44:	08dd      	lsrs	r5, r3, #3
 8001a46:	4663      	mov	r3, ip
 8001a48:	08d2      	lsrs	r2, r2, #3
 8001a4a:	4317      	orrs	r7, r2
 8001a4c:	401e      	ands	r6, r3
 8001a4e:	e539      	b.n	80014c4 <__aeabi_dsub+0x1f8>
 8001a50:	465b      	mov	r3, fp
 8001a52:	08d2      	lsrs	r2, r2, #3
 8001a54:	075f      	lsls	r7, r3, #29
 8001a56:	4317      	orrs	r7, r2
 8001a58:	08dd      	lsrs	r5, r3, #3
 8001a5a:	e533      	b.n	80014c4 <__aeabi_dsub+0x1f8>
 8001a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad8 <__aeabi_dsub+0x80c>)
 8001a5e:	08db      	lsrs	r3, r3, #3
 8001a60:	4022      	ands	r2, r4
 8001a62:	0757      	lsls	r7, r2, #29
 8001a64:	0252      	lsls	r2, r2, #9
 8001a66:	2501      	movs	r5, #1
 8001a68:	431f      	orrs	r7, r3
 8001a6a:	0b14      	lsrs	r4, r2, #12
 8001a6c:	e5c2      	b.n	80015f4 <__aeabi_dsub+0x328>
 8001a6e:	000e      	movs	r6, r1
 8001a70:	2001      	movs	r0, #1
 8001a72:	e65f      	b.n	8001734 <__aeabi_dsub+0x468>
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00d      	beq.n	8001a94 <__aeabi_dsub+0x7c8>
 8001a78:	464b      	mov	r3, r9
 8001a7a:	1b5b      	subs	r3, r3, r5
 8001a7c:	469c      	mov	ip, r3
 8001a7e:	2d00      	cmp	r5, #0
 8001a80:	d100      	bne.n	8001a84 <__aeabi_dsub+0x7b8>
 8001a82:	e548      	b.n	8001516 <__aeabi_dsub+0x24a>
 8001a84:	2701      	movs	r7, #1
 8001a86:	2b38      	cmp	r3, #56	@ 0x38
 8001a88:	dd00      	ble.n	8001a8c <__aeabi_dsub+0x7c0>
 8001a8a:	e566      	b.n	800155a <__aeabi_dsub+0x28e>
 8001a8c:	2380      	movs	r3, #128	@ 0x80
 8001a8e:	041b      	lsls	r3, r3, #16
 8001a90:	431c      	orrs	r4, r3
 8001a92:	e550      	b.n	8001536 <__aeabi_dsub+0x26a>
 8001a94:	1c6b      	adds	r3, r5, #1
 8001a96:	4d11      	ldr	r5, [pc, #68]	@ (8001adc <__aeabi_dsub+0x810>)
 8001a98:	422b      	tst	r3, r5
 8001a9a:	d000      	beq.n	8001a9e <__aeabi_dsub+0x7d2>
 8001a9c:	e673      	b.n	8001786 <__aeabi_dsub+0x4ba>
 8001a9e:	4659      	mov	r1, fp
 8001aa0:	0023      	movs	r3, r4
 8001aa2:	4311      	orrs	r1, r2
 8001aa4:	468a      	mov	sl, r1
 8001aa6:	4303      	orrs	r3, r0
 8001aa8:	e600      	b.n	80016ac <__aeabi_dsub+0x3e0>
 8001aaa:	0767      	lsls	r7, r4, #29
 8001aac:	08c0      	lsrs	r0, r0, #3
 8001aae:	2300      	movs	r3, #0
 8001ab0:	4307      	orrs	r7, r0
 8001ab2:	08e5      	lsrs	r5, r4, #3
 8001ab4:	e662      	b.n	800177c <__aeabi_dsub+0x4b0>
 8001ab6:	0764      	lsls	r4, r4, #29
 8001ab8:	08ff      	lsrs	r7, r7, #3
 8001aba:	4327      	orrs	r7, r4
 8001abc:	0905      	lsrs	r5, r0, #4
 8001abe:	e65d      	b.n	800177c <__aeabi_dsub+0x4b0>
 8001ac0:	08d2      	lsrs	r2, r2, #3
 8001ac2:	0749      	lsls	r1, r1, #29
 8001ac4:	4311      	orrs	r1, r2
 8001ac6:	000f      	movs	r7, r1
 8001ac8:	2302      	movs	r3, #2
 8001aca:	092d      	lsrs	r5, r5, #4
 8001acc:	e656      	b.n	800177c <__aeabi_dsub+0x4b0>
 8001ace:	0007      	movs	r7, r0
 8001ad0:	e5a4      	b.n	800161c <__aeabi_dsub+0x350>
 8001ad2:	0038      	movs	r0, r7
 8001ad4:	e48f      	b.n	80013f6 <__aeabi_dsub+0x12a>
 8001ad6:	46c0      	nop			@ (mov r8, r8)
 8001ad8:	ff7fffff 	.word	0xff7fffff
 8001adc:	000007fe 	.word	0x000007fe

08001ae0 <__aeabi_d2iz>:
 8001ae0:	000b      	movs	r3, r1
 8001ae2:	0002      	movs	r2, r0
 8001ae4:	b570      	push	{r4, r5, r6, lr}
 8001ae6:	4d16      	ldr	r5, [pc, #88]	@ (8001b40 <__aeabi_d2iz+0x60>)
 8001ae8:	030c      	lsls	r4, r1, #12
 8001aea:	b082      	sub	sp, #8
 8001aec:	0049      	lsls	r1, r1, #1
 8001aee:	2000      	movs	r0, #0
 8001af0:	9200      	str	r2, [sp, #0]
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	0b24      	lsrs	r4, r4, #12
 8001af6:	0d49      	lsrs	r1, r1, #21
 8001af8:	0fde      	lsrs	r6, r3, #31
 8001afa:	42a9      	cmp	r1, r5
 8001afc:	dd04      	ble.n	8001b08 <__aeabi_d2iz+0x28>
 8001afe:	4811      	ldr	r0, [pc, #68]	@ (8001b44 <__aeabi_d2iz+0x64>)
 8001b00:	4281      	cmp	r1, r0
 8001b02:	dd03      	ble.n	8001b0c <__aeabi_d2iz+0x2c>
 8001b04:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <__aeabi_d2iz+0x68>)
 8001b06:	18f0      	adds	r0, r6, r3
 8001b08:	b002      	add	sp, #8
 8001b0a:	bd70      	pop	{r4, r5, r6, pc}
 8001b0c:	2080      	movs	r0, #128	@ 0x80
 8001b0e:	0340      	lsls	r0, r0, #13
 8001b10:	4320      	orrs	r0, r4
 8001b12:	4c0e      	ldr	r4, [pc, #56]	@ (8001b4c <__aeabi_d2iz+0x6c>)
 8001b14:	1a64      	subs	r4, r4, r1
 8001b16:	2c1f      	cmp	r4, #31
 8001b18:	dd08      	ble.n	8001b2c <__aeabi_d2iz+0x4c>
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <__aeabi_d2iz+0x70>)
 8001b1c:	1a5b      	subs	r3, r3, r1
 8001b1e:	40d8      	lsrs	r0, r3
 8001b20:	0003      	movs	r3, r0
 8001b22:	4258      	negs	r0, r3
 8001b24:	2e00      	cmp	r6, #0
 8001b26:	d1ef      	bne.n	8001b08 <__aeabi_d2iz+0x28>
 8001b28:	0018      	movs	r0, r3
 8001b2a:	e7ed      	b.n	8001b08 <__aeabi_d2iz+0x28>
 8001b2c:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <__aeabi_d2iz+0x74>)
 8001b2e:	9a00      	ldr	r2, [sp, #0]
 8001b30:	469c      	mov	ip, r3
 8001b32:	0003      	movs	r3, r0
 8001b34:	4461      	add	r1, ip
 8001b36:	408b      	lsls	r3, r1
 8001b38:	40e2      	lsrs	r2, r4
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	e7f1      	b.n	8001b22 <__aeabi_d2iz+0x42>
 8001b3e:	46c0      	nop			@ (mov r8, r8)
 8001b40:	000003fe 	.word	0x000003fe
 8001b44:	0000041d 	.word	0x0000041d
 8001b48:	7fffffff 	.word	0x7fffffff
 8001b4c:	00000433 	.word	0x00000433
 8001b50:	00000413 	.word	0x00000413
 8001b54:	fffffbed 	.word	0xfffffbed

08001b58 <__aeabi_i2d>:
 8001b58:	b570      	push	{r4, r5, r6, lr}
 8001b5a:	2800      	cmp	r0, #0
 8001b5c:	d016      	beq.n	8001b8c <__aeabi_i2d+0x34>
 8001b5e:	17c3      	asrs	r3, r0, #31
 8001b60:	18c5      	adds	r5, r0, r3
 8001b62:	405d      	eors	r5, r3
 8001b64:	0fc4      	lsrs	r4, r0, #31
 8001b66:	0028      	movs	r0, r5
 8001b68:	f000 f92c 	bl	8001dc4 <__clzsi2>
 8001b6c:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <__aeabi_i2d+0x58>)
 8001b6e:	1a1b      	subs	r3, r3, r0
 8001b70:	055b      	lsls	r3, r3, #21
 8001b72:	0d5b      	lsrs	r3, r3, #21
 8001b74:	280a      	cmp	r0, #10
 8001b76:	dc14      	bgt.n	8001ba2 <__aeabi_i2d+0x4a>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	002e      	movs	r6, r5
 8001b7c:	3215      	adds	r2, #21
 8001b7e:	4096      	lsls	r6, r2
 8001b80:	220b      	movs	r2, #11
 8001b82:	1a12      	subs	r2, r2, r0
 8001b84:	40d5      	lsrs	r5, r2
 8001b86:	032d      	lsls	r5, r5, #12
 8001b88:	0b2d      	lsrs	r5, r5, #12
 8001b8a:	e003      	b.n	8001b94 <__aeabi_i2d+0x3c>
 8001b8c:	2400      	movs	r4, #0
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2500      	movs	r5, #0
 8001b92:	2600      	movs	r6, #0
 8001b94:	051b      	lsls	r3, r3, #20
 8001b96:	432b      	orrs	r3, r5
 8001b98:	07e4      	lsls	r4, r4, #31
 8001b9a:	4323      	orrs	r3, r4
 8001b9c:	0030      	movs	r0, r6
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	bd70      	pop	{r4, r5, r6, pc}
 8001ba2:	380b      	subs	r0, #11
 8001ba4:	4085      	lsls	r5, r0
 8001ba6:	032d      	lsls	r5, r5, #12
 8001ba8:	2600      	movs	r6, #0
 8001baa:	0b2d      	lsrs	r5, r5, #12
 8001bac:	e7f2      	b.n	8001b94 <__aeabi_i2d+0x3c>
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	0000041e 	.word	0x0000041e

08001bb4 <__aeabi_f2d>:
 8001bb4:	b570      	push	{r4, r5, r6, lr}
 8001bb6:	0242      	lsls	r2, r0, #9
 8001bb8:	0043      	lsls	r3, r0, #1
 8001bba:	0fc4      	lsrs	r4, r0, #31
 8001bbc:	20fe      	movs	r0, #254	@ 0xfe
 8001bbe:	0e1b      	lsrs	r3, r3, #24
 8001bc0:	1c59      	adds	r1, r3, #1
 8001bc2:	0a55      	lsrs	r5, r2, #9
 8001bc4:	4208      	tst	r0, r1
 8001bc6:	d00c      	beq.n	8001be2 <__aeabi_f2d+0x2e>
 8001bc8:	21e0      	movs	r1, #224	@ 0xe0
 8001bca:	0089      	lsls	r1, r1, #2
 8001bcc:	468c      	mov	ip, r1
 8001bce:	076d      	lsls	r5, r5, #29
 8001bd0:	0b12      	lsrs	r2, r2, #12
 8001bd2:	4463      	add	r3, ip
 8001bd4:	051b      	lsls	r3, r3, #20
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	07e4      	lsls	r4, r4, #31
 8001bda:	4323      	orrs	r3, r4
 8001bdc:	0028      	movs	r0, r5
 8001bde:	0019      	movs	r1, r3
 8001be0:	bd70      	pop	{r4, r5, r6, pc}
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d114      	bne.n	8001c10 <__aeabi_f2d+0x5c>
 8001be6:	2d00      	cmp	r5, #0
 8001be8:	d01b      	beq.n	8001c22 <__aeabi_f2d+0x6e>
 8001bea:	0028      	movs	r0, r5
 8001bec:	f000 f8ea 	bl	8001dc4 <__clzsi2>
 8001bf0:	280a      	cmp	r0, #10
 8001bf2:	dc1c      	bgt.n	8001c2e <__aeabi_f2d+0x7a>
 8001bf4:	230b      	movs	r3, #11
 8001bf6:	002a      	movs	r2, r5
 8001bf8:	1a1b      	subs	r3, r3, r0
 8001bfa:	40da      	lsrs	r2, r3
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	3315      	adds	r3, #21
 8001c00:	409d      	lsls	r5, r3
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <__aeabi_f2d+0x88>)
 8001c04:	0312      	lsls	r2, r2, #12
 8001c06:	1a1b      	subs	r3, r3, r0
 8001c08:	055b      	lsls	r3, r3, #21
 8001c0a:	0b12      	lsrs	r2, r2, #12
 8001c0c:	0d5b      	lsrs	r3, r3, #21
 8001c0e:	e7e1      	b.n	8001bd4 <__aeabi_f2d+0x20>
 8001c10:	2d00      	cmp	r5, #0
 8001c12:	d009      	beq.n	8001c28 <__aeabi_f2d+0x74>
 8001c14:	0b13      	lsrs	r3, r2, #12
 8001c16:	2280      	movs	r2, #128	@ 0x80
 8001c18:	0312      	lsls	r2, r2, #12
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	076d      	lsls	r5, r5, #29
 8001c1e:	4b08      	ldr	r3, [pc, #32]	@ (8001c40 <__aeabi_f2d+0x8c>)
 8001c20:	e7d8      	b.n	8001bd4 <__aeabi_f2d+0x20>
 8001c22:	2300      	movs	r3, #0
 8001c24:	2200      	movs	r2, #0
 8001c26:	e7d5      	b.n	8001bd4 <__aeabi_f2d+0x20>
 8001c28:	2200      	movs	r2, #0
 8001c2a:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <__aeabi_f2d+0x8c>)
 8001c2c:	e7d2      	b.n	8001bd4 <__aeabi_f2d+0x20>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	002a      	movs	r2, r5
 8001c32:	3b0b      	subs	r3, #11
 8001c34:	409a      	lsls	r2, r3
 8001c36:	2500      	movs	r5, #0
 8001c38:	e7e3      	b.n	8001c02 <__aeabi_f2d+0x4e>
 8001c3a:	46c0      	nop			@ (mov r8, r8)
 8001c3c:	00000389 	.word	0x00000389
 8001c40:	000007ff 	.word	0x000007ff

08001c44 <__aeabi_d2f>:
 8001c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c46:	004b      	lsls	r3, r1, #1
 8001c48:	030f      	lsls	r7, r1, #12
 8001c4a:	0d5b      	lsrs	r3, r3, #21
 8001c4c:	4c3a      	ldr	r4, [pc, #232]	@ (8001d38 <__aeabi_d2f+0xf4>)
 8001c4e:	0f45      	lsrs	r5, r0, #29
 8001c50:	b083      	sub	sp, #12
 8001c52:	0a7f      	lsrs	r7, r7, #9
 8001c54:	1c5e      	adds	r6, r3, #1
 8001c56:	432f      	orrs	r7, r5
 8001c58:	9000      	str	r0, [sp, #0]
 8001c5a:	9101      	str	r1, [sp, #4]
 8001c5c:	0fca      	lsrs	r2, r1, #31
 8001c5e:	00c5      	lsls	r5, r0, #3
 8001c60:	4226      	tst	r6, r4
 8001c62:	d00b      	beq.n	8001c7c <__aeabi_d2f+0x38>
 8001c64:	4935      	ldr	r1, [pc, #212]	@ (8001d3c <__aeabi_d2f+0xf8>)
 8001c66:	185c      	adds	r4, r3, r1
 8001c68:	2cfe      	cmp	r4, #254	@ 0xfe
 8001c6a:	dd13      	ble.n	8001c94 <__aeabi_d2f+0x50>
 8001c6c:	20ff      	movs	r0, #255	@ 0xff
 8001c6e:	2300      	movs	r3, #0
 8001c70:	05c0      	lsls	r0, r0, #23
 8001c72:	4318      	orrs	r0, r3
 8001c74:	07d2      	lsls	r2, r2, #31
 8001c76:	4310      	orrs	r0, r2
 8001c78:	b003      	add	sp, #12
 8001c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c7c:	433d      	orrs	r5, r7
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <__aeabi_d2f+0x42>
 8001c82:	2000      	movs	r0, #0
 8001c84:	e7f4      	b.n	8001c70 <__aeabi_d2f+0x2c>
 8001c86:	2d00      	cmp	r5, #0
 8001c88:	d0f0      	beq.n	8001c6c <__aeabi_d2f+0x28>
 8001c8a:	2380      	movs	r3, #128	@ 0x80
 8001c8c:	03db      	lsls	r3, r3, #15
 8001c8e:	20ff      	movs	r0, #255	@ 0xff
 8001c90:	433b      	orrs	r3, r7
 8001c92:	e7ed      	b.n	8001c70 <__aeabi_d2f+0x2c>
 8001c94:	2c00      	cmp	r4, #0
 8001c96:	dd0c      	ble.n	8001cb2 <__aeabi_d2f+0x6e>
 8001c98:	9b00      	ldr	r3, [sp, #0]
 8001c9a:	00ff      	lsls	r7, r7, #3
 8001c9c:	019b      	lsls	r3, r3, #6
 8001c9e:	1e58      	subs	r0, r3, #1
 8001ca0:	4183      	sbcs	r3, r0
 8001ca2:	0f69      	lsrs	r1, r5, #29
 8001ca4:	433b      	orrs	r3, r7
 8001ca6:	430b      	orrs	r3, r1
 8001ca8:	0759      	lsls	r1, r3, #29
 8001caa:	d127      	bne.n	8001cfc <__aeabi_d2f+0xb8>
 8001cac:	08db      	lsrs	r3, r3, #3
 8001cae:	b2e0      	uxtb	r0, r4
 8001cb0:	e7de      	b.n	8001c70 <__aeabi_d2f+0x2c>
 8001cb2:	0021      	movs	r1, r4
 8001cb4:	3117      	adds	r1, #23
 8001cb6:	db31      	blt.n	8001d1c <__aeabi_d2f+0xd8>
 8001cb8:	2180      	movs	r1, #128	@ 0x80
 8001cba:	201e      	movs	r0, #30
 8001cbc:	0409      	lsls	r1, r1, #16
 8001cbe:	4339      	orrs	r1, r7
 8001cc0:	1b00      	subs	r0, r0, r4
 8001cc2:	281f      	cmp	r0, #31
 8001cc4:	dd2d      	ble.n	8001d22 <__aeabi_d2f+0xde>
 8001cc6:	2602      	movs	r6, #2
 8001cc8:	4276      	negs	r6, r6
 8001cca:	1b34      	subs	r4, r6, r4
 8001ccc:	000e      	movs	r6, r1
 8001cce:	40e6      	lsrs	r6, r4
 8001cd0:	0034      	movs	r4, r6
 8001cd2:	2820      	cmp	r0, #32
 8001cd4:	d004      	beq.n	8001ce0 <__aeabi_d2f+0x9c>
 8001cd6:	481a      	ldr	r0, [pc, #104]	@ (8001d40 <__aeabi_d2f+0xfc>)
 8001cd8:	4684      	mov	ip, r0
 8001cda:	4463      	add	r3, ip
 8001cdc:	4099      	lsls	r1, r3
 8001cde:	430d      	orrs	r5, r1
 8001ce0:	002b      	movs	r3, r5
 8001ce2:	1e59      	subs	r1, r3, #1
 8001ce4:	418b      	sbcs	r3, r1
 8001ce6:	4323      	orrs	r3, r4
 8001ce8:	0759      	lsls	r1, r3, #29
 8001cea:	d003      	beq.n	8001cf4 <__aeabi_d2f+0xb0>
 8001cec:	210f      	movs	r1, #15
 8001cee:	4019      	ands	r1, r3
 8001cf0:	2904      	cmp	r1, #4
 8001cf2:	d10b      	bne.n	8001d0c <__aeabi_d2f+0xc8>
 8001cf4:	019b      	lsls	r3, r3, #6
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	0a5b      	lsrs	r3, r3, #9
 8001cfa:	e7b9      	b.n	8001c70 <__aeabi_d2f+0x2c>
 8001cfc:	210f      	movs	r1, #15
 8001cfe:	4019      	ands	r1, r3
 8001d00:	2904      	cmp	r1, #4
 8001d02:	d104      	bne.n	8001d0e <__aeabi_d2f+0xca>
 8001d04:	019b      	lsls	r3, r3, #6
 8001d06:	0a5b      	lsrs	r3, r3, #9
 8001d08:	b2e0      	uxtb	r0, r4
 8001d0a:	e7b1      	b.n	8001c70 <__aeabi_d2f+0x2c>
 8001d0c:	2400      	movs	r4, #0
 8001d0e:	3304      	adds	r3, #4
 8001d10:	0159      	lsls	r1, r3, #5
 8001d12:	d5f7      	bpl.n	8001d04 <__aeabi_d2f+0xc0>
 8001d14:	3401      	adds	r4, #1
 8001d16:	2300      	movs	r3, #0
 8001d18:	b2e0      	uxtb	r0, r4
 8001d1a:	e7a9      	b.n	8001c70 <__aeabi_d2f+0x2c>
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e7a6      	b.n	8001c70 <__aeabi_d2f+0x2c>
 8001d22:	4c08      	ldr	r4, [pc, #32]	@ (8001d44 <__aeabi_d2f+0x100>)
 8001d24:	191c      	adds	r4, r3, r4
 8001d26:	002b      	movs	r3, r5
 8001d28:	40a5      	lsls	r5, r4
 8001d2a:	40c3      	lsrs	r3, r0
 8001d2c:	40a1      	lsls	r1, r4
 8001d2e:	1e68      	subs	r0, r5, #1
 8001d30:	4185      	sbcs	r5, r0
 8001d32:	4329      	orrs	r1, r5
 8001d34:	430b      	orrs	r3, r1
 8001d36:	e7d7      	b.n	8001ce8 <__aeabi_d2f+0xa4>
 8001d38:	000007fe 	.word	0x000007fe
 8001d3c:	fffffc80 	.word	0xfffffc80
 8001d40:	fffffca2 	.word	0xfffffca2
 8001d44:	fffffc82 	.word	0xfffffc82

08001d48 <__aeabi_cdrcmple>:
 8001d48:	4684      	mov	ip, r0
 8001d4a:	0010      	movs	r0, r2
 8001d4c:	4662      	mov	r2, ip
 8001d4e:	468c      	mov	ip, r1
 8001d50:	0019      	movs	r1, r3
 8001d52:	4663      	mov	r3, ip
 8001d54:	e000      	b.n	8001d58 <__aeabi_cdcmpeq>
 8001d56:	46c0      	nop			@ (mov r8, r8)

08001d58 <__aeabi_cdcmpeq>:
 8001d58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001d5a:	f000 f905 	bl	8001f68 <__ledf2>
 8001d5e:	2800      	cmp	r0, #0
 8001d60:	d401      	bmi.n	8001d66 <__aeabi_cdcmpeq+0xe>
 8001d62:	2100      	movs	r1, #0
 8001d64:	42c8      	cmn	r0, r1
 8001d66:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001d68 <__aeabi_dcmpeq>:
 8001d68:	b510      	push	{r4, lr}
 8001d6a:	f000 f849 	bl	8001e00 <__eqdf2>
 8001d6e:	4240      	negs	r0, r0
 8001d70:	3001      	adds	r0, #1
 8001d72:	bd10      	pop	{r4, pc}

08001d74 <__aeabi_dcmplt>:
 8001d74:	b510      	push	{r4, lr}
 8001d76:	f000 f8f7 	bl	8001f68 <__ledf2>
 8001d7a:	2800      	cmp	r0, #0
 8001d7c:	db01      	blt.n	8001d82 <__aeabi_dcmplt+0xe>
 8001d7e:	2000      	movs	r0, #0
 8001d80:	bd10      	pop	{r4, pc}
 8001d82:	2001      	movs	r0, #1
 8001d84:	bd10      	pop	{r4, pc}
 8001d86:	46c0      	nop			@ (mov r8, r8)

08001d88 <__aeabi_dcmple>:
 8001d88:	b510      	push	{r4, lr}
 8001d8a:	f000 f8ed 	bl	8001f68 <__ledf2>
 8001d8e:	2800      	cmp	r0, #0
 8001d90:	dd01      	ble.n	8001d96 <__aeabi_dcmple+0xe>
 8001d92:	2000      	movs	r0, #0
 8001d94:	bd10      	pop	{r4, pc}
 8001d96:	2001      	movs	r0, #1
 8001d98:	bd10      	pop	{r4, pc}
 8001d9a:	46c0      	nop			@ (mov r8, r8)

08001d9c <__aeabi_dcmpgt>:
 8001d9c:	b510      	push	{r4, lr}
 8001d9e:	f000 f873 	bl	8001e88 <__gedf2>
 8001da2:	2800      	cmp	r0, #0
 8001da4:	dc01      	bgt.n	8001daa <__aeabi_dcmpgt+0xe>
 8001da6:	2000      	movs	r0, #0
 8001da8:	bd10      	pop	{r4, pc}
 8001daa:	2001      	movs	r0, #1
 8001dac:	bd10      	pop	{r4, pc}
 8001dae:	46c0      	nop			@ (mov r8, r8)

08001db0 <__aeabi_dcmpge>:
 8001db0:	b510      	push	{r4, lr}
 8001db2:	f000 f869 	bl	8001e88 <__gedf2>
 8001db6:	2800      	cmp	r0, #0
 8001db8:	da01      	bge.n	8001dbe <__aeabi_dcmpge+0xe>
 8001dba:	2000      	movs	r0, #0
 8001dbc:	bd10      	pop	{r4, pc}
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	bd10      	pop	{r4, pc}
 8001dc2:	46c0      	nop			@ (mov r8, r8)

08001dc4 <__clzsi2>:
 8001dc4:	211c      	movs	r1, #28
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	041b      	lsls	r3, r3, #16
 8001dca:	4298      	cmp	r0, r3
 8001dcc:	d301      	bcc.n	8001dd2 <__clzsi2+0xe>
 8001dce:	0c00      	lsrs	r0, r0, #16
 8001dd0:	3910      	subs	r1, #16
 8001dd2:	0a1b      	lsrs	r3, r3, #8
 8001dd4:	4298      	cmp	r0, r3
 8001dd6:	d301      	bcc.n	8001ddc <__clzsi2+0x18>
 8001dd8:	0a00      	lsrs	r0, r0, #8
 8001dda:	3908      	subs	r1, #8
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	4298      	cmp	r0, r3
 8001de0:	d301      	bcc.n	8001de6 <__clzsi2+0x22>
 8001de2:	0900      	lsrs	r0, r0, #4
 8001de4:	3904      	subs	r1, #4
 8001de6:	a202      	add	r2, pc, #8	@ (adr r2, 8001df0 <__clzsi2+0x2c>)
 8001de8:	5c10      	ldrb	r0, [r2, r0]
 8001dea:	1840      	adds	r0, r0, r1
 8001dec:	4770      	bx	lr
 8001dee:	46c0      	nop			@ (mov r8, r8)
 8001df0:	02020304 	.word	0x02020304
 8001df4:	01010101 	.word	0x01010101
	...

08001e00 <__eqdf2>:
 8001e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e02:	4657      	mov	r7, sl
 8001e04:	46de      	mov	lr, fp
 8001e06:	464e      	mov	r6, r9
 8001e08:	4645      	mov	r5, r8
 8001e0a:	b5e0      	push	{r5, r6, r7, lr}
 8001e0c:	000d      	movs	r5, r1
 8001e0e:	0004      	movs	r4, r0
 8001e10:	0fe8      	lsrs	r0, r5, #31
 8001e12:	4683      	mov	fp, r0
 8001e14:	0309      	lsls	r1, r1, #12
 8001e16:	0fd8      	lsrs	r0, r3, #31
 8001e18:	0b09      	lsrs	r1, r1, #12
 8001e1a:	4682      	mov	sl, r0
 8001e1c:	4819      	ldr	r0, [pc, #100]	@ (8001e84 <__eqdf2+0x84>)
 8001e1e:	468c      	mov	ip, r1
 8001e20:	031f      	lsls	r7, r3, #12
 8001e22:	0069      	lsls	r1, r5, #1
 8001e24:	005e      	lsls	r6, r3, #1
 8001e26:	0d49      	lsrs	r1, r1, #21
 8001e28:	0b3f      	lsrs	r7, r7, #12
 8001e2a:	0d76      	lsrs	r6, r6, #21
 8001e2c:	4281      	cmp	r1, r0
 8001e2e:	d018      	beq.n	8001e62 <__eqdf2+0x62>
 8001e30:	4286      	cmp	r6, r0
 8001e32:	d00f      	beq.n	8001e54 <__eqdf2+0x54>
 8001e34:	2001      	movs	r0, #1
 8001e36:	42b1      	cmp	r1, r6
 8001e38:	d10d      	bne.n	8001e56 <__eqdf2+0x56>
 8001e3a:	45bc      	cmp	ip, r7
 8001e3c:	d10b      	bne.n	8001e56 <__eqdf2+0x56>
 8001e3e:	4294      	cmp	r4, r2
 8001e40:	d109      	bne.n	8001e56 <__eqdf2+0x56>
 8001e42:	45d3      	cmp	fp, sl
 8001e44:	d01c      	beq.n	8001e80 <__eqdf2+0x80>
 8001e46:	2900      	cmp	r1, #0
 8001e48:	d105      	bne.n	8001e56 <__eqdf2+0x56>
 8001e4a:	4660      	mov	r0, ip
 8001e4c:	4320      	orrs	r0, r4
 8001e4e:	1e43      	subs	r3, r0, #1
 8001e50:	4198      	sbcs	r0, r3
 8001e52:	e000      	b.n	8001e56 <__eqdf2+0x56>
 8001e54:	2001      	movs	r0, #1
 8001e56:	bcf0      	pop	{r4, r5, r6, r7}
 8001e58:	46bb      	mov	fp, r7
 8001e5a:	46b2      	mov	sl, r6
 8001e5c:	46a9      	mov	r9, r5
 8001e5e:	46a0      	mov	r8, r4
 8001e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e62:	2001      	movs	r0, #1
 8001e64:	428e      	cmp	r6, r1
 8001e66:	d1f6      	bne.n	8001e56 <__eqdf2+0x56>
 8001e68:	4661      	mov	r1, ip
 8001e6a:	4339      	orrs	r1, r7
 8001e6c:	000f      	movs	r7, r1
 8001e6e:	4317      	orrs	r7, r2
 8001e70:	4327      	orrs	r7, r4
 8001e72:	d1f0      	bne.n	8001e56 <__eqdf2+0x56>
 8001e74:	465b      	mov	r3, fp
 8001e76:	4652      	mov	r2, sl
 8001e78:	1a98      	subs	r0, r3, r2
 8001e7a:	1e43      	subs	r3, r0, #1
 8001e7c:	4198      	sbcs	r0, r3
 8001e7e:	e7ea      	b.n	8001e56 <__eqdf2+0x56>
 8001e80:	2000      	movs	r0, #0
 8001e82:	e7e8      	b.n	8001e56 <__eqdf2+0x56>
 8001e84:	000007ff 	.word	0x000007ff

08001e88 <__gedf2>:
 8001e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8a:	4657      	mov	r7, sl
 8001e8c:	464e      	mov	r6, r9
 8001e8e:	4645      	mov	r5, r8
 8001e90:	46de      	mov	lr, fp
 8001e92:	b5e0      	push	{r5, r6, r7, lr}
 8001e94:	000d      	movs	r5, r1
 8001e96:	030e      	lsls	r6, r1, #12
 8001e98:	0049      	lsls	r1, r1, #1
 8001e9a:	0d49      	lsrs	r1, r1, #21
 8001e9c:	468a      	mov	sl, r1
 8001e9e:	0fdf      	lsrs	r7, r3, #31
 8001ea0:	0fe9      	lsrs	r1, r5, #31
 8001ea2:	46bc      	mov	ip, r7
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	4f2f      	ldr	r7, [pc, #188]	@ (8001f64 <__gedf2+0xdc>)
 8001ea8:	0004      	movs	r4, r0
 8001eaa:	4680      	mov	r8, r0
 8001eac:	9101      	str	r1, [sp, #4]
 8001eae:	0058      	lsls	r0, r3, #1
 8001eb0:	0319      	lsls	r1, r3, #12
 8001eb2:	4691      	mov	r9, r2
 8001eb4:	0b36      	lsrs	r6, r6, #12
 8001eb6:	0b09      	lsrs	r1, r1, #12
 8001eb8:	0d40      	lsrs	r0, r0, #21
 8001eba:	45ba      	cmp	sl, r7
 8001ebc:	d01d      	beq.n	8001efa <__gedf2+0x72>
 8001ebe:	42b8      	cmp	r0, r7
 8001ec0:	d00d      	beq.n	8001ede <__gedf2+0x56>
 8001ec2:	4657      	mov	r7, sl
 8001ec4:	2f00      	cmp	r7, #0
 8001ec6:	d12a      	bne.n	8001f1e <__gedf2+0x96>
 8001ec8:	4334      	orrs	r4, r6
 8001eca:	2800      	cmp	r0, #0
 8001ecc:	d124      	bne.n	8001f18 <__gedf2+0x90>
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	d036      	beq.n	8001f40 <__gedf2+0xb8>
 8001ed2:	2c00      	cmp	r4, #0
 8001ed4:	d141      	bne.n	8001f5a <__gedf2+0xd2>
 8001ed6:	4663      	mov	r3, ip
 8001ed8:	0058      	lsls	r0, r3, #1
 8001eda:	3801      	subs	r0, #1
 8001edc:	e015      	b.n	8001f0a <__gedf2+0x82>
 8001ede:	4311      	orrs	r1, r2
 8001ee0:	d138      	bne.n	8001f54 <__gedf2+0xcc>
 8001ee2:	4653      	mov	r3, sl
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <__gedf2+0x64>
 8001ee8:	4326      	orrs	r6, r4
 8001eea:	d0f4      	beq.n	8001ed6 <__gedf2+0x4e>
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	4563      	cmp	r3, ip
 8001ef0:	d107      	bne.n	8001f02 <__gedf2+0x7a>
 8001ef2:	9b01      	ldr	r3, [sp, #4]
 8001ef4:	0058      	lsls	r0, r3, #1
 8001ef6:	3801      	subs	r0, #1
 8001ef8:	e007      	b.n	8001f0a <__gedf2+0x82>
 8001efa:	4326      	orrs	r6, r4
 8001efc:	d12a      	bne.n	8001f54 <__gedf2+0xcc>
 8001efe:	4550      	cmp	r0, sl
 8001f00:	d021      	beq.n	8001f46 <__gedf2+0xbe>
 8001f02:	2001      	movs	r0, #1
 8001f04:	9b01      	ldr	r3, [sp, #4]
 8001f06:	425f      	negs	r7, r3
 8001f08:	4338      	orrs	r0, r7
 8001f0a:	b003      	add	sp, #12
 8001f0c:	bcf0      	pop	{r4, r5, r6, r7}
 8001f0e:	46bb      	mov	fp, r7
 8001f10:	46b2      	mov	sl, r6
 8001f12:	46a9      	mov	r9, r5
 8001f14:	46a0      	mov	r8, r4
 8001f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f18:	2c00      	cmp	r4, #0
 8001f1a:	d0dc      	beq.n	8001ed6 <__gedf2+0x4e>
 8001f1c:	e7e6      	b.n	8001eec <__gedf2+0x64>
 8001f1e:	2800      	cmp	r0, #0
 8001f20:	d0ef      	beq.n	8001f02 <__gedf2+0x7a>
 8001f22:	9b01      	ldr	r3, [sp, #4]
 8001f24:	4563      	cmp	r3, ip
 8001f26:	d1ec      	bne.n	8001f02 <__gedf2+0x7a>
 8001f28:	4582      	cmp	sl, r0
 8001f2a:	dcea      	bgt.n	8001f02 <__gedf2+0x7a>
 8001f2c:	dbe1      	blt.n	8001ef2 <__gedf2+0x6a>
 8001f2e:	428e      	cmp	r6, r1
 8001f30:	d8e7      	bhi.n	8001f02 <__gedf2+0x7a>
 8001f32:	d1de      	bne.n	8001ef2 <__gedf2+0x6a>
 8001f34:	45c8      	cmp	r8, r9
 8001f36:	d8e4      	bhi.n	8001f02 <__gedf2+0x7a>
 8001f38:	2000      	movs	r0, #0
 8001f3a:	45c8      	cmp	r8, r9
 8001f3c:	d2e5      	bcs.n	8001f0a <__gedf2+0x82>
 8001f3e:	e7d8      	b.n	8001ef2 <__gedf2+0x6a>
 8001f40:	2c00      	cmp	r4, #0
 8001f42:	d0e2      	beq.n	8001f0a <__gedf2+0x82>
 8001f44:	e7dd      	b.n	8001f02 <__gedf2+0x7a>
 8001f46:	4311      	orrs	r1, r2
 8001f48:	d104      	bne.n	8001f54 <__gedf2+0xcc>
 8001f4a:	9b01      	ldr	r3, [sp, #4]
 8001f4c:	4563      	cmp	r3, ip
 8001f4e:	d1d8      	bne.n	8001f02 <__gedf2+0x7a>
 8001f50:	2000      	movs	r0, #0
 8001f52:	e7da      	b.n	8001f0a <__gedf2+0x82>
 8001f54:	2002      	movs	r0, #2
 8001f56:	4240      	negs	r0, r0
 8001f58:	e7d7      	b.n	8001f0a <__gedf2+0x82>
 8001f5a:	9b01      	ldr	r3, [sp, #4]
 8001f5c:	4563      	cmp	r3, ip
 8001f5e:	d0e6      	beq.n	8001f2e <__gedf2+0xa6>
 8001f60:	e7cf      	b.n	8001f02 <__gedf2+0x7a>
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	000007ff 	.word	0x000007ff

08001f68 <__ledf2>:
 8001f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6a:	4657      	mov	r7, sl
 8001f6c:	464e      	mov	r6, r9
 8001f6e:	4645      	mov	r5, r8
 8001f70:	46de      	mov	lr, fp
 8001f72:	b5e0      	push	{r5, r6, r7, lr}
 8001f74:	000d      	movs	r5, r1
 8001f76:	030e      	lsls	r6, r1, #12
 8001f78:	0049      	lsls	r1, r1, #1
 8001f7a:	0d49      	lsrs	r1, r1, #21
 8001f7c:	468a      	mov	sl, r1
 8001f7e:	0fdf      	lsrs	r7, r3, #31
 8001f80:	0fe9      	lsrs	r1, r5, #31
 8001f82:	46bc      	mov	ip, r7
 8001f84:	b083      	sub	sp, #12
 8001f86:	4f2e      	ldr	r7, [pc, #184]	@ (8002040 <__ledf2+0xd8>)
 8001f88:	0004      	movs	r4, r0
 8001f8a:	4680      	mov	r8, r0
 8001f8c:	9101      	str	r1, [sp, #4]
 8001f8e:	0058      	lsls	r0, r3, #1
 8001f90:	0319      	lsls	r1, r3, #12
 8001f92:	4691      	mov	r9, r2
 8001f94:	0b36      	lsrs	r6, r6, #12
 8001f96:	0b09      	lsrs	r1, r1, #12
 8001f98:	0d40      	lsrs	r0, r0, #21
 8001f9a:	45ba      	cmp	sl, r7
 8001f9c:	d01e      	beq.n	8001fdc <__ledf2+0x74>
 8001f9e:	42b8      	cmp	r0, r7
 8001fa0:	d00d      	beq.n	8001fbe <__ledf2+0x56>
 8001fa2:	4657      	mov	r7, sl
 8001fa4:	2f00      	cmp	r7, #0
 8001fa6:	d127      	bne.n	8001ff8 <__ledf2+0x90>
 8001fa8:	4334      	orrs	r4, r6
 8001faa:	2800      	cmp	r0, #0
 8001fac:	d133      	bne.n	8002016 <__ledf2+0xae>
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	d034      	beq.n	800201c <__ledf2+0xb4>
 8001fb2:	2c00      	cmp	r4, #0
 8001fb4:	d140      	bne.n	8002038 <__ledf2+0xd0>
 8001fb6:	4663      	mov	r3, ip
 8001fb8:	0058      	lsls	r0, r3, #1
 8001fba:	3801      	subs	r0, #1
 8001fbc:	e015      	b.n	8001fea <__ledf2+0x82>
 8001fbe:	4311      	orrs	r1, r2
 8001fc0:	d112      	bne.n	8001fe8 <__ledf2+0x80>
 8001fc2:	4653      	mov	r3, sl
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <__ledf2+0x64>
 8001fc8:	4326      	orrs	r6, r4
 8001fca:	d0f4      	beq.n	8001fb6 <__ledf2+0x4e>
 8001fcc:	9b01      	ldr	r3, [sp, #4]
 8001fce:	4563      	cmp	r3, ip
 8001fd0:	d01d      	beq.n	800200e <__ledf2+0xa6>
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	9b01      	ldr	r3, [sp, #4]
 8001fd6:	425f      	negs	r7, r3
 8001fd8:	4338      	orrs	r0, r7
 8001fda:	e006      	b.n	8001fea <__ledf2+0x82>
 8001fdc:	4326      	orrs	r6, r4
 8001fde:	d103      	bne.n	8001fe8 <__ledf2+0x80>
 8001fe0:	4550      	cmp	r0, sl
 8001fe2:	d1f6      	bne.n	8001fd2 <__ledf2+0x6a>
 8001fe4:	4311      	orrs	r1, r2
 8001fe6:	d01c      	beq.n	8002022 <__ledf2+0xba>
 8001fe8:	2002      	movs	r0, #2
 8001fea:	b003      	add	sp, #12
 8001fec:	bcf0      	pop	{r4, r5, r6, r7}
 8001fee:	46bb      	mov	fp, r7
 8001ff0:	46b2      	mov	sl, r6
 8001ff2:	46a9      	mov	r9, r5
 8001ff4:	46a0      	mov	r8, r4
 8001ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff8:	2800      	cmp	r0, #0
 8001ffa:	d0ea      	beq.n	8001fd2 <__ledf2+0x6a>
 8001ffc:	9b01      	ldr	r3, [sp, #4]
 8001ffe:	4563      	cmp	r3, ip
 8002000:	d1e7      	bne.n	8001fd2 <__ledf2+0x6a>
 8002002:	4582      	cmp	sl, r0
 8002004:	dce5      	bgt.n	8001fd2 <__ledf2+0x6a>
 8002006:	db02      	blt.n	800200e <__ledf2+0xa6>
 8002008:	428e      	cmp	r6, r1
 800200a:	d8e2      	bhi.n	8001fd2 <__ledf2+0x6a>
 800200c:	d00e      	beq.n	800202c <__ledf2+0xc4>
 800200e:	9b01      	ldr	r3, [sp, #4]
 8002010:	0058      	lsls	r0, r3, #1
 8002012:	3801      	subs	r0, #1
 8002014:	e7e9      	b.n	8001fea <__ledf2+0x82>
 8002016:	2c00      	cmp	r4, #0
 8002018:	d0cd      	beq.n	8001fb6 <__ledf2+0x4e>
 800201a:	e7d7      	b.n	8001fcc <__ledf2+0x64>
 800201c:	2c00      	cmp	r4, #0
 800201e:	d0e4      	beq.n	8001fea <__ledf2+0x82>
 8002020:	e7d7      	b.n	8001fd2 <__ledf2+0x6a>
 8002022:	9b01      	ldr	r3, [sp, #4]
 8002024:	2000      	movs	r0, #0
 8002026:	4563      	cmp	r3, ip
 8002028:	d0df      	beq.n	8001fea <__ledf2+0x82>
 800202a:	e7d2      	b.n	8001fd2 <__ledf2+0x6a>
 800202c:	45c8      	cmp	r8, r9
 800202e:	d8d0      	bhi.n	8001fd2 <__ledf2+0x6a>
 8002030:	2000      	movs	r0, #0
 8002032:	45c8      	cmp	r8, r9
 8002034:	d2d9      	bcs.n	8001fea <__ledf2+0x82>
 8002036:	e7ea      	b.n	800200e <__ledf2+0xa6>
 8002038:	9b01      	ldr	r3, [sp, #4]
 800203a:	4563      	cmp	r3, ip
 800203c:	d0e4      	beq.n	8002008 <__ledf2+0xa0>
 800203e:	e7c8      	b.n	8001fd2 <__ledf2+0x6a>
 8002040:	000007ff 	.word	0x000007ff

08002044 <Cell_Motoring_Task>:

unsigned int CellVoltage[15];
float Gain = 0;
int iGain = 0;

void Cell_Motoring_Task(){
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800204a:	4b2d      	ldr	r3, [pc, #180]	@ (8002100 <Cell_Motoring_Task+0xbc>)
 800204c:	2200      	movs	r2, #0
 800204e:	2140      	movs	r1, #64	@ 0x40
 8002050:	0018      	movs	r0, r3
 8002052:	f002 f993 	bl	800437c <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8002056:	23fa      	movs	r3, #250	@ 0xfa
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	0018      	movs	r0, r3
 800205c:	f001 f8e4 	bl	8003228 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8002060:	4b27      	ldr	r3, [pc, #156]	@ (8002100 <Cell_Motoring_Task+0xbc>)
 8002062:	2201      	movs	r2, #1
 8002064:	2140      	movs	r1, #64	@ 0x40
 8002066:	0018      	movs	r0, r3
 8002068:	f002 f988 	bl	800437c <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 800206c:	23fa      	movs	r3, #250	@ 0xfa
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	0018      	movs	r0, r3
 8002072:	f001 f8d9 	bl	8003228 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002076:	4b22      	ldr	r3, [pc, #136]	@ (8002100 <Cell_Motoring_Task+0xbc>)
 8002078:	2200      	movs	r2, #0
 800207a:	2140      	movs	r1, #64	@ 0x40
 800207c:	0018      	movs	r0, r3
 800207e:	f002 f97d 	bl	800437c <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8002082:	23fa      	movs	r3, #250	@ 0xfa
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	0018      	movs	r0, r3
 8002088:	f001 f8ce 	bl	8003228 <HAL_Delay>

	HAL_StatusTypeDef init_status = HAL_OK;
 800208c:	1dfb      	adds	r3, r7, #7
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef import_status = HAL_OK;
 8002092:	1dbb      	adds	r3, r7, #6
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]


	init_status = TEST_I2C();
 8002098:	1dfc      	adds	r4, r7, #7
 800209a:	f000 f911 	bl	80022c0 <TEST_I2C>
 800209e:	0003      	movs	r3, r0
 80020a0:	7023      	strb	r3, [r4, #0]


	init_status = InitialisebqMaximo();
 80020a2:	1dfc      	adds	r4, r7, #7
 80020a4:	f000 fa78 	bl	8002598 <InitialisebqMaximo>
 80020a8:	0003      	movs	r3, r0
 80020aa:	7023      	strb	r3, [r4, #0]

	for(;;){

	    if (HAL_I2C_IsDeviceReady(&hi2c2, BQ76940_ADDR, 3, 1000) == HAL_OK)
 80020ac:	23fa      	movs	r3, #250	@ 0xfa
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4814      	ldr	r0, [pc, #80]	@ (8002104 <Cell_Motoring_Task+0xc0>)
 80020b2:	2203      	movs	r2, #3
 80020b4:	2110      	movs	r1, #16
 80020b6:	f002 fed3 	bl	8004e60 <HAL_I2C_IsDeviceReady>
 80020ba:	1e03      	subs	r3, r0, #0
 80020bc:	d10f      	bne.n	80020de <Cell_Motoring_Task+0x9a>
	    {

	    	import_status = UpdateVoltageFromBqMaximo();
 80020be:	1dbc      	adds	r4, r7, #6
 80020c0:	f000 fb6a 	bl	8002798 <UpdateVoltageFromBqMaximo>
 80020c4:	0003      	movs	r3, r0
 80020c6:	7023      	strb	r3, [r4, #0]
			// Red LED
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80020c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002108 <Cell_Motoring_Task+0xc4>)
 80020ca:	2120      	movs	r1, #32
 80020cc:	0018      	movs	r0, r3
 80020ce:	f002 f972 	bl	80043b6 <HAL_GPIO_TogglePin>
			HAL_Delay(1000);
 80020d2:	23fa      	movs	r3, #250	@ 0xfa
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	0018      	movs	r0, r3
 80020d8:	f001 f8a6 	bl	8003228 <HAL_Delay>
 80020dc:	e00c      	b.n	80020f8 <Cell_Motoring_Task+0xb4>

	    }
		else
		{
			// Yellow LED
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80020de:	2380      	movs	r3, #128	@ 0x80
 80020e0:	021a      	lsls	r2, r3, #8
 80020e2:	23a0      	movs	r3, #160	@ 0xa0
 80020e4:	05db      	lsls	r3, r3, #23
 80020e6:	0011      	movs	r1, r2
 80020e8:	0018      	movs	r0, r3
 80020ea:	f002 f964 	bl	80043b6 <HAL_GPIO_TogglePin>
			HAL_Delay(1000);
 80020ee:	23fa      	movs	r3, #250	@ 0xfa
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	0018      	movs	r0, r3
 80020f4:	f001 f898 	bl	8003228 <HAL_Delay>
	    }

	HAL_Delay(100);
 80020f8:	2064      	movs	r0, #100	@ 0x64
 80020fa:	f001 f895 	bl	8003228 <HAL_Delay>
	    if (HAL_I2C_IsDeviceReady(&hi2c2, BQ76940_ADDR, 3, 1000) == HAL_OK)
 80020fe:	e7d5      	b.n	80020ac <Cell_Motoring_Task+0x68>
 8002100:	50000800 	.word	0x50000800
 8002104:	2000016c 	.word	0x2000016c
 8002108:	50000400 	.word	0x50000400

0800210c <I2CReadBlockWithCRC>:

    *Data = ReadData[0]; // Output the valid data
    return 0;
}
int I2CReadBlockWithCRC(uint8_t I2CSlaveAddress, uint8_t Register, uint8_t *Buffer, uint8_t Length)
{
 800210c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800210e:	b097      	sub	sp, #92	@ 0x5c
 8002110:	af02      	add	r7, sp, #8
 8002112:	0004      	movs	r4, r0
 8002114:	0008      	movs	r0, r1
 8002116:	603a      	str	r2, [r7, #0]
 8002118:	0019      	movs	r1, r3
 800211a:	1dfb      	adds	r3, r7, #7
 800211c:	1c22      	adds	r2, r4, #0
 800211e:	701a      	strb	r2, [r3, #0]
 8002120:	1dbb      	adds	r3, r7, #6
 8002122:	1c02      	adds	r2, r0, #0
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	1d7b      	adds	r3, r7, #5
 8002128:	1c0a      	adds	r2, r1, #0
 800212a:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef WriteStatus = HAL_OK;
 800212c:	234b      	movs	r3, #75	@ 0x4b
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef ReadStatus = HAL_OK;
 8002134:	234a      	movs	r3, #74	@ 0x4a
 8002136:	18fb      	adds	r3, r7, r3
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]

    uint8_t TargetRegister = Register;
 800213c:	2349      	movs	r3, #73	@ 0x49
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	1dba      	adds	r2, r7, #6
 8002142:	7812      	ldrb	r2, [r2, #0]
 8002144:	701a      	strb	r2, [r3, #0]
    uint8_t ReadData[64];  // Max expected Length = 32 (adjust size as needed)

    if (Length > 32)  // Prevent buffer overrun
 8002146:	1d7b      	adds	r3, r7, #5
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b20      	cmp	r3, #32
 800214c:	d902      	bls.n	8002154 <I2CReadBlockWithCRC+0x48>
        return -1;
 800214e:	2301      	movs	r3, #1
 8002150:	425b      	negs	r3, r3
 8002152:	e04d      	b.n	80021f0 <I2CReadBlockWithCRC+0xe4>

    // Send the register address
    WriteStatus = HAL_I2C_Master_Transmit(&hi2c2, I2CSlaveAddress << 1, &TargetRegister, 1, HAL_MAX_DELAY);
 8002154:	1dfb      	adds	r3, r7, #7
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b29b      	uxth	r3, r3
 800215a:	18db      	adds	r3, r3, r3
 800215c:	b299      	uxth	r1, r3
 800215e:	254b      	movs	r5, #75	@ 0x4b
 8002160:	197c      	adds	r4, r7, r5
 8002162:	2349      	movs	r3, #73	@ 0x49
 8002164:	18fa      	adds	r2, r7, r3
 8002166:	4824      	ldr	r0, [pc, #144]	@ (80021f8 <I2CReadBlockWithCRC+0xec>)
 8002168:	2301      	movs	r3, #1
 800216a:	425b      	negs	r3, r3
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2301      	movs	r3, #1
 8002170:	f002 f9e2 	bl	8004538 <HAL_I2C_Master_Transmit>
 8002174:	0003      	movs	r3, r0
 8002176:	7023      	strb	r3, [r4, #0]
    if (WriteStatus != HAL_OK)
 8002178:	197b      	adds	r3, r7, r5
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <I2CReadBlockWithCRC+0x7a>
        return -1;
 8002180:	2301      	movs	r3, #1
 8002182:	425b      	negs	r3, r3
 8002184:	e034      	b.n	80021f0 <I2CReadBlockWithCRC+0xe4>

    // Read Length bytes (without CRC)
    ReadStatus = HAL_I2C_Master_Receive(&hi2c2, (I2CSlaveAddress << 1) | 0x01, ReadData, Length, HAL_MAX_DELAY);
 8002186:	1dfb      	adds	r3, r7, #7
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	b21b      	sxth	r3, r3
 800218c:	18db      	adds	r3, r3, r3
 800218e:	b21b      	sxth	r3, r3
 8002190:	2201      	movs	r2, #1
 8002192:	4313      	orrs	r3, r2
 8002194:	b21b      	sxth	r3, r3
 8002196:	b299      	uxth	r1, r3
 8002198:	1d7b      	adds	r3, r7, #5
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	b29d      	uxth	r5, r3
 800219e:	264a      	movs	r6, #74	@ 0x4a
 80021a0:	19bc      	adds	r4, r7, r6
 80021a2:	2308      	movs	r3, #8
 80021a4:	18fa      	adds	r2, r7, r3
 80021a6:	4814      	ldr	r0, [pc, #80]	@ (80021f8 <I2CReadBlockWithCRC+0xec>)
 80021a8:	2301      	movs	r3, #1
 80021aa:	425b      	negs	r3, r3
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	002b      	movs	r3, r5
 80021b0:	f002 faec 	bl	800478c <HAL_I2C_Master_Receive>
 80021b4:	0003      	movs	r3, r0
 80021b6:	7023      	strb	r3, [r4, #0]
    if (ReadStatus != HAL_OK)
 80021b8:	19bb      	adds	r3, r7, r6
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <I2CReadBlockWithCRC+0xba>
        return -1;
 80021c0:	2301      	movs	r3, #1
 80021c2:	425b      	negs	r3, r3
 80021c4:	e014      	b.n	80021f0 <I2CReadBlockWithCRC+0xe4>

    // Copy received data to buffer
    for (int i = 0; i < Length; i++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021ca:	e00b      	b.n	80021e4 <I2CReadBlockWithCRC+0xd8>
    {
        Buffer[i] = ReadData[i];
 80021cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	18d3      	adds	r3, r2, r3
 80021d2:	2208      	movs	r2, #8
 80021d4:	18b9      	adds	r1, r7, r2
 80021d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021d8:	188a      	adds	r2, r1, r2
 80021da:	7812      	ldrb	r2, [r2, #0]
 80021dc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < Length; i++)
 80021de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021e0:	3301      	adds	r3, #1
 80021e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021e4:	1d7b      	adds	r3, r7, #5
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021ea:	429a      	cmp	r2, r3
 80021ec:	dbee      	blt.n	80021cc <I2CReadBlockWithCRC+0xc0>
    }

    return 0;
 80021ee:	2300      	movs	r3, #0
        Buffer[i] = data;
    }

    return 0;
    */
}
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b015      	add	sp, #84	@ 0x54
 80021f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021f8:	2000016c 	.word	0x2000016c

080021fc <I2CWriteBlockWithCRC>:
int I2CWriteBlockWithCRC(uint8_t I2CSlaveAddress, uint8_t StartAddress, uint8_t *Buffer, uint8_t Length)
{
 80021fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021fe:	b08f      	sub	sp, #60	@ 0x3c
 8002200:	af02      	add	r7, sp, #8
 8002202:	0004      	movs	r4, r0
 8002204:	0008      	movs	r0, r1
 8002206:	603a      	str	r2, [r7, #0]
 8002208:	0019      	movs	r1, r3
 800220a:	1dfb      	adds	r3, r7, #7
 800220c:	1c22      	adds	r2, r4, #0
 800220e:	701a      	strb	r2, [r3, #0]
 8002210:	1dbb      	adds	r3, r7, #6
 8002212:	1c02      	adds	r2, r0, #0
 8002214:	701a      	strb	r2, [r3, #0]
 8002216:	1d7b      	adds	r3, r7, #5
 8002218:	1c0a      	adds	r2, r1, #0
 800221a:	701a      	strb	r2, [r3, #0]

    HAL_StatusTypeDef WriteStatus = HAL_OK;
 800221c:	232e      	movs	r3, #46	@ 0x2e
 800221e:	18fb      	adds	r3, r7, r3
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]

    uint8_t BufferToSend[32 + 1]; // Max Length = 32 → (1 + 32) = 33 bytes
    uint8_t i;

    if (Length > 32)  // Prevent buffer overflow
 8002224:	1d7b      	adds	r3, r7, #5
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b20      	cmp	r3, #32
 800222a:	d902      	bls.n	8002232 <I2CWriteBlockWithCRC+0x36>
        return -1;
 800222c:	2301      	movs	r3, #1
 800222e:	425b      	negs	r3, r3
 8002230:	e040      	b.n	80022b4 <I2CWriteBlockWithCRC+0xb8>

    // First byte: Start address
    BufferToSend[0] = StartAddress;
 8002232:	230c      	movs	r3, #12
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	1dba      	adds	r2, r7, #6
 8002238:	7812      	ldrb	r2, [r2, #0]
 800223a:	701a      	strb	r2, [r3, #0]

    // Copy data bytes into BufferToSend
    for (i = 0; i < Length; i++)
 800223c:	232f      	movs	r3, #47	@ 0x2f
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
 8002244:	e010      	b.n	8002268 <I2CWriteBlockWithCRC+0x6c>
    {
        BufferToSend[i + 1] = Buffer[i];
 8002246:	202f      	movs	r0, #47	@ 0x2f
 8002248:	183b      	adds	r3, r7, r0
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	18d2      	adds	r2, r2, r3
 8002250:	183b      	adds	r3, r7, r0
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	7811      	ldrb	r1, [r2, #0]
 8002258:	220c      	movs	r2, #12
 800225a:	18ba      	adds	r2, r7, r2
 800225c:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < Length; i++)
 800225e:	183b      	adds	r3, r7, r0
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	183b      	adds	r3, r7, r0
 8002264:	3201      	adds	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	232f      	movs	r3, #47	@ 0x2f
 800226a:	18fa      	adds	r2, r7, r3
 800226c:	1d7b      	adds	r3, r7, #5
 800226e:	7812      	ldrb	r2, [r2, #0]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d3e7      	bcc.n	8002246 <I2CWriteBlockWithCRC+0x4a>
    }

    // Send data starting from StartAddress
    // Total size = 1 (Start Address) + Length (Data Bytes)
    WriteStatus = HAL_I2C_Master_Transmit(&hi2c2, I2CSlaveAddress << 1, BufferToSend, 1 + Length, HAL_MAX_DELAY);
 8002276:	1dfb      	adds	r3, r7, #7
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	18db      	adds	r3, r3, r3
 800227e:	b299      	uxth	r1, r3
 8002280:	1d7b      	adds	r3, r7, #5
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	3301      	adds	r3, #1
 8002288:	b29d      	uxth	r5, r3
 800228a:	262e      	movs	r6, #46	@ 0x2e
 800228c:	19bc      	adds	r4, r7, r6
 800228e:	230c      	movs	r3, #12
 8002290:	18fa      	adds	r2, r7, r3
 8002292:	480a      	ldr	r0, [pc, #40]	@ (80022bc <I2CWriteBlockWithCRC+0xc0>)
 8002294:	2301      	movs	r3, #1
 8002296:	425b      	negs	r3, r3
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	002b      	movs	r3, r5
 800229c:	f002 f94c 	bl	8004538 <HAL_I2C_Master_Transmit>
 80022a0:	0003      	movs	r3, r0
 80022a2:	7023      	strb	r3, [r4, #0]

    if (WriteStatus != HAL_OK)
 80022a4:	19bb      	adds	r3, r7, r6
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <I2CWriteBlockWithCRC+0xb6>
        return -1;
 80022ac:	2301      	movs	r3, #1
 80022ae:	425b      	negs	r3, r3
 80022b0:	e000      	b.n	80022b4 <I2CWriteBlockWithCRC+0xb8>

    return 0;
 80022b2:	2300      	movs	r3, #0
        return -1;

    return 0;

   */
}
 80022b4:	0018      	movs	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b00d      	add	sp, #52	@ 0x34
 80022ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022bc:	2000016c 	.word	0x2000016c

080022c0 <TEST_I2C>:


HAL_StatusTypeDef TEST_I2C()
{
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef WriteStatus = HAL_OK;
 80022c6:	1dfb      	adds	r3, r7, #7
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]

    WriteStatus = HAL_I2C_IsDeviceReady(&hi2c2, 0x30, 5, HAL_MAX_DELAY);
 80022cc:	1dfc      	adds	r4, r7, #7
 80022ce:	2301      	movs	r3, #1
 80022d0:	425b      	negs	r3, r3
 80022d2:	4863      	ldr	r0, [pc, #396]	@ (8002460 <TEST_I2C+0x1a0>)
 80022d4:	2205      	movs	r2, #5
 80022d6:	2130      	movs	r1, #48	@ 0x30
 80022d8:	f002 fdc2 	bl	8004e60 <HAL_I2C_IsDeviceReady>
 80022dc:	0003      	movs	r3, r0
 80022de:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 80022e0:	2064      	movs	r0, #100	@ 0x64
 80022e2:	f000 ffa1 	bl	8003228 <HAL_Delay>
    WriteStatus = HAL_I2C_IsDeviceReady(&hi2c2, 0x00, 5, HAL_MAX_DELAY);
 80022e6:	1dfc      	adds	r4, r7, #7
 80022e8:	2301      	movs	r3, #1
 80022ea:	425b      	negs	r3, r3
 80022ec:	485c      	ldr	r0, [pc, #368]	@ (8002460 <TEST_I2C+0x1a0>)
 80022ee:	2205      	movs	r2, #5
 80022f0:	2100      	movs	r1, #0
 80022f2:	f002 fdb5 	bl	8004e60 <HAL_I2C_IsDeviceReady>
 80022f6:	0003      	movs	r3, r0
 80022f8:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 80022fa:	2064      	movs	r0, #100	@ 0x64
 80022fc:	f000 ff94 	bl	8003228 <HAL_Delay>
    WriteStatus = HAL_I2C_IsDeviceReady(&hi2c2, 0x08, 5, HAL_MAX_DELAY);
 8002300:	1dfc      	adds	r4, r7, #7
 8002302:	2301      	movs	r3, #1
 8002304:	425b      	negs	r3, r3
 8002306:	4856      	ldr	r0, [pc, #344]	@ (8002460 <TEST_I2C+0x1a0>)
 8002308:	2205      	movs	r2, #5
 800230a:	2108      	movs	r1, #8
 800230c:	f002 fda8 	bl	8004e60 <HAL_I2C_IsDeviceReady>
 8002310:	0003      	movs	r3, r0
 8002312:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 8002314:	2064      	movs	r0, #100	@ 0x64
 8002316:	f000 ff87 	bl	8003228 <HAL_Delay>
    WriteStatus = HAL_I2C_IsDeviceReady(&hi2c2, 0x08 << 1, 5, HAL_MAX_DELAY);
 800231a:	1dfc      	adds	r4, r7, #7
 800231c:	2301      	movs	r3, #1
 800231e:	425b      	negs	r3, r3
 8002320:	484f      	ldr	r0, [pc, #316]	@ (8002460 <TEST_I2C+0x1a0>)
 8002322:	2205      	movs	r2, #5
 8002324:	2110      	movs	r1, #16
 8002326:	f002 fd9b 	bl	8004e60 <HAL_I2C_IsDeviceReady>
 800232a:	0003      	movs	r3, r0
 800232c:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 800232e:	2064      	movs	r0, #100	@ 0x64
 8002330:	f000 ff7a 	bl	8003228 <HAL_Delay>
    WriteStatus = HAL_I2C_IsDeviceReady(&hi2c2, 0x18, 5, HAL_MAX_DELAY);
 8002334:	1dfc      	adds	r4, r7, #7
 8002336:	2301      	movs	r3, #1
 8002338:	425b      	negs	r3, r3
 800233a:	4849      	ldr	r0, [pc, #292]	@ (8002460 <TEST_I2C+0x1a0>)
 800233c:	2205      	movs	r2, #5
 800233e:	2118      	movs	r1, #24
 8002340:	f002 fd8e 	bl	8004e60 <HAL_I2C_IsDeviceReady>
 8002344:	0003      	movs	r3, r0
 8002346:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 8002348:	2064      	movs	r0, #100	@ 0x64
 800234a:	f000 ff6d 	bl	8003228 <HAL_Delay>
    WriteStatus = HAL_I2C_IsDeviceReady(&hi2c2, 0x18 << 1, 5, HAL_MAX_DELAY);
 800234e:	1dfc      	adds	r4, r7, #7
 8002350:	2301      	movs	r3, #1
 8002352:	425b      	negs	r3, r3
 8002354:	4842      	ldr	r0, [pc, #264]	@ (8002460 <TEST_I2C+0x1a0>)
 8002356:	2205      	movs	r2, #5
 8002358:	2130      	movs	r1, #48	@ 0x30
 800235a:	f002 fd81 	bl	8004e60 <HAL_I2C_IsDeviceReady>
 800235e:	0003      	movs	r3, r0
 8002360:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 8002362:	2064      	movs	r0, #100	@ 0x64
 8002364:	f000 ff60 	bl	8003228 <HAL_Delay>
    WriteStatus = HAL_I2C_IsDeviceReady(&hi2c2, BQ76940_ADDR, 5, HAL_MAX_DELAY);
 8002368:	1dfc      	adds	r4, r7, #7
 800236a:	2301      	movs	r3, #1
 800236c:	425b      	negs	r3, r3
 800236e:	483c      	ldr	r0, [pc, #240]	@ (8002460 <TEST_I2C+0x1a0>)
 8002370:	2205      	movs	r2, #5
 8002372:	2110      	movs	r1, #16
 8002374:	f002 fd74 	bl	8004e60 <HAL_I2C_IsDeviceReady>
 8002378:	0003      	movs	r3, r0
 800237a:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 800237c:	2064      	movs	r0, #100	@ 0x64
 800237e:	f000 ff53 	bl	8003228 <HAL_Delay>
    WriteStatus = HAL_I2C_IsDeviceReady(&hi2c2, BQMAXIMO, 5, HAL_MAX_DELAY);
 8002382:	1dfc      	adds	r4, r7, #7
 8002384:	2301      	movs	r3, #1
 8002386:	425b      	negs	r3, r3
 8002388:	4835      	ldr	r0, [pc, #212]	@ (8002460 <TEST_I2C+0x1a0>)
 800238a:	2205      	movs	r2, #5
 800238c:	2108      	movs	r1, #8
 800238e:	f002 fd67 	bl	8004e60 <HAL_I2C_IsDeviceReady>
 8002392:	0003      	movs	r3, r0
 8002394:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 8002396:	2064      	movs	r0, #100	@ 0x64
 8002398:	f000 ff46 	bl	8003228 <HAL_Delay>
    //vTaskDelay(100);
    //WriteStatus = HAL_I2C_Master_Transmit(&hi2c2, BQMAXIMO, 0x00, 2, HAL_MAX_DELAY);
    //vTaskDelay(100);

    uint8_t data;
    WriteStatus = HAL_I2C_Mem_Read(&hi2c2, BQ76940_ADDR, 0, 1, &data, 1, HAL_MAX_DELAY);
 800239c:	1dfc      	adds	r4, r7, #7
 800239e:	4830      	ldr	r0, [pc, #192]	@ (8002460 <TEST_I2C+0x1a0>)
 80023a0:	2301      	movs	r3, #1
 80023a2:	425b      	negs	r3, r3
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	2301      	movs	r3, #1
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	1dbb      	adds	r3, r7, #6
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2301      	movs	r3, #1
 80023b0:	2200      	movs	r2, #0
 80023b2:	2110      	movs	r1, #16
 80023b4:	f002 fc20 	bl	8004bf8 <HAL_I2C_Mem_Read>
 80023b8:	0003      	movs	r3, r0
 80023ba:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 80023bc:	2064      	movs	r0, #100	@ 0x64
 80023be:	f000 ff33 	bl	8003228 <HAL_Delay>
    WriteStatus = HAL_I2C_Mem_Read(&hi2c2, BQMAXIMO, 0, 1, &data, 1, HAL_MAX_DELAY);
 80023c2:	1dfc      	adds	r4, r7, #7
 80023c4:	4826      	ldr	r0, [pc, #152]	@ (8002460 <TEST_I2C+0x1a0>)
 80023c6:	2301      	movs	r3, #1
 80023c8:	425b      	negs	r3, r3
 80023ca:	9302      	str	r3, [sp, #8]
 80023cc:	2301      	movs	r3, #1
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	1dbb      	adds	r3, r7, #6
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	2301      	movs	r3, #1
 80023d6:	2200      	movs	r2, #0
 80023d8:	2108      	movs	r1, #8
 80023da:	f002 fc0d 	bl	8004bf8 <HAL_I2C_Mem_Read>
 80023de:	0003      	movs	r3, r0
 80023e0:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 80023e2:	2064      	movs	r0, #100	@ 0x64
 80023e4:	f000 ff20 	bl	8003228 <HAL_Delay>


    WriteStatus = HAL_I2C_Mem_Write(&hi2c2, BQ76940_ADDR, 0, 1, 0, 1, HAL_MAX_DELAY);
 80023e8:	1dfc      	adds	r4, r7, #7
 80023ea:	481d      	ldr	r0, [pc, #116]	@ (8002460 <TEST_I2C+0x1a0>)
 80023ec:	2301      	movs	r3, #1
 80023ee:	425b      	negs	r3, r3
 80023f0:	9302      	str	r3, [sp, #8]
 80023f2:	2301      	movs	r3, #1
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	2300      	movs	r3, #0
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	2301      	movs	r3, #1
 80023fc:	2200      	movs	r2, #0
 80023fe:	2110      	movs	r1, #16
 8002400:	f002 facc 	bl	800499c <HAL_I2C_Mem_Write>
 8002404:	0003      	movs	r3, r0
 8002406:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 8002408:	2064      	movs	r0, #100	@ 0x64
 800240a:	f000 ff0d 	bl	8003228 <HAL_Delay>
    WriteStatus = HAL_I2C_Mem_Write(&hi2c2, BQMAXIMO, 0, 1, 0, 1, HAL_MAX_DELAY);
 800240e:	1dfc      	adds	r4, r7, #7
 8002410:	4813      	ldr	r0, [pc, #76]	@ (8002460 <TEST_I2C+0x1a0>)
 8002412:	2301      	movs	r3, #1
 8002414:	425b      	negs	r3, r3
 8002416:	9302      	str	r3, [sp, #8]
 8002418:	2301      	movs	r3, #1
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	2300      	movs	r3, #0
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2301      	movs	r3, #1
 8002422:	2200      	movs	r2, #0
 8002424:	2108      	movs	r1, #8
 8002426:	f002 fab9 	bl	800499c <HAL_I2C_Mem_Write>
 800242a:	0003      	movs	r3, r0
 800242c:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 800242e:	2064      	movs	r0, #100	@ 0x64
 8002430:	f000 fefa 	bl	8003228 <HAL_Delay>

    WriteStatus = HAL_I2C_Mem_Read(&hi2c2, BQ76940_ADDR, ADCGAIN1, I2C_MEMADD_SIZE_8BIT, &(Registers.ADCGain1.ADCGain1Byte), 1, HAL_MAX_DELAY);
 8002434:	1dfc      	adds	r4, r7, #7
 8002436:	480a      	ldr	r0, [pc, #40]	@ (8002460 <TEST_I2C+0x1a0>)
 8002438:	2301      	movs	r3, #1
 800243a:	425b      	negs	r3, r3
 800243c:	9302      	str	r3, [sp, #8]
 800243e:	2301      	movs	r3, #1
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <TEST_I2C+0x1a4>)
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	2301      	movs	r3, #1
 8002448:	2250      	movs	r2, #80	@ 0x50
 800244a:	2110      	movs	r1, #16
 800244c:	f002 fbd4 	bl	8004bf8 <HAL_I2C_Mem_Read>
 8002450:	0003      	movs	r3, r0
 8002452:	7023      	strb	r3, [r4, #0]

	return WriteStatus;
 8002454:	1dfb      	adds	r3, r7, #7
 8002456:	781b      	ldrb	r3, [r3, #0]
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	b003      	add	sp, #12
 800245e:	bd90      	pop	{r4, r7, pc}
 8002460:	2000016c 	.word	0x2000016c
 8002464:	2000005c 	.word	0x2000005c

08002468 <GetADCGainOffset>:


HAL_StatusTypeDef GetADCGainOffset()
{
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b087      	sub	sp, #28
 800246c:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef WriteStatus = HAL_OK;
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]

    WriteStatus = HAL_I2C_Mem_Read(&hi2c2, BQ76940_ADDR, ADCGAIN1, I2C_MEMADD_SIZE_8BIT, &(Registers.ADCGain1.ADCGain1Byte), 1, HAL_MAX_DELAY);
 8002474:	1dfc      	adds	r4, r7, #7
 8002476:	4822      	ldr	r0, [pc, #136]	@ (8002500 <GetADCGainOffset+0x98>)
 8002478:	2301      	movs	r3, #1
 800247a:	425b      	negs	r3, r3
 800247c:	9302      	str	r3, [sp, #8]
 800247e:	2301      	movs	r3, #1
 8002480:	9301      	str	r3, [sp, #4]
 8002482:	4b20      	ldr	r3, [pc, #128]	@ (8002504 <GetADCGainOffset+0x9c>)
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2301      	movs	r3, #1
 8002488:	2250      	movs	r2, #80	@ 0x50
 800248a:	2110      	movs	r1, #16
 800248c:	f002 fbb4 	bl	8004bf8 <HAL_I2C_Mem_Read>
 8002490:	0003      	movs	r3, r0
 8002492:	7023      	strb	r3, [r4, #0]

    WriteStatus = HAL_I2C_Mem_Read(&hi2c2, BQMAXIMO, ADCGAIN1, I2C_MEMADD_SIZE_8BIT, &(Registers.ADCGain1.ADCGain1Byte), 1, HAL_MAX_DELAY);
 8002494:	1dfc      	adds	r4, r7, #7
 8002496:	481a      	ldr	r0, [pc, #104]	@ (8002500 <GetADCGainOffset+0x98>)
 8002498:	2301      	movs	r3, #1
 800249a:	425b      	negs	r3, r3
 800249c:	9302      	str	r3, [sp, #8]
 800249e:	2301      	movs	r3, #1
 80024a0:	9301      	str	r3, [sp, #4]
 80024a2:	4b18      	ldr	r3, [pc, #96]	@ (8002504 <GetADCGainOffset+0x9c>)
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	2301      	movs	r3, #1
 80024a8:	2250      	movs	r2, #80	@ 0x50
 80024aa:	2108      	movs	r1, #8
 80024ac:	f002 fba4 	bl	8004bf8 <HAL_I2C_Mem_Read>
 80024b0:	0003      	movs	r3, r0
 80024b2:	7023      	strb	r3, [r4, #0]
    WriteStatus = HAL_I2C_Mem_Read(&hi2c2, BQMAXIMO, ADCGAIN2, I2C_MEMADD_SIZE_8BIT, &(Registers.ADCGain2.ADCGain2Byte), 1, HAL_MAX_DELAY);
 80024b4:	1dfc      	adds	r4, r7, #7
 80024b6:	4812      	ldr	r0, [pc, #72]	@ (8002500 <GetADCGainOffset+0x98>)
 80024b8:	2301      	movs	r3, #1
 80024ba:	425b      	negs	r3, r3
 80024bc:	9302      	str	r3, [sp, #8]
 80024be:	2301      	movs	r3, #1
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <GetADCGainOffset+0xa0>)
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2301      	movs	r3, #1
 80024c8:	2259      	movs	r2, #89	@ 0x59
 80024ca:	2108      	movs	r1, #8
 80024cc:	f002 fb94 	bl	8004bf8 <HAL_I2C_Mem_Read>
 80024d0:	0003      	movs	r3, r0
 80024d2:	7023      	strb	r3, [r4, #0]
    WriteStatus = HAL_I2C_Mem_Read(&hi2c2, BQMAXIMO, ADCOFFSET, I2C_MEMADD_SIZE_8BIT, &(Registers.ADCOffset), 1, HAL_MAX_DELAY);
 80024d4:	1dfc      	adds	r4, r7, #7
 80024d6:	480a      	ldr	r0, [pc, #40]	@ (8002500 <GetADCGainOffset+0x98>)
 80024d8:	2301      	movs	r3, #1
 80024da:	425b      	negs	r3, r3
 80024dc:	9302      	str	r3, [sp, #8]
 80024de:	2301      	movs	r3, #1
 80024e0:	9301      	str	r3, [sp, #4]
 80024e2:	4b0a      	ldr	r3, [pc, #40]	@ (800250c <GetADCGainOffset+0xa4>)
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	2301      	movs	r3, #1
 80024e8:	2251      	movs	r2, #81	@ 0x51
 80024ea:	2108      	movs	r1, #8
 80024ec:	f002 fb84 	bl	8004bf8 <HAL_I2C_Mem_Read>
 80024f0:	0003      	movs	r3, r0
 80024f2:	7023      	strb	r3, [r4, #0]

	//result = ReadRegisterWithCRC(BQMAXIMO, ADCGAIN1, &(Registers.ADCGain1.ADCGain1Byte));
	//result = ReadRegisterWithCRC(BQMAXIMO, ADCGAIN2, &(Registers.ADCGain2.ADCGain2Byte));
	//result = ReadRegisterWithCRC(BQMAXIMO, ADCOFFSET, &(Registers.ADCOffset));

	return WriteStatus;
 80024f4:	1dfb      	adds	r3, r7, #7
 80024f6:	781b      	ldrb	r3, [r3, #0]
}
 80024f8:	0018      	movs	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b003      	add	sp, #12
 80024fe:	bd90      	pop	{r4, r7, pc}
 8002500:	2000016c 	.word	0x2000016c
 8002504:	2000005c 	.word	0x2000005c
 8002508:	2000005e 	.word	0x2000005e
 800250c:	2000005d 	.word	0x2000005d

08002510 <ConfigureBqMaximo>:

HAL_StatusTypeDef ConfigureBqMaximo()
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef WriteStatus = HAL_OK;
 8002516:	1dfb      	adds	r3, r7, #7
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
	unsigned char bqMaximoProtectionConfig[5];

	WriteStatus = I2CWriteBlockWithCRC(BQMAXIMO, PROTECT1, &(Registers.Protect1.Protect1Byte), 5);
 800251c:	4a1c      	ldr	r2, [pc, #112]	@ (8002590 <ConfigureBqMaximo+0x80>)
 800251e:	2305      	movs	r3, #5
 8002520:	2106      	movs	r1, #6
 8002522:	2008      	movs	r0, #8
 8002524:	f7ff fe6a 	bl	80021fc <I2CWriteBlockWithCRC>
 8002528:	0002      	movs	r2, r0
 800252a:	1dfb      	adds	r3, r7, #7
 800252c:	701a      	strb	r2, [r3, #0]

	WriteStatus = I2CReadBlockWithCRC(BQMAXIMO, PROTECT1, bqMaximoProtectionConfig, 5);
 800252e:	003a      	movs	r2, r7
 8002530:	2305      	movs	r3, #5
 8002532:	2106      	movs	r1, #6
 8002534:	2008      	movs	r0, #8
 8002536:	f7ff fde9 	bl	800210c <I2CReadBlockWithCRC>
 800253a:	0002      	movs	r2, r0
 800253c:	1dfb      	adds	r3, r7, #7
 800253e:	701a      	strb	r2, [r3, #0]

	if(bqMaximoProtectionConfig[0] != Registers.Protect1.Protect1Byte
 8002540:	003b      	movs	r3, r7
 8002542:	781a      	ldrb	r2, [r3, #0]
 8002544:	4b13      	ldr	r3, [pc, #76]	@ (8002594 <ConfigureBqMaximo+0x84>)
 8002546:	799b      	ldrb	r3, [r3, #6]
 8002548:	429a      	cmp	r2, r3
 800254a:	d117      	bne.n	800257c <ConfigureBqMaximo+0x6c>
			|| bqMaximoProtectionConfig[1] != Registers.Protect2.Protect2Byte
 800254c:	003b      	movs	r3, r7
 800254e:	785a      	ldrb	r2, [r3, #1]
 8002550:	4b10      	ldr	r3, [pc, #64]	@ (8002594 <ConfigureBqMaximo+0x84>)
 8002552:	79db      	ldrb	r3, [r3, #7]
 8002554:	429a      	cmp	r2, r3
 8002556:	d111      	bne.n	800257c <ConfigureBqMaximo+0x6c>
			|| bqMaximoProtectionConfig[2] != Registers.Protect3.Protect3Byte
 8002558:	003b      	movs	r3, r7
 800255a:	789a      	ldrb	r2, [r3, #2]
 800255c:	4b0d      	ldr	r3, [pc, #52]	@ (8002594 <ConfigureBqMaximo+0x84>)
 800255e:	7a1b      	ldrb	r3, [r3, #8]
 8002560:	429a      	cmp	r2, r3
 8002562:	d10b      	bne.n	800257c <ConfigureBqMaximo+0x6c>
			|| bqMaximoProtectionConfig[3] != Registers.OVTrip
 8002564:	003b      	movs	r3, r7
 8002566:	78da      	ldrb	r2, [r3, #3]
 8002568:	4b0a      	ldr	r3, [pc, #40]	@ (8002594 <ConfigureBqMaximo+0x84>)
 800256a:	7a5b      	ldrb	r3, [r3, #9]
 800256c:	429a      	cmp	r2, r3
 800256e:	d105      	bne.n	800257c <ConfigureBqMaximo+0x6c>
			|| bqMaximoProtectionConfig[4] != Registers.UVTrip)
 8002570:	003b      	movs	r3, r7
 8002572:	791a      	ldrb	r2, [r3, #4]
 8002574:	4b07      	ldr	r3, [pc, #28]	@ (8002594 <ConfigureBqMaximo+0x84>)
 8002576:	7a9b      	ldrb	r3, [r3, #10]
 8002578:	429a      	cmp	r2, r3
 800257a:	d002      	beq.n	8002582 <ConfigureBqMaximo+0x72>
	{
		WriteStatus = HAL_ERROR;
 800257c:	1dfb      	adds	r3, r7, #7
 800257e:	2201      	movs	r2, #1
 8002580:	701a      	strb	r2, [r3, #0]
	}

	return WriteStatus;
 8002582:	1dfb      	adds	r3, r7, #7
 8002584:	781b      	ldrb	r3, [r3, #0]
}
 8002586:	0018      	movs	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	b002      	add	sp, #8
 800258c:	bd80      	pop	{r7, pc}
 800258e:	46c0      	nop			@ (mov r8, r8)
 8002590:	2000002e 	.word	0x2000002e
 8002594:	20000028 	.word	0x20000028

08002598 <InitialisebqMaximo>:

HAL_StatusTypeDef InitialisebqMaximo()
{
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef WriteStatus = HAL_OK;
 800259e:	1dfb      	adds	r3, r7, #7
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]

	Registers.Protect1.Protect1Bit.SCD_DELAY = SCDDelay;
 80025a4:	2301      	movs	r3, #1
 80025a6:	1c1a      	adds	r2, r3, #0
 80025a8:	2303      	movs	r3, #3
 80025aa:	4013      	ands	r3, r2
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4b71      	ldr	r3, [pc, #452]	@ (8002774 <InitialisebqMaximo+0x1dc>)
 80025b0:	2103      	movs	r1, #3
 80025b2:	400a      	ands	r2, r1
 80025b4:	00d0      	lsls	r0, r2, #3
 80025b6:	799a      	ldrb	r2, [r3, #6]
 80025b8:	2118      	movs	r1, #24
 80025ba:	438a      	bics	r2, r1
 80025bc:	1c11      	adds	r1, r2, #0
 80025be:	1c02      	adds	r2, r0, #0
 80025c0:	430a      	orrs	r2, r1
 80025c2:	719a      	strb	r2, [r3, #6]
	Registers.Protect1.Protect1Bit.SCD_THRESH = SCDThresh;
 80025c4:	2302      	movs	r3, #2
 80025c6:	1c1a      	adds	r2, r3, #0
 80025c8:	2307      	movs	r3, #7
 80025ca:	4013      	ands	r3, r2
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4b69      	ldr	r3, [pc, #420]	@ (8002774 <InitialisebqMaximo+0x1dc>)
 80025d0:	2107      	movs	r1, #7
 80025d2:	400a      	ands	r2, r1
 80025d4:	0010      	movs	r0, r2
 80025d6:	799a      	ldrb	r2, [r3, #6]
 80025d8:	2107      	movs	r1, #7
 80025da:	438a      	bics	r2, r1
 80025dc:	1c11      	adds	r1, r2, #0
 80025de:	1c02      	adds	r2, r0, #0
 80025e0:	430a      	orrs	r2, r1
 80025e2:	719a      	strb	r2, [r3, #6]
	Registers.Protect2.Protect2Bit.OCD_DELAY = OCDDelay;
 80025e4:	2305      	movs	r3, #5
 80025e6:	1c1a      	adds	r2, r3, #0
 80025e8:	2307      	movs	r3, #7
 80025ea:	4013      	ands	r3, r2
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4b61      	ldr	r3, [pc, #388]	@ (8002774 <InitialisebqMaximo+0x1dc>)
 80025f0:	2107      	movs	r1, #7
 80025f2:	400a      	ands	r2, r1
 80025f4:	0110      	lsls	r0, r2, #4
 80025f6:	79da      	ldrb	r2, [r3, #7]
 80025f8:	2170      	movs	r1, #112	@ 0x70
 80025fa:	438a      	bics	r2, r1
 80025fc:	1c11      	adds	r1, r2, #0
 80025fe:	1c02      	adds	r2, r0, #0
 8002600:	430a      	orrs	r2, r1
 8002602:	71da      	strb	r2, [r3, #7]
	Registers.Protect2.Protect2Bit.OCD_THRESH = OCDThresh;
 8002604:	2301      	movs	r3, #1
 8002606:	1c1a      	adds	r2, r3, #0
 8002608:	230f      	movs	r3, #15
 800260a:	4013      	ands	r3, r2
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4b59      	ldr	r3, [pc, #356]	@ (8002774 <InitialisebqMaximo+0x1dc>)
 8002610:	210f      	movs	r1, #15
 8002612:	400a      	ands	r2, r1
 8002614:	0010      	movs	r0, r2
 8002616:	79da      	ldrb	r2, [r3, #7]
 8002618:	210f      	movs	r1, #15
 800261a:	438a      	bics	r2, r1
 800261c:	1c11      	adds	r1, r2, #0
 800261e:	1c02      	adds	r2, r0, #0
 8002620:	430a      	orrs	r2, r1
 8002622:	71da      	strb	r2, [r3, #7]
	Registers.Protect3.Protect3Bit.OV_DELAY = OVDelay;
 8002624:	2301      	movs	r3, #1
 8002626:	1c1a      	adds	r2, r3, #0
 8002628:	2303      	movs	r3, #3
 800262a:	4013      	ands	r3, r2
 800262c:	b2da      	uxtb	r2, r3
 800262e:	4b51      	ldr	r3, [pc, #324]	@ (8002774 <InitialisebqMaximo+0x1dc>)
 8002630:	2103      	movs	r1, #3
 8002632:	400a      	ands	r2, r1
 8002634:	0110      	lsls	r0, r2, #4
 8002636:	7a1a      	ldrb	r2, [r3, #8]
 8002638:	2130      	movs	r1, #48	@ 0x30
 800263a:	438a      	bics	r2, r1
 800263c:	1c11      	adds	r1, r2, #0
 800263e:	1c02      	adds	r2, r0, #0
 8002640:	430a      	orrs	r2, r1
 8002642:	721a      	strb	r2, [r3, #8]
	Registers.Protect3.Protect3Bit.UV_DELAY = UVDelay;
 8002644:	2302      	movs	r3, #2
 8002646:	1c1a      	adds	r2, r3, #0
 8002648:	2303      	movs	r3, #3
 800264a:	4013      	ands	r3, r2
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b49      	ldr	r3, [pc, #292]	@ (8002774 <InitialisebqMaximo+0x1dc>)
 8002650:	0190      	lsls	r0, r2, #6
 8002652:	7a1a      	ldrb	r2, [r3, #8]
 8002654:	213f      	movs	r1, #63	@ 0x3f
 8002656:	400a      	ands	r2, r1
 8002658:	1c11      	adds	r1, r2, #0
 800265a:	1c02      	adds	r2, r0, #0
 800265c:	430a      	orrs	r2, r1
 800265e:	721a      	strb	r2, [r3, #8]

	WriteStatus = GetADCGainOffset();
 8002660:	1dfc      	adds	r4, r7, #7
 8002662:	f7ff ff01 	bl	8002468 <GetADCGainOffset>
 8002666:	0003      	movs	r3, r0
 8002668:	7023      	strb	r3, [r4, #0]

	Gain = (365 + ((Registers.ADCGain1.ADCGain1Byte & 0x0C) << 1) + ((Registers.ADCGain2.ADCGain2Byte & 0xE0)>> 5)) / 1000.0;
 800266a:	4b42      	ldr	r3, [pc, #264]	@ (8002774 <InitialisebqMaximo+0x1dc>)
 800266c:	2234      	movs	r2, #52	@ 0x34
 800266e:	5c9b      	ldrb	r3, [r3, r2]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	2218      	movs	r2, #24
 8002674:	4013      	ands	r3, r2
 8002676:	336e      	adds	r3, #110	@ 0x6e
 8002678:	33ff      	adds	r3, #255	@ 0xff
 800267a:	4a3e      	ldr	r2, [pc, #248]	@ (8002774 <InitialisebqMaximo+0x1dc>)
 800267c:	2136      	movs	r1, #54	@ 0x36
 800267e:	5c52      	ldrb	r2, [r2, r1]
 8002680:	0952      	lsrs	r2, r2, #5
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	189b      	adds	r3, r3, r2
 8002686:	0018      	movs	r0, r3
 8002688:	f7ff fa66 	bl	8001b58 <__aeabi_i2d>
 800268c:	2200      	movs	r2, #0
 800268e:	4b3a      	ldr	r3, [pc, #232]	@ (8002778 <InitialisebqMaximo+0x1e0>)
 8002690:	f7fe fb04 	bl	8000c9c <__aeabi_ddiv>
 8002694:	0002      	movs	r2, r0
 8002696:	000b      	movs	r3, r1
 8002698:	0010      	movs	r0, r2
 800269a:	0019      	movs	r1, r3
 800269c:	f7ff fad2 	bl	8001c44 <__aeabi_d2f>
 80026a0:	1c02      	adds	r2, r0, #0
 80026a2:	4b36      	ldr	r3, [pc, #216]	@ (800277c <InitialisebqMaximo+0x1e4>)
 80026a4:	601a      	str	r2, [r3, #0]
	iGain = 365 + ((Registers.ADCGain1.ADCGain1Byte & 0x0C) << 1) + ((Registers.ADCGain2.ADCGain2Byte & 0xE0)>> 5);
 80026a6:	4b33      	ldr	r3, [pc, #204]	@ (8002774 <InitialisebqMaximo+0x1dc>)
 80026a8:	2234      	movs	r2, #52	@ 0x34
 80026aa:	5c9b      	ldrb	r3, [r3, r2]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2218      	movs	r2, #24
 80026b0:	4013      	ands	r3, r2
 80026b2:	336e      	adds	r3, #110	@ 0x6e
 80026b4:	33ff      	adds	r3, #255	@ 0xff
 80026b6:	4a2f      	ldr	r2, [pc, #188]	@ (8002774 <InitialisebqMaximo+0x1dc>)
 80026b8:	2136      	movs	r1, #54	@ 0x36
 80026ba:	5c52      	ldrb	r2, [r2, r1]
 80026bc:	0952      	lsrs	r2, r2, #5
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	189a      	adds	r2, r3, r2
 80026c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002780 <InitialisebqMaximo+0x1e8>)
 80026c4:	601a      	str	r2, [r3, #0]

    Registers.OVTrip = (unsigned char)((((unsigned short)((OVPThreshold - Registers.ADCOffset)/Gain + 0.5) - OV_THRESH_BASE) >> 4) & 0xFF);
 80026c6:	4a2f      	ldr	r2, [pc, #188]	@ (8002784 <InitialisebqMaximo+0x1ec>)
 80026c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002774 <InitialisebqMaximo+0x1dc>)
 80026ca:	2135      	movs	r1, #53	@ 0x35
 80026cc:	5c5b      	ldrb	r3, [r3, r1]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	0018      	movs	r0, r3
 80026d2:	f7fd fed7 	bl	8000484 <__aeabi_ui2f>
 80026d6:	1c02      	adds	r2, r0, #0
 80026d8:	4b28      	ldr	r3, [pc, #160]	@ (800277c <InitialisebqMaximo+0x1e4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	1c19      	adds	r1, r3, #0
 80026de:	1c10      	adds	r0, r2, #0
 80026e0:	f7fd fdba 	bl	8000258 <__aeabi_fdiv>
 80026e4:	1c03      	adds	r3, r0, #0
 80026e6:	1c18      	adds	r0, r3, #0
 80026e8:	f7ff fa64 	bl	8001bb4 <__aeabi_f2d>
 80026ec:	2200      	movs	r2, #0
 80026ee:	4b26      	ldr	r3, [pc, #152]	@ (8002788 <InitialisebqMaximo+0x1f0>)
 80026f0:	f7fd ff0e 	bl	8000510 <__aeabi_dadd>
 80026f4:	0002      	movs	r2, r0
 80026f6:	000b      	movs	r3, r1
 80026f8:	0010      	movs	r0, r2
 80026fa:	0019      	movs	r1, r3
 80026fc:	f7fd fd8e 	bl	800021c <__aeabi_d2uiz>
 8002700:	0003      	movs	r3, r0
 8002702:	b29b      	uxth	r3, r3
 8002704:	4a21      	ldr	r2, [pc, #132]	@ (800278c <InitialisebqMaximo+0x1f4>)
 8002706:	4694      	mov	ip, r2
 8002708:	4463      	add	r3, ip
 800270a:	111b      	asrs	r3, r3, #4
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4b19      	ldr	r3, [pc, #100]	@ (8002774 <InitialisebqMaximo+0x1dc>)
 8002710:	725a      	strb	r2, [r3, #9]
    Registers.UVTrip = (unsigned char)((((unsigned short)((UVPThreshold - Registers.ADCOffset)/Gain + 0.5) - UV_THRESH_BASE) >> 4) & 0xFF);
 8002712:	4a1f      	ldr	r2, [pc, #124]	@ (8002790 <InitialisebqMaximo+0x1f8>)
 8002714:	4b17      	ldr	r3, [pc, #92]	@ (8002774 <InitialisebqMaximo+0x1dc>)
 8002716:	2135      	movs	r1, #53	@ 0x35
 8002718:	5c5b      	ldrb	r3, [r3, r1]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	0018      	movs	r0, r3
 800271e:	f7fd feb1 	bl	8000484 <__aeabi_ui2f>
 8002722:	1c02      	adds	r2, r0, #0
 8002724:	4b15      	ldr	r3, [pc, #84]	@ (800277c <InitialisebqMaximo+0x1e4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	1c19      	adds	r1, r3, #0
 800272a:	1c10      	adds	r0, r2, #0
 800272c:	f7fd fd94 	bl	8000258 <__aeabi_fdiv>
 8002730:	1c03      	adds	r3, r0, #0
 8002732:	1c18      	adds	r0, r3, #0
 8002734:	f7ff fa3e 	bl	8001bb4 <__aeabi_f2d>
 8002738:	2200      	movs	r2, #0
 800273a:	4b13      	ldr	r3, [pc, #76]	@ (8002788 <InitialisebqMaximo+0x1f0>)
 800273c:	f7fd fee8 	bl	8000510 <__aeabi_dadd>
 8002740:	0002      	movs	r2, r0
 8002742:	000b      	movs	r3, r1
 8002744:	0010      	movs	r0, r2
 8002746:	0019      	movs	r1, r3
 8002748:	f7fd fd68 	bl	800021c <__aeabi_d2uiz>
 800274c:	0003      	movs	r3, r0
 800274e:	b29b      	uxth	r3, r3
 8002750:	4a10      	ldr	r2, [pc, #64]	@ (8002794 <InitialisebqMaximo+0x1fc>)
 8002752:	4694      	mov	ip, r2
 8002754:	4463      	add	r3, ip
 8002756:	111b      	asrs	r3, r3, #4
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <InitialisebqMaximo+0x1dc>)
 800275c:	729a      	strb	r2, [r3, #10]

    WriteStatus = ConfigureBqMaximo();
 800275e:	1dfc      	adds	r4, r7, #7
 8002760:	f7ff fed6 	bl	8002510 <ConfigureBqMaximo>
 8002764:	0003      	movs	r3, r0
 8002766:	7023      	strb	r3, [r4, #0]

    return WriteStatus;
 8002768:	1dfb      	adds	r3, r7, #7
 800276a:	781b      	ldrb	r3, [r3, #0]
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b003      	add	sp, #12
 8002772:	bd90      	pop	{r4, r7, pc}
 8002774:	20000028 	.word	0x20000028
 8002778:	408f4000 	.word	0x408f4000
 800277c:	2000009c 	.word	0x2000009c
 8002780:	200000a0 	.word	0x200000a0
 8002784:	000010cc 	.word	0x000010cc
 8002788:	3fe00000 	.word	0x3fe00000
 800278c:	ffffdff8 	.word	0xffffdff8
 8002790:	000009c4 	.word	0x000009c4
 8002794:	fffff000 	.word	0xfffff000

08002798 <UpdateVoltageFromBqMaximo>:

HAL_StatusTypeDef UpdateVoltageFromBqMaximo()
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef WriteStatus = HAL_OK;
 800279e:	240f      	movs	r4, #15
 80027a0:	193b      	adds	r3, r7, r4
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]
	int i = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
	unsigned char *pRawADCData = NULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
	unsigned int iTemp = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
	unsigned long lTemp = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]

	WriteStatus = I2CReadBlockWithCRC(BQMAXIMO, \
 80027b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002834 <UpdateVoltageFromBqMaximo+0x9c>)
 80027b8:	231e      	movs	r3, #30
 80027ba:	210c      	movs	r1, #12
 80027bc:	2008      	movs	r0, #8
 80027be:	f7ff fca5 	bl	800210c <I2CReadBlockWithCRC>
 80027c2:	0002      	movs	r2, r0
 80027c4:	193b      	adds	r3, r7, r4
 80027c6:	701a      	strb	r2, [r3, #0]
			VC1_HI_BYTE, \
			&(Registers.VCell1.VCell1Byte.VC1_HI), \
			30);

	pRawADCData = &Registers.VCell1.VCell1Byte.VC1_HI;
 80027c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002834 <UpdateVoltageFromBqMaximo+0x9c>)
 80027ca:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 15; i++)
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	e025      	b.n	800281e <UpdateVoltageFromBqMaximo+0x86>
	{
		iTemp = (unsigned int)(*pRawADCData << 8) + *(pRawADCData + 1);
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	3201      	adds	r2, #1
 80027dc:	7812      	ldrb	r2, [r2, #0]
 80027de:	189b      	adds	r3, r3, r2
 80027e0:	60bb      	str	r3, [r7, #8]
		lTemp = ((unsigned long)iTemp * iGain)/1000;
 80027e2:	4b15      	ldr	r3, [pc, #84]	@ (8002838 <UpdateVoltageFromBqMaximo+0xa0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	001a      	movs	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4353      	muls	r3, r2
 80027ec:	22fa      	movs	r2, #250	@ 0xfa
 80027ee:	0091      	lsls	r1, r2, #2
 80027f0:	0018      	movs	r0, r3
 80027f2:	f7fd fc87 	bl	8000104 <__udivsi3>
 80027f6:	0003      	movs	r3, r0
 80027f8:	607b      	str	r3, [r7, #4]
		lTemp += Registers.ADCOffset;
 80027fa:	4b10      	ldr	r3, [pc, #64]	@ (800283c <UpdateVoltageFromBqMaximo+0xa4>)
 80027fc:	2235      	movs	r2, #53	@ 0x35
 80027fe:	5c9b      	ldrb	r3, [r3, r2]
 8002800:	001a      	movs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	189b      	adds	r3, r3, r2
 8002806:	607b      	str	r3, [r7, #4]
		CellVoltage[i] = lTemp;
 8002808:	4b0d      	ldr	r3, [pc, #52]	@ (8002840 <UpdateVoltageFromBqMaximo+0xa8>)
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	0092      	lsls	r2, r2, #2
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	50d1      	str	r1, [r2, r3]
		pRawADCData += 2;
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	3302      	adds	r3, #2
 8002816:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 15; i++)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	3301      	adds	r3, #1
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b0e      	cmp	r3, #14
 8002822:	ddd6      	ble.n	80027d2 <UpdateVoltageFromBqMaximo+0x3a>
	}

	return WriteStatus;
 8002824:	230f      	movs	r3, #15
 8002826:	18fb      	adds	r3, r7, r3
 8002828:	781b      	ldrb	r3, [r3, #0]
}
 800282a:	0018      	movs	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	b007      	add	sp, #28
 8002830:	bd90      	pop	{r4, r7, pc}
 8002832:	46c0      	nop			@ (mov r8, r8)
 8002834:	20000034 	.word	0x20000034
 8002838:	200000a0 	.word	0x200000a0
 800283c:	20000028 	.word	0x20000028
 8002840:	20000060 	.word	0x20000060

08002844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002848:	f000 fc68 	bl	800311c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800284c:	f000 f80e 	bl	800286c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002850:	f000 f988 	bl	8002b64 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002854:	f000 f852 	bl	80028fc <MX_ADC1_Init>
  MX_FDCAN2_Init();
 8002858:	f000 f8ba 	bl	80029d0 <MX_FDCAN2_Init>
  MX_I2C3_Init();
 800285c:	f000 f942 	bl	8002ae4 <MX_I2C3_Init>
  MX_I2C2_Init();
 8002860:	f000 f8fe 	bl	8002a60 <MX_I2C2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	Cell_Motoring_Task();
 8002864:	f7ff fbee 	bl	8002044 <Cell_Motoring_Task>
  {
 8002868:	46c0      	nop			@ (mov r8, r8)
 800286a:	e7fb      	b.n	8002864 <main+0x20>

0800286c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800286c:	b590      	push	{r4, r7, lr}
 800286e:	b095      	sub	sp, #84	@ 0x54
 8002870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002872:	2414      	movs	r4, #20
 8002874:	193b      	adds	r3, r7, r4
 8002876:	0018      	movs	r0, r3
 8002878:	233c      	movs	r3, #60	@ 0x3c
 800287a:	001a      	movs	r2, r3
 800287c:	2100      	movs	r1, #0
 800287e:	f003 ff83 	bl	8006788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	0018      	movs	r0, r3
 8002886:	2310      	movs	r3, #16
 8002888:	001a      	movs	r2, r3
 800288a:	2100      	movs	r1, #0
 800288c:	f003 ff7c 	bl	8006788 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002890:	2380      	movs	r3, #128	@ 0x80
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	0018      	movs	r0, r3
 8002896:	f003 f811 	bl	80058bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800289a:	193b      	adds	r3, r7, r4
 800289c:	2202      	movs	r2, #2
 800289e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028a0:	193b      	adds	r3, r7, r4
 80028a2:	2280      	movs	r2, #128	@ 0x80
 80028a4:	0052      	lsls	r2, r2, #1
 80028a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80028a8:	193b      	adds	r3, r7, r4
 80028aa:	2200      	movs	r2, #0
 80028ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028ae:	193b      	adds	r3, r7, r4
 80028b0:	2240      	movs	r2, #64	@ 0x40
 80028b2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80028b4:	193b      	adds	r3, r7, r4
 80028b6:	2200      	movs	r2, #0
 80028b8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ba:	193b      	adds	r3, r7, r4
 80028bc:	0018      	movs	r0, r3
 80028be:	f003 f83d 	bl	800593c <HAL_RCC_OscConfig>
 80028c2:	1e03      	subs	r3, r0, #0
 80028c4:	d001      	beq.n	80028ca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80028c6:	f000 fa73 	bl	8002db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	2207      	movs	r2, #7
 80028ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80028d0:	1d3b      	adds	r3, r7, #4
 80028d2:	2200      	movs	r2, #0
 80028d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	2200      	movs	r2, #0
 80028e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	2100      	movs	r1, #0
 80028e6:	0018      	movs	r0, r3
 80028e8:	f003 fb88 	bl	8005ffc <HAL_RCC_ClockConfig>
 80028ec:	1e03      	subs	r3, r0, #0
 80028ee:	d001      	beq.n	80028f4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80028f0:	f000 fa5e 	bl	8002db0 <Error_Handler>
  }
}
 80028f4:	46c0      	nop			@ (mov r8, r8)
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b015      	add	sp, #84	@ 0x54
 80028fa:	bd90      	pop	{r4, r7, pc}

080028fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002902:	1d3b      	adds	r3, r7, #4
 8002904:	0018      	movs	r0, r3
 8002906:	230c      	movs	r3, #12
 8002908:	001a      	movs	r2, r3
 800290a:	2100      	movs	r1, #0
 800290c:	f003 ff3c 	bl	8006788 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002910:	4b2d      	ldr	r3, [pc, #180]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 8002912:	4a2e      	ldr	r2, [pc, #184]	@ (80029cc <MX_ADC1_Init+0xd0>)
 8002914:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002916:	4b2c      	ldr	r3, [pc, #176]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 8002918:	2280      	movs	r2, #128	@ 0x80
 800291a:	05d2      	lsls	r2, r2, #23
 800291c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800291e:	4b2a      	ldr	r3, [pc, #168]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002924:	4b28      	ldr	r3, [pc, #160]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800292a:	4b27      	ldr	r3, [pc, #156]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002930:	4b25      	ldr	r3, [pc, #148]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 8002932:	2204      	movs	r2, #4
 8002934:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002936:	4b24      	ldr	r3, [pc, #144]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 8002938:	2200      	movs	r2, #0
 800293a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800293c:	4b22      	ldr	r3, [pc, #136]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 800293e:	2200      	movs	r2, #0
 8002940:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002942:	4b21      	ldr	r3, [pc, #132]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 8002944:	2200      	movs	r2, #0
 8002946:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002948:	4b1f      	ldr	r3, [pc, #124]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 800294a:	2201      	movs	r2, #1
 800294c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800294e:	4b1e      	ldr	r3, [pc, #120]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 8002950:	2220      	movs	r2, #32
 8002952:	2100      	movs	r1, #0
 8002954:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002956:	4b1c      	ldr	r3, [pc, #112]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 8002958:	2200      	movs	r2, #0
 800295a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800295c:	4b1a      	ldr	r3, [pc, #104]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 800295e:	2200      	movs	r2, #0
 8002960:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002962:	4b19      	ldr	r3, [pc, #100]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 8002964:	222c      	movs	r2, #44	@ 0x2c
 8002966:	2100      	movs	r1, #0
 8002968:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800296a:	4b17      	ldr	r3, [pc, #92]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002970:	4b15      	ldr	r3, [pc, #84]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 8002972:	2200      	movs	r2, #0
 8002974:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002976:	4b14      	ldr	r3, [pc, #80]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 8002978:	2200      	movs	r2, #0
 800297a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800297c:	4b12      	ldr	r3, [pc, #72]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 800297e:	223c      	movs	r2, #60	@ 0x3c
 8002980:	2100      	movs	r1, #0
 8002982:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002984:	4b10      	ldr	r3, [pc, #64]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 8002986:	2200      	movs	r2, #0
 8002988:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800298a:	4b0f      	ldr	r3, [pc, #60]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 800298c:	0018      	movs	r0, r3
 800298e:	f000 fd83 	bl	8003498 <HAL_ADC_Init>
 8002992:	1e03      	subs	r3, r0, #0
 8002994:	d001      	beq.n	800299a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8002996:	f000 fa0b 	bl	8002db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800299a:	1d3b      	adds	r3, r7, #4
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029a0:	1d3b      	adds	r3, r7, #4
 80029a2:	2200      	movs	r2, #0
 80029a4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80029a6:	1d3b      	adds	r3, r7, #4
 80029a8:	2200      	movs	r2, #0
 80029aa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029ac:	1d3a      	adds	r2, r7, #4
 80029ae:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <MX_ADC1_Init+0xcc>)
 80029b0:	0011      	movs	r1, r2
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 ff18 	bl	80037e8 <HAL_ADC_ConfigChannel>
 80029b8:	1e03      	subs	r3, r0, #0
 80029ba:	d001      	beq.n	80029c0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80029bc:	f000 f9f8 	bl	8002db0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029c0:	46c0      	nop			@ (mov r8, r8)
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b004      	add	sp, #16
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	200000a4 	.word	0x200000a4
 80029cc:	40012400 	.word	0x40012400

080029d0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80029d4:	4b20      	ldr	r3, [pc, #128]	@ (8002a58 <MX_FDCAN2_Init+0x88>)
 80029d6:	4a21      	ldr	r2, [pc, #132]	@ (8002a5c <MX_FDCAN2_Init+0x8c>)
 80029d8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80029da:	4b1f      	ldr	r3, [pc, #124]	@ (8002a58 <MX_FDCAN2_Init+0x88>)
 80029dc:	2200      	movs	r2, #0
 80029de:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80029e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a58 <MX_FDCAN2_Init+0x88>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80029e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a58 <MX_FDCAN2_Init+0x88>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80029ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002a58 <MX_FDCAN2_Init+0x88>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80029f2:	4b19      	ldr	r3, [pc, #100]	@ (8002a58 <MX_FDCAN2_Init+0x88>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80029f8:	4b17      	ldr	r3, [pc, #92]	@ (8002a58 <MX_FDCAN2_Init+0x88>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80029fe:	4b16      	ldr	r3, [pc, #88]	@ (8002a58 <MX_FDCAN2_Init+0x88>)
 8002a00:	2210      	movs	r2, #16
 8002a02:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8002a04:	4b14      	ldr	r3, [pc, #80]	@ (8002a58 <MX_FDCAN2_Init+0x88>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 8002a0a:	4b13      	ldr	r3, [pc, #76]	@ (8002a58 <MX_FDCAN2_Init+0x88>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 8002a10:	4b11      	ldr	r3, [pc, #68]	@ (8002a58 <MX_FDCAN2_Init+0x88>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8002a16:	4b10      	ldr	r3, [pc, #64]	@ (8002a58 <MX_FDCAN2_Init+0x88>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <MX_FDCAN2_Init+0x88>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8002a22:	4b0d      	ldr	r3, [pc, #52]	@ (8002a58 <MX_FDCAN2_Init+0x88>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8002a28:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <MX_FDCAN2_Init+0x88>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a58 <MX_FDCAN2_Init+0x88>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002a34:	4b08      	ldr	r3, [pc, #32]	@ (8002a58 <MX_FDCAN2_Init+0x88>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002a3a:	4b07      	ldr	r3, [pc, #28]	@ (8002a58 <MX_FDCAN2_Init+0x88>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002a40:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <MX_FDCAN2_Init+0x88>)
 8002a42:	0018      	movs	r0, r3
 8002a44:	f001 f95c 	bl	8003d00 <HAL_FDCAN_Init>
 8002a48:	1e03      	subs	r3, r0, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8002a4c:	f000 f9b0 	bl	8002db0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8002a50:	46c0      	nop			@ (mov r8, r8)
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			@ (mov r8, r8)
 8002a58:	20000108 	.word	0x20000108
 8002a5c:	40006800 	.word	0x40006800

08002a60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a64:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad8 <MX_I2C2_Init+0x78>)
 8002a66:	4a1d      	ldr	r2, [pc, #116]	@ (8002adc <MX_I2C2_Init+0x7c>)
 8002a68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <MX_I2C2_Init+0x78>)
 8002a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae0 <MX_I2C2_Init+0x80>)
 8002a6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 16;
 8002a70:	4b19      	ldr	r3, [pc, #100]	@ (8002ad8 <MX_I2C2_Init+0x78>)
 8002a72:	2210      	movs	r2, #16
 8002a74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a76:	4b18      	ldr	r3, [pc, #96]	@ (8002ad8 <MX_I2C2_Init+0x78>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a7c:	4b16      	ldr	r3, [pc, #88]	@ (8002ad8 <MX_I2C2_Init+0x78>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002a82:	4b15      	ldr	r3, [pc, #84]	@ (8002ad8 <MX_I2C2_Init+0x78>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a88:	4b13      	ldr	r3, [pc, #76]	@ (8002ad8 <MX_I2C2_Init+0x78>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8002a8e:	4b12      	ldr	r3, [pc, #72]	@ (8002ad8 <MX_I2C2_Init+0x78>)
 8002a90:	2280      	movs	r2, #128	@ 0x80
 8002a92:	0312      	lsls	r2, r2, #12
 8002a94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a96:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <MX_I2C2_Init+0x78>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad8 <MX_I2C2_Init+0x78>)
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f001 fca4 	bl	80043ec <HAL_I2C_Init>
 8002aa4:	1e03      	subs	r3, r0, #0
 8002aa6:	d001      	beq.n	8002aac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002aa8:	f000 f982 	bl	8002db0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002aac:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <MX_I2C2_Init+0x78>)
 8002aae:	2100      	movs	r1, #0
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f002 fe6b 	bl	800578c <HAL_I2CEx_ConfigAnalogFilter>
 8002ab6:	1e03      	subs	r3, r0, #0
 8002ab8:	d001      	beq.n	8002abe <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8002aba:	f000 f979 	bl	8002db0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002abe:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <MX_I2C2_Init+0x78>)
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f002 feae 	bl	8005824 <HAL_I2CEx_ConfigDigitalFilter>
 8002ac8:	1e03      	subs	r3, r0, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002acc:	f000 f970 	bl	8002db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002ad0:	46c0      	nop			@ (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	2000016c 	.word	0x2000016c
 8002adc:	40005800 	.word	0x40005800
 8002ae0:	00503d58 	.word	0x00503d58

08002ae4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b58 <MX_I2C3_Init+0x74>)
 8002aea:	4a1c      	ldr	r2, [pc, #112]	@ (8002b5c <MX_I2C3_Init+0x78>)
 8002aec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 8002aee:	4b1a      	ldr	r3, [pc, #104]	@ (8002b58 <MX_I2C3_Init+0x74>)
 8002af0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b60 <MX_I2C3_Init+0x7c>)
 8002af2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002af4:	4b18      	ldr	r3, [pc, #96]	@ (8002b58 <MX_I2C3_Init+0x74>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002afa:	4b17      	ldr	r3, [pc, #92]	@ (8002b58 <MX_I2C3_Init+0x74>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b00:	4b15      	ldr	r3, [pc, #84]	@ (8002b58 <MX_I2C3_Init+0x74>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002b06:	4b14      	ldr	r3, [pc, #80]	@ (8002b58 <MX_I2C3_Init+0x74>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b0c:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <MX_I2C3_Init+0x74>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b12:	4b11      	ldr	r3, [pc, #68]	@ (8002b58 <MX_I2C3_Init+0x74>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b18:	4b0f      	ldr	r3, [pc, #60]	@ (8002b58 <MX_I2C3_Init+0x74>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b58 <MX_I2C3_Init+0x74>)
 8002b20:	0018      	movs	r0, r3
 8002b22:	f001 fc63 	bl	80043ec <HAL_I2C_Init>
 8002b26:	1e03      	subs	r3, r0, #0
 8002b28:	d001      	beq.n	8002b2e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002b2a:	f000 f941 	bl	8002db0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b58 <MX_I2C3_Init+0x74>)
 8002b30:	2100      	movs	r1, #0
 8002b32:	0018      	movs	r0, r3
 8002b34:	f002 fe2a 	bl	800578c <HAL_I2CEx_ConfigAnalogFilter>
 8002b38:	1e03      	subs	r3, r0, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002b3c:	f000 f938 	bl	8002db0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <MX_I2C3_Init+0x74>)
 8002b42:	2100      	movs	r1, #0
 8002b44:	0018      	movs	r0, r3
 8002b46:	f002 fe6d 	bl	8005824 <HAL_I2CEx_ConfigDigitalFilter>
 8002b4a:	1e03      	subs	r3, r0, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002b4e:	f000 f92f 	bl	8002db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002b52:	46c0      	nop			@ (mov r8, r8)
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	200001c0 	.word	0x200001c0
 8002b5c:	40008800 	.word	0x40008800
 8002b60:	00503d58 	.word	0x00503d58

08002b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b08b      	sub	sp, #44	@ 0x2c
 8002b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6a:	2414      	movs	r4, #20
 8002b6c:	193b      	adds	r3, r7, r4
 8002b6e:	0018      	movs	r0, r3
 8002b70:	2314      	movs	r3, #20
 8002b72:	001a      	movs	r2, r3
 8002b74:	2100      	movs	r1, #0
 8002b76:	f003 fe07 	bl	8006788 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b7a:	4b85      	ldr	r3, [pc, #532]	@ (8002d90 <MX_GPIO_Init+0x22c>)
 8002b7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b7e:	4b84      	ldr	r3, [pc, #528]	@ (8002d90 <MX_GPIO_Init+0x22c>)
 8002b80:	2104      	movs	r1, #4
 8002b82:	430a      	orrs	r2, r1
 8002b84:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b86:	4b82      	ldr	r3, [pc, #520]	@ (8002d90 <MX_GPIO_Init+0x22c>)
 8002b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b8a:	2204      	movs	r2, #4
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b92:	4b7f      	ldr	r3, [pc, #508]	@ (8002d90 <MX_GPIO_Init+0x22c>)
 8002b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b96:	4b7e      	ldr	r3, [pc, #504]	@ (8002d90 <MX_GPIO_Init+0x22c>)
 8002b98:	2120      	movs	r1, #32
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b9e:	4b7c      	ldr	r3, [pc, #496]	@ (8002d90 <MX_GPIO_Init+0x22c>)
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002baa:	4b79      	ldr	r3, [pc, #484]	@ (8002d90 <MX_GPIO_Init+0x22c>)
 8002bac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bae:	4b78      	ldr	r3, [pc, #480]	@ (8002d90 <MX_GPIO_Init+0x22c>)
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bb6:	4b76      	ldr	r3, [pc, #472]	@ (8002d90 <MX_GPIO_Init+0x22c>)
 8002bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bba:	2201      	movs	r2, #1
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc2:	4b73      	ldr	r3, [pc, #460]	@ (8002d90 <MX_GPIO_Init+0x22c>)
 8002bc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bc6:	4b72      	ldr	r3, [pc, #456]	@ (8002d90 <MX_GPIO_Init+0x22c>)
 8002bc8:	2102      	movs	r1, #2
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bce:	4b70      	ldr	r3, [pc, #448]	@ (8002d90 <MX_GPIO_Init+0x22c>)
 8002bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	607b      	str	r3, [r7, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BalanceEnableCell0_Pin|BalanceEnableCell1_Pin|BMS_BOOT_Pin, GPIO_PIN_RESET);
 8002bda:	496e      	ldr	r1, [pc, #440]	@ (8002d94 <MX_GPIO_Init+0x230>)
 8002bdc:	4b6e      	ldr	r3, [pc, #440]	@ (8002d98 <MX_GPIO_Init+0x234>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	0018      	movs	r0, r3
 8002be2:	f001 fbcb 	bl	800437c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BalanceEnableCell2_Pin|BalanceEnableCell3_Pin|BalanceEnableCell4_Pin|BalanceEnableCell5_Pin
 8002be6:	496d      	ldr	r1, [pc, #436]	@ (8002d9c <MX_GPIO_Init+0x238>)
 8002be8:	23a0      	movs	r3, #160	@ 0xa0
 8002bea:	05db      	lsls	r3, r3, #23
 8002bec:	2200      	movs	r2, #0
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f001 fbc4 	bl	800437c <HAL_GPIO_WritePin>
                          |BalanceEnableCell6_Pin|BalanceEnableCell7_Pin|BalanceEnableCell10_Pin|BalanceEnableCell11_Pin
                          |BalanceEnableCell12_Pin|BalanceEnableCell13_Pin|BalanceEnableCell14_Pin|YELLOW_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BalanceEnableCell8_Pin|BalanceEnableCell9_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8002bf4:	496a      	ldr	r1, [pc, #424]	@ (8002da0 <MX_GPIO_Init+0x23c>)
 8002bf6:	4b6b      	ldr	r3, [pc, #428]	@ (8002da4 <MX_GPIO_Init+0x240>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f001 fbbe 	bl	800437c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BalanceEnableCell0_Pin BalanceEnableCell1_Pin */
  GPIO_InitStruct.Pin = BalanceEnableCell0_Pin|BalanceEnableCell1_Pin;
 8002c00:	193b      	adds	r3, r7, r4
 8002c02:	22c0      	movs	r2, #192	@ 0xc0
 8002c04:	0212      	lsls	r2, r2, #8
 8002c06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c08:	193b      	adds	r3, r7, r4
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c0e:	193b      	adds	r3, r7, r4
 8002c10:	2201      	movs	r2, #1
 8002c12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c14:	193b      	adds	r3, r7, r4
 8002c16:	2200      	movs	r2, #0
 8002c18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c1a:	193b      	adds	r3, r7, r4
 8002c1c:	4a5e      	ldr	r2, [pc, #376]	@ (8002d98 <MX_GPIO_Init+0x234>)
 8002c1e:	0019      	movs	r1, r3
 8002c20:	0010      	movs	r0, r2
 8002c22:	f001 fa3f 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002c26:	193b      	adds	r3, r7, r4
 8002c28:	2202      	movs	r2, #2
 8002c2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	193b      	adds	r3, r7, r4
 8002c2e:	2202      	movs	r2, #2
 8002c30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c32:	193b      	adds	r3, r7, r4
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	193b      	adds	r3, r7, r4
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_OSC;
 8002c3e:	193b      	adds	r3, r7, r4
 8002c40:	2200      	movs	r2, #0
 8002c42:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c44:	193b      	adds	r3, r7, r4
 8002c46:	4a58      	ldr	r2, [pc, #352]	@ (8002da8 <MX_GPIO_Init+0x244>)
 8002c48:	0019      	movs	r1, r3
 8002c4a:	0010      	movs	r0, r2
 8002c4c:	f001 fa2a 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BalanceEnableCell2_Pin BalanceEnableCell3_Pin BalanceEnableCell4_Pin BalanceEnableCell5_Pin
                           BalanceEnableCell6_Pin BalanceEnableCell7_Pin BalanceEnableCell10_Pin BalanceEnableCell11_Pin
                           BalanceEnableCell13_Pin YELLOW_LED_Pin */
  GPIO_InitStruct.Pin = BalanceEnableCell2_Pin|BalanceEnableCell3_Pin|BalanceEnableCell4_Pin|BalanceEnableCell5_Pin
 8002c50:	193b      	adds	r3, r7, r4
 8002c52:	4a56      	ldr	r2, [pc, #344]	@ (8002dac <MX_GPIO_Init+0x248>)
 8002c54:	601a      	str	r2, [r3, #0]
                          |BalanceEnableCell6_Pin|BalanceEnableCell7_Pin|BalanceEnableCell10_Pin|BalanceEnableCell11_Pin
                          |BalanceEnableCell13_Pin|YELLOW_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c56:	193b      	adds	r3, r7, r4
 8002c58:	2201      	movs	r2, #1
 8002c5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c5c:	193b      	adds	r3, r7, r4
 8002c5e:	2201      	movs	r2, #1
 8002c60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c62:	193b      	adds	r3, r7, r4
 8002c64:	2200      	movs	r2, #0
 8002c66:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c68:	193a      	adds	r2, r7, r4
 8002c6a:	23a0      	movs	r3, #160	@ 0xa0
 8002c6c:	05db      	lsls	r3, r3, #23
 8002c6e:	0011      	movs	r1, r2
 8002c70:	0018      	movs	r0, r3
 8002c72:	f001 fa17 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BalanceEnableCell8_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = BalanceEnableCell8_Pin|RED_LED_Pin;
 8002c76:	193b      	adds	r3, r7, r4
 8002c78:	2224      	movs	r2, #36	@ 0x24
 8002c7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c7c:	193b      	adds	r3, r7, r4
 8002c7e:	2201      	movs	r2, #1
 8002c80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c82:	193b      	adds	r3, r7, r4
 8002c84:	2201      	movs	r2, #1
 8002c86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c88:	193b      	adds	r3, r7, r4
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8e:	193b      	adds	r3, r7, r4
 8002c90:	4a44      	ldr	r2, [pc, #272]	@ (8002da4 <MX_GPIO_Init+0x240>)
 8002c92:	0019      	movs	r1, r3
 8002c94:	0010      	movs	r0, r2
 8002c96:	f001 fa05 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c9a:	0021      	movs	r1, r4
 8002c9c:	187b      	adds	r3, r7, r1
 8002c9e:	22c0      	movs	r2, #192	@ 0xc0
 8002ca0:	0112      	lsls	r2, r2, #4
 8002ca2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca4:	000c      	movs	r4, r1
 8002ca6:	193b      	adds	r3, r7, r4
 8002ca8:	2202      	movs	r2, #2
 8002caa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	193b      	adds	r3, r7, r4
 8002cae:	2200      	movs	r2, #0
 8002cb0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb2:	193b      	adds	r3, r7, r4
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002cb8:	193b      	adds	r3, r7, r4
 8002cba:	2204      	movs	r2, #4
 8002cbc:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cbe:	193b      	adds	r3, r7, r4
 8002cc0:	4a38      	ldr	r2, [pc, #224]	@ (8002da4 <MX_GPIO_Init+0x240>)
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	0010      	movs	r0, r2
 8002cc6:	f001 f9ed 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BalanceEnableCell9_Pin */
  GPIO_InitStruct.Pin = BalanceEnableCell9_Pin;
 8002cca:	0021      	movs	r1, r4
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	2280      	movs	r2, #128	@ 0x80
 8002cd0:	0152      	lsls	r2, r2, #5
 8002cd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cd4:	000c      	movs	r4, r1
 8002cd6:	193b      	adds	r3, r7, r4
 8002cd8:	2201      	movs	r2, #1
 8002cda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	193b      	adds	r3, r7, r4
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce2:	193b      	adds	r3, r7, r4
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BalanceEnableCell9_GPIO_Port, &GPIO_InitStruct);
 8002ce8:	193b      	adds	r3, r7, r4
 8002cea:	4a2e      	ldr	r2, [pc, #184]	@ (8002da4 <MX_GPIO_Init+0x240>)
 8002cec:	0019      	movs	r1, r3
 8002cee:	0010      	movs	r0, r2
 8002cf0:	f001 f9d8 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_ALERT_Pin */
  GPIO_InitStruct.Pin = BMS_ALERT_Pin;
 8002cf4:	0021      	movs	r1, r4
 8002cf6:	187b      	adds	r3, r7, r1
 8002cf8:	2280      	movs	r2, #128	@ 0x80
 8002cfa:	0212      	lsls	r2, r2, #8
 8002cfc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cfe:	000c      	movs	r4, r1
 8002d00:	193b      	adds	r3, r7, r4
 8002d02:	2200      	movs	r2, #0
 8002d04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d06:	193b      	adds	r3, r7, r4
 8002d08:	2202      	movs	r2, #2
 8002d0a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BMS_ALERT_GPIO_Port, &GPIO_InitStruct);
 8002d0c:	193b      	adds	r3, r7, r4
 8002d0e:	4a25      	ldr	r2, [pc, #148]	@ (8002da4 <MX_GPIO_Init+0x240>)
 8002d10:	0019      	movs	r1, r3
 8002d12:	0010      	movs	r0, r2
 8002d14:	f001 f9c6 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_BOOT_Pin */
  GPIO_InitStruct.Pin = BMS_BOOT_Pin;
 8002d18:	193b      	adds	r3, r7, r4
 8002d1a:	2240      	movs	r2, #64	@ 0x40
 8002d1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d1e:	193b      	adds	r3, r7, r4
 8002d20:	2201      	movs	r2, #1
 8002d22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	193b      	adds	r3, r7, r4
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2a:	193b      	adds	r3, r7, r4
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BMS_BOOT_GPIO_Port, &GPIO_InitStruct);
 8002d30:	193b      	adds	r3, r7, r4
 8002d32:	4a19      	ldr	r2, [pc, #100]	@ (8002d98 <MX_GPIO_Init+0x234>)
 8002d34:	0019      	movs	r1, r3
 8002d36:	0010      	movs	r0, r2
 8002d38:	f001 f9b4 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BalanceEnableCell12_Pin BalanceEnableCell14_Pin */
  GPIO_InitStruct.Pin = BalanceEnableCell12_Pin|BalanceEnableCell14_Pin;
 8002d3c:	0021      	movs	r1, r4
 8002d3e:	187b      	adds	r3, r7, r1
 8002d40:	22a0      	movs	r2, #160	@ 0xa0
 8002d42:	0152      	lsls	r2, r2, #5
 8002d44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d46:	000c      	movs	r4, r1
 8002d48:	193b      	adds	r3, r7, r4
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	193b      	adds	r3, r7, r4
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d54:	193b      	adds	r3, r7, r4
 8002d56:	2200      	movs	r2, #0
 8002d58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5a:	193a      	adds	r2, r7, r4
 8002d5c:	23a0      	movs	r3, #160	@ 0xa0
 8002d5e:	05db      	lsls	r3, r3, #23
 8002d60:	0011      	movs	r1, r2
 8002d62:	0018      	movs	r0, r3
 8002d64:	f001 f99e 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BalaResCheck_Pin */
  GPIO_InitStruct.Pin = BalaResCheck_Pin;
 8002d68:	193b      	adds	r3, r7, r4
 8002d6a:	2240      	movs	r2, #64	@ 0x40
 8002d6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	2200      	movs	r2, #0
 8002d72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	193b      	adds	r3, r7, r4
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BalaResCheck_GPIO_Port, &GPIO_InitStruct);
 8002d7a:	193b      	adds	r3, r7, r4
 8002d7c:	4a09      	ldr	r2, [pc, #36]	@ (8002da4 <MX_GPIO_Init+0x240>)
 8002d7e:	0019      	movs	r1, r3
 8002d80:	0010      	movs	r0, r2
 8002d82:	f001 f98f 	bl	80040a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b00b      	add	sp, #44	@ 0x2c
 8002d8c:	bd90      	pop	{r4, r7, pc}
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	40021000 	.word	0x40021000
 8002d94:	0000c040 	.word	0x0000c040
 8002d98:	50000800 	.word	0x50000800
 8002d9c:	00009ffc 	.word	0x00009ffc
 8002da0:	00001024 	.word	0x00001024
 8002da4:	50000400 	.word	0x50000400
 8002da8:	50001400 	.word	0x50001400
 8002dac:	00008bfc 	.word	0x00008bfc

08002db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002db4:	b672      	cpsid	i
}
 8002db6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002db8:	46c0      	nop			@ (mov r8, r8)
 8002dba:	e7fd      	b.n	8002db8 <Error_Handler+0x8>

08002dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc2:	4b11      	ldr	r3, [pc, #68]	@ (8002e08 <HAL_MspInit+0x4c>)
 8002dc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dc6:	4b10      	ldr	r3, [pc, #64]	@ (8002e08 <HAL_MspInit+0x4c>)
 8002dc8:	2101      	movs	r1, #1
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002dce:	4b0e      	ldr	r3, [pc, #56]	@ (8002e08 <HAL_MspInit+0x4c>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	607b      	str	r3, [r7, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <HAL_MspInit+0x4c>)
 8002ddc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dde:	4b0a      	ldr	r3, [pc, #40]	@ (8002e08 <HAL_MspInit+0x4c>)
 8002de0:	2180      	movs	r1, #128	@ 0x80
 8002de2:	0549      	lsls	r1, r1, #21
 8002de4:	430a      	orrs	r2, r1
 8002de6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002de8:	4b07      	ldr	r3, [pc, #28]	@ (8002e08 <HAL_MspInit+0x4c>)
 8002dea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dec:	2380      	movs	r3, #128	@ 0x80
 8002dee:	055b      	lsls	r3, r3, #21
 8002df0:	4013      	ands	r3, r2
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002df6:	23c0      	movs	r3, #192	@ 0xc0
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f000 fa38 	bl	8003270 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e00:	46c0      	nop			@ (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b002      	add	sp, #8
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000

08002e0c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e0c:	b590      	push	{r4, r7, lr}
 8002e0e:	b08b      	sub	sp, #44	@ 0x2c
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	2414      	movs	r4, #20
 8002e16:	193b      	adds	r3, r7, r4
 8002e18:	0018      	movs	r0, r3
 8002e1a:	2314      	movs	r3, #20
 8002e1c:	001a      	movs	r2, r3
 8002e1e:	2100      	movs	r1, #0
 8002e20:	f003 fcb2 	bl	8006788 <memset>
  if(hadc->Instance==ADC1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a18      	ldr	r2, [pc, #96]	@ (8002e8c <HAL_ADC_MspInit+0x80>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d129      	bne.n	8002e82 <HAL_ADC_MspInit+0x76>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002e2e:	4b18      	ldr	r3, [pc, #96]	@ (8002e90 <HAL_ADC_MspInit+0x84>)
 8002e30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e32:	4b17      	ldr	r3, [pc, #92]	@ (8002e90 <HAL_ADC_MspInit+0x84>)
 8002e34:	2180      	movs	r1, #128	@ 0x80
 8002e36:	0349      	lsls	r1, r1, #13
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e3c:	4b14      	ldr	r3, [pc, #80]	@ (8002e90 <HAL_ADC_MspInit+0x84>)
 8002e3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e40:	2380      	movs	r3, #128	@ 0x80
 8002e42:	035b      	lsls	r3, r3, #13
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4a:	4b11      	ldr	r3, [pc, #68]	@ (8002e90 <HAL_ADC_MspInit+0x84>)
 8002e4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e4e:	4b10      	ldr	r3, [pc, #64]	@ (8002e90 <HAL_ADC_MspInit+0x84>)
 8002e50:	2101      	movs	r1, #1
 8002e52:	430a      	orrs	r2, r1
 8002e54:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e56:	4b0e      	ldr	r3, [pc, #56]	@ (8002e90 <HAL_ADC_MspInit+0x84>)
 8002e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = BalanceThermistor1_Pin|BalanceThermistor2_Pin;
 8002e62:	193b      	adds	r3, r7, r4
 8002e64:	2203      	movs	r2, #3
 8002e66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e68:	193b      	adds	r3, r7, r4
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	193b      	adds	r3, r7, r4
 8002e70:	2200      	movs	r2, #0
 8002e72:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e74:	193a      	adds	r2, r7, r4
 8002e76:	23a0      	movs	r3, #160	@ 0xa0
 8002e78:	05db      	lsls	r3, r3, #23
 8002e7a:	0011      	movs	r1, r2
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f001 f911 	bl	80040a4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002e82:	46c0      	nop			@ (mov r8, r8)
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b00b      	add	sp, #44	@ 0x2c
 8002e88:	bd90      	pop	{r4, r7, pc}
 8002e8a:	46c0      	nop			@ (mov r8, r8)
 8002e8c:	40012400 	.word	0x40012400
 8002e90:	40021000 	.word	0x40021000

08002e94 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b09d      	sub	sp, #116	@ 0x74
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9c:	235c      	movs	r3, #92	@ 0x5c
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	2314      	movs	r3, #20
 8002ea4:	001a      	movs	r2, r3
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	f003 fc6e 	bl	8006788 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002eac:	2410      	movs	r4, #16
 8002eae:	193b      	adds	r3, r7, r4
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	234c      	movs	r3, #76	@ 0x4c
 8002eb4:	001a      	movs	r2, r3
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	f003 fc66 	bl	8006788 <memset>
  if(hfdcan->Instance==FDCAN2)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a22      	ldr	r2, [pc, #136]	@ (8002f4c <HAL_FDCAN_MspInit+0xb8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d13e      	bne.n	8002f44 <HAL_FDCAN_MspInit+0xb0>

    /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002ec6:	193b      	adds	r3, r7, r4
 8002ec8:	2280      	movs	r2, #128	@ 0x80
 8002eca:	0492      	lsls	r2, r2, #18
 8002ecc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002ece:	193b      	adds	r3, r7, r4
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ed4:	193b      	adds	r3, r7, r4
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f003 fa1a 	bl	8006310 <HAL_RCCEx_PeriphCLKConfig>
 8002edc:	1e03      	subs	r3, r0, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002ee0:	f7ff ff66 	bl	8002db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f50 <HAL_FDCAN_MspInit+0xbc>)
 8002ee6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ee8:	4b19      	ldr	r3, [pc, #100]	@ (8002f50 <HAL_FDCAN_MspInit+0xbc>)
 8002eea:	2180      	movs	r1, #128	@ 0x80
 8002eec:	0149      	lsls	r1, r1, #5
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ef2:	4b17      	ldr	r3, [pc, #92]	@ (8002f50 <HAL_FDCAN_MspInit+0xbc>)
 8002ef4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ef6:	2380      	movs	r3, #128	@ 0x80
 8002ef8:	015b      	lsls	r3, r3, #5
 8002efa:	4013      	ands	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f00:	4b13      	ldr	r3, [pc, #76]	@ (8002f50 <HAL_FDCAN_MspInit+0xbc>)
 8002f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f04:	4b12      	ldr	r3, [pc, #72]	@ (8002f50 <HAL_FDCAN_MspInit+0xbc>)
 8002f06:	2102      	movs	r1, #2
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f0c:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <HAL_FDCAN_MspInit+0xbc>)
 8002f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f10:	2202      	movs	r2, #2
 8002f12:	4013      	ands	r3, r2
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB0     ------> FDCAN2_RX
    PB1     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f18:	215c      	movs	r1, #92	@ 0x5c
 8002f1a:	187b      	adds	r3, r7, r1
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f20:	187b      	adds	r3, r7, r1
 8002f22:	2202      	movs	r2, #2
 8002f24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	187b      	adds	r3, r7, r1
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2c:	187b      	adds	r3, r7, r1
 8002f2e:	2200      	movs	r2, #0
 8002f30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 8002f32:	187b      	adds	r3, r7, r1
 8002f34:	2203      	movs	r2, #3
 8002f36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f38:	187b      	adds	r3, r7, r1
 8002f3a:	4a06      	ldr	r2, [pc, #24]	@ (8002f54 <HAL_FDCAN_MspInit+0xc0>)
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	0010      	movs	r0, r2
 8002f40:	f001 f8b0 	bl	80040a4 <HAL_GPIO_Init>

    /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8002f44:	46c0      	nop			@ (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b01d      	add	sp, #116	@ 0x74
 8002f4a:	bd90      	pop	{r4, r7, pc}
 8002f4c:	40006800 	.word	0x40006800
 8002f50:	40021000 	.word	0x40021000
 8002f54:	50000400 	.word	0x50000400

08002f58 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b09f      	sub	sp, #124	@ 0x7c
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f60:	2364      	movs	r3, #100	@ 0x64
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	0018      	movs	r0, r3
 8002f66:	2314      	movs	r3, #20
 8002f68:	001a      	movs	r2, r3
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	f003 fc0c 	bl	8006788 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f70:	2418      	movs	r4, #24
 8002f72:	193b      	adds	r3, r7, r4
 8002f74:	0018      	movs	r0, r3
 8002f76:	234c      	movs	r3, #76	@ 0x4c
 8002f78:	001a      	movs	r2, r3
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	f003 fc04 	bl	8006788 <memset>
  if(hi2c->Instance==I2C2)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a3d      	ldr	r2, [pc, #244]	@ (800307c <HAL_I2C_MspInit+0x124>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d13f      	bne.n	800300a <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002f8a:	193b      	adds	r3, r7, r4
 8002f8c:	2240      	movs	r2, #64	@ 0x40
 8002f8e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002f90:	193b      	adds	r3, r7, r4
 8002f92:	2200      	movs	r2, #0
 8002f94:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f96:	193b      	adds	r3, r7, r4
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f003 f9b9 	bl	8006310 <HAL_RCCEx_PeriphCLKConfig>
 8002f9e:	1e03      	subs	r3, r0, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002fa2:	f7ff ff05 	bl	8002db0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa6:	4b36      	ldr	r3, [pc, #216]	@ (8003080 <HAL_I2C_MspInit+0x128>)
 8002fa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002faa:	4b35      	ldr	r3, [pc, #212]	@ (8003080 <HAL_I2C_MspInit+0x128>)
 8002fac:	2102      	movs	r1, #2
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fb2:	4b33      	ldr	r3, [pc, #204]	@ (8003080 <HAL_I2C_MspInit+0x128>)
 8002fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	4013      	ands	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BMS_SCL_Pin|BMS_SDA_Pin;
 8002fbe:	2164      	movs	r1, #100	@ 0x64
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	22c0      	movs	r2, #192	@ 0xc0
 8002fc4:	01d2      	lsls	r2, r2, #7
 8002fc6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fc8:	187b      	adds	r3, r7, r1
 8002fca:	2212      	movs	r2, #18
 8002fcc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fce:	187b      	adds	r3, r7, r1
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd4:	187b      	adds	r3, r7, r1
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002fda:	187b      	adds	r3, r7, r1
 8002fdc:	2206      	movs	r2, #6
 8002fde:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe0:	187b      	adds	r3, r7, r1
 8002fe2:	4a28      	ldr	r2, [pc, #160]	@ (8003084 <HAL_I2C_MspInit+0x12c>)
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	0010      	movs	r0, r2
 8002fe8:	f001 f85c 	bl	80040a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002fec:	4b24      	ldr	r3, [pc, #144]	@ (8003080 <HAL_I2C_MspInit+0x128>)
 8002fee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ff0:	4b23      	ldr	r3, [pc, #140]	@ (8003080 <HAL_I2C_MspInit+0x128>)
 8002ff2:	2180      	movs	r1, #128	@ 0x80
 8002ff4:	03c9      	lsls	r1, r1, #15
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ffa:	4b21      	ldr	r3, [pc, #132]	@ (8003080 <HAL_I2C_MspInit+0x128>)
 8002ffc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ffe:	2380      	movs	r3, #128	@ 0x80
 8003000:	03db      	lsls	r3, r3, #15
 8003002:	4013      	ands	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003008:	e034      	b.n	8003074 <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1e      	ldr	r2, [pc, #120]	@ (8003088 <HAL_I2C_MspInit+0x130>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d12f      	bne.n	8003074 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003014:	4b1a      	ldr	r3, [pc, #104]	@ (8003080 <HAL_I2C_MspInit+0x128>)
 8003016:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003018:	4b19      	ldr	r3, [pc, #100]	@ (8003080 <HAL_I2C_MspInit+0x128>)
 800301a:	2102      	movs	r1, #2
 800301c:	430a      	orrs	r2, r1
 800301e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003020:	4b17      	ldr	r3, [pc, #92]	@ (8003080 <HAL_I2C_MspInit+0x128>)
 8003022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003024:	2202      	movs	r2, #2
 8003026:	4013      	ands	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800302c:	2164      	movs	r1, #100	@ 0x64
 800302e:	187b      	adds	r3, r7, r1
 8003030:	2218      	movs	r2, #24
 8003032:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003034:	187b      	adds	r3, r7, r1
 8003036:	2212      	movs	r2, #18
 8003038:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	187b      	adds	r3, r7, r1
 800303c:	2200      	movs	r2, #0
 800303e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003040:	187b      	adds	r3, r7, r1
 8003042:	2200      	movs	r2, #0
 8003044:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C3;
 8003046:	187b      	adds	r3, r7, r1
 8003048:	2206      	movs	r2, #6
 800304a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800304c:	187b      	adds	r3, r7, r1
 800304e:	4a0d      	ldr	r2, [pc, #52]	@ (8003084 <HAL_I2C_MspInit+0x12c>)
 8003050:	0019      	movs	r1, r3
 8003052:	0010      	movs	r0, r2
 8003054:	f001 f826 	bl	80040a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003058:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <HAL_I2C_MspInit+0x128>)
 800305a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800305c:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <HAL_I2C_MspInit+0x128>)
 800305e:	2180      	movs	r1, #128	@ 0x80
 8003060:	0409      	lsls	r1, r1, #16
 8003062:	430a      	orrs	r2, r1
 8003064:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003066:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <HAL_I2C_MspInit+0x128>)
 8003068:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800306a:	2380      	movs	r3, #128	@ 0x80
 800306c:	041b      	lsls	r3, r3, #16
 800306e:	4013      	ands	r3, r2
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	68bb      	ldr	r3, [r7, #8]
}
 8003074:	46c0      	nop			@ (mov r8, r8)
 8003076:	46bd      	mov	sp, r7
 8003078:	b01f      	add	sp, #124	@ 0x7c
 800307a:	bd90      	pop	{r4, r7, pc}
 800307c:	40005800 	.word	0x40005800
 8003080:	40021000 	.word	0x40021000
 8003084:	50000400 	.word	0x50000400
 8003088:	40008800 	.word	0x40008800

0800308c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003090:	46c0      	nop			@ (mov r8, r8)
 8003092:	e7fd      	b.n	8003090 <NMI_Handler+0x4>

08003094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003098:	46c0      	nop			@ (mov r8, r8)
 800309a:	e7fd      	b.n	8003098 <HardFault_Handler+0x4>

0800309c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80030a0:	46c0      	nop			@ (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030aa:	46c0      	nop			@ (mov r8, r8)
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030b4:	f000 f89c 	bl	80031f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030b8:	46c0      	nop			@ (mov r8, r8)
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030c2:	46c0      	nop			@ (mov r8, r8)
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030c8:	480d      	ldr	r0, [pc, #52]	@ (8003100 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80030cc:	f7ff fff7 	bl	80030be <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030d0:	480c      	ldr	r0, [pc, #48]	@ (8003104 <LoopForever+0x6>)
  ldr r1, =_edata
 80030d2:	490d      	ldr	r1, [pc, #52]	@ (8003108 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030d4:	4a0d      	ldr	r2, [pc, #52]	@ (800310c <LoopForever+0xe>)
  movs r3, #0
 80030d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030d8:	e002      	b.n	80030e0 <LoopCopyDataInit>

080030da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030de:	3304      	adds	r3, #4

080030e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030e4:	d3f9      	bcc.n	80030da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003110 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030e8:	4c0a      	ldr	r4, [pc, #40]	@ (8003114 <LoopForever+0x16>)
  movs r3, #0
 80030ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030ec:	e001      	b.n	80030f2 <LoopFillZerobss>

080030ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030f0:	3204      	adds	r2, #4

080030f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030f4:	d3fb      	bcc.n	80030ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80030f6:	f003 fb4f 	bl	8006798 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80030fa:	f7ff fba3 	bl	8002844 <main>

080030fe <LoopForever>:

LoopForever:
  b LoopForever
 80030fe:	e7fe      	b.n	80030fe <LoopForever>
  ldr   r0, =_estack
 8003100:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003108:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800310c:	080068fc 	.word	0x080068fc
  ldr r2, =_sbss
 8003110:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003114:	20000218 	.word	0x20000218

08003118 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003118:	e7fe      	b.n	8003118 <ADC1_COMP_IRQHandler>
	...

0800311c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003122:	1dfb      	adds	r3, r7, #7
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003128:	4b0b      	ldr	r3, [pc, #44]	@ (8003158 <HAL_Init+0x3c>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4b0a      	ldr	r3, [pc, #40]	@ (8003158 <HAL_Init+0x3c>)
 800312e:	2180      	movs	r1, #128	@ 0x80
 8003130:	0049      	lsls	r1, r1, #1
 8003132:	430a      	orrs	r2, r1
 8003134:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003136:	2003      	movs	r0, #3
 8003138:	f000 f810 	bl	800315c <HAL_InitTick>
 800313c:	1e03      	subs	r3, r0, #0
 800313e:	d003      	beq.n	8003148 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003140:	1dfb      	adds	r3, r7, #7
 8003142:	2201      	movs	r2, #1
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	e001      	b.n	800314c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003148:	f7ff fe38 	bl	8002dbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800314c:	1dfb      	adds	r3, r7, #7
 800314e:	781b      	ldrb	r3, [r3, #0]
}
 8003150:	0018      	movs	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	b002      	add	sp, #8
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40022000 	.word	0x40022000

0800315c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003164:	230f      	movs	r3, #15
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800316c:	4b1d      	ldr	r3, [pc, #116]	@ (80031e4 <HAL_InitTick+0x88>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d02b      	beq.n	80031cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003174:	4b1c      	ldr	r3, [pc, #112]	@ (80031e8 <HAL_InitTick+0x8c>)
 8003176:	681c      	ldr	r4, [r3, #0]
 8003178:	4b1a      	ldr	r3, [pc, #104]	@ (80031e4 <HAL_InitTick+0x88>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	0019      	movs	r1, r3
 800317e:	23fa      	movs	r3, #250	@ 0xfa
 8003180:	0098      	lsls	r0, r3, #2
 8003182:	f7fc ffbf 	bl	8000104 <__udivsi3>
 8003186:	0003      	movs	r3, r0
 8003188:	0019      	movs	r1, r3
 800318a:	0020      	movs	r0, r4
 800318c:	f7fc ffba 	bl	8000104 <__udivsi3>
 8003190:	0003      	movs	r3, r0
 8003192:	0018      	movs	r0, r3
 8003194:	f000 fda7 	bl	8003ce6 <HAL_SYSTICK_Config>
 8003198:	1e03      	subs	r3, r0, #0
 800319a:	d112      	bne.n	80031c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d80a      	bhi.n	80031b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	2301      	movs	r3, #1
 80031a6:	425b      	negs	r3, r3
 80031a8:	2200      	movs	r2, #0
 80031aa:	0018      	movs	r0, r3
 80031ac:	f000 fd86 	bl	8003cbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031b0:	4b0e      	ldr	r3, [pc, #56]	@ (80031ec <HAL_InitTick+0x90>)
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	e00d      	b.n	80031d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80031b8:	230f      	movs	r3, #15
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
 80031c0:	e008      	b.n	80031d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031c2:	230f      	movs	r3, #15
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
 80031ca:	e003      	b.n	80031d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031cc:	230f      	movs	r3, #15
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	2201      	movs	r2, #1
 80031d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80031d4:	230f      	movs	r3, #15
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	781b      	ldrb	r3, [r3, #0]
}
 80031da:	0018      	movs	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	b005      	add	sp, #20
 80031e0:	bd90      	pop	{r4, r7, pc}
 80031e2:	46c0      	nop			@ (mov r8, r8)
 80031e4:	20000008 	.word	0x20000008
 80031e8:	20000000 	.word	0x20000000
 80031ec:	20000004 	.word	0x20000004

080031f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031f4:	4b05      	ldr	r3, [pc, #20]	@ (800320c <HAL_IncTick+0x1c>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	001a      	movs	r2, r3
 80031fa:	4b05      	ldr	r3, [pc, #20]	@ (8003210 <HAL_IncTick+0x20>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	18d2      	adds	r2, r2, r3
 8003200:	4b03      	ldr	r3, [pc, #12]	@ (8003210 <HAL_IncTick+0x20>)
 8003202:	601a      	str	r2, [r3, #0]
}
 8003204:	46c0      	nop			@ (mov r8, r8)
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	46c0      	nop			@ (mov r8, r8)
 800320c:	20000008 	.word	0x20000008
 8003210:	20000214 	.word	0x20000214

08003214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  return uwTick;
 8003218:	4b02      	ldr	r3, [pc, #8]	@ (8003224 <HAL_GetTick+0x10>)
 800321a:	681b      	ldr	r3, [r3, #0]
}
 800321c:	0018      	movs	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	20000214 	.word	0x20000214

08003228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003230:	f7ff fff0 	bl	8003214 <HAL_GetTick>
 8003234:	0003      	movs	r3, r0
 8003236:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	3301      	adds	r3, #1
 8003240:	d005      	beq.n	800324e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003242:	4b0a      	ldr	r3, [pc, #40]	@ (800326c <HAL_Delay+0x44>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	001a      	movs	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	189b      	adds	r3, r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800324e:	46c0      	nop			@ (mov r8, r8)
 8003250:	f7ff ffe0 	bl	8003214 <HAL_GetTick>
 8003254:	0002      	movs	r2, r0
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	429a      	cmp	r2, r3
 800325e:	d8f7      	bhi.n	8003250 <HAL_Delay+0x28>
  {
  }
}
 8003260:	46c0      	nop			@ (mov r8, r8)
 8003262:	46c0      	nop			@ (mov r8, r8)
 8003264:	46bd      	mov	sp, r7
 8003266:	b004      	add	sp, #16
 8003268:	bd80      	pop	{r7, pc}
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	20000008 	.word	0x20000008

08003270 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003278:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a06      	ldr	r2, [pc, #24]	@ (8003298 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800327e:	4013      	ands	r3, r2
 8003280:	0019      	movs	r1, r3
 8003282:	4b04      	ldr	r3, [pc, #16]	@ (8003294 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	430a      	orrs	r2, r1
 8003288:	601a      	str	r2, [r3, #0]
}
 800328a:	46c0      	nop			@ (mov r8, r8)
 800328c:	46bd      	mov	sp, r7
 800328e:	b002      	add	sp, #8
 8003290:	bd80      	pop	{r7, pc}
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	40010000 	.word	0x40010000
 8003298:	fffff9ff 	.word	0xfffff9ff

0800329c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a05      	ldr	r2, [pc, #20]	@ (80032c0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80032ac:	401a      	ands	r2, r3
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	601a      	str	r2, [r3, #0]
}
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b002      	add	sp, #8
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	46c0      	nop			@ (mov r8, r8)
 80032c0:	fe3fffff 	.word	0xfe3fffff

080032c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	23e0      	movs	r3, #224	@ 0xe0
 80032d2:	045b      	lsls	r3, r3, #17
 80032d4:	4013      	ands	r3, r2
}
 80032d6:	0018      	movs	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	b002      	add	sp, #8
 80032dc:	bd80      	pop	{r7, pc}

080032de <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b084      	sub	sp, #16
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	60f8      	str	r0, [r7, #12]
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	2104      	movs	r1, #4
 80032f2:	400a      	ands	r2, r1
 80032f4:	2107      	movs	r1, #7
 80032f6:	4091      	lsls	r1, r2
 80032f8:	000a      	movs	r2, r1
 80032fa:	43d2      	mvns	r2, r2
 80032fc:	401a      	ands	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2104      	movs	r1, #4
 8003302:	400b      	ands	r3, r1
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4099      	lsls	r1, r3
 8003308:	000b      	movs	r3, r1
 800330a:	431a      	orrs	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003310:	46c0      	nop			@ (mov r8, r8)
 8003312:	46bd      	mov	sp, r7
 8003314:	b004      	add	sp, #16
 8003316:	bd80      	pop	{r7, pc}

08003318 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	2104      	movs	r1, #4
 800332a:	400a      	ands	r2, r1
 800332c:	2107      	movs	r1, #7
 800332e:	4091      	lsls	r1, r2
 8003330:	000a      	movs	r2, r1
 8003332:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2104      	movs	r1, #4
 8003338:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800333a:	40da      	lsrs	r2, r3
 800333c:	0013      	movs	r3, r2
}
 800333e:	0018      	movs	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	b002      	add	sp, #8
 8003344:	bd80      	pop	{r7, pc}

08003346 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	211f      	movs	r1, #31
 800335a:	400a      	ands	r2, r1
 800335c:	210f      	movs	r1, #15
 800335e:	4091      	lsls	r1, r2
 8003360:	000a      	movs	r2, r1
 8003362:	43d2      	mvns	r2, r2
 8003364:	401a      	ands	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	0e9b      	lsrs	r3, r3, #26
 800336a:	210f      	movs	r1, #15
 800336c:	4019      	ands	r1, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	201f      	movs	r0, #31
 8003372:	4003      	ands	r3, r0
 8003374:	4099      	lsls	r1, r3
 8003376:	000b      	movs	r3, r1
 8003378:	431a      	orrs	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800337e:	46c0      	nop			@ (mov r8, r8)
 8003380:	46bd      	mov	sp, r7
 8003382:	b004      	add	sp, #16
 8003384:	bd80      	pop	{r7, pc}

08003386 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	035b      	lsls	r3, r3, #13
 8003398:	0b5b      	lsrs	r3, r3, #13
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033a0:	46c0      	nop			@ (mov r8, r8)
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b002      	add	sp, #8
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	0352      	lsls	r2, r2, #13
 80033ba:	0b52      	lsrs	r2, r2, #13
 80033bc:	43d2      	mvns	r2, r2
 80033be:	401a      	ands	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033c4:	46c0      	nop			@ (mov r8, r8)
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b002      	add	sp, #8
 80033ca:	bd80      	pop	{r7, pc}

080033cc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	0212      	lsls	r2, r2, #8
 80033e0:	43d2      	mvns	r2, r2
 80033e2:	401a      	ands	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	400b      	ands	r3, r1
 80033ec:	4904      	ldr	r1, [pc, #16]	@ (8003400 <LL_ADC_SetChannelSamplingTime+0x34>)
 80033ee:	400b      	ands	r3, r1
 80033f0:	431a      	orrs	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80033f6:	46c0      	nop			@ (mov r8, r8)
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b004      	add	sp, #16
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	46c0      	nop			@ (mov r8, r8)
 8003400:	07ffff00 	.word	0x07ffff00

08003404 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	4a05      	ldr	r2, [pc, #20]	@ (8003428 <LL_ADC_EnableInternalRegulator+0x24>)
 8003412:	4013      	ands	r3, r2
 8003414:	2280      	movs	r2, #128	@ 0x80
 8003416:	0552      	lsls	r2, r2, #21
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800341e:	46c0      	nop			@ (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	b002      	add	sp, #8
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	6fffffe8 	.word	0x6fffffe8

0800342c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	2380      	movs	r3, #128	@ 0x80
 800343a:	055b      	lsls	r3, r3, #21
 800343c:	401a      	ands	r2, r3
 800343e:	2380      	movs	r3, #128	@ 0x80
 8003440:	055b      	lsls	r3, r3, #21
 8003442:	429a      	cmp	r2, r3
 8003444:	d101      	bne.n	800344a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800344a:	2300      	movs	r3, #0
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b002      	add	sp, #8
 8003452:	bd80      	pop	{r7, pc}

08003454 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2201      	movs	r2, #1
 8003462:	4013      	ands	r3, r2
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <LL_ADC_IsEnabled+0x18>
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <LL_ADC_IsEnabled+0x1a>
 800346c:	2300      	movs	r3, #0
}
 800346e:	0018      	movs	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	b002      	add	sp, #8
 8003474:	bd80      	pop	{r7, pc}

08003476 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2204      	movs	r2, #4
 8003484:	4013      	ands	r3, r2
 8003486:	2b04      	cmp	r3, #4
 8003488:	d101      	bne.n	800348e <LL_ADC_REG_IsConversionOngoing+0x18>
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800348e:	2300      	movs	r3, #0
}
 8003490:	0018      	movs	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	b002      	add	sp, #8
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034a0:	231f      	movs	r3, #31
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e17f      	b.n	80037be <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7ff fc9f 	bl	8002e0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2254      	movs	r2, #84	@ 0x54
 80034d8:	2100      	movs	r1, #0
 80034da:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	0018      	movs	r0, r3
 80034e2:	f7ff ffa3 	bl	800342c <LL_ADC_IsInternalRegulatorEnabled>
 80034e6:	1e03      	subs	r3, r0, #0
 80034e8:	d115      	bne.n	8003516 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	0018      	movs	r0, r3
 80034f0:	f7ff ff88 	bl	8003404 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034f4:	4bb4      	ldr	r3, [pc, #720]	@ (80037c8 <HAL_ADC_Init+0x330>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	49b4      	ldr	r1, [pc, #720]	@ (80037cc <HAL_ADC_Init+0x334>)
 80034fa:	0018      	movs	r0, r3
 80034fc:	f7fc fe02 	bl	8000104 <__udivsi3>
 8003500:	0003      	movs	r3, r0
 8003502:	3301      	adds	r3, #1
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003508:	e002      	b.n	8003510 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3b01      	subs	r3, #1
 800350e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f9      	bne.n	800350a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	0018      	movs	r0, r3
 800351c:	f7ff ff86 	bl	800342c <LL_ADC_IsInternalRegulatorEnabled>
 8003520:	1e03      	subs	r3, r0, #0
 8003522:	d10f      	bne.n	8003544 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003528:	2210      	movs	r2, #16
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003534:	2201      	movs	r2, #1
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800353c:	231f      	movs	r3, #31
 800353e:	18fb      	adds	r3, r7, r3
 8003540:	2201      	movs	r2, #1
 8003542:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	0018      	movs	r0, r3
 800354a:	f7ff ff94 	bl	8003476 <LL_ADC_REG_IsConversionOngoing>
 800354e:	0003      	movs	r3, r0
 8003550:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003556:	2210      	movs	r2, #16
 8003558:	4013      	ands	r3, r2
 800355a:	d000      	beq.n	800355e <HAL_ADC_Init+0xc6>
 800355c:	e122      	b.n	80037a4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d000      	beq.n	8003566 <HAL_ADC_Init+0xce>
 8003564:	e11e      	b.n	80037a4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356a:	4a99      	ldr	r2, [pc, #612]	@ (80037d0 <HAL_ADC_Init+0x338>)
 800356c:	4013      	ands	r3, r2
 800356e:	2202      	movs	r2, #2
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	0018      	movs	r0, r3
 800357c:	f7ff ff6a 	bl	8003454 <LL_ADC_IsEnabled>
 8003580:	1e03      	subs	r3, r0, #0
 8003582:	d000      	beq.n	8003586 <HAL_ADC_Init+0xee>
 8003584:	e0ad      	b.n	80036e2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	7e1b      	ldrb	r3, [r3, #24]
 800358e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003590:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	7e5b      	ldrb	r3, [r3, #25]
 8003596:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003598:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	7e9b      	ldrb	r3, [r3, #26]
 800359e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80035a0:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <HAL_ADC_Init+0x118>
 80035aa:	2380      	movs	r3, #128	@ 0x80
 80035ac:	015b      	lsls	r3, r3, #5
 80035ae:	e000      	b.n	80035b2 <HAL_ADC_Init+0x11a>
 80035b0:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80035b2:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80035b8:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	da04      	bge.n	80035cc <HAL_ADC_Init+0x134>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	085b      	lsrs	r3, r3, #1
 80035ca:	e001      	b.n	80035d0 <HAL_ADC_Init+0x138>
 80035cc:	2380      	movs	r3, #128	@ 0x80
 80035ce:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80035d0:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	212c      	movs	r1, #44	@ 0x2c
 80035d6:	5c5b      	ldrb	r3, [r3, r1]
 80035d8:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80035da:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2220      	movs	r2, #32
 80035e6:	5c9b      	ldrb	r3, [r3, r2]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d115      	bne.n	8003618 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	7e9b      	ldrb	r3, [r3, #26]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d105      	bne.n	8003600 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2280      	movs	r2, #128	@ 0x80
 80035f8:	0252      	lsls	r2, r2, #9
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	e00b      	b.n	8003618 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003604:	2220      	movs	r2, #32
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003610:	2201      	movs	r2, #1
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003624:	23e0      	movs	r3, #224	@ 0xe0
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800362e:	4313      	orrs	r3, r2
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a65      	ldr	r2, [pc, #404]	@ (80037d4 <HAL_ADC_Init+0x33c>)
 800363e:	4013      	ands	r3, r2
 8003640:	0019      	movs	r1, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	430a      	orrs	r2, r1
 800364a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	0f9b      	lsrs	r3, r3, #30
 8003652:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003658:	4313      	orrs	r3, r2
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	223c      	movs	r2, #60	@ 0x3c
 8003664:	5c9b      	ldrb	r3, [r3, r2]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d111      	bne.n	800368e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	0f9b      	lsrs	r3, r3, #30
 8003670:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003676:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800367c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8003682:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	2201      	movs	r2, #1
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	4a50      	ldr	r2, [pc, #320]	@ (80037d8 <HAL_ADC_Init+0x340>)
 8003696:	4013      	ands	r3, r2
 8003698:	0019      	movs	r1, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	23c0      	movs	r3, #192	@ 0xc0
 80036aa:	061b      	lsls	r3, r3, #24
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d018      	beq.n	80036e2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80036b4:	2380      	movs	r3, #128	@ 0x80
 80036b6:	05db      	lsls	r3, r3, #23
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d012      	beq.n	80036e2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80036c0:	2380      	movs	r3, #128	@ 0x80
 80036c2:	061b      	lsls	r3, r3, #24
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d00c      	beq.n	80036e2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80036c8:	4b44      	ldr	r3, [pc, #272]	@ (80037dc <HAL_ADC_Init+0x344>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a44      	ldr	r2, [pc, #272]	@ (80037e0 <HAL_ADC_Init+0x348>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	0019      	movs	r1, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	23f0      	movs	r3, #240	@ 0xf0
 80036d8:	039b      	lsls	r3, r3, #14
 80036da:	401a      	ands	r2, r3
 80036dc:	4b3f      	ldr	r3, [pc, #252]	@ (80037dc <HAL_ADC_Init+0x344>)
 80036de:	430a      	orrs	r2, r1
 80036e0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ea:	001a      	movs	r2, r3
 80036ec:	2100      	movs	r1, #0
 80036ee:	f7ff fdf6 	bl	80032de <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fa:	493a      	ldr	r1, [pc, #232]	@ (80037e4 <HAL_ADC_Init+0x34c>)
 80036fc:	001a      	movs	r2, r3
 80036fe:	f7ff fdee 	bl	80032de <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2110      	movs	r1, #16
 8003716:	4249      	negs	r1, r1
 8003718:	430a      	orrs	r2, r1
 800371a:	629a      	str	r2, [r3, #40]	@ 0x28
 800371c:	e018      	b.n	8003750 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	2380      	movs	r3, #128	@ 0x80
 8003724:	039b      	lsls	r3, r3, #14
 8003726:	429a      	cmp	r2, r3
 8003728:	d112      	bne.n	8003750 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	3b01      	subs	r3, #1
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	221c      	movs	r2, #28
 800373a:	4013      	ands	r3, r2
 800373c:	2210      	movs	r2, #16
 800373e:	4252      	negs	r2, r2
 8003740:	409a      	lsls	r2, r3
 8003742:	0011      	movs	r1, r2
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2100      	movs	r1, #0
 8003756:	0018      	movs	r0, r3
 8003758:	f7ff fdde 	bl	8003318 <LL_ADC_GetSamplingTimeCommonChannels>
 800375c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003762:	429a      	cmp	r2, r3
 8003764:	d10b      	bne.n	800377e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003770:	2203      	movs	r2, #3
 8003772:	4393      	bics	r3, r2
 8003774:	2201      	movs	r2, #1
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800377c:	e01c      	b.n	80037b8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003782:	2212      	movs	r2, #18
 8003784:	4393      	bics	r3, r2
 8003786:	2210      	movs	r2, #16
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003792:	2201      	movs	r2, #1
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800379a:	231f      	movs	r3, #31
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	2201      	movs	r2, #1
 80037a0:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80037a2:	e009      	b.n	80037b8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a8:	2210      	movs	r2, #16
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80037b0:	231f      	movs	r3, #31
 80037b2:	18fb      	adds	r3, r7, r3
 80037b4:	2201      	movs	r2, #1
 80037b6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80037b8:	231f      	movs	r3, #31
 80037ba:	18fb      	adds	r3, r7, r3
 80037bc:	781b      	ldrb	r3, [r3, #0]
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b008      	add	sp, #32
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	20000000 	.word	0x20000000
 80037cc:	00030d40 	.word	0x00030d40
 80037d0:	fffffefd 	.word	0xfffffefd
 80037d4:	ffde0201 	.word	0xffde0201
 80037d8:	1ffffc02 	.word	0x1ffffc02
 80037dc:	40012708 	.word	0x40012708
 80037e0:	ffc3ffff 	.word	0xffc3ffff
 80037e4:	07ffff04 	.word	0x07ffff04

080037e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f2:	2317      	movs	r3, #23
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2254      	movs	r2, #84	@ 0x54
 8003802:	5c9b      	ldrb	r3, [r3, r2]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_ADC_ConfigChannel+0x24>
 8003808:	2302      	movs	r3, #2
 800380a:	e1c0      	b.n	8003b8e <HAL_ADC_ConfigChannel+0x3a6>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2254      	movs	r2, #84	@ 0x54
 8003810:	2101      	movs	r1, #1
 8003812:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	0018      	movs	r0, r3
 800381a:	f7ff fe2c 	bl	8003476 <LL_ADC_REG_IsConversionOngoing>
 800381e:	1e03      	subs	r3, r0, #0
 8003820:	d000      	beq.n	8003824 <HAL_ADC_ConfigChannel+0x3c>
 8003822:	e1a3      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d100      	bne.n	800382e <HAL_ADC_ConfigChannel+0x46>
 800382c:	e143      	b.n	8003ab6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	2380      	movs	r3, #128	@ 0x80
 8003834:	061b      	lsls	r3, r3, #24
 8003836:	429a      	cmp	r2, r3
 8003838:	d004      	beq.n	8003844 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800383e:	4ac1      	ldr	r2, [pc, #772]	@ (8003b44 <HAL_ADC_ConfigChannel+0x35c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d108      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	0019      	movs	r1, r3
 800384e:	0010      	movs	r0, r2
 8003850:	f7ff fd99 	bl	8003386 <LL_ADC_REG_SetSequencerChAdd>
 8003854:	e0c9      	b.n	80039ea <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	211f      	movs	r1, #31
 8003860:	400b      	ands	r3, r1
 8003862:	210f      	movs	r1, #15
 8003864:	4099      	lsls	r1, r3
 8003866:	000b      	movs	r3, r1
 8003868:	43db      	mvns	r3, r3
 800386a:	4013      	ands	r3, r2
 800386c:	0019      	movs	r1, r3
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	035b      	lsls	r3, r3, #13
 8003874:	0b5b      	lsrs	r3, r3, #13
 8003876:	d105      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x9c>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	0e9b      	lsrs	r3, r3, #26
 800387e:	221f      	movs	r2, #31
 8003880:	4013      	ands	r3, r2
 8003882:	e098      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1ce>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2201      	movs	r2, #1
 800388a:	4013      	ands	r3, r2
 800388c:	d000      	beq.n	8003890 <HAL_ADC_ConfigChannel+0xa8>
 800388e:	e091      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x1cc>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2202      	movs	r2, #2
 8003896:	4013      	ands	r3, r2
 8003898:	d000      	beq.n	800389c <HAL_ADC_ConfigChannel+0xb4>
 800389a:	e089      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x1c8>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2204      	movs	r2, #4
 80038a2:	4013      	ands	r3, r2
 80038a4:	d000      	beq.n	80038a8 <HAL_ADC_ConfigChannel+0xc0>
 80038a6:	e081      	b.n	80039ac <HAL_ADC_ConfigChannel+0x1c4>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2208      	movs	r2, #8
 80038ae:	4013      	ands	r3, r2
 80038b0:	d000      	beq.n	80038b4 <HAL_ADC_ConfigChannel+0xcc>
 80038b2:	e079      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x1c0>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2210      	movs	r2, #16
 80038ba:	4013      	ands	r3, r2
 80038bc:	d000      	beq.n	80038c0 <HAL_ADC_ConfigChannel+0xd8>
 80038be:	e071      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x1bc>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2220      	movs	r2, #32
 80038c6:	4013      	ands	r3, r2
 80038c8:	d000      	beq.n	80038cc <HAL_ADC_ConfigChannel+0xe4>
 80038ca:	e069      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x1b8>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2240      	movs	r2, #64	@ 0x40
 80038d2:	4013      	ands	r3, r2
 80038d4:	d000      	beq.n	80038d8 <HAL_ADC_ConfigChannel+0xf0>
 80038d6:	e061      	b.n	800399c <HAL_ADC_ConfigChannel+0x1b4>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2280      	movs	r2, #128	@ 0x80
 80038de:	4013      	ands	r3, r2
 80038e0:	d000      	beq.n	80038e4 <HAL_ADC_ConfigChannel+0xfc>
 80038e2:	e059      	b.n	8003998 <HAL_ADC_ConfigChannel+0x1b0>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	2380      	movs	r3, #128	@ 0x80
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	4013      	ands	r3, r2
 80038ee:	d151      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x1ac>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	2380      	movs	r3, #128	@ 0x80
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4013      	ands	r3, r2
 80038fa:	d149      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x1a8>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	2380      	movs	r3, #128	@ 0x80
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	4013      	ands	r3, r2
 8003906:	d141      	bne.n	800398c <HAL_ADC_ConfigChannel+0x1a4>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	2380      	movs	r3, #128	@ 0x80
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	4013      	ands	r3, r2
 8003912:	d139      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x1a0>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	2380      	movs	r3, #128	@ 0x80
 800391a:	015b      	lsls	r3, r3, #5
 800391c:	4013      	ands	r3, r2
 800391e:	d131      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x19c>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	2380      	movs	r3, #128	@ 0x80
 8003926:	019b      	lsls	r3, r3, #6
 8003928:	4013      	ands	r3, r2
 800392a:	d129      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x198>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	2380      	movs	r3, #128	@ 0x80
 8003932:	01db      	lsls	r3, r3, #7
 8003934:	4013      	ands	r3, r2
 8003936:	d121      	bne.n	800397c <HAL_ADC_ConfigChannel+0x194>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	2380      	movs	r3, #128	@ 0x80
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	4013      	ands	r3, r2
 8003942:	d119      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x190>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	2380      	movs	r3, #128	@ 0x80
 800394a:	025b      	lsls	r3, r3, #9
 800394c:	4013      	ands	r3, r2
 800394e:	d111      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x18c>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	2380      	movs	r3, #128	@ 0x80
 8003956:	029b      	lsls	r3, r3, #10
 8003958:	4013      	ands	r3, r2
 800395a:	d109      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x188>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	2380      	movs	r3, #128	@ 0x80
 8003962:	02db      	lsls	r3, r3, #11
 8003964:	4013      	ands	r3, r2
 8003966:	d001      	beq.n	800396c <HAL_ADC_ConfigChannel+0x184>
 8003968:	2312      	movs	r3, #18
 800396a:	e024      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1ce>
 800396c:	2300      	movs	r3, #0
 800396e:	e022      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1ce>
 8003970:	2311      	movs	r3, #17
 8003972:	e020      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1ce>
 8003974:	2310      	movs	r3, #16
 8003976:	e01e      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1ce>
 8003978:	230f      	movs	r3, #15
 800397a:	e01c      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1ce>
 800397c:	230e      	movs	r3, #14
 800397e:	e01a      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1ce>
 8003980:	230d      	movs	r3, #13
 8003982:	e018      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1ce>
 8003984:	230c      	movs	r3, #12
 8003986:	e016      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1ce>
 8003988:	230b      	movs	r3, #11
 800398a:	e014      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1ce>
 800398c:	230a      	movs	r3, #10
 800398e:	e012      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1ce>
 8003990:	2309      	movs	r3, #9
 8003992:	e010      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1ce>
 8003994:	2308      	movs	r3, #8
 8003996:	e00e      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1ce>
 8003998:	2307      	movs	r3, #7
 800399a:	e00c      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1ce>
 800399c:	2306      	movs	r3, #6
 800399e:	e00a      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1ce>
 80039a0:	2305      	movs	r3, #5
 80039a2:	e008      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1ce>
 80039a4:	2304      	movs	r3, #4
 80039a6:	e006      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1ce>
 80039a8:	2303      	movs	r3, #3
 80039aa:	e004      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1ce>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e002      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1ce>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1ce>
 80039b4:	2300      	movs	r3, #0
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	6852      	ldr	r2, [r2, #4]
 80039ba:	201f      	movs	r0, #31
 80039bc:	4002      	ands	r2, r0
 80039be:	4093      	lsls	r3, r2
 80039c0:	000a      	movs	r2, r1
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	089b      	lsrs	r3, r3, #2
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d808      	bhi.n	80039ea <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	6859      	ldr	r1, [r3, #4]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	001a      	movs	r2, r3
 80039e6:	f7ff fcae 	bl	8003346 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6819      	ldr	r1, [r3, #0]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	001a      	movs	r2, r3
 80039f8:	f7ff fce8 	bl	80033cc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	db00      	blt.n	8003a06 <HAL_ADC_ConfigChannel+0x21e>
 8003a04:	e0bc      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a06:	4b50      	ldr	r3, [pc, #320]	@ (8003b48 <HAL_ADC_ConfigChannel+0x360>)
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f7ff fc5b 	bl	80032c4 <LL_ADC_GetCommonPathInternalCh>
 8003a0e:	0003      	movs	r3, r0
 8003a10:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a4d      	ldr	r2, [pc, #308]	@ (8003b4c <HAL_ADC_ConfigChannel+0x364>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d122      	bne.n	8003a62 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	2380      	movs	r3, #128	@ 0x80
 8003a20:	041b      	lsls	r3, r3, #16
 8003a22:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a24:	d11d      	bne.n	8003a62 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2280      	movs	r2, #128	@ 0x80
 8003a2a:	0412      	lsls	r2, r2, #16
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	4a46      	ldr	r2, [pc, #280]	@ (8003b48 <HAL_ADC_ConfigChannel+0x360>)
 8003a30:	0019      	movs	r1, r3
 8003a32:	0010      	movs	r0, r2
 8003a34:	f7ff fc32 	bl	800329c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a38:	4b45      	ldr	r3, [pc, #276]	@ (8003b50 <HAL_ADC_ConfigChannel+0x368>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4945      	ldr	r1, [pc, #276]	@ (8003b54 <HAL_ADC_ConfigChannel+0x36c>)
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f7fc fb60 	bl	8000104 <__udivsi3>
 8003a44:	0003      	movs	r3, r0
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	0013      	movs	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	189b      	adds	r3, r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a52:	e002      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f9      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a60:	e08e      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a3c      	ldr	r2, [pc, #240]	@ (8003b58 <HAL_ADC_ConfigChannel+0x370>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d10e      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	2380      	movs	r3, #128	@ 0x80
 8003a70:	045b      	lsls	r3, r3, #17
 8003a72:	4013      	ands	r3, r2
 8003a74:	d109      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2280      	movs	r2, #128	@ 0x80
 8003a7a:	0452      	lsls	r2, r2, #17
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	4a32      	ldr	r2, [pc, #200]	@ (8003b48 <HAL_ADC_ConfigChannel+0x360>)
 8003a80:	0019      	movs	r1, r3
 8003a82:	0010      	movs	r0, r2
 8003a84:	f7ff fc0a 	bl	800329c <LL_ADC_SetCommonPathInternalCh>
 8003a88:	e07a      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a33      	ldr	r2, [pc, #204]	@ (8003b5c <HAL_ADC_ConfigChannel+0x374>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d000      	beq.n	8003a96 <HAL_ADC_ConfigChannel+0x2ae>
 8003a94:	e074      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	2380      	movs	r3, #128	@ 0x80
 8003a9a:	03db      	lsls	r3, r3, #15
 8003a9c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003a9e:	d000      	beq.n	8003aa2 <HAL_ADC_ConfigChannel+0x2ba>
 8003aa0:	e06e      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2280      	movs	r2, #128	@ 0x80
 8003aa6:	03d2      	lsls	r2, r2, #15
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	4a27      	ldr	r2, [pc, #156]	@ (8003b48 <HAL_ADC_ConfigChannel+0x360>)
 8003aac:	0019      	movs	r1, r3
 8003aae:	0010      	movs	r0, r2
 8003ab0:	f7ff fbf4 	bl	800329c <LL_ADC_SetCommonPathInternalCh>
 8003ab4:	e064      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	2380      	movs	r3, #128	@ 0x80
 8003abc:	061b      	lsls	r3, r3, #24
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d004      	beq.n	8003acc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8003b44 <HAL_ADC_ConfigChannel+0x35c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d107      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	0019      	movs	r1, r3
 8003ad6:	0010      	movs	r0, r2
 8003ad8:	f7ff fc66 	bl	80033a8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	da4d      	bge.n	8003b80 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ae4:	4b18      	ldr	r3, [pc, #96]	@ (8003b48 <HAL_ADC_ConfigChannel+0x360>)
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f7ff fbec 	bl	80032c4 <LL_ADC_GetCommonPathInternalCh>
 8003aec:	0003      	movs	r3, r0
 8003aee:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a15      	ldr	r2, [pc, #84]	@ (8003b4c <HAL_ADC_ConfigChannel+0x364>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d108      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4a18      	ldr	r2, [pc, #96]	@ (8003b60 <HAL_ADC_ConfigChannel+0x378>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	4a11      	ldr	r2, [pc, #68]	@ (8003b48 <HAL_ADC_ConfigChannel+0x360>)
 8003b02:	0019      	movs	r1, r3
 8003b04:	0010      	movs	r0, r2
 8003b06:	f7ff fbc9 	bl	800329c <LL_ADC_SetCommonPathInternalCh>
 8003b0a:	e039      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a11      	ldr	r2, [pc, #68]	@ (8003b58 <HAL_ADC_ConfigChannel+0x370>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d108      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4a12      	ldr	r2, [pc, #72]	@ (8003b64 <HAL_ADC_ConfigChannel+0x37c>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b48 <HAL_ADC_ConfigChannel+0x360>)
 8003b1e:	0019      	movs	r1, r3
 8003b20:	0010      	movs	r0, r2
 8003b22:	f7ff fbbb 	bl	800329c <LL_ADC_SetCommonPathInternalCh>
 8003b26:	e02b      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b5c <HAL_ADC_ConfigChannel+0x374>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d126      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4a0c      	ldr	r2, [pc, #48]	@ (8003b68 <HAL_ADC_ConfigChannel+0x380>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	4a03      	ldr	r2, [pc, #12]	@ (8003b48 <HAL_ADC_ConfigChannel+0x360>)
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	0010      	movs	r0, r2
 8003b3e:	f7ff fbad 	bl	800329c <LL_ADC_SetCommonPathInternalCh>
 8003b42:	e01d      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x398>
 8003b44:	80000004 	.word	0x80000004
 8003b48:	40012708 	.word	0x40012708
 8003b4c:	b0001000 	.word	0xb0001000
 8003b50:	20000000 	.word	0x20000000
 8003b54:	00030d40 	.word	0x00030d40
 8003b58:	b8004000 	.word	0xb8004000
 8003b5c:	b4002000 	.word	0xb4002000
 8003b60:	ff7fffff 	.word	0xff7fffff
 8003b64:	feffffff 	.word	0xfeffffff
 8003b68:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b70:	2220      	movs	r2, #32
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003b78:	2317      	movs	r3, #23
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2254      	movs	r2, #84	@ 0x54
 8003b84:	2100      	movs	r1, #0
 8003b86:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003b88:	2317      	movs	r3, #23
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	781b      	ldrb	r3, [r3, #0]
}
 8003b8e:	0018      	movs	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b006      	add	sp, #24
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			@ (mov r8, r8)

08003b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	0002      	movs	r2, r0
 8003ba0:	6039      	str	r1, [r7, #0]
 8003ba2:	1dfb      	adds	r3, r7, #7
 8003ba4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ba6:	1dfb      	adds	r3, r7, #7
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b7f      	cmp	r3, #127	@ 0x7f
 8003bac:	d828      	bhi.n	8003c00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bae:	4a2f      	ldr	r2, [pc, #188]	@ (8003c6c <__NVIC_SetPriority+0xd4>)
 8003bb0:	1dfb      	adds	r3, r7, #7
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	b25b      	sxtb	r3, r3
 8003bb6:	089b      	lsrs	r3, r3, #2
 8003bb8:	33c0      	adds	r3, #192	@ 0xc0
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	589b      	ldr	r3, [r3, r2]
 8003bbe:	1dfa      	adds	r2, r7, #7
 8003bc0:	7812      	ldrb	r2, [r2, #0]
 8003bc2:	0011      	movs	r1, r2
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	00d2      	lsls	r2, r2, #3
 8003bca:	21ff      	movs	r1, #255	@ 0xff
 8003bcc:	4091      	lsls	r1, r2
 8003bce:	000a      	movs	r2, r1
 8003bd0:	43d2      	mvns	r2, r2
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	019b      	lsls	r3, r3, #6
 8003bda:	22ff      	movs	r2, #255	@ 0xff
 8003bdc:	401a      	ands	r2, r3
 8003bde:	1dfb      	adds	r3, r7, #7
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	0018      	movs	r0, r3
 8003be4:	2303      	movs	r3, #3
 8003be6:	4003      	ands	r3, r0
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bec:	481f      	ldr	r0, [pc, #124]	@ (8003c6c <__NVIC_SetPriority+0xd4>)
 8003bee:	1dfb      	adds	r3, r7, #7
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	b25b      	sxtb	r3, r3
 8003bf4:	089b      	lsrs	r3, r3, #2
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	33c0      	adds	r3, #192	@ 0xc0
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003bfe:	e031      	b.n	8003c64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c00:	4a1b      	ldr	r2, [pc, #108]	@ (8003c70 <__NVIC_SetPriority+0xd8>)
 8003c02:	1dfb      	adds	r3, r7, #7
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	0019      	movs	r1, r3
 8003c08:	230f      	movs	r3, #15
 8003c0a:	400b      	ands	r3, r1
 8003c0c:	3b08      	subs	r3, #8
 8003c0e:	089b      	lsrs	r3, r3, #2
 8003c10:	3306      	adds	r3, #6
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	18d3      	adds	r3, r2, r3
 8003c16:	3304      	adds	r3, #4
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	1dfa      	adds	r2, r7, #7
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	0011      	movs	r1, r2
 8003c20:	2203      	movs	r2, #3
 8003c22:	400a      	ands	r2, r1
 8003c24:	00d2      	lsls	r2, r2, #3
 8003c26:	21ff      	movs	r1, #255	@ 0xff
 8003c28:	4091      	lsls	r1, r2
 8003c2a:	000a      	movs	r2, r1
 8003c2c:	43d2      	mvns	r2, r2
 8003c2e:	401a      	ands	r2, r3
 8003c30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	019b      	lsls	r3, r3, #6
 8003c36:	22ff      	movs	r2, #255	@ 0xff
 8003c38:	401a      	ands	r2, r3
 8003c3a:	1dfb      	adds	r3, r7, #7
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	0018      	movs	r0, r3
 8003c40:	2303      	movs	r3, #3
 8003c42:	4003      	ands	r3, r0
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c48:	4809      	ldr	r0, [pc, #36]	@ (8003c70 <__NVIC_SetPriority+0xd8>)
 8003c4a:	1dfb      	adds	r3, r7, #7
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	001c      	movs	r4, r3
 8003c50:	230f      	movs	r3, #15
 8003c52:	4023      	ands	r3, r4
 8003c54:	3b08      	subs	r3, #8
 8003c56:	089b      	lsrs	r3, r3, #2
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	3306      	adds	r3, #6
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	18c3      	adds	r3, r0, r3
 8003c60:	3304      	adds	r3, #4
 8003c62:	601a      	str	r2, [r3, #0]
}
 8003c64:	46c0      	nop			@ (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b003      	add	sp, #12
 8003c6a:	bd90      	pop	{r4, r7, pc}
 8003c6c:	e000e100 	.word	0xe000e100
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	1e5a      	subs	r2, r3, #1
 8003c80:	2380      	movs	r3, #128	@ 0x80
 8003c82:	045b      	lsls	r3, r3, #17
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d301      	bcc.n	8003c8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e010      	b.n	8003cae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb8 <SysTick_Config+0x44>)
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	3a01      	subs	r2, #1
 8003c92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c94:	2301      	movs	r3, #1
 8003c96:	425b      	negs	r3, r3
 8003c98:	2103      	movs	r1, #3
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f7ff ff7c 	bl	8003b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ca0:	4b05      	ldr	r3, [pc, #20]	@ (8003cb8 <SysTick_Config+0x44>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ca6:	4b04      	ldr	r3, [pc, #16]	@ (8003cb8 <SysTick_Config+0x44>)
 8003ca8:	2207      	movs	r2, #7
 8003caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	0018      	movs	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b002      	add	sp, #8
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	e000e010 	.word	0xe000e010

08003cbc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	210f      	movs	r1, #15
 8003cc8:	187b      	adds	r3, r7, r1
 8003cca:	1c02      	adds	r2, r0, #0
 8003ccc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	187b      	adds	r3, r7, r1
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	b25b      	sxtb	r3, r3
 8003cd6:	0011      	movs	r1, r2
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f7ff ff5d 	bl	8003b98 <__NVIC_SetPriority>
}
 8003cde:	46c0      	nop			@ (mov r8, r8)
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b004      	add	sp, #16
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f7ff ffbf 	bl	8003c74 <SysTick_Config>
 8003cf6:	0003      	movs	r3, r0
}
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b002      	add	sp, #8
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e14e      	b.n	8003fb0 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	225c      	movs	r2, #92	@ 0x5c
 8003d16:	5c9b      	ldrb	r3, [r3, r2]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d107      	bne.n	8003d2e <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	225d      	movs	r2, #93	@ 0x5d
 8003d22:	2100      	movs	r1, #0
 8003d24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f7ff f8b3 	bl	8002e94 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699a      	ldr	r2, [r3, #24]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2110      	movs	r1, #16
 8003d3a:	438a      	bics	r2, r1
 8003d3c:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d3e:	f7ff fa69 	bl	8003214 <HAL_GetTick>
 8003d42:	0003      	movs	r3, r0
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003d46:	e012      	b.n	8003d6e <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003d48:	f7ff fa64 	bl	8003214 <HAL_GetTick>
 8003d4c:	0002      	movs	r2, r0
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b0a      	cmp	r3, #10
 8003d54:	d90b      	bls.n	8003d6e <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	225c      	movs	r2, #92	@ 0x5c
 8003d66:	2103      	movs	r1, #3
 8003d68:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e120      	b.n	8003fb0 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2208      	movs	r2, #8
 8003d76:	4013      	ands	r3, r2
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d0e5      	beq.n	8003d48 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2101      	movs	r1, #1
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d8c:	f7ff fa42 	bl	8003214 <HAL_GetTick>
 8003d90:	0003      	movs	r3, r0
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003d94:	e012      	b.n	8003dbc <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003d96:	f7ff fa3d 	bl	8003214 <HAL_GetTick>
 8003d9a:	0002      	movs	r2, r0
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b0a      	cmp	r3, #10
 8003da2:	d90b      	bls.n	8003dbc <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da8:	2201      	movs	r2, #1
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	225c      	movs	r2, #92	@ 0x5c
 8003db4:	2103      	movs	r1, #3
 8003db6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0f9      	b.n	8003fb0 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d0e6      	beq.n	8003d96 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2102      	movs	r1, #2
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a76      	ldr	r2, [pc, #472]	@ (8003fb8 <HAL_FDCAN_Init+0x2b8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d103      	bne.n	8003dea <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003de2:	4a76      	ldr	r2, [pc, #472]	@ (8003fbc <HAL_FDCAN_Init+0x2bc>)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	7c1b      	ldrb	r3, [r3, #16]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d108      	bne.n	8003e04 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699a      	ldr	r2, [r3, #24]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2140      	movs	r1, #64	@ 0x40
 8003dfe:	438a      	bics	r2, r1
 8003e00:	619a      	str	r2, [r3, #24]
 8003e02:	e007      	b.n	8003e14 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699a      	ldr	r2, [r3, #24]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2140      	movs	r1, #64	@ 0x40
 8003e10:	430a      	orrs	r2, r1
 8003e12:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	7c5b      	ldrb	r3, [r3, #17]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d109      	bne.n	8003e30 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2180      	movs	r1, #128	@ 0x80
 8003e28:	01c9      	lsls	r1, r1, #7
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	619a      	str	r2, [r3, #24]
 8003e2e:	e007      	b.n	8003e40 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4961      	ldr	r1, [pc, #388]	@ (8003fc0 <HAL_FDCAN_Init+0x2c0>)
 8003e3c:	400a      	ands	r2, r1
 8003e3e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	7c9b      	ldrb	r3, [r3, #18]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d108      	bne.n	8003e5a <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	495c      	ldr	r1, [pc, #368]	@ (8003fc4 <HAL_FDCAN_Init+0x2c4>)
 8003e54:	400a      	ands	r2, r1
 8003e56:	619a      	str	r2, [r3, #24]
 8003e58:	e008      	b.n	8003e6c <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699a      	ldr	r2, [r3, #24]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2180      	movs	r1, #128	@ 0x80
 8003e66:	0149      	lsls	r1, r1, #5
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	4a55      	ldr	r2, [pc, #340]	@ (8003fc8 <HAL_FDCAN_Init+0x2c8>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	0019      	movs	r1, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	21a4      	movs	r1, #164	@ 0xa4
 8003e90:	438a      	bics	r2, r1
 8003e92:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691a      	ldr	r2, [r3, #16]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2110      	movs	r1, #16
 8003ea0:	438a      	bics	r2, r1
 8003ea2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d108      	bne.n	8003ebe <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2104      	movs	r1, #4
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	619a      	str	r2, [r3, #24]
 8003ebc:	e02c      	b.n	8003f18 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d028      	beq.n	8003f18 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d01c      	beq.n	8003f08 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699a      	ldr	r2, [r3, #24]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2180      	movs	r1, #128	@ 0x80
 8003eda:	430a      	orrs	r2, r1
 8003edc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2110      	movs	r1, #16
 8003eea:	430a      	orrs	r2, r1
 8003eec:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d110      	bne.n	8003f18 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699a      	ldr	r2, [r3, #24]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2120      	movs	r1, #32
 8003f02:	430a      	orrs	r2, r1
 8003f04:	619a      	str	r2, [r3, #24]
 8003f06:	e007      	b.n	8003f18 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2120      	movs	r1, #32
 8003f14:	430a      	orrs	r2, r1
 8003f16:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	3b01      	subs	r3, #1
 8003f26:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f28:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003f30:	431a      	orrs	r2, r3
 8003f32:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003f40:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f42:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	23c0      	movs	r3, #192	@ 0xc0
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d115      	bne.n	8003f7c <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f54:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003f5e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f64:	3b01      	subs	r3, #1
 8003f66:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	3b01      	subs	r3, #1
 8003f72:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003f78:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003f7a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	22c0      	movs	r2, #192	@ 0xc0
 8003f82:	5899      	ldr	r1, [r3, r2]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	21c0      	movs	r1, #192	@ 0xc0
 8003f90:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	0018      	movs	r0, r3
 8003f96:	f000 f819 	bl	8003fcc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	225c      	movs	r2, #92	@ 0x5c
 8003faa:	2101      	movs	r1, #1
 8003fac:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b004      	add	sp, #16
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40006400 	.word	0x40006400
 8003fbc:	40006500 	.word	0x40006500
 8003fc0:	ffffbfff 	.word	0xffffbfff
 8003fc4:	ffffefff 	.word	0xffffefff
 8003fc8:	fffffcff 	.word	0xfffffcff

08003fcc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8004094 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8003fd6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a2e      	ldr	r2, [pc, #184]	@ (8004098 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d105      	bne.n	8003fee <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	22d4      	movs	r2, #212	@ 0xd4
 8003fe6:	0092      	lsls	r2, r2, #2
 8003fe8:	4694      	mov	ip, r2
 8003fea:	4463      	add	r3, ip
 8003fec:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2280      	movs	r2, #128	@ 0x80
 8003ffa:	589b      	ldr	r3, [r3, r2]
 8003ffc:	4a27      	ldr	r2, [pc, #156]	@ (800409c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8003ffe:	4013      	ands	r3, r2
 8004000:	0019      	movs	r1, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004006:	041a      	lsls	r2, r3, #16
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	2180      	movs	r1, #128	@ 0x80
 8004010:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3370      	adds	r3, #112	@ 0x70
 8004016:	001a      	movs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2280      	movs	r2, #128	@ 0x80
 8004022:	589b      	ldr	r3, [r3, r2]
 8004024:	4a1e      	ldr	r2, [pc, #120]	@ (80040a0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004026:	4013      	ands	r3, r2
 8004028:	0019      	movs	r1, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402e:	061a      	lsls	r2, r3, #24
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	2180      	movs	r1, #128	@ 0x80
 8004038:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	33b0      	adds	r3, #176	@ 0xb0
 800403e:	001a      	movs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	3389      	adds	r3, #137	@ 0x89
 8004048:	33ff      	adds	r3, #255	@ 0xff
 800404a:	001a      	movs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2298      	movs	r2, #152	@ 0x98
 8004054:	0092      	lsls	r2, r2, #2
 8004056:	189a      	adds	r2, r3, r2
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	229e      	movs	r2, #158	@ 0x9e
 8004060:	0092      	lsls	r2, r2, #2
 8004062:	189a      	adds	r2, r3, r2
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	e005      	b.n	800407a <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3304      	adds	r3, #4
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	22d4      	movs	r2, #212	@ 0xd4
 800407e:	0092      	lsls	r2, r2, #2
 8004080:	4694      	mov	ip, r2
 8004082:	4463      	add	r3, ip
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	429a      	cmp	r2, r3
 8004088:	d3f1      	bcc.n	800406e <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 800408a:	46c0      	nop			@ (mov r8, r8)
 800408c:	46c0      	nop			@ (mov r8, r8)
 800408e:	46bd      	mov	sp, r7
 8004090:	b004      	add	sp, #16
 8004092:	bd80      	pop	{r7, pc}
 8004094:	4000b400 	.word	0x4000b400
 8004098:	40006800 	.word	0x40006800
 800409c:	ffe0ffff 	.word	0xffe0ffff
 80040a0:	f0ffffff 	.word	0xf0ffffff

080040a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040b2:	e14d      	b.n	8004350 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2101      	movs	r1, #1
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4091      	lsls	r1, r2
 80040be:	000a      	movs	r2, r1
 80040c0:	4013      	ands	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d100      	bne.n	80040cc <HAL_GPIO_Init+0x28>
 80040ca:	e13e      	b.n	800434a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2203      	movs	r2, #3
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d005      	beq.n	80040e4 <HAL_GPIO_Init+0x40>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2203      	movs	r2, #3
 80040de:	4013      	ands	r3, r2
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d130      	bne.n	8004146 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	2203      	movs	r2, #3
 80040f0:	409a      	lsls	r2, r3
 80040f2:	0013      	movs	r3, r2
 80040f4:	43da      	mvns	r2, r3
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4013      	ands	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	409a      	lsls	r2, r3
 8004106:	0013      	movs	r3, r2
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800411a:	2201      	movs	r2, #1
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	409a      	lsls	r2, r3
 8004120:	0013      	movs	r3, r2
 8004122:	43da      	mvns	r2, r3
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4013      	ands	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	2201      	movs	r2, #1
 8004132:	401a      	ands	r2, r3
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	409a      	lsls	r2, r3
 8004138:	0013      	movs	r3, r2
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2203      	movs	r2, #3
 800414c:	4013      	ands	r3, r2
 800414e:	2b03      	cmp	r3, #3
 8004150:	d017      	beq.n	8004182 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	2203      	movs	r2, #3
 800415e:	409a      	lsls	r2, r3
 8004160:	0013      	movs	r3, r2
 8004162:	43da      	mvns	r2, r3
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4013      	ands	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	409a      	lsls	r2, r3
 8004174:	0013      	movs	r3, r2
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2203      	movs	r2, #3
 8004188:	4013      	ands	r3, r2
 800418a:	2b02      	cmp	r3, #2
 800418c:	d123      	bne.n	80041d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	08da      	lsrs	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3208      	adds	r2, #8
 8004196:	0092      	lsls	r2, r2, #2
 8004198:	58d3      	ldr	r3, [r2, r3]
 800419a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2207      	movs	r2, #7
 80041a0:	4013      	ands	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	220f      	movs	r2, #15
 80041a6:	409a      	lsls	r2, r3
 80041a8:	0013      	movs	r3, r2
 80041aa:	43da      	mvns	r2, r3
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4013      	ands	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2107      	movs	r1, #7
 80041ba:	400b      	ands	r3, r1
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	409a      	lsls	r2, r3
 80041c0:	0013      	movs	r3, r2
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	08da      	lsrs	r2, r3, #3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3208      	adds	r2, #8
 80041d0:	0092      	lsls	r2, r2, #2
 80041d2:	6939      	ldr	r1, [r7, #16]
 80041d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	2203      	movs	r2, #3
 80041e2:	409a      	lsls	r2, r3
 80041e4:	0013      	movs	r3, r2
 80041e6:	43da      	mvns	r2, r3
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4013      	ands	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2203      	movs	r2, #3
 80041f4:	401a      	ands	r2, r3
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	409a      	lsls	r2, r3
 80041fc:	0013      	movs	r3, r2
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	23c0      	movs	r3, #192	@ 0xc0
 8004210:	029b      	lsls	r3, r3, #10
 8004212:	4013      	ands	r3, r2
 8004214:	d100      	bne.n	8004218 <HAL_GPIO_Init+0x174>
 8004216:	e098      	b.n	800434a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004218:	4a53      	ldr	r2, [pc, #332]	@ (8004368 <HAL_GPIO_Init+0x2c4>)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	089b      	lsrs	r3, r3, #2
 800421e:	3318      	adds	r3, #24
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	589b      	ldr	r3, [r3, r2]
 8004224:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2203      	movs	r2, #3
 800422a:	4013      	ands	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	220f      	movs	r2, #15
 8004230:	409a      	lsls	r2, r3
 8004232:	0013      	movs	r3, r2
 8004234:	43da      	mvns	r2, r3
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	4013      	ands	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	23a0      	movs	r3, #160	@ 0xa0
 8004240:	05db      	lsls	r3, r3, #23
 8004242:	429a      	cmp	r2, r3
 8004244:	d019      	beq.n	800427a <HAL_GPIO_Init+0x1d6>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a48      	ldr	r2, [pc, #288]	@ (800436c <HAL_GPIO_Init+0x2c8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d013      	beq.n	8004276 <HAL_GPIO_Init+0x1d2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a47      	ldr	r2, [pc, #284]	@ (8004370 <HAL_GPIO_Init+0x2cc>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00d      	beq.n	8004272 <HAL_GPIO_Init+0x1ce>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a46      	ldr	r2, [pc, #280]	@ (8004374 <HAL_GPIO_Init+0x2d0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d007      	beq.n	800426e <HAL_GPIO_Init+0x1ca>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a45      	ldr	r2, [pc, #276]	@ (8004378 <HAL_GPIO_Init+0x2d4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d101      	bne.n	800426a <HAL_GPIO_Init+0x1c6>
 8004266:	2304      	movs	r3, #4
 8004268:	e008      	b.n	800427c <HAL_GPIO_Init+0x1d8>
 800426a:	2305      	movs	r3, #5
 800426c:	e006      	b.n	800427c <HAL_GPIO_Init+0x1d8>
 800426e:	2303      	movs	r3, #3
 8004270:	e004      	b.n	800427c <HAL_GPIO_Init+0x1d8>
 8004272:	2302      	movs	r3, #2
 8004274:	e002      	b.n	800427c <HAL_GPIO_Init+0x1d8>
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <HAL_GPIO_Init+0x1d8>
 800427a:	2300      	movs	r3, #0
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	2103      	movs	r1, #3
 8004280:	400a      	ands	r2, r1
 8004282:	00d2      	lsls	r2, r2, #3
 8004284:	4093      	lsls	r3, r2
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800428c:	4936      	ldr	r1, [pc, #216]	@ (8004368 <HAL_GPIO_Init+0x2c4>)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	089b      	lsrs	r3, r3, #2
 8004292:	3318      	adds	r3, #24
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800429a:	4b33      	ldr	r3, [pc, #204]	@ (8004368 <HAL_GPIO_Init+0x2c4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	43da      	mvns	r2, r3
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4013      	ands	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	2380      	movs	r3, #128	@ 0x80
 80042b0:	035b      	lsls	r3, r3, #13
 80042b2:	4013      	ands	r3, r2
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042be:	4b2a      	ldr	r3, [pc, #168]	@ (8004368 <HAL_GPIO_Init+0x2c4>)
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80042c4:	4b28      	ldr	r3, [pc, #160]	@ (8004368 <HAL_GPIO_Init+0x2c4>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	43da      	mvns	r2, r3
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	4013      	ands	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	2380      	movs	r3, #128	@ 0x80
 80042da:	039b      	lsls	r3, r3, #14
 80042dc:	4013      	ands	r3, r2
 80042de:	d003      	beq.n	80042e8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004368 <HAL_GPIO_Init+0x2c4>)
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80042ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004368 <HAL_GPIO_Init+0x2c4>)
 80042f0:	2384      	movs	r3, #132	@ 0x84
 80042f2:	58d3      	ldr	r3, [r2, r3]
 80042f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	43da      	mvns	r2, r3
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	4013      	ands	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	2380      	movs	r3, #128	@ 0x80
 8004306:	029b      	lsls	r3, r3, #10
 8004308:	4013      	ands	r3, r2
 800430a:	d003      	beq.n	8004314 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004314:	4914      	ldr	r1, [pc, #80]	@ (8004368 <HAL_GPIO_Init+0x2c4>)
 8004316:	2284      	movs	r2, #132	@ 0x84
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800431c:	4a12      	ldr	r2, [pc, #72]	@ (8004368 <HAL_GPIO_Init+0x2c4>)
 800431e:	2380      	movs	r3, #128	@ 0x80
 8004320:	58d3      	ldr	r3, [r2, r3]
 8004322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	43da      	mvns	r2, r3
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	4013      	ands	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	2380      	movs	r3, #128	@ 0x80
 8004334:	025b      	lsls	r3, r3, #9
 8004336:	4013      	ands	r3, r2
 8004338:	d003      	beq.n	8004342 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004342:	4909      	ldr	r1, [pc, #36]	@ (8004368 <HAL_GPIO_Init+0x2c4>)
 8004344:	2280      	movs	r2, #128	@ 0x80
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	3301      	adds	r3, #1
 800434e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	40da      	lsrs	r2, r3
 8004358:	1e13      	subs	r3, r2, #0
 800435a:	d000      	beq.n	800435e <HAL_GPIO_Init+0x2ba>
 800435c:	e6aa      	b.n	80040b4 <HAL_GPIO_Init+0x10>
  }
}
 800435e:	46c0      	nop			@ (mov r8, r8)
 8004360:	46c0      	nop			@ (mov r8, r8)
 8004362:	46bd      	mov	sp, r7
 8004364:	b006      	add	sp, #24
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40021800 	.word	0x40021800
 800436c:	50000400 	.word	0x50000400
 8004370:	50000800 	.word	0x50000800
 8004374:	50000c00 	.word	0x50000c00
 8004378:	50001000 	.word	0x50001000

0800437c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	0008      	movs	r0, r1
 8004386:	0011      	movs	r1, r2
 8004388:	1cbb      	adds	r3, r7, #2
 800438a:	1c02      	adds	r2, r0, #0
 800438c:	801a      	strh	r2, [r3, #0]
 800438e:	1c7b      	adds	r3, r7, #1
 8004390:	1c0a      	adds	r2, r1, #0
 8004392:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004394:	1c7b      	adds	r3, r7, #1
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d004      	beq.n	80043a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800439c:	1cbb      	adds	r3, r7, #2
 800439e:	881a      	ldrh	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043a4:	e003      	b.n	80043ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043a6:	1cbb      	adds	r3, r7, #2
 80043a8:	881a      	ldrh	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043ae:	46c0      	nop			@ (mov r8, r8)
 80043b0:	46bd      	mov	sp, r7
 80043b2:	b002      	add	sp, #8
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	000a      	movs	r2, r1
 80043c0:	1cbb      	adds	r3, r7, #2
 80043c2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043ca:	1cbb      	adds	r3, r7, #2
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4013      	ands	r3, r2
 80043d2:	041a      	lsls	r2, r3, #16
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	43db      	mvns	r3, r3
 80043d8:	1cb9      	adds	r1, r7, #2
 80043da:	8809      	ldrh	r1, [r1, #0]
 80043dc:	400b      	ands	r3, r1
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	619a      	str	r2, [r3, #24]
}
 80043e4:	46c0      	nop			@ (mov r8, r8)
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b004      	add	sp, #16
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e08f      	b.n	800451e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2241      	movs	r2, #65	@ 0x41
 8004402:	5c9b      	ldrb	r3, [r3, r2]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d107      	bne.n	800441a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2240      	movs	r2, #64	@ 0x40
 800440e:	2100      	movs	r1, #0
 8004410:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	0018      	movs	r0, r3
 8004416:	f7fe fd9f 	bl	8002f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2241      	movs	r2, #65	@ 0x41
 800441e:	2124      	movs	r1, #36	@ 0x24
 8004420:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2101      	movs	r1, #1
 800442e:	438a      	bics	r2, r1
 8004430:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	493b      	ldr	r1, [pc, #236]	@ (8004528 <HAL_I2C_Init+0x13c>)
 800443c:	400a      	ands	r2, r1
 800443e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4938      	ldr	r1, [pc, #224]	@ (800452c <HAL_I2C_Init+0x140>)
 800444c:	400a      	ands	r2, r1
 800444e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d108      	bne.n	800446a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2180      	movs	r1, #128	@ 0x80
 8004462:	0209      	lsls	r1, r1, #8
 8004464:	430a      	orrs	r2, r1
 8004466:	609a      	str	r2, [r3, #8]
 8004468:	e007      	b.n	800447a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2184      	movs	r1, #132	@ 0x84
 8004474:	0209      	lsls	r1, r1, #8
 8004476:	430a      	orrs	r2, r1
 8004478:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d109      	bne.n	8004496 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2180      	movs	r1, #128	@ 0x80
 800448e:	0109      	lsls	r1, r1, #4
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
 8004494:	e007      	b.n	80044a6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4923      	ldr	r1, [pc, #140]	@ (8004530 <HAL_I2C_Init+0x144>)
 80044a2:	400a      	ands	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4920      	ldr	r1, [pc, #128]	@ (8004534 <HAL_I2C_Init+0x148>)
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	491a      	ldr	r1, [pc, #104]	@ (800452c <HAL_I2C_Init+0x140>)
 80044c2:	400a      	ands	r2, r1
 80044c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691a      	ldr	r2, [r3, #16]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69d9      	ldr	r1, [r3, #28]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1a      	ldr	r2, [r3, #32]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2101      	movs	r1, #1
 80044fc:	430a      	orrs	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2241      	movs	r2, #65	@ 0x41
 800450a:	2120      	movs	r1, #32
 800450c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2242      	movs	r2, #66	@ 0x42
 8004518:	2100      	movs	r1, #0
 800451a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	0018      	movs	r0, r3
 8004520:	46bd      	mov	sp, r7
 8004522:	b002      	add	sp, #8
 8004524:	bd80      	pop	{r7, pc}
 8004526:	46c0      	nop			@ (mov r8, r8)
 8004528:	f0ffffff 	.word	0xf0ffffff
 800452c:	ffff7fff 	.word	0xffff7fff
 8004530:	fffff7ff 	.word	0xfffff7ff
 8004534:	02008000 	.word	0x02008000

08004538 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004538:	b590      	push	{r4, r7, lr}
 800453a:	b089      	sub	sp, #36	@ 0x24
 800453c:	af02      	add	r7, sp, #8
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	0008      	movs	r0, r1
 8004542:	607a      	str	r2, [r7, #4]
 8004544:	0019      	movs	r1, r3
 8004546:	230a      	movs	r3, #10
 8004548:	18fb      	adds	r3, r7, r3
 800454a:	1c02      	adds	r2, r0, #0
 800454c:	801a      	strh	r2, [r3, #0]
 800454e:	2308      	movs	r3, #8
 8004550:	18fb      	adds	r3, r7, r3
 8004552:	1c0a      	adds	r2, r1, #0
 8004554:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2241      	movs	r2, #65	@ 0x41
 800455a:	5c9b      	ldrb	r3, [r3, r2]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b20      	cmp	r3, #32
 8004560:	d000      	beq.n	8004564 <HAL_I2C_Master_Transmit+0x2c>
 8004562:	e10a      	b.n	800477a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2240      	movs	r2, #64	@ 0x40
 8004568:	5c9b      	ldrb	r3, [r3, r2]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <HAL_I2C_Master_Transmit+0x3a>
 800456e:	2302      	movs	r3, #2
 8004570:	e104      	b.n	800477c <HAL_I2C_Master_Transmit+0x244>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2240      	movs	r2, #64	@ 0x40
 8004576:	2101      	movs	r1, #1
 8004578:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800457a:	f7fe fe4b 	bl	8003214 <HAL_GetTick>
 800457e:	0003      	movs	r3, r0
 8004580:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004582:	2380      	movs	r3, #128	@ 0x80
 8004584:	0219      	lsls	r1, r3, #8
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	2319      	movs	r3, #25
 800458e:	2201      	movs	r2, #1
 8004590:	f000 fe4a 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004594:	1e03      	subs	r3, r0, #0
 8004596:	d001      	beq.n	800459c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0ef      	b.n	800477c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2241      	movs	r2, #65	@ 0x41
 80045a0:	2121      	movs	r1, #33	@ 0x21
 80045a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2242      	movs	r2, #66	@ 0x42
 80045a8:	2110      	movs	r1, #16
 80045aa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2208      	movs	r2, #8
 80045bc:	18ba      	adds	r2, r7, r2
 80045be:	8812      	ldrh	r2, [r2, #0]
 80045c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2bff      	cmp	r3, #255	@ 0xff
 80045d0:	d906      	bls.n	80045e0 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	22ff      	movs	r2, #255	@ 0xff
 80045d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80045d8:	2380      	movs	r3, #128	@ 0x80
 80045da:	045b      	lsls	r3, r3, #17
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	e007      	b.n	80045f0 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80045ea:	2380      	movs	r3, #128	@ 0x80
 80045ec:	049b      	lsls	r3, r3, #18
 80045ee:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d027      	beq.n	8004648 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fc:	781a      	ldrb	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800462c:	b2db      	uxtb	r3, r3
 800462e:	3301      	adds	r3, #1
 8004630:	b2da      	uxtb	r2, r3
 8004632:	697c      	ldr	r4, [r7, #20]
 8004634:	230a      	movs	r3, #10
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	8819      	ldrh	r1, [r3, #0]
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	4b51      	ldr	r3, [pc, #324]	@ (8004784 <HAL_I2C_Master_Transmit+0x24c>)
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	0023      	movs	r3, r4
 8004642:	f001 f869 	bl	8005718 <I2C_TransferConfig>
 8004646:	e06f      	b.n	8004728 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464c:	b2da      	uxtb	r2, r3
 800464e:	697c      	ldr	r4, [r7, #20]
 8004650:	230a      	movs	r3, #10
 8004652:	18fb      	adds	r3, r7, r3
 8004654:	8819      	ldrh	r1, [r3, #0]
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	4b4a      	ldr	r3, [pc, #296]	@ (8004784 <HAL_I2C_Master_Transmit+0x24c>)
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	0023      	movs	r3, r4
 800465e:	f001 f85b 	bl	8005718 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004662:	e061      	b.n	8004728 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	0018      	movs	r0, r3
 800466c:	f000 fe34 	bl	80052d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004670:	1e03      	subs	r3, r0, #0
 8004672:	d001      	beq.n	8004678 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e081      	b.n	800477c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467c:	781a      	ldrb	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d03a      	beq.n	8004728 <HAL_I2C_Master_Transmit+0x1f0>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d136      	bne.n	8004728 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	0013      	movs	r3, r2
 80046c4:	2200      	movs	r2, #0
 80046c6:	2180      	movs	r1, #128	@ 0x80
 80046c8:	f000 fdae 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 80046cc:	1e03      	subs	r3, r0, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e053      	b.n	800477c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d8:	b29b      	uxth	r3, r3
 80046da:	2bff      	cmp	r3, #255	@ 0xff
 80046dc:	d911      	bls.n	8004702 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	22ff      	movs	r2, #255	@ 0xff
 80046e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	2380      	movs	r3, #128	@ 0x80
 80046ec:	045c      	lsls	r4, r3, #17
 80046ee:	230a      	movs	r3, #10
 80046f0:	18fb      	adds	r3, r7, r3
 80046f2:	8819      	ldrh	r1, [r3, #0]
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	2300      	movs	r3, #0
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	0023      	movs	r3, r4
 80046fc:	f001 f80c 	bl	8005718 <I2C_TransferConfig>
 8004700:	e012      	b.n	8004728 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004710:	b2da      	uxtb	r2, r3
 8004712:	2380      	movs	r3, #128	@ 0x80
 8004714:	049c      	lsls	r4, r3, #18
 8004716:	230a      	movs	r3, #10
 8004718:	18fb      	adds	r3, r7, r3
 800471a:	8819      	ldrh	r1, [r3, #0]
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	2300      	movs	r3, #0
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	0023      	movs	r3, r4
 8004724:	f000 fff8 	bl	8005718 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d198      	bne.n	8004664 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	0018      	movs	r0, r3
 800473a:	f000 fe13 	bl	8005364 <I2C_WaitOnSTOPFlagUntilTimeout>
 800473e:	1e03      	subs	r3, r0, #0
 8004740:	d001      	beq.n	8004746 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e01a      	b.n	800477c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2220      	movs	r2, #32
 800474c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	490b      	ldr	r1, [pc, #44]	@ (8004788 <HAL_I2C_Master_Transmit+0x250>)
 800475a:	400a      	ands	r2, r1
 800475c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2241      	movs	r2, #65	@ 0x41
 8004762:	2120      	movs	r1, #32
 8004764:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2242      	movs	r2, #66	@ 0x42
 800476a:	2100      	movs	r1, #0
 800476c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2240      	movs	r2, #64	@ 0x40
 8004772:	2100      	movs	r1, #0
 8004774:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	e000      	b.n	800477c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800477a:	2302      	movs	r3, #2
  }
}
 800477c:	0018      	movs	r0, r3
 800477e:	46bd      	mov	sp, r7
 8004780:	b007      	add	sp, #28
 8004782:	bd90      	pop	{r4, r7, pc}
 8004784:	80002000 	.word	0x80002000
 8004788:	fe00e800 	.word	0xfe00e800

0800478c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800478c:	b590      	push	{r4, r7, lr}
 800478e:	b089      	sub	sp, #36	@ 0x24
 8004790:	af02      	add	r7, sp, #8
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	0008      	movs	r0, r1
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	0019      	movs	r1, r3
 800479a:	230a      	movs	r3, #10
 800479c:	18fb      	adds	r3, r7, r3
 800479e:	1c02      	adds	r2, r0, #0
 80047a0:	801a      	strh	r2, [r3, #0]
 80047a2:	2308      	movs	r3, #8
 80047a4:	18fb      	adds	r3, r7, r3
 80047a6:	1c0a      	adds	r2, r1, #0
 80047a8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2241      	movs	r2, #65	@ 0x41
 80047ae:	5c9b      	ldrb	r3, [r3, r2]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d000      	beq.n	80047b8 <HAL_I2C_Master_Receive+0x2c>
 80047b6:	e0e8      	b.n	800498a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2240      	movs	r2, #64	@ 0x40
 80047bc:	5c9b      	ldrb	r3, [r3, r2]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_I2C_Master_Receive+0x3a>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e0e2      	b.n	800498c <HAL_I2C_Master_Receive+0x200>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2240      	movs	r2, #64	@ 0x40
 80047ca:	2101      	movs	r1, #1
 80047cc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047ce:	f7fe fd21 	bl	8003214 <HAL_GetTick>
 80047d2:	0003      	movs	r3, r0
 80047d4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047d6:	2380      	movs	r3, #128	@ 0x80
 80047d8:	0219      	lsls	r1, r3, #8
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	2319      	movs	r3, #25
 80047e2:	2201      	movs	r2, #1
 80047e4:	f000 fd20 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 80047e8:	1e03      	subs	r3, r0, #0
 80047ea:	d001      	beq.n	80047f0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e0cd      	b.n	800498c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2241      	movs	r2, #65	@ 0x41
 80047f4:	2122      	movs	r1, #34	@ 0x22
 80047f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2242      	movs	r2, #66	@ 0x42
 80047fc:	2110      	movs	r1, #16
 80047fe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2208      	movs	r2, #8
 8004810:	18ba      	adds	r2, r7, r2
 8004812:	8812      	ldrh	r2, [r2, #0]
 8004814:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004820:	b29b      	uxth	r3, r3
 8004822:	2bff      	cmp	r3, #255	@ 0xff
 8004824:	d911      	bls.n	800484a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	22ff      	movs	r2, #255	@ 0xff
 800482a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004830:	b2da      	uxtb	r2, r3
 8004832:	2380      	movs	r3, #128	@ 0x80
 8004834:	045c      	lsls	r4, r3, #17
 8004836:	230a      	movs	r3, #10
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	8819      	ldrh	r1, [r3, #0]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	4b55      	ldr	r3, [pc, #340]	@ (8004994 <HAL_I2C_Master_Receive+0x208>)
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	0023      	movs	r3, r4
 8004844:	f000 ff68 	bl	8005718 <I2C_TransferConfig>
 8004848:	e076      	b.n	8004938 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004858:	b2da      	uxtb	r2, r3
 800485a:	2380      	movs	r3, #128	@ 0x80
 800485c:	049c      	lsls	r4, r3, #18
 800485e:	230a      	movs	r3, #10
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	8819      	ldrh	r1, [r3, #0]
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	4b4b      	ldr	r3, [pc, #300]	@ (8004994 <HAL_I2C_Master_Receive+0x208>)
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	0023      	movs	r3, r4
 800486c:	f000 ff54 	bl	8005718 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004870:	e062      	b.n	8004938 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	0018      	movs	r0, r3
 800487a:	f000 fdb7 	bl	80053ec <I2C_WaitOnRXNEFlagUntilTimeout>
 800487e:	1e03      	subs	r3, r0, #0
 8004880:	d001      	beq.n	8004886 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e082      	b.n	800498c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d03a      	beq.n	8004938 <HAL_I2C_Master_Receive+0x1ac>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d136      	bne.n	8004938 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	0013      	movs	r3, r2
 80048d4:	2200      	movs	r2, #0
 80048d6:	2180      	movs	r1, #128	@ 0x80
 80048d8:	f000 fca6 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 80048dc:	1e03      	subs	r3, r0, #0
 80048de:	d001      	beq.n	80048e4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e053      	b.n	800498c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2bff      	cmp	r3, #255	@ 0xff
 80048ec:	d911      	bls.n	8004912 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	22ff      	movs	r2, #255	@ 0xff
 80048f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	2380      	movs	r3, #128	@ 0x80
 80048fc:	045c      	lsls	r4, r3, #17
 80048fe:	230a      	movs	r3, #10
 8004900:	18fb      	adds	r3, r7, r3
 8004902:	8819      	ldrh	r1, [r3, #0]
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	2300      	movs	r3, #0
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	0023      	movs	r3, r4
 800490c:	f000 ff04 	bl	8005718 <I2C_TransferConfig>
 8004910:	e012      	b.n	8004938 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004920:	b2da      	uxtb	r2, r3
 8004922:	2380      	movs	r3, #128	@ 0x80
 8004924:	049c      	lsls	r4, r3, #18
 8004926:	230a      	movs	r3, #10
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	8819      	ldrh	r1, [r3, #0]
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	2300      	movs	r3, #0
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	0023      	movs	r3, r4
 8004934:	f000 fef0 	bl	8005718 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d197      	bne.n	8004872 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	0018      	movs	r0, r3
 800494a:	f000 fd0b 	bl	8005364 <I2C_WaitOnSTOPFlagUntilTimeout>
 800494e:	1e03      	subs	r3, r0, #0
 8004950:	d001      	beq.n	8004956 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e01a      	b.n	800498c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2220      	movs	r2, #32
 800495c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	490b      	ldr	r1, [pc, #44]	@ (8004998 <HAL_I2C_Master_Receive+0x20c>)
 800496a:	400a      	ands	r2, r1
 800496c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2241      	movs	r2, #65	@ 0x41
 8004972:	2120      	movs	r1, #32
 8004974:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2242      	movs	r2, #66	@ 0x42
 800497a:	2100      	movs	r1, #0
 800497c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2240      	movs	r2, #64	@ 0x40
 8004982:	2100      	movs	r1, #0
 8004984:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	e000      	b.n	800498c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800498a:	2302      	movs	r3, #2
  }
}
 800498c:	0018      	movs	r0, r3
 800498e:	46bd      	mov	sp, r7
 8004990:	b007      	add	sp, #28
 8004992:	bd90      	pop	{r4, r7, pc}
 8004994:	80002400 	.word	0x80002400
 8004998:	fe00e800 	.word	0xfe00e800

0800499c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800499c:	b590      	push	{r4, r7, lr}
 800499e:	b089      	sub	sp, #36	@ 0x24
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	000c      	movs	r4, r1
 80049a6:	0010      	movs	r0, r2
 80049a8:	0019      	movs	r1, r3
 80049aa:	230a      	movs	r3, #10
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	1c22      	adds	r2, r4, #0
 80049b0:	801a      	strh	r2, [r3, #0]
 80049b2:	2308      	movs	r3, #8
 80049b4:	18fb      	adds	r3, r7, r3
 80049b6:	1c02      	adds	r2, r0, #0
 80049b8:	801a      	strh	r2, [r3, #0]
 80049ba:	1dbb      	adds	r3, r7, #6
 80049bc:	1c0a      	adds	r2, r1, #0
 80049be:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2241      	movs	r2, #65	@ 0x41
 80049c4:	5c9b      	ldrb	r3, [r3, r2]
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d000      	beq.n	80049ce <HAL_I2C_Mem_Write+0x32>
 80049cc:	e10c      	b.n	8004be8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d004      	beq.n	80049de <HAL_I2C_Mem_Write+0x42>
 80049d4:	232c      	movs	r3, #44	@ 0x2c
 80049d6:	18fb      	adds	r3, r7, r3
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d105      	bne.n	80049ea <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2280      	movs	r2, #128	@ 0x80
 80049e2:	0092      	lsls	r2, r2, #2
 80049e4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e0ff      	b.n	8004bea <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2240      	movs	r2, #64	@ 0x40
 80049ee:	5c9b      	ldrb	r3, [r3, r2]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_I2C_Mem_Write+0x5c>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e0f8      	b.n	8004bea <HAL_I2C_Mem_Write+0x24e>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2240      	movs	r2, #64	@ 0x40
 80049fc:	2101      	movs	r1, #1
 80049fe:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a00:	f7fe fc08 	bl	8003214 <HAL_GetTick>
 8004a04:	0003      	movs	r3, r0
 8004a06:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a08:	2380      	movs	r3, #128	@ 0x80
 8004a0a:	0219      	lsls	r1, r3, #8
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	2319      	movs	r3, #25
 8004a14:	2201      	movs	r2, #1
 8004a16:	f000 fc07 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004a1a:	1e03      	subs	r3, r0, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e0e3      	b.n	8004bea <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2241      	movs	r2, #65	@ 0x41
 8004a26:	2121      	movs	r1, #33	@ 0x21
 8004a28:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2242      	movs	r2, #66	@ 0x42
 8004a2e:	2140      	movs	r1, #64	@ 0x40
 8004a30:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	222c      	movs	r2, #44	@ 0x2c
 8004a42:	18ba      	adds	r2, r7, r2
 8004a44:	8812      	ldrh	r2, [r2, #0]
 8004a46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a4e:	1dbb      	adds	r3, r7, #6
 8004a50:	881c      	ldrh	r4, [r3, #0]
 8004a52:	2308      	movs	r3, #8
 8004a54:	18fb      	adds	r3, r7, r3
 8004a56:	881a      	ldrh	r2, [r3, #0]
 8004a58:	230a      	movs	r3, #10
 8004a5a:	18fb      	adds	r3, r7, r3
 8004a5c:	8819      	ldrh	r1, [r3, #0]
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	9301      	str	r3, [sp, #4]
 8004a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	0023      	movs	r3, r4
 8004a6a:	f000 faf5 	bl	8005058 <I2C_RequestMemoryWrite>
 8004a6e:	1e03      	subs	r3, r0, #0
 8004a70:	d005      	beq.n	8004a7e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2240      	movs	r2, #64	@ 0x40
 8004a76:	2100      	movs	r1, #0
 8004a78:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e0b5      	b.n	8004bea <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2bff      	cmp	r3, #255	@ 0xff
 8004a86:	d911      	bls.n	8004aac <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	22ff      	movs	r2, #255	@ 0xff
 8004a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	2380      	movs	r3, #128	@ 0x80
 8004a96:	045c      	lsls	r4, r3, #17
 8004a98:	230a      	movs	r3, #10
 8004a9a:	18fb      	adds	r3, r7, r3
 8004a9c:	8819      	ldrh	r1, [r3, #0]
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	0023      	movs	r3, r4
 8004aa6:	f000 fe37 	bl	8005718 <I2C_TransferConfig>
 8004aaa:	e012      	b.n	8004ad2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	2380      	movs	r3, #128	@ 0x80
 8004abe:	049c      	lsls	r4, r3, #18
 8004ac0:	230a      	movs	r3, #10
 8004ac2:	18fb      	adds	r3, r7, r3
 8004ac4:	8819      	ldrh	r1, [r3, #0]
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	0023      	movs	r3, r4
 8004ace:	f000 fe23 	bl	8005718 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f000 fbfd 	bl	80052d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ade:	1e03      	subs	r3, r0, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e081      	b.n	8004bea <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aea:	781a      	ldrb	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d03a      	beq.n	8004b96 <HAL_I2C_Mem_Write+0x1fa>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d136      	bne.n	8004b96 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	0013      	movs	r3, r2
 8004b32:	2200      	movs	r2, #0
 8004b34:	2180      	movs	r1, #128	@ 0x80
 8004b36:	f000 fb77 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004b3a:	1e03      	subs	r3, r0, #0
 8004b3c:	d001      	beq.n	8004b42 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e053      	b.n	8004bea <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2bff      	cmp	r3, #255	@ 0xff
 8004b4a:	d911      	bls.n	8004b70 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	22ff      	movs	r2, #255	@ 0xff
 8004b50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	2380      	movs	r3, #128	@ 0x80
 8004b5a:	045c      	lsls	r4, r3, #17
 8004b5c:	230a      	movs	r3, #10
 8004b5e:	18fb      	adds	r3, r7, r3
 8004b60:	8819      	ldrh	r1, [r3, #0]
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	2300      	movs	r3, #0
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	0023      	movs	r3, r4
 8004b6a:	f000 fdd5 	bl	8005718 <I2C_TransferConfig>
 8004b6e:	e012      	b.n	8004b96 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	2380      	movs	r3, #128	@ 0x80
 8004b82:	049c      	lsls	r4, r3, #18
 8004b84:	230a      	movs	r3, #10
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	8819      	ldrh	r1, [r3, #0]
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	0023      	movs	r3, r4
 8004b92:	f000 fdc1 	bl	8005718 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d198      	bne.n	8004ad2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f000 fbdc 	bl	8005364 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bac:	1e03      	subs	r3, r0, #0
 8004bae:	d001      	beq.n	8004bb4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e01a      	b.n	8004bea <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	490b      	ldr	r1, [pc, #44]	@ (8004bf4 <HAL_I2C_Mem_Write+0x258>)
 8004bc8:	400a      	ands	r2, r1
 8004bca:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2241      	movs	r2, #65	@ 0x41
 8004bd0:	2120      	movs	r1, #32
 8004bd2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2242      	movs	r2, #66	@ 0x42
 8004bd8:	2100      	movs	r1, #0
 8004bda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2240      	movs	r2, #64	@ 0x40
 8004be0:	2100      	movs	r1, #0
 8004be2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	e000      	b.n	8004bea <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004be8:	2302      	movs	r3, #2
  }
}
 8004bea:	0018      	movs	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b007      	add	sp, #28
 8004bf0:	bd90      	pop	{r4, r7, pc}
 8004bf2:	46c0      	nop			@ (mov r8, r8)
 8004bf4:	fe00e800 	.word	0xfe00e800

08004bf8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf8:	b590      	push	{r4, r7, lr}
 8004bfa:	b089      	sub	sp, #36	@ 0x24
 8004bfc:	af02      	add	r7, sp, #8
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	000c      	movs	r4, r1
 8004c02:	0010      	movs	r0, r2
 8004c04:	0019      	movs	r1, r3
 8004c06:	230a      	movs	r3, #10
 8004c08:	18fb      	adds	r3, r7, r3
 8004c0a:	1c22      	adds	r2, r4, #0
 8004c0c:	801a      	strh	r2, [r3, #0]
 8004c0e:	2308      	movs	r3, #8
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	1c02      	adds	r2, r0, #0
 8004c14:	801a      	strh	r2, [r3, #0]
 8004c16:	1dbb      	adds	r3, r7, #6
 8004c18:	1c0a      	adds	r2, r1, #0
 8004c1a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2241      	movs	r2, #65	@ 0x41
 8004c20:	5c9b      	ldrb	r3, [r3, r2]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d000      	beq.n	8004c2a <HAL_I2C_Mem_Read+0x32>
 8004c28:	e110      	b.n	8004e4c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d004      	beq.n	8004c3a <HAL_I2C_Mem_Read+0x42>
 8004c30:	232c      	movs	r3, #44	@ 0x2c
 8004c32:	18fb      	adds	r3, r7, r3
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d105      	bne.n	8004c46 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2280      	movs	r2, #128	@ 0x80
 8004c3e:	0092      	lsls	r2, r2, #2
 8004c40:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e103      	b.n	8004e4e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2240      	movs	r2, #64	@ 0x40
 8004c4a:	5c9b      	ldrb	r3, [r3, r2]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_I2C_Mem_Read+0x5c>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e0fc      	b.n	8004e4e <HAL_I2C_Mem_Read+0x256>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2240      	movs	r2, #64	@ 0x40
 8004c58:	2101      	movs	r1, #1
 8004c5a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c5c:	f7fe fada 	bl	8003214 <HAL_GetTick>
 8004c60:	0003      	movs	r3, r0
 8004c62:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c64:	2380      	movs	r3, #128	@ 0x80
 8004c66:	0219      	lsls	r1, r3, #8
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	2319      	movs	r3, #25
 8004c70:	2201      	movs	r2, #1
 8004c72:	f000 fad9 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004c76:	1e03      	subs	r3, r0, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e0e7      	b.n	8004e4e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2241      	movs	r2, #65	@ 0x41
 8004c82:	2122      	movs	r1, #34	@ 0x22
 8004c84:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2242      	movs	r2, #66	@ 0x42
 8004c8a:	2140      	movs	r1, #64	@ 0x40
 8004c8c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	222c      	movs	r2, #44	@ 0x2c
 8004c9e:	18ba      	adds	r2, r7, r2
 8004ca0:	8812      	ldrh	r2, [r2, #0]
 8004ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004caa:	1dbb      	adds	r3, r7, #6
 8004cac:	881c      	ldrh	r4, [r3, #0]
 8004cae:	2308      	movs	r3, #8
 8004cb0:	18fb      	adds	r3, r7, r3
 8004cb2:	881a      	ldrh	r2, [r3, #0]
 8004cb4:	230a      	movs	r3, #10
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	8819      	ldrh	r1, [r3, #0]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	9301      	str	r3, [sp, #4]
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	0023      	movs	r3, r4
 8004cc6:	f000 fa2b 	bl	8005120 <I2C_RequestMemoryRead>
 8004cca:	1e03      	subs	r3, r0, #0
 8004ccc:	d005      	beq.n	8004cda <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2240      	movs	r2, #64	@ 0x40
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e0b9      	b.n	8004e4e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2bff      	cmp	r3, #255	@ 0xff
 8004ce2:	d911      	bls.n	8004d08 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	22ff      	movs	r2, #255	@ 0xff
 8004ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	2380      	movs	r3, #128	@ 0x80
 8004cf2:	045c      	lsls	r4, r3, #17
 8004cf4:	230a      	movs	r3, #10
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	8819      	ldrh	r1, [r3, #0]
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	4b56      	ldr	r3, [pc, #344]	@ (8004e58 <HAL_I2C_Mem_Read+0x260>)
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	0023      	movs	r3, r4
 8004d02:	f000 fd09 	bl	8005718 <I2C_TransferConfig>
 8004d06:	e012      	b.n	8004d2e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	2380      	movs	r3, #128	@ 0x80
 8004d1a:	049c      	lsls	r4, r3, #18
 8004d1c:	230a      	movs	r3, #10
 8004d1e:	18fb      	adds	r3, r7, r3
 8004d20:	8819      	ldrh	r1, [r3, #0]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	4b4c      	ldr	r3, [pc, #304]	@ (8004e58 <HAL_I2C_Mem_Read+0x260>)
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	0023      	movs	r3, r4
 8004d2a:	f000 fcf5 	bl	8005718 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004d2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	0013      	movs	r3, r2
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2104      	movs	r1, #4
 8004d3c:	f000 fa74 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004d40:	1e03      	subs	r3, r0, #0
 8004d42:	d001      	beq.n	8004d48 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e082      	b.n	8004e4e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d03a      	beq.n	8004dfa <HAL_I2C_Mem_Read+0x202>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d136      	bne.n	8004dfa <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	0013      	movs	r3, r2
 8004d96:	2200      	movs	r2, #0
 8004d98:	2180      	movs	r1, #128	@ 0x80
 8004d9a:	f000 fa45 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004d9e:	1e03      	subs	r3, r0, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e053      	b.n	8004e4e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2bff      	cmp	r3, #255	@ 0xff
 8004dae:	d911      	bls.n	8004dd4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	22ff      	movs	r2, #255	@ 0xff
 8004db4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	2380      	movs	r3, #128	@ 0x80
 8004dbe:	045c      	lsls	r4, r3, #17
 8004dc0:	230a      	movs	r3, #10
 8004dc2:	18fb      	adds	r3, r7, r3
 8004dc4:	8819      	ldrh	r1, [r3, #0]
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	2300      	movs	r3, #0
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	0023      	movs	r3, r4
 8004dce:	f000 fca3 	bl	8005718 <I2C_TransferConfig>
 8004dd2:	e012      	b.n	8004dfa <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	2380      	movs	r3, #128	@ 0x80
 8004de6:	049c      	lsls	r4, r3, #18
 8004de8:	230a      	movs	r3, #10
 8004dea:	18fb      	adds	r3, r7, r3
 8004dec:	8819      	ldrh	r1, [r3, #0]
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	2300      	movs	r3, #0
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	0023      	movs	r3, r4
 8004df6:	f000 fc8f 	bl	8005718 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d194      	bne.n	8004d2e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	f000 faaa 	bl	8005364 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e10:	1e03      	subs	r3, r0, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e01a      	b.n	8004e4e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	490c      	ldr	r1, [pc, #48]	@ (8004e5c <HAL_I2C_Mem_Read+0x264>)
 8004e2c:	400a      	ands	r2, r1
 8004e2e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2241      	movs	r2, #65	@ 0x41
 8004e34:	2120      	movs	r1, #32
 8004e36:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2242      	movs	r2, #66	@ 0x42
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2240      	movs	r2, #64	@ 0x40
 8004e44:	2100      	movs	r1, #0
 8004e46:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e000      	b.n	8004e4e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004e4c:	2302      	movs	r3, #2
  }
}
 8004e4e:	0018      	movs	r0, r3
 8004e50:	46bd      	mov	sp, r7
 8004e52:	b007      	add	sp, #28
 8004e54:	bd90      	pop	{r4, r7, pc}
 8004e56:	46c0      	nop			@ (mov r8, r8)
 8004e58:	80002400 	.word	0x80002400
 8004e5c:	fe00e800 	.word	0xfe00e800

08004e60 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08a      	sub	sp, #40	@ 0x28
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	607a      	str	r2, [r7, #4]
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	230a      	movs	r3, #10
 8004e6e:	18fb      	adds	r3, r7, r3
 8004e70:	1c0a      	adds	r2, r1, #0
 8004e72:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2241      	movs	r2, #65	@ 0x41
 8004e7c:	5c9b      	ldrb	r3, [r3, r2]
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b20      	cmp	r3, #32
 8004e82:	d000      	beq.n	8004e86 <HAL_I2C_IsDeviceReady+0x26>
 8004e84:	e0df      	b.n	8005046 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	699a      	ldr	r2, [r3, #24]
 8004e8c:	2380      	movs	r3, #128	@ 0x80
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	401a      	ands	r2, r3
 8004e92:	2380      	movs	r3, #128	@ 0x80
 8004e94:	021b      	lsls	r3, r3, #8
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d101      	bne.n	8004e9e <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e0d4      	b.n	8005048 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2240      	movs	r2, #64	@ 0x40
 8004ea2:	5c9b      	ldrb	r3, [r3, r2]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_I2C_IsDeviceReady+0x4c>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e0cd      	b.n	8005048 <HAL_I2C_IsDeviceReady+0x1e8>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2240      	movs	r2, #64	@ 0x40
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2241      	movs	r2, #65	@ 0x41
 8004eb8:	2124      	movs	r1, #36	@ 0x24
 8004eba:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d107      	bne.n	8004eda <HAL_I2C_IsDeviceReady+0x7a>
 8004eca:	230a      	movs	r3, #10
 8004ecc:	18fb      	adds	r3, r7, r3
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	059b      	lsls	r3, r3, #22
 8004ed2:	0d9b      	lsrs	r3, r3, #22
 8004ed4:	4a5e      	ldr	r2, [pc, #376]	@ (8005050 <HAL_I2C_IsDeviceReady+0x1f0>)
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	e006      	b.n	8004ee8 <HAL_I2C_IsDeviceReady+0x88>
 8004eda:	230a      	movs	r3, #10
 8004edc:	18fb      	adds	r3, r7, r3
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	059b      	lsls	r3, r3, #22
 8004ee2:	0d9b      	lsrs	r3, r3, #22
 8004ee4:	4a5b      	ldr	r2, [pc, #364]	@ (8005054 <HAL_I2C_IsDeviceReady+0x1f4>)
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004eee:	f7fe f991 	bl	8003214 <HAL_GetTick>
 8004ef2:	0003      	movs	r3, r0
 8004ef4:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	2220      	movs	r2, #32
 8004efe:	4013      	ands	r3, r2
 8004f00:	3b20      	subs	r3, #32
 8004f02:	425a      	negs	r2, r3
 8004f04:	4153      	adcs	r3, r2
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	231f      	movs	r3, #31
 8004f0a:	18fb      	adds	r3, r7, r3
 8004f0c:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	2210      	movs	r2, #16
 8004f16:	4013      	ands	r3, r2
 8004f18:	3b10      	subs	r3, #16
 8004f1a:	425a      	negs	r2, r3
 8004f1c:	4153      	adcs	r3, r2
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	231e      	movs	r3, #30
 8004f22:	18fb      	adds	r3, r7, r3
 8004f24:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004f26:	e035      	b.n	8004f94 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	d01a      	beq.n	8004f64 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f2e:	f7fe f971 	bl	8003214 <HAL_GetTick>
 8004f32:	0002      	movs	r2, r0
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d302      	bcc.n	8004f44 <HAL_I2C_IsDeviceReady+0xe4>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10f      	bne.n	8004f64 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2241      	movs	r2, #65	@ 0x41
 8004f48:	2120      	movs	r1, #32
 8004f4a:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f50:	2220      	movs	r2, #32
 8004f52:	431a      	orrs	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2240      	movs	r2, #64	@ 0x40
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e071      	b.n	8005048 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	3b20      	subs	r3, #32
 8004f70:	425a      	negs	r2, r3
 8004f72:	4153      	adcs	r3, r2
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	231f      	movs	r3, #31
 8004f78:	18fb      	adds	r3, r7, r3
 8004f7a:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	2210      	movs	r2, #16
 8004f84:	4013      	ands	r3, r2
 8004f86:	3b10      	subs	r3, #16
 8004f88:	425a      	negs	r2, r3
 8004f8a:	4153      	adcs	r3, r2
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	231e      	movs	r3, #30
 8004f90:	18fb      	adds	r3, r7, r3
 8004f92:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004f94:	231f      	movs	r3, #31
 8004f96:	18fb      	adds	r3, r7, r3
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d104      	bne.n	8004fa8 <HAL_I2C_IsDeviceReady+0x148>
 8004f9e:	231e      	movs	r3, #30
 8004fa0:	18fb      	adds	r3, r7, r3
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0bf      	beq.n	8004f28 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	2210      	movs	r2, #16
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	2b10      	cmp	r3, #16
 8004fb4:	d01a      	beq.n	8004fec <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	0013      	movs	r3, r2
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2120      	movs	r1, #32
 8004fc4:	f000 f930 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004fc8:	1e03      	subs	r3, r0, #0
 8004fca:	d001      	beq.n	8004fd0 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e03b      	b.n	8005048 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2241      	movs	r2, #65	@ 0x41
 8004fdc:	2120      	movs	r1, #32
 8004fde:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2240      	movs	r2, #64	@ 0x40
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e02d      	b.n	8005048 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	0013      	movs	r3, r2
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2120      	movs	r1, #32
 8004ffa:	f000 f915 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8004ffe:	1e03      	subs	r3, r0, #0
 8005000:	d001      	beq.n	8005006 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e020      	b.n	8005048 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2210      	movs	r2, #16
 800500c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2220      	movs	r2, #32
 8005014:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	3301      	adds	r3, #1
 800501a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	429a      	cmp	r2, r3
 8005022:	d900      	bls.n	8005026 <HAL_I2C_IsDeviceReady+0x1c6>
 8005024:	e74d      	b.n	8004ec2 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2241      	movs	r2, #65	@ 0x41
 800502a:	2120      	movs	r1, #32
 800502c:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005032:	2220      	movs	r2, #32
 8005034:	431a      	orrs	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2240      	movs	r2, #64	@ 0x40
 800503e:	2100      	movs	r1, #0
 8005040:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8005046:	2302      	movs	r3, #2
  }
}
 8005048:	0018      	movs	r0, r3
 800504a:	46bd      	mov	sp, r7
 800504c:	b008      	add	sp, #32
 800504e:	bd80      	pop	{r7, pc}
 8005050:	02002000 	.word	0x02002000
 8005054:	02002800 	.word	0x02002800

08005058 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005058:	b5b0      	push	{r4, r5, r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	000c      	movs	r4, r1
 8005062:	0010      	movs	r0, r2
 8005064:	0019      	movs	r1, r3
 8005066:	250a      	movs	r5, #10
 8005068:	197b      	adds	r3, r7, r5
 800506a:	1c22      	adds	r2, r4, #0
 800506c:	801a      	strh	r2, [r3, #0]
 800506e:	2308      	movs	r3, #8
 8005070:	18fb      	adds	r3, r7, r3
 8005072:	1c02      	adds	r2, r0, #0
 8005074:	801a      	strh	r2, [r3, #0]
 8005076:	1dbb      	adds	r3, r7, #6
 8005078:	1c0a      	adds	r2, r1, #0
 800507a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800507c:	1dbb      	adds	r3, r7, #6
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	b2da      	uxtb	r2, r3
 8005082:	2380      	movs	r3, #128	@ 0x80
 8005084:	045c      	lsls	r4, r3, #17
 8005086:	197b      	adds	r3, r7, r5
 8005088:	8819      	ldrh	r1, [r3, #0]
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	4b23      	ldr	r3, [pc, #140]	@ (800511c <I2C_RequestMemoryWrite+0xc4>)
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	0023      	movs	r3, r4
 8005092:	f000 fb41 	bl	8005718 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005098:	6a39      	ldr	r1, [r7, #32]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	0018      	movs	r0, r3
 800509e:	f000 f91b 	bl	80052d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80050a2:	1e03      	subs	r3, r0, #0
 80050a4:	d001      	beq.n	80050aa <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e033      	b.n	8005112 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050aa:	1dbb      	adds	r3, r7, #6
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d107      	bne.n	80050c2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050b2:	2308      	movs	r3, #8
 80050b4:	18fb      	adds	r3, r7, r3
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	629a      	str	r2, [r3, #40]	@ 0x28
 80050c0:	e019      	b.n	80050f6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80050c2:	2308      	movs	r3, #8
 80050c4:	18fb      	adds	r3, r7, r3
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	0a1b      	lsrs	r3, r3, #8
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050d6:	6a39      	ldr	r1, [r7, #32]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	0018      	movs	r0, r3
 80050dc:	f000 f8fc 	bl	80052d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80050e0:	1e03      	subs	r3, r0, #0
 80050e2:	d001      	beq.n	80050e8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e014      	b.n	8005112 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050e8:	2308      	movs	r3, #8
 80050ea:	18fb      	adds	r3, r7, r3
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80050f6:	6a3a      	ldr	r2, [r7, #32]
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	0013      	movs	r3, r2
 8005100:	2200      	movs	r2, #0
 8005102:	2180      	movs	r1, #128	@ 0x80
 8005104:	f000 f890 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 8005108:	1e03      	subs	r3, r0, #0
 800510a:	d001      	beq.n	8005110 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	0018      	movs	r0, r3
 8005114:	46bd      	mov	sp, r7
 8005116:	b004      	add	sp, #16
 8005118:	bdb0      	pop	{r4, r5, r7, pc}
 800511a:	46c0      	nop			@ (mov r8, r8)
 800511c:	80002000 	.word	0x80002000

08005120 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005120:	b5b0      	push	{r4, r5, r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af02      	add	r7, sp, #8
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	000c      	movs	r4, r1
 800512a:	0010      	movs	r0, r2
 800512c:	0019      	movs	r1, r3
 800512e:	250a      	movs	r5, #10
 8005130:	197b      	adds	r3, r7, r5
 8005132:	1c22      	adds	r2, r4, #0
 8005134:	801a      	strh	r2, [r3, #0]
 8005136:	2308      	movs	r3, #8
 8005138:	18fb      	adds	r3, r7, r3
 800513a:	1c02      	adds	r2, r0, #0
 800513c:	801a      	strh	r2, [r3, #0]
 800513e:	1dbb      	adds	r3, r7, #6
 8005140:	1c0a      	adds	r2, r1, #0
 8005142:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005144:	1dbb      	adds	r3, r7, #6
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b2da      	uxtb	r2, r3
 800514a:	197b      	adds	r3, r7, r5
 800514c:	8819      	ldrh	r1, [r3, #0]
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	4b23      	ldr	r3, [pc, #140]	@ (80051e0 <I2C_RequestMemoryRead+0xc0>)
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	2300      	movs	r3, #0
 8005156:	f000 fadf 	bl	8005718 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800515a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800515c:	6a39      	ldr	r1, [r7, #32]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	0018      	movs	r0, r3
 8005162:	f000 f8b9 	bl	80052d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005166:	1e03      	subs	r3, r0, #0
 8005168:	d001      	beq.n	800516e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e033      	b.n	80051d6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800516e:	1dbb      	adds	r3, r7, #6
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d107      	bne.n	8005186 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005176:	2308      	movs	r3, #8
 8005178:	18fb      	adds	r3, r7, r3
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	b2da      	uxtb	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	629a      	str	r2, [r3, #40]	@ 0x28
 8005184:	e019      	b.n	80051ba <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005186:	2308      	movs	r3, #8
 8005188:	18fb      	adds	r3, r7, r3
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	0a1b      	lsrs	r3, r3, #8
 800518e:	b29b      	uxth	r3, r3
 8005190:	b2da      	uxtb	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800519a:	6a39      	ldr	r1, [r7, #32]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	0018      	movs	r0, r3
 80051a0:	f000 f89a 	bl	80052d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80051a4:	1e03      	subs	r3, r0, #0
 80051a6:	d001      	beq.n	80051ac <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e014      	b.n	80051d6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051ac:	2308      	movs	r3, #8
 80051ae:	18fb      	adds	r3, r7, r3
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80051ba:	6a3a      	ldr	r2, [r7, #32]
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	0013      	movs	r3, r2
 80051c4:	2200      	movs	r2, #0
 80051c6:	2140      	movs	r1, #64	@ 0x40
 80051c8:	f000 f82e 	bl	8005228 <I2C_WaitOnFlagUntilTimeout>
 80051cc:	1e03      	subs	r3, r0, #0
 80051ce:	d001      	beq.n	80051d4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e000      	b.n	80051d6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	0018      	movs	r0, r3
 80051d8:	46bd      	mov	sp, r7
 80051da:	b004      	add	sp, #16
 80051dc:	bdb0      	pop	{r4, r5, r7, pc}
 80051de:	46c0      	nop			@ (mov r8, r8)
 80051e0:	80002000 	.word	0x80002000

080051e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	2202      	movs	r2, #2
 80051f4:	4013      	ands	r3, r2
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d103      	bne.n	8005202 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2200      	movs	r2, #0
 8005200:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	2201      	movs	r2, #1
 800520a:	4013      	ands	r3, r2
 800520c:	2b01      	cmp	r3, #1
 800520e:	d007      	beq.n	8005220 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699a      	ldr	r2, [r3, #24]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2101      	movs	r1, #1
 800521c:	430a      	orrs	r2, r1
 800521e:	619a      	str	r2, [r3, #24]
  }
}
 8005220:	46c0      	nop			@ (mov r8, r8)
 8005222:	46bd      	mov	sp, r7
 8005224:	b002      	add	sp, #8
 8005226:	bd80      	pop	{r7, pc}

08005228 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	1dfb      	adds	r3, r7, #7
 8005236:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005238:	e03a      	b.n	80052b0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	6839      	ldr	r1, [r7, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	0018      	movs	r0, r3
 8005242:	f000 f971 	bl	8005528 <I2C_IsErrorOccurred>
 8005246:	1e03      	subs	r3, r0, #0
 8005248:	d001      	beq.n	800524e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e040      	b.n	80052d0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	3301      	adds	r3, #1
 8005252:	d02d      	beq.n	80052b0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005254:	f7fd ffde 	bl	8003214 <HAL_GetTick>
 8005258:	0002      	movs	r2, r0
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d302      	bcc.n	800526a <I2C_WaitOnFlagUntilTimeout+0x42>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d122      	bne.n	80052b0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	4013      	ands	r3, r2
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	425a      	negs	r2, r3
 800527a:	4153      	adcs	r3, r2
 800527c:	b2db      	uxtb	r3, r3
 800527e:	001a      	movs	r2, r3
 8005280:	1dfb      	adds	r3, r7, #7
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d113      	bne.n	80052b0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528c:	2220      	movs	r2, #32
 800528e:	431a      	orrs	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2241      	movs	r2, #65	@ 0x41
 8005298:	2120      	movs	r1, #32
 800529a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2242      	movs	r2, #66	@ 0x42
 80052a0:	2100      	movs	r1, #0
 80052a2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2240      	movs	r2, #64	@ 0x40
 80052a8:	2100      	movs	r1, #0
 80052aa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e00f      	b.n	80052d0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	4013      	ands	r3, r2
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	425a      	negs	r2, r3
 80052c0:	4153      	adcs	r3, r2
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	001a      	movs	r2, r3
 80052c6:	1dfb      	adds	r3, r7, #7
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d0b5      	beq.n	800523a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	0018      	movs	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b004      	add	sp, #16
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052e4:	e032      	b.n	800534c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	68b9      	ldr	r1, [r7, #8]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	0018      	movs	r0, r3
 80052ee:	f000 f91b 	bl	8005528 <I2C_IsErrorOccurred>
 80052f2:	1e03      	subs	r3, r0, #0
 80052f4:	d001      	beq.n	80052fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e030      	b.n	800535c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	3301      	adds	r3, #1
 80052fe:	d025      	beq.n	800534c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005300:	f7fd ff88 	bl	8003214 <HAL_GetTick>
 8005304:	0002      	movs	r2, r0
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	429a      	cmp	r2, r3
 800530e:	d302      	bcc.n	8005316 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d11a      	bne.n	800534c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	2202      	movs	r2, #2
 800531e:	4013      	ands	r3, r2
 8005320:	2b02      	cmp	r3, #2
 8005322:	d013      	beq.n	800534c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005328:	2220      	movs	r2, #32
 800532a:	431a      	orrs	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2241      	movs	r2, #65	@ 0x41
 8005334:	2120      	movs	r1, #32
 8005336:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2242      	movs	r2, #66	@ 0x42
 800533c:	2100      	movs	r1, #0
 800533e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2240      	movs	r2, #64	@ 0x40
 8005344:	2100      	movs	r1, #0
 8005346:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e007      	b.n	800535c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	2202      	movs	r2, #2
 8005354:	4013      	ands	r3, r2
 8005356:	2b02      	cmp	r3, #2
 8005358:	d1c5      	bne.n	80052e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	0018      	movs	r0, r3
 800535e:	46bd      	mov	sp, r7
 8005360:	b004      	add	sp, #16
 8005362:	bd80      	pop	{r7, pc}

08005364 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005370:	e02f      	b.n	80053d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	0018      	movs	r0, r3
 800537a:	f000 f8d5 	bl	8005528 <I2C_IsErrorOccurred>
 800537e:	1e03      	subs	r3, r0, #0
 8005380:	d001      	beq.n	8005386 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e02d      	b.n	80053e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005386:	f7fd ff45 	bl	8003214 <HAL_GetTick>
 800538a:	0002      	movs	r2, r0
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	429a      	cmp	r2, r3
 8005394:	d302      	bcc.n	800539c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d11a      	bne.n	80053d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	2220      	movs	r2, #32
 80053a4:	4013      	ands	r3, r2
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d013      	beq.n	80053d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ae:	2220      	movs	r2, #32
 80053b0:	431a      	orrs	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2241      	movs	r2, #65	@ 0x41
 80053ba:	2120      	movs	r1, #32
 80053bc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2242      	movs	r2, #66	@ 0x42
 80053c2:	2100      	movs	r1, #0
 80053c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2240      	movs	r2, #64	@ 0x40
 80053ca:	2100      	movs	r1, #0
 80053cc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e007      	b.n	80053e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	2220      	movs	r2, #32
 80053da:	4013      	ands	r3, r2
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d1c8      	bne.n	8005372 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	0018      	movs	r0, r3
 80053e4:	46bd      	mov	sp, r7
 80053e6:	b004      	add	sp, #16
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053f8:	2317      	movs	r3, #23
 80053fa:	18fb      	adds	r3, r7, r3
 80053fc:	2200      	movs	r2, #0
 80053fe:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005400:	e07b      	b.n	80054fa <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	0018      	movs	r0, r3
 800540a:	f000 f88d 	bl	8005528 <I2C_IsErrorOccurred>
 800540e:	1e03      	subs	r3, r0, #0
 8005410:	d003      	beq.n	800541a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8005412:	2317      	movs	r3, #23
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	2201      	movs	r2, #1
 8005418:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	2220      	movs	r2, #32
 8005422:	4013      	ands	r3, r2
 8005424:	2b20      	cmp	r3, #32
 8005426:	d140      	bne.n	80054aa <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8005428:	2117      	movs	r1, #23
 800542a:	187b      	adds	r3, r7, r1
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d13b      	bne.n	80054aa <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	2204      	movs	r2, #4
 800543a:	4013      	ands	r3, r2
 800543c:	2b04      	cmp	r3, #4
 800543e:	d106      	bne.n	800544e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005448:	187b      	adds	r3, r7, r1
 800544a:	2200      	movs	r2, #0
 800544c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	2210      	movs	r2, #16
 8005456:	4013      	ands	r3, r2
 8005458:	2b10      	cmp	r3, #16
 800545a:	d123      	bne.n	80054a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2210      	movs	r2, #16
 8005462:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2204      	movs	r2, #4
 8005468:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2220      	movs	r2, #32
 8005470:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4929      	ldr	r1, [pc, #164]	@ (8005524 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800547e:	400a      	ands	r2, r1
 8005480:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2241      	movs	r2, #65	@ 0x41
 8005486:	2120      	movs	r1, #32
 8005488:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2242      	movs	r2, #66	@ 0x42
 800548e:	2100      	movs	r1, #0
 8005490:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2240      	movs	r2, #64	@ 0x40
 8005496:	2100      	movs	r1, #0
 8005498:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800549a:	2317      	movs	r3, #23
 800549c:	18fb      	adds	r3, r7, r3
 800549e:	2201      	movs	r2, #1
 80054a0:	701a      	strb	r2, [r3, #0]
 80054a2:	e002      	b.n	80054aa <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80054aa:	f7fd feb3 	bl	8003214 <HAL_GetTick>
 80054ae:	0002      	movs	r2, r0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d302      	bcc.n	80054c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d11c      	bne.n	80054fa <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80054c0:	2017      	movs	r0, #23
 80054c2:	183b      	adds	r3, r7, r0
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d117      	bne.n	80054fa <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	2204      	movs	r2, #4
 80054d2:	4013      	ands	r3, r2
 80054d4:	2b04      	cmp	r3, #4
 80054d6:	d010      	beq.n	80054fa <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054dc:	2220      	movs	r2, #32
 80054de:	431a      	orrs	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2241      	movs	r2, #65	@ 0x41
 80054e8:	2120      	movs	r1, #32
 80054ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2240      	movs	r2, #64	@ 0x40
 80054f0:	2100      	movs	r1, #0
 80054f2:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80054f4:	183b      	adds	r3, r7, r0
 80054f6:	2201      	movs	r2, #1
 80054f8:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	2204      	movs	r2, #4
 8005502:	4013      	ands	r3, r2
 8005504:	2b04      	cmp	r3, #4
 8005506:	d005      	beq.n	8005514 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8005508:	2317      	movs	r3, #23
 800550a:	18fb      	adds	r3, r7, r3
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d100      	bne.n	8005514 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8005512:	e776      	b.n	8005402 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8005514:	2317      	movs	r3, #23
 8005516:	18fb      	adds	r3, r7, r3
 8005518:	781b      	ldrb	r3, [r3, #0]
}
 800551a:	0018      	movs	r0, r3
 800551c:	46bd      	mov	sp, r7
 800551e:	b006      	add	sp, #24
 8005520:	bd80      	pop	{r7, pc}
 8005522:	46c0      	nop			@ (mov r8, r8)
 8005524:	fe00e800 	.word	0xfe00e800

08005528 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	@ 0x28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005534:	2327      	movs	r3, #39	@ 0x27
 8005536:	18fb      	adds	r3, r7, r3
 8005538:	2200      	movs	r2, #0
 800553a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	2210      	movs	r2, #16
 8005550:	4013      	ands	r3, r2
 8005552:	d100      	bne.n	8005556 <I2C_IsErrorOccurred+0x2e>
 8005554:	e079      	b.n	800564a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2210      	movs	r2, #16
 800555c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800555e:	e057      	b.n	8005610 <I2C_IsErrorOccurred+0xe8>
 8005560:	2227      	movs	r2, #39	@ 0x27
 8005562:	18bb      	adds	r3, r7, r2
 8005564:	18ba      	adds	r2, r7, r2
 8005566:	7812      	ldrb	r2, [r2, #0]
 8005568:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	3301      	adds	r3, #1
 800556e:	d04f      	beq.n	8005610 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005570:	f7fd fe50 	bl	8003214 <HAL_GetTick>
 8005574:	0002      	movs	r2, r0
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	429a      	cmp	r2, r3
 800557e:	d302      	bcc.n	8005586 <I2C_IsErrorOccurred+0x5e>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d144      	bne.n	8005610 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	2380      	movs	r3, #128	@ 0x80
 800558e:	01db      	lsls	r3, r3, #7
 8005590:	4013      	ands	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005594:	2013      	movs	r0, #19
 8005596:	183b      	adds	r3, r7, r0
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	2142      	movs	r1, #66	@ 0x42
 800559c:	5c52      	ldrb	r2, [r2, r1]
 800559e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	2380      	movs	r3, #128	@ 0x80
 80055a8:	021b      	lsls	r3, r3, #8
 80055aa:	401a      	ands	r2, r3
 80055ac:	2380      	movs	r3, #128	@ 0x80
 80055ae:	021b      	lsls	r3, r3, #8
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d126      	bne.n	8005602 <I2C_IsErrorOccurred+0xda>
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	2380      	movs	r3, #128	@ 0x80
 80055b8:	01db      	lsls	r3, r3, #7
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d021      	beq.n	8005602 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80055be:	183b      	adds	r3, r7, r0
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	d01d      	beq.n	8005602 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2180      	movs	r1, #128	@ 0x80
 80055d2:	01c9      	lsls	r1, r1, #7
 80055d4:	430a      	orrs	r2, r1
 80055d6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80055d8:	f7fd fe1c 	bl	8003214 <HAL_GetTick>
 80055dc:	0003      	movs	r3, r0
 80055de:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055e0:	e00f      	b.n	8005602 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80055e2:	f7fd fe17 	bl	8003214 <HAL_GetTick>
 80055e6:	0002      	movs	r2, r0
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b19      	cmp	r3, #25
 80055ee:	d908      	bls.n	8005602 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	2220      	movs	r2, #32
 80055f4:	4313      	orrs	r3, r2
 80055f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80055f8:	2327      	movs	r3, #39	@ 0x27
 80055fa:	18fb      	adds	r3, r7, r3
 80055fc:	2201      	movs	r2, #1
 80055fe:	701a      	strb	r2, [r3, #0]

              break;
 8005600:	e006      	b.n	8005610 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	2220      	movs	r2, #32
 800560a:	4013      	ands	r3, r2
 800560c:	2b20      	cmp	r3, #32
 800560e:	d1e8      	bne.n	80055e2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	2220      	movs	r2, #32
 8005618:	4013      	ands	r3, r2
 800561a:	2b20      	cmp	r3, #32
 800561c:	d004      	beq.n	8005628 <I2C_IsErrorOccurred+0x100>
 800561e:	2327      	movs	r3, #39	@ 0x27
 8005620:	18fb      	adds	r3, r7, r3
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d09b      	beq.n	8005560 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005628:	2327      	movs	r3, #39	@ 0x27
 800562a:	18fb      	adds	r3, r7, r3
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d103      	bne.n	800563a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2220      	movs	r2, #32
 8005638:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	2204      	movs	r2, #4
 800563e:	4313      	orrs	r3, r2
 8005640:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005642:	2327      	movs	r3, #39	@ 0x27
 8005644:	18fb      	adds	r3, r7, r3
 8005646:	2201      	movs	r2, #1
 8005648:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	2380      	movs	r3, #128	@ 0x80
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	4013      	ands	r3, r2
 800565a:	d00c      	beq.n	8005676 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	2201      	movs	r2, #1
 8005660:	4313      	orrs	r3, r2
 8005662:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2280      	movs	r2, #128	@ 0x80
 800566a:	0052      	lsls	r2, r2, #1
 800566c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800566e:	2327      	movs	r3, #39	@ 0x27
 8005670:	18fb      	adds	r3, r7, r3
 8005672:	2201      	movs	r2, #1
 8005674:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	2380      	movs	r3, #128	@ 0x80
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	4013      	ands	r3, r2
 800567e:	d00c      	beq.n	800569a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	2208      	movs	r2, #8
 8005684:	4313      	orrs	r3, r2
 8005686:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2280      	movs	r2, #128	@ 0x80
 800568e:	00d2      	lsls	r2, r2, #3
 8005690:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005692:	2327      	movs	r3, #39	@ 0x27
 8005694:	18fb      	adds	r3, r7, r3
 8005696:	2201      	movs	r2, #1
 8005698:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	2380      	movs	r3, #128	@ 0x80
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4013      	ands	r3, r2
 80056a2:	d00c      	beq.n	80056be <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	2202      	movs	r2, #2
 80056a8:	4313      	orrs	r3, r2
 80056aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2280      	movs	r2, #128	@ 0x80
 80056b2:	0092      	lsls	r2, r2, #2
 80056b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056b6:	2327      	movs	r3, #39	@ 0x27
 80056b8:	18fb      	adds	r3, r7, r3
 80056ba:	2201      	movs	r2, #1
 80056bc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80056be:	2327      	movs	r3, #39	@ 0x27
 80056c0:	18fb      	adds	r3, r7, r3
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d01d      	beq.n	8005704 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	0018      	movs	r0, r3
 80056cc:	f7ff fd8a 	bl	80051e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	490e      	ldr	r1, [pc, #56]	@ (8005714 <I2C_IsErrorOccurred+0x1ec>)
 80056dc:	400a      	ands	r2, r1
 80056de:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	431a      	orrs	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2241      	movs	r2, #65	@ 0x41
 80056f0:	2120      	movs	r1, #32
 80056f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2242      	movs	r2, #66	@ 0x42
 80056f8:	2100      	movs	r1, #0
 80056fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2240      	movs	r2, #64	@ 0x40
 8005700:	2100      	movs	r1, #0
 8005702:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005704:	2327      	movs	r3, #39	@ 0x27
 8005706:	18fb      	adds	r3, r7, r3
 8005708:	781b      	ldrb	r3, [r3, #0]
}
 800570a:	0018      	movs	r0, r3
 800570c:	46bd      	mov	sp, r7
 800570e:	b00a      	add	sp, #40	@ 0x28
 8005710:	bd80      	pop	{r7, pc}
 8005712:	46c0      	nop			@ (mov r8, r8)
 8005714:	fe00e800 	.word	0xfe00e800

08005718 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005718:	b590      	push	{r4, r7, lr}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	0008      	movs	r0, r1
 8005722:	0011      	movs	r1, r2
 8005724:	607b      	str	r3, [r7, #4]
 8005726:	240a      	movs	r4, #10
 8005728:	193b      	adds	r3, r7, r4
 800572a:	1c02      	adds	r2, r0, #0
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	2009      	movs	r0, #9
 8005730:	183b      	adds	r3, r7, r0
 8005732:	1c0a      	adds	r2, r1, #0
 8005734:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005736:	193b      	adds	r3, r7, r4
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	059b      	lsls	r3, r3, #22
 800573c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800573e:	183b      	adds	r3, r7, r0
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	0419      	lsls	r1, r3, #16
 8005744:	23ff      	movs	r3, #255	@ 0xff
 8005746:	041b      	lsls	r3, r3, #16
 8005748:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800574a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005752:	4313      	orrs	r3, r2
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	085b      	lsrs	r3, r3, #1
 8005758:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005762:	0d51      	lsrs	r1, r2, #21
 8005764:	2280      	movs	r2, #128	@ 0x80
 8005766:	00d2      	lsls	r2, r2, #3
 8005768:	400a      	ands	r2, r1
 800576a:	4907      	ldr	r1, [pc, #28]	@ (8005788 <I2C_TransferConfig+0x70>)
 800576c:	430a      	orrs	r2, r1
 800576e:	43d2      	mvns	r2, r2
 8005770:	401a      	ands	r2, r3
 8005772:	0011      	movs	r1, r2
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	430a      	orrs	r2, r1
 800577c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800577e:	46c0      	nop			@ (mov r8, r8)
 8005780:	46bd      	mov	sp, r7
 8005782:	b007      	add	sp, #28
 8005784:	bd90      	pop	{r4, r7, pc}
 8005786:	46c0      	nop			@ (mov r8, r8)
 8005788:	03ff63ff 	.word	0x03ff63ff

0800578c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2241      	movs	r2, #65	@ 0x41
 800579a:	5c9b      	ldrb	r3, [r3, r2]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d138      	bne.n	8005814 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2240      	movs	r2, #64	@ 0x40
 80057a6:	5c9b      	ldrb	r3, [r3, r2]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e032      	b.n	8005816 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2240      	movs	r2, #64	@ 0x40
 80057b4:	2101      	movs	r1, #1
 80057b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2241      	movs	r2, #65	@ 0x41
 80057bc:	2124      	movs	r1, #36	@ 0x24
 80057be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2101      	movs	r1, #1
 80057cc:	438a      	bics	r2, r1
 80057ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4911      	ldr	r1, [pc, #68]	@ (8005820 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80057dc:	400a      	ands	r2, r1
 80057de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6819      	ldr	r1, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2101      	movs	r1, #1
 80057fc:	430a      	orrs	r2, r1
 80057fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2241      	movs	r2, #65	@ 0x41
 8005804:	2120      	movs	r1, #32
 8005806:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2240      	movs	r2, #64	@ 0x40
 800580c:	2100      	movs	r1, #0
 800580e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	e000      	b.n	8005816 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005814:	2302      	movs	r3, #2
  }
}
 8005816:	0018      	movs	r0, r3
 8005818:	46bd      	mov	sp, r7
 800581a:	b002      	add	sp, #8
 800581c:	bd80      	pop	{r7, pc}
 800581e:	46c0      	nop			@ (mov r8, r8)
 8005820:	ffffefff 	.word	0xffffefff

08005824 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2241      	movs	r2, #65	@ 0x41
 8005832:	5c9b      	ldrb	r3, [r3, r2]
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b20      	cmp	r3, #32
 8005838:	d139      	bne.n	80058ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2240      	movs	r2, #64	@ 0x40
 800583e:	5c9b      	ldrb	r3, [r3, r2]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005844:	2302      	movs	r3, #2
 8005846:	e033      	b.n	80058b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2240      	movs	r2, #64	@ 0x40
 800584c:	2101      	movs	r1, #1
 800584e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2241      	movs	r2, #65	@ 0x41
 8005854:	2124      	movs	r1, #36	@ 0x24
 8005856:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2101      	movs	r1, #1
 8005864:	438a      	bics	r2, r1
 8005866:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4a11      	ldr	r2, [pc, #68]	@ (80058b8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005874:	4013      	ands	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	021b      	lsls	r3, r3, #8
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2101      	movs	r1, #1
 8005896:	430a      	orrs	r2, r1
 8005898:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2241      	movs	r2, #65	@ 0x41
 800589e:	2120      	movs	r1, #32
 80058a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2240      	movs	r2, #64	@ 0x40
 80058a6:	2100      	movs	r1, #0
 80058a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e000      	b.n	80058b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058ae:	2302      	movs	r3, #2
  }
}
 80058b0:	0018      	movs	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	b004      	add	sp, #16
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	fffff0ff 	.word	0xfffff0ff

080058bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80058c4:	4b19      	ldr	r3, [pc, #100]	@ (800592c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a19      	ldr	r2, [pc, #100]	@ (8005930 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80058ca:	4013      	ands	r3, r2
 80058cc:	0019      	movs	r1, r3
 80058ce:	4b17      	ldr	r3, [pc, #92]	@ (800592c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	2380      	movs	r3, #128	@ 0x80
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	429a      	cmp	r2, r3
 80058de:	d11f      	bne.n	8005920 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80058e0:	4b14      	ldr	r3, [pc, #80]	@ (8005934 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	0013      	movs	r3, r2
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	189b      	adds	r3, r3, r2
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	4912      	ldr	r1, [pc, #72]	@ (8005938 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80058ee:	0018      	movs	r0, r3
 80058f0:	f7fa fc08 	bl	8000104 <__udivsi3>
 80058f4:	0003      	movs	r3, r0
 80058f6:	3301      	adds	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058fa:	e008      	b.n	800590e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3b01      	subs	r3, #1
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	e001      	b.n	800590e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e009      	b.n	8005922 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800590e:	4b07      	ldr	r3, [pc, #28]	@ (800592c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005910:	695a      	ldr	r2, [r3, #20]
 8005912:	2380      	movs	r3, #128	@ 0x80
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	401a      	ands	r2, r3
 8005918:	2380      	movs	r3, #128	@ 0x80
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	429a      	cmp	r2, r3
 800591e:	d0ed      	beq.n	80058fc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	0018      	movs	r0, r3
 8005924:	46bd      	mov	sp, r7
 8005926:	b004      	add	sp, #16
 8005928:	bd80      	pop	{r7, pc}
 800592a:	46c0      	nop			@ (mov r8, r8)
 800592c:	40007000 	.word	0x40007000
 8005930:	fffff9ff 	.word	0xfffff9ff
 8005934:	20000000 	.word	0x20000000
 8005938:	000f4240 	.word	0x000f4240

0800593c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b088      	sub	sp, #32
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d102      	bne.n	8005950 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	f000 fb50 	bl	8005ff0 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2201      	movs	r2, #1
 8005956:	4013      	ands	r3, r2
 8005958:	d100      	bne.n	800595c <HAL_RCC_OscConfig+0x20>
 800595a:	e07c      	b.n	8005a56 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800595c:	4bc3      	ldr	r3, [pc, #780]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2238      	movs	r2, #56	@ 0x38
 8005962:	4013      	ands	r3, r2
 8005964:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005966:	4bc1      	ldr	r3, [pc, #772]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	2203      	movs	r2, #3
 800596c:	4013      	ands	r3, r2
 800596e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	2b10      	cmp	r3, #16
 8005974:	d102      	bne.n	800597c <HAL_RCC_OscConfig+0x40>
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2b03      	cmp	r3, #3
 800597a:	d002      	beq.n	8005982 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	2b08      	cmp	r3, #8
 8005980:	d10b      	bne.n	800599a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005982:	4bba      	ldr	r3, [pc, #744]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	2380      	movs	r3, #128	@ 0x80
 8005988:	029b      	lsls	r3, r3, #10
 800598a:	4013      	ands	r3, r2
 800598c:	d062      	beq.n	8005a54 <HAL_RCC_OscConfig+0x118>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d15e      	bne.n	8005a54 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e32a      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	2380      	movs	r3, #128	@ 0x80
 80059a0:	025b      	lsls	r3, r3, #9
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d107      	bne.n	80059b6 <HAL_RCC_OscConfig+0x7a>
 80059a6:	4bb1      	ldr	r3, [pc, #708]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	4bb0      	ldr	r3, [pc, #704]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 80059ac:	2180      	movs	r1, #128	@ 0x80
 80059ae:	0249      	lsls	r1, r1, #9
 80059b0:	430a      	orrs	r2, r1
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	e020      	b.n	80059f8 <HAL_RCC_OscConfig+0xbc>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	23a0      	movs	r3, #160	@ 0xa0
 80059bc:	02db      	lsls	r3, r3, #11
 80059be:	429a      	cmp	r2, r3
 80059c0:	d10e      	bne.n	80059e0 <HAL_RCC_OscConfig+0xa4>
 80059c2:	4baa      	ldr	r3, [pc, #680]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	4ba9      	ldr	r3, [pc, #676]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 80059c8:	2180      	movs	r1, #128	@ 0x80
 80059ca:	02c9      	lsls	r1, r1, #11
 80059cc:	430a      	orrs	r2, r1
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	4ba6      	ldr	r3, [pc, #664]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	4ba5      	ldr	r3, [pc, #660]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 80059d6:	2180      	movs	r1, #128	@ 0x80
 80059d8:	0249      	lsls	r1, r1, #9
 80059da:	430a      	orrs	r2, r1
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	e00b      	b.n	80059f8 <HAL_RCC_OscConfig+0xbc>
 80059e0:	4ba2      	ldr	r3, [pc, #648]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	4ba1      	ldr	r3, [pc, #644]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 80059e6:	49a2      	ldr	r1, [pc, #648]	@ (8005c70 <HAL_RCC_OscConfig+0x334>)
 80059e8:	400a      	ands	r2, r1
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	4b9f      	ldr	r3, [pc, #636]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	4b9e      	ldr	r3, [pc, #632]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 80059f2:	49a0      	ldr	r1, [pc, #640]	@ (8005c74 <HAL_RCC_OscConfig+0x338>)
 80059f4:	400a      	ands	r2, r1
 80059f6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d014      	beq.n	8005a2a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a00:	f7fd fc08 	bl	8003214 <HAL_GetTick>
 8005a04:	0003      	movs	r3, r0
 8005a06:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a0a:	f7fd fc03 	bl	8003214 <HAL_GetTick>
 8005a0e:	0002      	movs	r2, r0
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b64      	cmp	r3, #100	@ 0x64
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e2e9      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a1c:	4b93      	ldr	r3, [pc, #588]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	2380      	movs	r3, #128	@ 0x80
 8005a22:	029b      	lsls	r3, r3, #10
 8005a24:	4013      	ands	r3, r2
 8005a26:	d0f0      	beq.n	8005a0a <HAL_RCC_OscConfig+0xce>
 8005a28:	e015      	b.n	8005a56 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2a:	f7fd fbf3 	bl	8003214 <HAL_GetTick>
 8005a2e:	0003      	movs	r3, r0
 8005a30:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a34:	f7fd fbee 	bl	8003214 <HAL_GetTick>
 8005a38:	0002      	movs	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b64      	cmp	r3, #100	@ 0x64
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e2d4      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a46:	4b89      	ldr	r3, [pc, #548]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	2380      	movs	r3, #128	@ 0x80
 8005a4c:	029b      	lsls	r3, r3, #10
 8005a4e:	4013      	ands	r3, r2
 8005a50:	d1f0      	bne.n	8005a34 <HAL_RCC_OscConfig+0xf8>
 8005a52:	e000      	b.n	8005a56 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a54:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	d100      	bne.n	8005a62 <HAL_RCC_OscConfig+0x126>
 8005a60:	e099      	b.n	8005b96 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a62:	4b82      	ldr	r3, [pc, #520]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	2238      	movs	r2, #56	@ 0x38
 8005a68:	4013      	ands	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a6c:	4b7f      	ldr	r3, [pc, #508]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	2203      	movs	r2, #3
 8005a72:	4013      	ands	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	2b10      	cmp	r3, #16
 8005a7a:	d102      	bne.n	8005a82 <HAL_RCC_OscConfig+0x146>
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d002      	beq.n	8005a88 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d135      	bne.n	8005af4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a88:	4b78      	ldr	r3, [pc, #480]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	2380      	movs	r3, #128	@ 0x80
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	4013      	ands	r3, r2
 8005a92:	d005      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x164>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e2a7      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa0:	4b72      	ldr	r3, [pc, #456]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4a74      	ldr	r2, [pc, #464]	@ (8005c78 <HAL_RCC_OscConfig+0x33c>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	0019      	movs	r1, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	021a      	lsls	r2, r3, #8
 8005ab0:	4b6e      	ldr	r3, [pc, #440]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d112      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005abc:	4b6b      	ldr	r3, [pc, #428]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a6e      	ldr	r2, [pc, #440]	@ (8005c7c <HAL_RCC_OscConfig+0x340>)
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	0019      	movs	r1, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691a      	ldr	r2, [r3, #16]
 8005aca:	4b68      	ldr	r3, [pc, #416]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005acc:	430a      	orrs	r2, r1
 8005ace:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005ad0:	4b66      	ldr	r3, [pc, #408]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	0adb      	lsrs	r3, r3, #11
 8005ad6:	2207      	movs	r2, #7
 8005ad8:	4013      	ands	r3, r2
 8005ada:	4a69      	ldr	r2, [pc, #420]	@ (8005c80 <HAL_RCC_OscConfig+0x344>)
 8005adc:	40da      	lsrs	r2, r3
 8005ade:	4b69      	ldr	r3, [pc, #420]	@ (8005c84 <HAL_RCC_OscConfig+0x348>)
 8005ae0:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ae2:	4b69      	ldr	r3, [pc, #420]	@ (8005c88 <HAL_RCC_OscConfig+0x34c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f7fd fb38 	bl	800315c <HAL_InitTick>
 8005aec:	1e03      	subs	r3, r0, #0
 8005aee:	d051      	beq.n	8005b94 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e27d      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d030      	beq.n	8005b5e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005afc:	4b5b      	ldr	r3, [pc, #364]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a5e      	ldr	r2, [pc, #376]	@ (8005c7c <HAL_RCC_OscConfig+0x340>)
 8005b02:	4013      	ands	r3, r2
 8005b04:	0019      	movs	r1, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691a      	ldr	r2, [r3, #16]
 8005b0a:	4b58      	ldr	r3, [pc, #352]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005b10:	4b56      	ldr	r3, [pc, #344]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	4b55      	ldr	r3, [pc, #340]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005b16:	2180      	movs	r1, #128	@ 0x80
 8005b18:	0049      	lsls	r1, r1, #1
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1e:	f7fd fb79 	bl	8003214 <HAL_GetTick>
 8005b22:	0003      	movs	r3, r0
 8005b24:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b28:	f7fd fb74 	bl	8003214 <HAL_GetTick>
 8005b2c:	0002      	movs	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e25a      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b3a:	4b4c      	ldr	r3, [pc, #304]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	2380      	movs	r3, #128	@ 0x80
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	4013      	ands	r3, r2
 8005b44:	d0f0      	beq.n	8005b28 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b46:	4b49      	ldr	r3, [pc, #292]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	4a4b      	ldr	r2, [pc, #300]	@ (8005c78 <HAL_RCC_OscConfig+0x33c>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	0019      	movs	r1, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	021a      	lsls	r2, r3, #8
 8005b56:	4b45      	ldr	r3, [pc, #276]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	605a      	str	r2, [r3, #4]
 8005b5c:	e01b      	b.n	8005b96 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005b5e:	4b43      	ldr	r3, [pc, #268]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4b42      	ldr	r3, [pc, #264]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005b64:	4949      	ldr	r1, [pc, #292]	@ (8005c8c <HAL_RCC_OscConfig+0x350>)
 8005b66:	400a      	ands	r2, r1
 8005b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b6a:	f7fd fb53 	bl	8003214 <HAL_GetTick>
 8005b6e:	0003      	movs	r3, r0
 8005b70:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b72:	e008      	b.n	8005b86 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b74:	f7fd fb4e 	bl	8003214 <HAL_GetTick>
 8005b78:	0002      	movs	r2, r0
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e234      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b86:	4b39      	ldr	r3, [pc, #228]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	2380      	movs	r3, #128	@ 0x80
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	4013      	ands	r3, r2
 8005b90:	d1f0      	bne.n	8005b74 <HAL_RCC_OscConfig+0x238>
 8005b92:	e000      	b.n	8005b96 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b94:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2208      	movs	r2, #8
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	d047      	beq.n	8005c30 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005ba0:	4b32      	ldr	r3, [pc, #200]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	2238      	movs	r2, #56	@ 0x38
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	2b18      	cmp	r3, #24
 8005baa:	d10a      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005bac:	4b2f      	ldr	r3, [pc, #188]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d03c      	beq.n	8005c30 <HAL_RCC_OscConfig+0x2f4>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d138      	bne.n	8005c30 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e216      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d019      	beq.n	8005bfe <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005bca:	4b28      	ldr	r3, [pc, #160]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005bcc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005bce:	4b27      	ldr	r3, [pc, #156]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd6:	f7fd fb1d 	bl	8003214 <HAL_GetTick>
 8005bda:	0003      	movs	r3, r0
 8005bdc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bde:	e008      	b.n	8005bf2 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005be0:	f7fd fb18 	bl	8003214 <HAL_GetTick>
 8005be4:	0002      	movs	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e1fe      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	d0f1      	beq.n	8005be0 <HAL_RCC_OscConfig+0x2a4>
 8005bfc:	e018      	b.n	8005c30 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005c00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005c02:	4b1a      	ldr	r3, [pc, #104]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005c04:	2101      	movs	r1, #1
 8005c06:	438a      	bics	r2, r1
 8005c08:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0a:	f7fd fb03 	bl	8003214 <HAL_GetTick>
 8005c0e:	0003      	movs	r3, r0
 8005c10:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c14:	f7fd fafe 	bl	8003214 <HAL_GetTick>
 8005c18:	0002      	movs	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e1e4      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c26:	4b11      	ldr	r3, [pc, #68]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	d1f1      	bne.n	8005c14 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2204      	movs	r2, #4
 8005c36:	4013      	ands	r3, r2
 8005c38:	d100      	bne.n	8005c3c <HAL_RCC_OscConfig+0x300>
 8005c3a:	e0c7      	b.n	8005dcc <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c3c:	231f      	movs	r3, #31
 8005c3e:	18fb      	adds	r3, r7, r3
 8005c40:	2200      	movs	r2, #0
 8005c42:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005c44:	4b09      	ldr	r3, [pc, #36]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	2238      	movs	r2, #56	@ 0x38
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b20      	cmp	r3, #32
 8005c4e:	d11f      	bne.n	8005c90 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005c50:	4b06      	ldr	r3, [pc, #24]	@ (8005c6c <HAL_RCC_OscConfig+0x330>)
 8005c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c54:	2202      	movs	r2, #2
 8005c56:	4013      	ands	r3, r2
 8005c58:	d100      	bne.n	8005c5c <HAL_RCC_OscConfig+0x320>
 8005c5a:	e0b7      	b.n	8005dcc <HAL_RCC_OscConfig+0x490>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d000      	beq.n	8005c66 <HAL_RCC_OscConfig+0x32a>
 8005c64:	e0b2      	b.n	8005dcc <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e1c2      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
 8005c6a:	46c0      	nop			@ (mov r8, r8)
 8005c6c:	40021000 	.word	0x40021000
 8005c70:	fffeffff 	.word	0xfffeffff
 8005c74:	fffbffff 	.word	0xfffbffff
 8005c78:	ffff80ff 	.word	0xffff80ff
 8005c7c:	ffffc7ff 	.word	0xffffc7ff
 8005c80:	00f42400 	.word	0x00f42400
 8005c84:	20000000 	.word	0x20000000
 8005c88:	20000004 	.word	0x20000004
 8005c8c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c90:	4bb5      	ldr	r3, [pc, #724]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005c92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c94:	2380      	movs	r3, #128	@ 0x80
 8005c96:	055b      	lsls	r3, r3, #21
 8005c98:	4013      	ands	r3, r2
 8005c9a:	d101      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x364>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e000      	b.n	8005ca2 <HAL_RCC_OscConfig+0x366>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d011      	beq.n	8005cca <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005ca6:	4bb0      	ldr	r3, [pc, #704]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005ca8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005caa:	4baf      	ldr	r3, [pc, #700]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005cac:	2180      	movs	r1, #128	@ 0x80
 8005cae:	0549      	lsls	r1, r1, #21
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005cb4:	4bac      	ldr	r3, [pc, #688]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005cb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cb8:	2380      	movs	r3, #128	@ 0x80
 8005cba:	055b      	lsls	r3, r3, #21
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005cc2:	231f      	movs	r3, #31
 8005cc4:	18fb      	adds	r3, r7, r3
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cca:	4ba8      	ldr	r3, [pc, #672]	@ (8005f6c <HAL_RCC_OscConfig+0x630>)
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	2380      	movs	r3, #128	@ 0x80
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	d11a      	bne.n	8005d0c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cd6:	4ba5      	ldr	r3, [pc, #660]	@ (8005f6c <HAL_RCC_OscConfig+0x630>)
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4ba4      	ldr	r3, [pc, #656]	@ (8005f6c <HAL_RCC_OscConfig+0x630>)
 8005cdc:	2180      	movs	r1, #128	@ 0x80
 8005cde:	0049      	lsls	r1, r1, #1
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005ce4:	f7fd fa96 	bl	8003214 <HAL_GetTick>
 8005ce8:	0003      	movs	r3, r0
 8005cea:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cec:	e008      	b.n	8005d00 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cee:	f7fd fa91 	bl	8003214 <HAL_GetTick>
 8005cf2:	0002      	movs	r2, r0
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e177      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d00:	4b9a      	ldr	r3, [pc, #616]	@ (8005f6c <HAL_RCC_OscConfig+0x630>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	2380      	movs	r3, #128	@ 0x80
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	4013      	ands	r3, r2
 8005d0a:	d0f0      	beq.n	8005cee <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d106      	bne.n	8005d22 <HAL_RCC_OscConfig+0x3e6>
 8005d14:	4b94      	ldr	r3, [pc, #592]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005d16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d18:	4b93      	ldr	r3, [pc, #588]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d20:	e01c      	b.n	8005d5c <HAL_RCC_OscConfig+0x420>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	2b05      	cmp	r3, #5
 8005d28:	d10c      	bne.n	8005d44 <HAL_RCC_OscConfig+0x408>
 8005d2a:	4b8f      	ldr	r3, [pc, #572]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005d2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d2e:	4b8e      	ldr	r3, [pc, #568]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005d30:	2104      	movs	r1, #4
 8005d32:	430a      	orrs	r2, r1
 8005d34:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d36:	4b8c      	ldr	r3, [pc, #560]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005d38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d3a:	4b8b      	ldr	r3, [pc, #556]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d42:	e00b      	b.n	8005d5c <HAL_RCC_OscConfig+0x420>
 8005d44:	4b88      	ldr	r3, [pc, #544]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005d46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d48:	4b87      	ldr	r3, [pc, #540]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	438a      	bics	r2, r1
 8005d4e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d50:	4b85      	ldr	r3, [pc, #532]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005d52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d54:	4b84      	ldr	r3, [pc, #528]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005d56:	2104      	movs	r1, #4
 8005d58:	438a      	bics	r2, r1
 8005d5a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d014      	beq.n	8005d8e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d64:	f7fd fa56 	bl	8003214 <HAL_GetTick>
 8005d68:	0003      	movs	r3, r0
 8005d6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d6c:	e009      	b.n	8005d82 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d6e:	f7fd fa51 	bl	8003214 <HAL_GetTick>
 8005d72:	0002      	movs	r2, r0
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	4a7d      	ldr	r2, [pc, #500]	@ (8005f70 <HAL_RCC_OscConfig+0x634>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e136      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d82:	4b79      	ldr	r3, [pc, #484]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d86:	2202      	movs	r2, #2
 8005d88:	4013      	ands	r3, r2
 8005d8a:	d0f0      	beq.n	8005d6e <HAL_RCC_OscConfig+0x432>
 8005d8c:	e013      	b.n	8005db6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8e:	f7fd fa41 	bl	8003214 <HAL_GetTick>
 8005d92:	0003      	movs	r3, r0
 8005d94:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d96:	e009      	b.n	8005dac <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d98:	f7fd fa3c 	bl	8003214 <HAL_GetTick>
 8005d9c:	0002      	movs	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	4a73      	ldr	r2, [pc, #460]	@ (8005f70 <HAL_RCC_OscConfig+0x634>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d901      	bls.n	8005dac <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e121      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005dac:	4b6e      	ldr	r3, [pc, #440]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005db0:	2202      	movs	r2, #2
 8005db2:	4013      	ands	r3, r2
 8005db4:	d1f0      	bne.n	8005d98 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005db6:	231f      	movs	r3, #31
 8005db8:	18fb      	adds	r3, r7, r3
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d105      	bne.n	8005dcc <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005dc0:	4b69      	ldr	r3, [pc, #420]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005dc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005dc4:	4b68      	ldr	r3, [pc, #416]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005dc6:	496b      	ldr	r1, [pc, #428]	@ (8005f74 <HAL_RCC_OscConfig+0x638>)
 8005dc8:	400a      	ands	r2, r1
 8005dca:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	d039      	beq.n	8005e4a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d01b      	beq.n	8005e16 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005dde:	4b62      	ldr	r3, [pc, #392]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	4b61      	ldr	r3, [pc, #388]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005de4:	2180      	movs	r1, #128	@ 0x80
 8005de6:	03c9      	lsls	r1, r1, #15
 8005de8:	430a      	orrs	r2, r1
 8005dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dec:	f7fd fa12 	bl	8003214 <HAL_GetTick>
 8005df0:	0003      	movs	r3, r0
 8005df2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005df4:	e008      	b.n	8005e08 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005df6:	f7fd fa0d 	bl	8003214 <HAL_GetTick>
 8005dfa:	0002      	movs	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e0f3      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005e08:	4b57      	ldr	r3, [pc, #348]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	2380      	movs	r3, #128	@ 0x80
 8005e0e:	041b      	lsls	r3, r3, #16
 8005e10:	4013      	ands	r3, r2
 8005e12:	d0f0      	beq.n	8005df6 <HAL_RCC_OscConfig+0x4ba>
 8005e14:	e019      	b.n	8005e4a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e16:	4b54      	ldr	r3, [pc, #336]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	4b53      	ldr	r3, [pc, #332]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005e1c:	4956      	ldr	r1, [pc, #344]	@ (8005f78 <HAL_RCC_OscConfig+0x63c>)
 8005e1e:	400a      	ands	r2, r1
 8005e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e22:	f7fd f9f7 	bl	8003214 <HAL_GetTick>
 8005e26:	0003      	movs	r3, r0
 8005e28:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005e2a:	e008      	b.n	8005e3e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e2c:	f7fd f9f2 	bl	8003214 <HAL_GetTick>
 8005e30:	0002      	movs	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e0d8      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005e3e:	4b4a      	ldr	r3, [pc, #296]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	2380      	movs	r3, #128	@ 0x80
 8005e44:	041b      	lsls	r3, r3, #16
 8005e46:	4013      	ands	r3, r2
 8005e48:	d1f0      	bne.n	8005e2c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d100      	bne.n	8005e54 <HAL_RCC_OscConfig+0x518>
 8005e52:	e0cc      	b.n	8005fee <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e54:	4b44      	ldr	r3, [pc, #272]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	2238      	movs	r2, #56	@ 0x38
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	2b10      	cmp	r3, #16
 8005e5e:	d100      	bne.n	8005e62 <HAL_RCC_OscConfig+0x526>
 8005e60:	e07b      	b.n	8005f5a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d156      	bne.n	8005f18 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	4b3e      	ldr	r3, [pc, #248]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005e70:	4942      	ldr	r1, [pc, #264]	@ (8005f7c <HAL_RCC_OscConfig+0x640>)
 8005e72:	400a      	ands	r2, r1
 8005e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e76:	f7fd f9cd 	bl	8003214 <HAL_GetTick>
 8005e7a:	0003      	movs	r3, r0
 8005e7c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e80:	f7fd f9c8 	bl	8003214 <HAL_GetTick>
 8005e84:	0002      	movs	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e0ae      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e92:	4b35      	ldr	r3, [pc, #212]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	2380      	movs	r3, #128	@ 0x80
 8005e98:	049b      	lsls	r3, r3, #18
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	d1f0      	bne.n	8005e80 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e9e:	4b32      	ldr	r3, [pc, #200]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	4a37      	ldr	r2, [pc, #220]	@ (8005f80 <HAL_RCC_OscConfig+0x644>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	0019      	movs	r1, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb6:	021b      	lsls	r3, r3, #8
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	4b26      	ldr	r3, [pc, #152]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ed2:	4b25      	ldr	r3, [pc, #148]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	4b24      	ldr	r3, [pc, #144]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005ed8:	2180      	movs	r1, #128	@ 0x80
 8005eda:	0449      	lsls	r1, r1, #17
 8005edc:	430a      	orrs	r2, r1
 8005ede:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005ee0:	4b21      	ldr	r3, [pc, #132]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	4b20      	ldr	r3, [pc, #128]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005ee6:	2180      	movs	r1, #128	@ 0x80
 8005ee8:	0549      	lsls	r1, r1, #21
 8005eea:	430a      	orrs	r2, r1
 8005eec:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eee:	f7fd f991 	bl	8003214 <HAL_GetTick>
 8005ef2:	0003      	movs	r3, r0
 8005ef4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ef6:	e008      	b.n	8005f0a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ef8:	f7fd f98c 	bl	8003214 <HAL_GetTick>
 8005efc:	0002      	movs	r2, r0
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e072      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f0a:	4b17      	ldr	r3, [pc, #92]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	2380      	movs	r3, #128	@ 0x80
 8005f10:	049b      	lsls	r3, r3, #18
 8005f12:	4013      	ands	r3, r2
 8005f14:	d0f0      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x5bc>
 8005f16:	e06a      	b.n	8005fee <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f18:	4b13      	ldr	r3, [pc, #76]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	4b12      	ldr	r3, [pc, #72]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005f1e:	4917      	ldr	r1, [pc, #92]	@ (8005f7c <HAL_RCC_OscConfig+0x640>)
 8005f20:	400a      	ands	r2, r1
 8005f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f24:	f7fd f976 	bl	8003214 <HAL_GetTick>
 8005f28:	0003      	movs	r3, r0
 8005f2a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f2e:	f7fd f971 	bl	8003214 <HAL_GetTick>
 8005f32:	0002      	movs	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e057      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f40:	4b09      	ldr	r3, [pc, #36]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	2380      	movs	r3, #128	@ 0x80
 8005f46:	049b      	lsls	r3, r3, #18
 8005f48:	4013      	ands	r3, r2
 8005f4a:	d1f0      	bne.n	8005f2e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005f4c:	4b06      	ldr	r3, [pc, #24]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	4b05      	ldr	r3, [pc, #20]	@ (8005f68 <HAL_RCC_OscConfig+0x62c>)
 8005f52:	490c      	ldr	r1, [pc, #48]	@ (8005f84 <HAL_RCC_OscConfig+0x648>)
 8005f54:	400a      	ands	r2, r1
 8005f56:	60da      	str	r2, [r3, #12]
 8005f58:	e049      	b.n	8005fee <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d112      	bne.n	8005f88 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e044      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
 8005f66:	46c0      	nop			@ (mov r8, r8)
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	40007000 	.word	0x40007000
 8005f70:	00001388 	.word	0x00001388
 8005f74:	efffffff 	.word	0xefffffff
 8005f78:	ffbfffff 	.word	0xffbfffff
 8005f7c:	feffffff 	.word	0xfeffffff
 8005f80:	11c1808c 	.word	0x11c1808c
 8005f84:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005f88:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff8 <HAL_RCC_OscConfig+0x6bc>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2203      	movs	r2, #3
 8005f92:	401a      	ands	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d126      	bne.n	8005fea <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2270      	movs	r2, #112	@ 0x70
 8005fa0:	401a      	ands	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d11f      	bne.n	8005fea <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	23fe      	movs	r3, #254	@ 0xfe
 8005fae:	01db      	lsls	r3, r3, #7
 8005fb0:	401a      	ands	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d116      	bne.n	8005fea <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	23f8      	movs	r3, #248	@ 0xf8
 8005fc0:	039b      	lsls	r3, r3, #14
 8005fc2:	401a      	ands	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d10e      	bne.n	8005fea <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	23e0      	movs	r3, #224	@ 0xe0
 8005fd0:	051b      	lsls	r3, r3, #20
 8005fd2:	401a      	ands	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d106      	bne.n	8005fea <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	0f5b      	lsrs	r3, r3, #29
 8005fe0:	075a      	lsls	r2, r3, #29
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d001      	beq.n	8005fee <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e000      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	b008      	add	sp, #32
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	40021000 	.word	0x40021000

08005ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e0e9      	b.n	80061e4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006010:	4b76      	ldr	r3, [pc, #472]	@ (80061ec <HAL_RCC_ClockConfig+0x1f0>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2207      	movs	r2, #7
 8006016:	4013      	ands	r3, r2
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d91e      	bls.n	800605c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601e:	4b73      	ldr	r3, [pc, #460]	@ (80061ec <HAL_RCC_ClockConfig+0x1f0>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2207      	movs	r2, #7
 8006024:	4393      	bics	r3, r2
 8006026:	0019      	movs	r1, r3
 8006028:	4b70      	ldr	r3, [pc, #448]	@ (80061ec <HAL_RCC_ClockConfig+0x1f0>)
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006030:	f7fd f8f0 	bl	8003214 <HAL_GetTick>
 8006034:	0003      	movs	r3, r0
 8006036:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006038:	e009      	b.n	800604e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800603a:	f7fd f8eb 	bl	8003214 <HAL_GetTick>
 800603e:	0002      	movs	r2, r0
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	4a6a      	ldr	r2, [pc, #424]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f4>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d901      	bls.n	800604e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e0ca      	b.n	80061e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800604e:	4b67      	ldr	r3, [pc, #412]	@ (80061ec <HAL_RCC_ClockConfig+0x1f0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2207      	movs	r2, #7
 8006054:	4013      	ands	r3, r2
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	429a      	cmp	r2, r3
 800605a:	d1ee      	bne.n	800603a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2202      	movs	r2, #2
 8006062:	4013      	ands	r3, r2
 8006064:	d015      	beq.n	8006092 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2204      	movs	r2, #4
 800606c:	4013      	ands	r3, r2
 800606e:	d006      	beq.n	800607e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006070:	4b60      	ldr	r3, [pc, #384]	@ (80061f4 <HAL_RCC_ClockConfig+0x1f8>)
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	4b5f      	ldr	r3, [pc, #380]	@ (80061f4 <HAL_RCC_ClockConfig+0x1f8>)
 8006076:	21e0      	movs	r1, #224	@ 0xe0
 8006078:	01c9      	lsls	r1, r1, #7
 800607a:	430a      	orrs	r2, r1
 800607c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800607e:	4b5d      	ldr	r3, [pc, #372]	@ (80061f4 <HAL_RCC_ClockConfig+0x1f8>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	4a5d      	ldr	r2, [pc, #372]	@ (80061f8 <HAL_RCC_ClockConfig+0x1fc>)
 8006084:	4013      	ands	r3, r2
 8006086:	0019      	movs	r1, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	4b59      	ldr	r3, [pc, #356]	@ (80061f4 <HAL_RCC_ClockConfig+0x1f8>)
 800608e:	430a      	orrs	r2, r1
 8006090:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2201      	movs	r2, #1
 8006098:	4013      	ands	r3, r2
 800609a:	d057      	beq.n	800614c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d107      	bne.n	80060b4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060a4:	4b53      	ldr	r3, [pc, #332]	@ (80061f4 <HAL_RCC_ClockConfig+0x1f8>)
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	2380      	movs	r3, #128	@ 0x80
 80060aa:	029b      	lsls	r3, r3, #10
 80060ac:	4013      	ands	r3, r2
 80060ae:	d12b      	bne.n	8006108 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e097      	b.n	80061e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d107      	bne.n	80060cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060bc:	4b4d      	ldr	r3, [pc, #308]	@ (80061f4 <HAL_RCC_ClockConfig+0x1f8>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	2380      	movs	r3, #128	@ 0x80
 80060c2:	049b      	lsls	r3, r3, #18
 80060c4:	4013      	ands	r3, r2
 80060c6:	d11f      	bne.n	8006108 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e08b      	b.n	80061e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d107      	bne.n	80060e4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060d4:	4b47      	ldr	r3, [pc, #284]	@ (80061f4 <HAL_RCC_ClockConfig+0x1f8>)
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	2380      	movs	r3, #128	@ 0x80
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	4013      	ands	r3, r2
 80060de:	d113      	bne.n	8006108 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e07f      	b.n	80061e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d106      	bne.n	80060fa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060ec:	4b41      	ldr	r3, [pc, #260]	@ (80061f4 <HAL_RCC_ClockConfig+0x1f8>)
 80060ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060f0:	2202      	movs	r2, #2
 80060f2:	4013      	ands	r3, r2
 80060f4:	d108      	bne.n	8006108 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e074      	b.n	80061e4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060fa:	4b3e      	ldr	r3, [pc, #248]	@ (80061f4 <HAL_RCC_ClockConfig+0x1f8>)
 80060fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060fe:	2202      	movs	r2, #2
 8006100:	4013      	ands	r3, r2
 8006102:	d101      	bne.n	8006108 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e06d      	b.n	80061e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006108:	4b3a      	ldr	r3, [pc, #232]	@ (80061f4 <HAL_RCC_ClockConfig+0x1f8>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	2207      	movs	r2, #7
 800610e:	4393      	bics	r3, r2
 8006110:	0019      	movs	r1, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	4b37      	ldr	r3, [pc, #220]	@ (80061f4 <HAL_RCC_ClockConfig+0x1f8>)
 8006118:	430a      	orrs	r2, r1
 800611a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800611c:	f7fd f87a 	bl	8003214 <HAL_GetTick>
 8006120:	0003      	movs	r3, r0
 8006122:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006124:	e009      	b.n	800613a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006126:	f7fd f875 	bl	8003214 <HAL_GetTick>
 800612a:	0002      	movs	r2, r0
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	4a2f      	ldr	r2, [pc, #188]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f4>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d901      	bls.n	800613a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e054      	b.n	80061e4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800613a:	4b2e      	ldr	r3, [pc, #184]	@ (80061f4 <HAL_RCC_ClockConfig+0x1f8>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	2238      	movs	r2, #56	@ 0x38
 8006140:	401a      	ands	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	429a      	cmp	r2, r3
 800614a:	d1ec      	bne.n	8006126 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800614c:	4b27      	ldr	r3, [pc, #156]	@ (80061ec <HAL_RCC_ClockConfig+0x1f0>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2207      	movs	r2, #7
 8006152:	4013      	ands	r3, r2
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	429a      	cmp	r2, r3
 8006158:	d21e      	bcs.n	8006198 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800615a:	4b24      	ldr	r3, [pc, #144]	@ (80061ec <HAL_RCC_ClockConfig+0x1f0>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2207      	movs	r2, #7
 8006160:	4393      	bics	r3, r2
 8006162:	0019      	movs	r1, r3
 8006164:	4b21      	ldr	r3, [pc, #132]	@ (80061ec <HAL_RCC_ClockConfig+0x1f0>)
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800616c:	f7fd f852 	bl	8003214 <HAL_GetTick>
 8006170:	0003      	movs	r3, r0
 8006172:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006174:	e009      	b.n	800618a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006176:	f7fd f84d 	bl	8003214 <HAL_GetTick>
 800617a:	0002      	movs	r2, r0
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	4a1b      	ldr	r2, [pc, #108]	@ (80061f0 <HAL_RCC_ClockConfig+0x1f4>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d901      	bls.n	800618a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e02c      	b.n	80061e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800618a:	4b18      	ldr	r3, [pc, #96]	@ (80061ec <HAL_RCC_ClockConfig+0x1f0>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2207      	movs	r2, #7
 8006190:	4013      	ands	r3, r2
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	429a      	cmp	r2, r3
 8006196:	d1ee      	bne.n	8006176 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2204      	movs	r2, #4
 800619e:	4013      	ands	r3, r2
 80061a0:	d009      	beq.n	80061b6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80061a2:	4b14      	ldr	r3, [pc, #80]	@ (80061f4 <HAL_RCC_ClockConfig+0x1f8>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	4a15      	ldr	r2, [pc, #84]	@ (80061fc <HAL_RCC_ClockConfig+0x200>)
 80061a8:	4013      	ands	r3, r2
 80061aa:	0019      	movs	r1, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68da      	ldr	r2, [r3, #12]
 80061b0:	4b10      	ldr	r3, [pc, #64]	@ (80061f4 <HAL_RCC_ClockConfig+0x1f8>)
 80061b2:	430a      	orrs	r2, r1
 80061b4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80061b6:	f000 f829 	bl	800620c <HAL_RCC_GetSysClockFreq>
 80061ba:	0001      	movs	r1, r0
 80061bc:	4b0d      	ldr	r3, [pc, #52]	@ (80061f4 <HAL_RCC_ClockConfig+0x1f8>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	0a1b      	lsrs	r3, r3, #8
 80061c2:	220f      	movs	r2, #15
 80061c4:	401a      	ands	r2, r3
 80061c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006200 <HAL_RCC_ClockConfig+0x204>)
 80061c8:	0092      	lsls	r2, r2, #2
 80061ca:	58d3      	ldr	r3, [r2, r3]
 80061cc:	221f      	movs	r2, #31
 80061ce:	4013      	ands	r3, r2
 80061d0:	000a      	movs	r2, r1
 80061d2:	40da      	lsrs	r2, r3
 80061d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006204 <HAL_RCC_ClockConfig+0x208>)
 80061d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80061d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006208 <HAL_RCC_ClockConfig+0x20c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	0018      	movs	r0, r3
 80061de:	f7fc ffbd 	bl	800315c <HAL_InitTick>
 80061e2:	0003      	movs	r3, r0
}
 80061e4:	0018      	movs	r0, r3
 80061e6:	46bd      	mov	sp, r7
 80061e8:	b004      	add	sp, #16
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	40022000 	.word	0x40022000
 80061f0:	00001388 	.word	0x00001388
 80061f4:	40021000 	.word	0x40021000
 80061f8:	fffff0ff 	.word	0xfffff0ff
 80061fc:	ffff8fff 	.word	0xffff8fff
 8006200:	080068b4 	.word	0x080068b4
 8006204:	20000000 	.word	0x20000000
 8006208:	20000004 	.word	0x20000004

0800620c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006212:	4b3c      	ldr	r3, [pc, #240]	@ (8006304 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	2238      	movs	r2, #56	@ 0x38
 8006218:	4013      	ands	r3, r2
 800621a:	d10f      	bne.n	800623c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800621c:	4b39      	ldr	r3, [pc, #228]	@ (8006304 <HAL_RCC_GetSysClockFreq+0xf8>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	0adb      	lsrs	r3, r3, #11
 8006222:	2207      	movs	r2, #7
 8006224:	4013      	ands	r3, r2
 8006226:	2201      	movs	r2, #1
 8006228:	409a      	lsls	r2, r3
 800622a:	0013      	movs	r3, r2
 800622c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800622e:	6839      	ldr	r1, [r7, #0]
 8006230:	4835      	ldr	r0, [pc, #212]	@ (8006308 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006232:	f7f9 ff67 	bl	8000104 <__udivsi3>
 8006236:	0003      	movs	r3, r0
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	e05d      	b.n	80062f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800623c:	4b31      	ldr	r3, [pc, #196]	@ (8006304 <HAL_RCC_GetSysClockFreq+0xf8>)
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	2238      	movs	r2, #56	@ 0x38
 8006242:	4013      	ands	r3, r2
 8006244:	2b08      	cmp	r3, #8
 8006246:	d102      	bne.n	800624e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006248:	4b30      	ldr	r3, [pc, #192]	@ (800630c <HAL_RCC_GetSysClockFreq+0x100>)
 800624a:	613b      	str	r3, [r7, #16]
 800624c:	e054      	b.n	80062f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800624e:	4b2d      	ldr	r3, [pc, #180]	@ (8006304 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	2238      	movs	r2, #56	@ 0x38
 8006254:	4013      	ands	r3, r2
 8006256:	2b10      	cmp	r3, #16
 8006258:	d138      	bne.n	80062cc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800625a:	4b2a      	ldr	r3, [pc, #168]	@ (8006304 <HAL_RCC_GetSysClockFreq+0xf8>)
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	2203      	movs	r2, #3
 8006260:	4013      	ands	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006264:	4b27      	ldr	r3, [pc, #156]	@ (8006304 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	091b      	lsrs	r3, r3, #4
 800626a:	2207      	movs	r2, #7
 800626c:	4013      	ands	r3, r2
 800626e:	3301      	adds	r3, #1
 8006270:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2b03      	cmp	r3, #3
 8006276:	d10d      	bne.n	8006294 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	4824      	ldr	r0, [pc, #144]	@ (800630c <HAL_RCC_GetSysClockFreq+0x100>)
 800627c:	f7f9 ff42 	bl	8000104 <__udivsi3>
 8006280:	0003      	movs	r3, r0
 8006282:	0019      	movs	r1, r3
 8006284:	4b1f      	ldr	r3, [pc, #124]	@ (8006304 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	0a1b      	lsrs	r3, r3, #8
 800628a:	227f      	movs	r2, #127	@ 0x7f
 800628c:	4013      	ands	r3, r2
 800628e:	434b      	muls	r3, r1
 8006290:	617b      	str	r3, [r7, #20]
        break;
 8006292:	e00d      	b.n	80062b0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006294:	68b9      	ldr	r1, [r7, #8]
 8006296:	481c      	ldr	r0, [pc, #112]	@ (8006308 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006298:	f7f9 ff34 	bl	8000104 <__udivsi3>
 800629c:	0003      	movs	r3, r0
 800629e:	0019      	movs	r1, r3
 80062a0:	4b18      	ldr	r3, [pc, #96]	@ (8006304 <HAL_RCC_GetSysClockFreq+0xf8>)
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	0a1b      	lsrs	r3, r3, #8
 80062a6:	227f      	movs	r2, #127	@ 0x7f
 80062a8:	4013      	ands	r3, r2
 80062aa:	434b      	muls	r3, r1
 80062ac:	617b      	str	r3, [r7, #20]
        break;
 80062ae:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80062b0:	4b14      	ldr	r3, [pc, #80]	@ (8006304 <HAL_RCC_GetSysClockFreq+0xf8>)
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	0f5b      	lsrs	r3, r3, #29
 80062b6:	2207      	movs	r2, #7
 80062b8:	4013      	ands	r3, r2
 80062ba:	3301      	adds	r3, #1
 80062bc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	6978      	ldr	r0, [r7, #20]
 80062c2:	f7f9 ff1f 	bl	8000104 <__udivsi3>
 80062c6:	0003      	movs	r3, r0
 80062c8:	613b      	str	r3, [r7, #16]
 80062ca:	e015      	b.n	80062f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80062cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006304 <HAL_RCC_GetSysClockFreq+0xf8>)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	2238      	movs	r2, #56	@ 0x38
 80062d2:	4013      	ands	r3, r2
 80062d4:	2b20      	cmp	r3, #32
 80062d6:	d103      	bne.n	80062e0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80062d8:	2380      	movs	r3, #128	@ 0x80
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	613b      	str	r3, [r7, #16]
 80062de:	e00b      	b.n	80062f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80062e0:	4b08      	ldr	r3, [pc, #32]	@ (8006304 <HAL_RCC_GetSysClockFreq+0xf8>)
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	2238      	movs	r2, #56	@ 0x38
 80062e6:	4013      	ands	r3, r2
 80062e8:	2b18      	cmp	r3, #24
 80062ea:	d103      	bne.n	80062f4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80062ec:	23fa      	movs	r3, #250	@ 0xfa
 80062ee:	01db      	lsls	r3, r3, #7
 80062f0:	613b      	str	r3, [r7, #16]
 80062f2:	e001      	b.n	80062f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80062f8:	693b      	ldr	r3, [r7, #16]
}
 80062fa:	0018      	movs	r0, r3
 80062fc:	46bd      	mov	sp, r7
 80062fe:	b006      	add	sp, #24
 8006300:	bd80      	pop	{r7, pc}
 8006302:	46c0      	nop			@ (mov r8, r8)
 8006304:	40021000 	.word	0x40021000
 8006308:	00f42400 	.word	0x00f42400
 800630c:	007a1200 	.word	0x007a1200

08006310 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006318:	2313      	movs	r3, #19
 800631a:	18fb      	adds	r3, r7, r3
 800631c:	2200      	movs	r2, #0
 800631e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006320:	2312      	movs	r3, #18
 8006322:	18fb      	adds	r3, r7, r3
 8006324:	2200      	movs	r2, #0
 8006326:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	2380      	movs	r3, #128	@ 0x80
 800632e:	029b      	lsls	r3, r3, #10
 8006330:	4013      	ands	r3, r2
 8006332:	d100      	bne.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006334:	e0ad      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006336:	2011      	movs	r0, #17
 8006338:	183b      	adds	r3, r7, r0
 800633a:	2200      	movs	r2, #0
 800633c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800633e:	4b47      	ldr	r3, [pc, #284]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006340:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006342:	2380      	movs	r3, #128	@ 0x80
 8006344:	055b      	lsls	r3, r3, #21
 8006346:	4013      	ands	r3, r2
 8006348:	d110      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800634a:	4b44      	ldr	r3, [pc, #272]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800634c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800634e:	4b43      	ldr	r3, [pc, #268]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006350:	2180      	movs	r1, #128	@ 0x80
 8006352:	0549      	lsls	r1, r1, #21
 8006354:	430a      	orrs	r2, r1
 8006356:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006358:	4b40      	ldr	r3, [pc, #256]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800635a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800635c:	2380      	movs	r3, #128	@ 0x80
 800635e:	055b      	lsls	r3, r3, #21
 8006360:	4013      	ands	r3, r2
 8006362:	60bb      	str	r3, [r7, #8]
 8006364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006366:	183b      	adds	r3, r7, r0
 8006368:	2201      	movs	r2, #1
 800636a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800636c:	4b3c      	ldr	r3, [pc, #240]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	4b3b      	ldr	r3, [pc, #236]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006372:	2180      	movs	r1, #128	@ 0x80
 8006374:	0049      	lsls	r1, r1, #1
 8006376:	430a      	orrs	r2, r1
 8006378:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800637a:	f7fc ff4b 	bl	8003214 <HAL_GetTick>
 800637e:	0003      	movs	r3, r0
 8006380:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006382:	e00b      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006384:	f7fc ff46 	bl	8003214 <HAL_GetTick>
 8006388:	0002      	movs	r2, r0
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d904      	bls.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006392:	2313      	movs	r3, #19
 8006394:	18fb      	adds	r3, r7, r3
 8006396:	2203      	movs	r2, #3
 8006398:	701a      	strb	r2, [r3, #0]
        break;
 800639a:	e005      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800639c:	4b30      	ldr	r3, [pc, #192]	@ (8006460 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	2380      	movs	r3, #128	@ 0x80
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	4013      	ands	r3, r2
 80063a6:	d0ed      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80063a8:	2313      	movs	r3, #19
 80063aa:	18fb      	adds	r3, r7, r3
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d15e      	bne.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063b2:	4b2a      	ldr	r3, [pc, #168]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80063b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80063b6:	23c0      	movs	r3, #192	@ 0xc0
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4013      	ands	r3, r2
 80063bc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d019      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d014      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063ce:	4b23      	ldr	r3, [pc, #140]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80063d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063d2:	4a24      	ldr	r2, [pc, #144]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063d8:	4b20      	ldr	r3, [pc, #128]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80063da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80063dc:	4b1f      	ldr	r3, [pc, #124]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80063de:	2180      	movs	r1, #128	@ 0x80
 80063e0:	0249      	lsls	r1, r1, #9
 80063e2:	430a      	orrs	r2, r1
 80063e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063e6:	4b1d      	ldr	r3, [pc, #116]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80063e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80063ea:	4b1c      	ldr	r3, [pc, #112]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80063ec:	491e      	ldr	r1, [pc, #120]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80063ee:	400a      	ands	r2, r1
 80063f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063f2:	4b1a      	ldr	r3, [pc, #104]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	2201      	movs	r2, #1
 80063fc:	4013      	ands	r3, r2
 80063fe:	d016      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006400:	f7fc ff08 	bl	8003214 <HAL_GetTick>
 8006404:	0003      	movs	r3, r0
 8006406:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006408:	e00c      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800640a:	f7fc ff03 	bl	8003214 <HAL_GetTick>
 800640e:	0002      	movs	r2, r0
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	4a15      	ldr	r2, [pc, #84]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d904      	bls.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800641a:	2313      	movs	r3, #19
 800641c:	18fb      	adds	r3, r7, r3
 800641e:	2203      	movs	r2, #3
 8006420:	701a      	strb	r2, [r3, #0]
            break;
 8006422:	e004      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006424:	4b0d      	ldr	r3, [pc, #52]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006428:	2202      	movs	r2, #2
 800642a:	4013      	ands	r3, r2
 800642c:	d0ed      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800642e:	2313      	movs	r3, #19
 8006430:	18fb      	adds	r3, r7, r3
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10a      	bne.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006438:	4b08      	ldr	r3, [pc, #32]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800643a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800643c:	4a09      	ldr	r2, [pc, #36]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800643e:	4013      	ands	r3, r2
 8006440:	0019      	movs	r1, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006446:	4b05      	ldr	r3, [pc, #20]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006448:	430a      	orrs	r2, r1
 800644a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800644c:	e016      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800644e:	2312      	movs	r3, #18
 8006450:	18fb      	adds	r3, r7, r3
 8006452:	2213      	movs	r2, #19
 8006454:	18ba      	adds	r2, r7, r2
 8006456:	7812      	ldrb	r2, [r2, #0]
 8006458:	701a      	strb	r2, [r3, #0]
 800645a:	e00f      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800645c:	40021000 	.word	0x40021000
 8006460:	40007000 	.word	0x40007000
 8006464:	fffffcff 	.word	0xfffffcff
 8006468:	fffeffff 	.word	0xfffeffff
 800646c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006470:	2312      	movs	r3, #18
 8006472:	18fb      	adds	r3, r7, r3
 8006474:	2213      	movs	r2, #19
 8006476:	18ba      	adds	r2, r7, r2
 8006478:	7812      	ldrb	r2, [r2, #0]
 800647a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800647c:	2311      	movs	r3, #17
 800647e:	18fb      	adds	r3, r7, r3
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d105      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006486:	4bb6      	ldr	r3, [pc, #728]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006488:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800648a:	4bb5      	ldr	r3, [pc, #724]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800648c:	49b5      	ldr	r1, [pc, #724]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800648e:	400a      	ands	r2, r1
 8006490:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2201      	movs	r2, #1
 8006498:	4013      	ands	r3, r2
 800649a:	d009      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800649c:	4bb0      	ldr	r3, [pc, #704]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800649e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a0:	2203      	movs	r2, #3
 80064a2:	4393      	bics	r3, r2
 80064a4:	0019      	movs	r1, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	4bad      	ldr	r3, [pc, #692]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80064ac:	430a      	orrs	r2, r1
 80064ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2202      	movs	r2, #2
 80064b6:	4013      	ands	r3, r2
 80064b8:	d009      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064ba:	4ba9      	ldr	r3, [pc, #676]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80064bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064be:	220c      	movs	r2, #12
 80064c0:	4393      	bics	r3, r2
 80064c2:	0019      	movs	r1, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	4ba5      	ldr	r3, [pc, #660]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80064ca:	430a      	orrs	r2, r1
 80064cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2204      	movs	r2, #4
 80064d4:	4013      	ands	r3, r2
 80064d6:	d009      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064d8:	4ba1      	ldr	r3, [pc, #644]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80064da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064dc:	2230      	movs	r2, #48	@ 0x30
 80064de:	4393      	bics	r3, r2
 80064e0:	0019      	movs	r1, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	4b9e      	ldr	r3, [pc, #632]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80064e8:	430a      	orrs	r2, r1
 80064ea:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2210      	movs	r2, #16
 80064f2:	4013      	ands	r3, r2
 80064f4:	d009      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064f6:	4b9a      	ldr	r3, [pc, #616]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80064f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064fa:	4a9b      	ldr	r2, [pc, #620]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80064fc:	4013      	ands	r3, r2
 80064fe:	0019      	movs	r1, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691a      	ldr	r2, [r3, #16]
 8006504:	4b96      	ldr	r3, [pc, #600]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006506:	430a      	orrs	r2, r1
 8006508:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	2380      	movs	r3, #128	@ 0x80
 8006510:	015b      	lsls	r3, r3, #5
 8006512:	4013      	ands	r3, r2
 8006514:	d009      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8006516:	4b92      	ldr	r3, [pc, #584]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800651a:	4a94      	ldr	r2, [pc, #592]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800651c:	4013      	ands	r3, r2
 800651e:	0019      	movs	r1, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	695a      	ldr	r2, [r3, #20]
 8006524:	4b8e      	ldr	r3, [pc, #568]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006526:	430a      	orrs	r2, r1
 8006528:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	2380      	movs	r3, #128	@ 0x80
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4013      	ands	r3, r2
 8006534:	d009      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006536:	4b8a      	ldr	r3, [pc, #552]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800653a:	4a8d      	ldr	r2, [pc, #564]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800653c:	4013      	ands	r3, r2
 800653e:	0019      	movs	r1, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006544:	4b86      	ldr	r3, [pc, #536]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006546:	430a      	orrs	r2, r1
 8006548:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	2380      	movs	r3, #128	@ 0x80
 8006550:	00db      	lsls	r3, r3, #3
 8006552:	4013      	ands	r3, r2
 8006554:	d009      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006556:	4b82      	ldr	r3, [pc, #520]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800655a:	4a86      	ldr	r2, [pc, #536]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800655c:	4013      	ands	r3, r2
 800655e:	0019      	movs	r1, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006564:	4b7e      	ldr	r3, [pc, #504]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006566:	430a      	orrs	r2, r1
 8006568:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2220      	movs	r2, #32
 8006570:	4013      	ands	r3, r2
 8006572:	d009      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006574:	4b7a      	ldr	r3, [pc, #488]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006578:	4a7f      	ldr	r2, [pc, #508]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800657a:	4013      	ands	r3, r2
 800657c:	0019      	movs	r1, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699a      	ldr	r2, [r3, #24]
 8006582:	4b77      	ldr	r3, [pc, #476]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006584:	430a      	orrs	r2, r1
 8006586:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2240      	movs	r2, #64	@ 0x40
 800658e:	4013      	ands	r3, r2
 8006590:	d009      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006592:	4b73      	ldr	r3, [pc, #460]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006596:	4a79      	ldr	r2, [pc, #484]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006598:	4013      	ands	r3, r2
 800659a:	0019      	movs	r1, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	69da      	ldr	r2, [r3, #28]
 80065a0:	4b6f      	ldr	r3, [pc, #444]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065a2:	430a      	orrs	r2, r1
 80065a4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	2380      	movs	r3, #128	@ 0x80
 80065ac:	01db      	lsls	r3, r3, #7
 80065ae:	4013      	ands	r3, r2
 80065b0:	d015      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065b2:	4b6b      	ldr	r3, [pc, #428]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	0899      	lsrs	r1, r3, #2
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065be:	4b68      	ldr	r3, [pc, #416]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065c0:	430a      	orrs	r2, r1
 80065c2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065c8:	2380      	movs	r3, #128	@ 0x80
 80065ca:	05db      	lsls	r3, r3, #23
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d106      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80065d0:	4b63      	ldr	r3, [pc, #396]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065d2:	68da      	ldr	r2, [r3, #12]
 80065d4:	4b62      	ldr	r3, [pc, #392]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065d6:	2180      	movs	r1, #128	@ 0x80
 80065d8:	0249      	lsls	r1, r1, #9
 80065da:	430a      	orrs	r2, r1
 80065dc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	2380      	movs	r3, #128	@ 0x80
 80065e4:	031b      	lsls	r3, r3, #12
 80065e6:	4013      	ands	r3, r2
 80065e8:	d009      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80065ea:	4b5d      	ldr	r3, [pc, #372]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ee:	2240      	movs	r2, #64	@ 0x40
 80065f0:	4393      	bics	r3, r2
 80065f2:	0019      	movs	r1, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065f8:	4b59      	ldr	r3, [pc, #356]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065fa:	430a      	orrs	r2, r1
 80065fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	2380      	movs	r3, #128	@ 0x80
 8006604:	039b      	lsls	r3, r3, #14
 8006606:	4013      	ands	r3, r2
 8006608:	d016      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800660a:	4b55      	ldr	r3, [pc, #340]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800660c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800660e:	4a5c      	ldr	r2, [pc, #368]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006610:	4013      	ands	r3, r2
 8006612:	0019      	movs	r1, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006618:	4b51      	ldr	r3, [pc, #324]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800661a:	430a      	orrs	r2, r1
 800661c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006622:	2380      	movs	r3, #128	@ 0x80
 8006624:	03db      	lsls	r3, r3, #15
 8006626:	429a      	cmp	r2, r3
 8006628:	d106      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800662a:	4b4d      	ldr	r3, [pc, #308]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	4b4c      	ldr	r3, [pc, #304]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006630:	2180      	movs	r1, #128	@ 0x80
 8006632:	0449      	lsls	r1, r1, #17
 8006634:	430a      	orrs	r2, r1
 8006636:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	2380      	movs	r3, #128	@ 0x80
 800663e:	03db      	lsls	r3, r3, #15
 8006640:	4013      	ands	r3, r2
 8006642:	d016      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006644:	4b46      	ldr	r3, [pc, #280]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006648:	4a4e      	ldr	r2, [pc, #312]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800664a:	4013      	ands	r3, r2
 800664c:	0019      	movs	r1, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006652:	4b43      	ldr	r3, [pc, #268]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006654:	430a      	orrs	r2, r1
 8006656:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800665c:	2380      	movs	r3, #128	@ 0x80
 800665e:	045b      	lsls	r3, r3, #17
 8006660:	429a      	cmp	r2, r3
 8006662:	d106      	bne.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006664:	4b3e      	ldr	r3, [pc, #248]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	4b3d      	ldr	r3, [pc, #244]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800666a:	2180      	movs	r1, #128	@ 0x80
 800666c:	0449      	lsls	r1, r1, #17
 800666e:	430a      	orrs	r2, r1
 8006670:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	2380      	movs	r3, #128	@ 0x80
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	4013      	ands	r3, r2
 800667c:	d014      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800667e:	4b38      	ldr	r3, [pc, #224]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006682:	2203      	movs	r2, #3
 8006684:	4393      	bics	r3, r2
 8006686:	0019      	movs	r1, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a1a      	ldr	r2, [r3, #32]
 800668c:	4b34      	ldr	r3, [pc, #208]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800668e:	430a      	orrs	r2, r1
 8006690:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d106      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800669a:	4b31      	ldr	r3, [pc, #196]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	4b30      	ldr	r3, [pc, #192]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066a0:	2180      	movs	r1, #128	@ 0x80
 80066a2:	0249      	lsls	r1, r1, #9
 80066a4:	430a      	orrs	r2, r1
 80066a6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	2380      	movs	r3, #128	@ 0x80
 80066ae:	019b      	lsls	r3, r3, #6
 80066b0:	4013      	ands	r3, r2
 80066b2:	d014      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80066b4:	4b2a      	ldr	r3, [pc, #168]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b8:	220c      	movs	r2, #12
 80066ba:	4393      	bics	r3, r2
 80066bc:	0019      	movs	r1, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066c2:	4b27      	ldr	r3, [pc, #156]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066c4:	430a      	orrs	r2, r1
 80066c6:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d106      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80066d0:	4b23      	ldr	r3, [pc, #140]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066d2:	68da      	ldr	r2, [r3, #12]
 80066d4:	4b22      	ldr	r3, [pc, #136]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066d6:	2180      	movs	r1, #128	@ 0x80
 80066d8:	0249      	lsls	r1, r1, #9
 80066da:	430a      	orrs	r2, r1
 80066dc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	2380      	movs	r3, #128	@ 0x80
 80066e4:	045b      	lsls	r3, r3, #17
 80066e6:	4013      	ands	r3, r2
 80066e8:	d016      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066ea:	4b1d      	ldr	r3, [pc, #116]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ee:	4a22      	ldr	r2, [pc, #136]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80066f0:	4013      	ands	r3, r2
 80066f2:	0019      	movs	r1, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066f8:	4b19      	ldr	r3, [pc, #100]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066fa:	430a      	orrs	r2, r1
 80066fc:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006702:	2380      	movs	r3, #128	@ 0x80
 8006704:	019b      	lsls	r3, r3, #6
 8006706:	429a      	cmp	r2, r3
 8006708:	d106      	bne.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800670a:	4b15      	ldr	r3, [pc, #84]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	4b14      	ldr	r3, [pc, #80]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006710:	2180      	movs	r1, #128	@ 0x80
 8006712:	0449      	lsls	r1, r1, #17
 8006714:	430a      	orrs	r2, r1
 8006716:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	2380      	movs	r3, #128	@ 0x80
 800671e:	049b      	lsls	r3, r3, #18
 8006720:	4013      	ands	r3, r2
 8006722:	d016      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006724:	4b0e      	ldr	r3, [pc, #56]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006728:	4a10      	ldr	r2, [pc, #64]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800672a:	4013      	ands	r3, r2
 800672c:	0019      	movs	r1, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006732:	4b0b      	ldr	r3, [pc, #44]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006734:	430a      	orrs	r2, r1
 8006736:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800673c:	2380      	movs	r3, #128	@ 0x80
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	429a      	cmp	r2, r3
 8006742:	d106      	bne.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006744:	4b06      	ldr	r3, [pc, #24]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006746:	68da      	ldr	r2, [r3, #12]
 8006748:	4b05      	ldr	r3, [pc, #20]	@ (8006760 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800674a:	2180      	movs	r1, #128	@ 0x80
 800674c:	0449      	lsls	r1, r1, #17
 800674e:	430a      	orrs	r2, r1
 8006750:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006752:	2312      	movs	r3, #18
 8006754:	18fb      	adds	r3, r7, r3
 8006756:	781b      	ldrb	r3, [r3, #0]
}
 8006758:	0018      	movs	r0, r3
 800675a:	46bd      	mov	sp, r7
 800675c:	b006      	add	sp, #24
 800675e:	bd80      	pop	{r7, pc}
 8006760:	40021000 	.word	0x40021000
 8006764:	efffffff 	.word	0xefffffff
 8006768:	fffff3ff 	.word	0xfffff3ff
 800676c:	fffffcff 	.word	0xfffffcff
 8006770:	fff3ffff 	.word	0xfff3ffff
 8006774:	ffcfffff 	.word	0xffcfffff
 8006778:	ffffcfff 	.word	0xffffcfff
 800677c:	ffff3fff 	.word	0xffff3fff
 8006780:	ffbfffff 	.word	0xffbfffff
 8006784:	feffffff 	.word	0xfeffffff

08006788 <memset>:
 8006788:	0003      	movs	r3, r0
 800678a:	1882      	adds	r2, r0, r2
 800678c:	4293      	cmp	r3, r2
 800678e:	d100      	bne.n	8006792 <memset+0xa>
 8006790:	4770      	bx	lr
 8006792:	7019      	strb	r1, [r3, #0]
 8006794:	3301      	adds	r3, #1
 8006796:	e7f9      	b.n	800678c <memset+0x4>

08006798 <__libc_init_array>:
 8006798:	b570      	push	{r4, r5, r6, lr}
 800679a:	2600      	movs	r6, #0
 800679c:	4c0c      	ldr	r4, [pc, #48]	@ (80067d0 <__libc_init_array+0x38>)
 800679e:	4d0d      	ldr	r5, [pc, #52]	@ (80067d4 <__libc_init_array+0x3c>)
 80067a0:	1b64      	subs	r4, r4, r5
 80067a2:	10a4      	asrs	r4, r4, #2
 80067a4:	42a6      	cmp	r6, r4
 80067a6:	d109      	bne.n	80067bc <__libc_init_array+0x24>
 80067a8:	2600      	movs	r6, #0
 80067aa:	f000 f819 	bl	80067e0 <_init>
 80067ae:	4c0a      	ldr	r4, [pc, #40]	@ (80067d8 <__libc_init_array+0x40>)
 80067b0:	4d0a      	ldr	r5, [pc, #40]	@ (80067dc <__libc_init_array+0x44>)
 80067b2:	1b64      	subs	r4, r4, r5
 80067b4:	10a4      	asrs	r4, r4, #2
 80067b6:	42a6      	cmp	r6, r4
 80067b8:	d105      	bne.n	80067c6 <__libc_init_array+0x2e>
 80067ba:	bd70      	pop	{r4, r5, r6, pc}
 80067bc:	00b3      	lsls	r3, r6, #2
 80067be:	58eb      	ldr	r3, [r5, r3]
 80067c0:	4798      	blx	r3
 80067c2:	3601      	adds	r6, #1
 80067c4:	e7ee      	b.n	80067a4 <__libc_init_array+0xc>
 80067c6:	00b3      	lsls	r3, r6, #2
 80067c8:	58eb      	ldr	r3, [r5, r3]
 80067ca:	4798      	blx	r3
 80067cc:	3601      	adds	r6, #1
 80067ce:	e7f2      	b.n	80067b6 <__libc_init_array+0x1e>
 80067d0:	080068f4 	.word	0x080068f4
 80067d4:	080068f4 	.word	0x080068f4
 80067d8:	080068f8 	.word	0x080068f8
 80067dc:	080068f4 	.word	0x080068f4

080067e0 <_init>:
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e2:	46c0      	nop			@ (mov r8, r8)
 80067e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e6:	bc08      	pop	{r3}
 80067e8:	469e      	mov	lr, r3
 80067ea:	4770      	bx	lr

080067ec <_fini>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	46c0      	nop			@ (mov r8, r8)
 80067f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067f2:	bc08      	pop	{r3}
 80067f4:	469e      	mov	lr, r3
 80067f6:	4770      	bx	lr
