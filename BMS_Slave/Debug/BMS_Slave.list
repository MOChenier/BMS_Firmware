
BMS_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005444  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08005504  08005504  00006504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055b4  080055b4  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080055b4  080055b4  00007010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080055b4  080055b4  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055b4  080055b4  000065b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055b8  080055b8  000065b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080055bc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001adc  20000010  080055cc  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001aec  080055cc  00007aec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a78  00000000  00000000  00007038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030a8  00000000  00000000  0001bab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  0001eb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000100d  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000350d  00000000  00000000  00021055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016551  00000000  00000000  00024562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6aea  00000000  00000000  0003aab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010159d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bd4  00000000  00000000  001015e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001061b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080054ec 	.word	0x080054ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080054ec 	.word	0x080054ec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fc76 	bl	8000b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f820 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f998 	bl	8000560 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000230:	f000 f864 	bl	80002fc <MX_ADC1_Init>
  MX_FDCAN2_Init();
 8000234:	f000 f8cc 	bl	80003d0 <MX_FDCAN2_Init>
  MX_I2C3_Init();
 8000238:	f000 f952 	bl	80004e0 <MX_I2C3_Init>
  MX_I2C2_Init();
 800023c:	f000 f910 	bl	8000460 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000240:	f002 feb0 	bl	8002fa4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000244:	4a06      	ldr	r2, [pc, #24]	@ (8000260 <main+0x40>)
 8000246:	4b07      	ldr	r3, [pc, #28]	@ (8000264 <main+0x44>)
 8000248:	2100      	movs	r1, #0
 800024a:	0018      	movs	r0, r3
 800024c:	f002 fef2 	bl	8003034 <osThreadNew>
 8000250:	0002      	movs	r2, r0
 8000252:	4b05      	ldr	r3, [pc, #20]	@ (8000268 <main+0x48>)
 8000254:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000256:	f002 fec7 	bl	8002fe8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800025a:	46c0      	nop			@ (mov r8, r8)
 800025c:	e7fd      	b.n	800025a <main+0x3a>
 800025e:	46c0      	nop			@ (mov r8, r8)
 8000260:	08005528 	.word	0x08005528
 8000264:	0800078d 	.word	0x0800078d
 8000268:	2000019c 	.word	0x2000019c

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b590      	push	{r4, r7, lr}
 800026e:	b095      	sub	sp, #84	@ 0x54
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	2414      	movs	r4, #20
 8000274:	193b      	adds	r3, r7, r4
 8000276:	0018      	movs	r0, r3
 8000278:	233c      	movs	r3, #60	@ 0x3c
 800027a:	001a      	movs	r2, r3
 800027c:	2100      	movs	r1, #0
 800027e:	f005 f8ff 	bl	8005480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	0018      	movs	r0, r3
 8000286:	2310      	movs	r3, #16
 8000288:	001a      	movs	r2, r3
 800028a:	2100      	movs	r1, #0
 800028c:	f005 f8f8 	bl	8005480 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000290:	2380      	movs	r3, #128	@ 0x80
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	0018      	movs	r0, r3
 8000296:	f001 fea5 	bl	8001fe4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029a:	193b      	adds	r3, r7, r4
 800029c:	2202      	movs	r2, #2
 800029e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	2280      	movs	r2, #128	@ 0x80
 80002a4:	0052      	lsls	r2, r2, #1
 80002a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	2200      	movs	r2, #0
 80002ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ae:	193b      	adds	r3, r7, r4
 80002b0:	2240      	movs	r2, #64	@ 0x40
 80002b2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b4:	193b      	adds	r3, r7, r4
 80002b6:	2200      	movs	r2, #0
 80002b8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ba:	193b      	adds	r3, r7, r4
 80002bc:	0018      	movs	r0, r3
 80002be:	f001 fed1 	bl	8002064 <HAL_RCC_OscConfig>
 80002c2:	1e03      	subs	r3, r0, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002c6:	f000 fa69 	bl	800079c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2207      	movs	r2, #7
 80002ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2100      	movs	r1, #0
 80002e6:	0018      	movs	r0, r3
 80002e8:	f002 fa1c 	bl	8002724 <HAL_RCC_ClockConfig>
 80002ec:	1e03      	subs	r3, r0, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002f0:	f000 fa54 	bl	800079c <Error_Handler>
  }
}
 80002f4:	46c0      	nop			@ (mov r8, r8)
 80002f6:	46bd      	mov	sp, r7
 80002f8:	b015      	add	sp, #84	@ 0x54
 80002fa:	bd90      	pop	{r4, r7, pc}

080002fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	0018      	movs	r0, r3
 8000306:	230c      	movs	r3, #12
 8000308:	001a      	movs	r2, r3
 800030a:	2100      	movs	r1, #0
 800030c:	f005 f8b8 	bl	8005480 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000310:	4b2d      	ldr	r3, [pc, #180]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000312:	4a2e      	ldr	r2, [pc, #184]	@ (80003cc <MX_ADC1_Init+0xd0>)
 8000314:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000316:	4b2c      	ldr	r3, [pc, #176]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000318:	2280      	movs	r2, #128	@ 0x80
 800031a:	05d2      	lsls	r2, r2, #23
 800031c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800031e:	4b2a      	ldr	r3, [pc, #168]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000324:	4b28      	ldr	r3, [pc, #160]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800032a:	4b27      	ldr	r3, [pc, #156]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000330:	4b25      	ldr	r3, [pc, #148]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000332:	2204      	movs	r2, #4
 8000334:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000336:	4b24      	ldr	r3, [pc, #144]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000338:	2200      	movs	r2, #0
 800033a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800033c:	4b22      	ldr	r3, [pc, #136]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 800033e:	2200      	movs	r2, #0
 8000340:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000342:	4b21      	ldr	r3, [pc, #132]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000344:	2200      	movs	r2, #0
 8000346:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000348:	4b1f      	ldr	r3, [pc, #124]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 800034a:	2201      	movs	r2, #1
 800034c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800034e:	4b1e      	ldr	r3, [pc, #120]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000350:	2220      	movs	r2, #32
 8000352:	2100      	movs	r1, #0
 8000354:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000356:	4b1c      	ldr	r3, [pc, #112]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000358:	2200      	movs	r2, #0
 800035a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800035c:	4b1a      	ldr	r3, [pc, #104]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 800035e:	2200      	movs	r2, #0
 8000360:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000362:	4b19      	ldr	r3, [pc, #100]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000364:	222c      	movs	r2, #44	@ 0x2c
 8000366:	2100      	movs	r1, #0
 8000368:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800036a:	4b17      	ldr	r3, [pc, #92]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 800036c:	2200      	movs	r2, #0
 800036e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000370:	4b15      	ldr	r3, [pc, #84]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000372:	2200      	movs	r2, #0
 8000374:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000376:	4b14      	ldr	r3, [pc, #80]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000378:	2200      	movs	r2, #0
 800037a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800037c:	4b12      	ldr	r3, [pc, #72]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 800037e:	223c      	movs	r2, #60	@ 0x3c
 8000380:	2100      	movs	r1, #0
 8000382:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000384:	4b10      	ldr	r3, [pc, #64]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 8000386:	2200      	movs	r2, #0
 8000388:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800038a:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 800038c:	0018      	movs	r0, r3
 800038e:	f000 fd5b 	bl	8000e48 <HAL_ADC_Init>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000396:	f000 fa01 	bl	800079c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2201      	movs	r2, #1
 800039e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ac:	1d3a      	adds	r2, r7, #4
 80003ae:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <MX_ADC1_Init+0xcc>)
 80003b0:	0011      	movs	r1, r2
 80003b2:	0018      	movs	r0, r3
 80003b4:	f000 fef0 	bl	8001198 <HAL_ADC_ConfigChannel>
 80003b8:	1e03      	subs	r3, r0, #0
 80003ba:	d001      	beq.n	80003c0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80003bc:	f000 f9ee 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003c0:	46c0      	nop			@ (mov r8, r8)
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b004      	add	sp, #16
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	2000002c 	.word	0x2000002c
 80003cc:	40012400 	.word	0x40012400

080003d0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80003d4:	4b20      	ldr	r3, [pc, #128]	@ (8000458 <MX_FDCAN2_Init+0x88>)
 80003d6:	4a21      	ldr	r2, [pc, #132]	@ (800045c <MX_FDCAN2_Init+0x8c>)
 80003d8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80003da:	4b1f      	ldr	r3, [pc, #124]	@ (8000458 <MX_FDCAN2_Init+0x88>)
 80003dc:	2200      	movs	r2, #0
 80003de:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80003e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000458 <MX_FDCAN2_Init+0x88>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80003e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000458 <MX_FDCAN2_Init+0x88>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80003ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000458 <MX_FDCAN2_Init+0x88>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80003f2:	4b19      	ldr	r3, [pc, #100]	@ (8000458 <MX_FDCAN2_Init+0x88>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80003f8:	4b17      	ldr	r3, [pc, #92]	@ (8000458 <MX_FDCAN2_Init+0x88>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80003fe:	4b16      	ldr	r3, [pc, #88]	@ (8000458 <MX_FDCAN2_Init+0x88>)
 8000400:	2210      	movs	r2, #16
 8000402:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000404:	4b14      	ldr	r3, [pc, #80]	@ (8000458 <MX_FDCAN2_Init+0x88>)
 8000406:	2201      	movs	r2, #1
 8000408:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 800040a:	4b13      	ldr	r3, [pc, #76]	@ (8000458 <MX_FDCAN2_Init+0x88>)
 800040c:	2201      	movs	r2, #1
 800040e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 8000410:	4b11      	ldr	r3, [pc, #68]	@ (8000458 <MX_FDCAN2_Init+0x88>)
 8000412:	2201      	movs	r2, #1
 8000414:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000416:	4b10      	ldr	r3, [pc, #64]	@ (8000458 <MX_FDCAN2_Init+0x88>)
 8000418:	2201      	movs	r2, #1
 800041a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800041c:	4b0e      	ldr	r3, [pc, #56]	@ (8000458 <MX_FDCAN2_Init+0x88>)
 800041e:	2201      	movs	r2, #1
 8000420:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000422:	4b0d      	ldr	r3, [pc, #52]	@ (8000458 <MX_FDCAN2_Init+0x88>)
 8000424:	2201      	movs	r2, #1
 8000426:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000428:	4b0b      	ldr	r3, [pc, #44]	@ (8000458 <MX_FDCAN2_Init+0x88>)
 800042a:	2201      	movs	r2, #1
 800042c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800042e:	4b0a      	ldr	r3, [pc, #40]	@ (8000458 <MX_FDCAN2_Init+0x88>)
 8000430:	2200      	movs	r2, #0
 8000432:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000434:	4b08      	ldr	r3, [pc, #32]	@ (8000458 <MX_FDCAN2_Init+0x88>)
 8000436:	2200      	movs	r2, #0
 8000438:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800043a:	4b07      	ldr	r3, [pc, #28]	@ (8000458 <MX_FDCAN2_Init+0x88>)
 800043c:	2200      	movs	r2, #0
 800043e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000440:	4b05      	ldr	r3, [pc, #20]	@ (8000458 <MX_FDCAN2_Init+0x88>)
 8000442:	0018      	movs	r0, r3
 8000444:	f001 f934 	bl	80016b0 <HAL_FDCAN_Init>
 8000448:	1e03      	subs	r3, r0, #0
 800044a:	d001      	beq.n	8000450 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 800044c:	f000 f9a6 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000450:	46c0      	nop			@ (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	20000090 	.word	0x20000090
 800045c:	40006800 	.word	0x40006800

08000460 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000464:	4b1b      	ldr	r3, [pc, #108]	@ (80004d4 <MX_I2C2_Init+0x74>)
 8000466:	4a1c      	ldr	r2, [pc, #112]	@ (80004d8 <MX_I2C2_Init+0x78>)
 8000468:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800046a:	4b1a      	ldr	r3, [pc, #104]	@ (80004d4 <MX_I2C2_Init+0x74>)
 800046c:	4a1b      	ldr	r2, [pc, #108]	@ (80004dc <MX_I2C2_Init+0x7c>)
 800046e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000470:	4b18      	ldr	r3, [pc, #96]	@ (80004d4 <MX_I2C2_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000476:	4b17      	ldr	r3, [pc, #92]	@ (80004d4 <MX_I2C2_Init+0x74>)
 8000478:	2201      	movs	r2, #1
 800047a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800047c:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <MX_I2C2_Init+0x74>)
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000482:	4b14      	ldr	r3, [pc, #80]	@ (80004d4 <MX_I2C2_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000488:	4b12      	ldr	r3, [pc, #72]	@ (80004d4 <MX_I2C2_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800048e:	4b11      	ldr	r3, [pc, #68]	@ (80004d4 <MX_I2C2_Init+0x74>)
 8000490:	2200      	movs	r2, #0
 8000492:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000494:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <MX_I2C2_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800049a:	4b0e      	ldr	r3, [pc, #56]	@ (80004d4 <MX_I2C2_Init+0x74>)
 800049c:	0018      	movs	r0, r3
 800049e:	f001 fc63 	bl	8001d68 <HAL_I2C_Init>
 80004a2:	1e03      	subs	r3, r0, #0
 80004a4:	d001      	beq.n	80004aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80004a6:	f000 f979 	bl	800079c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004aa:	4b0a      	ldr	r3, [pc, #40]	@ (80004d4 <MX_I2C2_Init+0x74>)
 80004ac:	2100      	movs	r1, #0
 80004ae:	0018      	movs	r0, r3
 80004b0:	f001 fd00 	bl	8001eb4 <HAL_I2CEx_ConfigAnalogFilter>
 80004b4:	1e03      	subs	r3, r0, #0
 80004b6:	d001      	beq.n	80004bc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80004b8:	f000 f970 	bl	800079c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80004bc:	4b05      	ldr	r3, [pc, #20]	@ (80004d4 <MX_I2C2_Init+0x74>)
 80004be:	2100      	movs	r1, #0
 80004c0:	0018      	movs	r0, r3
 80004c2:	f001 fd43 	bl	8001f4c <HAL_I2CEx_ConfigDigitalFilter>
 80004c6:	1e03      	subs	r3, r0, #0
 80004c8:	d001      	beq.n	80004ce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80004ca:	f000 f967 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	200000f4 	.word	0x200000f4
 80004d8:	40005800 	.word	0x40005800
 80004dc:	00503d58 	.word	0x00503d58

080004e0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80004e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000554 <MX_I2C3_Init+0x74>)
 80004e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000558 <MX_I2C3_Init+0x78>)
 80004e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 80004ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000554 <MX_I2C3_Init+0x74>)
 80004ec:	4a1b      	ldr	r2, [pc, #108]	@ (800055c <MX_I2C3_Init+0x7c>)
 80004ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80004f0:	4b18      	ldr	r3, [pc, #96]	@ (8000554 <MX_I2C3_Init+0x74>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004f6:	4b17      	ldr	r3, [pc, #92]	@ (8000554 <MX_I2C3_Init+0x74>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004fc:	4b15      	ldr	r3, [pc, #84]	@ (8000554 <MX_I2C3_Init+0x74>)
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000502:	4b14      	ldr	r3, [pc, #80]	@ (8000554 <MX_I2C3_Init+0x74>)
 8000504:	2200      	movs	r2, #0
 8000506:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000508:	4b12      	ldr	r3, [pc, #72]	@ (8000554 <MX_I2C3_Init+0x74>)
 800050a:	2200      	movs	r2, #0
 800050c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800050e:	4b11      	ldr	r3, [pc, #68]	@ (8000554 <MX_I2C3_Init+0x74>)
 8000510:	2200      	movs	r2, #0
 8000512:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000514:	4b0f      	ldr	r3, [pc, #60]	@ (8000554 <MX_I2C3_Init+0x74>)
 8000516:	2200      	movs	r2, #0
 8000518:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800051a:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <MX_I2C3_Init+0x74>)
 800051c:	0018      	movs	r0, r3
 800051e:	f001 fc23 	bl	8001d68 <HAL_I2C_Init>
 8000522:	1e03      	subs	r3, r0, #0
 8000524:	d001      	beq.n	800052a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000526:	f000 f939 	bl	800079c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800052a:	4b0a      	ldr	r3, [pc, #40]	@ (8000554 <MX_I2C3_Init+0x74>)
 800052c:	2100      	movs	r1, #0
 800052e:	0018      	movs	r0, r3
 8000530:	f001 fcc0 	bl	8001eb4 <HAL_I2CEx_ConfigAnalogFilter>
 8000534:	1e03      	subs	r3, r0, #0
 8000536:	d001      	beq.n	800053c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000538:	f000 f930 	bl	800079c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800053c:	4b05      	ldr	r3, [pc, #20]	@ (8000554 <MX_I2C3_Init+0x74>)
 800053e:	2100      	movs	r1, #0
 8000540:	0018      	movs	r0, r3
 8000542:	f001 fd03 	bl	8001f4c <HAL_I2CEx_ConfigDigitalFilter>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d001      	beq.n	800054e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800054a:	f000 f927 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000148 	.word	0x20000148
 8000558:	40008800 	.word	0x40008800
 800055c:	00503d58 	.word	0x00503d58

08000560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b08b      	sub	sp, #44	@ 0x2c
 8000564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	2414      	movs	r4, #20
 8000568:	193b      	adds	r3, r7, r4
 800056a:	0018      	movs	r0, r3
 800056c:	2314      	movs	r3, #20
 800056e:	001a      	movs	r2, r3
 8000570:	2100      	movs	r1, #0
 8000572:	f004 ff85 	bl	8005480 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b7e      	ldr	r3, [pc, #504]	@ (8000770 <MX_GPIO_Init+0x210>)
 8000578:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800057a:	4b7d      	ldr	r3, [pc, #500]	@ (8000770 <MX_GPIO_Init+0x210>)
 800057c:	2104      	movs	r1, #4
 800057e:	430a      	orrs	r2, r1
 8000580:	635a      	str	r2, [r3, #52]	@ 0x34
 8000582:	4b7b      	ldr	r3, [pc, #492]	@ (8000770 <MX_GPIO_Init+0x210>)
 8000584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000586:	2204      	movs	r2, #4
 8000588:	4013      	ands	r3, r2
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800058e:	4b78      	ldr	r3, [pc, #480]	@ (8000770 <MX_GPIO_Init+0x210>)
 8000590:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000592:	4b77      	ldr	r3, [pc, #476]	@ (8000770 <MX_GPIO_Init+0x210>)
 8000594:	2120      	movs	r1, #32
 8000596:	430a      	orrs	r2, r1
 8000598:	635a      	str	r2, [r3, #52]	@ 0x34
 800059a:	4b75      	ldr	r3, [pc, #468]	@ (8000770 <MX_GPIO_Init+0x210>)
 800059c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800059e:	2220      	movs	r2, #32
 80005a0:	4013      	ands	r3, r2
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b72      	ldr	r3, [pc, #456]	@ (8000770 <MX_GPIO_Init+0x210>)
 80005a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005aa:	4b71      	ldr	r3, [pc, #452]	@ (8000770 <MX_GPIO_Init+0x210>)
 80005ac:	2101      	movs	r1, #1
 80005ae:	430a      	orrs	r2, r1
 80005b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80005b2:	4b6f      	ldr	r3, [pc, #444]	@ (8000770 <MX_GPIO_Init+0x210>)
 80005b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005b6:	2201      	movs	r2, #1
 80005b8:	4013      	ands	r3, r2
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b6c      	ldr	r3, [pc, #432]	@ (8000770 <MX_GPIO_Init+0x210>)
 80005c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005c2:	4b6b      	ldr	r3, [pc, #428]	@ (8000770 <MX_GPIO_Init+0x210>)
 80005c4:	2102      	movs	r1, #2
 80005c6:	430a      	orrs	r2, r1
 80005c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80005ca:	4b69      	ldr	r3, [pc, #420]	@ (8000770 <MX_GPIO_Init+0x210>)
 80005cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005ce:	2202      	movs	r2, #2
 80005d0:	4013      	ands	r3, r2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BalanceEnableCell0_Pin|BalanceEnableCell1_Pin, GPIO_PIN_RESET);
 80005d6:	23c0      	movs	r3, #192	@ 0xc0
 80005d8:	021b      	lsls	r3, r3, #8
 80005da:	4866      	ldr	r0, [pc, #408]	@ (8000774 <MX_GPIO_Init+0x214>)
 80005dc:	2200      	movs	r2, #0
 80005de:	0019      	movs	r1, r3
 80005e0:	f001 fba4 	bl	8001d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BalanceEnableCell2_Pin|BalanceEnableCell3_Pin|BalanceEnableCell4_Pin|BalanceEnableCell5_Pin
 80005e4:	4964      	ldr	r1, [pc, #400]	@ (8000778 <MX_GPIO_Init+0x218>)
 80005e6:	23a0      	movs	r3, #160	@ 0xa0
 80005e8:	05db      	lsls	r3, r3, #23
 80005ea:	2200      	movs	r2, #0
 80005ec:	0018      	movs	r0, r3
 80005ee:	f001 fb9d 	bl	8001d2c <HAL_GPIO_WritePin>
                          |BalanceEnableCell6_Pin|BalanceEnableCell7_Pin|BalanceEnableCell10_Pin|BalanceEnableCell11_Pin
                          |BalanceEnableCell12_Pin|BalanceEnableCell13_Pin|BalanceEnableCell14_Pin|YELLOW_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BalanceEnableCell8_Pin|BalanceEnableCell9_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 80005f2:	4962      	ldr	r1, [pc, #392]	@ (800077c <MX_GPIO_Init+0x21c>)
 80005f4:	4b62      	ldr	r3, [pc, #392]	@ (8000780 <MX_GPIO_Init+0x220>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	0018      	movs	r0, r3
 80005fa:	f001 fb97 	bl	8001d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BMS_BOOT_Pin */
  GPIO_InitStruct.Pin = BMS_BOOT_Pin;
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	2280      	movs	r2, #128	@ 0x80
 8000602:	0192      	lsls	r2, r2, #6
 8000604:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000606:	193b      	adds	r3, r7, r4
 8000608:	2200      	movs	r2, #0
 800060a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BMS_BOOT_GPIO_Port, &GPIO_InitStruct);
 8000612:	193b      	adds	r3, r7, r4
 8000614:	4a57      	ldr	r2, [pc, #348]	@ (8000774 <MX_GPIO_Init+0x214>)
 8000616:	0019      	movs	r1, r3
 8000618:	0010      	movs	r0, r2
 800061a:	f001 fa1b 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : BalanceEnableCell0_Pin BalanceEnableCell1_Pin */
  GPIO_InitStruct.Pin = BalanceEnableCell0_Pin|BalanceEnableCell1_Pin;
 800061e:	0021      	movs	r1, r4
 8000620:	187b      	adds	r3, r7, r1
 8000622:	22c0      	movs	r2, #192	@ 0xc0
 8000624:	0212      	lsls	r2, r2, #8
 8000626:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	000c      	movs	r4, r1
 800062a:	193b      	adds	r3, r7, r4
 800062c:	2201      	movs	r2, #1
 800062e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000630:	193b      	adds	r3, r7, r4
 8000632:	2201      	movs	r2, #1
 8000634:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	193b      	adds	r3, r7, r4
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800063c:	193b      	adds	r3, r7, r4
 800063e:	4a4d      	ldr	r2, [pc, #308]	@ (8000774 <MX_GPIO_Init+0x214>)
 8000640:	0019      	movs	r1, r3
 8000642:	0010      	movs	r0, r2
 8000644:	f001 fa06 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000648:	193b      	adds	r3, r7, r4
 800064a:	2202      	movs	r2, #2
 800064c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064e:	193b      	adds	r3, r7, r4
 8000650:	2202      	movs	r2, #2
 8000652:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	193b      	adds	r3, r7, r4
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	193b      	adds	r3, r7, r4
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_OSC;
 8000660:	193b      	adds	r3, r7, r4
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000666:	193b      	adds	r3, r7, r4
 8000668:	4a46      	ldr	r2, [pc, #280]	@ (8000784 <MX_GPIO_Init+0x224>)
 800066a:	0019      	movs	r1, r3
 800066c:	0010      	movs	r0, r2
 800066e:	f001 f9f1 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : BalanceEnableCell2_Pin BalanceEnableCell3_Pin BalanceEnableCell4_Pin BalanceEnableCell5_Pin
                           BalanceEnableCell6_Pin BalanceEnableCell7_Pin BalanceEnableCell10_Pin BalanceEnableCell11_Pin
                           BalanceEnableCell13_Pin YELLOW_LED_Pin */
  GPIO_InitStruct.Pin = BalanceEnableCell2_Pin|BalanceEnableCell3_Pin|BalanceEnableCell4_Pin|BalanceEnableCell5_Pin
 8000672:	193b      	adds	r3, r7, r4
 8000674:	4a44      	ldr	r2, [pc, #272]	@ (8000788 <MX_GPIO_Init+0x228>)
 8000676:	601a      	str	r2, [r3, #0]
                          |BalanceEnableCell6_Pin|BalanceEnableCell7_Pin|BalanceEnableCell10_Pin|BalanceEnableCell11_Pin
                          |BalanceEnableCell13_Pin|YELLOW_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	193b      	adds	r3, r7, r4
 800067a:	2201      	movs	r2, #1
 800067c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2201      	movs	r2, #1
 8000682:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	193b      	adds	r3, r7, r4
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068a:	193a      	adds	r2, r7, r4
 800068c:	23a0      	movs	r3, #160	@ 0xa0
 800068e:	05db      	lsls	r3, r3, #23
 8000690:	0011      	movs	r1, r2
 8000692:	0018      	movs	r0, r3
 8000694:	f001 f9de 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : BalanceEnableCell8_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = BalanceEnableCell8_Pin|RED_LED_Pin;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2224      	movs	r2, #36	@ 0x24
 800069c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	2201      	movs	r2, #1
 80006a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	2201      	movs	r2, #1
 80006a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	4a33      	ldr	r2, [pc, #204]	@ (8000780 <MX_GPIO_Init+0x220>)
 80006b4:	0019      	movs	r1, r3
 80006b6:	0010      	movs	r0, r2
 80006b8:	f001 f9cc 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80006bc:	0021      	movs	r1, r4
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	22c0      	movs	r2, #192	@ 0xc0
 80006c2:	0112      	lsls	r2, r2, #4
 80006c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c6:	000c      	movs	r4, r1
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2202      	movs	r2, #2
 80006cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2204      	movs	r2, #4
 80006de:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	4a27      	ldr	r2, [pc, #156]	@ (8000780 <MX_GPIO_Init+0x220>)
 80006e4:	0019      	movs	r1, r3
 80006e6:	0010      	movs	r0, r2
 80006e8:	f001 f9b4 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BalanceEnableCell9_Pin */
  GPIO_InitStruct.Pin = BalanceEnableCell9_Pin;
 80006ec:	0021      	movs	r1, r4
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2280      	movs	r2, #128	@ 0x80
 80006f2:	0152      	lsls	r2, r2, #5
 80006f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	000c      	movs	r4, r1
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2201      	movs	r2, #1
 80006fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BalanceEnableCell9_GPIO_Port, &GPIO_InitStruct);
 800070a:	193b      	adds	r3, r7, r4
 800070c:	4a1c      	ldr	r2, [pc, #112]	@ (8000780 <MX_GPIO_Init+0x220>)
 800070e:	0019      	movs	r1, r3
 8000710:	0010      	movs	r0, r2
 8000712:	f001 f99f 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_Alert_Pin */
  GPIO_InitStruct.Pin = BMS_Alert_Pin;
 8000716:	0021      	movs	r1, r4
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2280      	movs	r2, #128	@ 0x80
 800071c:	0212      	lsls	r2, r2, #8
 800071e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2288      	movs	r2, #136	@ 0x88
 8000724:	0352      	lsls	r2, r2, #13
 8000726:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BMS_Alert_GPIO_Port, &GPIO_InitStruct);
 800072e:	000c      	movs	r4, r1
 8000730:	187b      	adds	r3, r7, r1
 8000732:	4a13      	ldr	r2, [pc, #76]	@ (8000780 <MX_GPIO_Init+0x220>)
 8000734:	0019      	movs	r1, r3
 8000736:	0010      	movs	r0, r2
 8000738:	f001 f98c 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : BalanceEnableCell12_Pin BalanceEnableCell14_Pin */
  GPIO_InitStruct.Pin = BalanceEnableCell12_Pin|BalanceEnableCell14_Pin;
 800073c:	0021      	movs	r1, r4
 800073e:	187b      	adds	r3, r7, r1
 8000740:	22a0      	movs	r2, #160	@ 0xa0
 8000742:	0152      	lsls	r2, r2, #5
 8000744:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2201      	movs	r2, #1
 800074a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	187a      	adds	r2, r7, r1
 800075a:	23a0      	movs	r3, #160	@ 0xa0
 800075c:	05db      	lsls	r3, r3, #23
 800075e:	0011      	movs	r1, r2
 8000760:	0018      	movs	r0, r3
 8000762:	f001 f977 	bl	8001a54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b00b      	add	sp, #44	@ 0x2c
 800076c:	bd90      	pop	{r4, r7, pc}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	40021000 	.word	0x40021000
 8000774:	50000800 	.word	0x50000800
 8000778:	00009ffc 	.word	0x00009ffc
 800077c:	00001024 	.word	0x00001024
 8000780:	50000400 	.word	0x50000400
 8000784:	50001400 	.word	0x50001400
 8000788:	00008bfc 	.word	0x00008bfc

0800078c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000794:	2001      	movs	r0, #1
 8000796:	f002 fce3 	bl	8003160 <osDelay>
 800079a:	e7fb      	b.n	8000794 <StartDefaultTask+0x8>

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	46c0      	nop			@ (mov r8, r8)
 80007a6:	e7fd      	b.n	80007a4 <Error_Handler+0x8>

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <HAL_MspInit+0x5c>)
 80007b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007b2:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <HAL_MspInit+0x5c>)
 80007b4:	2101      	movs	r1, #1
 80007b6:	430a      	orrs	r2, r1
 80007b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <HAL_MspInit+0x5c>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007be:	2201      	movs	r2, #1
 80007c0:	4013      	ands	r3, r2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <HAL_MspInit+0x5c>)
 80007c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <HAL_MspInit+0x5c>)
 80007cc:	2180      	movs	r1, #128	@ 0x80
 80007ce:	0549      	lsls	r1, r1, #21
 80007d0:	430a      	orrs	r2, r1
 80007d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <HAL_MspInit+0x5c>)
 80007d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007d8:	2380      	movs	r3, #128	@ 0x80
 80007da:	055b      	lsls	r3, r3, #21
 80007dc:	4013      	ands	r3, r2
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80007e2:	2302      	movs	r3, #2
 80007e4:	425b      	negs	r3, r3
 80007e6:	2200      	movs	r2, #0
 80007e8:	2103      	movs	r1, #3
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 ff3e 	bl	800166c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80007f0:	23c0      	movs	r3, #192	@ 0xc0
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	0018      	movs	r0, r3
 80007f6:	f000 fa13 	bl	8000c20 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b002      	add	sp, #8
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	40021000 	.word	0x40021000

08000808 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b08b      	sub	sp, #44	@ 0x2c
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	2414      	movs	r4, #20
 8000812:	193b      	adds	r3, r7, r4
 8000814:	0018      	movs	r0, r3
 8000816:	2314      	movs	r3, #20
 8000818:	001a      	movs	r2, r3
 800081a:	2100      	movs	r1, #0
 800081c:	f004 fe30 	bl	8005480 <memset>
  if(hadc->Instance==ADC1)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a18      	ldr	r2, [pc, #96]	@ (8000888 <HAL_ADC_MspInit+0x80>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d129      	bne.n	800087e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800082a:	4b18      	ldr	r3, [pc, #96]	@ (800088c <HAL_ADC_MspInit+0x84>)
 800082c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800082e:	4b17      	ldr	r3, [pc, #92]	@ (800088c <HAL_ADC_MspInit+0x84>)
 8000830:	2180      	movs	r1, #128	@ 0x80
 8000832:	0349      	lsls	r1, r1, #13
 8000834:	430a      	orrs	r2, r1
 8000836:	641a      	str	r2, [r3, #64]	@ 0x40
 8000838:	4b14      	ldr	r3, [pc, #80]	@ (800088c <HAL_ADC_MspInit+0x84>)
 800083a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800083c:	2380      	movs	r3, #128	@ 0x80
 800083e:	035b      	lsls	r3, r3, #13
 8000840:	4013      	ands	r3, r2
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b11      	ldr	r3, [pc, #68]	@ (800088c <HAL_ADC_MspInit+0x84>)
 8000848:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800084a:	4b10      	ldr	r3, [pc, #64]	@ (800088c <HAL_ADC_MspInit+0x84>)
 800084c:	2101      	movs	r1, #1
 800084e:	430a      	orrs	r2, r1
 8000850:	635a      	str	r2, [r3, #52]	@ 0x34
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <HAL_ADC_MspInit+0x84>)
 8000854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000856:	2201      	movs	r2, #1
 8000858:	4013      	ands	r3, r2
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = BalanceThermistor1_Pin|BalanceThermistor2_Pin;
 800085e:	193b      	adds	r3, r7, r4
 8000860:	2203      	movs	r2, #3
 8000862:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000864:	193b      	adds	r3, r7, r4
 8000866:	2203      	movs	r2, #3
 8000868:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	193b      	adds	r3, r7, r4
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	193a      	adds	r2, r7, r4
 8000872:	23a0      	movs	r3, #160	@ 0xa0
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	0011      	movs	r1, r2
 8000878:	0018      	movs	r0, r3
 800087a:	f001 f8eb 	bl	8001a54 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800087e:	46c0      	nop			@ (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b00b      	add	sp, #44	@ 0x2c
 8000884:	bd90      	pop	{r4, r7, pc}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	40012400 	.word	0x40012400
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b09d      	sub	sp, #116	@ 0x74
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	235c      	movs	r3, #92	@ 0x5c
 800089a:	18fb      	adds	r3, r7, r3
 800089c:	0018      	movs	r0, r3
 800089e:	2314      	movs	r3, #20
 80008a0:	001a      	movs	r2, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	f004 fdec 	bl	8005480 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a8:	2410      	movs	r4, #16
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	0018      	movs	r0, r3
 80008ae:	234c      	movs	r3, #76	@ 0x4c
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f004 fde4 	bl	8005480 <memset>
  if(hfdcan->Instance==FDCAN2)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a22      	ldr	r2, [pc, #136]	@ (8000948 <HAL_FDCAN_MspInit+0xb8>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d13e      	bne.n	8000940 <HAL_FDCAN_MspInit+0xb0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	2280      	movs	r2, #128	@ 0x80
 80008c6:	0492      	lsls	r2, r2, #18
 80008c8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	2200      	movs	r2, #0
 80008ce:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	0018      	movs	r0, r3
 80008d4:	f002 f8b0 	bl	8002a38 <HAL_RCCEx_PeriphCLKConfig>
 80008d8:	1e03      	subs	r3, r0, #0
 80008da:	d001      	beq.n	80008e0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80008dc:	f7ff ff5e 	bl	800079c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80008e0:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <HAL_FDCAN_MspInit+0xbc>)
 80008e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008e4:	4b19      	ldr	r3, [pc, #100]	@ (800094c <HAL_FDCAN_MspInit+0xbc>)
 80008e6:	2180      	movs	r1, #128	@ 0x80
 80008e8:	0149      	lsls	r1, r1, #5
 80008ea:	430a      	orrs	r2, r1
 80008ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008ee:	4b17      	ldr	r3, [pc, #92]	@ (800094c <HAL_FDCAN_MspInit+0xbc>)
 80008f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008f2:	2380      	movs	r3, #128	@ 0x80
 80008f4:	015b      	lsls	r3, r3, #5
 80008f6:	4013      	ands	r3, r2
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fc:	4b13      	ldr	r3, [pc, #76]	@ (800094c <HAL_FDCAN_MspInit+0xbc>)
 80008fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000900:	4b12      	ldr	r3, [pc, #72]	@ (800094c <HAL_FDCAN_MspInit+0xbc>)
 8000902:	2102      	movs	r1, #2
 8000904:	430a      	orrs	r2, r1
 8000906:	635a      	str	r2, [r3, #52]	@ 0x34
 8000908:	4b10      	ldr	r3, [pc, #64]	@ (800094c <HAL_FDCAN_MspInit+0xbc>)
 800090a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800090c:	2202      	movs	r2, #2
 800090e:	4013      	ands	r3, r2
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB0     ------> FDCAN2_RX
    PB1     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000914:	215c      	movs	r1, #92	@ 0x5c
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2203      	movs	r2, #3
 800091a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2202      	movs	r2, #2
 8000920:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2203      	movs	r2, #3
 8000932:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	187b      	adds	r3, r7, r1
 8000936:	4a06      	ldr	r2, [pc, #24]	@ (8000950 <HAL_FDCAN_MspInit+0xc0>)
 8000938:	0019      	movs	r1, r3
 800093a:	0010      	movs	r0, r2
 800093c:	f001 f88a 	bl	8001a54 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8000940:	46c0      	nop			@ (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b01d      	add	sp, #116	@ 0x74
 8000946:	bd90      	pop	{r4, r7, pc}
 8000948:	40006800 	.word	0x40006800
 800094c:	40021000 	.word	0x40021000
 8000950:	50000400 	.word	0x50000400

08000954 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b09f      	sub	sp, #124	@ 0x7c
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	2364      	movs	r3, #100	@ 0x64
 800095e:	18fb      	adds	r3, r7, r3
 8000960:	0018      	movs	r0, r3
 8000962:	2314      	movs	r3, #20
 8000964:	001a      	movs	r2, r3
 8000966:	2100      	movs	r1, #0
 8000968:	f004 fd8a 	bl	8005480 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800096c:	2418      	movs	r4, #24
 800096e:	193b      	adds	r3, r7, r4
 8000970:	0018      	movs	r0, r3
 8000972:	234c      	movs	r3, #76	@ 0x4c
 8000974:	001a      	movs	r2, r3
 8000976:	2100      	movs	r1, #0
 8000978:	f004 fd82 	bl	8005480 <memset>
  if(hi2c->Instance==I2C2)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a3d      	ldr	r2, [pc, #244]	@ (8000a78 <HAL_I2C_MspInit+0x124>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d13f      	bne.n	8000a06 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000986:	193b      	adds	r3, r7, r4
 8000988:	2240      	movs	r2, #64	@ 0x40
 800098a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800098c:	193b      	adds	r3, r7, r4
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000992:	193b      	adds	r3, r7, r4
 8000994:	0018      	movs	r0, r3
 8000996:	f002 f84f 	bl	8002a38 <HAL_RCCEx_PeriphCLKConfig>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d001      	beq.n	80009a2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800099e:	f7ff fefd 	bl	800079c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4b36      	ldr	r3, [pc, #216]	@ (8000a7c <HAL_I2C_MspInit+0x128>)
 80009a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009a6:	4b35      	ldr	r3, [pc, #212]	@ (8000a7c <HAL_I2C_MspInit+0x128>)
 80009a8:	2102      	movs	r1, #2
 80009aa:	430a      	orrs	r2, r1
 80009ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80009ae:	4b33      	ldr	r3, [pc, #204]	@ (8000a7c <HAL_I2C_MspInit+0x128>)
 80009b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009b2:	2202      	movs	r2, #2
 80009b4:	4013      	ands	r3, r2
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BMS_SCL_Pin|BMS_SDA_Pin;
 80009ba:	2164      	movs	r1, #100	@ 0x64
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	22c0      	movs	r2, #192	@ 0xc0
 80009c0:	01d2      	lsls	r2, r2, #7
 80009c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2212      	movs	r2, #18
 80009c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2206      	movs	r2, #6
 80009da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	4a28      	ldr	r2, [pc, #160]	@ (8000a80 <HAL_I2C_MspInit+0x12c>)
 80009e0:	0019      	movs	r1, r3
 80009e2:	0010      	movs	r0, r2
 80009e4:	f001 f836 	bl	8001a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009e8:	4b24      	ldr	r3, [pc, #144]	@ (8000a7c <HAL_I2C_MspInit+0x128>)
 80009ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009ec:	4b23      	ldr	r3, [pc, #140]	@ (8000a7c <HAL_I2C_MspInit+0x128>)
 80009ee:	2180      	movs	r1, #128	@ 0x80
 80009f0:	03c9      	lsls	r1, r1, #15
 80009f2:	430a      	orrs	r2, r1
 80009f4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009f6:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <HAL_I2C_MspInit+0x128>)
 80009f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009fa:	2380      	movs	r3, #128	@ 0x80
 80009fc:	03db      	lsls	r3, r3, #15
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000a04:	e034      	b.n	8000a70 <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000a84 <HAL_I2C_MspInit+0x130>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d12f      	bne.n	8000a70 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a10:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <HAL_I2C_MspInit+0x128>)
 8000a12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a14:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <HAL_I2C_MspInit+0x128>)
 8000a16:	2102      	movs	r1, #2
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a1c:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <HAL_I2C_MspInit+0x128>)
 8000a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a20:	2202      	movs	r2, #2
 8000a22:	4013      	ands	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000a28:	2164      	movs	r1, #100	@ 0x64
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2218      	movs	r2, #24
 8000a2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2212      	movs	r2, #18
 8000a34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C3;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2206      	movs	r2, #6
 8000a46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8000a80 <HAL_I2C_MspInit+0x12c>)
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	0010      	movs	r0, r2
 8000a50:	f001 f800 	bl	8001a54 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000a54:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <HAL_I2C_MspInit+0x128>)
 8000a56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a58:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <HAL_I2C_MspInit+0x128>)
 8000a5a:	2180      	movs	r1, #128	@ 0x80
 8000a5c:	0409      	lsls	r1, r1, #16
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <HAL_I2C_MspInit+0x128>)
 8000a64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a66:	2380      	movs	r3, #128	@ 0x80
 8000a68:	041b      	lsls	r3, r3, #16
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
}
 8000a70:	46c0      	nop			@ (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b01f      	add	sp, #124	@ 0x7c
 8000a76:	bd90      	pop	{r4, r7, pc}
 8000a78:	40005800 	.word	0x40005800
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	50000400 	.word	0x50000400
 8000a84:	40008800 	.word	0x40008800

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a8c:	46c0      	nop			@ (mov r8, r8)
 8000a8e:	e7fd      	b.n	8000a8c <NMI_Handler+0x4>

08000a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a94:	46c0      	nop			@ (mov r8, r8)
 8000a96:	e7fd      	b.n	8000a94 <HardFault_Handler+0x4>

08000a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9c:	f000 f8a4 	bl	8000be8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000aa0:	f003 fe18 	bl	80046d4 <xTaskGetSchedulerState>
 8000aa4:	0003      	movs	r3, r0
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d001      	beq.n	8000aae <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000aaa:	f004 faf5 	bl	8005098 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	46c0      	nop			@ (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ac0:	480d      	ldr	r0, [pc, #52]	@ (8000af8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ac2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ac4:	f7ff fff6 	bl	8000ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac8:	480c      	ldr	r0, [pc, #48]	@ (8000afc <LoopForever+0x6>)
  ldr r1, =_edata
 8000aca:	490d      	ldr	r1, [pc, #52]	@ (8000b00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000acc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b04 <LoopForever+0xe>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a0a      	ldr	r2, [pc, #40]	@ (8000b08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae0:	4c0a      	ldr	r4, [pc, #40]	@ (8000b0c <LoopForever+0x16>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aee:	f004 fccf 	bl	8005490 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000af2:	f7ff fb95 	bl	8000220 <main>

08000af6 <LoopForever>:

LoopForever:
  b LoopForever
 8000af6:	e7fe      	b.n	8000af6 <LoopForever>
  ldr   r0, =_estack
 8000af8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b04:	080055bc 	.word	0x080055bc
  ldr r2, =_sbss
 8000b08:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b0c:	20001aec 	.word	0x20001aec

08000b10 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC1_COMP_IRQHandler>
	...

08000b14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b20:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <HAL_Init+0x3c>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <HAL_Init+0x3c>)
 8000b26:	2180      	movs	r1, #128	@ 0x80
 8000b28:	0049      	lsls	r1, r1, #1
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b2e:	2003      	movs	r0, #3
 8000b30:	f000 f810 	bl	8000b54 <HAL_InitTick>
 8000b34:	1e03      	subs	r3, r0, #0
 8000b36:	d003      	beq.n	8000b40 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	e001      	b.n	8000b44 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b40:	f7ff fe32 	bl	80007a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	781b      	ldrb	r3, [r3, #0]
}
 8000b48:	0018      	movs	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b002      	add	sp, #8
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40022000 	.word	0x40022000

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	18fb      	adds	r3, r7, r3
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b64:	4b1d      	ldr	r3, [pc, #116]	@ (8000bdc <HAL_InitTick+0x88>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d02b      	beq.n	8000bc4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <HAL_InitTick+0x8c>)
 8000b6e:	681c      	ldr	r4, [r3, #0]
 8000b70:	4b1a      	ldr	r3, [pc, #104]	@ (8000bdc <HAL_InitTick+0x88>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	0019      	movs	r1, r3
 8000b76:	23fa      	movs	r3, #250	@ 0xfa
 8000b78:	0098      	lsls	r0, r3, #2
 8000b7a:	f7ff fac5 	bl	8000108 <__udivsi3>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	0019      	movs	r1, r3
 8000b82:	0020      	movs	r0, r4
 8000b84:	f7ff fac0 	bl	8000108 <__udivsi3>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 fd83 	bl	8001696 <HAL_SYSTICK_Config>
 8000b90:	1e03      	subs	r3, r0, #0
 8000b92:	d112      	bne.n	8000bba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	d80a      	bhi.n	8000bb0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	425b      	negs	r3, r3
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f000 fd62 	bl	800166c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8000be4 <HAL_InitTick+0x90>)
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	e00d      	b.n	8000bcc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	18fb      	adds	r3, r7, r3
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	e008      	b.n	8000bcc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bba:	230f      	movs	r3, #15
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	701a      	strb	r2, [r3, #0]
 8000bc2:	e003      	b.n	8000bcc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	18fb      	adds	r3, r7, r3
 8000bc8:	2201      	movs	r2, #1
 8000bca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000bcc:	230f      	movs	r3, #15
 8000bce:	18fb      	adds	r3, r7, r3
 8000bd0:	781b      	ldrb	r3, [r3, #0]
}
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b005      	add	sp, #20
 8000bd8:	bd90      	pop	{r4, r7, pc}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000004 	.word	0x20000004

08000be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bec:	4b05      	ldr	r3, [pc, #20]	@ (8000c04 <HAL_IncTick+0x1c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <HAL_IncTick+0x20>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	18d2      	adds	r2, r2, r3
 8000bf8:	4b03      	ldr	r3, [pc, #12]	@ (8000c08 <HAL_IncTick+0x20>)
 8000bfa:	601a      	str	r2, [r3, #0]
}
 8000bfc:	46c0      	nop			@ (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	20000008 	.word	0x20000008
 8000c08:	200001a0 	.word	0x200001a0

08000c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b02      	ldr	r3, [pc, #8]	@ (8000c1c <HAL_GetTick+0x10>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	0018      	movs	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	200001a0 	.word	0x200001a0

08000c20 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a06      	ldr	r2, [pc, #24]	@ (8000c48 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000c2e:	4013      	ands	r3, r2
 8000c30:	0019      	movs	r1, r3
 8000c32:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	430a      	orrs	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]
}
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b002      	add	sp, #8
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	40010000 	.word	0x40010000
 8000c48:	fffff9ff 	.word	0xfffff9ff

08000c4c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a05      	ldr	r2, [pc, #20]	@ (8000c70 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	431a      	orrs	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	601a      	str	r2, [r3, #0]
}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b002      	add	sp, #8
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			@ (mov r8, r8)
 8000c70:	fe3fffff 	.word	0xfe3fffff

08000c74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	23e0      	movs	r3, #224	@ 0xe0
 8000c82:	045b      	lsls	r3, r3, #17
 8000c84:	4013      	ands	r3, r2
}
 8000c86:	0018      	movs	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b002      	add	sp, #8
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b084      	sub	sp, #16
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	400a      	ands	r2, r1
 8000ca4:	2107      	movs	r1, #7
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	000a      	movs	r2, r1
 8000caa:	43d2      	mvns	r2, r2
 8000cac:	401a      	ands	r2, r3
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	2104      	movs	r1, #4
 8000cb2:	400b      	ands	r3, r1
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	4099      	lsls	r1, r3
 8000cb8:	000b      	movs	r3, r1
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000cc0:	46c0      	nop			@ (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b004      	add	sp, #16
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	683a      	ldr	r2, [r7, #0]
 8000cd8:	2104      	movs	r1, #4
 8000cda:	400a      	ands	r2, r1
 8000cdc:	2107      	movs	r1, #7
 8000cde:	4091      	lsls	r1, r2
 8000ce0:	000a      	movs	r2, r1
 8000ce2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000cea:	40da      	lsrs	r2, r3
 8000cec:	0013      	movs	r3, r2
}
 8000cee:	0018      	movs	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	60f8      	str	r0, [r7, #12]
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	211f      	movs	r1, #31
 8000d0a:	400a      	ands	r2, r1
 8000d0c:	210f      	movs	r1, #15
 8000d0e:	4091      	lsls	r1, r2
 8000d10:	000a      	movs	r2, r1
 8000d12:	43d2      	mvns	r2, r2
 8000d14:	401a      	ands	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	0e9b      	lsrs	r3, r3, #26
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	4019      	ands	r1, r3
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	201f      	movs	r0, #31
 8000d22:	4003      	ands	r3, r0
 8000d24:	4099      	lsls	r1, r3
 8000d26:	000b      	movs	r3, r1
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b004      	add	sp, #16
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	035b      	lsls	r3, r3, #13
 8000d48:	0b5b      	lsrs	r3, r3, #13
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d50:	46c0      	nop			@ (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b002      	add	sp, #8
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	0352      	lsls	r2, r2, #13
 8000d6a:	0b52      	lsrs	r2, r2, #13
 8000d6c:	43d2      	mvns	r2, r2
 8000d6e:	401a      	ands	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d74:	46c0      	nop			@ (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b002      	add	sp, #8
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	68ba      	ldr	r2, [r7, #8]
 8000d8e:	0212      	lsls	r2, r2, #8
 8000d90:	43d2      	mvns	r2, r2
 8000d92:	401a      	ands	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	021b      	lsls	r3, r3, #8
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
 8000d9c:	4904      	ldr	r1, [pc, #16]	@ (8000db0 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000d9e:	400b      	ands	r3, r1
 8000da0:	431a      	orrs	r2, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000da6:	46c0      	nop			@ (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b004      	add	sp, #16
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	07ffff00 	.word	0x07ffff00

08000db4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	4a05      	ldr	r2, [pc, #20]	@ (8000dd8 <LL_ADC_EnableInternalRegulator+0x24>)
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2280      	movs	r2, #128	@ 0x80
 8000dc6:	0552      	lsls	r2, r2, #21
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b002      	add	sp, #8
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	46c0      	nop			@ (mov r8, r8)
 8000dd8:	6fffffe8 	.word	0x6fffffe8

08000ddc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	2380      	movs	r3, #128	@ 0x80
 8000dea:	055b      	lsls	r3, r3, #21
 8000dec:	401a      	ands	r2, r3
 8000dee:	2380      	movs	r3, #128	@ 0x80
 8000df0:	055b      	lsls	r3, r3, #21
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d101      	bne.n	8000dfa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b002      	add	sp, #8
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	2201      	movs	r2, #1
 8000e12:	4013      	ands	r3, r2
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d101      	bne.n	8000e1c <LL_ADC_IsEnabled+0x18>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e000      	b.n	8000e1e <LL_ADC_IsEnabled+0x1a>
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	0018      	movs	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b002      	add	sp, #8
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	2204      	movs	r2, #4
 8000e34:	4013      	ands	r3, r2
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	d101      	bne.n	8000e3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e000      	b.n	8000e40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b002      	add	sp, #8
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e50:	231f      	movs	r3, #31
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e17f      	b.n	800116e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10a      	bne.n	8000e8c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff fcc5 	bl	8000808 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2254      	movs	r2, #84	@ 0x54
 8000e88:	2100      	movs	r1, #0
 8000e8a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff ffa3 	bl	8000ddc <LL_ADC_IsInternalRegulatorEnabled>
 8000e96:	1e03      	subs	r3, r0, #0
 8000e98:	d115      	bne.n	8000ec6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f7ff ff88 	bl	8000db4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000ea4:	4bb4      	ldr	r3, [pc, #720]	@ (8001178 <HAL_ADC_Init+0x330>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	49b4      	ldr	r1, [pc, #720]	@ (800117c <HAL_ADC_Init+0x334>)
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f7ff f92c 	bl	8000108 <__udivsi3>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000eb8:	e002      	b.n	8000ec0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f9      	bne.n	8000eba <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f7ff ff86 	bl	8000ddc <LL_ADC_IsInternalRegulatorEnabled>
 8000ed0:	1e03      	subs	r3, r0, #0
 8000ed2:	d10f      	bne.n	8000ef4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed8:	2210      	movs	r2, #16
 8000eda:	431a      	orrs	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000eec:	231f      	movs	r3, #31
 8000eee:	18fb      	adds	r3, r7, r3
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f7ff ff94 	bl	8000e26 <LL_ADC_REG_IsConversionOngoing>
 8000efe:	0003      	movs	r3, r0
 8000f00:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f06:	2210      	movs	r2, #16
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d000      	beq.n	8000f0e <HAL_ADC_Init+0xc6>
 8000f0c:	e122      	b.n	8001154 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d000      	beq.n	8000f16 <HAL_ADC_Init+0xce>
 8000f14:	e11e      	b.n	8001154 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1a:	4a99      	ldr	r2, [pc, #612]	@ (8001180 <HAL_ADC_Init+0x338>)
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	2202      	movs	r2, #2
 8000f20:	431a      	orrs	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f7ff ff6a 	bl	8000e04 <LL_ADC_IsEnabled>
 8000f30:	1e03      	subs	r3, r0, #0
 8000f32:	d000      	beq.n	8000f36 <HAL_ADC_Init+0xee>
 8000f34:	e0ad      	b.n	8001092 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	7e1b      	ldrb	r3, [r3, #24]
 8000f3e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000f40:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	7e5b      	ldrb	r3, [r3, #25]
 8000f46:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f48:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	7e9b      	ldrb	r3, [r3, #26]
 8000f4e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f50:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d002      	beq.n	8000f60 <HAL_ADC_Init+0x118>
 8000f5a:	2380      	movs	r3, #128	@ 0x80
 8000f5c:	015b      	lsls	r3, r3, #5
 8000f5e:	e000      	b.n	8000f62 <HAL_ADC_Init+0x11a>
 8000f60:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000f62:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000f68:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	da04      	bge.n	8000f7c <HAL_ADC_Init+0x134>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	085b      	lsrs	r3, r3, #1
 8000f7a:	e001      	b.n	8000f80 <HAL_ADC_Init+0x138>
 8000f7c:	2380      	movs	r3, #128	@ 0x80
 8000f7e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8000f80:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	212c      	movs	r1, #44	@ 0x2c
 8000f86:	5c5b      	ldrb	r3, [r3, r1]
 8000f88:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000f8a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2220      	movs	r2, #32
 8000f96:	5c9b      	ldrb	r3, [r3, r2]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d115      	bne.n	8000fc8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7e9b      	ldrb	r3, [r3, #26]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d105      	bne.n	8000fb0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	2280      	movs	r2, #128	@ 0x80
 8000fa8:	0252      	lsls	r2, r2, #9
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
 8000fae:	e00b      	b.n	8000fc8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb4:	2220      	movs	r2, #32
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00a      	beq.n	8000fe6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fd4:	23e0      	movs	r3, #224	@ 0xe0
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	4a65      	ldr	r2, [pc, #404]	@ (8001184 <HAL_ADC_Init+0x33c>)
 8000fee:	4013      	ands	r3, r2
 8000ff0:	0019      	movs	r1, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	0f9b      	lsrs	r3, r3, #30
 8001002:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001008:	4313      	orrs	r3, r2
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	4313      	orrs	r3, r2
 800100e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	223c      	movs	r2, #60	@ 0x3c
 8001014:	5c9b      	ldrb	r3, [r3, r2]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d111      	bne.n	800103e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	0f9b      	lsrs	r3, r3, #30
 8001020:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001026:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800102c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001032:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	4313      	orrs	r3, r2
 8001038:	2201      	movs	r2, #1
 800103a:	4313      	orrs	r3, r2
 800103c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	4a50      	ldr	r2, [pc, #320]	@ (8001188 <HAL_ADC_Init+0x340>)
 8001046:	4013      	ands	r3, r2
 8001048:	0019      	movs	r1, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	430a      	orrs	r2, r1
 8001052:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	23c0      	movs	r3, #192	@ 0xc0
 800105a:	061b      	lsls	r3, r3, #24
 800105c:	429a      	cmp	r2, r3
 800105e:	d018      	beq.n	8001092 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001064:	2380      	movs	r3, #128	@ 0x80
 8001066:	05db      	lsls	r3, r3, #23
 8001068:	429a      	cmp	r2, r3
 800106a:	d012      	beq.n	8001092 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001070:	2380      	movs	r3, #128	@ 0x80
 8001072:	061b      	lsls	r3, r3, #24
 8001074:	429a      	cmp	r2, r3
 8001076:	d00c      	beq.n	8001092 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001078:	4b44      	ldr	r3, [pc, #272]	@ (800118c <HAL_ADC_Init+0x344>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a44      	ldr	r2, [pc, #272]	@ (8001190 <HAL_ADC_Init+0x348>)
 800107e:	4013      	ands	r3, r2
 8001080:	0019      	movs	r1, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	23f0      	movs	r3, #240	@ 0xf0
 8001088:	039b      	lsls	r3, r3, #14
 800108a:	401a      	ands	r2, r3
 800108c:	4b3f      	ldr	r3, [pc, #252]	@ (800118c <HAL_ADC_Init+0x344>)
 800108e:	430a      	orrs	r2, r1
 8001090:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800109a:	001a      	movs	r2, r3
 800109c:	2100      	movs	r1, #0
 800109e:	f7ff fdf6 	bl	8000c8e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010aa:	493a      	ldr	r1, [pc, #232]	@ (8001194 <HAL_ADC_Init+0x34c>)
 80010ac:	001a      	movs	r2, r3
 80010ae:	f7ff fdee 	bl	8000c8e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d109      	bne.n	80010ce <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2110      	movs	r1, #16
 80010c6:	4249      	negs	r1, r1
 80010c8:	430a      	orrs	r2, r1
 80010ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80010cc:	e018      	b.n	8001100 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691a      	ldr	r2, [r3, #16]
 80010d2:	2380      	movs	r3, #128	@ 0x80
 80010d4:	039b      	lsls	r3, r3, #14
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d112      	bne.n	8001100 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	221c      	movs	r2, #28
 80010ea:	4013      	ands	r3, r2
 80010ec:	2210      	movs	r2, #16
 80010ee:	4252      	negs	r2, r2
 80010f0:	409a      	lsls	r2, r3
 80010f2:	0011      	movs	r1, r2
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2100      	movs	r1, #0
 8001106:	0018      	movs	r0, r3
 8001108:	f7ff fdde 	bl	8000cc8 <LL_ADC_GetSamplingTimeCommonChannels>
 800110c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001112:	429a      	cmp	r2, r3
 8001114:	d10b      	bne.n	800112e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001120:	2203      	movs	r2, #3
 8001122:	4393      	bics	r3, r2
 8001124:	2201      	movs	r2, #1
 8001126:	431a      	orrs	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800112c:	e01c      	b.n	8001168 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001132:	2212      	movs	r2, #18
 8001134:	4393      	bics	r3, r2
 8001136:	2210      	movs	r2, #16
 8001138:	431a      	orrs	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001142:	2201      	movs	r2, #1
 8001144:	431a      	orrs	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800114a:	231f      	movs	r3, #31
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001152:	e009      	b.n	8001168 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001158:	2210      	movs	r2, #16
 800115a:	431a      	orrs	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001160:	231f      	movs	r3, #31
 8001162:	18fb      	adds	r3, r7, r3
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001168:	231f      	movs	r3, #31
 800116a:	18fb      	adds	r3, r7, r3
 800116c:	781b      	ldrb	r3, [r3, #0]
}
 800116e:	0018      	movs	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	b008      	add	sp, #32
 8001174:	bd80      	pop	{r7, pc}
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	20000000 	.word	0x20000000
 800117c:	00030d40 	.word	0x00030d40
 8001180:	fffffefd 	.word	0xfffffefd
 8001184:	ffde0201 	.word	0xffde0201
 8001188:	1ffffc02 	.word	0x1ffffc02
 800118c:	40012708 	.word	0x40012708
 8001190:	ffc3ffff 	.word	0xffc3ffff
 8001194:	07ffff04 	.word	0x07ffff04

08001198 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a2:	2317      	movs	r3, #23
 80011a4:	18fb      	adds	r3, r7, r3
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2254      	movs	r2, #84	@ 0x54
 80011b2:	5c9b      	ldrb	r3, [r3, r2]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d101      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x24>
 80011b8:	2302      	movs	r3, #2
 80011ba:	e1c0      	b.n	800153e <HAL_ADC_ConfigChannel+0x3a6>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2254      	movs	r2, #84	@ 0x54
 80011c0:	2101      	movs	r1, #1
 80011c2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff fe2c 	bl	8000e26 <LL_ADC_REG_IsConversionOngoing>
 80011ce:	1e03      	subs	r3, r0, #0
 80011d0:	d000      	beq.n	80011d4 <HAL_ADC_ConfigChannel+0x3c>
 80011d2:	e1a3      	b.n	800151c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d100      	bne.n	80011de <HAL_ADC_ConfigChannel+0x46>
 80011dc:	e143      	b.n	8001466 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691a      	ldr	r2, [r3, #16]
 80011e2:	2380      	movs	r3, #128	@ 0x80
 80011e4:	061b      	lsls	r3, r3, #24
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d004      	beq.n	80011f4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80011ee:	4ac1      	ldr	r2, [pc, #772]	@ (80014f4 <HAL_ADC_ConfigChannel+0x35c>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d108      	bne.n	8001206 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	0019      	movs	r1, r3
 80011fe:	0010      	movs	r0, r2
 8001200:	f7ff fd99 	bl	8000d36 <LL_ADC_REG_SetSequencerChAdd>
 8001204:	e0c9      	b.n	800139a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	211f      	movs	r1, #31
 8001210:	400b      	ands	r3, r1
 8001212:	210f      	movs	r1, #15
 8001214:	4099      	lsls	r1, r3
 8001216:	000b      	movs	r3, r1
 8001218:	43db      	mvns	r3, r3
 800121a:	4013      	ands	r3, r2
 800121c:	0019      	movs	r1, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	035b      	lsls	r3, r3, #13
 8001224:	0b5b      	lsrs	r3, r3, #13
 8001226:	d105      	bne.n	8001234 <HAL_ADC_ConfigChannel+0x9c>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	0e9b      	lsrs	r3, r3, #26
 800122e:	221f      	movs	r2, #31
 8001230:	4013      	ands	r3, r2
 8001232:	e098      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1ce>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2201      	movs	r2, #1
 800123a:	4013      	ands	r3, r2
 800123c:	d000      	beq.n	8001240 <HAL_ADC_ConfigChannel+0xa8>
 800123e:	e091      	b.n	8001364 <HAL_ADC_ConfigChannel+0x1cc>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2202      	movs	r2, #2
 8001246:	4013      	ands	r3, r2
 8001248:	d000      	beq.n	800124c <HAL_ADC_ConfigChannel+0xb4>
 800124a:	e089      	b.n	8001360 <HAL_ADC_ConfigChannel+0x1c8>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2204      	movs	r2, #4
 8001252:	4013      	ands	r3, r2
 8001254:	d000      	beq.n	8001258 <HAL_ADC_ConfigChannel+0xc0>
 8001256:	e081      	b.n	800135c <HAL_ADC_ConfigChannel+0x1c4>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2208      	movs	r2, #8
 800125e:	4013      	ands	r3, r2
 8001260:	d000      	beq.n	8001264 <HAL_ADC_ConfigChannel+0xcc>
 8001262:	e079      	b.n	8001358 <HAL_ADC_ConfigChannel+0x1c0>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2210      	movs	r2, #16
 800126a:	4013      	ands	r3, r2
 800126c:	d000      	beq.n	8001270 <HAL_ADC_ConfigChannel+0xd8>
 800126e:	e071      	b.n	8001354 <HAL_ADC_ConfigChannel+0x1bc>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2220      	movs	r2, #32
 8001276:	4013      	ands	r3, r2
 8001278:	d000      	beq.n	800127c <HAL_ADC_ConfigChannel+0xe4>
 800127a:	e069      	b.n	8001350 <HAL_ADC_ConfigChannel+0x1b8>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2240      	movs	r2, #64	@ 0x40
 8001282:	4013      	ands	r3, r2
 8001284:	d000      	beq.n	8001288 <HAL_ADC_ConfigChannel+0xf0>
 8001286:	e061      	b.n	800134c <HAL_ADC_ConfigChannel+0x1b4>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2280      	movs	r2, #128	@ 0x80
 800128e:	4013      	ands	r3, r2
 8001290:	d000      	beq.n	8001294 <HAL_ADC_ConfigChannel+0xfc>
 8001292:	e059      	b.n	8001348 <HAL_ADC_ConfigChannel+0x1b0>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2380      	movs	r3, #128	@ 0x80
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4013      	ands	r3, r2
 800129e:	d151      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x1ac>
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	2380      	movs	r3, #128	@ 0x80
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4013      	ands	r3, r2
 80012aa:	d149      	bne.n	8001340 <HAL_ADC_ConfigChannel+0x1a8>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2380      	movs	r3, #128	@ 0x80
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	4013      	ands	r3, r2
 80012b6:	d141      	bne.n	800133c <HAL_ADC_ConfigChannel+0x1a4>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2380      	movs	r3, #128	@ 0x80
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	4013      	ands	r3, r2
 80012c2:	d139      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x1a0>
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	2380      	movs	r3, #128	@ 0x80
 80012ca:	015b      	lsls	r3, r3, #5
 80012cc:	4013      	ands	r3, r2
 80012ce:	d131      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x19c>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	2380      	movs	r3, #128	@ 0x80
 80012d6:	019b      	lsls	r3, r3, #6
 80012d8:	4013      	ands	r3, r2
 80012da:	d129      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x198>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	2380      	movs	r3, #128	@ 0x80
 80012e2:	01db      	lsls	r3, r3, #7
 80012e4:	4013      	ands	r3, r2
 80012e6:	d121      	bne.n	800132c <HAL_ADC_ConfigChannel+0x194>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2380      	movs	r3, #128	@ 0x80
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	4013      	ands	r3, r2
 80012f2:	d119      	bne.n	8001328 <HAL_ADC_ConfigChannel+0x190>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2380      	movs	r3, #128	@ 0x80
 80012fa:	025b      	lsls	r3, r3, #9
 80012fc:	4013      	ands	r3, r2
 80012fe:	d111      	bne.n	8001324 <HAL_ADC_ConfigChannel+0x18c>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2380      	movs	r3, #128	@ 0x80
 8001306:	029b      	lsls	r3, r3, #10
 8001308:	4013      	ands	r3, r2
 800130a:	d109      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x188>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	2380      	movs	r3, #128	@ 0x80
 8001312:	02db      	lsls	r3, r3, #11
 8001314:	4013      	ands	r3, r2
 8001316:	d001      	beq.n	800131c <HAL_ADC_ConfigChannel+0x184>
 8001318:	2312      	movs	r3, #18
 800131a:	e024      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1ce>
 800131c:	2300      	movs	r3, #0
 800131e:	e022      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1ce>
 8001320:	2311      	movs	r3, #17
 8001322:	e020      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1ce>
 8001324:	2310      	movs	r3, #16
 8001326:	e01e      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1ce>
 8001328:	230f      	movs	r3, #15
 800132a:	e01c      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1ce>
 800132c:	230e      	movs	r3, #14
 800132e:	e01a      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1ce>
 8001330:	230d      	movs	r3, #13
 8001332:	e018      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1ce>
 8001334:	230c      	movs	r3, #12
 8001336:	e016      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1ce>
 8001338:	230b      	movs	r3, #11
 800133a:	e014      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1ce>
 800133c:	230a      	movs	r3, #10
 800133e:	e012      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1ce>
 8001340:	2309      	movs	r3, #9
 8001342:	e010      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1ce>
 8001344:	2308      	movs	r3, #8
 8001346:	e00e      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1ce>
 8001348:	2307      	movs	r3, #7
 800134a:	e00c      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1ce>
 800134c:	2306      	movs	r3, #6
 800134e:	e00a      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1ce>
 8001350:	2305      	movs	r3, #5
 8001352:	e008      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1ce>
 8001354:	2304      	movs	r3, #4
 8001356:	e006      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1ce>
 8001358:	2303      	movs	r3, #3
 800135a:	e004      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1ce>
 800135c:	2302      	movs	r3, #2
 800135e:	e002      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1ce>
 8001360:	2301      	movs	r3, #1
 8001362:	e000      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1ce>
 8001364:	2300      	movs	r3, #0
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	6852      	ldr	r2, [r2, #4]
 800136a:	201f      	movs	r0, #31
 800136c:	4002      	ands	r2, r0
 800136e:	4093      	lsls	r3, r2
 8001370:	000a      	movs	r2, r1
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	429a      	cmp	r2, r3
 8001386:	d808      	bhi.n	800139a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	6859      	ldr	r1, [r3, #4]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	001a      	movs	r2, r3
 8001396:	f7ff fcae 	bl	8000cf6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	6819      	ldr	r1, [r3, #0]
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	001a      	movs	r2, r3
 80013a8:	f7ff fce8 	bl	8000d7c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db00      	blt.n	80013b6 <HAL_ADC_ConfigChannel+0x21e>
 80013b4:	e0bc      	b.n	8001530 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013b6:	4b50      	ldr	r3, [pc, #320]	@ (80014f8 <HAL_ADC_ConfigChannel+0x360>)
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff fc5b 	bl	8000c74 <LL_ADC_GetCommonPathInternalCh>
 80013be:	0003      	movs	r3, r0
 80013c0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a4d      	ldr	r2, [pc, #308]	@ (80014fc <HAL_ADC_ConfigChannel+0x364>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d122      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	2380      	movs	r3, #128	@ 0x80
 80013d0:	041b      	lsls	r3, r3, #16
 80013d2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80013d4:	d11d      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	2280      	movs	r2, #128	@ 0x80
 80013da:	0412      	lsls	r2, r2, #16
 80013dc:	4313      	orrs	r3, r2
 80013de:	4a46      	ldr	r2, [pc, #280]	@ (80014f8 <HAL_ADC_ConfigChannel+0x360>)
 80013e0:	0019      	movs	r1, r3
 80013e2:	0010      	movs	r0, r2
 80013e4:	f7ff fc32 	bl	8000c4c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013e8:	4b45      	ldr	r3, [pc, #276]	@ (8001500 <HAL_ADC_ConfigChannel+0x368>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4945      	ldr	r1, [pc, #276]	@ (8001504 <HAL_ADC_ConfigChannel+0x36c>)
 80013ee:	0018      	movs	r0, r3
 80013f0:	f7fe fe8a 	bl	8000108 <__udivsi3>
 80013f4:	0003      	movs	r3, r0
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	0013      	movs	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	189b      	adds	r3, r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001402:	e002      	b.n	800140a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3b01      	subs	r3, #1
 8001408:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1f9      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001410:	e08e      	b.n	8001530 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a3c      	ldr	r2, [pc, #240]	@ (8001508 <HAL_ADC_ConfigChannel+0x370>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d10e      	bne.n	800143a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	2380      	movs	r3, #128	@ 0x80
 8001420:	045b      	lsls	r3, r3, #17
 8001422:	4013      	ands	r3, r2
 8001424:	d109      	bne.n	800143a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	2280      	movs	r2, #128	@ 0x80
 800142a:	0452      	lsls	r2, r2, #17
 800142c:	4313      	orrs	r3, r2
 800142e:	4a32      	ldr	r2, [pc, #200]	@ (80014f8 <HAL_ADC_ConfigChannel+0x360>)
 8001430:	0019      	movs	r1, r3
 8001432:	0010      	movs	r0, r2
 8001434:	f7ff fc0a 	bl	8000c4c <LL_ADC_SetCommonPathInternalCh>
 8001438:	e07a      	b.n	8001530 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a33      	ldr	r2, [pc, #204]	@ (800150c <HAL_ADC_ConfigChannel+0x374>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d000      	beq.n	8001446 <HAL_ADC_ConfigChannel+0x2ae>
 8001444:	e074      	b.n	8001530 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	2380      	movs	r3, #128	@ 0x80
 800144a:	03db      	lsls	r3, r3, #15
 800144c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800144e:	d000      	beq.n	8001452 <HAL_ADC_ConfigChannel+0x2ba>
 8001450:	e06e      	b.n	8001530 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	2280      	movs	r2, #128	@ 0x80
 8001456:	03d2      	lsls	r2, r2, #15
 8001458:	4313      	orrs	r3, r2
 800145a:	4a27      	ldr	r2, [pc, #156]	@ (80014f8 <HAL_ADC_ConfigChannel+0x360>)
 800145c:	0019      	movs	r1, r3
 800145e:	0010      	movs	r0, r2
 8001460:	f7ff fbf4 	bl	8000c4c <LL_ADC_SetCommonPathInternalCh>
 8001464:	e064      	b.n	8001530 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691a      	ldr	r2, [r3, #16]
 800146a:	2380      	movs	r3, #128	@ 0x80
 800146c:	061b      	lsls	r3, r3, #24
 800146e:	429a      	cmp	r2, r3
 8001470:	d004      	beq.n	800147c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001476:	4a1f      	ldr	r2, [pc, #124]	@ (80014f4 <HAL_ADC_ConfigChannel+0x35c>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d107      	bne.n	800148c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	0019      	movs	r1, r3
 8001486:	0010      	movs	r0, r2
 8001488:	f7ff fc66 	bl	8000d58 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	da4d      	bge.n	8001530 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001494:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <HAL_ADC_ConfigChannel+0x360>)
 8001496:	0018      	movs	r0, r3
 8001498:	f7ff fbec 	bl	8000c74 <LL_ADC_GetCommonPathInternalCh>
 800149c:	0003      	movs	r3, r0
 800149e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a15      	ldr	r2, [pc, #84]	@ (80014fc <HAL_ADC_ConfigChannel+0x364>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d108      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4a18      	ldr	r2, [pc, #96]	@ (8001510 <HAL_ADC_ConfigChannel+0x378>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	4a11      	ldr	r2, [pc, #68]	@ (80014f8 <HAL_ADC_ConfigChannel+0x360>)
 80014b2:	0019      	movs	r1, r3
 80014b4:	0010      	movs	r0, r2
 80014b6:	f7ff fbc9 	bl	8000c4c <LL_ADC_SetCommonPathInternalCh>
 80014ba:	e039      	b.n	8001530 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a11      	ldr	r2, [pc, #68]	@ (8001508 <HAL_ADC_ConfigChannel+0x370>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d108      	bne.n	80014d8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4a12      	ldr	r2, [pc, #72]	@ (8001514 <HAL_ADC_ConfigChannel+0x37c>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <HAL_ADC_ConfigChannel+0x360>)
 80014ce:	0019      	movs	r1, r3
 80014d0:	0010      	movs	r0, r2
 80014d2:	f7ff fbbb 	bl	8000c4c <LL_ADC_SetCommonPathInternalCh>
 80014d6:	e02b      	b.n	8001530 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0b      	ldr	r2, [pc, #44]	@ (800150c <HAL_ADC_ConfigChannel+0x374>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d126      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001518 <HAL_ADC_ConfigChannel+0x380>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	4a03      	ldr	r2, [pc, #12]	@ (80014f8 <HAL_ADC_ConfigChannel+0x360>)
 80014ea:	0019      	movs	r1, r3
 80014ec:	0010      	movs	r0, r2
 80014ee:	f7ff fbad 	bl	8000c4c <LL_ADC_SetCommonPathInternalCh>
 80014f2:	e01d      	b.n	8001530 <HAL_ADC_ConfigChannel+0x398>
 80014f4:	80000004 	.word	0x80000004
 80014f8:	40012708 	.word	0x40012708
 80014fc:	b0001000 	.word	0xb0001000
 8001500:	20000000 	.word	0x20000000
 8001504:	00030d40 	.word	0x00030d40
 8001508:	b8004000 	.word	0xb8004000
 800150c:	b4002000 	.word	0xb4002000
 8001510:	ff7fffff 	.word	0xff7fffff
 8001514:	feffffff 	.word	0xfeffffff
 8001518:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001520:	2220      	movs	r2, #32
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001528:	2317      	movs	r3, #23
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2254      	movs	r2, #84	@ 0x54
 8001534:	2100      	movs	r1, #0
 8001536:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001538:	2317      	movs	r3, #23
 800153a:	18fb      	adds	r3, r7, r3
 800153c:	781b      	ldrb	r3, [r3, #0]
}
 800153e:	0018      	movs	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	b006      	add	sp, #24
 8001544:	bd80      	pop	{r7, pc}
 8001546:	46c0      	nop			@ (mov r8, r8)

08001548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	0002      	movs	r2, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	1dfb      	adds	r3, r7, #7
 8001554:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001556:	1dfb      	adds	r3, r7, #7
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b7f      	cmp	r3, #127	@ 0x7f
 800155c:	d828      	bhi.n	80015b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800155e:	4a2f      	ldr	r2, [pc, #188]	@ (800161c <__NVIC_SetPriority+0xd4>)
 8001560:	1dfb      	adds	r3, r7, #7
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b25b      	sxtb	r3, r3
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	33c0      	adds	r3, #192	@ 0xc0
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	589b      	ldr	r3, [r3, r2]
 800156e:	1dfa      	adds	r2, r7, #7
 8001570:	7812      	ldrb	r2, [r2, #0]
 8001572:	0011      	movs	r1, r2
 8001574:	2203      	movs	r2, #3
 8001576:	400a      	ands	r2, r1
 8001578:	00d2      	lsls	r2, r2, #3
 800157a:	21ff      	movs	r1, #255	@ 0xff
 800157c:	4091      	lsls	r1, r2
 800157e:	000a      	movs	r2, r1
 8001580:	43d2      	mvns	r2, r2
 8001582:	401a      	ands	r2, r3
 8001584:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	019b      	lsls	r3, r3, #6
 800158a:	22ff      	movs	r2, #255	@ 0xff
 800158c:	401a      	ands	r2, r3
 800158e:	1dfb      	adds	r3, r7, #7
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	0018      	movs	r0, r3
 8001594:	2303      	movs	r3, #3
 8001596:	4003      	ands	r3, r0
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800159c:	481f      	ldr	r0, [pc, #124]	@ (800161c <__NVIC_SetPriority+0xd4>)
 800159e:	1dfb      	adds	r3, r7, #7
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b25b      	sxtb	r3, r3
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	430a      	orrs	r2, r1
 80015a8:	33c0      	adds	r3, #192	@ 0xc0
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015ae:	e031      	b.n	8001614 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001620 <__NVIC_SetPriority+0xd8>)
 80015b2:	1dfb      	adds	r3, r7, #7
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	0019      	movs	r1, r3
 80015b8:	230f      	movs	r3, #15
 80015ba:	400b      	ands	r3, r1
 80015bc:	3b08      	subs	r3, #8
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3306      	adds	r3, #6
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	18d3      	adds	r3, r2, r3
 80015c6:	3304      	adds	r3, #4
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	1dfa      	adds	r2, r7, #7
 80015cc:	7812      	ldrb	r2, [r2, #0]
 80015ce:	0011      	movs	r1, r2
 80015d0:	2203      	movs	r2, #3
 80015d2:	400a      	ands	r2, r1
 80015d4:	00d2      	lsls	r2, r2, #3
 80015d6:	21ff      	movs	r1, #255	@ 0xff
 80015d8:	4091      	lsls	r1, r2
 80015da:	000a      	movs	r2, r1
 80015dc:	43d2      	mvns	r2, r2
 80015de:	401a      	ands	r2, r3
 80015e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	019b      	lsls	r3, r3, #6
 80015e6:	22ff      	movs	r2, #255	@ 0xff
 80015e8:	401a      	ands	r2, r3
 80015ea:	1dfb      	adds	r3, r7, #7
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	0018      	movs	r0, r3
 80015f0:	2303      	movs	r3, #3
 80015f2:	4003      	ands	r3, r0
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015f8:	4809      	ldr	r0, [pc, #36]	@ (8001620 <__NVIC_SetPriority+0xd8>)
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	001c      	movs	r4, r3
 8001600:	230f      	movs	r3, #15
 8001602:	4023      	ands	r3, r4
 8001604:	3b08      	subs	r3, #8
 8001606:	089b      	lsrs	r3, r3, #2
 8001608:	430a      	orrs	r2, r1
 800160a:	3306      	adds	r3, #6
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	18c3      	adds	r3, r0, r3
 8001610:	3304      	adds	r3, #4
 8001612:	601a      	str	r2, [r3, #0]
}
 8001614:	46c0      	nop			@ (mov r8, r8)
 8001616:	46bd      	mov	sp, r7
 8001618:	b003      	add	sp, #12
 800161a:	bd90      	pop	{r4, r7, pc}
 800161c:	e000e100 	.word	0xe000e100
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	1e5a      	subs	r2, r3, #1
 8001630:	2380      	movs	r3, #128	@ 0x80
 8001632:	045b      	lsls	r3, r3, #17
 8001634:	429a      	cmp	r2, r3
 8001636:	d301      	bcc.n	800163c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001638:	2301      	movs	r3, #1
 800163a:	e010      	b.n	800165e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163c:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <SysTick_Config+0x44>)
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	3a01      	subs	r2, #1
 8001642:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001644:	2301      	movs	r3, #1
 8001646:	425b      	negs	r3, r3
 8001648:	2103      	movs	r1, #3
 800164a:	0018      	movs	r0, r3
 800164c:	f7ff ff7c 	bl	8001548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001650:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <SysTick_Config+0x44>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001656:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <SysTick_Config+0x44>)
 8001658:	2207      	movs	r2, #7
 800165a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800165c:	2300      	movs	r3, #0
}
 800165e:	0018      	movs	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	b002      	add	sp, #8
 8001664:	bd80      	pop	{r7, pc}
 8001666:	46c0      	nop			@ (mov r8, r8)
 8001668:	e000e010 	.word	0xe000e010

0800166c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	210f      	movs	r1, #15
 8001678:	187b      	adds	r3, r7, r1
 800167a:	1c02      	adds	r2, r0, #0
 800167c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	187b      	adds	r3, r7, r1
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b25b      	sxtb	r3, r3
 8001686:	0011      	movs	r1, r2
 8001688:	0018      	movs	r0, r3
 800168a:	f7ff ff5d 	bl	8001548 <__NVIC_SetPriority>
}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	46bd      	mov	sp, r7
 8001692:	b004      	add	sp, #16
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff ffbf 	bl	8001624 <SysTick_Config>
 80016a6:	0003      	movs	r3, r0
}
 80016a8:	0018      	movs	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b002      	add	sp, #8
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e14e      	b.n	8001960 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	225c      	movs	r2, #92	@ 0x5c
 80016c6:	5c9b      	ldrb	r3, [r3, r2]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d107      	bne.n	80016de <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	225d      	movs	r2, #93	@ 0x5d
 80016d2:	2100      	movs	r1, #0
 80016d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	0018      	movs	r0, r3
 80016da:	f7ff f8d9 	bl	8000890 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	699a      	ldr	r2, [r3, #24]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2110      	movs	r1, #16
 80016ea:	438a      	bics	r2, r1
 80016ec:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016ee:	f7ff fa8d 	bl	8000c0c <HAL_GetTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80016f6:	e012      	b.n	800171e <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80016f8:	f7ff fa88 	bl	8000c0c <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b0a      	cmp	r3, #10
 8001704:	d90b      	bls.n	800171e <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170a:	2201      	movs	r2, #1
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	225c      	movs	r2, #92	@ 0x5c
 8001716:	2103      	movs	r1, #3
 8001718:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e120      	b.n	8001960 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2208      	movs	r2, #8
 8001726:	4013      	ands	r3, r2
 8001728:	2b08      	cmp	r3, #8
 800172a:	d0e5      	beq.n	80016f8 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	699a      	ldr	r2, [r3, #24]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2101      	movs	r1, #1
 8001738:	430a      	orrs	r2, r1
 800173a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800173c:	f7ff fa66 	bl	8000c0c <HAL_GetTick>
 8001740:	0003      	movs	r3, r0
 8001742:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001744:	e012      	b.n	800176c <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001746:	f7ff fa61 	bl	8000c0c <HAL_GetTick>
 800174a:	0002      	movs	r2, r0
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b0a      	cmp	r3, #10
 8001752:	d90b      	bls.n	800176c <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001758:	2201      	movs	r2, #1
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	225c      	movs	r2, #92	@ 0x5c
 8001764:	2103      	movs	r1, #3
 8001766:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0f9      	b.n	8001960 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2201      	movs	r2, #1
 8001774:	4013      	ands	r3, r2
 8001776:	d0e6      	beq.n	8001746 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	699a      	ldr	r2, [r3, #24]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2102      	movs	r1, #2
 8001784:	430a      	orrs	r2, r1
 8001786:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a76      	ldr	r2, [pc, #472]	@ (8001968 <HAL_FDCAN_Init+0x2b8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d103      	bne.n	800179a <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001792:	4a76      	ldr	r2, [pc, #472]	@ (800196c <HAL_FDCAN_Init+0x2bc>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7c1b      	ldrb	r3, [r3, #16]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d108      	bne.n	80017b4 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	699a      	ldr	r2, [r3, #24]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2140      	movs	r1, #64	@ 0x40
 80017ae:	438a      	bics	r2, r1
 80017b0:	619a      	str	r2, [r3, #24]
 80017b2:	e007      	b.n	80017c4 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699a      	ldr	r2, [r3, #24]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2140      	movs	r1, #64	@ 0x40
 80017c0:	430a      	orrs	r2, r1
 80017c2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	7c5b      	ldrb	r3, [r3, #17]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d109      	bne.n	80017e0 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	699a      	ldr	r2, [r3, #24]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2180      	movs	r1, #128	@ 0x80
 80017d8:	01c9      	lsls	r1, r1, #7
 80017da:	430a      	orrs	r2, r1
 80017dc:	619a      	str	r2, [r3, #24]
 80017de:	e007      	b.n	80017f0 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	699a      	ldr	r2, [r3, #24]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4961      	ldr	r1, [pc, #388]	@ (8001970 <HAL_FDCAN_Init+0x2c0>)
 80017ec:	400a      	ands	r2, r1
 80017ee:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7c9b      	ldrb	r3, [r3, #18]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d108      	bne.n	800180a <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699a      	ldr	r2, [r3, #24]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	495c      	ldr	r1, [pc, #368]	@ (8001974 <HAL_FDCAN_Init+0x2c4>)
 8001804:	400a      	ands	r2, r1
 8001806:	619a      	str	r2, [r3, #24]
 8001808:	e008      	b.n	800181c <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	699a      	ldr	r2, [r3, #24]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2180      	movs	r1, #128	@ 0x80
 8001816:	0149      	lsls	r1, r1, #5
 8001818:	430a      	orrs	r2, r1
 800181a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	4a55      	ldr	r2, [pc, #340]	@ (8001978 <HAL_FDCAN_Init+0x2c8>)
 8001824:	4013      	ands	r3, r2
 8001826:	0019      	movs	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	699a      	ldr	r2, [r3, #24]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	21a4      	movs	r1, #164	@ 0xa4
 8001840:	438a      	bics	r2, r1
 8001842:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691a      	ldr	r2, [r3, #16]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2110      	movs	r1, #16
 8001850:	438a      	bics	r2, r1
 8001852:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d108      	bne.n	800186e <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	699a      	ldr	r2, [r3, #24]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2104      	movs	r1, #4
 8001868:	430a      	orrs	r2, r1
 800186a:	619a      	str	r2, [r3, #24]
 800186c:	e02c      	b.n	80018c8 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d028      	beq.n	80018c8 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d01c      	beq.n	80018b8 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699a      	ldr	r2, [r3, #24]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2180      	movs	r1, #128	@ 0x80
 800188a:	430a      	orrs	r2, r1
 800188c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2110      	movs	r1, #16
 800189a:	430a      	orrs	r2, r1
 800189c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d110      	bne.n	80018c8 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	699a      	ldr	r2, [r3, #24]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2120      	movs	r1, #32
 80018b2:	430a      	orrs	r2, r1
 80018b4:	619a      	str	r2, [r3, #24]
 80018b6:	e007      	b.n	80018c8 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699a      	ldr	r2, [r3, #24]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2120      	movs	r1, #32
 80018c4:	430a      	orrs	r2, r1
 80018c6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	3b01      	subs	r3, #1
 80018ce:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018d8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80018e0:	431a      	orrs	r2, r3
 80018e2:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80018f0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018f2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	23c0      	movs	r3, #192	@ 0xc0
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d115      	bne.n	800192c <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001904:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190a:	3b01      	subs	r3, #1
 800190c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800190e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001914:	3b01      	subs	r3, #1
 8001916:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001918:	431a      	orrs	r2, r3
 800191a:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001920:	3b01      	subs	r3, #1
 8001922:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001928:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800192a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	22c0      	movs	r2, #192	@ 0xc0
 8001932:	5899      	ldr	r1, [r3, r2]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	21c0      	movs	r1, #192	@ 0xc0
 8001940:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	0018      	movs	r0, r3
 8001946:	f000 f819 	bl	800197c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	225c      	movs	r2, #92	@ 0x5c
 800195a:	2101      	movs	r1, #1
 800195c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	0018      	movs	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	b004      	add	sp, #16
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40006400 	.word	0x40006400
 800196c:	40006500 	.word	0x40006500
 8001970:	ffffbfff 	.word	0xffffbfff
 8001974:	ffffefff 	.word	0xffffefff
 8001978:	fffffcff 	.word	0xfffffcff

0800197c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001984:	4b2f      	ldr	r3, [pc, #188]	@ (8001a44 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8001986:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a2e      	ldr	r2, [pc, #184]	@ (8001a48 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d105      	bne.n	800199e <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	22d4      	movs	r2, #212	@ 0xd4
 8001996:	0092      	lsls	r2, r2, #2
 8001998:	4694      	mov	ip, r2
 800199a:	4463      	add	r3, ip
 800199c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2280      	movs	r2, #128	@ 0x80
 80019aa:	589b      	ldr	r3, [r3, r2]
 80019ac:	4a27      	ldr	r2, [pc, #156]	@ (8001a4c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	0019      	movs	r1, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b6:	041a      	lsls	r2, r3, #16
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	2180      	movs	r1, #128	@ 0x80
 80019c0:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	3370      	adds	r3, #112	@ 0x70
 80019c6:	001a      	movs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2280      	movs	r2, #128	@ 0x80
 80019d2:	589b      	ldr	r3, [r3, r2]
 80019d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001a50 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	0019      	movs	r1, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019de:	061a      	lsls	r2, r3, #24
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	2180      	movs	r1, #128	@ 0x80
 80019e8:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	33b0      	adds	r3, #176	@ 0xb0
 80019ee:	001a      	movs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	3389      	adds	r3, #137	@ 0x89
 80019f8:	33ff      	adds	r3, #255	@ 0xff
 80019fa:	001a      	movs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2298      	movs	r2, #152	@ 0x98
 8001a04:	0092      	lsls	r2, r2, #2
 8001a06:	189a      	adds	r2, r3, r2
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	229e      	movs	r2, #158	@ 0x9e
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	189a      	adds	r2, r3, r2
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	e005      	b.n	8001a2a <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3304      	adds	r3, #4
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	22d4      	movs	r2, #212	@ 0xd4
 8001a2e:	0092      	lsls	r2, r2, #2
 8001a30:	4694      	mov	ip, r2
 8001a32:	4463      	add	r3, ip
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d3f1      	bcc.n	8001a1e <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	46c0      	nop			@ (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b004      	add	sp, #16
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	4000b400 	.word	0x4000b400
 8001a48:	40006800 	.word	0x40006800
 8001a4c:	ffe0ffff 	.word	0xffe0ffff
 8001a50:	f0ffffff 	.word	0xf0ffffff

08001a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a62:	e14d      	b.n	8001d00 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2101      	movs	r1, #1
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4091      	lsls	r1, r2
 8001a6e:	000a      	movs	r2, r1
 8001a70:	4013      	ands	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d100      	bne.n	8001a7c <HAL_GPIO_Init+0x28>
 8001a7a:	e13e      	b.n	8001cfa <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2203      	movs	r2, #3
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d005      	beq.n	8001a94 <HAL_GPIO_Init+0x40>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d130      	bne.n	8001af6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	0013      	movs	r3, r2
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	409a      	lsls	r2, r3
 8001ab6:	0013      	movs	r3, r2
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aca:	2201      	movs	r2, #1
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	0013      	movs	r3, r2
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	091b      	lsrs	r3, r3, #4
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	0013      	movs	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2203      	movs	r2, #3
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d017      	beq.n	8001b32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	0013      	movs	r3, r2
 8001b12:	43da      	mvns	r2, r3
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	409a      	lsls	r2, r3
 8001b24:	0013      	movs	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2203      	movs	r2, #3
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d123      	bne.n	8001b86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	08da      	lsrs	r2, r3, #3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3208      	adds	r2, #8
 8001b46:	0092      	lsls	r2, r2, #2
 8001b48:	58d3      	ldr	r3, [r2, r3]
 8001b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	2207      	movs	r2, #7
 8001b50:	4013      	ands	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	220f      	movs	r2, #15
 8001b56:	409a      	lsls	r2, r3
 8001b58:	0013      	movs	r3, r2
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	691a      	ldr	r2, [r3, #16]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2107      	movs	r1, #7
 8001b6a:	400b      	ands	r3, r1
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	0013      	movs	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	08da      	lsrs	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3208      	adds	r2, #8
 8001b80:	0092      	lsls	r2, r2, #2
 8001b82:	6939      	ldr	r1, [r7, #16]
 8001b84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	2203      	movs	r2, #3
 8001b92:	409a      	lsls	r2, r3
 8001b94:	0013      	movs	r3, r2
 8001b96:	43da      	mvns	r2, r3
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	409a      	lsls	r2, r3
 8001bac:	0013      	movs	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	23c0      	movs	r3, #192	@ 0xc0
 8001bc0:	029b      	lsls	r3, r3, #10
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d100      	bne.n	8001bc8 <HAL_GPIO_Init+0x174>
 8001bc6:	e098      	b.n	8001cfa <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001bc8:	4a53      	ldr	r2, [pc, #332]	@ (8001d18 <HAL_GPIO_Init+0x2c4>)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3318      	adds	r3, #24
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	589b      	ldr	r3, [r3, r2]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2203      	movs	r2, #3
 8001bda:	4013      	ands	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	220f      	movs	r2, #15
 8001be0:	409a      	lsls	r2, r3
 8001be2:	0013      	movs	r3, r2
 8001be4:	43da      	mvns	r2, r3
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	23a0      	movs	r3, #160	@ 0xa0
 8001bf0:	05db      	lsls	r3, r3, #23
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d019      	beq.n	8001c2a <HAL_GPIO_Init+0x1d6>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a48      	ldr	r2, [pc, #288]	@ (8001d1c <HAL_GPIO_Init+0x2c8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d013      	beq.n	8001c26 <HAL_GPIO_Init+0x1d2>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a47      	ldr	r2, [pc, #284]	@ (8001d20 <HAL_GPIO_Init+0x2cc>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00d      	beq.n	8001c22 <HAL_GPIO_Init+0x1ce>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a46      	ldr	r2, [pc, #280]	@ (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d007      	beq.n	8001c1e <HAL_GPIO_Init+0x1ca>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a45      	ldr	r2, [pc, #276]	@ (8001d28 <HAL_GPIO_Init+0x2d4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d101      	bne.n	8001c1a <HAL_GPIO_Init+0x1c6>
 8001c16:	2304      	movs	r3, #4
 8001c18:	e008      	b.n	8001c2c <HAL_GPIO_Init+0x1d8>
 8001c1a:	2305      	movs	r3, #5
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x1d8>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x1d8>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x1d8>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x1d8>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	2103      	movs	r1, #3
 8001c30:	400a      	ands	r2, r1
 8001c32:	00d2      	lsls	r2, r2, #3
 8001c34:	4093      	lsls	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001c3c:	4936      	ldr	r1, [pc, #216]	@ (8001d18 <HAL_GPIO_Init+0x2c4>)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3318      	adds	r3, #24
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c4a:	4b33      	ldr	r3, [pc, #204]	@ (8001d18 <HAL_GPIO_Init+0x2c4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	43da      	mvns	r2, r3
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	2380      	movs	r3, #128	@ 0x80
 8001c60:	035b      	lsls	r3, r3, #13
 8001c62:	4013      	ands	r3, r2
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d18 <HAL_GPIO_Init+0x2c4>)
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c74:	4b28      	ldr	r3, [pc, #160]	@ (8001d18 <HAL_GPIO_Init+0x2c4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43da      	mvns	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	2380      	movs	r3, #128	@ 0x80
 8001c8a:	039b      	lsls	r3, r3, #14
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c98:	4b1f      	ldr	r3, [pc, #124]	@ (8001d18 <HAL_GPIO_Init+0x2c4>)
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001d18 <HAL_GPIO_Init+0x2c4>)
 8001ca0:	2384      	movs	r3, #132	@ 0x84
 8001ca2:	58d3      	ldr	r3, [r2, r3]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	43da      	mvns	r2, r3
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	2380      	movs	r3, #128	@ 0x80
 8001cb6:	029b      	lsls	r3, r3, #10
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cc4:	4914      	ldr	r1, [pc, #80]	@ (8001d18 <HAL_GPIO_Init+0x2c4>)
 8001cc6:	2284      	movs	r2, #132	@ 0x84
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001ccc:	4a12      	ldr	r2, [pc, #72]	@ (8001d18 <HAL_GPIO_Init+0x2c4>)
 8001cce:	2380      	movs	r3, #128	@ 0x80
 8001cd0:	58d3      	ldr	r3, [r2, r3]
 8001cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	43da      	mvns	r2, r3
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	2380      	movs	r3, #128	@ 0x80
 8001ce4:	025b      	lsls	r3, r3, #9
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cf2:	4909      	ldr	r1, [pc, #36]	@ (8001d18 <HAL_GPIO_Init+0x2c4>)
 8001cf4:	2280      	movs	r2, #128	@ 0x80
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	40da      	lsrs	r2, r3
 8001d08:	1e13      	subs	r3, r2, #0
 8001d0a:	d000      	beq.n	8001d0e <HAL_GPIO_Init+0x2ba>
 8001d0c:	e6aa      	b.n	8001a64 <HAL_GPIO_Init+0x10>
  }
}
 8001d0e:	46c0      	nop			@ (mov r8, r8)
 8001d10:	46c0      	nop			@ (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b006      	add	sp, #24
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40021800 	.word	0x40021800
 8001d1c:	50000400 	.word	0x50000400
 8001d20:	50000800 	.word	0x50000800
 8001d24:	50000c00 	.word	0x50000c00
 8001d28:	50001000 	.word	0x50001000

08001d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	0008      	movs	r0, r1
 8001d36:	0011      	movs	r1, r2
 8001d38:	1cbb      	adds	r3, r7, #2
 8001d3a:	1c02      	adds	r2, r0, #0
 8001d3c:	801a      	strh	r2, [r3, #0]
 8001d3e:	1c7b      	adds	r3, r7, #1
 8001d40:	1c0a      	adds	r2, r1, #0
 8001d42:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d44:	1c7b      	adds	r3, r7, #1
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d004      	beq.n	8001d56 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d4c:	1cbb      	adds	r3, r7, #2
 8001d4e:	881a      	ldrh	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d54:	e003      	b.n	8001d5e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d56:	1cbb      	adds	r3, r7, #2
 8001d58:	881a      	ldrh	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d5e:	46c0      	nop			@ (mov r8, r8)
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b002      	add	sp, #8
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e08f      	b.n	8001e9a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2241      	movs	r2, #65	@ 0x41
 8001d7e:	5c9b      	ldrb	r3, [r3, r2]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d107      	bne.n	8001d96 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2240      	movs	r2, #64	@ 0x40
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	0018      	movs	r0, r3
 8001d92:	f7fe fddf 	bl	8000954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2241      	movs	r2, #65	@ 0x41
 8001d9a:	2124      	movs	r1, #36	@ 0x24
 8001d9c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2101      	movs	r1, #1
 8001daa:	438a      	bics	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	493b      	ldr	r1, [pc, #236]	@ (8001ea4 <HAL_I2C_Init+0x13c>)
 8001db8:	400a      	ands	r2, r1
 8001dba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4938      	ldr	r1, [pc, #224]	@ (8001ea8 <HAL_I2C_Init+0x140>)
 8001dc8:	400a      	ands	r2, r1
 8001dca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d108      	bne.n	8001de6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2180      	movs	r1, #128	@ 0x80
 8001dde:	0209      	lsls	r1, r1, #8
 8001de0:	430a      	orrs	r2, r1
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	e007      	b.n	8001df6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2184      	movs	r1, #132	@ 0x84
 8001df0:	0209      	lsls	r1, r1, #8
 8001df2:	430a      	orrs	r2, r1
 8001df4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d109      	bne.n	8001e12 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2180      	movs	r1, #128	@ 0x80
 8001e0a:	0109      	lsls	r1, r1, #4
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	e007      	b.n	8001e22 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4923      	ldr	r1, [pc, #140]	@ (8001eac <HAL_I2C_Init+0x144>)
 8001e1e:	400a      	ands	r2, r1
 8001e20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4920      	ldr	r1, [pc, #128]	@ (8001eb0 <HAL_I2C_Init+0x148>)
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	491a      	ldr	r1, [pc, #104]	@ (8001ea8 <HAL_I2C_Init+0x140>)
 8001e3e:	400a      	ands	r2, r1
 8001e40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69d9      	ldr	r1, [r3, #28]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1a      	ldr	r2, [r3, #32]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2101      	movs	r1, #1
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2241      	movs	r2, #65	@ 0x41
 8001e86:	2120      	movs	r1, #32
 8001e88:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2242      	movs	r2, #66	@ 0x42
 8001e94:	2100      	movs	r1, #0
 8001e96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b002      	add	sp, #8
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			@ (mov r8, r8)
 8001ea4:	f0ffffff 	.word	0xf0ffffff
 8001ea8:	ffff7fff 	.word	0xffff7fff
 8001eac:	fffff7ff 	.word	0xfffff7ff
 8001eb0:	02008000 	.word	0x02008000

08001eb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2241      	movs	r2, #65	@ 0x41
 8001ec2:	5c9b      	ldrb	r3, [r3, r2]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	d138      	bne.n	8001f3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2240      	movs	r2, #64	@ 0x40
 8001ece:	5c9b      	ldrb	r3, [r3, r2]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e032      	b.n	8001f3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2240      	movs	r2, #64	@ 0x40
 8001edc:	2101      	movs	r1, #1
 8001ede:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2241      	movs	r2, #65	@ 0x41
 8001ee4:	2124      	movs	r1, #36	@ 0x24
 8001ee6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	438a      	bics	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4911      	ldr	r1, [pc, #68]	@ (8001f48 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001f04:	400a      	ands	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6819      	ldr	r1, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2101      	movs	r1, #1
 8001f24:	430a      	orrs	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2241      	movs	r2, #65	@ 0x41
 8001f2c:	2120      	movs	r1, #32
 8001f2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2240      	movs	r2, #64	@ 0x40
 8001f34:	2100      	movs	r1, #0
 8001f36:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e000      	b.n	8001f3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f3c:	2302      	movs	r3, #2
  }
}
 8001f3e:	0018      	movs	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b002      	add	sp, #8
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	46c0      	nop			@ (mov r8, r8)
 8001f48:	ffffefff 	.word	0xffffefff

08001f4c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2241      	movs	r2, #65	@ 0x41
 8001f5a:	5c9b      	ldrb	r3, [r3, r2]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b20      	cmp	r3, #32
 8001f60:	d139      	bne.n	8001fd6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2240      	movs	r2, #64	@ 0x40
 8001f66:	5c9b      	ldrb	r3, [r3, r2]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d101      	bne.n	8001f70 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e033      	b.n	8001fd8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2240      	movs	r2, #64	@ 0x40
 8001f74:	2101      	movs	r1, #1
 8001f76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2241      	movs	r2, #65	@ 0x41
 8001f7c:	2124      	movs	r1, #36	@ 0x24
 8001f7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	438a      	bics	r2, r1
 8001f8e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4a11      	ldr	r2, [pc, #68]	@ (8001fe0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2241      	movs	r2, #65	@ 0x41
 8001fc6:	2120      	movs	r1, #32
 8001fc8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2240      	movs	r2, #64	@ 0x40
 8001fce:	2100      	movs	r1, #0
 8001fd0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e000      	b.n	8001fd8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fd6:	2302      	movs	r3, #2
  }
}
 8001fd8:	0018      	movs	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b004      	add	sp, #16
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	fffff0ff 	.word	0xfffff0ff

08001fe4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001fec:	4b19      	ldr	r3, [pc, #100]	@ (8002054 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a19      	ldr	r2, [pc, #100]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	4b17      	ldr	r3, [pc, #92]	@ (8002054 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	2380      	movs	r3, #128	@ 0x80
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	429a      	cmp	r2, r3
 8002006:	d11f      	bne.n	8002048 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002008:	4b14      	ldr	r3, [pc, #80]	@ (800205c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	0013      	movs	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	189b      	adds	r3, r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4912      	ldr	r1, [pc, #72]	@ (8002060 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002016:	0018      	movs	r0, r3
 8002018:	f7fe f876 	bl	8000108 <__udivsi3>
 800201c:	0003      	movs	r3, r0
 800201e:	3301      	adds	r3, #1
 8002020:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002022:	e008      	b.n	8002036 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3b01      	subs	r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	e001      	b.n	8002036 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e009      	b.n	800204a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002036:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	2380      	movs	r3, #128	@ 0x80
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	401a      	ands	r2, r3
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	429a      	cmp	r2, r3
 8002046:	d0ed      	beq.n	8002024 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	0018      	movs	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	b004      	add	sp, #16
 8002050:	bd80      	pop	{r7, pc}
 8002052:	46c0      	nop			@ (mov r8, r8)
 8002054:	40007000 	.word	0x40007000
 8002058:	fffff9ff 	.word	0xfffff9ff
 800205c:	20000000 	.word	0x20000000
 8002060:	000f4240 	.word	0x000f4240

08002064 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d102      	bne.n	8002078 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	f000 fb50 	bl	8002718 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2201      	movs	r2, #1
 800207e:	4013      	ands	r3, r2
 8002080:	d100      	bne.n	8002084 <HAL_RCC_OscConfig+0x20>
 8002082:	e07c      	b.n	800217e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002084:	4bc3      	ldr	r3, [pc, #780]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2238      	movs	r2, #56	@ 0x38
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800208e:	4bc1      	ldr	r3, [pc, #772]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2203      	movs	r2, #3
 8002094:	4013      	ands	r3, r2
 8002096:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2b10      	cmp	r3, #16
 800209c:	d102      	bne.n	80020a4 <HAL_RCC_OscConfig+0x40>
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d002      	beq.n	80020aa <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d10b      	bne.n	80020c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020aa:	4bba      	ldr	r3, [pc, #744]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	2380      	movs	r3, #128	@ 0x80
 80020b0:	029b      	lsls	r3, r3, #10
 80020b2:	4013      	ands	r3, r2
 80020b4:	d062      	beq.n	800217c <HAL_RCC_OscConfig+0x118>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d15e      	bne.n	800217c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e32a      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	2380      	movs	r3, #128	@ 0x80
 80020c8:	025b      	lsls	r3, r3, #9
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d107      	bne.n	80020de <HAL_RCC_OscConfig+0x7a>
 80020ce:	4bb1      	ldr	r3, [pc, #708]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4bb0      	ldr	r3, [pc, #704]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 80020d4:	2180      	movs	r1, #128	@ 0x80
 80020d6:	0249      	lsls	r1, r1, #9
 80020d8:	430a      	orrs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	e020      	b.n	8002120 <HAL_RCC_OscConfig+0xbc>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	23a0      	movs	r3, #160	@ 0xa0
 80020e4:	02db      	lsls	r3, r3, #11
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d10e      	bne.n	8002108 <HAL_RCC_OscConfig+0xa4>
 80020ea:	4baa      	ldr	r3, [pc, #680]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4ba9      	ldr	r3, [pc, #676]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 80020f0:	2180      	movs	r1, #128	@ 0x80
 80020f2:	02c9      	lsls	r1, r1, #11
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	4ba6      	ldr	r3, [pc, #664]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4ba5      	ldr	r3, [pc, #660]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 80020fe:	2180      	movs	r1, #128	@ 0x80
 8002100:	0249      	lsls	r1, r1, #9
 8002102:	430a      	orrs	r2, r1
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	e00b      	b.n	8002120 <HAL_RCC_OscConfig+0xbc>
 8002108:	4ba2      	ldr	r3, [pc, #648]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4ba1      	ldr	r3, [pc, #644]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 800210e:	49a2      	ldr	r1, [pc, #648]	@ (8002398 <HAL_RCC_OscConfig+0x334>)
 8002110:	400a      	ands	r2, r1
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	4b9f      	ldr	r3, [pc, #636]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b9e      	ldr	r3, [pc, #632]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 800211a:	49a0      	ldr	r1, [pc, #640]	@ (800239c <HAL_RCC_OscConfig+0x338>)
 800211c:	400a      	ands	r2, r1
 800211e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d014      	beq.n	8002152 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7fe fd70 	bl	8000c0c <HAL_GetTick>
 800212c:	0003      	movs	r3, r0
 800212e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002132:	f7fe fd6b 	bl	8000c0c <HAL_GetTick>
 8002136:	0002      	movs	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b64      	cmp	r3, #100	@ 0x64
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e2e9      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002144:	4b93      	ldr	r3, [pc, #588]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	2380      	movs	r3, #128	@ 0x80
 800214a:	029b      	lsls	r3, r3, #10
 800214c:	4013      	ands	r3, r2
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0xce>
 8002150:	e015      	b.n	800217e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002152:	f7fe fd5b 	bl	8000c0c <HAL_GetTick>
 8002156:	0003      	movs	r3, r0
 8002158:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800215c:	f7fe fd56 	bl	8000c0c <HAL_GetTick>
 8002160:	0002      	movs	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	@ 0x64
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e2d4      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800216e:	4b89      	ldr	r3, [pc, #548]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	2380      	movs	r3, #128	@ 0x80
 8002174:	029b      	lsls	r3, r3, #10
 8002176:	4013      	ands	r3, r2
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0xf8>
 800217a:	e000      	b.n	800217e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2202      	movs	r2, #2
 8002184:	4013      	ands	r3, r2
 8002186:	d100      	bne.n	800218a <HAL_RCC_OscConfig+0x126>
 8002188:	e099      	b.n	80022be <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800218a:	4b82      	ldr	r3, [pc, #520]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2238      	movs	r2, #56	@ 0x38
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002194:	4b7f      	ldr	r3, [pc, #508]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	2203      	movs	r2, #3
 800219a:	4013      	ands	r3, r2
 800219c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	2b10      	cmp	r3, #16
 80021a2:	d102      	bne.n	80021aa <HAL_RCC_OscConfig+0x146>
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d002      	beq.n	80021b0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d135      	bne.n	800221c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b0:	4b78      	ldr	r3, [pc, #480]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	2380      	movs	r3, #128	@ 0x80
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4013      	ands	r3, r2
 80021ba:	d005      	beq.n	80021c8 <HAL_RCC_OscConfig+0x164>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e2a7      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c8:	4b72      	ldr	r3, [pc, #456]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a74      	ldr	r2, [pc, #464]	@ (80023a0 <HAL_RCC_OscConfig+0x33c>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	0019      	movs	r1, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	021a      	lsls	r2, r3, #8
 80021d8:	4b6e      	ldr	r3, [pc, #440]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 80021da:	430a      	orrs	r2, r1
 80021dc:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d112      	bne.n	800220a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021e4:	4b6b      	ldr	r3, [pc, #428]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a6e      	ldr	r2, [pc, #440]	@ (80023a4 <HAL_RCC_OscConfig+0x340>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	0019      	movs	r1, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	4b68      	ldr	r3, [pc, #416]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 80021f4:	430a      	orrs	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80021f8:	4b66      	ldr	r3, [pc, #408]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0adb      	lsrs	r3, r3, #11
 80021fe:	2207      	movs	r2, #7
 8002200:	4013      	ands	r3, r2
 8002202:	4a69      	ldr	r2, [pc, #420]	@ (80023a8 <HAL_RCC_OscConfig+0x344>)
 8002204:	40da      	lsrs	r2, r3
 8002206:	4b69      	ldr	r3, [pc, #420]	@ (80023ac <HAL_RCC_OscConfig+0x348>)
 8002208:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800220a:	4b69      	ldr	r3, [pc, #420]	@ (80023b0 <HAL_RCC_OscConfig+0x34c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	0018      	movs	r0, r3
 8002210:	f7fe fca0 	bl	8000b54 <HAL_InitTick>
 8002214:	1e03      	subs	r3, r0, #0
 8002216:	d051      	beq.n	80022bc <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e27d      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d030      	beq.n	8002286 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002224:	4b5b      	ldr	r3, [pc, #364]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a5e      	ldr	r2, [pc, #376]	@ (80023a4 <HAL_RCC_OscConfig+0x340>)
 800222a:	4013      	ands	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691a      	ldr	r2, [r3, #16]
 8002232:	4b58      	ldr	r3, [pc, #352]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002238:	4b56      	ldr	r3, [pc, #344]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b55      	ldr	r3, [pc, #340]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 800223e:	2180      	movs	r1, #128	@ 0x80
 8002240:	0049      	lsls	r1, r1, #1
 8002242:	430a      	orrs	r2, r1
 8002244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002246:	f7fe fce1 	bl	8000c0c <HAL_GetTick>
 800224a:	0003      	movs	r3, r0
 800224c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002250:	f7fe fcdc 	bl	8000c0c <HAL_GetTick>
 8002254:	0002      	movs	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e25a      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002262:	4b4c      	ldr	r3, [pc, #304]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	2380      	movs	r3, #128	@ 0x80
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4013      	ands	r3, r2
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226e:	4b49      	ldr	r3, [pc, #292]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4a4b      	ldr	r2, [pc, #300]	@ (80023a0 <HAL_RCC_OscConfig+0x33c>)
 8002274:	4013      	ands	r3, r2
 8002276:	0019      	movs	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	021a      	lsls	r2, r3, #8
 800227e:	4b45      	ldr	r3, [pc, #276]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 8002280:	430a      	orrs	r2, r1
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	e01b      	b.n	80022be <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002286:	4b43      	ldr	r3, [pc, #268]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	4b42      	ldr	r3, [pc, #264]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 800228c:	4949      	ldr	r1, [pc, #292]	@ (80023b4 <HAL_RCC_OscConfig+0x350>)
 800228e:	400a      	ands	r2, r1
 8002290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002292:	f7fe fcbb 	bl	8000c0c <HAL_GetTick>
 8002296:	0003      	movs	r3, r0
 8002298:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229c:	f7fe fcb6 	bl	8000c0c <HAL_GetTick>
 80022a0:	0002      	movs	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e234      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022ae:	4b39      	ldr	r3, [pc, #228]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	2380      	movs	r3, #128	@ 0x80
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4013      	ands	r3, r2
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x238>
 80022ba:	e000      	b.n	80022be <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022bc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2208      	movs	r2, #8
 80022c4:	4013      	ands	r3, r2
 80022c6:	d047      	beq.n	8002358 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80022c8:	4b32      	ldr	r3, [pc, #200]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2238      	movs	r2, #56	@ 0x38
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b18      	cmp	r3, #24
 80022d2:	d10a      	bne.n	80022ea <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80022d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 80022d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d8:	2202      	movs	r2, #2
 80022da:	4013      	ands	r3, r2
 80022dc:	d03c      	beq.n	8002358 <HAL_RCC_OscConfig+0x2f4>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d138      	bne.n	8002358 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e216      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d019      	beq.n	8002326 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80022f2:	4b28      	ldr	r3, [pc, #160]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 80022f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022f6:	4b27      	ldr	r3, [pc, #156]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 80022f8:	2101      	movs	r1, #1
 80022fa:	430a      	orrs	r2, r1
 80022fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fe:	f7fe fc85 	bl	8000c0c <HAL_GetTick>
 8002302:	0003      	movs	r3, r0
 8002304:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002308:	f7fe fc80 	bl	8000c0c <HAL_GetTick>
 800230c:	0002      	movs	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e1fe      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800231a:	4b1e      	ldr	r3, [pc, #120]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 800231c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231e:	2202      	movs	r2, #2
 8002320:	4013      	ands	r3, r2
 8002322:	d0f1      	beq.n	8002308 <HAL_RCC_OscConfig+0x2a4>
 8002324:	e018      	b.n	8002358 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002326:	4b1b      	ldr	r3, [pc, #108]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 8002328:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800232a:	4b1a      	ldr	r3, [pc, #104]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 800232c:	2101      	movs	r1, #1
 800232e:	438a      	bics	r2, r1
 8002330:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7fe fc6b 	bl	8000c0c <HAL_GetTick>
 8002336:	0003      	movs	r3, r0
 8002338:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800233c:	f7fe fc66 	bl	8000c0c <HAL_GetTick>
 8002340:	0002      	movs	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e1e4      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800234e:	4b11      	ldr	r3, [pc, #68]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 8002350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002352:	2202      	movs	r2, #2
 8002354:	4013      	ands	r3, r2
 8002356:	d1f1      	bne.n	800233c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2204      	movs	r2, #4
 800235e:	4013      	ands	r3, r2
 8002360:	d100      	bne.n	8002364 <HAL_RCC_OscConfig+0x300>
 8002362:	e0c7      	b.n	80024f4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002364:	231f      	movs	r3, #31
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800236c:	4b09      	ldr	r3, [pc, #36]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2238      	movs	r2, #56	@ 0x38
 8002372:	4013      	ands	r3, r2
 8002374:	2b20      	cmp	r3, #32
 8002376:	d11f      	bne.n	80023b8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002378:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <HAL_RCC_OscConfig+0x330>)
 800237a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237c:	2202      	movs	r2, #2
 800237e:	4013      	ands	r3, r2
 8002380:	d100      	bne.n	8002384 <HAL_RCC_OscConfig+0x320>
 8002382:	e0b7      	b.n	80024f4 <HAL_RCC_OscConfig+0x490>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d000      	beq.n	800238e <HAL_RCC_OscConfig+0x32a>
 800238c:	e0b2      	b.n	80024f4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e1c2      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
 8002392:	46c0      	nop			@ (mov r8, r8)
 8002394:	40021000 	.word	0x40021000
 8002398:	fffeffff 	.word	0xfffeffff
 800239c:	fffbffff 	.word	0xfffbffff
 80023a0:	ffff80ff 	.word	0xffff80ff
 80023a4:	ffffc7ff 	.word	0xffffc7ff
 80023a8:	00f42400 	.word	0x00f42400
 80023ac:	20000000 	.word	0x20000000
 80023b0:	20000004 	.word	0x20000004
 80023b4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023b8:	4bb5      	ldr	r3, [pc, #724]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 80023ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023bc:	2380      	movs	r3, #128	@ 0x80
 80023be:	055b      	lsls	r3, r3, #21
 80023c0:	4013      	ands	r3, r2
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_OscConfig+0x364>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x366>
 80023c8:	2300      	movs	r3, #0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d011      	beq.n	80023f2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	4bb0      	ldr	r3, [pc, #704]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 80023d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023d2:	4baf      	ldr	r3, [pc, #700]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 80023d4:	2180      	movs	r1, #128	@ 0x80
 80023d6:	0549      	lsls	r1, r1, #21
 80023d8:	430a      	orrs	r2, r1
 80023da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023dc:	4bac      	ldr	r3, [pc, #688]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 80023de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023e0:	2380      	movs	r3, #128	@ 0x80
 80023e2:	055b      	lsls	r3, r3, #21
 80023e4:	4013      	ands	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80023ea:	231f      	movs	r3, #31
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f2:	4ba8      	ldr	r3, [pc, #672]	@ (8002694 <HAL_RCC_OscConfig+0x630>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	2380      	movs	r3, #128	@ 0x80
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4013      	ands	r3, r2
 80023fc:	d11a      	bne.n	8002434 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4ba5      	ldr	r3, [pc, #660]	@ (8002694 <HAL_RCC_OscConfig+0x630>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	4ba4      	ldr	r3, [pc, #656]	@ (8002694 <HAL_RCC_OscConfig+0x630>)
 8002404:	2180      	movs	r1, #128	@ 0x80
 8002406:	0049      	lsls	r1, r1, #1
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800240c:	f7fe fbfe 	bl	8000c0c <HAL_GetTick>
 8002410:	0003      	movs	r3, r0
 8002412:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002416:	f7fe fbf9 	bl	8000c0c <HAL_GetTick>
 800241a:	0002      	movs	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e177      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002428:	4b9a      	ldr	r3, [pc, #616]	@ (8002694 <HAL_RCC_OscConfig+0x630>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	2380      	movs	r3, #128	@ 0x80
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4013      	ands	r3, r2
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x3e6>
 800243c:	4b94      	ldr	r3, [pc, #592]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 800243e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002440:	4b93      	ldr	r3, [pc, #588]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 8002442:	2101      	movs	r1, #1
 8002444:	430a      	orrs	r2, r1
 8002446:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002448:	e01c      	b.n	8002484 <HAL_RCC_OscConfig+0x420>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b05      	cmp	r3, #5
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x408>
 8002452:	4b8f      	ldr	r3, [pc, #572]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 8002454:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002456:	4b8e      	ldr	r3, [pc, #568]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 8002458:	2104      	movs	r1, #4
 800245a:	430a      	orrs	r2, r1
 800245c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800245e:	4b8c      	ldr	r3, [pc, #560]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 8002460:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002462:	4b8b      	ldr	r3, [pc, #556]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 8002464:	2101      	movs	r1, #1
 8002466:	430a      	orrs	r2, r1
 8002468:	65da      	str	r2, [r3, #92]	@ 0x5c
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0x420>
 800246c:	4b88      	ldr	r3, [pc, #544]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 800246e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002470:	4b87      	ldr	r3, [pc, #540]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 8002472:	2101      	movs	r1, #1
 8002474:	438a      	bics	r2, r1
 8002476:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002478:	4b85      	ldr	r3, [pc, #532]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 800247a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800247c:	4b84      	ldr	r3, [pc, #528]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 800247e:	2104      	movs	r1, #4
 8002480:	438a      	bics	r2, r1
 8002482:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d014      	beq.n	80024b6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7fe fbbe 	bl	8000c0c <HAL_GetTick>
 8002490:	0003      	movs	r3, r0
 8002492:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002494:	e009      	b.n	80024aa <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002496:	f7fe fbb9 	bl	8000c0c <HAL_GetTick>
 800249a:	0002      	movs	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	4a7d      	ldr	r2, [pc, #500]	@ (8002698 <HAL_RCC_OscConfig+0x634>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e136      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024aa:	4b79      	ldr	r3, [pc, #484]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 80024ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ae:	2202      	movs	r2, #2
 80024b0:	4013      	ands	r3, r2
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x432>
 80024b4:	e013      	b.n	80024de <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b6:	f7fe fba9 	bl	8000c0c <HAL_GetTick>
 80024ba:	0003      	movs	r3, r0
 80024bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024be:	e009      	b.n	80024d4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c0:	f7fe fba4 	bl	8000c0c <HAL_GetTick>
 80024c4:	0002      	movs	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	4a73      	ldr	r2, [pc, #460]	@ (8002698 <HAL_RCC_OscConfig+0x634>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e121      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024d4:	4b6e      	ldr	r3, [pc, #440]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 80024d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d8:	2202      	movs	r2, #2
 80024da:	4013      	ands	r3, r2
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80024de:	231f      	movs	r3, #31
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d105      	bne.n	80024f4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80024e8:	4b69      	ldr	r3, [pc, #420]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 80024ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024ec:	4b68      	ldr	r3, [pc, #416]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 80024ee:	496b      	ldr	r1, [pc, #428]	@ (800269c <HAL_RCC_OscConfig+0x638>)
 80024f0:	400a      	ands	r2, r1
 80024f2:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2220      	movs	r2, #32
 80024fa:	4013      	ands	r3, r2
 80024fc:	d039      	beq.n	8002572 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d01b      	beq.n	800253e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002506:	4b62      	ldr	r3, [pc, #392]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	4b61      	ldr	r3, [pc, #388]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 800250c:	2180      	movs	r1, #128	@ 0x80
 800250e:	03c9      	lsls	r1, r1, #15
 8002510:	430a      	orrs	r2, r1
 8002512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002514:	f7fe fb7a 	bl	8000c0c <HAL_GetTick>
 8002518:	0003      	movs	r3, r0
 800251a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800251e:	f7fe fb75 	bl	8000c0c <HAL_GetTick>
 8002522:	0002      	movs	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e0f3      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002530:	4b57      	ldr	r3, [pc, #348]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	2380      	movs	r3, #128	@ 0x80
 8002536:	041b      	lsls	r3, r3, #16
 8002538:	4013      	ands	r3, r2
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x4ba>
 800253c:	e019      	b.n	8002572 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800253e:	4b54      	ldr	r3, [pc, #336]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4b53      	ldr	r3, [pc, #332]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 8002544:	4956      	ldr	r1, [pc, #344]	@ (80026a0 <HAL_RCC_OscConfig+0x63c>)
 8002546:	400a      	ands	r2, r1
 8002548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254a:	f7fe fb5f 	bl	8000c0c <HAL_GetTick>
 800254e:	0003      	movs	r3, r0
 8002550:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002554:	f7fe fb5a 	bl	8000c0c <HAL_GetTick>
 8002558:	0002      	movs	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0d8      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002566:	4b4a      	ldr	r3, [pc, #296]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	2380      	movs	r3, #128	@ 0x80
 800256c:	041b      	lsls	r3, r3, #16
 800256e:	4013      	ands	r3, r2
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d100      	bne.n	800257c <HAL_RCC_OscConfig+0x518>
 800257a:	e0cc      	b.n	8002716 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800257c:	4b44      	ldr	r3, [pc, #272]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2238      	movs	r2, #56	@ 0x38
 8002582:	4013      	ands	r3, r2
 8002584:	2b10      	cmp	r3, #16
 8002586:	d100      	bne.n	800258a <HAL_RCC_OscConfig+0x526>
 8002588:	e07b      	b.n	8002682 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d156      	bne.n	8002640 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002592:	4b3f      	ldr	r3, [pc, #252]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4b3e      	ldr	r3, [pc, #248]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 8002598:	4942      	ldr	r1, [pc, #264]	@ (80026a4 <HAL_RCC_OscConfig+0x640>)
 800259a:	400a      	ands	r2, r1
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259e:	f7fe fb35 	bl	8000c0c <HAL_GetTick>
 80025a2:	0003      	movs	r3, r0
 80025a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a8:	f7fe fb30 	bl	8000c0c <HAL_GetTick>
 80025ac:	0002      	movs	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e0ae      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ba:	4b35      	ldr	r3, [pc, #212]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	@ 0x80
 80025c0:	049b      	lsls	r3, r3, #18
 80025c2:	4013      	ands	r3, r2
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c6:	4b32      	ldr	r3, [pc, #200]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	4a37      	ldr	r2, [pc, #220]	@ (80026a8 <HAL_RCC_OscConfig+0x644>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	0019      	movs	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f2:	431a      	orrs	r2, r3
 80025f4:	4b26      	ldr	r3, [pc, #152]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 80025f6:	430a      	orrs	r2, r1
 80025f8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025fa:	4b25      	ldr	r3, [pc, #148]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 8002600:	2180      	movs	r1, #128	@ 0x80
 8002602:	0449      	lsls	r1, r1, #17
 8002604:	430a      	orrs	r2, r1
 8002606:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002608:	4b21      	ldr	r3, [pc, #132]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	4b20      	ldr	r3, [pc, #128]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 800260e:	2180      	movs	r1, #128	@ 0x80
 8002610:	0549      	lsls	r1, r1, #21
 8002612:	430a      	orrs	r2, r1
 8002614:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7fe faf9 	bl	8000c0c <HAL_GetTick>
 800261a:	0003      	movs	r3, r0
 800261c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002620:	f7fe faf4 	bl	8000c0c <HAL_GetTick>
 8002624:	0002      	movs	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e072      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002632:	4b17      	ldr	r3, [pc, #92]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	2380      	movs	r3, #128	@ 0x80
 8002638:	049b      	lsls	r3, r3, #18
 800263a:	4013      	ands	r3, r2
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x5bc>
 800263e:	e06a      	b.n	8002716 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002640:	4b13      	ldr	r3, [pc, #76]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 8002646:	4917      	ldr	r1, [pc, #92]	@ (80026a4 <HAL_RCC_OscConfig+0x640>)
 8002648:	400a      	ands	r2, r1
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe fade 	bl	8000c0c <HAL_GetTick>
 8002650:	0003      	movs	r3, r0
 8002652:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002656:	f7fe fad9 	bl	8000c0c <HAL_GetTick>
 800265a:	0002      	movs	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e057      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002668:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2380      	movs	r3, #128	@ 0x80
 800266e:	049b      	lsls	r3, r3, #18
 8002670:	4013      	ands	r3, r2
 8002672:	d1f0      	bne.n	8002656 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002674:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	4b05      	ldr	r3, [pc, #20]	@ (8002690 <HAL_RCC_OscConfig+0x62c>)
 800267a:	490c      	ldr	r1, [pc, #48]	@ (80026ac <HAL_RCC_OscConfig+0x648>)
 800267c:	400a      	ands	r2, r1
 800267e:	60da      	str	r2, [r3, #12]
 8002680:	e049      	b.n	8002716 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d112      	bne.n	80026b0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e044      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
 800268e:	46c0      	nop			@ (mov r8, r8)
 8002690:	40021000 	.word	0x40021000
 8002694:	40007000 	.word	0x40007000
 8002698:	00001388 	.word	0x00001388
 800269c:	efffffff 	.word	0xefffffff
 80026a0:	ffbfffff 	.word	0xffbfffff
 80026a4:	feffffff 	.word	0xfeffffff
 80026a8:	11c1808c 	.word	0x11c1808c
 80026ac:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80026b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002720 <HAL_RCC_OscConfig+0x6bc>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2203      	movs	r2, #3
 80026ba:	401a      	ands	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d126      	bne.n	8002712 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2270      	movs	r2, #112	@ 0x70
 80026c8:	401a      	ands	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d11f      	bne.n	8002712 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	23fe      	movs	r3, #254	@ 0xfe
 80026d6:	01db      	lsls	r3, r3, #7
 80026d8:	401a      	ands	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026de:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d116      	bne.n	8002712 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	23f8      	movs	r3, #248	@ 0xf8
 80026e8:	039b      	lsls	r3, r3, #14
 80026ea:	401a      	ands	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d10e      	bne.n	8002712 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	23e0      	movs	r3, #224	@ 0xe0
 80026f8:	051b      	lsls	r3, r3, #20
 80026fa:	401a      	ands	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d106      	bne.n	8002712 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	0f5b      	lsrs	r3, r3, #29
 8002708:	075a      	lsls	r2, r3, #29
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800270e:	429a      	cmp	r2, r3
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	0018      	movs	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	b008      	add	sp, #32
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40021000 	.word	0x40021000

08002724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0e9      	b.n	800290c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002738:	4b76      	ldr	r3, [pc, #472]	@ (8002914 <HAL_RCC_ClockConfig+0x1f0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2207      	movs	r2, #7
 800273e:	4013      	ands	r3, r2
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d91e      	bls.n	8002784 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002746:	4b73      	ldr	r3, [pc, #460]	@ (8002914 <HAL_RCC_ClockConfig+0x1f0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2207      	movs	r2, #7
 800274c:	4393      	bics	r3, r2
 800274e:	0019      	movs	r1, r3
 8002750:	4b70      	ldr	r3, [pc, #448]	@ (8002914 <HAL_RCC_ClockConfig+0x1f0>)
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002758:	f7fe fa58 	bl	8000c0c <HAL_GetTick>
 800275c:	0003      	movs	r3, r0
 800275e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002760:	e009      	b.n	8002776 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002762:	f7fe fa53 	bl	8000c0c <HAL_GetTick>
 8002766:	0002      	movs	r2, r0
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	4a6a      	ldr	r2, [pc, #424]	@ (8002918 <HAL_RCC_ClockConfig+0x1f4>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e0ca      	b.n	800290c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002776:	4b67      	ldr	r3, [pc, #412]	@ (8002914 <HAL_RCC_ClockConfig+0x1f0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2207      	movs	r2, #7
 800277c:	4013      	ands	r3, r2
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d1ee      	bne.n	8002762 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2202      	movs	r2, #2
 800278a:	4013      	ands	r3, r2
 800278c:	d015      	beq.n	80027ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2204      	movs	r2, #4
 8002794:	4013      	ands	r3, r2
 8002796:	d006      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002798:	4b60      	ldr	r3, [pc, #384]	@ (800291c <HAL_RCC_ClockConfig+0x1f8>)
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	4b5f      	ldr	r3, [pc, #380]	@ (800291c <HAL_RCC_ClockConfig+0x1f8>)
 800279e:	21e0      	movs	r1, #224	@ 0xe0
 80027a0:	01c9      	lsls	r1, r1, #7
 80027a2:	430a      	orrs	r2, r1
 80027a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a6:	4b5d      	ldr	r3, [pc, #372]	@ (800291c <HAL_RCC_ClockConfig+0x1f8>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	4a5d      	ldr	r2, [pc, #372]	@ (8002920 <HAL_RCC_ClockConfig+0x1fc>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	0019      	movs	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	4b59      	ldr	r3, [pc, #356]	@ (800291c <HAL_RCC_ClockConfig+0x1f8>)
 80027b6:	430a      	orrs	r2, r1
 80027b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2201      	movs	r2, #1
 80027c0:	4013      	ands	r3, r2
 80027c2:	d057      	beq.n	8002874 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d107      	bne.n	80027dc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027cc:	4b53      	ldr	r3, [pc, #332]	@ (800291c <HAL_RCC_ClockConfig+0x1f8>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	2380      	movs	r3, #128	@ 0x80
 80027d2:	029b      	lsls	r3, r3, #10
 80027d4:	4013      	ands	r3, r2
 80027d6:	d12b      	bne.n	8002830 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e097      	b.n	800290c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d107      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e4:	4b4d      	ldr	r3, [pc, #308]	@ (800291c <HAL_RCC_ClockConfig+0x1f8>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	2380      	movs	r3, #128	@ 0x80
 80027ea:	049b      	lsls	r3, r3, #18
 80027ec:	4013      	ands	r3, r2
 80027ee:	d11f      	bne.n	8002830 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e08b      	b.n	800290c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d107      	bne.n	800280c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027fc:	4b47      	ldr	r3, [pc, #284]	@ (800291c <HAL_RCC_ClockConfig+0x1f8>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	2380      	movs	r3, #128	@ 0x80
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4013      	ands	r3, r2
 8002806:	d113      	bne.n	8002830 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e07f      	b.n	800290c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b03      	cmp	r3, #3
 8002812:	d106      	bne.n	8002822 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002814:	4b41      	ldr	r3, [pc, #260]	@ (800291c <HAL_RCC_ClockConfig+0x1f8>)
 8002816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002818:	2202      	movs	r2, #2
 800281a:	4013      	ands	r3, r2
 800281c:	d108      	bne.n	8002830 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e074      	b.n	800290c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002822:	4b3e      	ldr	r3, [pc, #248]	@ (800291c <HAL_RCC_ClockConfig+0x1f8>)
 8002824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002826:	2202      	movs	r2, #2
 8002828:	4013      	ands	r3, r2
 800282a:	d101      	bne.n	8002830 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e06d      	b.n	800290c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002830:	4b3a      	ldr	r3, [pc, #232]	@ (800291c <HAL_RCC_ClockConfig+0x1f8>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2207      	movs	r2, #7
 8002836:	4393      	bics	r3, r2
 8002838:	0019      	movs	r1, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	4b37      	ldr	r3, [pc, #220]	@ (800291c <HAL_RCC_ClockConfig+0x1f8>)
 8002840:	430a      	orrs	r2, r1
 8002842:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002844:	f7fe f9e2 	bl	8000c0c <HAL_GetTick>
 8002848:	0003      	movs	r3, r0
 800284a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284c:	e009      	b.n	8002862 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800284e:	f7fe f9dd 	bl	8000c0c <HAL_GetTick>
 8002852:	0002      	movs	r2, r0
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	4a2f      	ldr	r2, [pc, #188]	@ (8002918 <HAL_RCC_ClockConfig+0x1f4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e054      	b.n	800290c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	4b2e      	ldr	r3, [pc, #184]	@ (800291c <HAL_RCC_ClockConfig+0x1f8>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2238      	movs	r2, #56	@ 0x38
 8002868:	401a      	ands	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	429a      	cmp	r2, r3
 8002872:	d1ec      	bne.n	800284e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002874:	4b27      	ldr	r3, [pc, #156]	@ (8002914 <HAL_RCC_ClockConfig+0x1f0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2207      	movs	r2, #7
 800287a:	4013      	ands	r3, r2
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d21e      	bcs.n	80028c0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	4b24      	ldr	r3, [pc, #144]	@ (8002914 <HAL_RCC_ClockConfig+0x1f0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2207      	movs	r2, #7
 8002888:	4393      	bics	r3, r2
 800288a:	0019      	movs	r1, r3
 800288c:	4b21      	ldr	r3, [pc, #132]	@ (8002914 <HAL_RCC_ClockConfig+0x1f0>)
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002894:	f7fe f9ba 	bl	8000c0c <HAL_GetTick>
 8002898:	0003      	movs	r3, r0
 800289a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800289c:	e009      	b.n	80028b2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800289e:	f7fe f9b5 	bl	8000c0c <HAL_GetTick>
 80028a2:	0002      	movs	r2, r0
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002918 <HAL_RCC_ClockConfig+0x1f4>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e02c      	b.n	800290c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028b2:	4b18      	ldr	r3, [pc, #96]	@ (8002914 <HAL_RCC_ClockConfig+0x1f0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2207      	movs	r2, #7
 80028b8:	4013      	ands	r3, r2
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d1ee      	bne.n	800289e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2204      	movs	r2, #4
 80028c6:	4013      	ands	r3, r2
 80028c8:	d009      	beq.n	80028de <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80028ca:	4b14      	ldr	r3, [pc, #80]	@ (800291c <HAL_RCC_ClockConfig+0x1f8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	4a15      	ldr	r2, [pc, #84]	@ (8002924 <HAL_RCC_ClockConfig+0x200>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	0019      	movs	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	4b10      	ldr	r3, [pc, #64]	@ (800291c <HAL_RCC_ClockConfig+0x1f8>)
 80028da:	430a      	orrs	r2, r1
 80028dc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80028de:	f000 f829 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80028e2:	0001      	movs	r1, r0
 80028e4:	4b0d      	ldr	r3, [pc, #52]	@ (800291c <HAL_RCC_ClockConfig+0x1f8>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	220f      	movs	r2, #15
 80028ec:	401a      	ands	r2, r3
 80028ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002928 <HAL_RCC_ClockConfig+0x204>)
 80028f0:	0092      	lsls	r2, r2, #2
 80028f2:	58d3      	ldr	r3, [r2, r3]
 80028f4:	221f      	movs	r2, #31
 80028f6:	4013      	ands	r3, r2
 80028f8:	000a      	movs	r2, r1
 80028fa:	40da      	lsrs	r2, r3
 80028fc:	4b0b      	ldr	r3, [pc, #44]	@ (800292c <HAL_RCC_ClockConfig+0x208>)
 80028fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002900:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <HAL_RCC_ClockConfig+0x20c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	0018      	movs	r0, r3
 8002906:	f7fe f925 	bl	8000b54 <HAL_InitTick>
 800290a:	0003      	movs	r3, r0
}
 800290c:	0018      	movs	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	b004      	add	sp, #16
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40022000 	.word	0x40022000
 8002918:	00001388 	.word	0x00001388
 800291c:	40021000 	.word	0x40021000
 8002920:	fffff0ff 	.word	0xfffff0ff
 8002924:	ffff8fff 	.word	0xffff8fff
 8002928:	0800554c 	.word	0x0800554c
 800292c:	20000000 	.word	0x20000000
 8002930:	20000004 	.word	0x20000004

08002934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800293a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2238      	movs	r2, #56	@ 0x38
 8002940:	4013      	ands	r3, r2
 8002942:	d10f      	bne.n	8002964 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002944:	4b39      	ldr	r3, [pc, #228]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	0adb      	lsrs	r3, r3, #11
 800294a:	2207      	movs	r2, #7
 800294c:	4013      	ands	r3, r2
 800294e:	2201      	movs	r2, #1
 8002950:	409a      	lsls	r2, r3
 8002952:	0013      	movs	r3, r2
 8002954:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002956:	6839      	ldr	r1, [r7, #0]
 8002958:	4835      	ldr	r0, [pc, #212]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0xfc>)
 800295a:	f7fd fbd5 	bl	8000108 <__udivsi3>
 800295e:	0003      	movs	r3, r0
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	e05d      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002964:	4b31      	ldr	r3, [pc, #196]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2238      	movs	r2, #56	@ 0x38
 800296a:	4013      	ands	r3, r2
 800296c:	2b08      	cmp	r3, #8
 800296e:	d102      	bne.n	8002976 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002970:	4b30      	ldr	r3, [pc, #192]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x100>)
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	e054      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002976:	4b2d      	ldr	r3, [pc, #180]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2238      	movs	r2, #56	@ 0x38
 800297c:	4013      	ands	r3, r2
 800297e:	2b10      	cmp	r3, #16
 8002980:	d138      	bne.n	80029f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002982:	4b2a      	ldr	r3, [pc, #168]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2203      	movs	r2, #3
 8002988:	4013      	ands	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800298c:	4b27      	ldr	r3, [pc, #156]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	2207      	movs	r2, #7
 8002994:	4013      	ands	r3, r2
 8002996:	3301      	adds	r3, #1
 8002998:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d10d      	bne.n	80029bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	4824      	ldr	r0, [pc, #144]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x100>)
 80029a4:	f7fd fbb0 	bl	8000108 <__udivsi3>
 80029a8:	0003      	movs	r3, r0
 80029aa:	0019      	movs	r1, r3
 80029ac:	4b1f      	ldr	r3, [pc, #124]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	0a1b      	lsrs	r3, r3, #8
 80029b2:	227f      	movs	r2, #127	@ 0x7f
 80029b4:	4013      	ands	r3, r2
 80029b6:	434b      	muls	r3, r1
 80029b8:	617b      	str	r3, [r7, #20]
        break;
 80029ba:	e00d      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	481c      	ldr	r0, [pc, #112]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0xfc>)
 80029c0:	f7fd fba2 	bl	8000108 <__udivsi3>
 80029c4:	0003      	movs	r3, r0
 80029c6:	0019      	movs	r1, r3
 80029c8:	4b18      	ldr	r3, [pc, #96]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	0a1b      	lsrs	r3, r3, #8
 80029ce:	227f      	movs	r2, #127	@ 0x7f
 80029d0:	4013      	ands	r3, r2
 80029d2:	434b      	muls	r3, r1
 80029d4:	617b      	str	r3, [r7, #20]
        break;
 80029d6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80029d8:	4b14      	ldr	r3, [pc, #80]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	0f5b      	lsrs	r3, r3, #29
 80029de:	2207      	movs	r2, #7
 80029e0:	4013      	ands	r3, r2
 80029e2:	3301      	adds	r3, #1
 80029e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	6978      	ldr	r0, [r7, #20]
 80029ea:	f7fd fb8d 	bl	8000108 <__udivsi3>
 80029ee:	0003      	movs	r3, r0
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	e015      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80029f4:	4b0d      	ldr	r3, [pc, #52]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2238      	movs	r2, #56	@ 0x38
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	d103      	bne.n	8002a08 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002a00:	2380      	movs	r3, #128	@ 0x80
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	e00b      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a08:	4b08      	ldr	r3, [pc, #32]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2238      	movs	r2, #56	@ 0x38
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b18      	cmp	r3, #24
 8002a12:	d103      	bne.n	8002a1c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002a14:	23fa      	movs	r3, #250	@ 0xfa
 8002a16:	01db      	lsls	r3, r3, #7
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	e001      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a20:	693b      	ldr	r3, [r7, #16]
}
 8002a22:	0018      	movs	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b006      	add	sp, #24
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	46c0      	nop			@ (mov r8, r8)
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	00f42400 	.word	0x00f42400
 8002a34:	007a1200 	.word	0x007a1200

08002a38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002a40:	2313      	movs	r3, #19
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a48:	2312      	movs	r3, #18
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	2380      	movs	r3, #128	@ 0x80
 8002a56:	029b      	lsls	r3, r3, #10
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d100      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002a5c:	e0ad      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a5e:	2011      	movs	r0, #17
 8002a60:	183b      	adds	r3, r7, r0
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a66:	4b47      	ldr	r3, [pc, #284]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002a68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a6a:	2380      	movs	r3, #128	@ 0x80
 8002a6c:	055b      	lsls	r3, r3, #21
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d110      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a72:	4b44      	ldr	r3, [pc, #272]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002a74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a76:	4b43      	ldr	r3, [pc, #268]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002a78:	2180      	movs	r1, #128	@ 0x80
 8002a7a:	0549      	lsls	r1, r1, #21
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a80:	4b40      	ldr	r3, [pc, #256]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002a82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	055b      	lsls	r3, r3, #21
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a8e:	183b      	adds	r3, r7, r0
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a94:	4b3c      	ldr	r3, [pc, #240]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b3b      	ldr	r3, [pc, #236]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002a9a:	2180      	movs	r1, #128	@ 0x80
 8002a9c:	0049      	lsls	r1, r1, #1
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aa2:	f7fe f8b3 	bl	8000c0c <HAL_GetTick>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aaa:	e00b      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aac:	f7fe f8ae 	bl	8000c0c <HAL_GetTick>
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d904      	bls.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002aba:	2313      	movs	r3, #19
 8002abc:	18fb      	adds	r3, r7, r3
 8002abe:	2203      	movs	r2, #3
 8002ac0:	701a      	strb	r2, [r3, #0]
        break;
 8002ac2:	e005      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ac4:	4b30      	ldr	r3, [pc, #192]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	2380      	movs	r3, #128	@ 0x80
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4013      	ands	r3, r2
 8002ace:	d0ed      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002ad0:	2313      	movs	r3, #19
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d15e      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ada:	4b2a      	ldr	r3, [pc, #168]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002adc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ade:	23c0      	movs	r3, #192	@ 0xc0
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d019      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d014      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002af6:	4b23      	ldr	r3, [pc, #140]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afa:	4a24      	ldr	r2, [pc, #144]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b00:	4b20      	ldr	r3, [pc, #128]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b04:	4b1f      	ldr	r3, [pc, #124]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b06:	2180      	movs	r1, #128	@ 0x80
 8002b08:	0249      	lsls	r1, r1, #9
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b12:	4b1c      	ldr	r3, [pc, #112]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b14:	491e      	ldr	r1, [pc, #120]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002b16:	400a      	ands	r2, r1
 8002b18:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2201      	movs	r2, #1
 8002b24:	4013      	ands	r3, r2
 8002b26:	d016      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7fe f870 	bl	8000c0c <HAL_GetTick>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b30:	e00c      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b32:	f7fe f86b 	bl	8000c0c <HAL_GetTick>
 8002b36:	0002      	movs	r2, r0
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	4a15      	ldr	r2, [pc, #84]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d904      	bls.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002b42:	2313      	movs	r3, #19
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	2203      	movs	r2, #3
 8002b48:	701a      	strb	r2, [r3, #0]
            break;
 8002b4a:	e004      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b50:	2202      	movs	r2, #2
 8002b52:	4013      	ands	r3, r2
 8002b54:	d0ed      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002b56:	2313      	movs	r3, #19
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10a      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b60:	4b08      	ldr	r3, [pc, #32]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b64:	4a09      	ldr	r2, [pc, #36]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	0019      	movs	r1, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b6e:	4b05      	ldr	r3, [pc, #20]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b70:	430a      	orrs	r2, r1
 8002b72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b74:	e016      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b76:	2312      	movs	r3, #18
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	2213      	movs	r2, #19
 8002b7c:	18ba      	adds	r2, r7, r2
 8002b7e:	7812      	ldrb	r2, [r2, #0]
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	e00f      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	fffffcff 	.word	0xfffffcff
 8002b90:	fffeffff 	.word	0xfffeffff
 8002b94:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b98:	2312      	movs	r3, #18
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	2213      	movs	r2, #19
 8002b9e:	18ba      	adds	r2, r7, r2
 8002ba0:	7812      	ldrb	r2, [r2, #0]
 8002ba2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ba4:	2311      	movs	r3, #17
 8002ba6:	18fb      	adds	r3, r7, r3
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d105      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bae:	4bb6      	ldr	r3, [pc, #728]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bb2:	4bb5      	ldr	r3, [pc, #724]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bb4:	49b5      	ldr	r1, [pc, #724]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002bb6:	400a      	ands	r2, r1
 8002bb8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d009      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bc4:	4bb0      	ldr	r3, [pc, #704]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc8:	2203      	movs	r2, #3
 8002bca:	4393      	bics	r3, r2
 8002bcc:	0019      	movs	r1, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	4bad      	ldr	r3, [pc, #692]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	4013      	ands	r3, r2
 8002be0:	d009      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002be2:	4ba9      	ldr	r3, [pc, #676]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be6:	220c      	movs	r2, #12
 8002be8:	4393      	bics	r3, r2
 8002bea:	0019      	movs	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	4ba5      	ldr	r3, [pc, #660]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d009      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c00:	4ba1      	ldr	r3, [pc, #644]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c04:	2230      	movs	r2, #48	@ 0x30
 8002c06:	4393      	bics	r3, r2
 8002c08:	0019      	movs	r1, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	4b9e      	ldr	r3, [pc, #632]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c10:	430a      	orrs	r2, r1
 8002c12:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2210      	movs	r2, #16
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d009      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c1e:	4b9a      	ldr	r3, [pc, #616]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c22:	4a9b      	ldr	r2, [pc, #620]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	0019      	movs	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	4b96      	ldr	r3, [pc, #600]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	2380      	movs	r3, #128	@ 0x80
 8002c38:	015b      	lsls	r3, r3, #5
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d009      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002c3e:	4b92      	ldr	r3, [pc, #584]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c42:	4a94      	ldr	r2, [pc, #592]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	0019      	movs	r1, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	695a      	ldr	r2, [r3, #20]
 8002c4c:	4b8e      	ldr	r3, [pc, #568]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	2380      	movs	r3, #128	@ 0x80
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d009      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c5e:	4b8a      	ldr	r3, [pc, #552]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c62:	4a8d      	ldr	r2, [pc, #564]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	0019      	movs	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c6c:	4b86      	ldr	r3, [pc, #536]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	2380      	movs	r3, #128	@ 0x80
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d009      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c7e:	4b82      	ldr	r3, [pc, #520]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c82:	4a86      	ldr	r2, [pc, #536]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	0019      	movs	r1, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c8c:	4b7e      	ldr	r3, [pc, #504]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2220      	movs	r2, #32
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d009      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c9c:	4b7a      	ldr	r3, [pc, #488]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca0:	4a7f      	ldr	r2, [pc, #508]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	0019      	movs	r1, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	4b77      	ldr	r3, [pc, #476]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cac:	430a      	orrs	r2, r1
 8002cae:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2240      	movs	r2, #64	@ 0x40
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d009      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cba:	4b73      	ldr	r3, [pc, #460]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cbe:	4a79      	ldr	r2, [pc, #484]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69da      	ldr	r2, [r3, #28]
 8002cc8:	4b6f      	ldr	r3, [pc, #444]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	2380      	movs	r3, #128	@ 0x80
 8002cd4:	01db      	lsls	r3, r3, #7
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d015      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cda:	4b6b      	ldr	r3, [pc, #428]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	0899      	lsrs	r1, r3, #2
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ce6:	4b68      	ldr	r3, [pc, #416]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cf0:	2380      	movs	r3, #128	@ 0x80
 8002cf2:	05db      	lsls	r3, r3, #23
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d106      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002cf8:	4b63      	ldr	r3, [pc, #396]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	4b62      	ldr	r3, [pc, #392]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cfe:	2180      	movs	r1, #128	@ 0x80
 8002d00:	0249      	lsls	r1, r1, #9
 8002d02:	430a      	orrs	r2, r1
 8002d04:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	2380      	movs	r3, #128	@ 0x80
 8002d0c:	031b      	lsls	r3, r3, #12
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d009      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d12:	4b5d      	ldr	r3, [pc, #372]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d16:	2240      	movs	r2, #64	@ 0x40
 8002d18:	4393      	bics	r3, r2
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d20:	4b59      	ldr	r3, [pc, #356]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d22:	430a      	orrs	r2, r1
 8002d24:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	2380      	movs	r3, #128	@ 0x80
 8002d2c:	039b      	lsls	r3, r3, #14
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d016      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d32:	4b55      	ldr	r3, [pc, #340]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d36:	4a5c      	ldr	r2, [pc, #368]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d40:	4b51      	ldr	r3, [pc, #324]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d42:	430a      	orrs	r2, r1
 8002d44:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d4a:	2380      	movs	r3, #128	@ 0x80
 8002d4c:	03db      	lsls	r3, r3, #15
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d106      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002d52:	4b4d      	ldr	r3, [pc, #308]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	4b4c      	ldr	r3, [pc, #304]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d58:	2180      	movs	r1, #128	@ 0x80
 8002d5a:	0449      	lsls	r1, r1, #17
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	2380      	movs	r3, #128	@ 0x80
 8002d66:	03db      	lsls	r3, r3, #15
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d016      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002d6c:	4b46      	ldr	r3, [pc, #280]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d70:	4a4e      	ldr	r2, [pc, #312]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	0019      	movs	r1, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d7a:	4b43      	ldr	r3, [pc, #268]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d84:	2380      	movs	r3, #128	@ 0x80
 8002d86:	045b      	lsls	r3, r3, #17
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d106      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002d8c:	4b3e      	ldr	r3, [pc, #248]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	4b3d      	ldr	r3, [pc, #244]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d92:	2180      	movs	r1, #128	@ 0x80
 8002d94:	0449      	lsls	r1, r1, #17
 8002d96:	430a      	orrs	r2, r1
 8002d98:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	2380      	movs	r3, #128	@ 0x80
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	4013      	ands	r3, r2
 8002da4:	d014      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002da6:	4b38      	ldr	r3, [pc, #224]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002daa:	2203      	movs	r2, #3
 8002dac:	4393      	bics	r3, r2
 8002dae:	0019      	movs	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1a      	ldr	r2, [r3, #32]
 8002db4:	4b34      	ldr	r3, [pc, #208]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002db6:	430a      	orrs	r2, r1
 8002db8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d106      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002dc2:	4b31      	ldr	r3, [pc, #196]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	4b30      	ldr	r3, [pc, #192]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dc8:	2180      	movs	r1, #128	@ 0x80
 8002dca:	0249      	lsls	r1, r1, #9
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	2380      	movs	r3, #128	@ 0x80
 8002dd6:	019b      	lsls	r3, r3, #6
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d014      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de0:	220c      	movs	r2, #12
 8002de2:	4393      	bics	r3, r2
 8002de4:	0019      	movs	r1, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dea:	4b27      	ldr	r3, [pc, #156]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dec:	430a      	orrs	r2, r1
 8002dee:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d106      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002df8:	4b23      	ldr	r3, [pc, #140]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	4b22      	ldr	r3, [pc, #136]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dfe:	2180      	movs	r1, #128	@ 0x80
 8002e00:	0249      	lsls	r1, r1, #9
 8002e02:	430a      	orrs	r2, r1
 8002e04:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	2380      	movs	r3, #128	@ 0x80
 8002e0c:	045b      	lsls	r3, r3, #17
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d016      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e12:	4b1d      	ldr	r3, [pc, #116]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e16:	4a22      	ldr	r2, [pc, #136]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e20:	4b19      	ldr	r3, [pc, #100]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e22:	430a      	orrs	r2, r1
 8002e24:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e2a:	2380      	movs	r3, #128	@ 0x80
 8002e2c:	019b      	lsls	r3, r3, #6
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d106      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e32:	4b15      	ldr	r3, [pc, #84]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	4b14      	ldr	r3, [pc, #80]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e38:	2180      	movs	r1, #128	@ 0x80
 8002e3a:	0449      	lsls	r1, r1, #17
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	2380      	movs	r3, #128	@ 0x80
 8002e46:	049b      	lsls	r3, r3, #18
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d016      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e50:	4a10      	ldr	r2, [pc, #64]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	0019      	movs	r1, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e64:	2380      	movs	r3, #128	@ 0x80
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d106      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e6c:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e72:	2180      	movs	r1, #128	@ 0x80
 8002e74:	0449      	lsls	r1, r1, #17
 8002e76:	430a      	orrs	r2, r1
 8002e78:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002e7a:	2312      	movs	r3, #18
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	781b      	ldrb	r3, [r3, #0]
}
 8002e80:	0018      	movs	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b006      	add	sp, #24
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	efffffff 	.word	0xefffffff
 8002e90:	fffff3ff 	.word	0xfffff3ff
 8002e94:	fffffcff 	.word	0xfffffcff
 8002e98:	fff3ffff 	.word	0xfff3ffff
 8002e9c:	ffcfffff 	.word	0xffcfffff
 8002ea0:	ffffcfff 	.word	0xffffcfff
 8002ea4:	ffff3fff 	.word	0xffff3fff
 8002ea8:	ffbfffff 	.word	0xffbfffff
 8002eac:	feffffff 	.word	0xfeffffff

08002eb0 <__NVIC_SetPriority>:
{
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	0002      	movs	r2, r0
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	1dfb      	adds	r3, r7, #7
 8002ebc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ebe:	1dfb      	adds	r3, r7, #7
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ec4:	d828      	bhi.n	8002f18 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ec6:	4a2f      	ldr	r2, [pc, #188]	@ (8002f84 <__NVIC_SetPriority+0xd4>)
 8002ec8:	1dfb      	adds	r3, r7, #7
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	b25b      	sxtb	r3, r3
 8002ece:	089b      	lsrs	r3, r3, #2
 8002ed0:	33c0      	adds	r3, #192	@ 0xc0
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	589b      	ldr	r3, [r3, r2]
 8002ed6:	1dfa      	adds	r2, r7, #7
 8002ed8:	7812      	ldrb	r2, [r2, #0]
 8002eda:	0011      	movs	r1, r2
 8002edc:	2203      	movs	r2, #3
 8002ede:	400a      	ands	r2, r1
 8002ee0:	00d2      	lsls	r2, r2, #3
 8002ee2:	21ff      	movs	r1, #255	@ 0xff
 8002ee4:	4091      	lsls	r1, r2
 8002ee6:	000a      	movs	r2, r1
 8002ee8:	43d2      	mvns	r2, r2
 8002eea:	401a      	ands	r2, r3
 8002eec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	019b      	lsls	r3, r3, #6
 8002ef2:	22ff      	movs	r2, #255	@ 0xff
 8002ef4:	401a      	ands	r2, r3
 8002ef6:	1dfb      	adds	r3, r7, #7
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	0018      	movs	r0, r3
 8002efc:	2303      	movs	r3, #3
 8002efe:	4003      	ands	r3, r0
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f04:	481f      	ldr	r0, [pc, #124]	@ (8002f84 <__NVIC_SetPriority+0xd4>)
 8002f06:	1dfb      	adds	r3, r7, #7
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	b25b      	sxtb	r3, r3
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	33c0      	adds	r3, #192	@ 0xc0
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	501a      	str	r2, [r3, r0]
}
 8002f16:	e031      	b.n	8002f7c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f18:	4a1b      	ldr	r2, [pc, #108]	@ (8002f88 <__NVIC_SetPriority+0xd8>)
 8002f1a:	1dfb      	adds	r3, r7, #7
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	0019      	movs	r1, r3
 8002f20:	230f      	movs	r3, #15
 8002f22:	400b      	ands	r3, r1
 8002f24:	3b08      	subs	r3, #8
 8002f26:	089b      	lsrs	r3, r3, #2
 8002f28:	3306      	adds	r3, #6
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	18d3      	adds	r3, r2, r3
 8002f2e:	3304      	adds	r3, #4
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	1dfa      	adds	r2, r7, #7
 8002f34:	7812      	ldrb	r2, [r2, #0]
 8002f36:	0011      	movs	r1, r2
 8002f38:	2203      	movs	r2, #3
 8002f3a:	400a      	ands	r2, r1
 8002f3c:	00d2      	lsls	r2, r2, #3
 8002f3e:	21ff      	movs	r1, #255	@ 0xff
 8002f40:	4091      	lsls	r1, r2
 8002f42:	000a      	movs	r2, r1
 8002f44:	43d2      	mvns	r2, r2
 8002f46:	401a      	ands	r2, r3
 8002f48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	019b      	lsls	r3, r3, #6
 8002f4e:	22ff      	movs	r2, #255	@ 0xff
 8002f50:	401a      	ands	r2, r3
 8002f52:	1dfb      	adds	r3, r7, #7
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	0018      	movs	r0, r3
 8002f58:	2303      	movs	r3, #3
 8002f5a:	4003      	ands	r3, r0
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f60:	4809      	ldr	r0, [pc, #36]	@ (8002f88 <__NVIC_SetPriority+0xd8>)
 8002f62:	1dfb      	adds	r3, r7, #7
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	001c      	movs	r4, r3
 8002f68:	230f      	movs	r3, #15
 8002f6a:	4023      	ands	r3, r4
 8002f6c:	3b08      	subs	r3, #8
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	430a      	orrs	r2, r1
 8002f72:	3306      	adds	r3, #6
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	18c3      	adds	r3, r0, r3
 8002f78:	3304      	adds	r3, #4
 8002f7a:	601a      	str	r2, [r3, #0]
}
 8002f7c:	46c0      	nop			@ (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b003      	add	sp, #12
 8002f82:	bd90      	pop	{r4, r7, pc}
 8002f84:	e000e100 	.word	0xe000e100
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002f90:	2305      	movs	r3, #5
 8002f92:	425b      	negs	r3, r3
 8002f94:	2100      	movs	r1, #0
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7ff ff8a 	bl	8002eb0 <__NVIC_SetPriority>
#endif
}
 8002f9c:	46c0      	nop			@ (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002faa:	f3ef 8305 	mrs	r3, IPSR
 8002fae:	603b      	str	r3, [r7, #0]
  return(result);
 8002fb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002fb6:	2306      	movs	r3, #6
 8002fb8:	425b      	negs	r3, r3
 8002fba:	607b      	str	r3, [r7, #4]
 8002fbc:	e00c      	b.n	8002fd8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002fbe:	4b09      	ldr	r3, [pc, #36]	@ (8002fe4 <osKernelInitialize+0x40>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d105      	bne.n	8002fd2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002fc6:	4b07      	ldr	r3, [pc, #28]	@ (8002fe4 <osKernelInitialize+0x40>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	607b      	str	r3, [r7, #4]
 8002fd0:	e002      	b.n	8002fd8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	425b      	negs	r3, r3
 8002fd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002fd8:	687b      	ldr	r3, [r7, #4]
}
 8002fda:	0018      	movs	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b002      	add	sp, #8
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	200001a4 	.word	0x200001a4

08002fe8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fee:	f3ef 8305 	mrs	r3, IPSR
 8002ff2:	603b      	str	r3, [r7, #0]
  return(result);
 8002ff4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002ffa:	2306      	movs	r3, #6
 8002ffc:	425b      	negs	r3, r3
 8002ffe:	607b      	str	r3, [r7, #4]
 8003000:	e010      	b.n	8003024 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003002:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <osKernelStart+0x48>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d109      	bne.n	800301e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800300a:	f7ff ffbf 	bl	8002f8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800300e:	4b08      	ldr	r3, [pc, #32]	@ (8003030 <osKernelStart+0x48>)
 8003010:	2202      	movs	r2, #2
 8003012:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003014:	f000 ff80 	bl	8003f18 <vTaskStartScheduler>
      stat = osOK;
 8003018:	2300      	movs	r3, #0
 800301a:	607b      	str	r3, [r7, #4]
 800301c:	e002      	b.n	8003024 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800301e:	2301      	movs	r3, #1
 8003020:	425b      	negs	r3, r3
 8003022:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003024:	687b      	ldr	r3, [r7, #4]
}
 8003026:	0018      	movs	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	b002      	add	sp, #8
 800302c:	bd80      	pop	{r7, pc}
 800302e:	46c0      	nop			@ (mov r8, r8)
 8003030:	200001a4 	.word	0x200001a4

08003034 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003034:	b5b0      	push	{r4, r5, r7, lr}
 8003036:	b08e      	sub	sp, #56	@ 0x38
 8003038:	af04      	add	r7, sp, #16
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003040:	2300      	movs	r3, #0
 8003042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003044:	f3ef 8305 	mrs	r3, IPSR
 8003048:	617b      	str	r3, [r7, #20]
  return(result);
 800304a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800304c:	2b00      	cmp	r3, #0
 800304e:	d000      	beq.n	8003052 <osThreadNew+0x1e>
 8003050:	e081      	b.n	8003156 <osThreadNew+0x122>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d100      	bne.n	800305a <osThreadNew+0x26>
 8003058:	e07d      	b.n	8003156 <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 800305a:	2380      	movs	r3, #128	@ 0x80
 800305c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800305e:	2318      	movs	r3, #24
 8003060:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003062:	2300      	movs	r3, #0
 8003064:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003066:	2301      	movs	r3, #1
 8003068:	425b      	negs	r3, r3
 800306a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d044      	beq.n	80030fc <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <osThreadNew+0x4c>
        name = attr->name;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d007      	beq.n	80030a4 <osThreadNew+0x70>
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	2b38      	cmp	r3, #56	@ 0x38
 8003098:	d804      	bhi.n	80030a4 <osThreadNew+0x70>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	4013      	ands	r3, r2
 80030a2:	d001      	beq.n	80030a8 <osThreadNew+0x74>
        return (NULL);
 80030a4:	2300      	movs	r3, #0
 80030a6:	e057      	b.n	8003158 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00e      	beq.n	80030de <osThreadNew+0xaa>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b5b      	cmp	r3, #91	@ 0x5b
 80030c6:	d90a      	bls.n	80030de <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d006      	beq.n	80030de <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <osThreadNew+0xaa>
        mem = 1;
 80030d8:	2301      	movs	r3, #1
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	e010      	b.n	8003100 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10c      	bne.n	8003100 <osThreadNew+0xcc>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d108      	bne.n	8003100 <osThreadNew+0xcc>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d104      	bne.n	8003100 <osThreadNew+0xcc>
          mem = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	e001      	b.n	8003100 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d112      	bne.n	800312c <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800310e:	68bd      	ldr	r5, [r7, #8]
 8003110:	6a3c      	ldr	r4, [r7, #32]
 8003112:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	9302      	str	r3, [sp, #8]
 8003118:	9201      	str	r2, [sp, #4]
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	002b      	movs	r3, r5
 8003120:	0022      	movs	r2, r4
 8003122:	f000 fd4e 	bl	8003bc2 <xTaskCreateStatic>
 8003126:	0003      	movs	r3, r0
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	e014      	b.n	8003156 <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d111      	bne.n	8003156 <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	b29a      	uxth	r2, r3
 8003136:	68bc      	ldr	r4, [r7, #8]
 8003138:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	2310      	movs	r3, #16
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	9301      	str	r3, [sp, #4]
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	0023      	movs	r3, r4
 8003148:	f000 fd82 	bl	8003c50 <xTaskCreate>
 800314c:	0003      	movs	r3, r0
 800314e:	2b01      	cmp	r3, #1
 8003150:	d001      	beq.n	8003156 <osThreadNew+0x122>
            hTask = NULL;
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003156:	693b      	ldr	r3, [r7, #16]
}
 8003158:	0018      	movs	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	b00a      	add	sp, #40	@ 0x28
 800315e:	bdb0      	pop	{r4, r5, r7, pc}

08003160 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003168:	f3ef 8305 	mrs	r3, IPSR
 800316c:	60bb      	str	r3, [r7, #8]
  return(result);
 800316e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <osDelay+0x1c>
    stat = osErrorISR;
 8003174:	2306      	movs	r3, #6
 8003176:	425b      	negs	r3, r3
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	e008      	b.n	800318e <osDelay+0x2e>
  }
  else {
    stat = osOK;
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <osDelay+0x2e>
      vTaskDelay(ticks);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	0018      	movs	r0, r3
 800318a:	f000 fe9f 	bl	8003ecc <vTaskDelay>
    }
  }

  return (stat);
 800318e:	68fb      	ldr	r3, [r7, #12]
}
 8003190:	0018      	movs	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	b004      	add	sp, #16
 8003196:	bd80      	pop	{r7, pc}

08003198 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4a06      	ldr	r2, [pc, #24]	@ (80031c0 <vApplicationGetIdleTaskMemory+0x28>)
 80031a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	4a05      	ldr	r2, [pc, #20]	@ (80031c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80031ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2280      	movs	r2, #128	@ 0x80
 80031b4:	601a      	str	r2, [r3, #0]
}
 80031b6:	46c0      	nop			@ (mov r8, r8)
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b004      	add	sp, #16
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	46c0      	nop			@ (mov r8, r8)
 80031c0:	200001a8 	.word	0x200001a8
 80031c4:	20000204 	.word	0x20000204

080031c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4a06      	ldr	r2, [pc, #24]	@ (80031f0 <vApplicationGetTimerTaskMemory+0x28>)
 80031d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4a05      	ldr	r2, [pc, #20]	@ (80031f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80031de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2280      	movs	r2, #128	@ 0x80
 80031e4:	0052      	lsls	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
}
 80031e8:	46c0      	nop			@ (mov r8, r8)
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b004      	add	sp, #16
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20000404 	.word	0x20000404
 80031f4:	20000460 	.word	0x20000460

080031f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3308      	adds	r3, #8
 8003204:	001a      	movs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	4252      	negs	r2, r2
 8003210:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3308      	adds	r3, #8
 8003216:	001a      	movs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3308      	adds	r3, #8
 8003220:	001a      	movs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800322c:	46c0      	nop			@ (mov r8, r8)
 800322e:	46bd      	mov	sp, r7
 8003230:	b002      	add	sp, #8
 8003232:	bd80      	pop	{r7, pc}

08003234 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003242:	46c0      	nop			@ (mov r8, r8)
 8003244:	46bd      	mov	sp, r7
 8003246:	b002      	add	sp, #8
 8003248:	bd80      	pop	{r7, pc}

0800324a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	601a      	str	r2, [r3, #0]
}
 8003286:	46c0      	nop			@ (mov r8, r8)
 8003288:	46bd      	mov	sp, r7
 800328a:	b004      	add	sp, #16
 800328c:	bd80      	pop	{r7, pc}

0800328e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	3301      	adds	r3, #1
 80032a2:	d103      	bne.n	80032ac <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	e00c      	b.n	80032c6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3308      	adds	r3, #8
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	e002      	b.n	80032ba <vListInsert+0x2c>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d2f6      	bcs.n	80032b4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	601a      	str	r2, [r3, #0]
}
 80032f2:	46c0      	nop			@ (mov r8, r8)
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b004      	add	sp, #16
 80032f8:	bd80      	pop	{r7, pc}

080032fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6892      	ldr	r2, [r2, #8]
 8003310:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6852      	ldr	r2, [r2, #4]
 800331a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	429a      	cmp	r2, r3
 8003324:	d103      	bne.n	800332e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	1e5a      	subs	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
}
 8003342:	0018      	movs	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	b004      	add	sp, #16
 8003348:	bd80      	pop	{r7, pc}

0800334a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d102      	bne.n	8003364 <xQueueGenericReset+0x1a>
 800335e:	b672      	cpsid	i
 8003360:	46c0      	nop			@ (mov r8, r8)
 8003362:	e7fd      	b.n	8003360 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003364:	f001 fe3c 	bl	8004fe0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	434b      	muls	r3, r1
 8003376:	18d2      	adds	r2, r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003392:	1e59      	subs	r1, r3, #1
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003398:	434b      	muls	r3, r1
 800339a:	18d2      	adds	r2, r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2244      	movs	r2, #68	@ 0x44
 80033a4:	21ff      	movs	r1, #255	@ 0xff
 80033a6:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2245      	movs	r2, #69	@ 0x45
 80033ac:	21ff      	movs	r1, #255	@ 0xff
 80033ae:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10d      	bne.n	80033d2 <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d013      	beq.n	80033e6 <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3310      	adds	r3, #16
 80033c2:	0018      	movs	r0, r3
 80033c4:	f000 ffee 	bl	80043a4 <xTaskRemoveFromEventList>
 80033c8:	1e03      	subs	r3, r0, #0
 80033ca:	d00c      	beq.n	80033e6 <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80033cc:	f001 fdf8 	bl	8004fc0 <vPortYield>
 80033d0:	e009      	b.n	80033e6 <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	3310      	adds	r3, #16
 80033d6:	0018      	movs	r0, r3
 80033d8:	f7ff ff0e 	bl	80031f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3324      	adds	r3, #36	@ 0x24
 80033e0:	0018      	movs	r0, r3
 80033e2:	f7ff ff09 	bl	80031f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80033e6:	f001 fe0d 	bl	8005004 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80033ea:	2301      	movs	r3, #1
}
 80033ec:	0018      	movs	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b004      	add	sp, #16
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80033f4:	b590      	push	{r4, r7, lr}
 80033f6:	b089      	sub	sp, #36	@ 0x24
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d102      	bne.n	800340e <xQueueGenericCreateStatic+0x1a>
 8003408:	b672      	cpsid	i
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	e7fd      	b.n	800340a <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d102      	bne.n	800341a <xQueueGenericCreateStatic+0x26>
 8003414:	b672      	cpsid	i
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	e7fd      	b.n	8003416 <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <xQueueGenericCreateStatic+0x32>
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <xQueueGenericCreateStatic+0x36>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <xQueueGenericCreateStatic+0x38>
 800342a:	2300      	movs	r3, #0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d102      	bne.n	8003436 <xQueueGenericCreateStatic+0x42>
 8003430:	b672      	cpsid	i
 8003432:	46c0      	nop			@ (mov r8, r8)
 8003434:	e7fd      	b.n	8003432 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d102      	bne.n	8003442 <xQueueGenericCreateStatic+0x4e>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <xQueueGenericCreateStatic+0x52>
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <xQueueGenericCreateStatic+0x54>
 8003446:	2300      	movs	r3, #0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d102      	bne.n	8003452 <xQueueGenericCreateStatic+0x5e>
 800344c:	b672      	cpsid	i
 800344e:	46c0      	nop			@ (mov r8, r8)
 8003450:	e7fd      	b.n	800344e <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003452:	2350      	movs	r3, #80	@ 0x50
 8003454:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	2b50      	cmp	r3, #80	@ 0x50
 800345a:	d002      	beq.n	8003462 <xQueueGenericCreateStatic+0x6e>
 800345c:	b672      	cpsid	i
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	e7fd      	b.n	800345e <xQueueGenericCreateStatic+0x6a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003462:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00e      	beq.n	800348c <xQueueGenericCreateStatic+0x98>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2246      	movs	r2, #70	@ 0x46
 8003472:	2101      	movs	r1, #1
 8003474:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003476:	2328      	movs	r3, #40	@ 0x28
 8003478:	18fb      	adds	r3, r7, r3
 800347a:	781c      	ldrb	r4, [r3, #0]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	0023      	movs	r3, r4
 8003488:	f000 f805 	bl	8003496 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800348c:	697b      	ldr	r3, [r7, #20]
	}
 800348e:	0018      	movs	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	b007      	add	sp, #28
 8003494:	bd90      	pop	{r4, r7, pc}

08003496 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	001a      	movs	r2, r3
 80034a4:	1cfb      	adds	r3, r7, #3
 80034a6:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d103      	bne.n	80034b6 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	e002      	b.n	80034bc <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	2101      	movs	r1, #1
 80034cc:	0018      	movs	r0, r3
 80034ce:	f7ff ff3c 	bl	800334a <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	1cfa      	adds	r2, r7, #3
 80034d6:	214c      	movs	r1, #76	@ 0x4c
 80034d8:	7812      	ldrb	r2, [r2, #0]
 80034da:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80034dc:	46c0      	nop			@ (mov r8, r8)
 80034de:	46bd      	mov	sp, r7
 80034e0:	b004      	add	sp, #16
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	@ 0x28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <xQueueGenericSend+0x22>
 8003500:	b672      	cpsid	i
 8003502:	46c0      	nop			@ (mov r8, r8)
 8003504:	e7fd      	b.n	8003502 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d103      	bne.n	8003514 <xQueueGenericSend+0x30>
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <xQueueGenericSend+0x34>
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <xQueueGenericSend+0x36>
 8003518:	2300      	movs	r3, #0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d102      	bne.n	8003524 <xQueueGenericSend+0x40>
 800351e:	b672      	cpsid	i
 8003520:	46c0      	nop			@ (mov r8, r8)
 8003522:	e7fd      	b.n	8003520 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d103      	bne.n	8003532 <xQueueGenericSend+0x4e>
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <xQueueGenericSend+0x52>
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <xQueueGenericSend+0x54>
 8003536:	2300      	movs	r3, #0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d102      	bne.n	8003542 <xQueueGenericSend+0x5e>
 800353c:	b672      	cpsid	i
 800353e:	46c0      	nop			@ (mov r8, r8)
 8003540:	e7fd      	b.n	800353e <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003542:	f001 f8c7 	bl	80046d4 <xTaskGetSchedulerState>
 8003546:	1e03      	subs	r3, r0, #0
 8003548:	d102      	bne.n	8003550 <xQueueGenericSend+0x6c>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <xQueueGenericSend+0x70>
 8003550:	2301      	movs	r3, #1
 8003552:	e000      	b.n	8003556 <xQueueGenericSend+0x72>
 8003554:	2300      	movs	r3, #0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d102      	bne.n	8003560 <xQueueGenericSend+0x7c>
 800355a:	b672      	cpsid	i
 800355c:	46c0      	nop			@ (mov r8, r8)
 800355e:	e7fd      	b.n	800355c <xQueueGenericSend+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003560:	f001 fd3e 	bl	8004fe0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800356c:	429a      	cmp	r2, r3
 800356e:	d302      	bcc.n	8003576 <xQueueGenericSend+0x92>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d11e      	bne.n	80035b4 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	0018      	movs	r0, r3
 800357e:	f000 f9a8 	bl	80038d2 <prvCopyDataToQueue>
 8003582:	0003      	movs	r3, r0
 8003584:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	3324      	adds	r3, #36	@ 0x24
 8003592:	0018      	movs	r0, r3
 8003594:	f000 ff06 	bl	80043a4 <xTaskRemoveFromEventList>
 8003598:	1e03      	subs	r3, r0, #0
 800359a:	d007      	beq.n	80035ac <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800359c:	f001 fd10 	bl	8004fc0 <vPortYield>
 80035a0:	e004      	b.n	80035ac <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80035a8:	f001 fd0a 	bl	8004fc0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80035ac:	f001 fd2a 	bl	8005004 <vPortExitCritical>
				return pdPASS;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e05b      	b.n	800366c <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d103      	bne.n	80035c2 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035ba:	f001 fd23 	bl	8005004 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	e054      	b.n	800366c <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d106      	bne.n	80035d6 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035c8:	2314      	movs	r3, #20
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	0018      	movs	r0, r3
 80035ce:	f000 ff47 	bl	8004460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035d2:	2301      	movs	r3, #1
 80035d4:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035d6:	f001 fd15 	bl	8005004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035da:	f000 fcf3 	bl	8003fc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035de:	f001 fcff 	bl	8004fe0 <vPortEnterCritical>
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	2244      	movs	r2, #68	@ 0x44
 80035e6:	5c9b      	ldrb	r3, [r3, r2]
 80035e8:	b25b      	sxtb	r3, r3
 80035ea:	3301      	adds	r3, #1
 80035ec:	d103      	bne.n	80035f6 <xQueueGenericSend+0x112>
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	2244      	movs	r2, #68	@ 0x44
 80035f2:	2100      	movs	r1, #0
 80035f4:	5499      	strb	r1, [r3, r2]
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	2245      	movs	r2, #69	@ 0x45
 80035fa:	5c9b      	ldrb	r3, [r3, r2]
 80035fc:	b25b      	sxtb	r3, r3
 80035fe:	3301      	adds	r3, #1
 8003600:	d103      	bne.n	800360a <xQueueGenericSend+0x126>
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	2245      	movs	r2, #69	@ 0x45
 8003606:	2100      	movs	r1, #0
 8003608:	5499      	strb	r1, [r3, r2]
 800360a:	f001 fcfb 	bl	8005004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800360e:	1d3a      	adds	r2, r7, #4
 8003610:	2314      	movs	r3, #20
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	0011      	movs	r1, r2
 8003616:	0018      	movs	r0, r3
 8003618:	f000 ff36 	bl	8004488 <xTaskCheckForTimeOut>
 800361c:	1e03      	subs	r3, r0, #0
 800361e:	d11e      	bne.n	800365e <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	0018      	movs	r0, r3
 8003624:	f000 fa5a 	bl	8003adc <prvIsQueueFull>
 8003628:	1e03      	subs	r3, r0, #0
 800362a:	d011      	beq.n	8003650 <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	3310      	adds	r3, #16
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	0011      	movs	r1, r2
 8003634:	0018      	movs	r0, r3
 8003636:	f000 fe6d 	bl	8004314 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	0018      	movs	r0, r3
 800363e:	f000 f9d9 	bl	80039f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003642:	f000 fccb 	bl	8003fdc <xTaskResumeAll>
 8003646:	1e03      	subs	r3, r0, #0
 8003648:	d18a      	bne.n	8003560 <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 800364a:	f001 fcb9 	bl	8004fc0 <vPortYield>
 800364e:	e787      	b.n	8003560 <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	0018      	movs	r0, r3
 8003654:	f000 f9ce 	bl	80039f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003658:	f000 fcc0 	bl	8003fdc <xTaskResumeAll>
 800365c:	e780      	b.n	8003560 <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	0018      	movs	r0, r3
 8003662:	f000 f9c7 	bl	80039f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003666:	f000 fcb9 	bl	8003fdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800366a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800366c:	0018      	movs	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	b00a      	add	sp, #40	@ 0x28
 8003672:	bd80      	pop	{r7, pc}

08003674 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003674:	b590      	push	{r4, r7, lr}
 8003676:	b08b      	sub	sp, #44	@ 0x2c
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <xQueueGenericSendFromISR+0x1e>
 800368c:	b672      	cpsid	i
 800368e:	46c0      	nop			@ (mov r8, r8)
 8003690:	e7fd      	b.n	800368e <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d103      	bne.n	80036a0 <xQueueGenericSendFromISR+0x2c>
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <xQueueGenericSendFromISR+0x30>
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <xQueueGenericSendFromISR+0x32>
 80036a4:	2300      	movs	r3, #0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d102      	bne.n	80036b0 <xQueueGenericSendFromISR+0x3c>
 80036aa:	b672      	cpsid	i
 80036ac:	46c0      	nop			@ (mov r8, r8)
 80036ae:	e7fd      	b.n	80036ac <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d103      	bne.n	80036be <xQueueGenericSendFromISR+0x4a>
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <xQueueGenericSendFromISR+0x4e>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <xQueueGenericSendFromISR+0x50>
 80036c2:	2300      	movs	r3, #0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d102      	bne.n	80036ce <xQueueGenericSendFromISR+0x5a>
 80036c8:	b672      	cpsid	i
 80036ca:	46c0      	nop			@ (mov r8, r8)
 80036cc:	e7fd      	b.n	80036ca <xQueueGenericSendFromISR+0x56>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036ce:	f001 fcb1 	bl	8005034 <ulSetInterruptMaskFromISR>
 80036d2:	0003      	movs	r3, r0
 80036d4:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036de:	429a      	cmp	r2, r3
 80036e0:	d302      	bcc.n	80036e8 <xQueueGenericSendFromISR+0x74>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d131      	bne.n	800374c <xQueueGenericSendFromISR+0xd8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036e8:	241b      	movs	r4, #27
 80036ea:	193b      	adds	r3, r7, r4
 80036ec:	6a3a      	ldr	r2, [r7, #32]
 80036ee:	2145      	movs	r1, #69	@ 0x45
 80036f0:	5c52      	ldrb	r2, [r2, r1]
 80036f2:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f8:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	0018      	movs	r0, r3
 8003702:	f000 f8e6 	bl	80038d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003706:	193b      	adds	r3, r7, r4
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	b25b      	sxtb	r3, r3
 800370c:	3301      	adds	r3, #1
 800370e:	d111      	bne.n	8003734 <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	2b00      	cmp	r3, #0
 8003716:	d016      	beq.n	8003746 <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	3324      	adds	r3, #36	@ 0x24
 800371c:	0018      	movs	r0, r3
 800371e:	f000 fe41 	bl	80043a4 <xTaskRemoveFromEventList>
 8003722:	1e03      	subs	r3, r0, #0
 8003724:	d00f      	beq.n	8003746 <xQueueGenericSendFromISR+0xd2>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00c      	beq.n	8003746 <xQueueGenericSendFromISR+0xd2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	e008      	b.n	8003746 <xQueueGenericSendFromISR+0xd2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003734:	231b      	movs	r3, #27
 8003736:	18fb      	adds	r3, r7, r3
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	3301      	adds	r3, #1
 800373c:	b2db      	uxtb	r3, r3
 800373e:	b259      	sxtb	r1, r3
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	2245      	movs	r2, #69	@ 0x45
 8003744:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8003746:	2301      	movs	r3, #1
 8003748:	627b      	str	r3, [r7, #36]	@ 0x24
		{
 800374a:	e001      	b.n	8003750 <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800374c:	2300      	movs	r3, #0
 800374e:	627b      	str	r3, [r7, #36]	@ 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	0018      	movs	r0, r3
 8003754:	f001 fc74 	bl	8005040 <vClearInterruptMaskFromISR>

	return xReturn;
 8003758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800375a:	0018      	movs	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	b00b      	add	sp, #44	@ 0x2c
 8003760:	bd90      	pop	{r4, r7, pc}

08003762 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b08a      	sub	sp, #40	@ 0x28
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800376e:	2300      	movs	r3, #0
 8003770:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d102      	bne.n	8003782 <xQueueReceive+0x20>
 800377c:	b672      	cpsid	i
 800377e:	46c0      	nop			@ (mov r8, r8)
 8003780:	e7fd      	b.n	800377e <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d103      	bne.n	8003790 <xQueueReceive+0x2e>
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <xQueueReceive+0x32>
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <xQueueReceive+0x34>
 8003794:	2300      	movs	r3, #0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d102      	bne.n	80037a0 <xQueueReceive+0x3e>
 800379a:	b672      	cpsid	i
 800379c:	46c0      	nop			@ (mov r8, r8)
 800379e:	e7fd      	b.n	800379c <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037a0:	f000 ff98 	bl	80046d4 <xTaskGetSchedulerState>
 80037a4:	1e03      	subs	r3, r0, #0
 80037a6:	d102      	bne.n	80037ae <xQueueReceive+0x4c>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <xQueueReceive+0x50>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <xQueueReceive+0x52>
 80037b2:	2300      	movs	r3, #0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d102      	bne.n	80037be <xQueueReceive+0x5c>
 80037b8:	b672      	cpsid	i
 80037ba:	46c0      	nop			@ (mov r8, r8)
 80037bc:	e7fd      	b.n	80037ba <xQueueReceive+0x58>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037be:	f001 fc0f 	bl	8004fe0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d01a      	beq.n	8003804 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	0011      	movs	r1, r2
 80037d4:	0018      	movs	r0, r3
 80037d6:	f000 f8e7 	bl	80039a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	1e5a      	subs	r2, r3, #1
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d008      	beq.n	80037fc <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	3310      	adds	r3, #16
 80037ee:	0018      	movs	r0, r3
 80037f0:	f000 fdd8 	bl	80043a4 <xTaskRemoveFromEventList>
 80037f4:	1e03      	subs	r3, r0, #0
 80037f6:	d001      	beq.n	80037fc <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80037f8:	f001 fbe2 	bl	8004fc0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037fc:	f001 fc02 	bl	8005004 <vPortExitCritical>
				return pdPASS;
 8003800:	2301      	movs	r3, #1
 8003802:	e062      	b.n	80038ca <xQueueReceive+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d103      	bne.n	8003812 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800380a:	f001 fbfb 	bl	8005004 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800380e:	2300      	movs	r3, #0
 8003810:	e05b      	b.n	80038ca <xQueueReceive+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003814:	2b00      	cmp	r3, #0
 8003816:	d106      	bne.n	8003826 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003818:	2314      	movs	r3, #20
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	0018      	movs	r0, r3
 800381e:	f000 fe1f 	bl	8004460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003822:	2301      	movs	r3, #1
 8003824:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003826:	f001 fbed 	bl	8005004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800382a:	f000 fbcb 	bl	8003fc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800382e:	f001 fbd7 	bl	8004fe0 <vPortEnterCritical>
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	2244      	movs	r2, #68	@ 0x44
 8003836:	5c9b      	ldrb	r3, [r3, r2]
 8003838:	b25b      	sxtb	r3, r3
 800383a:	3301      	adds	r3, #1
 800383c:	d103      	bne.n	8003846 <xQueueReceive+0xe4>
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	2244      	movs	r2, #68	@ 0x44
 8003842:	2100      	movs	r1, #0
 8003844:	5499      	strb	r1, [r3, r2]
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	2245      	movs	r2, #69	@ 0x45
 800384a:	5c9b      	ldrb	r3, [r3, r2]
 800384c:	b25b      	sxtb	r3, r3
 800384e:	3301      	adds	r3, #1
 8003850:	d103      	bne.n	800385a <xQueueReceive+0xf8>
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	2245      	movs	r2, #69	@ 0x45
 8003856:	2100      	movs	r1, #0
 8003858:	5499      	strb	r1, [r3, r2]
 800385a:	f001 fbd3 	bl	8005004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800385e:	1d3a      	adds	r2, r7, #4
 8003860:	2314      	movs	r3, #20
 8003862:	18fb      	adds	r3, r7, r3
 8003864:	0011      	movs	r1, r2
 8003866:	0018      	movs	r0, r3
 8003868:	f000 fe0e 	bl	8004488 <xTaskCheckForTimeOut>
 800386c:	1e03      	subs	r3, r0, #0
 800386e:	d11e      	bne.n	80038ae <xQueueReceive+0x14c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	0018      	movs	r0, r3
 8003874:	f000 f91c 	bl	8003ab0 <prvIsQueueEmpty>
 8003878:	1e03      	subs	r3, r0, #0
 800387a:	d011      	beq.n	80038a0 <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	3324      	adds	r3, #36	@ 0x24
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	0011      	movs	r1, r2
 8003884:	0018      	movs	r0, r3
 8003886:	f000 fd45 	bl	8004314 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	0018      	movs	r0, r3
 800388e:	f000 f8b1 	bl	80039f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003892:	f000 fba3 	bl	8003fdc <xTaskResumeAll>
 8003896:	1e03      	subs	r3, r0, #0
 8003898:	d191      	bne.n	80037be <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 800389a:	f001 fb91 	bl	8004fc0 <vPortYield>
 800389e:	e78e      	b.n	80037be <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	0018      	movs	r0, r3
 80038a4:	f000 f8a6 	bl	80039f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038a8:	f000 fb98 	bl	8003fdc <xTaskResumeAll>
 80038ac:	e787      	b.n	80037be <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	0018      	movs	r0, r3
 80038b2:	f000 f89f 	bl	80039f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038b6:	f000 fb91 	bl	8003fdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	0018      	movs	r0, r3
 80038be:	f000 f8f7 	bl	8003ab0 <prvIsQueueEmpty>
 80038c2:	1e03      	subs	r3, r0, #0
 80038c4:	d100      	bne.n	80038c8 <xQueueReceive+0x166>
 80038c6:	e77a      	b.n	80037be <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80038c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80038ca:	0018      	movs	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b00a      	add	sp, #40	@ 0x28
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b086      	sub	sp, #24
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10e      	bne.n	800390e <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d14e      	bne.n	8003996 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	0018      	movs	r0, r3
 80038fe:	f000 ff05 	bl	800470c <xTaskPriorityDisinherit>
 8003902:	0003      	movs	r3, r0
 8003904:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	e043      	b.n	8003996 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d119      	bne.n	8003948 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6858      	ldr	r0, [r3, #4]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	0019      	movs	r1, r3
 8003920:	f001 fdda 	bl	80054d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	18d2      	adds	r2, r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	429a      	cmp	r2, r3
 800393c:	d32b      	bcc.n	8003996 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	e026      	b.n	8003996 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	68d8      	ldr	r0, [r3, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	0019      	movs	r1, r3
 8003954:	f001 fdc0 	bl	80054d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003960:	425b      	negs	r3, r3
 8003962:	18d2      	adds	r2, r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d207      	bcs.n	8003984 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397c:	425b      	negs	r3, r3
 800397e:	18d2      	adds	r2, r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d105      	bne.n	8003996 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	3b01      	subs	r3, #1
 8003994:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800399e:	697b      	ldr	r3, [r7, #20]
}
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b006      	add	sp, #24
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d018      	beq.n	80039ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c2:	18d2      	adds	r2, r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d303      	bcc.n	80039dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68d9      	ldr	r1, [r3, #12]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	0018      	movs	r0, r3
 80039e8:	f001 fd76 	bl	80054d8 <memcpy>
	}
}
 80039ec:	46c0      	nop			@ (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b002      	add	sp, #8
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80039fc:	f001 faf0 	bl	8004fe0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a00:	230f      	movs	r3, #15
 8003a02:	18fb      	adds	r3, r7, r3
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	2145      	movs	r1, #69	@ 0x45
 8003a08:	5c52      	ldrb	r2, [r2, r1]
 8003a0a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a0c:	e013      	b.n	8003a36 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d016      	beq.n	8003a44 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3324      	adds	r3, #36	@ 0x24
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f000 fcc2 	bl	80043a4 <xTaskRemoveFromEventList>
 8003a20:	1e03      	subs	r3, r0, #0
 8003a22:	d001      	beq.n	8003a28 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a24:	f000 fd82 	bl	800452c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a28:	210f      	movs	r1, #15
 8003a2a:	187b      	adds	r3, r7, r1
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	187b      	adds	r3, r7, r1
 8003a34:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a36:	230f      	movs	r3, #15
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	b25b      	sxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	dce5      	bgt.n	8003a0e <prvUnlockQueue+0x1a>
 8003a42:	e000      	b.n	8003a46 <prvUnlockQueue+0x52>
					break;
 8003a44:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2245      	movs	r2, #69	@ 0x45
 8003a4a:	21ff      	movs	r1, #255	@ 0xff
 8003a4c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003a4e:	f001 fad9 	bl	8005004 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a52:	f001 fac5 	bl	8004fe0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a56:	230e      	movs	r3, #14
 8003a58:	18fb      	adds	r3, r7, r3
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	2144      	movs	r1, #68	@ 0x44
 8003a5e:	5c52      	ldrb	r2, [r2, r1]
 8003a60:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a62:	e013      	b.n	8003a8c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d016      	beq.n	8003a9a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3310      	adds	r3, #16
 8003a70:	0018      	movs	r0, r3
 8003a72:	f000 fc97 	bl	80043a4 <xTaskRemoveFromEventList>
 8003a76:	1e03      	subs	r3, r0, #0
 8003a78:	d001      	beq.n	8003a7e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8003a7a:	f000 fd57 	bl	800452c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a7e:	210e      	movs	r1, #14
 8003a80:	187b      	adds	r3, r7, r1
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	187b      	adds	r3, r7, r1
 8003a8a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a8c:	230e      	movs	r3, #14
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	b25b      	sxtb	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	dce5      	bgt.n	8003a64 <prvUnlockQueue+0x70>
 8003a98:	e000      	b.n	8003a9c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8003a9a:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2244      	movs	r2, #68	@ 0x44
 8003aa0:	21ff      	movs	r1, #255	@ 0xff
 8003aa2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003aa4:	f001 faae 	bl	8005004 <vPortExitCritical>
}
 8003aa8:	46c0      	nop			@ (mov r8, r8)
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b004      	add	sp, #16
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ab8:	f001 fa92 	bl	8004fe0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d102      	bne.n	8003aca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	e001      	b.n	8003ace <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ace:	f001 fa99 	bl	8005004 <vPortExitCritical>

	return xReturn;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
}
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b004      	add	sp, #16
 8003ada:	bd80      	pop	{r7, pc}

08003adc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ae4:	f001 fa7c 	bl	8004fe0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d102      	bne.n	8003afa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	e001      	b.n	8003afe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003afe:	f001 fa81 	bl	8005004 <vPortExitCritical>

	return xReturn;
 8003b02:	68fb      	ldr	r3, [r7, #12]
}
 8003b04:	0018      	movs	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b004      	add	sp, #16
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	e015      	b.n	8003b48 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b58 <vQueueAddToRegistry+0x4c>)
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	00d2      	lsls	r2, r2, #3
 8003b22:	58d3      	ldr	r3, [r2, r3]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10c      	bne.n	8003b42 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b28:	4b0b      	ldr	r3, [pc, #44]	@ (8003b58 <vQueueAddToRegistry+0x4c>)
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	00d2      	lsls	r2, r2, #3
 8003b2e:	6839      	ldr	r1, [r7, #0]
 8003b30:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b32:	4a09      	ldr	r2, [pc, #36]	@ (8003b58 <vQueueAddToRegistry+0x4c>)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	18d3      	adds	r3, r2, r3
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b40:	e006      	b.n	8003b50 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3301      	adds	r3, #1
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b07      	cmp	r3, #7
 8003b4c:	d9e6      	bls.n	8003b1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b4e:	46c0      	nop			@ (mov r8, r8)
 8003b50:	46c0      	nop			@ (mov r8, r8)
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b004      	add	sp, #16
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	20000860 	.word	0x20000860

08003b5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b6c:	f001 fa38 	bl	8004fe0 <vPortEnterCritical>
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2244      	movs	r2, #68	@ 0x44
 8003b74:	5c9b      	ldrb	r3, [r3, r2]
 8003b76:	b25b      	sxtb	r3, r3
 8003b78:	3301      	adds	r3, #1
 8003b7a:	d103      	bne.n	8003b84 <vQueueWaitForMessageRestricted+0x28>
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2244      	movs	r2, #68	@ 0x44
 8003b80:	2100      	movs	r1, #0
 8003b82:	5499      	strb	r1, [r3, r2]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2245      	movs	r2, #69	@ 0x45
 8003b88:	5c9b      	ldrb	r3, [r3, r2]
 8003b8a:	b25b      	sxtb	r3, r3
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	d103      	bne.n	8003b98 <vQueueWaitForMessageRestricted+0x3c>
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2245      	movs	r2, #69	@ 0x45
 8003b94:	2100      	movs	r1, #0
 8003b96:	5499      	strb	r1, [r3, r2]
 8003b98:	f001 fa34 	bl	8005004 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d106      	bne.n	8003bb2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	3324      	adds	r3, #36	@ 0x24
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	0018      	movs	r0, r3
 8003bae:	f000 fbd1 	bl	8004354 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f7ff ff1d 	bl	80039f4 <prvUnlockQueue>
	}
 8003bba:	46c0      	nop			@ (mov r8, r8)
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b006      	add	sp, #24
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003bc2:	b590      	push	{r4, r7, lr}
 8003bc4:	b08d      	sub	sp, #52	@ 0x34
 8003bc6:	af04      	add	r7, sp, #16
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
 8003bce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <xTaskCreateStatic+0x1a>
 8003bd6:	b672      	cpsid	i
 8003bd8:	46c0      	nop			@ (mov r8, r8)
 8003bda:	e7fd      	b.n	8003bd8 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8003bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d102      	bne.n	8003be8 <xTaskCreateStatic+0x26>
 8003be2:	b672      	cpsid	i
 8003be4:	46c0      	nop			@ (mov r8, r8)
 8003be6:	e7fd      	b.n	8003be4 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003be8:	235c      	movs	r3, #92	@ 0x5c
 8003bea:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2b5c      	cmp	r3, #92	@ 0x5c
 8003bf0:	d002      	beq.n	8003bf8 <xTaskCreateStatic+0x36>
 8003bf2:	b672      	cpsid	i
 8003bf4:	46c0      	nop			@ (mov r8, r8)
 8003bf6:	e7fd      	b.n	8003bf4 <xTaskCreateStatic+0x32>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003bf8:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d020      	beq.n	8003c42 <xTaskCreateStatic+0x80>
 8003c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d01d      	beq.n	8003c42 <xTaskCreateStatic+0x80>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c08:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c0e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	2259      	movs	r2, #89	@ 0x59
 8003c14:	2102      	movs	r1, #2
 8003c16:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c18:	683c      	ldr	r4, [r7, #0]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	2300      	movs	r3, #0
 8003c22:	9303      	str	r3, [sp, #12]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	9302      	str	r3, [sp, #8]
 8003c28:	2318      	movs	r3, #24
 8003c2a:	18fb      	adds	r3, r7, r3
 8003c2c:	9301      	str	r3, [sp, #4]
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	0023      	movs	r3, r4
 8003c34:	f000 f858 	bl	8003ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f000 f8de 	bl	8003dfc <prvAddNewTaskToReadyList>
 8003c40:	e001      	b.n	8003c46 <xTaskCreateStatic+0x84>
		}
		else
		{
			xReturn = NULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c46:	69bb      	ldr	r3, [r7, #24]
	}
 8003c48:	0018      	movs	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b009      	add	sp, #36	@ 0x24
 8003c4e:	bd90      	pop	{r4, r7, pc}

08003c50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c50:	b590      	push	{r4, r7, lr}
 8003c52:	b08d      	sub	sp, #52	@ 0x34
 8003c54:	af04      	add	r7, sp, #16
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	1dbb      	adds	r3, r7, #6
 8003c5e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c60:	1dbb      	adds	r3, r7, #6
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	0018      	movs	r0, r3
 8003c68:	f001 fa52 	bl	8005110 <pvPortMalloc>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d010      	beq.n	8003c98 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c76:	205c      	movs	r0, #92	@ 0x5c
 8003c78:	f001 fa4a 	bl	8005110 <pvPortMalloc>
 8003c7c:	0003      	movs	r3, r0
 8003c7e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c8c:	e006      	b.n	8003c9c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	0018      	movs	r0, r3
 8003c92:	f001 faed 	bl	8005270 <vPortFree>
 8003c96:	e001      	b.n	8003c9c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01a      	beq.n	8003cd8 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	2259      	movs	r2, #89	@ 0x59
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003caa:	1dbb      	adds	r3, r7, #6
 8003cac:	881a      	ldrh	r2, [r3, #0]
 8003cae:	683c      	ldr	r4, [r7, #0]
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	9303      	str	r3, [sp, #12]
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	9302      	str	r3, [sp, #8]
 8003cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cbe:	9301      	str	r3, [sp, #4]
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	0023      	movs	r3, r4
 8003cc6:	f000 f80f 	bl	8003ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f000 f895 	bl	8003dfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	61bb      	str	r3, [r7, #24]
 8003cd6:	e002      	b.n	8003cde <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	425b      	negs	r3, r3
 8003cdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003cde:	69bb      	ldr	r3, [r7, #24]
	}
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	b009      	add	sp, #36	@ 0x24
 8003ce6:	bd90      	pop	{r4, r7, pc}

08003ce8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	001a      	movs	r2, r3
 8003d00:	21a5      	movs	r1, #165	@ 0xa5
 8003d02:	f001 fbbd 	bl	8005480 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	493a      	ldr	r1, [pc, #232]	@ (8003df8 <prvInitialiseNewTask+0x110>)
 8003d0e:	468c      	mov	ip, r1
 8003d10:	4463      	add	r3, ip
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	18d3      	adds	r3, r2, r3
 8003d16:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	2207      	movs	r2, #7
 8003d1c:	4393      	bics	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	2207      	movs	r2, #7
 8003d24:	4013      	ands	r3, r2
 8003d26:	d002      	beq.n	8003d2e <prvInitialiseNewTask+0x46>
 8003d28:	b672      	cpsid	i
 8003d2a:	46c0      	nop			@ (mov r8, r8)
 8003d2c:	e7fd      	b.n	8003d2a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d020      	beq.n	8003d76 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	e013      	b.n	8003d62 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	18d3      	adds	r3, r2, r3
 8003d40:	7818      	ldrb	r0, [r3, #0]
 8003d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d44:	2134      	movs	r1, #52	@ 0x34
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	18d3      	adds	r3, r2, r3
 8003d4a:	185b      	adds	r3, r3, r1
 8003d4c:	1c02      	adds	r2, r0, #0
 8003d4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	18d3      	adds	r3, r2, r3
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d006      	beq.n	8003d6a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b0f      	cmp	r3, #15
 8003d66:	d9e8      	bls.n	8003d3a <prvInitialiseNewTask+0x52>
 8003d68:	e000      	b.n	8003d6c <prvInitialiseNewTask+0x84>
			{
				break;
 8003d6a:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6e:	2243      	movs	r2, #67	@ 0x43
 8003d70:	2100      	movs	r1, #0
 8003d72:	5499      	strb	r1, [r3, r2]
 8003d74:	e003      	b.n	8003d7e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d78:	2234      	movs	r2, #52	@ 0x34
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	2b37      	cmp	r3, #55	@ 0x37
 8003d82:	d901      	bls.n	8003d88 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d84:	2337      	movs	r3, #55	@ 0x37
 8003d86:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8a:	6a3a      	ldr	r2, [r7, #32]
 8003d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d90:	6a3a      	ldr	r2, [r7, #32]
 8003d92:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d96:	2200      	movs	r2, #0
 8003d98:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	0018      	movs	r0, r3
 8003da0:	f7ff fa48 	bl	8003234 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da6:	3318      	adds	r3, #24
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7ff fa43 	bl	8003234 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003db2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	2238      	movs	r2, #56	@ 0x38
 8003db8:	1ad2      	subs	r2, r2, r3
 8003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dc2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dcc:	2258      	movs	r2, #88	@ 0x58
 8003dce:	2100      	movs	r1, #0
 8003dd0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	68f9      	ldr	r1, [r7, #12]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f001 f867 	bl	8004eac <pxPortInitialiseStack>
 8003dde:	0002      	movs	r2, r0
 8003de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003df0:	46c0      	nop			@ (mov r8, r8)
 8003df2:	46bd      	mov	sp, r7
 8003df4:	b006      	add	sp, #24
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	3fffffff 	.word	0x3fffffff

08003dfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e04:	f001 f8ec 	bl	8004fe0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e08:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb4 <prvAddNewTaskToReadyList+0xb8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	4b29      	ldr	r3, [pc, #164]	@ (8003eb4 <prvAddNewTaskToReadyList+0xb8>)
 8003e10:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003e12:	4b29      	ldr	r3, [pc, #164]	@ (8003eb8 <prvAddNewTaskToReadyList+0xbc>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d109      	bne.n	8003e2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e1a:	4b27      	ldr	r3, [pc, #156]	@ (8003eb8 <prvAddNewTaskToReadyList+0xbc>)
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e20:	4b24      	ldr	r3, [pc, #144]	@ (8003eb4 <prvAddNewTaskToReadyList+0xb8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d110      	bne.n	8003e4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e28:	f000 fb9a 	bl	8004560 <prvInitialiseTaskLists>
 8003e2c:	e00d      	b.n	8003e4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e2e:	4b23      	ldr	r3, [pc, #140]	@ (8003ebc <prvAddNewTaskToReadyList+0xc0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e36:	4b20      	ldr	r3, [pc, #128]	@ (8003eb8 <prvAddNewTaskToReadyList+0xbc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d802      	bhi.n	8003e4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e44:	4b1c      	ldr	r3, [pc, #112]	@ (8003eb8 <prvAddNewTaskToReadyList+0xbc>)
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec0 <prvAddNewTaskToReadyList+0xc4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec0 <prvAddNewTaskToReadyList+0xc4>)
 8003e52:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e54:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec0 <prvAddNewTaskToReadyList+0xc4>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e60:	4b18      	ldr	r3, [pc, #96]	@ (8003ec4 <prvAddNewTaskToReadyList+0xc8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d903      	bls.n	8003e70 <prvAddNewTaskToReadyList+0x74>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e6c:	4b15      	ldr	r3, [pc, #84]	@ (8003ec4 <prvAddNewTaskToReadyList+0xc8>)
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e74:	0013      	movs	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	189b      	adds	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4a12      	ldr	r2, [pc, #72]	@ (8003ec8 <prvAddNewTaskToReadyList+0xcc>)
 8003e7e:	189a      	adds	r2, r3, r2
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3304      	adds	r3, #4
 8003e84:	0019      	movs	r1, r3
 8003e86:	0010      	movs	r0, r2
 8003e88:	f7ff f9df 	bl	800324a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e8c:	f001 f8ba 	bl	8005004 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e90:	4b0a      	ldr	r3, [pc, #40]	@ (8003ebc <prvAddNewTaskToReadyList+0xc0>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d008      	beq.n	8003eaa <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e98:	4b07      	ldr	r3, [pc, #28]	@ (8003eb8 <prvAddNewTaskToReadyList+0xbc>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d201      	bcs.n	8003eaa <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ea6:	f001 f88b 	bl	8004fc0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003eaa:	46c0      	nop			@ (mov r8, r8)
 8003eac:	46bd      	mov	sp, r7
 8003eae:	b002      	add	sp, #8
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	46c0      	nop			@ (mov r8, r8)
 8003eb4:	20000d74 	.word	0x20000d74
 8003eb8:	200008a0 	.word	0x200008a0
 8003ebc:	20000d80 	.word	0x20000d80
 8003ec0:	20000d90 	.word	0x20000d90
 8003ec4:	20000d7c 	.word	0x20000d7c
 8003ec8:	200008a4 	.word	0x200008a4

08003ecc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d011      	beq.n	8003f02 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ede:	4b0d      	ldr	r3, [pc, #52]	@ (8003f14 <vTaskDelay+0x48>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <vTaskDelay+0x20>
 8003ee6:	b672      	cpsid	i
 8003ee8:	46c0      	nop			@ (mov r8, r8)
 8003eea:	e7fd      	b.n	8003ee8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003eec:	f000 f86a 	bl	8003fc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f000 fc67 	bl	80047c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003efa:	f000 f86f 	bl	8003fdc <xTaskResumeAll>
 8003efe:	0003      	movs	r3, r0
 8003f00:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8003f08:	f001 f85a 	bl	8004fc0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f0c:	46c0      	nop			@ (mov r8, r8)
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b004      	add	sp, #16
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20000d9c 	.word	0x20000d9c

08003f18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f18:	b590      	push	{r4, r7, lr}
 8003f1a:	b089      	sub	sp, #36	@ 0x24
 8003f1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f26:	003a      	movs	r2, r7
 8003f28:	1d39      	adds	r1, r7, #4
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f7ff f932 	bl	8003198 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f34:	683c      	ldr	r4, [r7, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	491c      	ldr	r1, [pc, #112]	@ (8003fac <vTaskStartScheduler+0x94>)
 8003f3c:	481c      	ldr	r0, [pc, #112]	@ (8003fb0 <vTaskStartScheduler+0x98>)
 8003f3e:	9202      	str	r2, [sp, #8]
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	2300      	movs	r3, #0
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	2300      	movs	r3, #0
 8003f48:	0022      	movs	r2, r4
 8003f4a:	f7ff fe3a 	bl	8003bc2 <xTaskCreateStatic>
 8003f4e:	0002      	movs	r2, r0
 8003f50:	4b18      	ldr	r3, [pc, #96]	@ (8003fb4 <vTaskStartScheduler+0x9c>)
 8003f52:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f54:	4b17      	ldr	r3, [pc, #92]	@ (8003fb4 <vTaskStartScheduler+0x9c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	e001      	b.n	8003f66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d103      	bne.n	8003f74 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8003f6c:	f000 fc80 	bl	8004870 <xTimerCreateTimerTask>
 8003f70:	0003      	movs	r3, r0
 8003f72:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d10d      	bne.n	8003f96 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003f7a:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb8 <vTaskStartScheduler+0xa0>)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	4252      	negs	r2, r2
 8003f82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f84:	4b0d      	ldr	r3, [pc, #52]	@ (8003fbc <vTaskStartScheduler+0xa4>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc0 <vTaskStartScheduler+0xa8>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f90:	f000 fff2 	bl	8004f78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f94:	e005      	b.n	8003fa2 <vTaskStartScheduler+0x8a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	d102      	bne.n	8003fa2 <vTaskStartScheduler+0x8a>
 8003f9c:	b672      	cpsid	i
 8003f9e:	46c0      	nop			@ (mov r8, r8)
 8003fa0:	e7fd      	b.n	8003f9e <vTaskStartScheduler+0x86>
}
 8003fa2:	46c0      	nop			@ (mov r8, r8)
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b005      	add	sp, #20
 8003fa8:	bd90      	pop	{r4, r7, pc}
 8003faa:	46c0      	nop			@ (mov r8, r8)
 8003fac:	08005510 	.word	0x08005510
 8003fb0:	08004541 	.word	0x08004541
 8003fb4:	20000d98 	.word	0x20000d98
 8003fb8:	20000d94 	.word	0x20000d94
 8003fbc:	20000d80 	.word	0x20000d80
 8003fc0:	20000d78 	.word	0x20000d78

08003fc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003fc8:	4b03      	ldr	r3, [pc, #12]	@ (8003fd8 <vTaskSuspendAll+0x14>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	4b02      	ldr	r3, [pc, #8]	@ (8003fd8 <vTaskSuspendAll+0x14>)
 8003fd0:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003fd2:	46c0      	nop			@ (mov r8, r8)
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20000d9c 	.word	0x20000d9c

08003fdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003fea:	4b3a      	ldr	r3, [pc, #232]	@ (80040d4 <xTaskResumeAll+0xf8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d102      	bne.n	8003ff8 <xTaskResumeAll+0x1c>
 8003ff2:	b672      	cpsid	i
 8003ff4:	46c0      	nop			@ (mov r8, r8)
 8003ff6:	e7fd      	b.n	8003ff4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ff8:	f000 fff2 	bl	8004fe0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ffc:	4b35      	ldr	r3, [pc, #212]	@ (80040d4 <xTaskResumeAll+0xf8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	1e5a      	subs	r2, r3, #1
 8004002:	4b34      	ldr	r3, [pc, #208]	@ (80040d4 <xTaskResumeAll+0xf8>)
 8004004:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004006:	4b33      	ldr	r3, [pc, #204]	@ (80040d4 <xTaskResumeAll+0xf8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d15b      	bne.n	80040c6 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800400e:	4b32      	ldr	r3, [pc, #200]	@ (80040d8 <xTaskResumeAll+0xfc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d057      	beq.n	80040c6 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004016:	e02f      	b.n	8004078 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004018:	4b30      	ldr	r3, [pc, #192]	@ (80040dc <xTaskResumeAll+0x100>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3318      	adds	r3, #24
 8004024:	0018      	movs	r0, r3
 8004026:	f7ff f968 	bl	80032fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3304      	adds	r3, #4
 800402e:	0018      	movs	r0, r3
 8004030:	f7ff f963 	bl	80032fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004038:	4b29      	ldr	r3, [pc, #164]	@ (80040e0 <xTaskResumeAll+0x104>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d903      	bls.n	8004048 <xTaskResumeAll+0x6c>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004044:	4b26      	ldr	r3, [pc, #152]	@ (80040e0 <xTaskResumeAll+0x104>)
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800404c:	0013      	movs	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	189b      	adds	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4a23      	ldr	r2, [pc, #140]	@ (80040e4 <xTaskResumeAll+0x108>)
 8004056:	189a      	adds	r2, r3, r2
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3304      	adds	r3, #4
 800405c:	0019      	movs	r1, r3
 800405e:	0010      	movs	r0, r2
 8004060:	f7ff f8f3 	bl	800324a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004068:	4b1f      	ldr	r3, [pc, #124]	@ (80040e8 <xTaskResumeAll+0x10c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406e:	429a      	cmp	r2, r3
 8004070:	d302      	bcc.n	8004078 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8004072:	4b1e      	ldr	r3, [pc, #120]	@ (80040ec <xTaskResumeAll+0x110>)
 8004074:	2201      	movs	r2, #1
 8004076:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004078:	4b18      	ldr	r3, [pc, #96]	@ (80040dc <xTaskResumeAll+0x100>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1cb      	bne.n	8004018 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004086:	f000 fb07 	bl	8004698 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800408a:	4b19      	ldr	r3, [pc, #100]	@ (80040f0 <xTaskResumeAll+0x114>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00f      	beq.n	80040b6 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004096:	f000 f83b 	bl	8004110 <xTaskIncrementTick>
 800409a:	1e03      	subs	r3, r0, #0
 800409c:	d002      	beq.n	80040a4 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 800409e:	4b13      	ldr	r3, [pc, #76]	@ (80040ec <xTaskResumeAll+0x110>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1f2      	bne.n	8004096 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 80040b0:	4b0f      	ldr	r3, [pc, #60]	@ (80040f0 <xTaskResumeAll+0x114>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040b6:	4b0d      	ldr	r3, [pc, #52]	@ (80040ec <xTaskResumeAll+0x110>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040be:	2301      	movs	r3, #1
 80040c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040c2:	f000 ff7d 	bl	8004fc0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040c6:	f000 ff9d 	bl	8005004 <vPortExitCritical>

	return xAlreadyYielded;
 80040ca:	68bb      	ldr	r3, [r7, #8]
}
 80040cc:	0018      	movs	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b004      	add	sp, #16
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	20000d9c 	.word	0x20000d9c
 80040d8:	20000d74 	.word	0x20000d74
 80040dc:	20000d34 	.word	0x20000d34
 80040e0:	20000d7c 	.word	0x20000d7c
 80040e4:	200008a4 	.word	0x200008a4
 80040e8:	200008a0 	.word	0x200008a0
 80040ec:	20000d88 	.word	0x20000d88
 80040f0:	20000d84 	.word	0x20000d84

080040f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80040fa:	4b04      	ldr	r3, [pc, #16]	@ (800410c <xTaskGetTickCount+0x18>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004100:	687b      	ldr	r3, [r7, #4]
}
 8004102:	0018      	movs	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	b002      	add	sp, #8
 8004108:	bd80      	pop	{r7, pc}
 800410a:	46c0      	nop			@ (mov r8, r8)
 800410c:	20000d78 	.word	0x20000d78

08004110 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800411a:	4b4a      	ldr	r3, [pc, #296]	@ (8004244 <xTaskIncrementTick+0x134>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d000      	beq.n	8004124 <xTaskIncrementTick+0x14>
 8004122:	e085      	b.n	8004230 <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004124:	4b48      	ldr	r3, [pc, #288]	@ (8004248 <xTaskIncrementTick+0x138>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3301      	adds	r3, #1
 800412a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800412c:	4b46      	ldr	r3, [pc, #280]	@ (8004248 <xTaskIncrementTick+0x138>)
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d118      	bne.n	800416a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004138:	4b44      	ldr	r3, [pc, #272]	@ (800424c <xTaskIncrementTick+0x13c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <xTaskIncrementTick+0x38>
 8004142:	b672      	cpsid	i
 8004144:	46c0      	nop			@ (mov r8, r8)
 8004146:	e7fd      	b.n	8004144 <xTaskIncrementTick+0x34>
 8004148:	4b40      	ldr	r3, [pc, #256]	@ (800424c <xTaskIncrementTick+0x13c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	4b40      	ldr	r3, [pc, #256]	@ (8004250 <xTaskIncrementTick+0x140>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	4b3e      	ldr	r3, [pc, #248]	@ (800424c <xTaskIncrementTick+0x13c>)
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	4b3e      	ldr	r3, [pc, #248]	@ (8004250 <xTaskIncrementTick+0x140>)
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	4b3d      	ldr	r3, [pc, #244]	@ (8004254 <xTaskIncrementTick+0x144>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	4b3c      	ldr	r3, [pc, #240]	@ (8004254 <xTaskIncrementTick+0x144>)
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	f000 fa97 	bl	8004698 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800416a:	4b3b      	ldr	r3, [pc, #236]	@ (8004258 <xTaskIncrementTick+0x148>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	429a      	cmp	r2, r3
 8004172:	d349      	bcc.n	8004208 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004174:	4b35      	ldr	r3, [pc, #212]	@ (800424c <xTaskIncrementTick+0x13c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d104      	bne.n	8004188 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800417e:	4b36      	ldr	r3, [pc, #216]	@ (8004258 <xTaskIncrementTick+0x148>)
 8004180:	2201      	movs	r2, #1
 8004182:	4252      	negs	r2, r2
 8004184:	601a      	str	r2, [r3, #0]
					break;
 8004186:	e03f      	b.n	8004208 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004188:	4b30      	ldr	r3, [pc, #192]	@ (800424c <xTaskIncrementTick+0x13c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	429a      	cmp	r2, r3
 800419e:	d203      	bcs.n	80041a8 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004258 <xTaskIncrementTick+0x148>)
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041a6:	e02f      	b.n	8004208 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	3304      	adds	r3, #4
 80041ac:	0018      	movs	r0, r3
 80041ae:	f7ff f8a4 	bl	80032fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d004      	beq.n	80041c4 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	3318      	adds	r3, #24
 80041be:	0018      	movs	r0, r3
 80041c0:	f7ff f89b 	bl	80032fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c8:	4b24      	ldr	r3, [pc, #144]	@ (800425c <xTaskIncrementTick+0x14c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d903      	bls.n	80041d8 <xTaskIncrementTick+0xc8>
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d4:	4b21      	ldr	r3, [pc, #132]	@ (800425c <xTaskIncrementTick+0x14c>)
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041dc:	0013      	movs	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	189b      	adds	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004260 <xTaskIncrementTick+0x150>)
 80041e6:	189a      	adds	r2, r3, r2
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	3304      	adds	r3, #4
 80041ec:	0019      	movs	r1, r3
 80041ee:	0010      	movs	r0, r2
 80041f0:	f7ff f82b 	bl	800324a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004264 <xTaskIncrementTick+0x154>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fe:	429a      	cmp	r2, r3
 8004200:	d3b8      	bcc.n	8004174 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8004202:	2301      	movs	r3, #1
 8004204:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004206:	e7b5      	b.n	8004174 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004208:	4b16      	ldr	r3, [pc, #88]	@ (8004264 <xTaskIncrementTick+0x154>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800420e:	4914      	ldr	r1, [pc, #80]	@ (8004260 <xTaskIncrementTick+0x150>)
 8004210:	0013      	movs	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	189b      	adds	r3, r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	585b      	ldr	r3, [r3, r1]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d901      	bls.n	8004222 <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 800421e:	2301      	movs	r3, #1
 8004220:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004222:	4b11      	ldr	r3, [pc, #68]	@ (8004268 <xTaskIncrementTick+0x158>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d007      	beq.n	800423a <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 800422a:	2301      	movs	r3, #1
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	e004      	b.n	800423a <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004230:	4b0e      	ldr	r3, [pc, #56]	@ (800426c <xTaskIncrementTick+0x15c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	4b0d      	ldr	r3, [pc, #52]	@ (800426c <xTaskIncrementTick+0x15c>)
 8004238:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800423a:	697b      	ldr	r3, [r7, #20]
}
 800423c:	0018      	movs	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	b006      	add	sp, #24
 8004242:	bd80      	pop	{r7, pc}
 8004244:	20000d9c 	.word	0x20000d9c
 8004248:	20000d78 	.word	0x20000d78
 800424c:	20000d2c 	.word	0x20000d2c
 8004250:	20000d30 	.word	0x20000d30
 8004254:	20000d8c 	.word	0x20000d8c
 8004258:	20000d94 	.word	0x20000d94
 800425c:	20000d7c 	.word	0x20000d7c
 8004260:	200008a4 	.word	0x200008a4
 8004264:	200008a0 	.word	0x200008a0
 8004268:	20000d88 	.word	0x20000d88
 800426c:	20000d84 	.word	0x20000d84

08004270 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004276:	4b22      	ldr	r3, [pc, #136]	@ (8004300 <vTaskSwitchContext+0x90>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800427e:	4b21      	ldr	r3, [pc, #132]	@ (8004304 <vTaskSwitchContext+0x94>)
 8004280:	2201      	movs	r2, #1
 8004282:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004284:	e038      	b.n	80042f8 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8004286:	4b1f      	ldr	r3, [pc, #124]	@ (8004304 <vTaskSwitchContext+0x94>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800428c:	4b1e      	ldr	r3, [pc, #120]	@ (8004308 <vTaskSwitchContext+0x98>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	607b      	str	r3, [r7, #4]
 8004292:	e008      	b.n	80042a6 <vTaskSwitchContext+0x36>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d102      	bne.n	80042a0 <vTaskSwitchContext+0x30>
 800429a:	b672      	cpsid	i
 800429c:	46c0      	nop			@ (mov r8, r8)
 800429e:	e7fd      	b.n	800429c <vTaskSwitchContext+0x2c>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	607b      	str	r3, [r7, #4]
 80042a6:	4919      	ldr	r1, [pc, #100]	@ (800430c <vTaskSwitchContext+0x9c>)
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	0013      	movs	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	189b      	adds	r3, r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	585b      	ldr	r3, [r3, r1]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0ed      	beq.n	8004294 <vTaskSwitchContext+0x24>
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	0013      	movs	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	189b      	adds	r3, r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4a12      	ldr	r2, [pc, #72]	@ (800430c <vTaskSwitchContext+0x9c>)
 80042c4:	189b      	adds	r3, r3, r2
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	605a      	str	r2, [r3, #4]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	3308      	adds	r3, #8
 80042da:	429a      	cmp	r2, r3
 80042dc:	d104      	bne.n	80042e8 <vTaskSwitchContext+0x78>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	605a      	str	r2, [r3, #4]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	4b08      	ldr	r3, [pc, #32]	@ (8004310 <vTaskSwitchContext+0xa0>)
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	4b05      	ldr	r3, [pc, #20]	@ (8004308 <vTaskSwitchContext+0x98>)
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	601a      	str	r2, [r3, #0]
}
 80042f8:	46c0      	nop			@ (mov r8, r8)
 80042fa:	46bd      	mov	sp, r7
 80042fc:	b002      	add	sp, #8
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20000d9c 	.word	0x20000d9c
 8004304:	20000d88 	.word	0x20000d88
 8004308:	20000d7c 	.word	0x20000d7c
 800430c:	200008a4 	.word	0x200008a4
 8004310:	200008a0 	.word	0x200008a0

08004314 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d102      	bne.n	800432a <vTaskPlaceOnEventList+0x16>
 8004324:	b672      	cpsid	i
 8004326:	46c0      	nop			@ (mov r8, r8)
 8004328:	e7fd      	b.n	8004326 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800432a:	4b09      	ldr	r3, [pc, #36]	@ (8004350 <vTaskPlaceOnEventList+0x3c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3318      	adds	r3, #24
 8004330:	001a      	movs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	0011      	movs	r1, r2
 8004336:	0018      	movs	r0, r3
 8004338:	f7fe ffa9 	bl	800328e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2101      	movs	r1, #1
 8004340:	0018      	movs	r0, r3
 8004342:	f000 fa41 	bl	80047c8 <prvAddCurrentTaskToDelayedList>
}
 8004346:	46c0      	nop			@ (mov r8, r8)
 8004348:	46bd      	mov	sp, r7
 800434a:	b002      	add	sp, #8
 800434c:	bd80      	pop	{r7, pc}
 800434e:	46c0      	nop			@ (mov r8, r8)
 8004350:	200008a0 	.word	0x200008a0

08004354 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <vTaskPlaceOnEventListRestricted+0x18>
 8004366:	b672      	cpsid	i
 8004368:	46c0      	nop			@ (mov r8, r8)
 800436a:	e7fd      	b.n	8004368 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800436c:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <vTaskPlaceOnEventListRestricted+0x4c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3318      	adds	r3, #24
 8004372:	001a      	movs	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	0011      	movs	r1, r2
 8004378:	0018      	movs	r0, r3
 800437a:	f7fe ff66 	bl	800324a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 8004384:	2301      	movs	r3, #1
 8004386:	425b      	negs	r3, r3
 8004388:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	0011      	movs	r1, r2
 8004390:	0018      	movs	r0, r3
 8004392:	f000 fa19 	bl	80047c8 <prvAddCurrentTaskToDelayedList>
	}
 8004396:	46c0      	nop			@ (mov r8, r8)
 8004398:	46bd      	mov	sp, r7
 800439a:	b004      	add	sp, #16
 800439c:	bd80      	pop	{r7, pc}
 800439e:	46c0      	nop			@ (mov r8, r8)
 80043a0:	200008a0 	.word	0x200008a0

080043a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d102      	bne.n	80043c0 <xTaskRemoveFromEventList+0x1c>
 80043ba:	b672      	cpsid	i
 80043bc:	46c0      	nop			@ (mov r8, r8)
 80043be:	e7fd      	b.n	80043bc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	3318      	adds	r3, #24
 80043c4:	0018      	movs	r0, r3
 80043c6:	f7fe ff98 	bl	80032fa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004448 <xTaskRemoveFromEventList+0xa4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d11d      	bne.n	800440e <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	3304      	adds	r3, #4
 80043d6:	0018      	movs	r0, r3
 80043d8:	f7fe ff8f 	bl	80032fa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e0:	4b1a      	ldr	r3, [pc, #104]	@ (800444c <xTaskRemoveFromEventList+0xa8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d903      	bls.n	80043f0 <xTaskRemoveFromEventList+0x4c>
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ec:	4b17      	ldr	r3, [pc, #92]	@ (800444c <xTaskRemoveFromEventList+0xa8>)
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043f4:	0013      	movs	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	189b      	adds	r3, r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4a14      	ldr	r2, [pc, #80]	@ (8004450 <xTaskRemoveFromEventList+0xac>)
 80043fe:	189a      	adds	r2, r3, r2
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	3304      	adds	r3, #4
 8004404:	0019      	movs	r1, r3
 8004406:	0010      	movs	r0, r2
 8004408:	f7fe ff1f 	bl	800324a <vListInsertEnd>
 800440c:	e007      	b.n	800441e <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	3318      	adds	r3, #24
 8004412:	001a      	movs	r2, r3
 8004414:	4b0f      	ldr	r3, [pc, #60]	@ (8004454 <xTaskRemoveFromEventList+0xb0>)
 8004416:	0011      	movs	r1, r2
 8004418:	0018      	movs	r0, r3
 800441a:	f7fe ff16 	bl	800324a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004422:	4b0d      	ldr	r3, [pc, #52]	@ (8004458 <xTaskRemoveFromEventList+0xb4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004428:	429a      	cmp	r2, r3
 800442a:	d905      	bls.n	8004438 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800442c:	2301      	movs	r3, #1
 800442e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004430:	4b0a      	ldr	r3, [pc, #40]	@ (800445c <xTaskRemoveFromEventList+0xb8>)
 8004432:	2201      	movs	r2, #1
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	e001      	b.n	800443c <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800443c:	68fb      	ldr	r3, [r7, #12]
}
 800443e:	0018      	movs	r0, r3
 8004440:	46bd      	mov	sp, r7
 8004442:	b004      	add	sp, #16
 8004444:	bd80      	pop	{r7, pc}
 8004446:	46c0      	nop			@ (mov r8, r8)
 8004448:	20000d9c 	.word	0x20000d9c
 800444c:	20000d7c 	.word	0x20000d7c
 8004450:	200008a4 	.word	0x200008a4
 8004454:	20000d34 	.word	0x20000d34
 8004458:	200008a0 	.word	0x200008a0
 800445c:	20000d88 	.word	0x20000d88

08004460 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004468:	4b05      	ldr	r3, [pc, #20]	@ (8004480 <vTaskInternalSetTimeOutState+0x20>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004470:	4b04      	ldr	r3, [pc, #16]	@ (8004484 <vTaskInternalSetTimeOutState+0x24>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	605a      	str	r2, [r3, #4]
}
 8004478:	46c0      	nop			@ (mov r8, r8)
 800447a:	46bd      	mov	sp, r7
 800447c:	b002      	add	sp, #8
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20000d8c 	.word	0x20000d8c
 8004484:	20000d78 	.word	0x20000d78

08004488 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d102      	bne.n	800449e <xTaskCheckForTimeOut+0x16>
 8004498:	b672      	cpsid	i
 800449a:	46c0      	nop			@ (mov r8, r8)
 800449c:	e7fd      	b.n	800449a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d102      	bne.n	80044aa <xTaskCheckForTimeOut+0x22>
 80044a4:	b672      	cpsid	i
 80044a6:	46c0      	nop			@ (mov r8, r8)
 80044a8:	e7fd      	b.n	80044a6 <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 80044aa:	f000 fd99 	bl	8004fe0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80044ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004524 <xTaskCheckForTimeOut+0x9c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3301      	adds	r3, #1
 80044c4:	d102      	bne.n	80044cc <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80044c6:	2300      	movs	r3, #0
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	e024      	b.n	8004516 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	4b15      	ldr	r3, [pc, #84]	@ (8004528 <xTaskCheckForTimeOut+0xa0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d007      	beq.n	80044e8 <xTaskCheckForTimeOut+0x60>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d302      	bcc.n	80044e8 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80044e2:	2301      	movs	r3, #1
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	e016      	b.n	8004516 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d20c      	bcs.n	800450c <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad2      	subs	r2, r2, r3
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	0018      	movs	r0, r3
 8004502:	f7ff ffad 	bl	8004460 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	e004      	b.n	8004516 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004512:	2301      	movs	r3, #1
 8004514:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004516:	f000 fd75 	bl	8005004 <vPortExitCritical>

	return xReturn;
 800451a:	697b      	ldr	r3, [r7, #20]
}
 800451c:	0018      	movs	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	b006      	add	sp, #24
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20000d78 	.word	0x20000d78
 8004528:	20000d8c 	.word	0x20000d8c

0800452c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004530:	4b02      	ldr	r3, [pc, #8]	@ (800453c <vTaskMissedYield+0x10>)
 8004532:	2201      	movs	r2, #1
 8004534:	601a      	str	r2, [r3, #0]
}
 8004536:	46c0      	nop			@ (mov r8, r8)
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	20000d88 	.word	0x20000d88

08004540 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004548:	f000 f84e 	bl	80045e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800454c:	4b03      	ldr	r3, [pc, #12]	@ (800455c <prvIdleTask+0x1c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d9f9      	bls.n	8004548 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004554:	f000 fd34 	bl	8004fc0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004558:	e7f6      	b.n	8004548 <prvIdleTask+0x8>
 800455a:	46c0      	nop			@ (mov r8, r8)
 800455c:	200008a4 	.word	0x200008a4

08004560 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004566:	2300      	movs	r3, #0
 8004568:	607b      	str	r3, [r7, #4]
 800456a:	e00c      	b.n	8004586 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	0013      	movs	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	189b      	adds	r3, r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4a14      	ldr	r2, [pc, #80]	@ (80045c8 <prvInitialiseTaskLists+0x68>)
 8004578:	189b      	adds	r3, r3, r2
 800457a:	0018      	movs	r0, r3
 800457c:	f7fe fe3c 	bl	80031f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3301      	adds	r3, #1
 8004584:	607b      	str	r3, [r7, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b37      	cmp	r3, #55	@ 0x37
 800458a:	d9ef      	bls.n	800456c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800458c:	4b0f      	ldr	r3, [pc, #60]	@ (80045cc <prvInitialiseTaskLists+0x6c>)
 800458e:	0018      	movs	r0, r3
 8004590:	f7fe fe32 	bl	80031f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004594:	4b0e      	ldr	r3, [pc, #56]	@ (80045d0 <prvInitialiseTaskLists+0x70>)
 8004596:	0018      	movs	r0, r3
 8004598:	f7fe fe2e 	bl	80031f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800459c:	4b0d      	ldr	r3, [pc, #52]	@ (80045d4 <prvInitialiseTaskLists+0x74>)
 800459e:	0018      	movs	r0, r3
 80045a0:	f7fe fe2a 	bl	80031f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045a4:	4b0c      	ldr	r3, [pc, #48]	@ (80045d8 <prvInitialiseTaskLists+0x78>)
 80045a6:	0018      	movs	r0, r3
 80045a8:	f7fe fe26 	bl	80031f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045ac:	4b0b      	ldr	r3, [pc, #44]	@ (80045dc <prvInitialiseTaskLists+0x7c>)
 80045ae:	0018      	movs	r0, r3
 80045b0:	f7fe fe22 	bl	80031f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045b4:	4b0a      	ldr	r3, [pc, #40]	@ (80045e0 <prvInitialiseTaskLists+0x80>)
 80045b6:	4a05      	ldr	r2, [pc, #20]	@ (80045cc <prvInitialiseTaskLists+0x6c>)
 80045b8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045ba:	4b0a      	ldr	r3, [pc, #40]	@ (80045e4 <prvInitialiseTaskLists+0x84>)
 80045bc:	4a04      	ldr	r2, [pc, #16]	@ (80045d0 <prvInitialiseTaskLists+0x70>)
 80045be:	601a      	str	r2, [r3, #0]
}
 80045c0:	46c0      	nop			@ (mov r8, r8)
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b002      	add	sp, #8
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	200008a4 	.word	0x200008a4
 80045cc:	20000d04 	.word	0x20000d04
 80045d0:	20000d18 	.word	0x20000d18
 80045d4:	20000d34 	.word	0x20000d34
 80045d8:	20000d48 	.word	0x20000d48
 80045dc:	20000d60 	.word	0x20000d60
 80045e0:	20000d2c 	.word	0x20000d2c
 80045e4:	20000d30 	.word	0x20000d30

080045e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045ee:	e01a      	b.n	8004626 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80045f0:	f000 fcf6 	bl	8004fe0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045f4:	4b10      	ldr	r3, [pc, #64]	@ (8004638 <prvCheckTasksWaitingTermination+0x50>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3304      	adds	r3, #4
 8004600:	0018      	movs	r0, r3
 8004602:	f7fe fe7a 	bl	80032fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004606:	4b0d      	ldr	r3, [pc, #52]	@ (800463c <prvCheckTasksWaitingTermination+0x54>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	1e5a      	subs	r2, r3, #1
 800460c:	4b0b      	ldr	r3, [pc, #44]	@ (800463c <prvCheckTasksWaitingTermination+0x54>)
 800460e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004610:	4b0b      	ldr	r3, [pc, #44]	@ (8004640 <prvCheckTasksWaitingTermination+0x58>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	1e5a      	subs	r2, r3, #1
 8004616:	4b0a      	ldr	r3, [pc, #40]	@ (8004640 <prvCheckTasksWaitingTermination+0x58>)
 8004618:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800461a:	f000 fcf3 	bl	8005004 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	0018      	movs	r0, r3
 8004622:	f000 f80f 	bl	8004644 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004626:	4b06      	ldr	r3, [pc, #24]	@ (8004640 <prvCheckTasksWaitingTermination+0x58>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1e0      	bne.n	80045f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800462e:	46c0      	nop			@ (mov r8, r8)
 8004630:	46c0      	nop			@ (mov r8, r8)
 8004632:	46bd      	mov	sp, r7
 8004634:	b002      	add	sp, #8
 8004636:	bd80      	pop	{r7, pc}
 8004638:	20000d48 	.word	0x20000d48
 800463c:	20000d74 	.word	0x20000d74
 8004640:	20000d5c 	.word	0x20000d5c

08004644 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2259      	movs	r2, #89	@ 0x59
 8004650:	5c9b      	ldrb	r3, [r3, r2]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465a:	0018      	movs	r0, r3
 800465c:	f000 fe08 	bl	8005270 <vPortFree>
				vPortFree( pxTCB );
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	0018      	movs	r0, r3
 8004664:	f000 fe04 	bl	8005270 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004668:	e011      	b.n	800468e <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2259      	movs	r2, #89	@ 0x59
 800466e:	5c9b      	ldrb	r3, [r3, r2]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d104      	bne.n	800467e <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	0018      	movs	r0, r3
 8004678:	f000 fdfa 	bl	8005270 <vPortFree>
	}
 800467c:	e007      	b.n	800468e <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2259      	movs	r2, #89	@ 0x59
 8004682:	5c9b      	ldrb	r3, [r3, r2]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d002      	beq.n	800468e <prvDeleteTCB+0x4a>
 8004688:	b672      	cpsid	i
 800468a:	46c0      	nop			@ (mov r8, r8)
 800468c:	e7fd      	b.n	800468a <prvDeleteTCB+0x46>
	}
 800468e:	46c0      	nop			@ (mov r8, r8)
 8004690:	46bd      	mov	sp, r7
 8004692:	b002      	add	sp, #8
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800469e:	4b0b      	ldr	r3, [pc, #44]	@ (80046cc <prvResetNextTaskUnblockTime+0x34>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d104      	bne.n	80046b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046a8:	4b09      	ldr	r3, [pc, #36]	@ (80046d0 <prvResetNextTaskUnblockTime+0x38>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	4252      	negs	r2, r2
 80046ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046b0:	e008      	b.n	80046c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046b2:	4b06      	ldr	r3, [pc, #24]	@ (80046cc <prvResetNextTaskUnblockTime+0x34>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	4b03      	ldr	r3, [pc, #12]	@ (80046d0 <prvResetNextTaskUnblockTime+0x38>)
 80046c2:	601a      	str	r2, [r3, #0]
}
 80046c4:	46c0      	nop			@ (mov r8, r8)
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b002      	add	sp, #8
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	20000d2c 	.word	0x20000d2c
 80046d0:	20000d94 	.word	0x20000d94

080046d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80046da:	4b0a      	ldr	r3, [pc, #40]	@ (8004704 <xTaskGetSchedulerState+0x30>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d102      	bne.n	80046e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80046e2:	2301      	movs	r3, #1
 80046e4:	607b      	str	r3, [r7, #4]
 80046e6:	e008      	b.n	80046fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046e8:	4b07      	ldr	r3, [pc, #28]	@ (8004708 <xTaskGetSchedulerState+0x34>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d102      	bne.n	80046f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80046f0:	2302      	movs	r3, #2
 80046f2:	607b      	str	r3, [r7, #4]
 80046f4:	e001      	b.n	80046fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80046f6:	2300      	movs	r3, #0
 80046f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80046fa:	687b      	ldr	r3, [r7, #4]
	}
 80046fc:	0018      	movs	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	b002      	add	sp, #8
 8004702:	bd80      	pop	{r7, pc}
 8004704:	20000d80 	.word	0x20000d80
 8004708:	20000d9c 	.word	0x20000d9c

0800470c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004718:	2300      	movs	r3, #0
 800471a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d046      	beq.n	80047b0 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004722:	4b26      	ldr	r3, [pc, #152]	@ (80047bc <xTaskPriorityDisinherit+0xb0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	429a      	cmp	r2, r3
 800472a:	d002      	beq.n	8004732 <xTaskPriorityDisinherit+0x26>
 800472c:	b672      	cpsid	i
 800472e:	46c0      	nop			@ (mov r8, r8)
 8004730:	e7fd      	b.n	800472e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004736:	2b00      	cmp	r3, #0
 8004738:	d102      	bne.n	8004740 <xTaskPriorityDisinherit+0x34>
 800473a:	b672      	cpsid	i
 800473c:	46c0      	nop			@ (mov r8, r8)
 800473e:	e7fd      	b.n	800473c <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004744:	1e5a      	subs	r2, r3, #1
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004752:	429a      	cmp	r2, r3
 8004754:	d02c      	beq.n	80047b0 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800475a:	2b00      	cmp	r3, #0
 800475c:	d128      	bne.n	80047b0 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	3304      	adds	r3, #4
 8004762:	0018      	movs	r0, r3
 8004764:	f7fe fdc9 	bl	80032fa <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004774:	2238      	movs	r2, #56	@ 0x38
 8004776:	1ad2      	subs	r2, r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004780:	4b0f      	ldr	r3, [pc, #60]	@ (80047c0 <xTaskPriorityDisinherit+0xb4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d903      	bls.n	8004790 <xTaskPriorityDisinherit+0x84>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800478c:	4b0c      	ldr	r3, [pc, #48]	@ (80047c0 <xTaskPriorityDisinherit+0xb4>)
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004794:	0013      	movs	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	189b      	adds	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4a09      	ldr	r2, [pc, #36]	@ (80047c4 <xTaskPriorityDisinherit+0xb8>)
 800479e:	189a      	adds	r2, r3, r2
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	3304      	adds	r3, #4
 80047a4:	0019      	movs	r1, r3
 80047a6:	0010      	movs	r0, r2
 80047a8:	f7fe fd4f 	bl	800324a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047ac:	2301      	movs	r3, #1
 80047ae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047b0:	68fb      	ldr	r3, [r7, #12]
	}
 80047b2:	0018      	movs	r0, r3
 80047b4:	46bd      	mov	sp, r7
 80047b6:	b004      	add	sp, #16
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	46c0      	nop			@ (mov r8, r8)
 80047bc:	200008a0 	.word	0x200008a0
 80047c0:	20000d7c 	.word	0x20000d7c
 80047c4:	200008a4 	.word	0x200008a4

080047c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047d2:	4b21      	ldr	r3, [pc, #132]	@ (8004858 <prvAddCurrentTaskToDelayedList+0x90>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047d8:	4b20      	ldr	r3, [pc, #128]	@ (800485c <prvAddCurrentTaskToDelayedList+0x94>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3304      	adds	r3, #4
 80047de:	0018      	movs	r0, r3
 80047e0:	f7fe fd8b 	bl	80032fa <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3301      	adds	r3, #1
 80047e8:	d10b      	bne.n	8004802 <prvAddCurrentTaskToDelayedList+0x3a>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047f0:	4b1a      	ldr	r3, [pc, #104]	@ (800485c <prvAddCurrentTaskToDelayedList+0x94>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	1d1a      	adds	r2, r3, #4
 80047f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004860 <prvAddCurrentTaskToDelayedList+0x98>)
 80047f8:	0011      	movs	r1, r2
 80047fa:	0018      	movs	r0, r3
 80047fc:	f7fe fd25 	bl	800324a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004800:	e026      	b.n	8004850 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	18d3      	adds	r3, r2, r3
 8004808:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800480a:	4b14      	ldr	r3, [pc, #80]	@ (800485c <prvAddCurrentTaskToDelayedList+0x94>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	429a      	cmp	r2, r3
 8004818:	d209      	bcs.n	800482e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800481a:	4b12      	ldr	r3, [pc, #72]	@ (8004864 <prvAddCurrentTaskToDelayedList+0x9c>)
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	4b0f      	ldr	r3, [pc, #60]	@ (800485c <prvAddCurrentTaskToDelayedList+0x94>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3304      	adds	r3, #4
 8004824:	0019      	movs	r1, r3
 8004826:	0010      	movs	r0, r2
 8004828:	f7fe fd31 	bl	800328e <vListInsert>
}
 800482c:	e010      	b.n	8004850 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800482e:	4b0e      	ldr	r3, [pc, #56]	@ (8004868 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	4b0a      	ldr	r3, [pc, #40]	@ (800485c <prvAddCurrentTaskToDelayedList+0x94>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3304      	adds	r3, #4
 8004838:	0019      	movs	r1, r3
 800483a:	0010      	movs	r0, r2
 800483c:	f7fe fd27 	bl	800328e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004840:	4b0a      	ldr	r3, [pc, #40]	@ (800486c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	429a      	cmp	r2, r3
 8004848:	d202      	bcs.n	8004850 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800484a:	4b08      	ldr	r3, [pc, #32]	@ (800486c <prvAddCurrentTaskToDelayedList+0xa4>)
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	601a      	str	r2, [r3, #0]
}
 8004850:	46c0      	nop			@ (mov r8, r8)
 8004852:	46bd      	mov	sp, r7
 8004854:	b004      	add	sp, #16
 8004856:	bd80      	pop	{r7, pc}
 8004858:	20000d78 	.word	0x20000d78
 800485c:	200008a0 	.word	0x200008a0
 8004860:	20000d60 	.word	0x20000d60
 8004864:	20000d30 	.word	0x20000d30
 8004868:	20000d2c 	.word	0x20000d2c
 800486c:	20000d94 	.word	0x20000d94

08004870 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004870:	b590      	push	{r4, r7, lr}
 8004872:	b089      	sub	sp, #36	@ 0x24
 8004874:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800487a:	f000 fad5 	bl	8004e28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800487e:	4b18      	ldr	r3, [pc, #96]	@ (80048e0 <xTimerCreateTimerTask+0x70>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d020      	beq.n	80048c8 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004886:	2300      	movs	r3, #0
 8004888:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800488a:	2300      	movs	r3, #0
 800488c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800488e:	003a      	movs	r2, r7
 8004890:	1d39      	adds	r1, r7, #4
 8004892:	2308      	movs	r3, #8
 8004894:	18fb      	adds	r3, r7, r3
 8004896:	0018      	movs	r0, r3
 8004898:	f7fe fc96 	bl	80031c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800489c:	683c      	ldr	r4, [r7, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	4910      	ldr	r1, [pc, #64]	@ (80048e4 <xTimerCreateTimerTask+0x74>)
 80048a4:	4810      	ldr	r0, [pc, #64]	@ (80048e8 <xTimerCreateTimerTask+0x78>)
 80048a6:	9202      	str	r2, [sp, #8]
 80048a8:	9301      	str	r3, [sp, #4]
 80048aa:	2302      	movs	r3, #2
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	2300      	movs	r3, #0
 80048b0:	0022      	movs	r2, r4
 80048b2:	f7ff f986 	bl	8003bc2 <xTaskCreateStatic>
 80048b6:	0002      	movs	r2, r0
 80048b8:	4b0c      	ldr	r3, [pc, #48]	@ (80048ec <xTimerCreateTimerTask+0x7c>)
 80048ba:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80048bc:	4b0b      	ldr	r3, [pc, #44]	@ (80048ec <xTimerCreateTimerTask+0x7c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80048c4:	2301      	movs	r3, #1
 80048c6:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d102      	bne.n	80048d4 <xTimerCreateTimerTask+0x64>
 80048ce:	b672      	cpsid	i
 80048d0:	46c0      	nop			@ (mov r8, r8)
 80048d2:	e7fd      	b.n	80048d0 <xTimerCreateTimerTask+0x60>
	return xReturn;
 80048d4:	68fb      	ldr	r3, [r7, #12]
}
 80048d6:	0018      	movs	r0, r3
 80048d8:	46bd      	mov	sp, r7
 80048da:	b005      	add	sp, #20
 80048dc:	bd90      	pop	{r4, r7, pc}
 80048de:	46c0      	nop			@ (mov r8, r8)
 80048e0:	20000dd0 	.word	0x20000dd0
 80048e4:	08005518 	.word	0x08005518
 80048e8:	08004a15 	.word	0x08004a15
 80048ec:	20000dd4 	.word	0x20000dd4

080048f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80048f0:	b590      	push	{r4, r7, lr}
 80048f2:	b08b      	sub	sp, #44	@ 0x2c
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80048fe:	2300      	movs	r3, #0
 8004900:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d102      	bne.n	800490e <xTimerGenericCommand+0x1e>
 8004908:	b672      	cpsid	i
 800490a:	46c0      	nop			@ (mov r8, r8)
 800490c:	e7fd      	b.n	800490a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800490e:	4b1d      	ldr	r3, [pc, #116]	@ (8004984 <xTimerGenericCommand+0x94>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d030      	beq.n	8004978 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004916:	2414      	movs	r4, #20
 8004918:	193b      	adds	r3, r7, r4
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800491e:	193b      	adds	r3, r7, r4
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004924:	193b      	adds	r3, r7, r4
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b05      	cmp	r3, #5
 800492e:	dc19      	bgt.n	8004964 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004930:	f7ff fed0 	bl	80046d4 <xTaskGetSchedulerState>
 8004934:	0003      	movs	r3, r0
 8004936:	2b02      	cmp	r3, #2
 8004938:	d109      	bne.n	800494e <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800493a:	4b12      	ldr	r3, [pc, #72]	@ (8004984 <xTimerGenericCommand+0x94>)
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004940:	1939      	adds	r1, r7, r4
 8004942:	2300      	movs	r3, #0
 8004944:	f7fe fdce 	bl	80034e4 <xQueueGenericSend>
 8004948:	0003      	movs	r3, r0
 800494a:	627b      	str	r3, [r7, #36]	@ 0x24
 800494c:	e014      	b.n	8004978 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800494e:	4b0d      	ldr	r3, [pc, #52]	@ (8004984 <xTimerGenericCommand+0x94>)
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	2314      	movs	r3, #20
 8004954:	18f9      	adds	r1, r7, r3
 8004956:	2300      	movs	r3, #0
 8004958:	2200      	movs	r2, #0
 800495a:	f7fe fdc3 	bl	80034e4 <xQueueGenericSend>
 800495e:	0003      	movs	r3, r0
 8004960:	627b      	str	r3, [r7, #36]	@ 0x24
 8004962:	e009      	b.n	8004978 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004964:	4b07      	ldr	r3, [pc, #28]	@ (8004984 <xTimerGenericCommand+0x94>)
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	2314      	movs	r3, #20
 800496c:	18f9      	adds	r1, r7, r3
 800496e:	2300      	movs	r3, #0
 8004970:	f7fe fe80 	bl	8003674 <xQueueGenericSendFromISR>
 8004974:	0003      	movs	r3, r0
 8004976:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800497a:	0018      	movs	r0, r3
 800497c:	46bd      	mov	sp, r7
 800497e:	b00b      	add	sp, #44	@ 0x2c
 8004980:	bd90      	pop	{r4, r7, pc}
 8004982:	46c0      	nop			@ (mov r8, r8)
 8004984:	20000dd0 	.word	0x20000dd0

08004988 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af02      	add	r7, sp, #8
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004992:	4b1f      	ldr	r3, [pc, #124]	@ (8004a10 <prvProcessExpiredTimer+0x88>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3304      	adds	r3, #4
 80049a0:	0018      	movs	r0, r3
 80049a2:	f7fe fcaa 	bl	80032fa <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2228      	movs	r2, #40	@ 0x28
 80049aa:	5c9b      	ldrb	r3, [r3, r2]
 80049ac:	001a      	movs	r2, r3
 80049ae:	2304      	movs	r3, #4
 80049b0:	4013      	ands	r3, r2
 80049b2:	d01a      	beq.n	80049ea <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	699a      	ldr	r2, [r3, #24]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	18d1      	adds	r1, r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f8c7 	bl	8004b54 <prvInsertTimerInActiveList>
 80049c6:	1e03      	subs	r3, r0, #0
 80049c8:	d018      	beq.n	80049fc <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	2300      	movs	r3, #0
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	2300      	movs	r3, #0
 80049d4:	2100      	movs	r1, #0
 80049d6:	f7ff ff8b 	bl	80048f0 <xTimerGenericCommand>
 80049da:	0003      	movs	r3, r0
 80049dc:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10b      	bne.n	80049fc <prvProcessExpiredTimer+0x74>
 80049e4:	b672      	cpsid	i
 80049e6:	46c0      	nop			@ (mov r8, r8)
 80049e8:	e7fd      	b.n	80049e6 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2228      	movs	r2, #40	@ 0x28
 80049ee:	5c9b      	ldrb	r3, [r3, r2]
 80049f0:	2201      	movs	r2, #1
 80049f2:	4393      	bics	r3, r2
 80049f4:	b2d9      	uxtb	r1, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2228      	movs	r2, #40	@ 0x28
 80049fa:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	0010      	movs	r0, r2
 8004a04:	4798      	blx	r3
}
 8004a06:	46c0      	nop			@ (mov r8, r8)
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	b004      	add	sp, #16
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	46c0      	nop			@ (mov r8, r8)
 8004a10:	20000dc8 	.word	0x20000dc8

08004a14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a1c:	2308      	movs	r3, #8
 8004a1e:	18fb      	adds	r3, r7, r3
 8004a20:	0018      	movs	r0, r3
 8004a22:	f000 f855 	bl	8004ad0 <prvGetNextExpireTime>
 8004a26:	0003      	movs	r3, r0
 8004a28:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	0011      	movs	r1, r2
 8004a30:	0018      	movs	r0, r3
 8004a32:	f000 f805 	bl	8004a40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a36:	f000 f8cf 	bl	8004bd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a3a:	46c0      	nop			@ (mov r8, r8)
 8004a3c:	e7ee      	b.n	8004a1c <prvTimerTask+0x8>
	...

08004a40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a4a:	f7ff fabb 	bl	8003fc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a4e:	2308      	movs	r3, #8
 8004a50:	18fb      	adds	r3, r7, r3
 8004a52:	0018      	movs	r0, r3
 8004a54:	f000 f85e 	bl	8004b14 <prvSampleTimeNow>
 8004a58:	0003      	movs	r3, r0
 8004a5a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d12b      	bne.n	8004aba <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10c      	bne.n	8004a82 <prvProcessTimerOrBlockTask+0x42>
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d808      	bhi.n	8004a82 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8004a70:	f7ff fab4 	bl	8003fdc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	0011      	movs	r1, r2
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f7ff ff84 	bl	8004988 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a80:	e01d      	b.n	8004abe <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d008      	beq.n	8004a9a <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a88:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac8 <prvProcessTimerOrBlockTask+0x88>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <prvProcessTimerOrBlockTask+0x56>
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <prvProcessTimerOrBlockTask+0x58>
 8004a96:	2300      	movs	r3, #0
 8004a98:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004acc <prvProcessTimerOrBlockTask+0x8c>)
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	0019      	movs	r1, r3
 8004aa8:	f7ff f858 	bl	8003b5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004aac:	f7ff fa96 	bl	8003fdc <xTaskResumeAll>
 8004ab0:	1e03      	subs	r3, r0, #0
 8004ab2:	d104      	bne.n	8004abe <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8004ab4:	f000 fa84 	bl	8004fc0 <vPortYield>
}
 8004ab8:	e001      	b.n	8004abe <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8004aba:	f7ff fa8f 	bl	8003fdc <xTaskResumeAll>
}
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	b004      	add	sp, #16
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	46c0      	nop			@ (mov r8, r8)
 8004ac8:	20000dcc 	.word	0x20000dcc
 8004acc:	20000dd0 	.word	0x20000dd0

08004ad0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8004b10 <prvGetNextExpireTime+0x40>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <prvGetNextExpireTime+0x16>
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	e000      	b.n	8004ae8 <prvGetNextExpireTime+0x18>
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d105      	bne.n	8004b00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004af4:	4b06      	ldr	r3, [pc, #24]	@ (8004b10 <prvGetNextExpireTime+0x40>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	e001      	b.n	8004b04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b04:	68fb      	ldr	r3, [r7, #12]
}
 8004b06:	0018      	movs	r0, r3
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	b004      	add	sp, #16
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	46c0      	nop			@ (mov r8, r8)
 8004b10:	20000dc8 	.word	0x20000dc8

08004b14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b1c:	f7ff faea 	bl	80040f4 <xTaskGetTickCount>
 8004b20:	0003      	movs	r3, r0
 8004b22:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b24:	4b0a      	ldr	r3, [pc, #40]	@ (8004b50 <prvSampleTimeNow+0x3c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d205      	bcs.n	8004b3a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8004b2e:	f000 f91d 	bl	8004d6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	e002      	b.n	8004b40 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b40:	4b03      	ldr	r3, [pc, #12]	@ (8004b50 <prvSampleTimeNow+0x3c>)
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8004b46:	68fb      	ldr	r3, [r7, #12]
}
 8004b48:	0018      	movs	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b004      	add	sp, #16
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20000dd8 	.word	0x20000dd8

08004b54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d812      	bhi.n	8004ba0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	1ad2      	subs	r2, r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d302      	bcc.n	8004b8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	e01b      	b.n	8004bc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b8e:	4b10      	ldr	r3, [pc, #64]	@ (8004bd0 <prvInsertTimerInActiveList+0x7c>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3304      	adds	r3, #4
 8004b96:	0019      	movs	r1, r3
 8004b98:	0010      	movs	r0, r2
 8004b9a:	f7fe fb78 	bl	800328e <vListInsert>
 8004b9e:	e012      	b.n	8004bc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d206      	bcs.n	8004bb6 <prvInsertTimerInActiveList+0x62>
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d302      	bcc.n	8004bb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	e007      	b.n	8004bc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bb6:	4b07      	ldr	r3, [pc, #28]	@ (8004bd4 <prvInsertTimerInActiveList+0x80>)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	0019      	movs	r1, r3
 8004bc0:	0010      	movs	r0, r2
 8004bc2:	f7fe fb64 	bl	800328e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004bc6:	697b      	ldr	r3, [r7, #20]
}
 8004bc8:	0018      	movs	r0, r3
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	b006      	add	sp, #24
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	20000dcc 	.word	0x20000dcc
 8004bd4:	20000dc8 	.word	0x20000dc8

08004bd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004bd8:	b590      	push	{r4, r7, lr}
 8004bda:	b08d      	sub	sp, #52	@ 0x34
 8004bdc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bde:	e0b1      	b.n	8004d44 <prvProcessReceivedCommands+0x16c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004be0:	2208      	movs	r2, #8
 8004be2:	18bb      	adds	r3, r7, r2
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	da10      	bge.n	8004c0c <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004bea:	18bb      	adds	r3, r7, r2
 8004bec:	3304      	adds	r3, #4
 8004bee:	627b      	str	r3, [r7, #36]	@ 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d102      	bne.n	8004bfc <prvProcessReceivedCommands+0x24>
 8004bf6:	b672      	cpsid	i
 8004bf8:	46c0      	nop			@ (mov r8, r8)
 8004bfa:	e7fd      	b.n	8004bf8 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	6858      	ldr	r0, [r3, #4]
 8004c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	0019      	movs	r1, r3
 8004c0a:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	18bb      	adds	r3, r7, r2
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	da00      	bge.n	8004c18 <prvProcessReceivedCommands+0x40>
 8004c16:	e095      	b.n	8004d44 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c18:	18bb      	adds	r3, r7, r2
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d004      	beq.n	8004c30 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	f7fe fb65 	bl	80032fa <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c30:	1d3b      	adds	r3, r7, #4
 8004c32:	0018      	movs	r0, r3
 8004c34:	f7ff ff6e 	bl	8004b14 <prvSampleTimeNow>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8004c3c:	2308      	movs	r3, #8
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b09      	cmp	r3, #9
 8004c44:	d900      	bls.n	8004c48 <prvProcessReceivedCommands+0x70>
 8004c46:	e07a      	b.n	8004d3e <prvProcessReceivedCommands+0x166>
 8004c48:	009a      	lsls	r2, r3, #2
 8004c4a:	4b46      	ldr	r3, [pc, #280]	@ (8004d64 <prvProcessReceivedCommands+0x18c>)
 8004c4c:	18d3      	adds	r3, r2, r3
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	2228      	movs	r2, #40	@ 0x28
 8004c56:	5c9b      	ldrb	r3, [r3, r2]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	b2d9      	uxtb	r1, r3
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	2228      	movs	r2, #40	@ 0x28
 8004c62:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c64:	2408      	movs	r4, #8
 8004c66:	193b      	adds	r3, r7, r4
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	18d1      	adds	r1, r2, r3
 8004c70:	193b      	adds	r3, r7, r4
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	6a38      	ldr	r0, [r7, #32]
 8004c78:	f7ff ff6c 	bl	8004b54 <prvInsertTimerInActiveList>
 8004c7c:	1e03      	subs	r3, r0, #0
 8004c7e:	d060      	beq.n	8004d42 <prvProcessReceivedCommands+0x16a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	6a3a      	ldr	r2, [r7, #32]
 8004c86:	0010      	movs	r0, r2
 8004c88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	2228      	movs	r2, #40	@ 0x28
 8004c8e:	5c9b      	ldrb	r3, [r3, r2]
 8004c90:	001a      	movs	r2, r3
 8004c92:	2304      	movs	r3, #4
 8004c94:	4013      	ands	r3, r2
 8004c96:	d054      	beq.n	8004d42 <prvProcessReceivedCommands+0x16a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c98:	193b      	adds	r3, r7, r4
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	18d2      	adds	r2, r2, r3
 8004ca2:	6a38      	ldr	r0, [r7, #32]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	2300      	movs	r3, #0
 8004caa:	2100      	movs	r1, #0
 8004cac:	f7ff fe20 	bl	80048f0 <xTimerGenericCommand>
 8004cb0:	0003      	movs	r3, r0
 8004cb2:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d143      	bne.n	8004d42 <prvProcessReceivedCommands+0x16a>
 8004cba:	b672      	cpsid	i
 8004cbc:	46c0      	nop			@ (mov r8, r8)
 8004cbe:	e7fd      	b.n	8004cbc <prvProcessReceivedCommands+0xe4>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	2228      	movs	r2, #40	@ 0x28
 8004cc4:	5c9b      	ldrb	r3, [r3, r2]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	4393      	bics	r3, r2
 8004cca:	b2d9      	uxtb	r1, r3
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	2228      	movs	r2, #40	@ 0x28
 8004cd0:	5499      	strb	r1, [r3, r2]
					break;
 8004cd2:	e037      	b.n	8004d44 <prvProcessReceivedCommands+0x16c>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	2228      	movs	r2, #40	@ 0x28
 8004cd8:	5c9b      	ldrb	r3, [r3, r2]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	b2d9      	uxtb	r1, r3
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	2228      	movs	r2, #40	@ 0x28
 8004ce4:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ce6:	2308      	movs	r3, #8
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <prvProcessReceivedCommands+0x126>
 8004cf8:	b672      	cpsid	i
 8004cfa:	46c0      	nop			@ (mov r8, r8)
 8004cfc:	e7fd      	b.n	8004cfa <prvProcessReceivedCommands+0x122>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	18d1      	adds	r1, r2, r3
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	6a38      	ldr	r0, [r7, #32]
 8004d0c:	f7ff ff22 	bl	8004b54 <prvInsertTimerInActiveList>
					break;
 8004d10:	e018      	b.n	8004d44 <prvProcessReceivedCommands+0x16c>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	2228      	movs	r2, #40	@ 0x28
 8004d16:	5c9b      	ldrb	r3, [r3, r2]
 8004d18:	001a      	movs	r2, r3
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d104      	bne.n	8004d2a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	0018      	movs	r0, r3
 8004d24:	f000 faa4 	bl	8005270 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d28:	e00c      	b.n	8004d44 <prvProcessReceivedCommands+0x16c>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	2228      	movs	r2, #40	@ 0x28
 8004d2e:	5c9b      	ldrb	r3, [r3, r2]
 8004d30:	2201      	movs	r2, #1
 8004d32:	4393      	bics	r3, r2
 8004d34:	b2d9      	uxtb	r1, r3
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	2228      	movs	r2, #40	@ 0x28
 8004d3a:	5499      	strb	r1, [r3, r2]
					break;
 8004d3c:	e002      	b.n	8004d44 <prvProcessReceivedCommands+0x16c>

				default	:
					/* Don't expect to get here. */
					break;
 8004d3e:	46c0      	nop			@ (mov r8, r8)
 8004d40:	e000      	b.n	8004d44 <prvProcessReceivedCommands+0x16c>
					break;
 8004d42:	46c0      	nop			@ (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d44:	4b08      	ldr	r3, [pc, #32]	@ (8004d68 <prvProcessReceivedCommands+0x190>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2208      	movs	r2, #8
 8004d4a:	18b9      	adds	r1, r7, r2
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	0018      	movs	r0, r3
 8004d50:	f7fe fd07 	bl	8003762 <xQueueReceive>
 8004d54:	1e03      	subs	r3, r0, #0
 8004d56:	d000      	beq.n	8004d5a <prvProcessReceivedCommands+0x182>
 8004d58:	e742      	b.n	8004be0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004d5a:	46c0      	nop			@ (mov r8, r8)
 8004d5c:	46c0      	nop			@ (mov r8, r8)
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	b00b      	add	sp, #44	@ 0x2c
 8004d62:	bd90      	pop	{r4, r7, pc}
 8004d64:	0800558c 	.word	0x0800558c
 8004d68:	20000dd0 	.word	0x20000dd0

08004d6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d72:	e042      	b.n	8004dfa <prvSwitchTimerLists+0x8e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d74:	4b2a      	ldr	r3, [pc, #168]	@ (8004e20 <prvSwitchTimerLists+0xb4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d7e:	4b28      	ldr	r3, [pc, #160]	@ (8004e20 <prvSwitchTimerLists+0xb4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f7fe fab4 	bl	80032fa <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	0010      	movs	r0, r2
 8004d9a:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2228      	movs	r2, #40	@ 0x28
 8004da0:	5c9b      	ldrb	r3, [r3, r2]
 8004da2:	001a      	movs	r2, r3
 8004da4:	2304      	movs	r3, #4
 8004da6:	4013      	ands	r3, r2
 8004da8:	d027      	beq.n	8004dfa <prvSwitchTimerLists+0x8e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	18d3      	adds	r3, r2, r3
 8004db2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d90e      	bls.n	8004dda <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dc8:	4b15      	ldr	r3, [pc, #84]	@ (8004e20 <prvSwitchTimerLists+0xb4>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3304      	adds	r3, #4
 8004dd0:	0019      	movs	r1, r3
 8004dd2:	0010      	movs	r0, r2
 8004dd4:	f7fe fa5b 	bl	800328e <vListInsert>
 8004dd8:	e00f      	b.n	8004dfa <prvSwitchTimerLists+0x8e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	2300      	movs	r3, #0
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	2300      	movs	r3, #0
 8004de4:	2100      	movs	r1, #0
 8004de6:	f7ff fd83 	bl	80048f0 <xTimerGenericCommand>
 8004dea:	0003      	movs	r3, r0
 8004dec:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d102      	bne.n	8004dfa <prvSwitchTimerLists+0x8e>
 8004df4:	b672      	cpsid	i
 8004df6:	46c0      	nop			@ (mov r8, r8)
 8004df8:	e7fd      	b.n	8004df6 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004dfa:	4b09      	ldr	r3, [pc, #36]	@ (8004e20 <prvSwitchTimerLists+0xb4>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1b7      	bne.n	8004d74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e04:	4b06      	ldr	r3, [pc, #24]	@ (8004e20 <prvSwitchTimerLists+0xb4>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e0a:	4b06      	ldr	r3, [pc, #24]	@ (8004e24 <prvSwitchTimerLists+0xb8>)
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	4b04      	ldr	r3, [pc, #16]	@ (8004e20 <prvSwitchTimerLists+0xb4>)
 8004e10:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8004e12:	4b04      	ldr	r3, [pc, #16]	@ (8004e24 <prvSwitchTimerLists+0xb8>)
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	601a      	str	r2, [r3, #0]
}
 8004e18:	46c0      	nop			@ (mov r8, r8)
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	b006      	add	sp, #24
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	20000dc8 	.word	0x20000dc8
 8004e24:	20000dcc 	.word	0x20000dcc

08004e28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e2e:	f000 f8d7 	bl	8004fe0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e32:	4b16      	ldr	r3, [pc, #88]	@ (8004e8c <prvCheckForValidListAndQueue+0x64>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d123      	bne.n	8004e82 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e3a:	4b15      	ldr	r3, [pc, #84]	@ (8004e90 <prvCheckForValidListAndQueue+0x68>)
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	f7fe f9db 	bl	80031f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e42:	4b14      	ldr	r3, [pc, #80]	@ (8004e94 <prvCheckForValidListAndQueue+0x6c>)
 8004e44:	0018      	movs	r0, r3
 8004e46:	f7fe f9d7 	bl	80031f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e4a:	4b13      	ldr	r3, [pc, #76]	@ (8004e98 <prvCheckForValidListAndQueue+0x70>)
 8004e4c:	4a10      	ldr	r2, [pc, #64]	@ (8004e90 <prvCheckForValidListAndQueue+0x68>)
 8004e4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e50:	4b12      	ldr	r3, [pc, #72]	@ (8004e9c <prvCheckForValidListAndQueue+0x74>)
 8004e52:	4a10      	ldr	r2, [pc, #64]	@ (8004e94 <prvCheckForValidListAndQueue+0x6c>)
 8004e54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e56:	4b12      	ldr	r3, [pc, #72]	@ (8004ea0 <prvCheckForValidListAndQueue+0x78>)
 8004e58:	4a12      	ldr	r2, [pc, #72]	@ (8004ea4 <prvCheckForValidListAndQueue+0x7c>)
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	9100      	str	r1, [sp, #0]
 8004e5e:	2110      	movs	r1, #16
 8004e60:	200a      	movs	r0, #10
 8004e62:	f7fe fac7 	bl	80033f4 <xQueueGenericCreateStatic>
 8004e66:	0002      	movs	r2, r0
 8004e68:	4b08      	ldr	r3, [pc, #32]	@ (8004e8c <prvCheckForValidListAndQueue+0x64>)
 8004e6a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e6c:	4b07      	ldr	r3, [pc, #28]	@ (8004e8c <prvCheckForValidListAndQueue+0x64>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d006      	beq.n	8004e82 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e74:	4b05      	ldr	r3, [pc, #20]	@ (8004e8c <prvCheckForValidListAndQueue+0x64>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a0b      	ldr	r2, [pc, #44]	@ (8004ea8 <prvCheckForValidListAndQueue+0x80>)
 8004e7a:	0011      	movs	r1, r2
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f7fe fe45 	bl	8003b0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e82:	f000 f8bf 	bl	8005004 <vPortExitCritical>
}
 8004e86:	46c0      	nop			@ (mov r8, r8)
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	20000dd0 	.word	0x20000dd0
 8004e90:	20000da0 	.word	0x20000da0
 8004e94:	20000db4 	.word	0x20000db4
 8004e98:	20000dc8 	.word	0x20000dc8
 8004e9c:	20000dcc 	.word	0x20000dcc
 8004ea0:	20000e7c 	.word	0x20000e7c
 8004ea4:	20000ddc 	.word	0x20000ddc
 8004ea8:	08005520 	.word	0x08005520

08004eac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3b04      	subs	r3, #4
 8004ebc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2280      	movs	r2, #128	@ 0x80
 8004ec2:	0452      	lsls	r2, r2, #17
 8004ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3b04      	subs	r3, #4
 8004eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3b04      	subs	r3, #4
 8004ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ed8:	4a08      	ldr	r2, [pc, #32]	@ (8004efc <pxPortInitialiseStack+0x50>)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3b14      	subs	r3, #20
 8004ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3b20      	subs	r3, #32
 8004eee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
}
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	b004      	add	sp, #16
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	46c0      	nop			@ (mov r8, r8)
 8004efc:	08004f01 	.word	0x08004f01

08004f00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004f06:	2300      	movs	r3, #0
 8004f08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f0a:	4b08      	ldr	r3, [pc, #32]	@ (8004f2c <prvTaskExitError+0x2c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	d002      	beq.n	8004f18 <prvTaskExitError+0x18>
 8004f12:	b672      	cpsid	i
 8004f14:	46c0      	nop			@ (mov r8, r8)
 8004f16:	e7fd      	b.n	8004f14 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8004f18:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004f1a:	46c0      	nop			@ (mov r8, r8)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0fc      	beq.n	8004f1c <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f22:	46c0      	nop			@ (mov r8, r8)
 8004f24:	46c0      	nop			@ (mov r8, r8)
 8004f26:	46bd      	mov	sp, r7
 8004f28:	b002      	add	sp, #8
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	2000000c 	.word	0x2000000c

08004f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004f34:	46c0      	nop			@ (mov r8, r8)
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	0000      	movs	r0, r0
 8004f3c:	0000      	movs	r0, r0
	...

08004f40 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004f40:	4a0b      	ldr	r2, [pc, #44]	@ (8004f70 <pxCurrentTCBConst2>)
 8004f42:	6813      	ldr	r3, [r2, #0]
 8004f44:	6818      	ldr	r0, [r3, #0]
 8004f46:	3020      	adds	r0, #32
 8004f48:	f380 8809 	msr	PSP, r0
 8004f4c:	2002      	movs	r0, #2
 8004f4e:	f380 8814 	msr	CONTROL, r0
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004f58:	46ae      	mov	lr, r5
 8004f5a:	bc08      	pop	{r3}
 8004f5c:	bc04      	pop	{r2}
 8004f5e:	b662      	cpsie	i
 8004f60:	4718      	bx	r3
 8004f62:	46c0      	nop			@ (mov r8, r8)
 8004f64:	46c0      	nop			@ (mov r8, r8)
 8004f66:	46c0      	nop			@ (mov r8, r8)
 8004f68:	46c0      	nop			@ (mov r8, r8)
 8004f6a:	46c0      	nop			@ (mov r8, r8)
 8004f6c:	46c0      	nop			@ (mov r8, r8)
 8004f6e:	46c0      	nop			@ (mov r8, r8)

08004f70 <pxCurrentTCBConst2>:
 8004f70:	200008a0 	.word	0x200008a0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004f74:	46c0      	nop			@ (mov r8, r8)
 8004f76:	46c0      	nop			@ (mov r8, r8)

08004f78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8004fb8 <xPortStartScheduler+0x40>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb8 <xPortStartScheduler+0x40>)
 8004f82:	21ff      	movs	r1, #255	@ 0xff
 8004f84:	0409      	lsls	r1, r1, #16
 8004f86:	430a      	orrs	r2, r1
 8004f88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb8 <xPortStartScheduler+0x40>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb8 <xPortStartScheduler+0x40>)
 8004f90:	21ff      	movs	r1, #255	@ 0xff
 8004f92:	0609      	lsls	r1, r1, #24
 8004f94:	430a      	orrs	r2, r1
 8004f96:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f98:	f000 f898 	bl	80050cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f9c:	4b07      	ldr	r3, [pc, #28]	@ (8004fbc <xPortStartScheduler+0x44>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004fa2:	f7ff ffcd 	bl	8004f40 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004fa6:	f7ff f963 	bl	8004270 <vTaskSwitchContext>
	prvTaskExitError();
 8004faa:	f7ff ffa9 	bl	8004f00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	46c0      	nop			@ (mov r8, r8)
 8004fb8:	e000ed20 	.word	0xe000ed20
 8004fbc:	2000000c 	.word	0x2000000c

08004fc0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fc4:	4b05      	ldr	r3, [pc, #20]	@ (8004fdc <vPortYield+0x1c>)
 8004fc6:	2280      	movs	r2, #128	@ 0x80
 8004fc8:	0552      	lsls	r2, r2, #21
 8004fca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8004fcc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004fd0:	f3bf 8f6f 	isb	sy
}
 8004fd4:	46c0      	nop			@ (mov r8, r8)
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	46c0      	nop			@ (mov r8, r8)
 8004fdc:	e000ed04 	.word	0xe000ed04

08004fe0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8004fe4:	b672      	cpsid	i
	uxCriticalNesting++;
 8004fe6:	4b06      	ldr	r3, [pc, #24]	@ (8005000 <vPortEnterCritical+0x20>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	4b04      	ldr	r3, [pc, #16]	@ (8005000 <vPortEnterCritical+0x20>)
 8004fee:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004ff0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004ff4:	f3bf 8f6f 	isb	sy
}
 8004ff8:	46c0      	nop			@ (mov r8, r8)
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	46c0      	nop			@ (mov r8, r8)
 8005000:	2000000c 	.word	0x2000000c

08005004 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005008:	4b09      	ldr	r3, [pc, #36]	@ (8005030 <vPortExitCritical+0x2c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d102      	bne.n	8005016 <vPortExitCritical+0x12>
 8005010:	b672      	cpsid	i
 8005012:	46c0      	nop			@ (mov r8, r8)
 8005014:	e7fd      	b.n	8005012 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8005016:	4b06      	ldr	r3, [pc, #24]	@ (8005030 <vPortExitCritical+0x2c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	1e5a      	subs	r2, r3, #1
 800501c:	4b04      	ldr	r3, [pc, #16]	@ (8005030 <vPortExitCritical+0x2c>)
 800501e:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8005020:	4b03      	ldr	r3, [pc, #12]	@ (8005030 <vPortExitCritical+0x2c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d100      	bne.n	800502a <vPortExitCritical+0x26>
	{
		portENABLE_INTERRUPTS();
 8005028:	b662      	cpsie	i
	}
}
 800502a:	46c0      	nop			@ (mov r8, r8)
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	2000000c 	.word	0x2000000c

08005034 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005034:	f3ef 8010 	mrs	r0, PRIMASK
 8005038:	b672      	cpsid	i
 800503a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800503c:	46c0      	nop			@ (mov r8, r8)
 800503e:	0018      	movs	r0, r3

08005040 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005040:	f380 8810 	msr	PRIMASK, r0
 8005044:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8005046:	46c0      	nop			@ (mov r8, r8)
	...

08005050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005050:	f3ef 8009 	mrs	r0, PSP
 8005054:	4b0e      	ldr	r3, [pc, #56]	@ (8005090 <pxCurrentTCBConst>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	3820      	subs	r0, #32
 800505a:	6010      	str	r0, [r2, #0]
 800505c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800505e:	4644      	mov	r4, r8
 8005060:	464d      	mov	r5, r9
 8005062:	4656      	mov	r6, sl
 8005064:	465f      	mov	r7, fp
 8005066:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005068:	b508      	push	{r3, lr}
 800506a:	b672      	cpsid	i
 800506c:	f7ff f900 	bl	8004270 <vTaskSwitchContext>
 8005070:	b662      	cpsie	i
 8005072:	bc0c      	pop	{r2, r3}
 8005074:	6811      	ldr	r1, [r2, #0]
 8005076:	6808      	ldr	r0, [r1, #0]
 8005078:	3010      	adds	r0, #16
 800507a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800507c:	46a0      	mov	r8, r4
 800507e:	46a9      	mov	r9, r5
 8005080:	46b2      	mov	sl, r6
 8005082:	46bb      	mov	fp, r7
 8005084:	f380 8809 	msr	PSP, r0
 8005088:	3820      	subs	r0, #32
 800508a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800508c:	4718      	bx	r3
 800508e:	46c0      	nop			@ (mov r8, r8)

08005090 <pxCurrentTCBConst>:
 8005090:	200008a0 	.word	0x200008a0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005094:	46c0      	nop			@ (mov r8, r8)
 8005096:	46c0      	nop			@ (mov r8, r8)

08005098 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800509e:	f7ff ffc9 	bl	8005034 <ulSetInterruptMaskFromISR>
 80050a2:	0003      	movs	r3, r0
 80050a4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050a6:	f7ff f833 	bl	8004110 <xTaskIncrementTick>
 80050aa:	1e03      	subs	r3, r0, #0
 80050ac:	d003      	beq.n	80050b6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050ae:	4b06      	ldr	r3, [pc, #24]	@ (80050c8 <xPortSysTickHandler+0x30>)
 80050b0:	2280      	movs	r2, #128	@ 0x80
 80050b2:	0552      	lsls	r2, r2, #21
 80050b4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	0018      	movs	r0, r3
 80050ba:	f7ff ffc1 	bl	8005040 <vClearInterruptMaskFromISR>
}
 80050be:	46c0      	nop			@ (mov r8, r8)
 80050c0:	46bd      	mov	sp, r7
 80050c2:	b002      	add	sp, #8
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	46c0      	nop			@ (mov r8, r8)
 80050c8:	e000ed04 	.word	0xe000ed04

080050cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005100 <vPortSetupTimerInterrupt+0x34>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005104 <vPortSetupTimerInterrupt+0x38>)
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005108 <vPortSetupTimerInterrupt+0x3c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	22fa      	movs	r2, #250	@ 0xfa
 80050e2:	0091      	lsls	r1, r2, #2
 80050e4:	0018      	movs	r0, r3
 80050e6:	f7fb f80f 	bl	8000108 <__udivsi3>
 80050ea:	0003      	movs	r3, r0
 80050ec:	001a      	movs	r2, r3
 80050ee:	4b07      	ldr	r3, [pc, #28]	@ (800510c <vPortSetupTimerInterrupt+0x40>)
 80050f0:	3a01      	subs	r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80050f4:	4b02      	ldr	r3, [pc, #8]	@ (8005100 <vPortSetupTimerInterrupt+0x34>)
 80050f6:	2207      	movs	r2, #7
 80050f8:	601a      	str	r2, [r3, #0]
}
 80050fa:	46c0      	nop			@ (mov r8, r8)
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	e000e010 	.word	0xe000e010
 8005104:	e000e018 	.word	0xe000e018
 8005108:	20000000 	.word	0x20000000
 800510c:	e000e014 	.word	0xe000e014

08005110 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005118:	2300      	movs	r3, #0
 800511a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800511c:	f7fe ff52 	bl	8003fc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005120:	4b4d      	ldr	r3, [pc, #308]	@ (8005258 <pvPortMalloc+0x148>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005128:	f000 f8f2 	bl	8005310 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800512c:	4b4b      	ldr	r3, [pc, #300]	@ (800525c <pvPortMalloc+0x14c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	4013      	ands	r3, r2
 8005134:	d000      	beq.n	8005138 <pvPortMalloc+0x28>
 8005136:	e080      	b.n	800523a <pvPortMalloc+0x12a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d013      	beq.n	8005166 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800513e:	2208      	movs	r2, #8
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	189b      	adds	r3, r3, r2
 8005144:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2207      	movs	r2, #7
 800514a:	4013      	ands	r3, r2
 800514c:	d00b      	beq.n	8005166 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2207      	movs	r2, #7
 8005152:	4393      	bics	r3, r2
 8005154:	3308      	adds	r3, #8
 8005156:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2207      	movs	r2, #7
 800515c:	4013      	ands	r3, r2
 800515e:	d002      	beq.n	8005166 <pvPortMalloc+0x56>
 8005160:	b672      	cpsid	i
 8005162:	46c0      	nop			@ (mov r8, r8)
 8005164:	e7fd      	b.n	8005162 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d066      	beq.n	800523a <pvPortMalloc+0x12a>
 800516c:	4b3c      	ldr	r3, [pc, #240]	@ (8005260 <pvPortMalloc+0x150>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	429a      	cmp	r2, r3
 8005174:	d861      	bhi.n	800523a <pvPortMalloc+0x12a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005176:	4b3b      	ldr	r3, [pc, #236]	@ (8005264 <pvPortMalloc+0x154>)
 8005178:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800517a:	4b3a      	ldr	r3, [pc, #232]	@ (8005264 <pvPortMalloc+0x154>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005180:	e004      	b.n	800518c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	429a      	cmp	r2, r3
 8005194:	d903      	bls.n	800519e <pvPortMalloc+0x8e>
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1f1      	bne.n	8005182 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800519e:	4b2e      	ldr	r3, [pc, #184]	@ (8005258 <pvPortMalloc+0x148>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d048      	beq.n	800523a <pvPortMalloc+0x12a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2208      	movs	r2, #8
 80051ae:	189b      	adds	r3, r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	1ad2      	subs	r2, r2, r3
 80051c2:	2308      	movs	r3, #8
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d917      	bls.n	80051fa <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	18d3      	adds	r3, r2, r3
 80051d0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2207      	movs	r2, #7
 80051d6:	4013      	ands	r3, r2
 80051d8:	d002      	beq.n	80051e0 <pvPortMalloc+0xd0>
 80051da:	b672      	cpsid	i
 80051dc:	46c0      	nop			@ (mov r8, r8)
 80051de:	e7fd      	b.n	80051dc <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	1ad2      	subs	r2, r2, r3
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	0018      	movs	r0, r3
 80051f6:	f000 f8eb 	bl	80053d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051fa:	4b19      	ldr	r3, [pc, #100]	@ (8005260 <pvPortMalloc+0x150>)
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	1ad2      	subs	r2, r2, r3
 8005204:	4b16      	ldr	r3, [pc, #88]	@ (8005260 <pvPortMalloc+0x150>)
 8005206:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005208:	4b15      	ldr	r3, [pc, #84]	@ (8005260 <pvPortMalloc+0x150>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	4b16      	ldr	r3, [pc, #88]	@ (8005268 <pvPortMalloc+0x158>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d203      	bcs.n	800521c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005214:	4b12      	ldr	r3, [pc, #72]	@ (8005260 <pvPortMalloc+0x150>)
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4b13      	ldr	r3, [pc, #76]	@ (8005268 <pvPortMalloc+0x158>)
 800521a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	4b0e      	ldr	r3, [pc, #56]	@ (800525c <pvPortMalloc+0x14c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	431a      	orrs	r2, r3
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005230:	4b0e      	ldr	r3, [pc, #56]	@ (800526c <pvPortMalloc+0x15c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	4b0d      	ldr	r3, [pc, #52]	@ (800526c <pvPortMalloc+0x15c>)
 8005238:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800523a:	f7fe fecf 	bl	8003fdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2207      	movs	r2, #7
 8005242:	4013      	ands	r3, r2
 8005244:	d002      	beq.n	800524c <pvPortMalloc+0x13c>
 8005246:	b672      	cpsid	i
 8005248:	46c0      	nop			@ (mov r8, r8)
 800524a:	e7fd      	b.n	8005248 <pvPortMalloc+0x138>
	return pvReturn;
 800524c:	68fb      	ldr	r3, [r7, #12]
}
 800524e:	0018      	movs	r0, r3
 8005250:	46bd      	mov	sp, r7
 8005252:	b006      	add	sp, #24
 8005254:	bd80      	pop	{r7, pc}
 8005256:	46c0      	nop			@ (mov r8, r8)
 8005258:	20001ad4 	.word	0x20001ad4
 800525c:	20001ae8 	.word	0x20001ae8
 8005260:	20001ad8 	.word	0x20001ad8
 8005264:	20001acc 	.word	0x20001acc
 8005268:	20001adc 	.word	0x20001adc
 800526c:	20001ae0 	.word	0x20001ae0

08005270 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d03c      	beq.n	80052fc <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005282:	2308      	movs	r3, #8
 8005284:	425b      	negs	r3, r3
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	18d3      	adds	r3, r2, r3
 800528a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	4b1b      	ldr	r3, [pc, #108]	@ (8005304 <vPortFree+0x94>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4013      	ands	r3, r2
 800529a:	d102      	bne.n	80052a2 <vPortFree+0x32>
 800529c:	b672      	cpsid	i
 800529e:	46c0      	nop			@ (mov r8, r8)
 80052a0:	e7fd      	b.n	800529e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <vPortFree+0x40>
 80052aa:	b672      	cpsid	i
 80052ac:	46c0      	nop			@ (mov r8, r8)
 80052ae:	e7fd      	b.n	80052ac <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	4b13      	ldr	r3, [pc, #76]	@ (8005304 <vPortFree+0x94>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4013      	ands	r3, r2
 80052ba:	d01f      	beq.n	80052fc <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d11b      	bne.n	80052fc <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005304 <vPortFree+0x94>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	43db      	mvns	r3, r3
 80052ce:	401a      	ands	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052d4:	f7fe fe76 	bl	8003fc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005308 <vPortFree+0x98>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	18d2      	adds	r2, r2, r3
 80052e2:	4b09      	ldr	r3, [pc, #36]	@ (8005308 <vPortFree+0x98>)
 80052e4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	0018      	movs	r0, r3
 80052ea:	f000 f871 	bl	80053d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80052ee:	4b07      	ldr	r3, [pc, #28]	@ (800530c <vPortFree+0x9c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	4b05      	ldr	r3, [pc, #20]	@ (800530c <vPortFree+0x9c>)
 80052f6:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 80052f8:	f7fe fe70 	bl	8003fdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052fc:	46c0      	nop			@ (mov r8, r8)
 80052fe:	46bd      	mov	sp, r7
 8005300:	b004      	add	sp, #16
 8005302:	bd80      	pop	{r7, pc}
 8005304:	20001ae8 	.word	0x20001ae8
 8005308:	20001ad8 	.word	0x20001ad8
 800530c:	20001ae4 	.word	0x20001ae4

08005310 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005316:	23c0      	movs	r3, #192	@ 0xc0
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800531c:	4b26      	ldr	r3, [pc, #152]	@ (80053b8 <prvHeapInit+0xa8>)
 800531e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2207      	movs	r2, #7
 8005324:	4013      	ands	r3, r2
 8005326:	d00c      	beq.n	8005342 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3307      	adds	r3, #7
 800532c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2207      	movs	r2, #7
 8005332:	4393      	bics	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	1ad2      	subs	r2, r2, r3
 800533c:	4b1e      	ldr	r3, [pc, #120]	@ (80053b8 <prvHeapInit+0xa8>)
 800533e:	18d3      	adds	r3, r2, r3
 8005340:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005346:	4b1d      	ldr	r3, [pc, #116]	@ (80053bc <prvHeapInit+0xac>)
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800534c:	4b1b      	ldr	r3, [pc, #108]	@ (80053bc <prvHeapInit+0xac>)
 800534e:	2200      	movs	r2, #0
 8005350:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	18d3      	adds	r3, r2, r3
 8005358:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800535a:	2208      	movs	r2, #8
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	1a9b      	subs	r3, r3, r2
 8005360:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2207      	movs	r2, #7
 8005366:	4393      	bics	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4b14      	ldr	r3, [pc, #80]	@ (80053c0 <prvHeapInit+0xb0>)
 800536e:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005370:	4b13      	ldr	r3, [pc, #76]	@ (80053c0 <prvHeapInit+0xb0>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2200      	movs	r2, #0
 8005376:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005378:	4b11      	ldr	r3, [pc, #68]	@ (80053c0 <prvHeapInit+0xb0>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	1ad2      	subs	r2, r2, r3
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800538e:	4b0c      	ldr	r3, [pc, #48]	@ (80053c0 <prvHeapInit+0xb0>)
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	4b0a      	ldr	r3, [pc, #40]	@ (80053c4 <prvHeapInit+0xb4>)
 800539c:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	4b09      	ldr	r3, [pc, #36]	@ (80053c8 <prvHeapInit+0xb8>)
 80053a4:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053a6:	4b09      	ldr	r3, [pc, #36]	@ (80053cc <prvHeapInit+0xbc>)
 80053a8:	2280      	movs	r2, #128	@ 0x80
 80053aa:	0612      	lsls	r2, r2, #24
 80053ac:	601a      	str	r2, [r3, #0]
}
 80053ae:	46c0      	nop			@ (mov r8, r8)
 80053b0:	46bd      	mov	sp, r7
 80053b2:	b004      	add	sp, #16
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	46c0      	nop			@ (mov r8, r8)
 80053b8:	20000ecc 	.word	0x20000ecc
 80053bc:	20001acc 	.word	0x20001acc
 80053c0:	20001ad4 	.word	0x20001ad4
 80053c4:	20001adc 	.word	0x20001adc
 80053c8:	20001ad8 	.word	0x20001ad8
 80053cc:	20001ae8 	.word	0x20001ae8

080053d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053d8:	4b27      	ldr	r3, [pc, #156]	@ (8005478 <prvInsertBlockIntoFreeList+0xa8>)
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	e002      	b.n	80053e4 <prvInsertBlockIntoFreeList+0x14>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d8f7      	bhi.n	80053de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	18d3      	adds	r3, r2, r3
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d108      	bne.n	8005412 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	18d2      	adds	r2, r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	18d2      	adds	r2, r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d118      	bne.n	8005458 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4b14      	ldr	r3, [pc, #80]	@ (800547c <prvInsertBlockIntoFreeList+0xac>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d00d      	beq.n	800544e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	18d2      	adds	r2, r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	e008      	b.n	8005460 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800544e:	4b0b      	ldr	r3, [pc, #44]	@ (800547c <prvInsertBlockIntoFreeList+0xac>)
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	e003      	b.n	8005460 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	429a      	cmp	r2, r3
 8005466:	d002      	beq.n	800546e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	46bd      	mov	sp, r7
 8005472:	b004      	add	sp, #16
 8005474:	bd80      	pop	{r7, pc}
 8005476:	46c0      	nop			@ (mov r8, r8)
 8005478:	20001acc 	.word	0x20001acc
 800547c:	20001ad4 	.word	0x20001ad4

08005480 <memset>:
 8005480:	0003      	movs	r3, r0
 8005482:	1882      	adds	r2, r0, r2
 8005484:	4293      	cmp	r3, r2
 8005486:	d100      	bne.n	800548a <memset+0xa>
 8005488:	4770      	bx	lr
 800548a:	7019      	strb	r1, [r3, #0]
 800548c:	3301      	adds	r3, #1
 800548e:	e7f9      	b.n	8005484 <memset+0x4>

08005490 <__libc_init_array>:
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	2600      	movs	r6, #0
 8005494:	4c0c      	ldr	r4, [pc, #48]	@ (80054c8 <__libc_init_array+0x38>)
 8005496:	4d0d      	ldr	r5, [pc, #52]	@ (80054cc <__libc_init_array+0x3c>)
 8005498:	1b64      	subs	r4, r4, r5
 800549a:	10a4      	asrs	r4, r4, #2
 800549c:	42a6      	cmp	r6, r4
 800549e:	d109      	bne.n	80054b4 <__libc_init_array+0x24>
 80054a0:	2600      	movs	r6, #0
 80054a2:	f000 f823 	bl	80054ec <_init>
 80054a6:	4c0a      	ldr	r4, [pc, #40]	@ (80054d0 <__libc_init_array+0x40>)
 80054a8:	4d0a      	ldr	r5, [pc, #40]	@ (80054d4 <__libc_init_array+0x44>)
 80054aa:	1b64      	subs	r4, r4, r5
 80054ac:	10a4      	asrs	r4, r4, #2
 80054ae:	42a6      	cmp	r6, r4
 80054b0:	d105      	bne.n	80054be <__libc_init_array+0x2e>
 80054b2:	bd70      	pop	{r4, r5, r6, pc}
 80054b4:	00b3      	lsls	r3, r6, #2
 80054b6:	58eb      	ldr	r3, [r5, r3]
 80054b8:	4798      	blx	r3
 80054ba:	3601      	adds	r6, #1
 80054bc:	e7ee      	b.n	800549c <__libc_init_array+0xc>
 80054be:	00b3      	lsls	r3, r6, #2
 80054c0:	58eb      	ldr	r3, [r5, r3]
 80054c2:	4798      	blx	r3
 80054c4:	3601      	adds	r6, #1
 80054c6:	e7f2      	b.n	80054ae <__libc_init_array+0x1e>
 80054c8:	080055b4 	.word	0x080055b4
 80054cc:	080055b4 	.word	0x080055b4
 80054d0:	080055b8 	.word	0x080055b8
 80054d4:	080055b4 	.word	0x080055b4

080054d8 <memcpy>:
 80054d8:	2300      	movs	r3, #0
 80054da:	b510      	push	{r4, lr}
 80054dc:	429a      	cmp	r2, r3
 80054de:	d100      	bne.n	80054e2 <memcpy+0xa>
 80054e0:	bd10      	pop	{r4, pc}
 80054e2:	5ccc      	ldrb	r4, [r1, r3]
 80054e4:	54c4      	strb	r4, [r0, r3]
 80054e6:	3301      	adds	r3, #1
 80054e8:	e7f8      	b.n	80054dc <memcpy+0x4>
	...

080054ec <_init>:
 80054ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ee:	46c0      	nop			@ (mov r8, r8)
 80054f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f2:	bc08      	pop	{r3}
 80054f4:	469e      	mov	lr, r3
 80054f6:	4770      	bx	lr

080054f8 <_fini>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	46c0      	nop			@ (mov r8, r8)
 80054fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fe:	bc08      	pop	{r3}
 8005500:	469e      	mov	lr, r3
 8005502:	4770      	bx	lr
