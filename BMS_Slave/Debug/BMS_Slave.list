
BMS_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008824  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  080088e4  080088e4  000098e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ab8  08008ab8  0000a010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008ab8  08008ab8  0000a010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008ab8  08008ab8  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ab8  08008ab8  00009ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008abc  08008abc  00009abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08008ac0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b60  20000010  08008ad0  0000a010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b70  08008ad0  0000ab70  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016502  00000000  00000000  0000a038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033a7  00000000  00000000  0002053a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  000238e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001066  00000000  00000000  00024e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000038f3  00000000  00000000  00025eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017070  00000000  00000000  000297a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c79c0  00000000  00000000  00040811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001081d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ffc  00000000  00000000  00108214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0010d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080088cc 	.word	0x080088cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080088cc 	.word	0x080088cc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f001 fdc3 	bl	8001db4 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f001 fc55 	bl	8001ae4 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f001 f844 	bl	80012d0 <__aeabi_dsub>
 8000248:	f001 fc4c 	bl	8001ae4 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	@ 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_fdiv>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4646      	mov	r6, r8
 8000260:	464f      	mov	r7, r9
 8000262:	46d6      	mov	lr, sl
 8000264:	0245      	lsls	r5, r0, #9
 8000266:	b5c0      	push	{r6, r7, lr}
 8000268:	0fc3      	lsrs	r3, r0, #31
 800026a:	0047      	lsls	r7, r0, #1
 800026c:	4698      	mov	r8, r3
 800026e:	1c0e      	adds	r6, r1, #0
 8000270:	0a6d      	lsrs	r5, r5, #9
 8000272:	0e3f      	lsrs	r7, r7, #24
 8000274:	d05b      	beq.n	800032e <__aeabi_fdiv+0xd2>
 8000276:	2fff      	cmp	r7, #255	@ 0xff
 8000278:	d021      	beq.n	80002be <__aeabi_fdiv+0x62>
 800027a:	2380      	movs	r3, #128	@ 0x80
 800027c:	00ed      	lsls	r5, r5, #3
 800027e:	04db      	lsls	r3, r3, #19
 8000280:	431d      	orrs	r5, r3
 8000282:	2300      	movs	r3, #0
 8000284:	4699      	mov	r9, r3
 8000286:	469a      	mov	sl, r3
 8000288:	3f7f      	subs	r7, #127	@ 0x7f
 800028a:	0274      	lsls	r4, r6, #9
 800028c:	0073      	lsls	r3, r6, #1
 800028e:	0a64      	lsrs	r4, r4, #9
 8000290:	0e1b      	lsrs	r3, r3, #24
 8000292:	0ff6      	lsrs	r6, r6, #31
 8000294:	2b00      	cmp	r3, #0
 8000296:	d020      	beq.n	80002da <__aeabi_fdiv+0x7e>
 8000298:	2bff      	cmp	r3, #255	@ 0xff
 800029a:	d043      	beq.n	8000324 <__aeabi_fdiv+0xc8>
 800029c:	2280      	movs	r2, #128	@ 0x80
 800029e:	2000      	movs	r0, #0
 80002a0:	00e4      	lsls	r4, r4, #3
 80002a2:	04d2      	lsls	r2, r2, #19
 80002a4:	4314      	orrs	r4, r2
 80002a6:	3b7f      	subs	r3, #127	@ 0x7f
 80002a8:	4642      	mov	r2, r8
 80002aa:	1aff      	subs	r7, r7, r3
 80002ac:	464b      	mov	r3, r9
 80002ae:	4072      	eors	r2, r6
 80002b0:	2b0f      	cmp	r3, #15
 80002b2:	d900      	bls.n	80002b6 <__aeabi_fdiv+0x5a>
 80002b4:	e09d      	b.n	80003f2 <__aeabi_fdiv+0x196>
 80002b6:	4971      	ldr	r1, [pc, #452]	@ (800047c <__aeabi_fdiv+0x220>)
 80002b8:	009b      	lsls	r3, r3, #2
 80002ba:	58cb      	ldr	r3, [r1, r3]
 80002bc:	469f      	mov	pc, r3
 80002be:	2d00      	cmp	r5, #0
 80002c0:	d15a      	bne.n	8000378 <__aeabi_fdiv+0x11c>
 80002c2:	2308      	movs	r3, #8
 80002c4:	4699      	mov	r9, r3
 80002c6:	3b06      	subs	r3, #6
 80002c8:	0274      	lsls	r4, r6, #9
 80002ca:	469a      	mov	sl, r3
 80002cc:	0073      	lsls	r3, r6, #1
 80002ce:	27ff      	movs	r7, #255	@ 0xff
 80002d0:	0a64      	lsrs	r4, r4, #9
 80002d2:	0e1b      	lsrs	r3, r3, #24
 80002d4:	0ff6      	lsrs	r6, r6, #31
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d1de      	bne.n	8000298 <__aeabi_fdiv+0x3c>
 80002da:	2c00      	cmp	r4, #0
 80002dc:	d13b      	bne.n	8000356 <__aeabi_fdiv+0xfa>
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4649      	mov	r1, r9
 80002e4:	4072      	eors	r2, r6
 80002e6:	4319      	orrs	r1, r3
 80002e8:	290e      	cmp	r1, #14
 80002ea:	d818      	bhi.n	800031e <__aeabi_fdiv+0xc2>
 80002ec:	4864      	ldr	r0, [pc, #400]	@ (8000480 <__aeabi_fdiv+0x224>)
 80002ee:	0089      	lsls	r1, r1, #2
 80002f0:	5841      	ldr	r1, [r0, r1]
 80002f2:	468f      	mov	pc, r1
 80002f4:	4653      	mov	r3, sl
 80002f6:	2b02      	cmp	r3, #2
 80002f8:	d100      	bne.n	80002fc <__aeabi_fdiv+0xa0>
 80002fa:	e0b8      	b.n	800046e <__aeabi_fdiv+0x212>
 80002fc:	2b03      	cmp	r3, #3
 80002fe:	d06e      	beq.n	80003de <__aeabi_fdiv+0x182>
 8000300:	4642      	mov	r2, r8
 8000302:	002c      	movs	r4, r5
 8000304:	2b01      	cmp	r3, #1
 8000306:	d140      	bne.n	800038a <__aeabi_fdiv+0x12e>
 8000308:	2000      	movs	r0, #0
 800030a:	2400      	movs	r4, #0
 800030c:	05c0      	lsls	r0, r0, #23
 800030e:	4320      	orrs	r0, r4
 8000310:	07d2      	lsls	r2, r2, #31
 8000312:	4310      	orrs	r0, r2
 8000314:	bce0      	pop	{r5, r6, r7}
 8000316:	46ba      	mov	sl, r7
 8000318:	46b1      	mov	r9, r6
 800031a:	46a8      	mov	r8, r5
 800031c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800031e:	20ff      	movs	r0, #255	@ 0xff
 8000320:	2400      	movs	r4, #0
 8000322:	e7f3      	b.n	800030c <__aeabi_fdiv+0xb0>
 8000324:	2c00      	cmp	r4, #0
 8000326:	d120      	bne.n	800036a <__aeabi_fdiv+0x10e>
 8000328:	2302      	movs	r3, #2
 800032a:	3fff      	subs	r7, #255	@ 0xff
 800032c:	e7d8      	b.n	80002e0 <__aeabi_fdiv+0x84>
 800032e:	2d00      	cmp	r5, #0
 8000330:	d105      	bne.n	800033e <__aeabi_fdiv+0xe2>
 8000332:	2304      	movs	r3, #4
 8000334:	4699      	mov	r9, r3
 8000336:	3b03      	subs	r3, #3
 8000338:	2700      	movs	r7, #0
 800033a:	469a      	mov	sl, r3
 800033c:	e7a5      	b.n	800028a <__aeabi_fdiv+0x2e>
 800033e:	0028      	movs	r0, r5
 8000340:	f001 fd42 	bl	8001dc8 <__clzsi2>
 8000344:	2776      	movs	r7, #118	@ 0x76
 8000346:	1f43      	subs	r3, r0, #5
 8000348:	409d      	lsls	r5, r3
 800034a:	2300      	movs	r3, #0
 800034c:	427f      	negs	r7, r7
 800034e:	4699      	mov	r9, r3
 8000350:	469a      	mov	sl, r3
 8000352:	1a3f      	subs	r7, r7, r0
 8000354:	e799      	b.n	800028a <__aeabi_fdiv+0x2e>
 8000356:	0020      	movs	r0, r4
 8000358:	f001 fd36 	bl	8001dc8 <__clzsi2>
 800035c:	1f43      	subs	r3, r0, #5
 800035e:	409c      	lsls	r4, r3
 8000360:	2376      	movs	r3, #118	@ 0x76
 8000362:	425b      	negs	r3, r3
 8000364:	1a1b      	subs	r3, r3, r0
 8000366:	2000      	movs	r0, #0
 8000368:	e79e      	b.n	80002a8 <__aeabi_fdiv+0x4c>
 800036a:	2303      	movs	r3, #3
 800036c:	464a      	mov	r2, r9
 800036e:	431a      	orrs	r2, r3
 8000370:	4691      	mov	r9, r2
 8000372:	2003      	movs	r0, #3
 8000374:	33fc      	adds	r3, #252	@ 0xfc
 8000376:	e797      	b.n	80002a8 <__aeabi_fdiv+0x4c>
 8000378:	230c      	movs	r3, #12
 800037a:	4699      	mov	r9, r3
 800037c:	3b09      	subs	r3, #9
 800037e:	27ff      	movs	r7, #255	@ 0xff
 8000380:	469a      	mov	sl, r3
 8000382:	e782      	b.n	800028a <__aeabi_fdiv+0x2e>
 8000384:	2803      	cmp	r0, #3
 8000386:	d02c      	beq.n	80003e2 <__aeabi_fdiv+0x186>
 8000388:	0032      	movs	r2, r6
 800038a:	0038      	movs	r0, r7
 800038c:	307f      	adds	r0, #127	@ 0x7f
 800038e:	2800      	cmp	r0, #0
 8000390:	dd47      	ble.n	8000422 <__aeabi_fdiv+0x1c6>
 8000392:	0763      	lsls	r3, r4, #29
 8000394:	d004      	beq.n	80003a0 <__aeabi_fdiv+0x144>
 8000396:	230f      	movs	r3, #15
 8000398:	4023      	ands	r3, r4
 800039a:	2b04      	cmp	r3, #4
 800039c:	d000      	beq.n	80003a0 <__aeabi_fdiv+0x144>
 800039e:	3404      	adds	r4, #4
 80003a0:	0123      	lsls	r3, r4, #4
 80003a2:	d503      	bpl.n	80003ac <__aeabi_fdiv+0x150>
 80003a4:	0038      	movs	r0, r7
 80003a6:	4b37      	ldr	r3, [pc, #220]	@ (8000484 <__aeabi_fdiv+0x228>)
 80003a8:	3080      	adds	r0, #128	@ 0x80
 80003aa:	401c      	ands	r4, r3
 80003ac:	28fe      	cmp	r0, #254	@ 0xfe
 80003ae:	dcb6      	bgt.n	800031e <__aeabi_fdiv+0xc2>
 80003b0:	01a4      	lsls	r4, r4, #6
 80003b2:	0a64      	lsrs	r4, r4, #9
 80003b4:	b2c0      	uxtb	r0, r0
 80003b6:	e7a9      	b.n	800030c <__aeabi_fdiv+0xb0>
 80003b8:	2480      	movs	r4, #128	@ 0x80
 80003ba:	2200      	movs	r2, #0
 80003bc:	20ff      	movs	r0, #255	@ 0xff
 80003be:	03e4      	lsls	r4, r4, #15
 80003c0:	e7a4      	b.n	800030c <__aeabi_fdiv+0xb0>
 80003c2:	2380      	movs	r3, #128	@ 0x80
 80003c4:	03db      	lsls	r3, r3, #15
 80003c6:	421d      	tst	r5, r3
 80003c8:	d001      	beq.n	80003ce <__aeabi_fdiv+0x172>
 80003ca:	421c      	tst	r4, r3
 80003cc:	d00b      	beq.n	80003e6 <__aeabi_fdiv+0x18a>
 80003ce:	2480      	movs	r4, #128	@ 0x80
 80003d0:	03e4      	lsls	r4, r4, #15
 80003d2:	432c      	orrs	r4, r5
 80003d4:	0264      	lsls	r4, r4, #9
 80003d6:	4642      	mov	r2, r8
 80003d8:	20ff      	movs	r0, #255	@ 0xff
 80003da:	0a64      	lsrs	r4, r4, #9
 80003dc:	e796      	b.n	800030c <__aeabi_fdiv+0xb0>
 80003de:	4646      	mov	r6, r8
 80003e0:	002c      	movs	r4, r5
 80003e2:	2380      	movs	r3, #128	@ 0x80
 80003e4:	03db      	lsls	r3, r3, #15
 80003e6:	431c      	orrs	r4, r3
 80003e8:	0264      	lsls	r4, r4, #9
 80003ea:	0032      	movs	r2, r6
 80003ec:	20ff      	movs	r0, #255	@ 0xff
 80003ee:	0a64      	lsrs	r4, r4, #9
 80003f0:	e78c      	b.n	800030c <__aeabi_fdiv+0xb0>
 80003f2:	016d      	lsls	r5, r5, #5
 80003f4:	0160      	lsls	r0, r4, #5
 80003f6:	4285      	cmp	r5, r0
 80003f8:	d22d      	bcs.n	8000456 <__aeabi_fdiv+0x1fa>
 80003fa:	231b      	movs	r3, #27
 80003fc:	2400      	movs	r4, #0
 80003fe:	3f01      	subs	r7, #1
 8000400:	2601      	movs	r6, #1
 8000402:	0029      	movs	r1, r5
 8000404:	0064      	lsls	r4, r4, #1
 8000406:	006d      	lsls	r5, r5, #1
 8000408:	2900      	cmp	r1, #0
 800040a:	db01      	blt.n	8000410 <__aeabi_fdiv+0x1b4>
 800040c:	4285      	cmp	r5, r0
 800040e:	d301      	bcc.n	8000414 <__aeabi_fdiv+0x1b8>
 8000410:	1a2d      	subs	r5, r5, r0
 8000412:	4334      	orrs	r4, r6
 8000414:	3b01      	subs	r3, #1
 8000416:	2b00      	cmp	r3, #0
 8000418:	d1f3      	bne.n	8000402 <__aeabi_fdiv+0x1a6>
 800041a:	1e6b      	subs	r3, r5, #1
 800041c:	419d      	sbcs	r5, r3
 800041e:	432c      	orrs	r4, r5
 8000420:	e7b3      	b.n	800038a <__aeabi_fdiv+0x12e>
 8000422:	2301      	movs	r3, #1
 8000424:	1a1b      	subs	r3, r3, r0
 8000426:	2b1b      	cmp	r3, #27
 8000428:	dd00      	ble.n	800042c <__aeabi_fdiv+0x1d0>
 800042a:	e76d      	b.n	8000308 <__aeabi_fdiv+0xac>
 800042c:	0021      	movs	r1, r4
 800042e:	379e      	adds	r7, #158	@ 0x9e
 8000430:	40d9      	lsrs	r1, r3
 8000432:	40bc      	lsls	r4, r7
 8000434:	000b      	movs	r3, r1
 8000436:	1e61      	subs	r1, r4, #1
 8000438:	418c      	sbcs	r4, r1
 800043a:	4323      	orrs	r3, r4
 800043c:	0759      	lsls	r1, r3, #29
 800043e:	d004      	beq.n	800044a <__aeabi_fdiv+0x1ee>
 8000440:	210f      	movs	r1, #15
 8000442:	4019      	ands	r1, r3
 8000444:	2904      	cmp	r1, #4
 8000446:	d000      	beq.n	800044a <__aeabi_fdiv+0x1ee>
 8000448:	3304      	adds	r3, #4
 800044a:	0159      	lsls	r1, r3, #5
 800044c:	d413      	bmi.n	8000476 <__aeabi_fdiv+0x21a>
 800044e:	019b      	lsls	r3, r3, #6
 8000450:	2000      	movs	r0, #0
 8000452:	0a5c      	lsrs	r4, r3, #9
 8000454:	e75a      	b.n	800030c <__aeabi_fdiv+0xb0>
 8000456:	231a      	movs	r3, #26
 8000458:	2401      	movs	r4, #1
 800045a:	1a2d      	subs	r5, r5, r0
 800045c:	e7d0      	b.n	8000400 <__aeabi_fdiv+0x1a4>
 800045e:	1e98      	subs	r0, r3, #2
 8000460:	4243      	negs	r3, r0
 8000462:	4158      	adcs	r0, r3
 8000464:	4240      	negs	r0, r0
 8000466:	0032      	movs	r2, r6
 8000468:	2400      	movs	r4, #0
 800046a:	b2c0      	uxtb	r0, r0
 800046c:	e74e      	b.n	800030c <__aeabi_fdiv+0xb0>
 800046e:	4642      	mov	r2, r8
 8000470:	20ff      	movs	r0, #255	@ 0xff
 8000472:	2400      	movs	r4, #0
 8000474:	e74a      	b.n	800030c <__aeabi_fdiv+0xb0>
 8000476:	2001      	movs	r0, #1
 8000478:	2400      	movs	r4, #0
 800047a:	e747      	b.n	800030c <__aeabi_fdiv+0xb0>
 800047c:	08008928 	.word	0x08008928
 8000480:	08008968 	.word	0x08008968
 8000484:	f7ffffff 	.word	0xf7ffffff

08000488 <__aeabi_ui2f>:
 8000488:	b510      	push	{r4, lr}
 800048a:	1e04      	subs	r4, r0, #0
 800048c:	d00d      	beq.n	80004aa <__aeabi_ui2f+0x22>
 800048e:	f001 fc9b 	bl	8001dc8 <__clzsi2>
 8000492:	239e      	movs	r3, #158	@ 0x9e
 8000494:	1a1b      	subs	r3, r3, r0
 8000496:	2b96      	cmp	r3, #150	@ 0x96
 8000498:	dc0c      	bgt.n	80004b4 <__aeabi_ui2f+0x2c>
 800049a:	2808      	cmp	r0, #8
 800049c:	d034      	beq.n	8000508 <__aeabi_ui2f+0x80>
 800049e:	3808      	subs	r0, #8
 80004a0:	4084      	lsls	r4, r0
 80004a2:	0264      	lsls	r4, r4, #9
 80004a4:	0a64      	lsrs	r4, r4, #9
 80004a6:	b2d8      	uxtb	r0, r3
 80004a8:	e001      	b.n	80004ae <__aeabi_ui2f+0x26>
 80004aa:	2000      	movs	r0, #0
 80004ac:	2400      	movs	r4, #0
 80004ae:	05c0      	lsls	r0, r0, #23
 80004b0:	4320      	orrs	r0, r4
 80004b2:	bd10      	pop	{r4, pc}
 80004b4:	2b99      	cmp	r3, #153	@ 0x99
 80004b6:	dc13      	bgt.n	80004e0 <__aeabi_ui2f+0x58>
 80004b8:	1f42      	subs	r2, r0, #5
 80004ba:	4094      	lsls	r4, r2
 80004bc:	4a14      	ldr	r2, [pc, #80]	@ (8000510 <__aeabi_ui2f+0x88>)
 80004be:	4022      	ands	r2, r4
 80004c0:	0761      	lsls	r1, r4, #29
 80004c2:	d01c      	beq.n	80004fe <__aeabi_ui2f+0x76>
 80004c4:	210f      	movs	r1, #15
 80004c6:	4021      	ands	r1, r4
 80004c8:	2904      	cmp	r1, #4
 80004ca:	d018      	beq.n	80004fe <__aeabi_ui2f+0x76>
 80004cc:	3204      	adds	r2, #4
 80004ce:	08d4      	lsrs	r4, r2, #3
 80004d0:	0152      	lsls	r2, r2, #5
 80004d2:	d515      	bpl.n	8000500 <__aeabi_ui2f+0x78>
 80004d4:	239f      	movs	r3, #159	@ 0x9f
 80004d6:	0264      	lsls	r4, r4, #9
 80004d8:	1a18      	subs	r0, r3, r0
 80004da:	0a64      	lsrs	r4, r4, #9
 80004dc:	b2c0      	uxtb	r0, r0
 80004de:	e7e6      	b.n	80004ae <__aeabi_ui2f+0x26>
 80004e0:	0002      	movs	r2, r0
 80004e2:	0021      	movs	r1, r4
 80004e4:	321b      	adds	r2, #27
 80004e6:	4091      	lsls	r1, r2
 80004e8:	000a      	movs	r2, r1
 80004ea:	1e51      	subs	r1, r2, #1
 80004ec:	418a      	sbcs	r2, r1
 80004ee:	2105      	movs	r1, #5
 80004f0:	1a09      	subs	r1, r1, r0
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	4314      	orrs	r4, r2
 80004f6:	4a06      	ldr	r2, [pc, #24]	@ (8000510 <__aeabi_ui2f+0x88>)
 80004f8:	4022      	ands	r2, r4
 80004fa:	0761      	lsls	r1, r4, #29
 80004fc:	d1e2      	bne.n	80004c4 <__aeabi_ui2f+0x3c>
 80004fe:	08d4      	lsrs	r4, r2, #3
 8000500:	0264      	lsls	r4, r4, #9
 8000502:	0a64      	lsrs	r4, r4, #9
 8000504:	b2d8      	uxtb	r0, r3
 8000506:	e7d2      	b.n	80004ae <__aeabi_ui2f+0x26>
 8000508:	0264      	lsls	r4, r4, #9
 800050a:	0a64      	lsrs	r4, r4, #9
 800050c:	308e      	adds	r0, #142	@ 0x8e
 800050e:	e7ce      	b.n	80004ae <__aeabi_ui2f+0x26>
 8000510:	fbffffff 	.word	0xfbffffff

08000514 <__aeabi_dadd>:
 8000514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000516:	464f      	mov	r7, r9
 8000518:	4646      	mov	r6, r8
 800051a:	46d6      	mov	lr, sl
 800051c:	b5c0      	push	{r6, r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	9000      	str	r0, [sp, #0]
 8000522:	9101      	str	r1, [sp, #4]
 8000524:	030e      	lsls	r6, r1, #12
 8000526:	004c      	lsls	r4, r1, #1
 8000528:	0fcd      	lsrs	r5, r1, #31
 800052a:	0a71      	lsrs	r1, r6, #9
 800052c:	9e00      	ldr	r6, [sp, #0]
 800052e:	005f      	lsls	r7, r3, #1
 8000530:	0f76      	lsrs	r6, r6, #29
 8000532:	430e      	orrs	r6, r1
 8000534:	9900      	ldr	r1, [sp, #0]
 8000536:	9200      	str	r2, [sp, #0]
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	00c9      	lsls	r1, r1, #3
 800053c:	4689      	mov	r9, r1
 800053e:	0319      	lsls	r1, r3, #12
 8000540:	0d7b      	lsrs	r3, r7, #21
 8000542:	4698      	mov	r8, r3
 8000544:	9b01      	ldr	r3, [sp, #4]
 8000546:	0a49      	lsrs	r1, r1, #9
 8000548:	0fdb      	lsrs	r3, r3, #31
 800054a:	469c      	mov	ip, r3
 800054c:	9b00      	ldr	r3, [sp, #0]
 800054e:	9a00      	ldr	r2, [sp, #0]
 8000550:	0f5b      	lsrs	r3, r3, #29
 8000552:	430b      	orrs	r3, r1
 8000554:	4641      	mov	r1, r8
 8000556:	0d64      	lsrs	r4, r4, #21
 8000558:	00d2      	lsls	r2, r2, #3
 800055a:	1a61      	subs	r1, r4, r1
 800055c:	4565      	cmp	r5, ip
 800055e:	d100      	bne.n	8000562 <__aeabi_dadd+0x4e>
 8000560:	e0a6      	b.n	80006b0 <__aeabi_dadd+0x19c>
 8000562:	2900      	cmp	r1, #0
 8000564:	dd72      	ble.n	800064c <__aeabi_dadd+0x138>
 8000566:	4647      	mov	r7, r8
 8000568:	2f00      	cmp	r7, #0
 800056a:	d100      	bne.n	800056e <__aeabi_dadd+0x5a>
 800056c:	e0dd      	b.n	800072a <__aeabi_dadd+0x216>
 800056e:	4fcc      	ldr	r7, [pc, #816]	@ (80008a0 <__aeabi_dadd+0x38c>)
 8000570:	42bc      	cmp	r4, r7
 8000572:	d100      	bne.n	8000576 <__aeabi_dadd+0x62>
 8000574:	e19a      	b.n	80008ac <__aeabi_dadd+0x398>
 8000576:	2701      	movs	r7, #1
 8000578:	2938      	cmp	r1, #56	@ 0x38
 800057a:	dc17      	bgt.n	80005ac <__aeabi_dadd+0x98>
 800057c:	2780      	movs	r7, #128	@ 0x80
 800057e:	043f      	lsls	r7, r7, #16
 8000580:	433b      	orrs	r3, r7
 8000582:	291f      	cmp	r1, #31
 8000584:	dd00      	ble.n	8000588 <__aeabi_dadd+0x74>
 8000586:	e1dd      	b.n	8000944 <__aeabi_dadd+0x430>
 8000588:	2720      	movs	r7, #32
 800058a:	1a78      	subs	r0, r7, r1
 800058c:	001f      	movs	r7, r3
 800058e:	4087      	lsls	r7, r0
 8000590:	46ba      	mov	sl, r7
 8000592:	0017      	movs	r7, r2
 8000594:	40cf      	lsrs	r7, r1
 8000596:	4684      	mov	ip, r0
 8000598:	0038      	movs	r0, r7
 800059a:	4657      	mov	r7, sl
 800059c:	4307      	orrs	r7, r0
 800059e:	4660      	mov	r0, ip
 80005a0:	4082      	lsls	r2, r0
 80005a2:	40cb      	lsrs	r3, r1
 80005a4:	1e50      	subs	r0, r2, #1
 80005a6:	4182      	sbcs	r2, r0
 80005a8:	1af6      	subs	r6, r6, r3
 80005aa:	4317      	orrs	r7, r2
 80005ac:	464b      	mov	r3, r9
 80005ae:	1bdf      	subs	r7, r3, r7
 80005b0:	45b9      	cmp	r9, r7
 80005b2:	4180      	sbcs	r0, r0
 80005b4:	4240      	negs	r0, r0
 80005b6:	1a36      	subs	r6, r6, r0
 80005b8:	0233      	lsls	r3, r6, #8
 80005ba:	d400      	bmi.n	80005be <__aeabi_dadd+0xaa>
 80005bc:	e0ff      	b.n	80007be <__aeabi_dadd+0x2aa>
 80005be:	0276      	lsls	r6, r6, #9
 80005c0:	0a76      	lsrs	r6, r6, #9
 80005c2:	2e00      	cmp	r6, #0
 80005c4:	d100      	bne.n	80005c8 <__aeabi_dadd+0xb4>
 80005c6:	e13c      	b.n	8000842 <__aeabi_dadd+0x32e>
 80005c8:	0030      	movs	r0, r6
 80005ca:	f001 fbfd 	bl	8001dc8 <__clzsi2>
 80005ce:	0003      	movs	r3, r0
 80005d0:	3b08      	subs	r3, #8
 80005d2:	2120      	movs	r1, #32
 80005d4:	0038      	movs	r0, r7
 80005d6:	1aca      	subs	r2, r1, r3
 80005d8:	40d0      	lsrs	r0, r2
 80005da:	409e      	lsls	r6, r3
 80005dc:	0002      	movs	r2, r0
 80005de:	409f      	lsls	r7, r3
 80005e0:	4332      	orrs	r2, r6
 80005e2:	429c      	cmp	r4, r3
 80005e4:	dd00      	ble.n	80005e8 <__aeabi_dadd+0xd4>
 80005e6:	e1a6      	b.n	8000936 <__aeabi_dadd+0x422>
 80005e8:	1b18      	subs	r0, r3, r4
 80005ea:	3001      	adds	r0, #1
 80005ec:	1a09      	subs	r1, r1, r0
 80005ee:	003e      	movs	r6, r7
 80005f0:	408f      	lsls	r7, r1
 80005f2:	40c6      	lsrs	r6, r0
 80005f4:	1e7b      	subs	r3, r7, #1
 80005f6:	419f      	sbcs	r7, r3
 80005f8:	0013      	movs	r3, r2
 80005fa:	408b      	lsls	r3, r1
 80005fc:	4337      	orrs	r7, r6
 80005fe:	431f      	orrs	r7, r3
 8000600:	40c2      	lsrs	r2, r0
 8000602:	003b      	movs	r3, r7
 8000604:	0016      	movs	r6, r2
 8000606:	2400      	movs	r4, #0
 8000608:	4313      	orrs	r3, r2
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0xfa>
 800060c:	e1df      	b.n	80009ce <__aeabi_dadd+0x4ba>
 800060e:	077b      	lsls	r3, r7, #29
 8000610:	d100      	bne.n	8000614 <__aeabi_dadd+0x100>
 8000612:	e332      	b.n	8000c7a <__aeabi_dadd+0x766>
 8000614:	230f      	movs	r3, #15
 8000616:	003a      	movs	r2, r7
 8000618:	403b      	ands	r3, r7
 800061a:	2b04      	cmp	r3, #4
 800061c:	d004      	beq.n	8000628 <__aeabi_dadd+0x114>
 800061e:	1d3a      	adds	r2, r7, #4
 8000620:	42ba      	cmp	r2, r7
 8000622:	41bf      	sbcs	r7, r7
 8000624:	427f      	negs	r7, r7
 8000626:	19f6      	adds	r6, r6, r7
 8000628:	0233      	lsls	r3, r6, #8
 800062a:	d400      	bmi.n	800062e <__aeabi_dadd+0x11a>
 800062c:	e323      	b.n	8000c76 <__aeabi_dadd+0x762>
 800062e:	4b9c      	ldr	r3, [pc, #624]	@ (80008a0 <__aeabi_dadd+0x38c>)
 8000630:	3401      	adds	r4, #1
 8000632:	429c      	cmp	r4, r3
 8000634:	d100      	bne.n	8000638 <__aeabi_dadd+0x124>
 8000636:	e0b4      	b.n	80007a2 <__aeabi_dadd+0x28e>
 8000638:	4b9a      	ldr	r3, [pc, #616]	@ (80008a4 <__aeabi_dadd+0x390>)
 800063a:	0564      	lsls	r4, r4, #21
 800063c:	401e      	ands	r6, r3
 800063e:	0d64      	lsrs	r4, r4, #21
 8000640:	0777      	lsls	r7, r6, #29
 8000642:	08d2      	lsrs	r2, r2, #3
 8000644:	0276      	lsls	r6, r6, #9
 8000646:	4317      	orrs	r7, r2
 8000648:	0b36      	lsrs	r6, r6, #12
 800064a:	e0ac      	b.n	80007a6 <__aeabi_dadd+0x292>
 800064c:	2900      	cmp	r1, #0
 800064e:	d100      	bne.n	8000652 <__aeabi_dadd+0x13e>
 8000650:	e07e      	b.n	8000750 <__aeabi_dadd+0x23c>
 8000652:	4641      	mov	r1, r8
 8000654:	1b09      	subs	r1, r1, r4
 8000656:	2c00      	cmp	r4, #0
 8000658:	d000      	beq.n	800065c <__aeabi_dadd+0x148>
 800065a:	e160      	b.n	800091e <__aeabi_dadd+0x40a>
 800065c:	0034      	movs	r4, r6
 800065e:	4648      	mov	r0, r9
 8000660:	4304      	orrs	r4, r0
 8000662:	d100      	bne.n	8000666 <__aeabi_dadd+0x152>
 8000664:	e1c9      	b.n	80009fa <__aeabi_dadd+0x4e6>
 8000666:	1e4c      	subs	r4, r1, #1
 8000668:	2901      	cmp	r1, #1
 800066a:	d100      	bne.n	800066e <__aeabi_dadd+0x15a>
 800066c:	e22e      	b.n	8000acc <__aeabi_dadd+0x5b8>
 800066e:	4d8c      	ldr	r5, [pc, #560]	@ (80008a0 <__aeabi_dadd+0x38c>)
 8000670:	42a9      	cmp	r1, r5
 8000672:	d100      	bne.n	8000676 <__aeabi_dadd+0x162>
 8000674:	e224      	b.n	8000ac0 <__aeabi_dadd+0x5ac>
 8000676:	2701      	movs	r7, #1
 8000678:	2c38      	cmp	r4, #56	@ 0x38
 800067a:	dc11      	bgt.n	80006a0 <__aeabi_dadd+0x18c>
 800067c:	0021      	movs	r1, r4
 800067e:	291f      	cmp	r1, #31
 8000680:	dd00      	ble.n	8000684 <__aeabi_dadd+0x170>
 8000682:	e20b      	b.n	8000a9c <__aeabi_dadd+0x588>
 8000684:	2420      	movs	r4, #32
 8000686:	0037      	movs	r7, r6
 8000688:	4648      	mov	r0, r9
 800068a:	1a64      	subs	r4, r4, r1
 800068c:	40a7      	lsls	r7, r4
 800068e:	40c8      	lsrs	r0, r1
 8000690:	4307      	orrs	r7, r0
 8000692:	4648      	mov	r0, r9
 8000694:	40a0      	lsls	r0, r4
 8000696:	40ce      	lsrs	r6, r1
 8000698:	1e44      	subs	r4, r0, #1
 800069a:	41a0      	sbcs	r0, r4
 800069c:	1b9b      	subs	r3, r3, r6
 800069e:	4307      	orrs	r7, r0
 80006a0:	1bd7      	subs	r7, r2, r7
 80006a2:	42ba      	cmp	r2, r7
 80006a4:	4192      	sbcs	r2, r2
 80006a6:	4252      	negs	r2, r2
 80006a8:	4665      	mov	r5, ip
 80006aa:	4644      	mov	r4, r8
 80006ac:	1a9e      	subs	r6, r3, r2
 80006ae:	e783      	b.n	80005b8 <__aeabi_dadd+0xa4>
 80006b0:	2900      	cmp	r1, #0
 80006b2:	dc00      	bgt.n	80006b6 <__aeabi_dadd+0x1a2>
 80006b4:	e09c      	b.n	80007f0 <__aeabi_dadd+0x2dc>
 80006b6:	4647      	mov	r7, r8
 80006b8:	2f00      	cmp	r7, #0
 80006ba:	d167      	bne.n	800078c <__aeabi_dadd+0x278>
 80006bc:	001f      	movs	r7, r3
 80006be:	4317      	orrs	r7, r2
 80006c0:	d100      	bne.n	80006c4 <__aeabi_dadd+0x1b0>
 80006c2:	e0e4      	b.n	800088e <__aeabi_dadd+0x37a>
 80006c4:	1e48      	subs	r0, r1, #1
 80006c6:	2901      	cmp	r1, #1
 80006c8:	d100      	bne.n	80006cc <__aeabi_dadd+0x1b8>
 80006ca:	e19b      	b.n	8000a04 <__aeabi_dadd+0x4f0>
 80006cc:	4f74      	ldr	r7, [pc, #464]	@ (80008a0 <__aeabi_dadd+0x38c>)
 80006ce:	42b9      	cmp	r1, r7
 80006d0:	d100      	bne.n	80006d4 <__aeabi_dadd+0x1c0>
 80006d2:	e0eb      	b.n	80008ac <__aeabi_dadd+0x398>
 80006d4:	2701      	movs	r7, #1
 80006d6:	0001      	movs	r1, r0
 80006d8:	2838      	cmp	r0, #56	@ 0x38
 80006da:	dc11      	bgt.n	8000700 <__aeabi_dadd+0x1ec>
 80006dc:	291f      	cmp	r1, #31
 80006de:	dd00      	ble.n	80006e2 <__aeabi_dadd+0x1ce>
 80006e0:	e1c7      	b.n	8000a72 <__aeabi_dadd+0x55e>
 80006e2:	2720      	movs	r7, #32
 80006e4:	1a78      	subs	r0, r7, r1
 80006e6:	001f      	movs	r7, r3
 80006e8:	4684      	mov	ip, r0
 80006ea:	4087      	lsls	r7, r0
 80006ec:	0010      	movs	r0, r2
 80006ee:	40c8      	lsrs	r0, r1
 80006f0:	4307      	orrs	r7, r0
 80006f2:	4660      	mov	r0, ip
 80006f4:	4082      	lsls	r2, r0
 80006f6:	40cb      	lsrs	r3, r1
 80006f8:	1e50      	subs	r0, r2, #1
 80006fa:	4182      	sbcs	r2, r0
 80006fc:	18f6      	adds	r6, r6, r3
 80006fe:	4317      	orrs	r7, r2
 8000700:	444f      	add	r7, r9
 8000702:	454f      	cmp	r7, r9
 8000704:	4180      	sbcs	r0, r0
 8000706:	4240      	negs	r0, r0
 8000708:	1836      	adds	r6, r6, r0
 800070a:	0233      	lsls	r3, r6, #8
 800070c:	d557      	bpl.n	80007be <__aeabi_dadd+0x2aa>
 800070e:	4b64      	ldr	r3, [pc, #400]	@ (80008a0 <__aeabi_dadd+0x38c>)
 8000710:	3401      	adds	r4, #1
 8000712:	429c      	cmp	r4, r3
 8000714:	d045      	beq.n	80007a2 <__aeabi_dadd+0x28e>
 8000716:	2101      	movs	r1, #1
 8000718:	4b62      	ldr	r3, [pc, #392]	@ (80008a4 <__aeabi_dadd+0x390>)
 800071a:	087a      	lsrs	r2, r7, #1
 800071c:	401e      	ands	r6, r3
 800071e:	4039      	ands	r1, r7
 8000720:	430a      	orrs	r2, r1
 8000722:	07f7      	lsls	r7, r6, #31
 8000724:	4317      	orrs	r7, r2
 8000726:	0876      	lsrs	r6, r6, #1
 8000728:	e771      	b.n	800060e <__aeabi_dadd+0xfa>
 800072a:	001f      	movs	r7, r3
 800072c:	4317      	orrs	r7, r2
 800072e:	d100      	bne.n	8000732 <__aeabi_dadd+0x21e>
 8000730:	e0ad      	b.n	800088e <__aeabi_dadd+0x37a>
 8000732:	1e4f      	subs	r7, r1, #1
 8000734:	46bc      	mov	ip, r7
 8000736:	2901      	cmp	r1, #1
 8000738:	d100      	bne.n	800073c <__aeabi_dadd+0x228>
 800073a:	e182      	b.n	8000a42 <__aeabi_dadd+0x52e>
 800073c:	4f58      	ldr	r7, [pc, #352]	@ (80008a0 <__aeabi_dadd+0x38c>)
 800073e:	42b9      	cmp	r1, r7
 8000740:	d100      	bne.n	8000744 <__aeabi_dadd+0x230>
 8000742:	e190      	b.n	8000a66 <__aeabi_dadd+0x552>
 8000744:	4661      	mov	r1, ip
 8000746:	2701      	movs	r7, #1
 8000748:	2938      	cmp	r1, #56	@ 0x38
 800074a:	dd00      	ble.n	800074e <__aeabi_dadd+0x23a>
 800074c:	e72e      	b.n	80005ac <__aeabi_dadd+0x98>
 800074e:	e718      	b.n	8000582 <__aeabi_dadd+0x6e>
 8000750:	4f55      	ldr	r7, [pc, #340]	@ (80008a8 <__aeabi_dadd+0x394>)
 8000752:	1c61      	adds	r1, r4, #1
 8000754:	4239      	tst	r1, r7
 8000756:	d000      	beq.n	800075a <__aeabi_dadd+0x246>
 8000758:	e0d0      	b.n	80008fc <__aeabi_dadd+0x3e8>
 800075a:	0031      	movs	r1, r6
 800075c:	4648      	mov	r0, r9
 800075e:	001f      	movs	r7, r3
 8000760:	4301      	orrs	r1, r0
 8000762:	4317      	orrs	r7, r2
 8000764:	2c00      	cmp	r4, #0
 8000766:	d000      	beq.n	800076a <__aeabi_dadd+0x256>
 8000768:	e13d      	b.n	80009e6 <__aeabi_dadd+0x4d2>
 800076a:	2900      	cmp	r1, #0
 800076c:	d100      	bne.n	8000770 <__aeabi_dadd+0x25c>
 800076e:	e1bc      	b.n	8000aea <__aeabi_dadd+0x5d6>
 8000770:	2f00      	cmp	r7, #0
 8000772:	d000      	beq.n	8000776 <__aeabi_dadd+0x262>
 8000774:	e1bf      	b.n	8000af6 <__aeabi_dadd+0x5e2>
 8000776:	464b      	mov	r3, r9
 8000778:	2100      	movs	r1, #0
 800077a:	08d8      	lsrs	r0, r3, #3
 800077c:	0777      	lsls	r7, r6, #29
 800077e:	4307      	orrs	r7, r0
 8000780:	08f0      	lsrs	r0, r6, #3
 8000782:	0306      	lsls	r6, r0, #12
 8000784:	054c      	lsls	r4, r1, #21
 8000786:	0b36      	lsrs	r6, r6, #12
 8000788:	0d64      	lsrs	r4, r4, #21
 800078a:	e00c      	b.n	80007a6 <__aeabi_dadd+0x292>
 800078c:	4f44      	ldr	r7, [pc, #272]	@ (80008a0 <__aeabi_dadd+0x38c>)
 800078e:	42bc      	cmp	r4, r7
 8000790:	d100      	bne.n	8000794 <__aeabi_dadd+0x280>
 8000792:	e08b      	b.n	80008ac <__aeabi_dadd+0x398>
 8000794:	2701      	movs	r7, #1
 8000796:	2938      	cmp	r1, #56	@ 0x38
 8000798:	dcb2      	bgt.n	8000700 <__aeabi_dadd+0x1ec>
 800079a:	2780      	movs	r7, #128	@ 0x80
 800079c:	043f      	lsls	r7, r7, #16
 800079e:	433b      	orrs	r3, r7
 80007a0:	e79c      	b.n	80006dc <__aeabi_dadd+0x1c8>
 80007a2:	2600      	movs	r6, #0
 80007a4:	2700      	movs	r7, #0
 80007a6:	0524      	lsls	r4, r4, #20
 80007a8:	4334      	orrs	r4, r6
 80007aa:	07ed      	lsls	r5, r5, #31
 80007ac:	432c      	orrs	r4, r5
 80007ae:	0038      	movs	r0, r7
 80007b0:	0021      	movs	r1, r4
 80007b2:	b002      	add	sp, #8
 80007b4:	bce0      	pop	{r5, r6, r7}
 80007b6:	46ba      	mov	sl, r7
 80007b8:	46b1      	mov	r9, r6
 80007ba:	46a8      	mov	r8, r5
 80007bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007be:	077b      	lsls	r3, r7, #29
 80007c0:	d004      	beq.n	80007cc <__aeabi_dadd+0x2b8>
 80007c2:	230f      	movs	r3, #15
 80007c4:	403b      	ands	r3, r7
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	d000      	beq.n	80007cc <__aeabi_dadd+0x2b8>
 80007ca:	e728      	b.n	800061e <__aeabi_dadd+0x10a>
 80007cc:	08f8      	lsrs	r0, r7, #3
 80007ce:	4b34      	ldr	r3, [pc, #208]	@ (80008a0 <__aeabi_dadd+0x38c>)
 80007d0:	0777      	lsls	r7, r6, #29
 80007d2:	4307      	orrs	r7, r0
 80007d4:	08f0      	lsrs	r0, r6, #3
 80007d6:	429c      	cmp	r4, r3
 80007d8:	d000      	beq.n	80007dc <__aeabi_dadd+0x2c8>
 80007da:	e24a      	b.n	8000c72 <__aeabi_dadd+0x75e>
 80007dc:	003b      	movs	r3, r7
 80007de:	4303      	orrs	r3, r0
 80007e0:	d059      	beq.n	8000896 <__aeabi_dadd+0x382>
 80007e2:	2680      	movs	r6, #128	@ 0x80
 80007e4:	0336      	lsls	r6, r6, #12
 80007e6:	4306      	orrs	r6, r0
 80007e8:	0336      	lsls	r6, r6, #12
 80007ea:	4c2d      	ldr	r4, [pc, #180]	@ (80008a0 <__aeabi_dadd+0x38c>)
 80007ec:	0b36      	lsrs	r6, r6, #12
 80007ee:	e7da      	b.n	80007a6 <__aeabi_dadd+0x292>
 80007f0:	2900      	cmp	r1, #0
 80007f2:	d061      	beq.n	80008b8 <__aeabi_dadd+0x3a4>
 80007f4:	4641      	mov	r1, r8
 80007f6:	1b09      	subs	r1, r1, r4
 80007f8:	2c00      	cmp	r4, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_dadd+0x2ea>
 80007fc:	e0b9      	b.n	8000972 <__aeabi_dadd+0x45e>
 80007fe:	4c28      	ldr	r4, [pc, #160]	@ (80008a0 <__aeabi_dadd+0x38c>)
 8000800:	45a0      	cmp	r8, r4
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x2f2>
 8000804:	e1a5      	b.n	8000b52 <__aeabi_dadd+0x63e>
 8000806:	2701      	movs	r7, #1
 8000808:	2938      	cmp	r1, #56	@ 0x38
 800080a:	dc13      	bgt.n	8000834 <__aeabi_dadd+0x320>
 800080c:	2480      	movs	r4, #128	@ 0x80
 800080e:	0424      	lsls	r4, r4, #16
 8000810:	4326      	orrs	r6, r4
 8000812:	291f      	cmp	r1, #31
 8000814:	dd00      	ble.n	8000818 <__aeabi_dadd+0x304>
 8000816:	e1c8      	b.n	8000baa <__aeabi_dadd+0x696>
 8000818:	2420      	movs	r4, #32
 800081a:	0037      	movs	r7, r6
 800081c:	4648      	mov	r0, r9
 800081e:	1a64      	subs	r4, r4, r1
 8000820:	40a7      	lsls	r7, r4
 8000822:	40c8      	lsrs	r0, r1
 8000824:	4307      	orrs	r7, r0
 8000826:	4648      	mov	r0, r9
 8000828:	40a0      	lsls	r0, r4
 800082a:	40ce      	lsrs	r6, r1
 800082c:	1e44      	subs	r4, r0, #1
 800082e:	41a0      	sbcs	r0, r4
 8000830:	199b      	adds	r3, r3, r6
 8000832:	4307      	orrs	r7, r0
 8000834:	18bf      	adds	r7, r7, r2
 8000836:	4297      	cmp	r7, r2
 8000838:	4192      	sbcs	r2, r2
 800083a:	4252      	negs	r2, r2
 800083c:	4644      	mov	r4, r8
 800083e:	18d6      	adds	r6, r2, r3
 8000840:	e763      	b.n	800070a <__aeabi_dadd+0x1f6>
 8000842:	0038      	movs	r0, r7
 8000844:	f001 fac0 	bl	8001dc8 <__clzsi2>
 8000848:	0003      	movs	r3, r0
 800084a:	3318      	adds	r3, #24
 800084c:	2b1f      	cmp	r3, #31
 800084e:	dc00      	bgt.n	8000852 <__aeabi_dadd+0x33e>
 8000850:	e6bf      	b.n	80005d2 <__aeabi_dadd+0xbe>
 8000852:	003a      	movs	r2, r7
 8000854:	3808      	subs	r0, #8
 8000856:	4082      	lsls	r2, r0
 8000858:	429c      	cmp	r4, r3
 800085a:	dd00      	ble.n	800085e <__aeabi_dadd+0x34a>
 800085c:	e083      	b.n	8000966 <__aeabi_dadd+0x452>
 800085e:	1b1b      	subs	r3, r3, r4
 8000860:	1c58      	adds	r0, r3, #1
 8000862:	281f      	cmp	r0, #31
 8000864:	dc00      	bgt.n	8000868 <__aeabi_dadd+0x354>
 8000866:	e1b4      	b.n	8000bd2 <__aeabi_dadd+0x6be>
 8000868:	0017      	movs	r7, r2
 800086a:	3b1f      	subs	r3, #31
 800086c:	40df      	lsrs	r7, r3
 800086e:	2820      	cmp	r0, #32
 8000870:	d005      	beq.n	800087e <__aeabi_dadd+0x36a>
 8000872:	2340      	movs	r3, #64	@ 0x40
 8000874:	1a1b      	subs	r3, r3, r0
 8000876:	409a      	lsls	r2, r3
 8000878:	1e53      	subs	r3, r2, #1
 800087a:	419a      	sbcs	r2, r3
 800087c:	4317      	orrs	r7, r2
 800087e:	2400      	movs	r4, #0
 8000880:	2f00      	cmp	r7, #0
 8000882:	d00a      	beq.n	800089a <__aeabi_dadd+0x386>
 8000884:	077b      	lsls	r3, r7, #29
 8000886:	d000      	beq.n	800088a <__aeabi_dadd+0x376>
 8000888:	e6c4      	b.n	8000614 <__aeabi_dadd+0x100>
 800088a:	0026      	movs	r6, r4
 800088c:	e79e      	b.n	80007cc <__aeabi_dadd+0x2b8>
 800088e:	464b      	mov	r3, r9
 8000890:	000c      	movs	r4, r1
 8000892:	08d8      	lsrs	r0, r3, #3
 8000894:	e79b      	b.n	80007ce <__aeabi_dadd+0x2ba>
 8000896:	2700      	movs	r7, #0
 8000898:	4c01      	ldr	r4, [pc, #4]	@ (80008a0 <__aeabi_dadd+0x38c>)
 800089a:	2600      	movs	r6, #0
 800089c:	e783      	b.n	80007a6 <__aeabi_dadd+0x292>
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	000007ff 	.word	0x000007ff
 80008a4:	ff7fffff 	.word	0xff7fffff
 80008a8:	000007fe 	.word	0x000007fe
 80008ac:	464b      	mov	r3, r9
 80008ae:	0777      	lsls	r7, r6, #29
 80008b0:	08d8      	lsrs	r0, r3, #3
 80008b2:	4307      	orrs	r7, r0
 80008b4:	08f0      	lsrs	r0, r6, #3
 80008b6:	e791      	b.n	80007dc <__aeabi_dadd+0x2c8>
 80008b8:	4fcd      	ldr	r7, [pc, #820]	@ (8000bf0 <__aeabi_dadd+0x6dc>)
 80008ba:	1c61      	adds	r1, r4, #1
 80008bc:	4239      	tst	r1, r7
 80008be:	d16b      	bne.n	8000998 <__aeabi_dadd+0x484>
 80008c0:	0031      	movs	r1, r6
 80008c2:	4648      	mov	r0, r9
 80008c4:	4301      	orrs	r1, r0
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d000      	beq.n	80008cc <__aeabi_dadd+0x3b8>
 80008ca:	e14b      	b.n	8000b64 <__aeabi_dadd+0x650>
 80008cc:	001f      	movs	r7, r3
 80008ce:	4317      	orrs	r7, r2
 80008d0:	2900      	cmp	r1, #0
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dadd+0x3c2>
 80008d4:	e181      	b.n	8000bda <__aeabi_dadd+0x6c6>
 80008d6:	2f00      	cmp	r7, #0
 80008d8:	d100      	bne.n	80008dc <__aeabi_dadd+0x3c8>
 80008da:	e74c      	b.n	8000776 <__aeabi_dadd+0x262>
 80008dc:	444a      	add	r2, r9
 80008de:	454a      	cmp	r2, r9
 80008e0:	4180      	sbcs	r0, r0
 80008e2:	18f6      	adds	r6, r6, r3
 80008e4:	4240      	negs	r0, r0
 80008e6:	1836      	adds	r6, r6, r0
 80008e8:	0233      	lsls	r3, r6, #8
 80008ea:	d500      	bpl.n	80008ee <__aeabi_dadd+0x3da>
 80008ec:	e1b0      	b.n	8000c50 <__aeabi_dadd+0x73c>
 80008ee:	0017      	movs	r7, r2
 80008f0:	4691      	mov	r9, r2
 80008f2:	4337      	orrs	r7, r6
 80008f4:	d000      	beq.n	80008f8 <__aeabi_dadd+0x3e4>
 80008f6:	e73e      	b.n	8000776 <__aeabi_dadd+0x262>
 80008f8:	2600      	movs	r6, #0
 80008fa:	e754      	b.n	80007a6 <__aeabi_dadd+0x292>
 80008fc:	4649      	mov	r1, r9
 80008fe:	1a89      	subs	r1, r1, r2
 8000900:	4688      	mov	r8, r1
 8000902:	45c1      	cmp	r9, r8
 8000904:	41bf      	sbcs	r7, r7
 8000906:	1af1      	subs	r1, r6, r3
 8000908:	427f      	negs	r7, r7
 800090a:	1bc9      	subs	r1, r1, r7
 800090c:	020f      	lsls	r7, r1, #8
 800090e:	d461      	bmi.n	80009d4 <__aeabi_dadd+0x4c0>
 8000910:	4647      	mov	r7, r8
 8000912:	430f      	orrs	r7, r1
 8000914:	d100      	bne.n	8000918 <__aeabi_dadd+0x404>
 8000916:	e0bd      	b.n	8000a94 <__aeabi_dadd+0x580>
 8000918:	000e      	movs	r6, r1
 800091a:	4647      	mov	r7, r8
 800091c:	e651      	b.n	80005c2 <__aeabi_dadd+0xae>
 800091e:	4cb5      	ldr	r4, [pc, #724]	@ (8000bf4 <__aeabi_dadd+0x6e0>)
 8000920:	45a0      	cmp	r8, r4
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x412>
 8000924:	e100      	b.n	8000b28 <__aeabi_dadd+0x614>
 8000926:	2701      	movs	r7, #1
 8000928:	2938      	cmp	r1, #56	@ 0x38
 800092a:	dd00      	ble.n	800092e <__aeabi_dadd+0x41a>
 800092c:	e6b8      	b.n	80006a0 <__aeabi_dadd+0x18c>
 800092e:	2480      	movs	r4, #128	@ 0x80
 8000930:	0424      	lsls	r4, r4, #16
 8000932:	4326      	orrs	r6, r4
 8000934:	e6a3      	b.n	800067e <__aeabi_dadd+0x16a>
 8000936:	4eb0      	ldr	r6, [pc, #704]	@ (8000bf8 <__aeabi_dadd+0x6e4>)
 8000938:	1ae4      	subs	r4, r4, r3
 800093a:	4016      	ands	r6, r2
 800093c:	077b      	lsls	r3, r7, #29
 800093e:	d000      	beq.n	8000942 <__aeabi_dadd+0x42e>
 8000940:	e73f      	b.n	80007c2 <__aeabi_dadd+0x2ae>
 8000942:	e743      	b.n	80007cc <__aeabi_dadd+0x2b8>
 8000944:	000f      	movs	r7, r1
 8000946:	0018      	movs	r0, r3
 8000948:	3f20      	subs	r7, #32
 800094a:	40f8      	lsrs	r0, r7
 800094c:	4684      	mov	ip, r0
 800094e:	2920      	cmp	r1, #32
 8000950:	d003      	beq.n	800095a <__aeabi_dadd+0x446>
 8000952:	2740      	movs	r7, #64	@ 0x40
 8000954:	1a79      	subs	r1, r7, r1
 8000956:	408b      	lsls	r3, r1
 8000958:	431a      	orrs	r2, r3
 800095a:	1e53      	subs	r3, r2, #1
 800095c:	419a      	sbcs	r2, r3
 800095e:	4663      	mov	r3, ip
 8000960:	0017      	movs	r7, r2
 8000962:	431f      	orrs	r7, r3
 8000964:	e622      	b.n	80005ac <__aeabi_dadd+0x98>
 8000966:	48a4      	ldr	r0, [pc, #656]	@ (8000bf8 <__aeabi_dadd+0x6e4>)
 8000968:	1ae1      	subs	r1, r4, r3
 800096a:	4010      	ands	r0, r2
 800096c:	0747      	lsls	r7, r0, #29
 800096e:	08c0      	lsrs	r0, r0, #3
 8000970:	e707      	b.n	8000782 <__aeabi_dadd+0x26e>
 8000972:	0034      	movs	r4, r6
 8000974:	4648      	mov	r0, r9
 8000976:	4304      	orrs	r4, r0
 8000978:	d100      	bne.n	800097c <__aeabi_dadd+0x468>
 800097a:	e0fa      	b.n	8000b72 <__aeabi_dadd+0x65e>
 800097c:	1e4c      	subs	r4, r1, #1
 800097e:	2901      	cmp	r1, #1
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x470>
 8000982:	e0d7      	b.n	8000b34 <__aeabi_dadd+0x620>
 8000984:	4f9b      	ldr	r7, [pc, #620]	@ (8000bf4 <__aeabi_dadd+0x6e0>)
 8000986:	42b9      	cmp	r1, r7
 8000988:	d100      	bne.n	800098c <__aeabi_dadd+0x478>
 800098a:	e0e2      	b.n	8000b52 <__aeabi_dadd+0x63e>
 800098c:	2701      	movs	r7, #1
 800098e:	2c38      	cmp	r4, #56	@ 0x38
 8000990:	dd00      	ble.n	8000994 <__aeabi_dadd+0x480>
 8000992:	e74f      	b.n	8000834 <__aeabi_dadd+0x320>
 8000994:	0021      	movs	r1, r4
 8000996:	e73c      	b.n	8000812 <__aeabi_dadd+0x2fe>
 8000998:	4c96      	ldr	r4, [pc, #600]	@ (8000bf4 <__aeabi_dadd+0x6e0>)
 800099a:	42a1      	cmp	r1, r4
 800099c:	d100      	bne.n	80009a0 <__aeabi_dadd+0x48c>
 800099e:	e0dd      	b.n	8000b5c <__aeabi_dadd+0x648>
 80009a0:	444a      	add	r2, r9
 80009a2:	454a      	cmp	r2, r9
 80009a4:	4180      	sbcs	r0, r0
 80009a6:	18f3      	adds	r3, r6, r3
 80009a8:	4240      	negs	r0, r0
 80009aa:	1818      	adds	r0, r3, r0
 80009ac:	07c7      	lsls	r7, r0, #31
 80009ae:	0852      	lsrs	r2, r2, #1
 80009b0:	4317      	orrs	r7, r2
 80009b2:	0846      	lsrs	r6, r0, #1
 80009b4:	0752      	lsls	r2, r2, #29
 80009b6:	d005      	beq.n	80009c4 <__aeabi_dadd+0x4b0>
 80009b8:	220f      	movs	r2, #15
 80009ba:	000c      	movs	r4, r1
 80009bc:	403a      	ands	r2, r7
 80009be:	2a04      	cmp	r2, #4
 80009c0:	d000      	beq.n	80009c4 <__aeabi_dadd+0x4b0>
 80009c2:	e62c      	b.n	800061e <__aeabi_dadd+0x10a>
 80009c4:	0776      	lsls	r6, r6, #29
 80009c6:	08ff      	lsrs	r7, r7, #3
 80009c8:	4337      	orrs	r7, r6
 80009ca:	0900      	lsrs	r0, r0, #4
 80009cc:	e6d9      	b.n	8000782 <__aeabi_dadd+0x26e>
 80009ce:	2700      	movs	r7, #0
 80009d0:	2600      	movs	r6, #0
 80009d2:	e6e8      	b.n	80007a6 <__aeabi_dadd+0x292>
 80009d4:	4649      	mov	r1, r9
 80009d6:	1a57      	subs	r7, r2, r1
 80009d8:	42ba      	cmp	r2, r7
 80009da:	4192      	sbcs	r2, r2
 80009dc:	1b9e      	subs	r6, r3, r6
 80009de:	4252      	negs	r2, r2
 80009e0:	4665      	mov	r5, ip
 80009e2:	1ab6      	subs	r6, r6, r2
 80009e4:	e5ed      	b.n	80005c2 <__aeabi_dadd+0xae>
 80009e6:	2900      	cmp	r1, #0
 80009e8:	d000      	beq.n	80009ec <__aeabi_dadd+0x4d8>
 80009ea:	e0c6      	b.n	8000b7a <__aeabi_dadd+0x666>
 80009ec:	2f00      	cmp	r7, #0
 80009ee:	d167      	bne.n	8000ac0 <__aeabi_dadd+0x5ac>
 80009f0:	2680      	movs	r6, #128	@ 0x80
 80009f2:	2500      	movs	r5, #0
 80009f4:	4c7f      	ldr	r4, [pc, #508]	@ (8000bf4 <__aeabi_dadd+0x6e0>)
 80009f6:	0336      	lsls	r6, r6, #12
 80009f8:	e6d5      	b.n	80007a6 <__aeabi_dadd+0x292>
 80009fa:	4665      	mov	r5, ip
 80009fc:	000c      	movs	r4, r1
 80009fe:	001e      	movs	r6, r3
 8000a00:	08d0      	lsrs	r0, r2, #3
 8000a02:	e6e4      	b.n	80007ce <__aeabi_dadd+0x2ba>
 8000a04:	444a      	add	r2, r9
 8000a06:	454a      	cmp	r2, r9
 8000a08:	4180      	sbcs	r0, r0
 8000a0a:	18f3      	adds	r3, r6, r3
 8000a0c:	4240      	negs	r0, r0
 8000a0e:	1818      	adds	r0, r3, r0
 8000a10:	0011      	movs	r1, r2
 8000a12:	0203      	lsls	r3, r0, #8
 8000a14:	d400      	bmi.n	8000a18 <__aeabi_dadd+0x504>
 8000a16:	e096      	b.n	8000b46 <__aeabi_dadd+0x632>
 8000a18:	4b77      	ldr	r3, [pc, #476]	@ (8000bf8 <__aeabi_dadd+0x6e4>)
 8000a1a:	0849      	lsrs	r1, r1, #1
 8000a1c:	4018      	ands	r0, r3
 8000a1e:	07c3      	lsls	r3, r0, #31
 8000a20:	430b      	orrs	r3, r1
 8000a22:	0844      	lsrs	r4, r0, #1
 8000a24:	0749      	lsls	r1, r1, #29
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dadd+0x516>
 8000a28:	e129      	b.n	8000c7e <__aeabi_dadd+0x76a>
 8000a2a:	220f      	movs	r2, #15
 8000a2c:	401a      	ands	r2, r3
 8000a2e:	2a04      	cmp	r2, #4
 8000a30:	d100      	bne.n	8000a34 <__aeabi_dadd+0x520>
 8000a32:	e0ea      	b.n	8000c0a <__aeabi_dadd+0x6f6>
 8000a34:	1d1f      	adds	r7, r3, #4
 8000a36:	429f      	cmp	r7, r3
 8000a38:	41b6      	sbcs	r6, r6
 8000a3a:	4276      	negs	r6, r6
 8000a3c:	1936      	adds	r6, r6, r4
 8000a3e:	2402      	movs	r4, #2
 8000a40:	e6c4      	b.n	80007cc <__aeabi_dadd+0x2b8>
 8000a42:	4649      	mov	r1, r9
 8000a44:	1a8f      	subs	r7, r1, r2
 8000a46:	45b9      	cmp	r9, r7
 8000a48:	4180      	sbcs	r0, r0
 8000a4a:	1af6      	subs	r6, r6, r3
 8000a4c:	4240      	negs	r0, r0
 8000a4e:	1a36      	subs	r6, r6, r0
 8000a50:	0233      	lsls	r3, r6, #8
 8000a52:	d406      	bmi.n	8000a62 <__aeabi_dadd+0x54e>
 8000a54:	0773      	lsls	r3, r6, #29
 8000a56:	08ff      	lsrs	r7, r7, #3
 8000a58:	2101      	movs	r1, #1
 8000a5a:	431f      	orrs	r7, r3
 8000a5c:	08f0      	lsrs	r0, r6, #3
 8000a5e:	e690      	b.n	8000782 <__aeabi_dadd+0x26e>
 8000a60:	4665      	mov	r5, ip
 8000a62:	2401      	movs	r4, #1
 8000a64:	e5ab      	b.n	80005be <__aeabi_dadd+0xaa>
 8000a66:	464b      	mov	r3, r9
 8000a68:	0777      	lsls	r7, r6, #29
 8000a6a:	08d8      	lsrs	r0, r3, #3
 8000a6c:	4307      	orrs	r7, r0
 8000a6e:	08f0      	lsrs	r0, r6, #3
 8000a70:	e6b4      	b.n	80007dc <__aeabi_dadd+0x2c8>
 8000a72:	000f      	movs	r7, r1
 8000a74:	0018      	movs	r0, r3
 8000a76:	3f20      	subs	r7, #32
 8000a78:	40f8      	lsrs	r0, r7
 8000a7a:	4684      	mov	ip, r0
 8000a7c:	2920      	cmp	r1, #32
 8000a7e:	d003      	beq.n	8000a88 <__aeabi_dadd+0x574>
 8000a80:	2740      	movs	r7, #64	@ 0x40
 8000a82:	1a79      	subs	r1, r7, r1
 8000a84:	408b      	lsls	r3, r1
 8000a86:	431a      	orrs	r2, r3
 8000a88:	1e53      	subs	r3, r2, #1
 8000a8a:	419a      	sbcs	r2, r3
 8000a8c:	4663      	mov	r3, ip
 8000a8e:	0017      	movs	r7, r2
 8000a90:	431f      	orrs	r7, r3
 8000a92:	e635      	b.n	8000700 <__aeabi_dadd+0x1ec>
 8000a94:	2500      	movs	r5, #0
 8000a96:	2400      	movs	r4, #0
 8000a98:	2600      	movs	r6, #0
 8000a9a:	e684      	b.n	80007a6 <__aeabi_dadd+0x292>
 8000a9c:	000c      	movs	r4, r1
 8000a9e:	0035      	movs	r5, r6
 8000aa0:	3c20      	subs	r4, #32
 8000aa2:	40e5      	lsrs	r5, r4
 8000aa4:	2920      	cmp	r1, #32
 8000aa6:	d005      	beq.n	8000ab4 <__aeabi_dadd+0x5a0>
 8000aa8:	2440      	movs	r4, #64	@ 0x40
 8000aaa:	1a61      	subs	r1, r4, r1
 8000aac:	408e      	lsls	r6, r1
 8000aae:	4649      	mov	r1, r9
 8000ab0:	4331      	orrs	r1, r6
 8000ab2:	4689      	mov	r9, r1
 8000ab4:	4648      	mov	r0, r9
 8000ab6:	1e41      	subs	r1, r0, #1
 8000ab8:	4188      	sbcs	r0, r1
 8000aba:	0007      	movs	r7, r0
 8000abc:	432f      	orrs	r7, r5
 8000abe:	e5ef      	b.n	80006a0 <__aeabi_dadd+0x18c>
 8000ac0:	08d2      	lsrs	r2, r2, #3
 8000ac2:	075f      	lsls	r7, r3, #29
 8000ac4:	4665      	mov	r5, ip
 8000ac6:	4317      	orrs	r7, r2
 8000ac8:	08d8      	lsrs	r0, r3, #3
 8000aca:	e687      	b.n	80007dc <__aeabi_dadd+0x2c8>
 8000acc:	1a17      	subs	r7, r2, r0
 8000ace:	42ba      	cmp	r2, r7
 8000ad0:	4192      	sbcs	r2, r2
 8000ad2:	1b9e      	subs	r6, r3, r6
 8000ad4:	4252      	negs	r2, r2
 8000ad6:	1ab6      	subs	r6, r6, r2
 8000ad8:	0233      	lsls	r3, r6, #8
 8000ada:	d4c1      	bmi.n	8000a60 <__aeabi_dadd+0x54c>
 8000adc:	0773      	lsls	r3, r6, #29
 8000ade:	08ff      	lsrs	r7, r7, #3
 8000ae0:	4665      	mov	r5, ip
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	431f      	orrs	r7, r3
 8000ae6:	08f0      	lsrs	r0, r6, #3
 8000ae8:	e64b      	b.n	8000782 <__aeabi_dadd+0x26e>
 8000aea:	2f00      	cmp	r7, #0
 8000aec:	d07b      	beq.n	8000be6 <__aeabi_dadd+0x6d2>
 8000aee:	4665      	mov	r5, ip
 8000af0:	001e      	movs	r6, r3
 8000af2:	4691      	mov	r9, r2
 8000af4:	e63f      	b.n	8000776 <__aeabi_dadd+0x262>
 8000af6:	1a81      	subs	r1, r0, r2
 8000af8:	4688      	mov	r8, r1
 8000afa:	45c1      	cmp	r9, r8
 8000afc:	41a4      	sbcs	r4, r4
 8000afe:	1af1      	subs	r1, r6, r3
 8000b00:	4264      	negs	r4, r4
 8000b02:	1b09      	subs	r1, r1, r4
 8000b04:	2480      	movs	r4, #128	@ 0x80
 8000b06:	0424      	lsls	r4, r4, #16
 8000b08:	4221      	tst	r1, r4
 8000b0a:	d077      	beq.n	8000bfc <__aeabi_dadd+0x6e8>
 8000b0c:	1a10      	subs	r0, r2, r0
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	4192      	sbcs	r2, r2
 8000b12:	0007      	movs	r7, r0
 8000b14:	1b9e      	subs	r6, r3, r6
 8000b16:	4252      	negs	r2, r2
 8000b18:	1ab6      	subs	r6, r6, r2
 8000b1a:	4337      	orrs	r7, r6
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_dadd+0x60c>
 8000b1e:	e0a0      	b.n	8000c62 <__aeabi_dadd+0x74e>
 8000b20:	4665      	mov	r5, ip
 8000b22:	2400      	movs	r4, #0
 8000b24:	2600      	movs	r6, #0
 8000b26:	e63e      	b.n	80007a6 <__aeabi_dadd+0x292>
 8000b28:	075f      	lsls	r7, r3, #29
 8000b2a:	08d2      	lsrs	r2, r2, #3
 8000b2c:	4665      	mov	r5, ip
 8000b2e:	4317      	orrs	r7, r2
 8000b30:	08d8      	lsrs	r0, r3, #3
 8000b32:	e653      	b.n	80007dc <__aeabi_dadd+0x2c8>
 8000b34:	1881      	adds	r1, r0, r2
 8000b36:	4291      	cmp	r1, r2
 8000b38:	4192      	sbcs	r2, r2
 8000b3a:	18f0      	adds	r0, r6, r3
 8000b3c:	4252      	negs	r2, r2
 8000b3e:	1880      	adds	r0, r0, r2
 8000b40:	0203      	lsls	r3, r0, #8
 8000b42:	d500      	bpl.n	8000b46 <__aeabi_dadd+0x632>
 8000b44:	e768      	b.n	8000a18 <__aeabi_dadd+0x504>
 8000b46:	0747      	lsls	r7, r0, #29
 8000b48:	08c9      	lsrs	r1, r1, #3
 8000b4a:	430f      	orrs	r7, r1
 8000b4c:	08c0      	lsrs	r0, r0, #3
 8000b4e:	2101      	movs	r1, #1
 8000b50:	e617      	b.n	8000782 <__aeabi_dadd+0x26e>
 8000b52:	08d2      	lsrs	r2, r2, #3
 8000b54:	075f      	lsls	r7, r3, #29
 8000b56:	4317      	orrs	r7, r2
 8000b58:	08d8      	lsrs	r0, r3, #3
 8000b5a:	e63f      	b.n	80007dc <__aeabi_dadd+0x2c8>
 8000b5c:	000c      	movs	r4, r1
 8000b5e:	2600      	movs	r6, #0
 8000b60:	2700      	movs	r7, #0
 8000b62:	e620      	b.n	80007a6 <__aeabi_dadd+0x292>
 8000b64:	2900      	cmp	r1, #0
 8000b66:	d156      	bne.n	8000c16 <__aeabi_dadd+0x702>
 8000b68:	075f      	lsls	r7, r3, #29
 8000b6a:	08d2      	lsrs	r2, r2, #3
 8000b6c:	4317      	orrs	r7, r2
 8000b6e:	08d8      	lsrs	r0, r3, #3
 8000b70:	e634      	b.n	80007dc <__aeabi_dadd+0x2c8>
 8000b72:	000c      	movs	r4, r1
 8000b74:	001e      	movs	r6, r3
 8000b76:	08d0      	lsrs	r0, r2, #3
 8000b78:	e629      	b.n	80007ce <__aeabi_dadd+0x2ba>
 8000b7a:	08c1      	lsrs	r1, r0, #3
 8000b7c:	0770      	lsls	r0, r6, #29
 8000b7e:	4301      	orrs	r1, r0
 8000b80:	08f0      	lsrs	r0, r6, #3
 8000b82:	2f00      	cmp	r7, #0
 8000b84:	d062      	beq.n	8000c4c <__aeabi_dadd+0x738>
 8000b86:	2480      	movs	r4, #128	@ 0x80
 8000b88:	0324      	lsls	r4, r4, #12
 8000b8a:	4220      	tst	r0, r4
 8000b8c:	d007      	beq.n	8000b9e <__aeabi_dadd+0x68a>
 8000b8e:	08de      	lsrs	r6, r3, #3
 8000b90:	4226      	tst	r6, r4
 8000b92:	d104      	bne.n	8000b9e <__aeabi_dadd+0x68a>
 8000b94:	4665      	mov	r5, ip
 8000b96:	0030      	movs	r0, r6
 8000b98:	08d1      	lsrs	r1, r2, #3
 8000b9a:	075b      	lsls	r3, r3, #29
 8000b9c:	4319      	orrs	r1, r3
 8000b9e:	0f4f      	lsrs	r7, r1, #29
 8000ba0:	00c9      	lsls	r1, r1, #3
 8000ba2:	08c9      	lsrs	r1, r1, #3
 8000ba4:	077f      	lsls	r7, r7, #29
 8000ba6:	430f      	orrs	r7, r1
 8000ba8:	e618      	b.n	80007dc <__aeabi_dadd+0x2c8>
 8000baa:	000c      	movs	r4, r1
 8000bac:	0030      	movs	r0, r6
 8000bae:	3c20      	subs	r4, #32
 8000bb0:	40e0      	lsrs	r0, r4
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	2920      	cmp	r1, #32
 8000bb6:	d005      	beq.n	8000bc4 <__aeabi_dadd+0x6b0>
 8000bb8:	2440      	movs	r4, #64	@ 0x40
 8000bba:	1a61      	subs	r1, r4, r1
 8000bbc:	408e      	lsls	r6, r1
 8000bbe:	4649      	mov	r1, r9
 8000bc0:	4331      	orrs	r1, r6
 8000bc2:	4689      	mov	r9, r1
 8000bc4:	4648      	mov	r0, r9
 8000bc6:	1e41      	subs	r1, r0, #1
 8000bc8:	4188      	sbcs	r0, r1
 8000bca:	4661      	mov	r1, ip
 8000bcc:	0007      	movs	r7, r0
 8000bce:	430f      	orrs	r7, r1
 8000bd0:	e630      	b.n	8000834 <__aeabi_dadd+0x320>
 8000bd2:	2120      	movs	r1, #32
 8000bd4:	2700      	movs	r7, #0
 8000bd6:	1a09      	subs	r1, r1, r0
 8000bd8:	e50e      	b.n	80005f8 <__aeabi_dadd+0xe4>
 8000bda:	001e      	movs	r6, r3
 8000bdc:	2f00      	cmp	r7, #0
 8000bde:	d000      	beq.n	8000be2 <__aeabi_dadd+0x6ce>
 8000be0:	e522      	b.n	8000628 <__aeabi_dadd+0x114>
 8000be2:	2400      	movs	r4, #0
 8000be4:	e758      	b.n	8000a98 <__aeabi_dadd+0x584>
 8000be6:	2500      	movs	r5, #0
 8000be8:	2400      	movs	r4, #0
 8000bea:	2600      	movs	r6, #0
 8000bec:	e5db      	b.n	80007a6 <__aeabi_dadd+0x292>
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	000007fe 	.word	0x000007fe
 8000bf4:	000007ff 	.word	0x000007ff
 8000bf8:	ff7fffff 	.word	0xff7fffff
 8000bfc:	4647      	mov	r7, r8
 8000bfe:	430f      	orrs	r7, r1
 8000c00:	d100      	bne.n	8000c04 <__aeabi_dadd+0x6f0>
 8000c02:	e747      	b.n	8000a94 <__aeabi_dadd+0x580>
 8000c04:	000e      	movs	r6, r1
 8000c06:	46c1      	mov	r9, r8
 8000c08:	e5b5      	b.n	8000776 <__aeabi_dadd+0x262>
 8000c0a:	08df      	lsrs	r7, r3, #3
 8000c0c:	0764      	lsls	r4, r4, #29
 8000c0e:	2102      	movs	r1, #2
 8000c10:	4327      	orrs	r7, r4
 8000c12:	0900      	lsrs	r0, r0, #4
 8000c14:	e5b5      	b.n	8000782 <__aeabi_dadd+0x26e>
 8000c16:	0019      	movs	r1, r3
 8000c18:	08c0      	lsrs	r0, r0, #3
 8000c1a:	0777      	lsls	r7, r6, #29
 8000c1c:	4307      	orrs	r7, r0
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	08f0      	lsrs	r0, r6, #3
 8000c22:	2900      	cmp	r1, #0
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x714>
 8000c26:	e5d9      	b.n	80007dc <__aeabi_dadd+0x2c8>
 8000c28:	2180      	movs	r1, #128	@ 0x80
 8000c2a:	0309      	lsls	r1, r1, #12
 8000c2c:	4208      	tst	r0, r1
 8000c2e:	d007      	beq.n	8000c40 <__aeabi_dadd+0x72c>
 8000c30:	08dc      	lsrs	r4, r3, #3
 8000c32:	420c      	tst	r4, r1
 8000c34:	d104      	bne.n	8000c40 <__aeabi_dadd+0x72c>
 8000c36:	08d2      	lsrs	r2, r2, #3
 8000c38:	075b      	lsls	r3, r3, #29
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	0017      	movs	r7, r2
 8000c3e:	0020      	movs	r0, r4
 8000c40:	0f7b      	lsrs	r3, r7, #29
 8000c42:	00ff      	lsls	r7, r7, #3
 8000c44:	08ff      	lsrs	r7, r7, #3
 8000c46:	075b      	lsls	r3, r3, #29
 8000c48:	431f      	orrs	r7, r3
 8000c4a:	e5c7      	b.n	80007dc <__aeabi_dadd+0x2c8>
 8000c4c:	000f      	movs	r7, r1
 8000c4e:	e5c5      	b.n	80007dc <__aeabi_dadd+0x2c8>
 8000c50:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <__aeabi_dadd+0x788>)
 8000c52:	08d2      	lsrs	r2, r2, #3
 8000c54:	4033      	ands	r3, r6
 8000c56:	075f      	lsls	r7, r3, #29
 8000c58:	025b      	lsls	r3, r3, #9
 8000c5a:	2401      	movs	r4, #1
 8000c5c:	4317      	orrs	r7, r2
 8000c5e:	0b1e      	lsrs	r6, r3, #12
 8000c60:	e5a1      	b.n	80007a6 <__aeabi_dadd+0x292>
 8000c62:	4226      	tst	r6, r4
 8000c64:	d012      	beq.n	8000c8c <__aeabi_dadd+0x778>
 8000c66:	4b0d      	ldr	r3, [pc, #52]	@ (8000c9c <__aeabi_dadd+0x788>)
 8000c68:	4665      	mov	r5, ip
 8000c6a:	0002      	movs	r2, r0
 8000c6c:	2401      	movs	r4, #1
 8000c6e:	401e      	ands	r6, r3
 8000c70:	e4e6      	b.n	8000640 <__aeabi_dadd+0x12c>
 8000c72:	0021      	movs	r1, r4
 8000c74:	e585      	b.n	8000782 <__aeabi_dadd+0x26e>
 8000c76:	0017      	movs	r7, r2
 8000c78:	e5a8      	b.n	80007cc <__aeabi_dadd+0x2b8>
 8000c7a:	003a      	movs	r2, r7
 8000c7c:	e4d4      	b.n	8000628 <__aeabi_dadd+0x114>
 8000c7e:	08db      	lsrs	r3, r3, #3
 8000c80:	0764      	lsls	r4, r4, #29
 8000c82:	431c      	orrs	r4, r3
 8000c84:	0027      	movs	r7, r4
 8000c86:	2102      	movs	r1, #2
 8000c88:	0900      	lsrs	r0, r0, #4
 8000c8a:	e57a      	b.n	8000782 <__aeabi_dadd+0x26e>
 8000c8c:	08c0      	lsrs	r0, r0, #3
 8000c8e:	0777      	lsls	r7, r6, #29
 8000c90:	4307      	orrs	r7, r0
 8000c92:	4665      	mov	r5, ip
 8000c94:	2100      	movs	r1, #0
 8000c96:	08f0      	lsrs	r0, r6, #3
 8000c98:	e573      	b.n	8000782 <__aeabi_dadd+0x26e>
 8000c9a:	46c0      	nop			@ (mov r8, r8)
 8000c9c:	ff7fffff 	.word	0xff7fffff

08000ca0 <__aeabi_ddiv>:
 8000ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca2:	46de      	mov	lr, fp
 8000ca4:	4645      	mov	r5, r8
 8000ca6:	4657      	mov	r7, sl
 8000ca8:	464e      	mov	r6, r9
 8000caa:	b5e0      	push	{r5, r6, r7, lr}
 8000cac:	b087      	sub	sp, #28
 8000cae:	9200      	str	r2, [sp, #0]
 8000cb0:	9301      	str	r3, [sp, #4]
 8000cb2:	030b      	lsls	r3, r1, #12
 8000cb4:	0b1b      	lsrs	r3, r3, #12
 8000cb6:	469b      	mov	fp, r3
 8000cb8:	0fca      	lsrs	r2, r1, #31
 8000cba:	004b      	lsls	r3, r1, #1
 8000cbc:	0004      	movs	r4, r0
 8000cbe:	4680      	mov	r8, r0
 8000cc0:	0d5b      	lsrs	r3, r3, #21
 8000cc2:	9202      	str	r2, [sp, #8]
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_ddiv+0x28>
 8000cc6:	e098      	b.n	8000dfa <__aeabi_ddiv+0x15a>
 8000cc8:	4a7c      	ldr	r2, [pc, #496]	@ (8000ebc <__aeabi_ddiv+0x21c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d037      	beq.n	8000d3e <__aeabi_ddiv+0x9e>
 8000cce:	4659      	mov	r1, fp
 8000cd0:	0f42      	lsrs	r2, r0, #29
 8000cd2:	00c9      	lsls	r1, r1, #3
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	2180      	movs	r1, #128	@ 0x80
 8000cd8:	0409      	lsls	r1, r1, #16
 8000cda:	4311      	orrs	r1, r2
 8000cdc:	00c2      	lsls	r2, r0, #3
 8000cde:	4690      	mov	r8, r2
 8000ce0:	4a77      	ldr	r2, [pc, #476]	@ (8000ec0 <__aeabi_ddiv+0x220>)
 8000ce2:	4689      	mov	r9, r1
 8000ce4:	4692      	mov	sl, r2
 8000ce6:	449a      	add	sl, r3
 8000ce8:	2300      	movs	r3, #0
 8000cea:	2400      	movs	r4, #0
 8000cec:	9303      	str	r3, [sp, #12]
 8000cee:	9e00      	ldr	r6, [sp, #0]
 8000cf0:	9f01      	ldr	r7, [sp, #4]
 8000cf2:	033b      	lsls	r3, r7, #12
 8000cf4:	0b1b      	lsrs	r3, r3, #12
 8000cf6:	469b      	mov	fp, r3
 8000cf8:	007b      	lsls	r3, r7, #1
 8000cfa:	0030      	movs	r0, r6
 8000cfc:	0d5b      	lsrs	r3, r3, #21
 8000cfe:	0ffd      	lsrs	r5, r7, #31
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d059      	beq.n	8000db8 <__aeabi_ddiv+0x118>
 8000d04:	4a6d      	ldr	r2, [pc, #436]	@ (8000ebc <__aeabi_ddiv+0x21c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d048      	beq.n	8000d9c <__aeabi_ddiv+0xfc>
 8000d0a:	4659      	mov	r1, fp
 8000d0c:	0f72      	lsrs	r2, r6, #29
 8000d0e:	00c9      	lsls	r1, r1, #3
 8000d10:	430a      	orrs	r2, r1
 8000d12:	2180      	movs	r1, #128	@ 0x80
 8000d14:	0409      	lsls	r1, r1, #16
 8000d16:	4311      	orrs	r1, r2
 8000d18:	468b      	mov	fp, r1
 8000d1a:	4969      	ldr	r1, [pc, #420]	@ (8000ec0 <__aeabi_ddiv+0x220>)
 8000d1c:	00f2      	lsls	r2, r6, #3
 8000d1e:	468c      	mov	ip, r1
 8000d20:	4651      	mov	r1, sl
 8000d22:	4463      	add	r3, ip
 8000d24:	1acb      	subs	r3, r1, r3
 8000d26:	469a      	mov	sl, r3
 8000d28:	2100      	movs	r1, #0
 8000d2a:	9e02      	ldr	r6, [sp, #8]
 8000d2c:	406e      	eors	r6, r5
 8000d2e:	b2f6      	uxtb	r6, r6
 8000d30:	2c0f      	cmp	r4, #15
 8000d32:	d900      	bls.n	8000d36 <__aeabi_ddiv+0x96>
 8000d34:	e0ce      	b.n	8000ed4 <__aeabi_ddiv+0x234>
 8000d36:	4b63      	ldr	r3, [pc, #396]	@ (8000ec4 <__aeabi_ddiv+0x224>)
 8000d38:	00a4      	lsls	r4, r4, #2
 8000d3a:	591b      	ldr	r3, [r3, r4]
 8000d3c:	469f      	mov	pc, r3
 8000d3e:	465a      	mov	r2, fp
 8000d40:	4302      	orrs	r2, r0
 8000d42:	4691      	mov	r9, r2
 8000d44:	d000      	beq.n	8000d48 <__aeabi_ddiv+0xa8>
 8000d46:	e090      	b.n	8000e6a <__aeabi_ddiv+0x1ca>
 8000d48:	469a      	mov	sl, r3
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	4690      	mov	r8, r2
 8000d4e:	2408      	movs	r4, #8
 8000d50:	9303      	str	r3, [sp, #12]
 8000d52:	e7cc      	b.n	8000cee <__aeabi_ddiv+0x4e>
 8000d54:	46cb      	mov	fp, r9
 8000d56:	4642      	mov	r2, r8
 8000d58:	9d02      	ldr	r5, [sp, #8]
 8000d5a:	9903      	ldr	r1, [sp, #12]
 8000d5c:	2902      	cmp	r1, #2
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_ddiv+0xc2>
 8000d60:	e1de      	b.n	8001120 <__aeabi_ddiv+0x480>
 8000d62:	2903      	cmp	r1, #3
 8000d64:	d100      	bne.n	8000d68 <__aeabi_ddiv+0xc8>
 8000d66:	e08d      	b.n	8000e84 <__aeabi_ddiv+0x1e4>
 8000d68:	2901      	cmp	r1, #1
 8000d6a:	d000      	beq.n	8000d6e <__aeabi_ddiv+0xce>
 8000d6c:	e179      	b.n	8001062 <__aeabi_ddiv+0x3c2>
 8000d6e:	002e      	movs	r6, r5
 8000d70:	2200      	movs	r2, #0
 8000d72:	2300      	movs	r3, #0
 8000d74:	2400      	movs	r4, #0
 8000d76:	4690      	mov	r8, r2
 8000d78:	051b      	lsls	r3, r3, #20
 8000d7a:	4323      	orrs	r3, r4
 8000d7c:	07f6      	lsls	r6, r6, #31
 8000d7e:	4333      	orrs	r3, r6
 8000d80:	4640      	mov	r0, r8
 8000d82:	0019      	movs	r1, r3
 8000d84:	b007      	add	sp, #28
 8000d86:	bcf0      	pop	{r4, r5, r6, r7}
 8000d88:	46bb      	mov	fp, r7
 8000d8a:	46b2      	mov	sl, r6
 8000d8c:	46a9      	mov	r9, r5
 8000d8e:	46a0      	mov	r8, r4
 8000d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d92:	2200      	movs	r2, #0
 8000d94:	2400      	movs	r4, #0
 8000d96:	4690      	mov	r8, r2
 8000d98:	4b48      	ldr	r3, [pc, #288]	@ (8000ebc <__aeabi_ddiv+0x21c>)
 8000d9a:	e7ed      	b.n	8000d78 <__aeabi_ddiv+0xd8>
 8000d9c:	465a      	mov	r2, fp
 8000d9e:	9b00      	ldr	r3, [sp, #0]
 8000da0:	431a      	orrs	r2, r3
 8000da2:	4b49      	ldr	r3, [pc, #292]	@ (8000ec8 <__aeabi_ddiv+0x228>)
 8000da4:	469c      	mov	ip, r3
 8000da6:	44e2      	add	sl, ip
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	d159      	bne.n	8000e60 <__aeabi_ddiv+0x1c0>
 8000dac:	2302      	movs	r3, #2
 8000dae:	431c      	orrs	r4, r3
 8000db0:	2300      	movs	r3, #0
 8000db2:	2102      	movs	r1, #2
 8000db4:	469b      	mov	fp, r3
 8000db6:	e7b8      	b.n	8000d2a <__aeabi_ddiv+0x8a>
 8000db8:	465a      	mov	r2, fp
 8000dba:	9b00      	ldr	r3, [sp, #0]
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	d049      	beq.n	8000e54 <__aeabi_ddiv+0x1b4>
 8000dc0:	465b      	mov	r3, fp
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_ddiv+0x128>
 8000dc6:	e19c      	b.n	8001102 <__aeabi_ddiv+0x462>
 8000dc8:	4658      	mov	r0, fp
 8000dca:	f000 fffd 	bl	8001dc8 <__clzsi2>
 8000dce:	0002      	movs	r2, r0
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	3a0b      	subs	r2, #11
 8000dd4:	271d      	movs	r7, #29
 8000dd6:	9e00      	ldr	r6, [sp, #0]
 8000dd8:	1aba      	subs	r2, r7, r2
 8000dda:	0019      	movs	r1, r3
 8000ddc:	4658      	mov	r0, fp
 8000dde:	40d6      	lsrs	r6, r2
 8000de0:	3908      	subs	r1, #8
 8000de2:	4088      	lsls	r0, r1
 8000de4:	0032      	movs	r2, r6
 8000de6:	4302      	orrs	r2, r0
 8000de8:	4693      	mov	fp, r2
 8000dea:	9a00      	ldr	r2, [sp, #0]
 8000dec:	408a      	lsls	r2, r1
 8000dee:	4937      	ldr	r1, [pc, #220]	@ (8000ecc <__aeabi_ddiv+0x22c>)
 8000df0:	4453      	add	r3, sl
 8000df2:	468a      	mov	sl, r1
 8000df4:	2100      	movs	r1, #0
 8000df6:	449a      	add	sl, r3
 8000df8:	e797      	b.n	8000d2a <__aeabi_ddiv+0x8a>
 8000dfa:	465b      	mov	r3, fp
 8000dfc:	4303      	orrs	r3, r0
 8000dfe:	4699      	mov	r9, r3
 8000e00:	d021      	beq.n	8000e46 <__aeabi_ddiv+0x1a6>
 8000e02:	465b      	mov	r3, fp
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d100      	bne.n	8000e0a <__aeabi_ddiv+0x16a>
 8000e08:	e169      	b.n	80010de <__aeabi_ddiv+0x43e>
 8000e0a:	4658      	mov	r0, fp
 8000e0c:	f000 ffdc 	bl	8001dc8 <__clzsi2>
 8000e10:	230b      	movs	r3, #11
 8000e12:	425b      	negs	r3, r3
 8000e14:	469c      	mov	ip, r3
 8000e16:	0002      	movs	r2, r0
 8000e18:	4484      	add	ip, r0
 8000e1a:	4666      	mov	r6, ip
 8000e1c:	231d      	movs	r3, #29
 8000e1e:	1b9b      	subs	r3, r3, r6
 8000e20:	0026      	movs	r6, r4
 8000e22:	0011      	movs	r1, r2
 8000e24:	4658      	mov	r0, fp
 8000e26:	40de      	lsrs	r6, r3
 8000e28:	3908      	subs	r1, #8
 8000e2a:	4088      	lsls	r0, r1
 8000e2c:	0033      	movs	r3, r6
 8000e2e:	4303      	orrs	r3, r0
 8000e30:	4699      	mov	r9, r3
 8000e32:	0023      	movs	r3, r4
 8000e34:	408b      	lsls	r3, r1
 8000e36:	4698      	mov	r8, r3
 8000e38:	4b25      	ldr	r3, [pc, #148]	@ (8000ed0 <__aeabi_ddiv+0x230>)
 8000e3a:	2400      	movs	r4, #0
 8000e3c:	1a9b      	subs	r3, r3, r2
 8000e3e:	469a      	mov	sl, r3
 8000e40:	2300      	movs	r3, #0
 8000e42:	9303      	str	r3, [sp, #12]
 8000e44:	e753      	b.n	8000cee <__aeabi_ddiv+0x4e>
 8000e46:	2300      	movs	r3, #0
 8000e48:	4698      	mov	r8, r3
 8000e4a:	469a      	mov	sl, r3
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	2404      	movs	r4, #4
 8000e50:	9303      	str	r3, [sp, #12]
 8000e52:	e74c      	b.n	8000cee <__aeabi_ddiv+0x4e>
 8000e54:	2301      	movs	r3, #1
 8000e56:	431c      	orrs	r4, r3
 8000e58:	2300      	movs	r3, #0
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	469b      	mov	fp, r3
 8000e5e:	e764      	b.n	8000d2a <__aeabi_ddiv+0x8a>
 8000e60:	2303      	movs	r3, #3
 8000e62:	0032      	movs	r2, r6
 8000e64:	2103      	movs	r1, #3
 8000e66:	431c      	orrs	r4, r3
 8000e68:	e75f      	b.n	8000d2a <__aeabi_ddiv+0x8a>
 8000e6a:	469a      	mov	sl, r3
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	46d9      	mov	r9, fp
 8000e70:	240c      	movs	r4, #12
 8000e72:	9303      	str	r3, [sp, #12]
 8000e74:	e73b      	b.n	8000cee <__aeabi_ddiv+0x4e>
 8000e76:	2300      	movs	r3, #0
 8000e78:	2480      	movs	r4, #128	@ 0x80
 8000e7a:	4698      	mov	r8, r3
 8000e7c:	2600      	movs	r6, #0
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <__aeabi_ddiv+0x21c>)
 8000e80:	0324      	lsls	r4, r4, #12
 8000e82:	e779      	b.n	8000d78 <__aeabi_ddiv+0xd8>
 8000e84:	2480      	movs	r4, #128	@ 0x80
 8000e86:	465b      	mov	r3, fp
 8000e88:	0324      	lsls	r4, r4, #12
 8000e8a:	431c      	orrs	r4, r3
 8000e8c:	0324      	lsls	r4, r4, #12
 8000e8e:	002e      	movs	r6, r5
 8000e90:	4690      	mov	r8, r2
 8000e92:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <__aeabi_ddiv+0x21c>)
 8000e94:	0b24      	lsrs	r4, r4, #12
 8000e96:	e76f      	b.n	8000d78 <__aeabi_ddiv+0xd8>
 8000e98:	2480      	movs	r4, #128	@ 0x80
 8000e9a:	464b      	mov	r3, r9
 8000e9c:	0324      	lsls	r4, r4, #12
 8000e9e:	4223      	tst	r3, r4
 8000ea0:	d002      	beq.n	8000ea8 <__aeabi_ddiv+0x208>
 8000ea2:	465b      	mov	r3, fp
 8000ea4:	4223      	tst	r3, r4
 8000ea6:	d0f0      	beq.n	8000e8a <__aeabi_ddiv+0x1ea>
 8000ea8:	2480      	movs	r4, #128	@ 0x80
 8000eaa:	464b      	mov	r3, r9
 8000eac:	0324      	lsls	r4, r4, #12
 8000eae:	431c      	orrs	r4, r3
 8000eb0:	0324      	lsls	r4, r4, #12
 8000eb2:	9e02      	ldr	r6, [sp, #8]
 8000eb4:	4b01      	ldr	r3, [pc, #4]	@ (8000ebc <__aeabi_ddiv+0x21c>)
 8000eb6:	0b24      	lsrs	r4, r4, #12
 8000eb8:	e75e      	b.n	8000d78 <__aeabi_ddiv+0xd8>
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	000007ff 	.word	0x000007ff
 8000ec0:	fffffc01 	.word	0xfffffc01
 8000ec4:	080089a4 	.word	0x080089a4
 8000ec8:	fffff801 	.word	0xfffff801
 8000ecc:	000003f3 	.word	0x000003f3
 8000ed0:	fffffc0d 	.word	0xfffffc0d
 8000ed4:	45cb      	cmp	fp, r9
 8000ed6:	d200      	bcs.n	8000eda <__aeabi_ddiv+0x23a>
 8000ed8:	e0f8      	b.n	80010cc <__aeabi_ddiv+0x42c>
 8000eda:	d100      	bne.n	8000ede <__aeabi_ddiv+0x23e>
 8000edc:	e0f3      	b.n	80010c6 <__aeabi_ddiv+0x426>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	425b      	negs	r3, r3
 8000ee2:	469c      	mov	ip, r3
 8000ee4:	4644      	mov	r4, r8
 8000ee6:	4648      	mov	r0, r9
 8000ee8:	2500      	movs	r5, #0
 8000eea:	44e2      	add	sl, ip
 8000eec:	465b      	mov	r3, fp
 8000eee:	0e17      	lsrs	r7, r2, #24
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	431f      	orrs	r7, r3
 8000ef4:	0c19      	lsrs	r1, r3, #16
 8000ef6:	043b      	lsls	r3, r7, #16
 8000ef8:	0212      	lsls	r2, r2, #8
 8000efa:	9700      	str	r7, [sp, #0]
 8000efc:	0c1f      	lsrs	r7, r3, #16
 8000efe:	4691      	mov	r9, r2
 8000f00:	9102      	str	r1, [sp, #8]
 8000f02:	9703      	str	r7, [sp, #12]
 8000f04:	f7ff f986 	bl	8000214 <__aeabi_uidivmod>
 8000f08:	0002      	movs	r2, r0
 8000f0a:	437a      	muls	r2, r7
 8000f0c:	040b      	lsls	r3, r1, #16
 8000f0e:	0c21      	lsrs	r1, r4, #16
 8000f10:	4680      	mov	r8, r0
 8000f12:	4319      	orrs	r1, r3
 8000f14:	428a      	cmp	r2, r1
 8000f16:	d909      	bls.n	8000f2c <__aeabi_ddiv+0x28c>
 8000f18:	9f00      	ldr	r7, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	46bc      	mov	ip, r7
 8000f1e:	425b      	negs	r3, r3
 8000f20:	4461      	add	r1, ip
 8000f22:	469c      	mov	ip, r3
 8000f24:	44e0      	add	r8, ip
 8000f26:	428f      	cmp	r7, r1
 8000f28:	d800      	bhi.n	8000f2c <__aeabi_ddiv+0x28c>
 8000f2a:	e15c      	b.n	80011e6 <__aeabi_ddiv+0x546>
 8000f2c:	1a88      	subs	r0, r1, r2
 8000f2e:	9902      	ldr	r1, [sp, #8]
 8000f30:	f7ff f970 	bl	8000214 <__aeabi_uidivmod>
 8000f34:	9a03      	ldr	r2, [sp, #12]
 8000f36:	0424      	lsls	r4, r4, #16
 8000f38:	4342      	muls	r2, r0
 8000f3a:	0409      	lsls	r1, r1, #16
 8000f3c:	0c24      	lsrs	r4, r4, #16
 8000f3e:	0003      	movs	r3, r0
 8000f40:	430c      	orrs	r4, r1
 8000f42:	42a2      	cmp	r2, r4
 8000f44:	d906      	bls.n	8000f54 <__aeabi_ddiv+0x2b4>
 8000f46:	9900      	ldr	r1, [sp, #0]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	468c      	mov	ip, r1
 8000f4c:	4464      	add	r4, ip
 8000f4e:	42a1      	cmp	r1, r4
 8000f50:	d800      	bhi.n	8000f54 <__aeabi_ddiv+0x2b4>
 8000f52:	e142      	b.n	80011da <__aeabi_ddiv+0x53a>
 8000f54:	1aa0      	subs	r0, r4, r2
 8000f56:	4642      	mov	r2, r8
 8000f58:	0412      	lsls	r2, r2, #16
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	4693      	mov	fp, r2
 8000f5e:	464b      	mov	r3, r9
 8000f60:	4659      	mov	r1, fp
 8000f62:	0c1b      	lsrs	r3, r3, #16
 8000f64:	001f      	movs	r7, r3
 8000f66:	9304      	str	r3, [sp, #16]
 8000f68:	040b      	lsls	r3, r1, #16
 8000f6a:	4649      	mov	r1, r9
 8000f6c:	0409      	lsls	r1, r1, #16
 8000f6e:	0c09      	lsrs	r1, r1, #16
 8000f70:	000c      	movs	r4, r1
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	435c      	muls	r4, r3
 8000f76:	0c12      	lsrs	r2, r2, #16
 8000f78:	437b      	muls	r3, r7
 8000f7a:	4688      	mov	r8, r1
 8000f7c:	4351      	muls	r1, r2
 8000f7e:	437a      	muls	r2, r7
 8000f80:	0c27      	lsrs	r7, r4, #16
 8000f82:	46bc      	mov	ip, r7
 8000f84:	185b      	adds	r3, r3, r1
 8000f86:	4463      	add	r3, ip
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d903      	bls.n	8000f94 <__aeabi_ddiv+0x2f4>
 8000f8c:	2180      	movs	r1, #128	@ 0x80
 8000f8e:	0249      	lsls	r1, r1, #9
 8000f90:	468c      	mov	ip, r1
 8000f92:	4462      	add	r2, ip
 8000f94:	0c19      	lsrs	r1, r3, #16
 8000f96:	0424      	lsls	r4, r4, #16
 8000f98:	041b      	lsls	r3, r3, #16
 8000f9a:	0c24      	lsrs	r4, r4, #16
 8000f9c:	188a      	adds	r2, r1, r2
 8000f9e:	191c      	adds	r4, r3, r4
 8000fa0:	4290      	cmp	r0, r2
 8000fa2:	d302      	bcc.n	8000faa <__aeabi_ddiv+0x30a>
 8000fa4:	d116      	bne.n	8000fd4 <__aeabi_ddiv+0x334>
 8000fa6:	42a5      	cmp	r5, r4
 8000fa8:	d214      	bcs.n	8000fd4 <__aeabi_ddiv+0x334>
 8000faa:	465b      	mov	r3, fp
 8000fac:	9f00      	ldr	r7, [sp, #0]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	444d      	add	r5, r9
 8000fb2:	9305      	str	r3, [sp, #20]
 8000fb4:	454d      	cmp	r5, r9
 8000fb6:	419b      	sbcs	r3, r3
 8000fb8:	46bc      	mov	ip, r7
 8000fba:	425b      	negs	r3, r3
 8000fbc:	4463      	add	r3, ip
 8000fbe:	18c0      	adds	r0, r0, r3
 8000fc0:	4287      	cmp	r7, r0
 8000fc2:	d300      	bcc.n	8000fc6 <__aeabi_ddiv+0x326>
 8000fc4:	e102      	b.n	80011cc <__aeabi_ddiv+0x52c>
 8000fc6:	4282      	cmp	r2, r0
 8000fc8:	d900      	bls.n	8000fcc <__aeabi_ddiv+0x32c>
 8000fca:	e129      	b.n	8001220 <__aeabi_ddiv+0x580>
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_ddiv+0x330>
 8000fce:	e124      	b.n	800121a <__aeabi_ddiv+0x57a>
 8000fd0:	9b05      	ldr	r3, [sp, #20]
 8000fd2:	469b      	mov	fp, r3
 8000fd4:	1b2c      	subs	r4, r5, r4
 8000fd6:	42a5      	cmp	r5, r4
 8000fd8:	41ad      	sbcs	r5, r5
 8000fda:	9b00      	ldr	r3, [sp, #0]
 8000fdc:	1a80      	subs	r0, r0, r2
 8000fde:	426d      	negs	r5, r5
 8000fe0:	1b40      	subs	r0, r0, r5
 8000fe2:	4283      	cmp	r3, r0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_ddiv+0x348>
 8000fe6:	e10f      	b.n	8001208 <__aeabi_ddiv+0x568>
 8000fe8:	9902      	ldr	r1, [sp, #8]
 8000fea:	f7ff f913 	bl	8000214 <__aeabi_uidivmod>
 8000fee:	9a03      	ldr	r2, [sp, #12]
 8000ff0:	040b      	lsls	r3, r1, #16
 8000ff2:	4342      	muls	r2, r0
 8000ff4:	0c21      	lsrs	r1, r4, #16
 8000ff6:	0005      	movs	r5, r0
 8000ff8:	4319      	orrs	r1, r3
 8000ffa:	428a      	cmp	r2, r1
 8000ffc:	d900      	bls.n	8001000 <__aeabi_ddiv+0x360>
 8000ffe:	e0cb      	b.n	8001198 <__aeabi_ddiv+0x4f8>
 8001000:	1a88      	subs	r0, r1, r2
 8001002:	9902      	ldr	r1, [sp, #8]
 8001004:	f7ff f906 	bl	8000214 <__aeabi_uidivmod>
 8001008:	9a03      	ldr	r2, [sp, #12]
 800100a:	0424      	lsls	r4, r4, #16
 800100c:	4342      	muls	r2, r0
 800100e:	0409      	lsls	r1, r1, #16
 8001010:	0c24      	lsrs	r4, r4, #16
 8001012:	0003      	movs	r3, r0
 8001014:	430c      	orrs	r4, r1
 8001016:	42a2      	cmp	r2, r4
 8001018:	d900      	bls.n	800101c <__aeabi_ddiv+0x37c>
 800101a:	e0ca      	b.n	80011b2 <__aeabi_ddiv+0x512>
 800101c:	4641      	mov	r1, r8
 800101e:	1aa4      	subs	r4, r4, r2
 8001020:	042a      	lsls	r2, r5, #16
 8001022:	431a      	orrs	r2, r3
 8001024:	9f04      	ldr	r7, [sp, #16]
 8001026:	0413      	lsls	r3, r2, #16
 8001028:	0c1b      	lsrs	r3, r3, #16
 800102a:	4359      	muls	r1, r3
 800102c:	4640      	mov	r0, r8
 800102e:	437b      	muls	r3, r7
 8001030:	469c      	mov	ip, r3
 8001032:	0c15      	lsrs	r5, r2, #16
 8001034:	4368      	muls	r0, r5
 8001036:	0c0b      	lsrs	r3, r1, #16
 8001038:	4484      	add	ip, r0
 800103a:	4463      	add	r3, ip
 800103c:	437d      	muls	r5, r7
 800103e:	4298      	cmp	r0, r3
 8001040:	d903      	bls.n	800104a <__aeabi_ddiv+0x3aa>
 8001042:	2080      	movs	r0, #128	@ 0x80
 8001044:	0240      	lsls	r0, r0, #9
 8001046:	4684      	mov	ip, r0
 8001048:	4465      	add	r5, ip
 800104a:	0c18      	lsrs	r0, r3, #16
 800104c:	0409      	lsls	r1, r1, #16
 800104e:	041b      	lsls	r3, r3, #16
 8001050:	0c09      	lsrs	r1, r1, #16
 8001052:	1940      	adds	r0, r0, r5
 8001054:	185b      	adds	r3, r3, r1
 8001056:	4284      	cmp	r4, r0
 8001058:	d327      	bcc.n	80010aa <__aeabi_ddiv+0x40a>
 800105a:	d023      	beq.n	80010a4 <__aeabi_ddiv+0x404>
 800105c:	2301      	movs	r3, #1
 800105e:	0035      	movs	r5, r6
 8001060:	431a      	orrs	r2, r3
 8001062:	4b94      	ldr	r3, [pc, #592]	@ (80012b4 <__aeabi_ddiv+0x614>)
 8001064:	4453      	add	r3, sl
 8001066:	2b00      	cmp	r3, #0
 8001068:	dd60      	ble.n	800112c <__aeabi_ddiv+0x48c>
 800106a:	0751      	lsls	r1, r2, #29
 800106c:	d000      	beq.n	8001070 <__aeabi_ddiv+0x3d0>
 800106e:	e086      	b.n	800117e <__aeabi_ddiv+0x4de>
 8001070:	002e      	movs	r6, r5
 8001072:	08d1      	lsrs	r1, r2, #3
 8001074:	465a      	mov	r2, fp
 8001076:	01d2      	lsls	r2, r2, #7
 8001078:	d506      	bpl.n	8001088 <__aeabi_ddiv+0x3e8>
 800107a:	465a      	mov	r2, fp
 800107c:	4b8e      	ldr	r3, [pc, #568]	@ (80012b8 <__aeabi_ddiv+0x618>)
 800107e:	401a      	ands	r2, r3
 8001080:	2380      	movs	r3, #128	@ 0x80
 8001082:	4693      	mov	fp, r2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4453      	add	r3, sl
 8001088:	4a8c      	ldr	r2, [pc, #560]	@ (80012bc <__aeabi_ddiv+0x61c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	dd00      	ble.n	8001090 <__aeabi_ddiv+0x3f0>
 800108e:	e680      	b.n	8000d92 <__aeabi_ddiv+0xf2>
 8001090:	465a      	mov	r2, fp
 8001092:	0752      	lsls	r2, r2, #29
 8001094:	430a      	orrs	r2, r1
 8001096:	4690      	mov	r8, r2
 8001098:	465a      	mov	r2, fp
 800109a:	055b      	lsls	r3, r3, #21
 800109c:	0254      	lsls	r4, r2, #9
 800109e:	0b24      	lsrs	r4, r4, #12
 80010a0:	0d5b      	lsrs	r3, r3, #21
 80010a2:	e669      	b.n	8000d78 <__aeabi_ddiv+0xd8>
 80010a4:	0035      	movs	r5, r6
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0db      	beq.n	8001062 <__aeabi_ddiv+0x3c2>
 80010aa:	9d00      	ldr	r5, [sp, #0]
 80010ac:	1e51      	subs	r1, r2, #1
 80010ae:	46ac      	mov	ip, r5
 80010b0:	4464      	add	r4, ip
 80010b2:	42ac      	cmp	r4, r5
 80010b4:	d200      	bcs.n	80010b8 <__aeabi_ddiv+0x418>
 80010b6:	e09e      	b.n	80011f6 <__aeabi_ddiv+0x556>
 80010b8:	4284      	cmp	r4, r0
 80010ba:	d200      	bcs.n	80010be <__aeabi_ddiv+0x41e>
 80010bc:	e0e1      	b.n	8001282 <__aeabi_ddiv+0x5e2>
 80010be:	d100      	bne.n	80010c2 <__aeabi_ddiv+0x422>
 80010c0:	e0ee      	b.n	80012a0 <__aeabi_ddiv+0x600>
 80010c2:	000a      	movs	r2, r1
 80010c4:	e7ca      	b.n	800105c <__aeabi_ddiv+0x3bc>
 80010c6:	4542      	cmp	r2, r8
 80010c8:	d900      	bls.n	80010cc <__aeabi_ddiv+0x42c>
 80010ca:	e708      	b.n	8000ede <__aeabi_ddiv+0x23e>
 80010cc:	464b      	mov	r3, r9
 80010ce:	07dc      	lsls	r4, r3, #31
 80010d0:	0858      	lsrs	r0, r3, #1
 80010d2:	4643      	mov	r3, r8
 80010d4:	085b      	lsrs	r3, r3, #1
 80010d6:	431c      	orrs	r4, r3
 80010d8:	4643      	mov	r3, r8
 80010da:	07dd      	lsls	r5, r3, #31
 80010dc:	e706      	b.n	8000eec <__aeabi_ddiv+0x24c>
 80010de:	f000 fe73 	bl	8001dc8 <__clzsi2>
 80010e2:	2315      	movs	r3, #21
 80010e4:	469c      	mov	ip, r3
 80010e6:	4484      	add	ip, r0
 80010e8:	0002      	movs	r2, r0
 80010ea:	4663      	mov	r3, ip
 80010ec:	3220      	adds	r2, #32
 80010ee:	2b1c      	cmp	r3, #28
 80010f0:	dc00      	bgt.n	80010f4 <__aeabi_ddiv+0x454>
 80010f2:	e692      	b.n	8000e1a <__aeabi_ddiv+0x17a>
 80010f4:	0023      	movs	r3, r4
 80010f6:	3808      	subs	r0, #8
 80010f8:	4083      	lsls	r3, r0
 80010fa:	4699      	mov	r9, r3
 80010fc:	2300      	movs	r3, #0
 80010fe:	4698      	mov	r8, r3
 8001100:	e69a      	b.n	8000e38 <__aeabi_ddiv+0x198>
 8001102:	f000 fe61 	bl	8001dc8 <__clzsi2>
 8001106:	0002      	movs	r2, r0
 8001108:	0003      	movs	r3, r0
 800110a:	3215      	adds	r2, #21
 800110c:	3320      	adds	r3, #32
 800110e:	2a1c      	cmp	r2, #28
 8001110:	dc00      	bgt.n	8001114 <__aeabi_ddiv+0x474>
 8001112:	e65f      	b.n	8000dd4 <__aeabi_ddiv+0x134>
 8001114:	9900      	ldr	r1, [sp, #0]
 8001116:	3808      	subs	r0, #8
 8001118:	4081      	lsls	r1, r0
 800111a:	2200      	movs	r2, #0
 800111c:	468b      	mov	fp, r1
 800111e:	e666      	b.n	8000dee <__aeabi_ddiv+0x14e>
 8001120:	2200      	movs	r2, #0
 8001122:	002e      	movs	r6, r5
 8001124:	2400      	movs	r4, #0
 8001126:	4690      	mov	r8, r2
 8001128:	4b65      	ldr	r3, [pc, #404]	@ (80012c0 <__aeabi_ddiv+0x620>)
 800112a:	e625      	b.n	8000d78 <__aeabi_ddiv+0xd8>
 800112c:	002e      	movs	r6, r5
 800112e:	2101      	movs	r1, #1
 8001130:	1ac9      	subs	r1, r1, r3
 8001132:	2938      	cmp	r1, #56	@ 0x38
 8001134:	dd00      	ble.n	8001138 <__aeabi_ddiv+0x498>
 8001136:	e61b      	b.n	8000d70 <__aeabi_ddiv+0xd0>
 8001138:	291f      	cmp	r1, #31
 800113a:	dc7e      	bgt.n	800123a <__aeabi_ddiv+0x59a>
 800113c:	4861      	ldr	r0, [pc, #388]	@ (80012c4 <__aeabi_ddiv+0x624>)
 800113e:	0014      	movs	r4, r2
 8001140:	4450      	add	r0, sl
 8001142:	465b      	mov	r3, fp
 8001144:	4082      	lsls	r2, r0
 8001146:	4083      	lsls	r3, r0
 8001148:	40cc      	lsrs	r4, r1
 800114a:	1e50      	subs	r0, r2, #1
 800114c:	4182      	sbcs	r2, r0
 800114e:	4323      	orrs	r3, r4
 8001150:	431a      	orrs	r2, r3
 8001152:	465b      	mov	r3, fp
 8001154:	40cb      	lsrs	r3, r1
 8001156:	0751      	lsls	r1, r2, #29
 8001158:	d009      	beq.n	800116e <__aeabi_ddiv+0x4ce>
 800115a:	210f      	movs	r1, #15
 800115c:	4011      	ands	r1, r2
 800115e:	2904      	cmp	r1, #4
 8001160:	d005      	beq.n	800116e <__aeabi_ddiv+0x4ce>
 8001162:	1d11      	adds	r1, r2, #4
 8001164:	4291      	cmp	r1, r2
 8001166:	4192      	sbcs	r2, r2
 8001168:	4252      	negs	r2, r2
 800116a:	189b      	adds	r3, r3, r2
 800116c:	000a      	movs	r2, r1
 800116e:	0219      	lsls	r1, r3, #8
 8001170:	d400      	bmi.n	8001174 <__aeabi_ddiv+0x4d4>
 8001172:	e09b      	b.n	80012ac <__aeabi_ddiv+0x60c>
 8001174:	2200      	movs	r2, #0
 8001176:	2301      	movs	r3, #1
 8001178:	2400      	movs	r4, #0
 800117a:	4690      	mov	r8, r2
 800117c:	e5fc      	b.n	8000d78 <__aeabi_ddiv+0xd8>
 800117e:	210f      	movs	r1, #15
 8001180:	4011      	ands	r1, r2
 8001182:	2904      	cmp	r1, #4
 8001184:	d100      	bne.n	8001188 <__aeabi_ddiv+0x4e8>
 8001186:	e773      	b.n	8001070 <__aeabi_ddiv+0x3d0>
 8001188:	1d11      	adds	r1, r2, #4
 800118a:	4291      	cmp	r1, r2
 800118c:	4192      	sbcs	r2, r2
 800118e:	4252      	negs	r2, r2
 8001190:	002e      	movs	r6, r5
 8001192:	08c9      	lsrs	r1, r1, #3
 8001194:	4493      	add	fp, r2
 8001196:	e76d      	b.n	8001074 <__aeabi_ddiv+0x3d4>
 8001198:	9b00      	ldr	r3, [sp, #0]
 800119a:	3d01      	subs	r5, #1
 800119c:	469c      	mov	ip, r3
 800119e:	4461      	add	r1, ip
 80011a0:	428b      	cmp	r3, r1
 80011a2:	d900      	bls.n	80011a6 <__aeabi_ddiv+0x506>
 80011a4:	e72c      	b.n	8001000 <__aeabi_ddiv+0x360>
 80011a6:	428a      	cmp	r2, r1
 80011a8:	d800      	bhi.n	80011ac <__aeabi_ddiv+0x50c>
 80011aa:	e729      	b.n	8001000 <__aeabi_ddiv+0x360>
 80011ac:	1e85      	subs	r5, r0, #2
 80011ae:	4461      	add	r1, ip
 80011b0:	e726      	b.n	8001000 <__aeabi_ddiv+0x360>
 80011b2:	9900      	ldr	r1, [sp, #0]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	468c      	mov	ip, r1
 80011b8:	4464      	add	r4, ip
 80011ba:	42a1      	cmp	r1, r4
 80011bc:	d900      	bls.n	80011c0 <__aeabi_ddiv+0x520>
 80011be:	e72d      	b.n	800101c <__aeabi_ddiv+0x37c>
 80011c0:	42a2      	cmp	r2, r4
 80011c2:	d800      	bhi.n	80011c6 <__aeabi_ddiv+0x526>
 80011c4:	e72a      	b.n	800101c <__aeabi_ddiv+0x37c>
 80011c6:	1e83      	subs	r3, r0, #2
 80011c8:	4464      	add	r4, ip
 80011ca:	e727      	b.n	800101c <__aeabi_ddiv+0x37c>
 80011cc:	4287      	cmp	r7, r0
 80011ce:	d000      	beq.n	80011d2 <__aeabi_ddiv+0x532>
 80011d0:	e6fe      	b.n	8000fd0 <__aeabi_ddiv+0x330>
 80011d2:	45a9      	cmp	r9, r5
 80011d4:	d900      	bls.n	80011d8 <__aeabi_ddiv+0x538>
 80011d6:	e6fb      	b.n	8000fd0 <__aeabi_ddiv+0x330>
 80011d8:	e6f5      	b.n	8000fc6 <__aeabi_ddiv+0x326>
 80011da:	42a2      	cmp	r2, r4
 80011dc:	d800      	bhi.n	80011e0 <__aeabi_ddiv+0x540>
 80011de:	e6b9      	b.n	8000f54 <__aeabi_ddiv+0x2b4>
 80011e0:	1e83      	subs	r3, r0, #2
 80011e2:	4464      	add	r4, ip
 80011e4:	e6b6      	b.n	8000f54 <__aeabi_ddiv+0x2b4>
 80011e6:	428a      	cmp	r2, r1
 80011e8:	d800      	bhi.n	80011ec <__aeabi_ddiv+0x54c>
 80011ea:	e69f      	b.n	8000f2c <__aeabi_ddiv+0x28c>
 80011ec:	46bc      	mov	ip, r7
 80011ee:	1e83      	subs	r3, r0, #2
 80011f0:	4698      	mov	r8, r3
 80011f2:	4461      	add	r1, ip
 80011f4:	e69a      	b.n	8000f2c <__aeabi_ddiv+0x28c>
 80011f6:	000a      	movs	r2, r1
 80011f8:	4284      	cmp	r4, r0
 80011fa:	d000      	beq.n	80011fe <__aeabi_ddiv+0x55e>
 80011fc:	e72e      	b.n	800105c <__aeabi_ddiv+0x3bc>
 80011fe:	454b      	cmp	r3, r9
 8001200:	d000      	beq.n	8001204 <__aeabi_ddiv+0x564>
 8001202:	e72b      	b.n	800105c <__aeabi_ddiv+0x3bc>
 8001204:	0035      	movs	r5, r6
 8001206:	e72c      	b.n	8001062 <__aeabi_ddiv+0x3c2>
 8001208:	4b2a      	ldr	r3, [pc, #168]	@ (80012b4 <__aeabi_ddiv+0x614>)
 800120a:	4a2f      	ldr	r2, [pc, #188]	@ (80012c8 <__aeabi_ddiv+0x628>)
 800120c:	4453      	add	r3, sl
 800120e:	4592      	cmp	sl, r2
 8001210:	db43      	blt.n	800129a <__aeabi_ddiv+0x5fa>
 8001212:	2201      	movs	r2, #1
 8001214:	2100      	movs	r1, #0
 8001216:	4493      	add	fp, r2
 8001218:	e72c      	b.n	8001074 <__aeabi_ddiv+0x3d4>
 800121a:	42ac      	cmp	r4, r5
 800121c:	d800      	bhi.n	8001220 <__aeabi_ddiv+0x580>
 800121e:	e6d7      	b.n	8000fd0 <__aeabi_ddiv+0x330>
 8001220:	2302      	movs	r3, #2
 8001222:	425b      	negs	r3, r3
 8001224:	469c      	mov	ip, r3
 8001226:	9900      	ldr	r1, [sp, #0]
 8001228:	444d      	add	r5, r9
 800122a:	454d      	cmp	r5, r9
 800122c:	419b      	sbcs	r3, r3
 800122e:	44e3      	add	fp, ip
 8001230:	468c      	mov	ip, r1
 8001232:	425b      	negs	r3, r3
 8001234:	4463      	add	r3, ip
 8001236:	18c0      	adds	r0, r0, r3
 8001238:	e6cc      	b.n	8000fd4 <__aeabi_ddiv+0x334>
 800123a:	201f      	movs	r0, #31
 800123c:	4240      	negs	r0, r0
 800123e:	1ac3      	subs	r3, r0, r3
 8001240:	4658      	mov	r0, fp
 8001242:	40d8      	lsrs	r0, r3
 8001244:	2920      	cmp	r1, #32
 8001246:	d004      	beq.n	8001252 <__aeabi_ddiv+0x5b2>
 8001248:	4659      	mov	r1, fp
 800124a:	4b20      	ldr	r3, [pc, #128]	@ (80012cc <__aeabi_ddiv+0x62c>)
 800124c:	4453      	add	r3, sl
 800124e:	4099      	lsls	r1, r3
 8001250:	430a      	orrs	r2, r1
 8001252:	1e53      	subs	r3, r2, #1
 8001254:	419a      	sbcs	r2, r3
 8001256:	2307      	movs	r3, #7
 8001258:	0019      	movs	r1, r3
 800125a:	4302      	orrs	r2, r0
 800125c:	2400      	movs	r4, #0
 800125e:	4011      	ands	r1, r2
 8001260:	4213      	tst	r3, r2
 8001262:	d009      	beq.n	8001278 <__aeabi_ddiv+0x5d8>
 8001264:	3308      	adds	r3, #8
 8001266:	4013      	ands	r3, r2
 8001268:	2b04      	cmp	r3, #4
 800126a:	d01d      	beq.n	80012a8 <__aeabi_ddiv+0x608>
 800126c:	1d13      	adds	r3, r2, #4
 800126e:	4293      	cmp	r3, r2
 8001270:	4189      	sbcs	r1, r1
 8001272:	001a      	movs	r2, r3
 8001274:	4249      	negs	r1, r1
 8001276:	0749      	lsls	r1, r1, #29
 8001278:	08d2      	lsrs	r2, r2, #3
 800127a:	430a      	orrs	r2, r1
 800127c:	4690      	mov	r8, r2
 800127e:	2300      	movs	r3, #0
 8001280:	e57a      	b.n	8000d78 <__aeabi_ddiv+0xd8>
 8001282:	4649      	mov	r1, r9
 8001284:	9f00      	ldr	r7, [sp, #0]
 8001286:	004d      	lsls	r5, r1, #1
 8001288:	454d      	cmp	r5, r9
 800128a:	4189      	sbcs	r1, r1
 800128c:	46bc      	mov	ip, r7
 800128e:	4249      	negs	r1, r1
 8001290:	4461      	add	r1, ip
 8001292:	46a9      	mov	r9, r5
 8001294:	3a02      	subs	r2, #2
 8001296:	1864      	adds	r4, r4, r1
 8001298:	e7ae      	b.n	80011f8 <__aeabi_ddiv+0x558>
 800129a:	2201      	movs	r2, #1
 800129c:	4252      	negs	r2, r2
 800129e:	e746      	b.n	800112e <__aeabi_ddiv+0x48e>
 80012a0:	4599      	cmp	r9, r3
 80012a2:	d3ee      	bcc.n	8001282 <__aeabi_ddiv+0x5e2>
 80012a4:	000a      	movs	r2, r1
 80012a6:	e7aa      	b.n	80011fe <__aeabi_ddiv+0x55e>
 80012a8:	2100      	movs	r1, #0
 80012aa:	e7e5      	b.n	8001278 <__aeabi_ddiv+0x5d8>
 80012ac:	0759      	lsls	r1, r3, #29
 80012ae:	025b      	lsls	r3, r3, #9
 80012b0:	0b1c      	lsrs	r4, r3, #12
 80012b2:	e7e1      	b.n	8001278 <__aeabi_ddiv+0x5d8>
 80012b4:	000003ff 	.word	0x000003ff
 80012b8:	feffffff 	.word	0xfeffffff
 80012bc:	000007fe 	.word	0x000007fe
 80012c0:	000007ff 	.word	0x000007ff
 80012c4:	0000041e 	.word	0x0000041e
 80012c8:	fffffc02 	.word	0xfffffc02
 80012cc:	0000043e 	.word	0x0000043e

080012d0 <__aeabi_dsub>:
 80012d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d2:	4657      	mov	r7, sl
 80012d4:	464e      	mov	r6, r9
 80012d6:	4645      	mov	r5, r8
 80012d8:	46de      	mov	lr, fp
 80012da:	b5e0      	push	{r5, r6, r7, lr}
 80012dc:	b083      	sub	sp, #12
 80012de:	9000      	str	r0, [sp, #0]
 80012e0:	9101      	str	r1, [sp, #4]
 80012e2:	030c      	lsls	r4, r1, #12
 80012e4:	004d      	lsls	r5, r1, #1
 80012e6:	0fce      	lsrs	r6, r1, #31
 80012e8:	0a61      	lsrs	r1, r4, #9
 80012ea:	9c00      	ldr	r4, [sp, #0]
 80012ec:	005f      	lsls	r7, r3, #1
 80012ee:	0f64      	lsrs	r4, r4, #29
 80012f0:	430c      	orrs	r4, r1
 80012f2:	9900      	ldr	r1, [sp, #0]
 80012f4:	9200      	str	r2, [sp, #0]
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	00c8      	lsls	r0, r1, #3
 80012fa:	0319      	lsls	r1, r3, #12
 80012fc:	0d7b      	lsrs	r3, r7, #21
 80012fe:	4699      	mov	r9, r3
 8001300:	9b01      	ldr	r3, [sp, #4]
 8001302:	4fcc      	ldr	r7, [pc, #816]	@ (8001634 <__aeabi_dsub+0x364>)
 8001304:	0fdb      	lsrs	r3, r3, #31
 8001306:	469c      	mov	ip, r3
 8001308:	0a4b      	lsrs	r3, r1, #9
 800130a:	9900      	ldr	r1, [sp, #0]
 800130c:	4680      	mov	r8, r0
 800130e:	0f49      	lsrs	r1, r1, #29
 8001310:	4319      	orrs	r1, r3
 8001312:	9b00      	ldr	r3, [sp, #0]
 8001314:	468b      	mov	fp, r1
 8001316:	00da      	lsls	r2, r3, #3
 8001318:	4692      	mov	sl, r2
 800131a:	0d6d      	lsrs	r5, r5, #21
 800131c:	45b9      	cmp	r9, r7
 800131e:	d100      	bne.n	8001322 <__aeabi_dsub+0x52>
 8001320:	e0bf      	b.n	80014a2 <__aeabi_dsub+0x1d2>
 8001322:	2301      	movs	r3, #1
 8001324:	4661      	mov	r1, ip
 8001326:	4059      	eors	r1, r3
 8001328:	464b      	mov	r3, r9
 800132a:	468c      	mov	ip, r1
 800132c:	1aeb      	subs	r3, r5, r3
 800132e:	428e      	cmp	r6, r1
 8001330:	d075      	beq.n	800141e <__aeabi_dsub+0x14e>
 8001332:	2b00      	cmp	r3, #0
 8001334:	dc00      	bgt.n	8001338 <__aeabi_dsub+0x68>
 8001336:	e2a3      	b.n	8001880 <__aeabi_dsub+0x5b0>
 8001338:	4649      	mov	r1, r9
 800133a:	2900      	cmp	r1, #0
 800133c:	d100      	bne.n	8001340 <__aeabi_dsub+0x70>
 800133e:	e0ce      	b.n	80014de <__aeabi_dsub+0x20e>
 8001340:	42bd      	cmp	r5, r7
 8001342:	d100      	bne.n	8001346 <__aeabi_dsub+0x76>
 8001344:	e200      	b.n	8001748 <__aeabi_dsub+0x478>
 8001346:	2701      	movs	r7, #1
 8001348:	2b38      	cmp	r3, #56	@ 0x38
 800134a:	dc19      	bgt.n	8001380 <__aeabi_dsub+0xb0>
 800134c:	2780      	movs	r7, #128	@ 0x80
 800134e:	4659      	mov	r1, fp
 8001350:	043f      	lsls	r7, r7, #16
 8001352:	4339      	orrs	r1, r7
 8001354:	468b      	mov	fp, r1
 8001356:	2b1f      	cmp	r3, #31
 8001358:	dd00      	ble.n	800135c <__aeabi_dsub+0x8c>
 800135a:	e1fa      	b.n	8001752 <__aeabi_dsub+0x482>
 800135c:	2720      	movs	r7, #32
 800135e:	1af9      	subs	r1, r7, r3
 8001360:	468c      	mov	ip, r1
 8001362:	4659      	mov	r1, fp
 8001364:	4667      	mov	r7, ip
 8001366:	40b9      	lsls	r1, r7
 8001368:	000f      	movs	r7, r1
 800136a:	0011      	movs	r1, r2
 800136c:	40d9      	lsrs	r1, r3
 800136e:	430f      	orrs	r7, r1
 8001370:	4661      	mov	r1, ip
 8001372:	408a      	lsls	r2, r1
 8001374:	1e51      	subs	r1, r2, #1
 8001376:	418a      	sbcs	r2, r1
 8001378:	4659      	mov	r1, fp
 800137a:	40d9      	lsrs	r1, r3
 800137c:	4317      	orrs	r7, r2
 800137e:	1a64      	subs	r4, r4, r1
 8001380:	1bc7      	subs	r7, r0, r7
 8001382:	42b8      	cmp	r0, r7
 8001384:	4180      	sbcs	r0, r0
 8001386:	4240      	negs	r0, r0
 8001388:	1a24      	subs	r4, r4, r0
 800138a:	0223      	lsls	r3, r4, #8
 800138c:	d400      	bmi.n	8001390 <__aeabi_dsub+0xc0>
 800138e:	e140      	b.n	8001612 <__aeabi_dsub+0x342>
 8001390:	0264      	lsls	r4, r4, #9
 8001392:	0a64      	lsrs	r4, r4, #9
 8001394:	2c00      	cmp	r4, #0
 8001396:	d100      	bne.n	800139a <__aeabi_dsub+0xca>
 8001398:	e154      	b.n	8001644 <__aeabi_dsub+0x374>
 800139a:	0020      	movs	r0, r4
 800139c:	f000 fd14 	bl	8001dc8 <__clzsi2>
 80013a0:	0003      	movs	r3, r0
 80013a2:	3b08      	subs	r3, #8
 80013a4:	2120      	movs	r1, #32
 80013a6:	0038      	movs	r0, r7
 80013a8:	1aca      	subs	r2, r1, r3
 80013aa:	40d0      	lsrs	r0, r2
 80013ac:	409c      	lsls	r4, r3
 80013ae:	0002      	movs	r2, r0
 80013b0:	409f      	lsls	r7, r3
 80013b2:	4322      	orrs	r2, r4
 80013b4:	429d      	cmp	r5, r3
 80013b6:	dd00      	ble.n	80013ba <__aeabi_dsub+0xea>
 80013b8:	e1a6      	b.n	8001708 <__aeabi_dsub+0x438>
 80013ba:	1b58      	subs	r0, r3, r5
 80013bc:	3001      	adds	r0, #1
 80013be:	1a09      	subs	r1, r1, r0
 80013c0:	003c      	movs	r4, r7
 80013c2:	408f      	lsls	r7, r1
 80013c4:	40c4      	lsrs	r4, r0
 80013c6:	1e7b      	subs	r3, r7, #1
 80013c8:	419f      	sbcs	r7, r3
 80013ca:	0013      	movs	r3, r2
 80013cc:	408b      	lsls	r3, r1
 80013ce:	4327      	orrs	r7, r4
 80013d0:	431f      	orrs	r7, r3
 80013d2:	40c2      	lsrs	r2, r0
 80013d4:	003b      	movs	r3, r7
 80013d6:	0014      	movs	r4, r2
 80013d8:	2500      	movs	r5, #0
 80013da:	4313      	orrs	r3, r2
 80013dc:	d100      	bne.n	80013e0 <__aeabi_dsub+0x110>
 80013de:	e1f7      	b.n	80017d0 <__aeabi_dsub+0x500>
 80013e0:	077b      	lsls	r3, r7, #29
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dsub+0x116>
 80013e4:	e377      	b.n	8001ad6 <__aeabi_dsub+0x806>
 80013e6:	230f      	movs	r3, #15
 80013e8:	0038      	movs	r0, r7
 80013ea:	403b      	ands	r3, r7
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d004      	beq.n	80013fa <__aeabi_dsub+0x12a>
 80013f0:	1d38      	adds	r0, r7, #4
 80013f2:	42b8      	cmp	r0, r7
 80013f4:	41bf      	sbcs	r7, r7
 80013f6:	427f      	negs	r7, r7
 80013f8:	19e4      	adds	r4, r4, r7
 80013fa:	0223      	lsls	r3, r4, #8
 80013fc:	d400      	bmi.n	8001400 <__aeabi_dsub+0x130>
 80013fe:	e368      	b.n	8001ad2 <__aeabi_dsub+0x802>
 8001400:	4b8c      	ldr	r3, [pc, #560]	@ (8001634 <__aeabi_dsub+0x364>)
 8001402:	3501      	adds	r5, #1
 8001404:	429d      	cmp	r5, r3
 8001406:	d100      	bne.n	800140a <__aeabi_dsub+0x13a>
 8001408:	e0f4      	b.n	80015f4 <__aeabi_dsub+0x324>
 800140a:	4b8b      	ldr	r3, [pc, #556]	@ (8001638 <__aeabi_dsub+0x368>)
 800140c:	056d      	lsls	r5, r5, #21
 800140e:	401c      	ands	r4, r3
 8001410:	0d6d      	lsrs	r5, r5, #21
 8001412:	0767      	lsls	r7, r4, #29
 8001414:	08c0      	lsrs	r0, r0, #3
 8001416:	0264      	lsls	r4, r4, #9
 8001418:	4307      	orrs	r7, r0
 800141a:	0b24      	lsrs	r4, r4, #12
 800141c:	e0ec      	b.n	80015f8 <__aeabi_dsub+0x328>
 800141e:	2b00      	cmp	r3, #0
 8001420:	dc00      	bgt.n	8001424 <__aeabi_dsub+0x154>
 8001422:	e329      	b.n	8001a78 <__aeabi_dsub+0x7a8>
 8001424:	4649      	mov	r1, r9
 8001426:	2900      	cmp	r1, #0
 8001428:	d000      	beq.n	800142c <__aeabi_dsub+0x15c>
 800142a:	e0d6      	b.n	80015da <__aeabi_dsub+0x30a>
 800142c:	4659      	mov	r1, fp
 800142e:	4311      	orrs	r1, r2
 8001430:	d100      	bne.n	8001434 <__aeabi_dsub+0x164>
 8001432:	e12e      	b.n	8001692 <__aeabi_dsub+0x3c2>
 8001434:	1e59      	subs	r1, r3, #1
 8001436:	2b01      	cmp	r3, #1
 8001438:	d100      	bne.n	800143c <__aeabi_dsub+0x16c>
 800143a:	e1e6      	b.n	800180a <__aeabi_dsub+0x53a>
 800143c:	42bb      	cmp	r3, r7
 800143e:	d100      	bne.n	8001442 <__aeabi_dsub+0x172>
 8001440:	e182      	b.n	8001748 <__aeabi_dsub+0x478>
 8001442:	2701      	movs	r7, #1
 8001444:	000b      	movs	r3, r1
 8001446:	2938      	cmp	r1, #56	@ 0x38
 8001448:	dc14      	bgt.n	8001474 <__aeabi_dsub+0x1a4>
 800144a:	2b1f      	cmp	r3, #31
 800144c:	dd00      	ble.n	8001450 <__aeabi_dsub+0x180>
 800144e:	e23c      	b.n	80018ca <__aeabi_dsub+0x5fa>
 8001450:	2720      	movs	r7, #32
 8001452:	1af9      	subs	r1, r7, r3
 8001454:	468c      	mov	ip, r1
 8001456:	4659      	mov	r1, fp
 8001458:	4667      	mov	r7, ip
 800145a:	40b9      	lsls	r1, r7
 800145c:	000f      	movs	r7, r1
 800145e:	0011      	movs	r1, r2
 8001460:	40d9      	lsrs	r1, r3
 8001462:	430f      	orrs	r7, r1
 8001464:	4661      	mov	r1, ip
 8001466:	408a      	lsls	r2, r1
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	418a      	sbcs	r2, r1
 800146c:	4659      	mov	r1, fp
 800146e:	40d9      	lsrs	r1, r3
 8001470:	4317      	orrs	r7, r2
 8001472:	1864      	adds	r4, r4, r1
 8001474:	183f      	adds	r7, r7, r0
 8001476:	4287      	cmp	r7, r0
 8001478:	4180      	sbcs	r0, r0
 800147a:	4240      	negs	r0, r0
 800147c:	1824      	adds	r4, r4, r0
 800147e:	0223      	lsls	r3, r4, #8
 8001480:	d400      	bmi.n	8001484 <__aeabi_dsub+0x1b4>
 8001482:	e0c6      	b.n	8001612 <__aeabi_dsub+0x342>
 8001484:	4b6b      	ldr	r3, [pc, #428]	@ (8001634 <__aeabi_dsub+0x364>)
 8001486:	3501      	adds	r5, #1
 8001488:	429d      	cmp	r5, r3
 800148a:	d100      	bne.n	800148e <__aeabi_dsub+0x1be>
 800148c:	e0b2      	b.n	80015f4 <__aeabi_dsub+0x324>
 800148e:	2101      	movs	r1, #1
 8001490:	4b69      	ldr	r3, [pc, #420]	@ (8001638 <__aeabi_dsub+0x368>)
 8001492:	087a      	lsrs	r2, r7, #1
 8001494:	401c      	ands	r4, r3
 8001496:	4039      	ands	r1, r7
 8001498:	430a      	orrs	r2, r1
 800149a:	07e7      	lsls	r7, r4, #31
 800149c:	4317      	orrs	r7, r2
 800149e:	0864      	lsrs	r4, r4, #1
 80014a0:	e79e      	b.n	80013e0 <__aeabi_dsub+0x110>
 80014a2:	4b66      	ldr	r3, [pc, #408]	@ (800163c <__aeabi_dsub+0x36c>)
 80014a4:	4311      	orrs	r1, r2
 80014a6:	468a      	mov	sl, r1
 80014a8:	18eb      	adds	r3, r5, r3
 80014aa:	2900      	cmp	r1, #0
 80014ac:	d028      	beq.n	8001500 <__aeabi_dsub+0x230>
 80014ae:	4566      	cmp	r6, ip
 80014b0:	d02c      	beq.n	800150c <__aeabi_dsub+0x23c>
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d05b      	beq.n	800156e <__aeabi_dsub+0x29e>
 80014b6:	2d00      	cmp	r5, #0
 80014b8:	d100      	bne.n	80014bc <__aeabi_dsub+0x1ec>
 80014ba:	e12c      	b.n	8001716 <__aeabi_dsub+0x446>
 80014bc:	465b      	mov	r3, fp
 80014be:	4666      	mov	r6, ip
 80014c0:	075f      	lsls	r7, r3, #29
 80014c2:	08d2      	lsrs	r2, r2, #3
 80014c4:	4317      	orrs	r7, r2
 80014c6:	08dd      	lsrs	r5, r3, #3
 80014c8:	003b      	movs	r3, r7
 80014ca:	432b      	orrs	r3, r5
 80014cc:	d100      	bne.n	80014d0 <__aeabi_dsub+0x200>
 80014ce:	e0e2      	b.n	8001696 <__aeabi_dsub+0x3c6>
 80014d0:	2480      	movs	r4, #128	@ 0x80
 80014d2:	0324      	lsls	r4, r4, #12
 80014d4:	432c      	orrs	r4, r5
 80014d6:	0324      	lsls	r4, r4, #12
 80014d8:	4d56      	ldr	r5, [pc, #344]	@ (8001634 <__aeabi_dsub+0x364>)
 80014da:	0b24      	lsrs	r4, r4, #12
 80014dc:	e08c      	b.n	80015f8 <__aeabi_dsub+0x328>
 80014de:	4659      	mov	r1, fp
 80014e0:	4311      	orrs	r1, r2
 80014e2:	d100      	bne.n	80014e6 <__aeabi_dsub+0x216>
 80014e4:	e0d5      	b.n	8001692 <__aeabi_dsub+0x3c2>
 80014e6:	1e59      	subs	r1, r3, #1
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d100      	bne.n	80014ee <__aeabi_dsub+0x21e>
 80014ec:	e1b9      	b.n	8001862 <__aeabi_dsub+0x592>
 80014ee:	42bb      	cmp	r3, r7
 80014f0:	d100      	bne.n	80014f4 <__aeabi_dsub+0x224>
 80014f2:	e1b1      	b.n	8001858 <__aeabi_dsub+0x588>
 80014f4:	2701      	movs	r7, #1
 80014f6:	000b      	movs	r3, r1
 80014f8:	2938      	cmp	r1, #56	@ 0x38
 80014fa:	dd00      	ble.n	80014fe <__aeabi_dsub+0x22e>
 80014fc:	e740      	b.n	8001380 <__aeabi_dsub+0xb0>
 80014fe:	e72a      	b.n	8001356 <__aeabi_dsub+0x86>
 8001500:	4661      	mov	r1, ip
 8001502:	2701      	movs	r7, #1
 8001504:	4079      	eors	r1, r7
 8001506:	468c      	mov	ip, r1
 8001508:	4566      	cmp	r6, ip
 800150a:	d1d2      	bne.n	80014b2 <__aeabi_dsub+0x1e2>
 800150c:	2b00      	cmp	r3, #0
 800150e:	d100      	bne.n	8001512 <__aeabi_dsub+0x242>
 8001510:	e0c5      	b.n	800169e <__aeabi_dsub+0x3ce>
 8001512:	2d00      	cmp	r5, #0
 8001514:	d000      	beq.n	8001518 <__aeabi_dsub+0x248>
 8001516:	e155      	b.n	80017c4 <__aeabi_dsub+0x4f4>
 8001518:	464b      	mov	r3, r9
 800151a:	0025      	movs	r5, r4
 800151c:	4305      	orrs	r5, r0
 800151e:	d100      	bne.n	8001522 <__aeabi_dsub+0x252>
 8001520:	e212      	b.n	8001948 <__aeabi_dsub+0x678>
 8001522:	1e59      	subs	r1, r3, #1
 8001524:	468c      	mov	ip, r1
 8001526:	2b01      	cmp	r3, #1
 8001528:	d100      	bne.n	800152c <__aeabi_dsub+0x25c>
 800152a:	e249      	b.n	80019c0 <__aeabi_dsub+0x6f0>
 800152c:	4d41      	ldr	r5, [pc, #260]	@ (8001634 <__aeabi_dsub+0x364>)
 800152e:	42ab      	cmp	r3, r5
 8001530:	d100      	bne.n	8001534 <__aeabi_dsub+0x264>
 8001532:	e28f      	b.n	8001a54 <__aeabi_dsub+0x784>
 8001534:	2701      	movs	r7, #1
 8001536:	2938      	cmp	r1, #56	@ 0x38
 8001538:	dc11      	bgt.n	800155e <__aeabi_dsub+0x28e>
 800153a:	4663      	mov	r3, ip
 800153c:	2b1f      	cmp	r3, #31
 800153e:	dd00      	ble.n	8001542 <__aeabi_dsub+0x272>
 8001540:	e25b      	b.n	80019fa <__aeabi_dsub+0x72a>
 8001542:	4661      	mov	r1, ip
 8001544:	2320      	movs	r3, #32
 8001546:	0027      	movs	r7, r4
 8001548:	1a5b      	subs	r3, r3, r1
 800154a:	0005      	movs	r5, r0
 800154c:	4098      	lsls	r0, r3
 800154e:	409f      	lsls	r7, r3
 8001550:	40cd      	lsrs	r5, r1
 8001552:	1e43      	subs	r3, r0, #1
 8001554:	4198      	sbcs	r0, r3
 8001556:	40cc      	lsrs	r4, r1
 8001558:	432f      	orrs	r7, r5
 800155a:	4307      	orrs	r7, r0
 800155c:	44a3      	add	fp, r4
 800155e:	18bf      	adds	r7, r7, r2
 8001560:	4297      	cmp	r7, r2
 8001562:	4192      	sbcs	r2, r2
 8001564:	4252      	negs	r2, r2
 8001566:	445a      	add	r2, fp
 8001568:	0014      	movs	r4, r2
 800156a:	464d      	mov	r5, r9
 800156c:	e787      	b.n	800147e <__aeabi_dsub+0x1ae>
 800156e:	4f34      	ldr	r7, [pc, #208]	@ (8001640 <__aeabi_dsub+0x370>)
 8001570:	1c6b      	adds	r3, r5, #1
 8001572:	423b      	tst	r3, r7
 8001574:	d000      	beq.n	8001578 <__aeabi_dsub+0x2a8>
 8001576:	e0b6      	b.n	80016e6 <__aeabi_dsub+0x416>
 8001578:	4659      	mov	r1, fp
 800157a:	0023      	movs	r3, r4
 800157c:	4311      	orrs	r1, r2
 800157e:	000f      	movs	r7, r1
 8001580:	4303      	orrs	r3, r0
 8001582:	2d00      	cmp	r5, #0
 8001584:	d000      	beq.n	8001588 <__aeabi_dsub+0x2b8>
 8001586:	e126      	b.n	80017d6 <__aeabi_dsub+0x506>
 8001588:	2b00      	cmp	r3, #0
 800158a:	d100      	bne.n	800158e <__aeabi_dsub+0x2be>
 800158c:	e1c0      	b.n	8001910 <__aeabi_dsub+0x640>
 800158e:	2900      	cmp	r1, #0
 8001590:	d100      	bne.n	8001594 <__aeabi_dsub+0x2c4>
 8001592:	e0a1      	b.n	80016d8 <__aeabi_dsub+0x408>
 8001594:	1a83      	subs	r3, r0, r2
 8001596:	4698      	mov	r8, r3
 8001598:	465b      	mov	r3, fp
 800159a:	4540      	cmp	r0, r8
 800159c:	41ad      	sbcs	r5, r5
 800159e:	1ae3      	subs	r3, r4, r3
 80015a0:	426d      	negs	r5, r5
 80015a2:	1b5b      	subs	r3, r3, r5
 80015a4:	2580      	movs	r5, #128	@ 0x80
 80015a6:	042d      	lsls	r5, r5, #16
 80015a8:	422b      	tst	r3, r5
 80015aa:	d100      	bne.n	80015ae <__aeabi_dsub+0x2de>
 80015ac:	e14b      	b.n	8001846 <__aeabi_dsub+0x576>
 80015ae:	465b      	mov	r3, fp
 80015b0:	1a10      	subs	r0, r2, r0
 80015b2:	4282      	cmp	r2, r0
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	1b1c      	subs	r4, r3, r4
 80015b8:	0007      	movs	r7, r0
 80015ba:	2601      	movs	r6, #1
 80015bc:	4663      	mov	r3, ip
 80015be:	4252      	negs	r2, r2
 80015c0:	1aa4      	subs	r4, r4, r2
 80015c2:	4327      	orrs	r7, r4
 80015c4:	401e      	ands	r6, r3
 80015c6:	2f00      	cmp	r7, #0
 80015c8:	d100      	bne.n	80015cc <__aeabi_dsub+0x2fc>
 80015ca:	e142      	b.n	8001852 <__aeabi_dsub+0x582>
 80015cc:	422c      	tst	r4, r5
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dsub+0x302>
 80015d0:	e26d      	b.n	8001aae <__aeabi_dsub+0x7de>
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <__aeabi_dsub+0x368>)
 80015d4:	2501      	movs	r5, #1
 80015d6:	401c      	ands	r4, r3
 80015d8:	e71b      	b.n	8001412 <__aeabi_dsub+0x142>
 80015da:	42bd      	cmp	r5, r7
 80015dc:	d100      	bne.n	80015e0 <__aeabi_dsub+0x310>
 80015de:	e13b      	b.n	8001858 <__aeabi_dsub+0x588>
 80015e0:	2701      	movs	r7, #1
 80015e2:	2b38      	cmp	r3, #56	@ 0x38
 80015e4:	dd00      	ble.n	80015e8 <__aeabi_dsub+0x318>
 80015e6:	e745      	b.n	8001474 <__aeabi_dsub+0x1a4>
 80015e8:	2780      	movs	r7, #128	@ 0x80
 80015ea:	4659      	mov	r1, fp
 80015ec:	043f      	lsls	r7, r7, #16
 80015ee:	4339      	orrs	r1, r7
 80015f0:	468b      	mov	fp, r1
 80015f2:	e72a      	b.n	800144a <__aeabi_dsub+0x17a>
 80015f4:	2400      	movs	r4, #0
 80015f6:	2700      	movs	r7, #0
 80015f8:	052d      	lsls	r5, r5, #20
 80015fa:	4325      	orrs	r5, r4
 80015fc:	07f6      	lsls	r6, r6, #31
 80015fe:	4335      	orrs	r5, r6
 8001600:	0038      	movs	r0, r7
 8001602:	0029      	movs	r1, r5
 8001604:	b003      	add	sp, #12
 8001606:	bcf0      	pop	{r4, r5, r6, r7}
 8001608:	46bb      	mov	fp, r7
 800160a:	46b2      	mov	sl, r6
 800160c:	46a9      	mov	r9, r5
 800160e:	46a0      	mov	r8, r4
 8001610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001612:	077b      	lsls	r3, r7, #29
 8001614:	d004      	beq.n	8001620 <__aeabi_dsub+0x350>
 8001616:	230f      	movs	r3, #15
 8001618:	403b      	ands	r3, r7
 800161a:	2b04      	cmp	r3, #4
 800161c:	d000      	beq.n	8001620 <__aeabi_dsub+0x350>
 800161e:	e6e7      	b.n	80013f0 <__aeabi_dsub+0x120>
 8001620:	002b      	movs	r3, r5
 8001622:	08f8      	lsrs	r0, r7, #3
 8001624:	4a03      	ldr	r2, [pc, #12]	@ (8001634 <__aeabi_dsub+0x364>)
 8001626:	0767      	lsls	r7, r4, #29
 8001628:	4307      	orrs	r7, r0
 800162a:	08e5      	lsrs	r5, r4, #3
 800162c:	4293      	cmp	r3, r2
 800162e:	d100      	bne.n	8001632 <__aeabi_dsub+0x362>
 8001630:	e74a      	b.n	80014c8 <__aeabi_dsub+0x1f8>
 8001632:	e0a5      	b.n	8001780 <__aeabi_dsub+0x4b0>
 8001634:	000007ff 	.word	0x000007ff
 8001638:	ff7fffff 	.word	0xff7fffff
 800163c:	fffff801 	.word	0xfffff801
 8001640:	000007fe 	.word	0x000007fe
 8001644:	0038      	movs	r0, r7
 8001646:	f000 fbbf 	bl	8001dc8 <__clzsi2>
 800164a:	0003      	movs	r3, r0
 800164c:	3318      	adds	r3, #24
 800164e:	2b1f      	cmp	r3, #31
 8001650:	dc00      	bgt.n	8001654 <__aeabi_dsub+0x384>
 8001652:	e6a7      	b.n	80013a4 <__aeabi_dsub+0xd4>
 8001654:	003a      	movs	r2, r7
 8001656:	3808      	subs	r0, #8
 8001658:	4082      	lsls	r2, r0
 800165a:	429d      	cmp	r5, r3
 800165c:	dd00      	ble.n	8001660 <__aeabi_dsub+0x390>
 800165e:	e08a      	b.n	8001776 <__aeabi_dsub+0x4a6>
 8001660:	1b5b      	subs	r3, r3, r5
 8001662:	1c58      	adds	r0, r3, #1
 8001664:	281f      	cmp	r0, #31
 8001666:	dc00      	bgt.n	800166a <__aeabi_dsub+0x39a>
 8001668:	e1d8      	b.n	8001a1c <__aeabi_dsub+0x74c>
 800166a:	0017      	movs	r7, r2
 800166c:	3b1f      	subs	r3, #31
 800166e:	40df      	lsrs	r7, r3
 8001670:	2820      	cmp	r0, #32
 8001672:	d005      	beq.n	8001680 <__aeabi_dsub+0x3b0>
 8001674:	2340      	movs	r3, #64	@ 0x40
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	409a      	lsls	r2, r3
 800167a:	1e53      	subs	r3, r2, #1
 800167c:	419a      	sbcs	r2, r3
 800167e:	4317      	orrs	r7, r2
 8001680:	2500      	movs	r5, #0
 8001682:	2f00      	cmp	r7, #0
 8001684:	d100      	bne.n	8001688 <__aeabi_dsub+0x3b8>
 8001686:	e0e5      	b.n	8001854 <__aeabi_dsub+0x584>
 8001688:	077b      	lsls	r3, r7, #29
 800168a:	d000      	beq.n	800168e <__aeabi_dsub+0x3be>
 800168c:	e6ab      	b.n	80013e6 <__aeabi_dsub+0x116>
 800168e:	002c      	movs	r4, r5
 8001690:	e7c6      	b.n	8001620 <__aeabi_dsub+0x350>
 8001692:	08c0      	lsrs	r0, r0, #3
 8001694:	e7c6      	b.n	8001624 <__aeabi_dsub+0x354>
 8001696:	2700      	movs	r7, #0
 8001698:	2400      	movs	r4, #0
 800169a:	4dd1      	ldr	r5, [pc, #836]	@ (80019e0 <__aeabi_dsub+0x710>)
 800169c:	e7ac      	b.n	80015f8 <__aeabi_dsub+0x328>
 800169e:	4fd1      	ldr	r7, [pc, #836]	@ (80019e4 <__aeabi_dsub+0x714>)
 80016a0:	1c6b      	adds	r3, r5, #1
 80016a2:	423b      	tst	r3, r7
 80016a4:	d171      	bne.n	800178a <__aeabi_dsub+0x4ba>
 80016a6:	0023      	movs	r3, r4
 80016a8:	4303      	orrs	r3, r0
 80016aa:	2d00      	cmp	r5, #0
 80016ac:	d000      	beq.n	80016b0 <__aeabi_dsub+0x3e0>
 80016ae:	e14e      	b.n	800194e <__aeabi_dsub+0x67e>
 80016b0:	4657      	mov	r7, sl
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d100      	bne.n	80016b8 <__aeabi_dsub+0x3e8>
 80016b6:	e1b5      	b.n	8001a24 <__aeabi_dsub+0x754>
 80016b8:	2f00      	cmp	r7, #0
 80016ba:	d00d      	beq.n	80016d8 <__aeabi_dsub+0x408>
 80016bc:	1883      	adds	r3, r0, r2
 80016be:	4283      	cmp	r3, r0
 80016c0:	4180      	sbcs	r0, r0
 80016c2:	445c      	add	r4, fp
 80016c4:	4240      	negs	r0, r0
 80016c6:	1824      	adds	r4, r4, r0
 80016c8:	0222      	lsls	r2, r4, #8
 80016ca:	d500      	bpl.n	80016ce <__aeabi_dsub+0x3fe>
 80016cc:	e1c8      	b.n	8001a60 <__aeabi_dsub+0x790>
 80016ce:	001f      	movs	r7, r3
 80016d0:	4698      	mov	r8, r3
 80016d2:	4327      	orrs	r7, r4
 80016d4:	d100      	bne.n	80016d8 <__aeabi_dsub+0x408>
 80016d6:	e0bc      	b.n	8001852 <__aeabi_dsub+0x582>
 80016d8:	4643      	mov	r3, r8
 80016da:	0767      	lsls	r7, r4, #29
 80016dc:	08db      	lsrs	r3, r3, #3
 80016de:	431f      	orrs	r7, r3
 80016e0:	08e5      	lsrs	r5, r4, #3
 80016e2:	2300      	movs	r3, #0
 80016e4:	e04c      	b.n	8001780 <__aeabi_dsub+0x4b0>
 80016e6:	1a83      	subs	r3, r0, r2
 80016e8:	4698      	mov	r8, r3
 80016ea:	465b      	mov	r3, fp
 80016ec:	4540      	cmp	r0, r8
 80016ee:	41bf      	sbcs	r7, r7
 80016f0:	1ae3      	subs	r3, r4, r3
 80016f2:	427f      	negs	r7, r7
 80016f4:	1bdb      	subs	r3, r3, r7
 80016f6:	021f      	lsls	r7, r3, #8
 80016f8:	d47c      	bmi.n	80017f4 <__aeabi_dsub+0x524>
 80016fa:	4647      	mov	r7, r8
 80016fc:	431f      	orrs	r7, r3
 80016fe:	d100      	bne.n	8001702 <__aeabi_dsub+0x432>
 8001700:	e0a6      	b.n	8001850 <__aeabi_dsub+0x580>
 8001702:	001c      	movs	r4, r3
 8001704:	4647      	mov	r7, r8
 8001706:	e645      	b.n	8001394 <__aeabi_dsub+0xc4>
 8001708:	4cb7      	ldr	r4, [pc, #732]	@ (80019e8 <__aeabi_dsub+0x718>)
 800170a:	1aed      	subs	r5, r5, r3
 800170c:	4014      	ands	r4, r2
 800170e:	077b      	lsls	r3, r7, #29
 8001710:	d000      	beq.n	8001714 <__aeabi_dsub+0x444>
 8001712:	e780      	b.n	8001616 <__aeabi_dsub+0x346>
 8001714:	e784      	b.n	8001620 <__aeabi_dsub+0x350>
 8001716:	464b      	mov	r3, r9
 8001718:	0025      	movs	r5, r4
 800171a:	4305      	orrs	r5, r0
 800171c:	d066      	beq.n	80017ec <__aeabi_dsub+0x51c>
 800171e:	1e5f      	subs	r7, r3, #1
 8001720:	2b01      	cmp	r3, #1
 8001722:	d100      	bne.n	8001726 <__aeabi_dsub+0x456>
 8001724:	e0fc      	b.n	8001920 <__aeabi_dsub+0x650>
 8001726:	4dae      	ldr	r5, [pc, #696]	@ (80019e0 <__aeabi_dsub+0x710>)
 8001728:	42ab      	cmp	r3, r5
 800172a:	d100      	bne.n	800172e <__aeabi_dsub+0x45e>
 800172c:	e15e      	b.n	80019ec <__aeabi_dsub+0x71c>
 800172e:	4666      	mov	r6, ip
 8001730:	2f38      	cmp	r7, #56	@ 0x38
 8001732:	dc00      	bgt.n	8001736 <__aeabi_dsub+0x466>
 8001734:	e0b4      	b.n	80018a0 <__aeabi_dsub+0x5d0>
 8001736:	2001      	movs	r0, #1
 8001738:	1a17      	subs	r7, r2, r0
 800173a:	42ba      	cmp	r2, r7
 800173c:	4192      	sbcs	r2, r2
 800173e:	465b      	mov	r3, fp
 8001740:	4252      	negs	r2, r2
 8001742:	464d      	mov	r5, r9
 8001744:	1a9c      	subs	r4, r3, r2
 8001746:	e620      	b.n	800138a <__aeabi_dsub+0xba>
 8001748:	0767      	lsls	r7, r4, #29
 800174a:	08c0      	lsrs	r0, r0, #3
 800174c:	4307      	orrs	r7, r0
 800174e:	08e5      	lsrs	r5, r4, #3
 8001750:	e6ba      	b.n	80014c8 <__aeabi_dsub+0x1f8>
 8001752:	001f      	movs	r7, r3
 8001754:	4659      	mov	r1, fp
 8001756:	3f20      	subs	r7, #32
 8001758:	40f9      	lsrs	r1, r7
 800175a:	000f      	movs	r7, r1
 800175c:	2b20      	cmp	r3, #32
 800175e:	d005      	beq.n	800176c <__aeabi_dsub+0x49c>
 8001760:	2140      	movs	r1, #64	@ 0x40
 8001762:	1acb      	subs	r3, r1, r3
 8001764:	4659      	mov	r1, fp
 8001766:	4099      	lsls	r1, r3
 8001768:	430a      	orrs	r2, r1
 800176a:	4692      	mov	sl, r2
 800176c:	4653      	mov	r3, sl
 800176e:	1e5a      	subs	r2, r3, #1
 8001770:	4193      	sbcs	r3, r2
 8001772:	431f      	orrs	r7, r3
 8001774:	e604      	b.n	8001380 <__aeabi_dsub+0xb0>
 8001776:	1aeb      	subs	r3, r5, r3
 8001778:	4d9b      	ldr	r5, [pc, #620]	@ (80019e8 <__aeabi_dsub+0x718>)
 800177a:	4015      	ands	r5, r2
 800177c:	076f      	lsls	r7, r5, #29
 800177e:	08ed      	lsrs	r5, r5, #3
 8001780:	032c      	lsls	r4, r5, #12
 8001782:	055d      	lsls	r5, r3, #21
 8001784:	0b24      	lsrs	r4, r4, #12
 8001786:	0d6d      	lsrs	r5, r5, #21
 8001788:	e736      	b.n	80015f8 <__aeabi_dsub+0x328>
 800178a:	4d95      	ldr	r5, [pc, #596]	@ (80019e0 <__aeabi_dsub+0x710>)
 800178c:	42ab      	cmp	r3, r5
 800178e:	d100      	bne.n	8001792 <__aeabi_dsub+0x4c2>
 8001790:	e0d6      	b.n	8001940 <__aeabi_dsub+0x670>
 8001792:	1882      	adds	r2, r0, r2
 8001794:	0021      	movs	r1, r4
 8001796:	4282      	cmp	r2, r0
 8001798:	4180      	sbcs	r0, r0
 800179a:	4459      	add	r1, fp
 800179c:	4240      	negs	r0, r0
 800179e:	1808      	adds	r0, r1, r0
 80017a0:	07c7      	lsls	r7, r0, #31
 80017a2:	0852      	lsrs	r2, r2, #1
 80017a4:	4317      	orrs	r7, r2
 80017a6:	0844      	lsrs	r4, r0, #1
 80017a8:	0752      	lsls	r2, r2, #29
 80017aa:	d400      	bmi.n	80017ae <__aeabi_dsub+0x4de>
 80017ac:	e185      	b.n	8001aba <__aeabi_dsub+0x7ea>
 80017ae:	220f      	movs	r2, #15
 80017b0:	001d      	movs	r5, r3
 80017b2:	403a      	ands	r2, r7
 80017b4:	2a04      	cmp	r2, #4
 80017b6:	d000      	beq.n	80017ba <__aeabi_dsub+0x4ea>
 80017b8:	e61a      	b.n	80013f0 <__aeabi_dsub+0x120>
 80017ba:	08ff      	lsrs	r7, r7, #3
 80017bc:	0764      	lsls	r4, r4, #29
 80017be:	4327      	orrs	r7, r4
 80017c0:	0905      	lsrs	r5, r0, #4
 80017c2:	e7dd      	b.n	8001780 <__aeabi_dsub+0x4b0>
 80017c4:	465b      	mov	r3, fp
 80017c6:	08d2      	lsrs	r2, r2, #3
 80017c8:	075f      	lsls	r7, r3, #29
 80017ca:	4317      	orrs	r7, r2
 80017cc:	08dd      	lsrs	r5, r3, #3
 80017ce:	e67b      	b.n	80014c8 <__aeabi_dsub+0x1f8>
 80017d0:	2700      	movs	r7, #0
 80017d2:	2400      	movs	r4, #0
 80017d4:	e710      	b.n	80015f8 <__aeabi_dsub+0x328>
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d000      	beq.n	80017dc <__aeabi_dsub+0x50c>
 80017da:	e0d6      	b.n	800198a <__aeabi_dsub+0x6ba>
 80017dc:	2900      	cmp	r1, #0
 80017de:	d000      	beq.n	80017e2 <__aeabi_dsub+0x512>
 80017e0:	e12f      	b.n	8001a42 <__aeabi_dsub+0x772>
 80017e2:	2480      	movs	r4, #128	@ 0x80
 80017e4:	2600      	movs	r6, #0
 80017e6:	4d7e      	ldr	r5, [pc, #504]	@ (80019e0 <__aeabi_dsub+0x710>)
 80017e8:	0324      	lsls	r4, r4, #12
 80017ea:	e705      	b.n	80015f8 <__aeabi_dsub+0x328>
 80017ec:	4666      	mov	r6, ip
 80017ee:	465c      	mov	r4, fp
 80017f0:	08d0      	lsrs	r0, r2, #3
 80017f2:	e717      	b.n	8001624 <__aeabi_dsub+0x354>
 80017f4:	465b      	mov	r3, fp
 80017f6:	1a17      	subs	r7, r2, r0
 80017f8:	42ba      	cmp	r2, r7
 80017fa:	4192      	sbcs	r2, r2
 80017fc:	1b1c      	subs	r4, r3, r4
 80017fe:	2601      	movs	r6, #1
 8001800:	4663      	mov	r3, ip
 8001802:	4252      	negs	r2, r2
 8001804:	1aa4      	subs	r4, r4, r2
 8001806:	401e      	ands	r6, r3
 8001808:	e5c4      	b.n	8001394 <__aeabi_dsub+0xc4>
 800180a:	1883      	adds	r3, r0, r2
 800180c:	4283      	cmp	r3, r0
 800180e:	4180      	sbcs	r0, r0
 8001810:	445c      	add	r4, fp
 8001812:	4240      	negs	r0, r0
 8001814:	1825      	adds	r5, r4, r0
 8001816:	022a      	lsls	r2, r5, #8
 8001818:	d400      	bmi.n	800181c <__aeabi_dsub+0x54c>
 800181a:	e0da      	b.n	80019d2 <__aeabi_dsub+0x702>
 800181c:	4a72      	ldr	r2, [pc, #456]	@ (80019e8 <__aeabi_dsub+0x718>)
 800181e:	085b      	lsrs	r3, r3, #1
 8001820:	4015      	ands	r5, r2
 8001822:	07ea      	lsls	r2, r5, #31
 8001824:	431a      	orrs	r2, r3
 8001826:	0869      	lsrs	r1, r5, #1
 8001828:	075b      	lsls	r3, r3, #29
 800182a:	d400      	bmi.n	800182e <__aeabi_dsub+0x55e>
 800182c:	e14a      	b.n	8001ac4 <__aeabi_dsub+0x7f4>
 800182e:	230f      	movs	r3, #15
 8001830:	4013      	ands	r3, r2
 8001832:	2b04      	cmp	r3, #4
 8001834:	d100      	bne.n	8001838 <__aeabi_dsub+0x568>
 8001836:	e0fc      	b.n	8001a32 <__aeabi_dsub+0x762>
 8001838:	1d17      	adds	r7, r2, #4
 800183a:	4297      	cmp	r7, r2
 800183c:	41a4      	sbcs	r4, r4
 800183e:	4264      	negs	r4, r4
 8001840:	2502      	movs	r5, #2
 8001842:	1864      	adds	r4, r4, r1
 8001844:	e6ec      	b.n	8001620 <__aeabi_dsub+0x350>
 8001846:	4647      	mov	r7, r8
 8001848:	001c      	movs	r4, r3
 800184a:	431f      	orrs	r7, r3
 800184c:	d000      	beq.n	8001850 <__aeabi_dsub+0x580>
 800184e:	e743      	b.n	80016d8 <__aeabi_dsub+0x408>
 8001850:	2600      	movs	r6, #0
 8001852:	2500      	movs	r5, #0
 8001854:	2400      	movs	r4, #0
 8001856:	e6cf      	b.n	80015f8 <__aeabi_dsub+0x328>
 8001858:	08c0      	lsrs	r0, r0, #3
 800185a:	0767      	lsls	r7, r4, #29
 800185c:	4307      	orrs	r7, r0
 800185e:	08e5      	lsrs	r5, r4, #3
 8001860:	e632      	b.n	80014c8 <__aeabi_dsub+0x1f8>
 8001862:	1a87      	subs	r7, r0, r2
 8001864:	465b      	mov	r3, fp
 8001866:	42b8      	cmp	r0, r7
 8001868:	4180      	sbcs	r0, r0
 800186a:	1ae4      	subs	r4, r4, r3
 800186c:	4240      	negs	r0, r0
 800186e:	1a24      	subs	r4, r4, r0
 8001870:	0223      	lsls	r3, r4, #8
 8001872:	d428      	bmi.n	80018c6 <__aeabi_dsub+0x5f6>
 8001874:	0763      	lsls	r3, r4, #29
 8001876:	08ff      	lsrs	r7, r7, #3
 8001878:	431f      	orrs	r7, r3
 800187a:	08e5      	lsrs	r5, r4, #3
 800187c:	2301      	movs	r3, #1
 800187e:	e77f      	b.n	8001780 <__aeabi_dsub+0x4b0>
 8001880:	2b00      	cmp	r3, #0
 8001882:	d100      	bne.n	8001886 <__aeabi_dsub+0x5b6>
 8001884:	e673      	b.n	800156e <__aeabi_dsub+0x29e>
 8001886:	464b      	mov	r3, r9
 8001888:	1b5f      	subs	r7, r3, r5
 800188a:	003b      	movs	r3, r7
 800188c:	2d00      	cmp	r5, #0
 800188e:	d100      	bne.n	8001892 <__aeabi_dsub+0x5c2>
 8001890:	e742      	b.n	8001718 <__aeabi_dsub+0x448>
 8001892:	2f38      	cmp	r7, #56	@ 0x38
 8001894:	dd00      	ble.n	8001898 <__aeabi_dsub+0x5c8>
 8001896:	e0ec      	b.n	8001a72 <__aeabi_dsub+0x7a2>
 8001898:	2380      	movs	r3, #128	@ 0x80
 800189a:	000e      	movs	r6, r1
 800189c:	041b      	lsls	r3, r3, #16
 800189e:	431c      	orrs	r4, r3
 80018a0:	2f1f      	cmp	r7, #31
 80018a2:	dc25      	bgt.n	80018f0 <__aeabi_dsub+0x620>
 80018a4:	2520      	movs	r5, #32
 80018a6:	0023      	movs	r3, r4
 80018a8:	1bed      	subs	r5, r5, r7
 80018aa:	0001      	movs	r1, r0
 80018ac:	40a8      	lsls	r0, r5
 80018ae:	40ab      	lsls	r3, r5
 80018b0:	40f9      	lsrs	r1, r7
 80018b2:	1e45      	subs	r5, r0, #1
 80018b4:	41a8      	sbcs	r0, r5
 80018b6:	430b      	orrs	r3, r1
 80018b8:	40fc      	lsrs	r4, r7
 80018ba:	4318      	orrs	r0, r3
 80018bc:	465b      	mov	r3, fp
 80018be:	1b1b      	subs	r3, r3, r4
 80018c0:	469b      	mov	fp, r3
 80018c2:	e739      	b.n	8001738 <__aeabi_dsub+0x468>
 80018c4:	4666      	mov	r6, ip
 80018c6:	2501      	movs	r5, #1
 80018c8:	e562      	b.n	8001390 <__aeabi_dsub+0xc0>
 80018ca:	001f      	movs	r7, r3
 80018cc:	4659      	mov	r1, fp
 80018ce:	3f20      	subs	r7, #32
 80018d0:	40f9      	lsrs	r1, r7
 80018d2:	468c      	mov	ip, r1
 80018d4:	2b20      	cmp	r3, #32
 80018d6:	d005      	beq.n	80018e4 <__aeabi_dsub+0x614>
 80018d8:	2740      	movs	r7, #64	@ 0x40
 80018da:	4659      	mov	r1, fp
 80018dc:	1afb      	subs	r3, r7, r3
 80018de:	4099      	lsls	r1, r3
 80018e0:	430a      	orrs	r2, r1
 80018e2:	4692      	mov	sl, r2
 80018e4:	4657      	mov	r7, sl
 80018e6:	1e7b      	subs	r3, r7, #1
 80018e8:	419f      	sbcs	r7, r3
 80018ea:	4663      	mov	r3, ip
 80018ec:	431f      	orrs	r7, r3
 80018ee:	e5c1      	b.n	8001474 <__aeabi_dsub+0x1a4>
 80018f0:	003b      	movs	r3, r7
 80018f2:	0025      	movs	r5, r4
 80018f4:	3b20      	subs	r3, #32
 80018f6:	40dd      	lsrs	r5, r3
 80018f8:	2f20      	cmp	r7, #32
 80018fa:	d004      	beq.n	8001906 <__aeabi_dsub+0x636>
 80018fc:	2340      	movs	r3, #64	@ 0x40
 80018fe:	1bdb      	subs	r3, r3, r7
 8001900:	409c      	lsls	r4, r3
 8001902:	4320      	orrs	r0, r4
 8001904:	4680      	mov	r8, r0
 8001906:	4640      	mov	r0, r8
 8001908:	1e43      	subs	r3, r0, #1
 800190a:	4198      	sbcs	r0, r3
 800190c:	4328      	orrs	r0, r5
 800190e:	e713      	b.n	8001738 <__aeabi_dsub+0x468>
 8001910:	2900      	cmp	r1, #0
 8001912:	d09d      	beq.n	8001850 <__aeabi_dsub+0x580>
 8001914:	2601      	movs	r6, #1
 8001916:	4663      	mov	r3, ip
 8001918:	465c      	mov	r4, fp
 800191a:	4690      	mov	r8, r2
 800191c:	401e      	ands	r6, r3
 800191e:	e6db      	b.n	80016d8 <__aeabi_dsub+0x408>
 8001920:	1a17      	subs	r7, r2, r0
 8001922:	465b      	mov	r3, fp
 8001924:	42ba      	cmp	r2, r7
 8001926:	4192      	sbcs	r2, r2
 8001928:	1b1c      	subs	r4, r3, r4
 800192a:	4252      	negs	r2, r2
 800192c:	1aa4      	subs	r4, r4, r2
 800192e:	0223      	lsls	r3, r4, #8
 8001930:	d4c8      	bmi.n	80018c4 <__aeabi_dsub+0x5f4>
 8001932:	0763      	lsls	r3, r4, #29
 8001934:	08ff      	lsrs	r7, r7, #3
 8001936:	431f      	orrs	r7, r3
 8001938:	4666      	mov	r6, ip
 800193a:	2301      	movs	r3, #1
 800193c:	08e5      	lsrs	r5, r4, #3
 800193e:	e71f      	b.n	8001780 <__aeabi_dsub+0x4b0>
 8001940:	001d      	movs	r5, r3
 8001942:	2400      	movs	r4, #0
 8001944:	2700      	movs	r7, #0
 8001946:	e657      	b.n	80015f8 <__aeabi_dsub+0x328>
 8001948:	465c      	mov	r4, fp
 800194a:	08d0      	lsrs	r0, r2, #3
 800194c:	e66a      	b.n	8001624 <__aeabi_dsub+0x354>
 800194e:	2b00      	cmp	r3, #0
 8001950:	d100      	bne.n	8001954 <__aeabi_dsub+0x684>
 8001952:	e737      	b.n	80017c4 <__aeabi_dsub+0x4f4>
 8001954:	4653      	mov	r3, sl
 8001956:	08c0      	lsrs	r0, r0, #3
 8001958:	0767      	lsls	r7, r4, #29
 800195a:	4307      	orrs	r7, r0
 800195c:	08e5      	lsrs	r5, r4, #3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d100      	bne.n	8001964 <__aeabi_dsub+0x694>
 8001962:	e5b1      	b.n	80014c8 <__aeabi_dsub+0x1f8>
 8001964:	2380      	movs	r3, #128	@ 0x80
 8001966:	031b      	lsls	r3, r3, #12
 8001968:	421d      	tst	r5, r3
 800196a:	d008      	beq.n	800197e <__aeabi_dsub+0x6ae>
 800196c:	4659      	mov	r1, fp
 800196e:	08c8      	lsrs	r0, r1, #3
 8001970:	4218      	tst	r0, r3
 8001972:	d104      	bne.n	800197e <__aeabi_dsub+0x6ae>
 8001974:	08d2      	lsrs	r2, r2, #3
 8001976:	0749      	lsls	r1, r1, #29
 8001978:	430a      	orrs	r2, r1
 800197a:	0017      	movs	r7, r2
 800197c:	0005      	movs	r5, r0
 800197e:	0f7b      	lsrs	r3, r7, #29
 8001980:	00ff      	lsls	r7, r7, #3
 8001982:	08ff      	lsrs	r7, r7, #3
 8001984:	075b      	lsls	r3, r3, #29
 8001986:	431f      	orrs	r7, r3
 8001988:	e59e      	b.n	80014c8 <__aeabi_dsub+0x1f8>
 800198a:	08c0      	lsrs	r0, r0, #3
 800198c:	0763      	lsls	r3, r4, #29
 800198e:	4318      	orrs	r0, r3
 8001990:	08e5      	lsrs	r5, r4, #3
 8001992:	2900      	cmp	r1, #0
 8001994:	d053      	beq.n	8001a3e <__aeabi_dsub+0x76e>
 8001996:	2380      	movs	r3, #128	@ 0x80
 8001998:	031b      	lsls	r3, r3, #12
 800199a:	421d      	tst	r5, r3
 800199c:	d00a      	beq.n	80019b4 <__aeabi_dsub+0x6e4>
 800199e:	4659      	mov	r1, fp
 80019a0:	08cc      	lsrs	r4, r1, #3
 80019a2:	421c      	tst	r4, r3
 80019a4:	d106      	bne.n	80019b4 <__aeabi_dsub+0x6e4>
 80019a6:	2601      	movs	r6, #1
 80019a8:	4663      	mov	r3, ip
 80019aa:	0025      	movs	r5, r4
 80019ac:	08d0      	lsrs	r0, r2, #3
 80019ae:	0749      	lsls	r1, r1, #29
 80019b0:	4308      	orrs	r0, r1
 80019b2:	401e      	ands	r6, r3
 80019b4:	0f47      	lsrs	r7, r0, #29
 80019b6:	00c0      	lsls	r0, r0, #3
 80019b8:	08c0      	lsrs	r0, r0, #3
 80019ba:	077f      	lsls	r7, r7, #29
 80019bc:	4307      	orrs	r7, r0
 80019be:	e583      	b.n	80014c8 <__aeabi_dsub+0x1f8>
 80019c0:	1883      	adds	r3, r0, r2
 80019c2:	4293      	cmp	r3, r2
 80019c4:	4192      	sbcs	r2, r2
 80019c6:	445c      	add	r4, fp
 80019c8:	4252      	negs	r2, r2
 80019ca:	18a5      	adds	r5, r4, r2
 80019cc:	022a      	lsls	r2, r5, #8
 80019ce:	d500      	bpl.n	80019d2 <__aeabi_dsub+0x702>
 80019d0:	e724      	b.n	800181c <__aeabi_dsub+0x54c>
 80019d2:	076f      	lsls	r7, r5, #29
 80019d4:	08db      	lsrs	r3, r3, #3
 80019d6:	431f      	orrs	r7, r3
 80019d8:	08ed      	lsrs	r5, r5, #3
 80019da:	2301      	movs	r3, #1
 80019dc:	e6d0      	b.n	8001780 <__aeabi_dsub+0x4b0>
 80019de:	46c0      	nop			@ (mov r8, r8)
 80019e0:	000007ff 	.word	0x000007ff
 80019e4:	000007fe 	.word	0x000007fe
 80019e8:	ff7fffff 	.word	0xff7fffff
 80019ec:	465b      	mov	r3, fp
 80019ee:	08d2      	lsrs	r2, r2, #3
 80019f0:	075f      	lsls	r7, r3, #29
 80019f2:	4666      	mov	r6, ip
 80019f4:	4317      	orrs	r7, r2
 80019f6:	08dd      	lsrs	r5, r3, #3
 80019f8:	e566      	b.n	80014c8 <__aeabi_dsub+0x1f8>
 80019fa:	0025      	movs	r5, r4
 80019fc:	3b20      	subs	r3, #32
 80019fe:	40dd      	lsrs	r5, r3
 8001a00:	4663      	mov	r3, ip
 8001a02:	2b20      	cmp	r3, #32
 8001a04:	d005      	beq.n	8001a12 <__aeabi_dsub+0x742>
 8001a06:	2340      	movs	r3, #64	@ 0x40
 8001a08:	4661      	mov	r1, ip
 8001a0a:	1a5b      	subs	r3, r3, r1
 8001a0c:	409c      	lsls	r4, r3
 8001a0e:	4320      	orrs	r0, r4
 8001a10:	4680      	mov	r8, r0
 8001a12:	4647      	mov	r7, r8
 8001a14:	1e7b      	subs	r3, r7, #1
 8001a16:	419f      	sbcs	r7, r3
 8001a18:	432f      	orrs	r7, r5
 8001a1a:	e5a0      	b.n	800155e <__aeabi_dsub+0x28e>
 8001a1c:	2120      	movs	r1, #32
 8001a1e:	2700      	movs	r7, #0
 8001a20:	1a09      	subs	r1, r1, r0
 8001a22:	e4d2      	b.n	80013ca <__aeabi_dsub+0xfa>
 8001a24:	2f00      	cmp	r7, #0
 8001a26:	d100      	bne.n	8001a2a <__aeabi_dsub+0x75a>
 8001a28:	e713      	b.n	8001852 <__aeabi_dsub+0x582>
 8001a2a:	465c      	mov	r4, fp
 8001a2c:	0017      	movs	r7, r2
 8001a2e:	2500      	movs	r5, #0
 8001a30:	e5f6      	b.n	8001620 <__aeabi_dsub+0x350>
 8001a32:	08d7      	lsrs	r7, r2, #3
 8001a34:	0749      	lsls	r1, r1, #29
 8001a36:	2302      	movs	r3, #2
 8001a38:	430f      	orrs	r7, r1
 8001a3a:	092d      	lsrs	r5, r5, #4
 8001a3c:	e6a0      	b.n	8001780 <__aeabi_dsub+0x4b0>
 8001a3e:	0007      	movs	r7, r0
 8001a40:	e542      	b.n	80014c8 <__aeabi_dsub+0x1f8>
 8001a42:	465b      	mov	r3, fp
 8001a44:	2601      	movs	r6, #1
 8001a46:	075f      	lsls	r7, r3, #29
 8001a48:	08dd      	lsrs	r5, r3, #3
 8001a4a:	4663      	mov	r3, ip
 8001a4c:	08d2      	lsrs	r2, r2, #3
 8001a4e:	4317      	orrs	r7, r2
 8001a50:	401e      	ands	r6, r3
 8001a52:	e539      	b.n	80014c8 <__aeabi_dsub+0x1f8>
 8001a54:	465b      	mov	r3, fp
 8001a56:	08d2      	lsrs	r2, r2, #3
 8001a58:	075f      	lsls	r7, r3, #29
 8001a5a:	4317      	orrs	r7, r2
 8001a5c:	08dd      	lsrs	r5, r3, #3
 8001a5e:	e533      	b.n	80014c8 <__aeabi_dsub+0x1f8>
 8001a60:	4a1e      	ldr	r2, [pc, #120]	@ (8001adc <__aeabi_dsub+0x80c>)
 8001a62:	08db      	lsrs	r3, r3, #3
 8001a64:	4022      	ands	r2, r4
 8001a66:	0757      	lsls	r7, r2, #29
 8001a68:	0252      	lsls	r2, r2, #9
 8001a6a:	2501      	movs	r5, #1
 8001a6c:	431f      	orrs	r7, r3
 8001a6e:	0b14      	lsrs	r4, r2, #12
 8001a70:	e5c2      	b.n	80015f8 <__aeabi_dsub+0x328>
 8001a72:	000e      	movs	r6, r1
 8001a74:	2001      	movs	r0, #1
 8001a76:	e65f      	b.n	8001738 <__aeabi_dsub+0x468>
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00d      	beq.n	8001a98 <__aeabi_dsub+0x7c8>
 8001a7c:	464b      	mov	r3, r9
 8001a7e:	1b5b      	subs	r3, r3, r5
 8001a80:	469c      	mov	ip, r3
 8001a82:	2d00      	cmp	r5, #0
 8001a84:	d100      	bne.n	8001a88 <__aeabi_dsub+0x7b8>
 8001a86:	e548      	b.n	800151a <__aeabi_dsub+0x24a>
 8001a88:	2701      	movs	r7, #1
 8001a8a:	2b38      	cmp	r3, #56	@ 0x38
 8001a8c:	dd00      	ble.n	8001a90 <__aeabi_dsub+0x7c0>
 8001a8e:	e566      	b.n	800155e <__aeabi_dsub+0x28e>
 8001a90:	2380      	movs	r3, #128	@ 0x80
 8001a92:	041b      	lsls	r3, r3, #16
 8001a94:	431c      	orrs	r4, r3
 8001a96:	e550      	b.n	800153a <__aeabi_dsub+0x26a>
 8001a98:	1c6b      	adds	r3, r5, #1
 8001a9a:	4d11      	ldr	r5, [pc, #68]	@ (8001ae0 <__aeabi_dsub+0x810>)
 8001a9c:	422b      	tst	r3, r5
 8001a9e:	d000      	beq.n	8001aa2 <__aeabi_dsub+0x7d2>
 8001aa0:	e673      	b.n	800178a <__aeabi_dsub+0x4ba>
 8001aa2:	4659      	mov	r1, fp
 8001aa4:	0023      	movs	r3, r4
 8001aa6:	4311      	orrs	r1, r2
 8001aa8:	468a      	mov	sl, r1
 8001aaa:	4303      	orrs	r3, r0
 8001aac:	e600      	b.n	80016b0 <__aeabi_dsub+0x3e0>
 8001aae:	0767      	lsls	r7, r4, #29
 8001ab0:	08c0      	lsrs	r0, r0, #3
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	4307      	orrs	r7, r0
 8001ab6:	08e5      	lsrs	r5, r4, #3
 8001ab8:	e662      	b.n	8001780 <__aeabi_dsub+0x4b0>
 8001aba:	0764      	lsls	r4, r4, #29
 8001abc:	08ff      	lsrs	r7, r7, #3
 8001abe:	4327      	orrs	r7, r4
 8001ac0:	0905      	lsrs	r5, r0, #4
 8001ac2:	e65d      	b.n	8001780 <__aeabi_dsub+0x4b0>
 8001ac4:	08d2      	lsrs	r2, r2, #3
 8001ac6:	0749      	lsls	r1, r1, #29
 8001ac8:	4311      	orrs	r1, r2
 8001aca:	000f      	movs	r7, r1
 8001acc:	2302      	movs	r3, #2
 8001ace:	092d      	lsrs	r5, r5, #4
 8001ad0:	e656      	b.n	8001780 <__aeabi_dsub+0x4b0>
 8001ad2:	0007      	movs	r7, r0
 8001ad4:	e5a4      	b.n	8001620 <__aeabi_dsub+0x350>
 8001ad6:	0038      	movs	r0, r7
 8001ad8:	e48f      	b.n	80013fa <__aeabi_dsub+0x12a>
 8001ada:	46c0      	nop			@ (mov r8, r8)
 8001adc:	ff7fffff 	.word	0xff7fffff
 8001ae0:	000007fe 	.word	0x000007fe

08001ae4 <__aeabi_d2iz>:
 8001ae4:	000b      	movs	r3, r1
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	b570      	push	{r4, r5, r6, lr}
 8001aea:	4d16      	ldr	r5, [pc, #88]	@ (8001b44 <__aeabi_d2iz+0x60>)
 8001aec:	030c      	lsls	r4, r1, #12
 8001aee:	b082      	sub	sp, #8
 8001af0:	0049      	lsls	r1, r1, #1
 8001af2:	2000      	movs	r0, #0
 8001af4:	9200      	str	r2, [sp, #0]
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	0b24      	lsrs	r4, r4, #12
 8001afa:	0d49      	lsrs	r1, r1, #21
 8001afc:	0fde      	lsrs	r6, r3, #31
 8001afe:	42a9      	cmp	r1, r5
 8001b00:	dd04      	ble.n	8001b0c <__aeabi_d2iz+0x28>
 8001b02:	4811      	ldr	r0, [pc, #68]	@ (8001b48 <__aeabi_d2iz+0x64>)
 8001b04:	4281      	cmp	r1, r0
 8001b06:	dd03      	ble.n	8001b10 <__aeabi_d2iz+0x2c>
 8001b08:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <__aeabi_d2iz+0x68>)
 8001b0a:	18f0      	adds	r0, r6, r3
 8001b0c:	b002      	add	sp, #8
 8001b0e:	bd70      	pop	{r4, r5, r6, pc}
 8001b10:	2080      	movs	r0, #128	@ 0x80
 8001b12:	0340      	lsls	r0, r0, #13
 8001b14:	4320      	orrs	r0, r4
 8001b16:	4c0e      	ldr	r4, [pc, #56]	@ (8001b50 <__aeabi_d2iz+0x6c>)
 8001b18:	1a64      	subs	r4, r4, r1
 8001b1a:	2c1f      	cmp	r4, #31
 8001b1c:	dd08      	ble.n	8001b30 <__aeabi_d2iz+0x4c>
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b54 <__aeabi_d2iz+0x70>)
 8001b20:	1a5b      	subs	r3, r3, r1
 8001b22:	40d8      	lsrs	r0, r3
 8001b24:	0003      	movs	r3, r0
 8001b26:	4258      	negs	r0, r3
 8001b28:	2e00      	cmp	r6, #0
 8001b2a:	d1ef      	bne.n	8001b0c <__aeabi_d2iz+0x28>
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	e7ed      	b.n	8001b0c <__aeabi_d2iz+0x28>
 8001b30:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <__aeabi_d2iz+0x74>)
 8001b32:	9a00      	ldr	r2, [sp, #0]
 8001b34:	469c      	mov	ip, r3
 8001b36:	0003      	movs	r3, r0
 8001b38:	4461      	add	r1, ip
 8001b3a:	408b      	lsls	r3, r1
 8001b3c:	40e2      	lsrs	r2, r4
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	e7f1      	b.n	8001b26 <__aeabi_d2iz+0x42>
 8001b42:	46c0      	nop			@ (mov r8, r8)
 8001b44:	000003fe 	.word	0x000003fe
 8001b48:	0000041d 	.word	0x0000041d
 8001b4c:	7fffffff 	.word	0x7fffffff
 8001b50:	00000433 	.word	0x00000433
 8001b54:	00000413 	.word	0x00000413
 8001b58:	fffffbed 	.word	0xfffffbed

08001b5c <__aeabi_i2d>:
 8001b5c:	b570      	push	{r4, r5, r6, lr}
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	d016      	beq.n	8001b90 <__aeabi_i2d+0x34>
 8001b62:	17c3      	asrs	r3, r0, #31
 8001b64:	18c5      	adds	r5, r0, r3
 8001b66:	405d      	eors	r5, r3
 8001b68:	0fc4      	lsrs	r4, r0, #31
 8001b6a:	0028      	movs	r0, r5
 8001b6c:	f000 f92c 	bl	8001dc8 <__clzsi2>
 8001b70:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <__aeabi_i2d+0x58>)
 8001b72:	1a1b      	subs	r3, r3, r0
 8001b74:	055b      	lsls	r3, r3, #21
 8001b76:	0d5b      	lsrs	r3, r3, #21
 8001b78:	280a      	cmp	r0, #10
 8001b7a:	dc14      	bgt.n	8001ba6 <__aeabi_i2d+0x4a>
 8001b7c:	0002      	movs	r2, r0
 8001b7e:	002e      	movs	r6, r5
 8001b80:	3215      	adds	r2, #21
 8001b82:	4096      	lsls	r6, r2
 8001b84:	220b      	movs	r2, #11
 8001b86:	1a12      	subs	r2, r2, r0
 8001b88:	40d5      	lsrs	r5, r2
 8001b8a:	032d      	lsls	r5, r5, #12
 8001b8c:	0b2d      	lsrs	r5, r5, #12
 8001b8e:	e003      	b.n	8001b98 <__aeabi_i2d+0x3c>
 8001b90:	2400      	movs	r4, #0
 8001b92:	2300      	movs	r3, #0
 8001b94:	2500      	movs	r5, #0
 8001b96:	2600      	movs	r6, #0
 8001b98:	051b      	lsls	r3, r3, #20
 8001b9a:	432b      	orrs	r3, r5
 8001b9c:	07e4      	lsls	r4, r4, #31
 8001b9e:	4323      	orrs	r3, r4
 8001ba0:	0030      	movs	r0, r6
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	bd70      	pop	{r4, r5, r6, pc}
 8001ba6:	380b      	subs	r0, #11
 8001ba8:	4085      	lsls	r5, r0
 8001baa:	032d      	lsls	r5, r5, #12
 8001bac:	2600      	movs	r6, #0
 8001bae:	0b2d      	lsrs	r5, r5, #12
 8001bb0:	e7f2      	b.n	8001b98 <__aeabi_i2d+0x3c>
 8001bb2:	46c0      	nop			@ (mov r8, r8)
 8001bb4:	0000041e 	.word	0x0000041e

08001bb8 <__aeabi_f2d>:
 8001bb8:	b570      	push	{r4, r5, r6, lr}
 8001bba:	0242      	lsls	r2, r0, #9
 8001bbc:	0043      	lsls	r3, r0, #1
 8001bbe:	0fc4      	lsrs	r4, r0, #31
 8001bc0:	20fe      	movs	r0, #254	@ 0xfe
 8001bc2:	0e1b      	lsrs	r3, r3, #24
 8001bc4:	1c59      	adds	r1, r3, #1
 8001bc6:	0a55      	lsrs	r5, r2, #9
 8001bc8:	4208      	tst	r0, r1
 8001bca:	d00c      	beq.n	8001be6 <__aeabi_f2d+0x2e>
 8001bcc:	21e0      	movs	r1, #224	@ 0xe0
 8001bce:	0089      	lsls	r1, r1, #2
 8001bd0:	468c      	mov	ip, r1
 8001bd2:	076d      	lsls	r5, r5, #29
 8001bd4:	0b12      	lsrs	r2, r2, #12
 8001bd6:	4463      	add	r3, ip
 8001bd8:	051b      	lsls	r3, r3, #20
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	07e4      	lsls	r4, r4, #31
 8001bde:	4323      	orrs	r3, r4
 8001be0:	0028      	movs	r0, r5
 8001be2:	0019      	movs	r1, r3
 8001be4:	bd70      	pop	{r4, r5, r6, pc}
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d114      	bne.n	8001c14 <__aeabi_f2d+0x5c>
 8001bea:	2d00      	cmp	r5, #0
 8001bec:	d01b      	beq.n	8001c26 <__aeabi_f2d+0x6e>
 8001bee:	0028      	movs	r0, r5
 8001bf0:	f000 f8ea 	bl	8001dc8 <__clzsi2>
 8001bf4:	280a      	cmp	r0, #10
 8001bf6:	dc1c      	bgt.n	8001c32 <__aeabi_f2d+0x7a>
 8001bf8:	230b      	movs	r3, #11
 8001bfa:	002a      	movs	r2, r5
 8001bfc:	1a1b      	subs	r3, r3, r0
 8001bfe:	40da      	lsrs	r2, r3
 8001c00:	0003      	movs	r3, r0
 8001c02:	3315      	adds	r3, #21
 8001c04:	409d      	lsls	r5, r3
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <__aeabi_f2d+0x88>)
 8001c08:	0312      	lsls	r2, r2, #12
 8001c0a:	1a1b      	subs	r3, r3, r0
 8001c0c:	055b      	lsls	r3, r3, #21
 8001c0e:	0b12      	lsrs	r2, r2, #12
 8001c10:	0d5b      	lsrs	r3, r3, #21
 8001c12:	e7e1      	b.n	8001bd8 <__aeabi_f2d+0x20>
 8001c14:	2d00      	cmp	r5, #0
 8001c16:	d009      	beq.n	8001c2c <__aeabi_f2d+0x74>
 8001c18:	0b13      	lsrs	r3, r2, #12
 8001c1a:	2280      	movs	r2, #128	@ 0x80
 8001c1c:	0312      	lsls	r2, r2, #12
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	076d      	lsls	r5, r5, #29
 8001c22:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <__aeabi_f2d+0x8c>)
 8001c24:	e7d8      	b.n	8001bd8 <__aeabi_f2d+0x20>
 8001c26:	2300      	movs	r3, #0
 8001c28:	2200      	movs	r2, #0
 8001c2a:	e7d5      	b.n	8001bd8 <__aeabi_f2d+0x20>
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <__aeabi_f2d+0x8c>)
 8001c30:	e7d2      	b.n	8001bd8 <__aeabi_f2d+0x20>
 8001c32:	0003      	movs	r3, r0
 8001c34:	002a      	movs	r2, r5
 8001c36:	3b0b      	subs	r3, #11
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	2500      	movs	r5, #0
 8001c3c:	e7e3      	b.n	8001c06 <__aeabi_f2d+0x4e>
 8001c3e:	46c0      	nop			@ (mov r8, r8)
 8001c40:	00000389 	.word	0x00000389
 8001c44:	000007ff 	.word	0x000007ff

08001c48 <__aeabi_d2f>:
 8001c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4a:	004b      	lsls	r3, r1, #1
 8001c4c:	030f      	lsls	r7, r1, #12
 8001c4e:	0d5b      	lsrs	r3, r3, #21
 8001c50:	4c3a      	ldr	r4, [pc, #232]	@ (8001d3c <__aeabi_d2f+0xf4>)
 8001c52:	0f45      	lsrs	r5, r0, #29
 8001c54:	b083      	sub	sp, #12
 8001c56:	0a7f      	lsrs	r7, r7, #9
 8001c58:	1c5e      	adds	r6, r3, #1
 8001c5a:	432f      	orrs	r7, r5
 8001c5c:	9000      	str	r0, [sp, #0]
 8001c5e:	9101      	str	r1, [sp, #4]
 8001c60:	0fca      	lsrs	r2, r1, #31
 8001c62:	00c5      	lsls	r5, r0, #3
 8001c64:	4226      	tst	r6, r4
 8001c66:	d00b      	beq.n	8001c80 <__aeabi_d2f+0x38>
 8001c68:	4935      	ldr	r1, [pc, #212]	@ (8001d40 <__aeabi_d2f+0xf8>)
 8001c6a:	185c      	adds	r4, r3, r1
 8001c6c:	2cfe      	cmp	r4, #254	@ 0xfe
 8001c6e:	dd13      	ble.n	8001c98 <__aeabi_d2f+0x50>
 8001c70:	20ff      	movs	r0, #255	@ 0xff
 8001c72:	2300      	movs	r3, #0
 8001c74:	05c0      	lsls	r0, r0, #23
 8001c76:	4318      	orrs	r0, r3
 8001c78:	07d2      	lsls	r2, r2, #31
 8001c7a:	4310      	orrs	r0, r2
 8001c7c:	b003      	add	sp, #12
 8001c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c80:	433d      	orrs	r5, r7
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <__aeabi_d2f+0x42>
 8001c86:	2000      	movs	r0, #0
 8001c88:	e7f4      	b.n	8001c74 <__aeabi_d2f+0x2c>
 8001c8a:	2d00      	cmp	r5, #0
 8001c8c:	d0f0      	beq.n	8001c70 <__aeabi_d2f+0x28>
 8001c8e:	2380      	movs	r3, #128	@ 0x80
 8001c90:	03db      	lsls	r3, r3, #15
 8001c92:	20ff      	movs	r0, #255	@ 0xff
 8001c94:	433b      	orrs	r3, r7
 8001c96:	e7ed      	b.n	8001c74 <__aeabi_d2f+0x2c>
 8001c98:	2c00      	cmp	r4, #0
 8001c9a:	dd0c      	ble.n	8001cb6 <__aeabi_d2f+0x6e>
 8001c9c:	9b00      	ldr	r3, [sp, #0]
 8001c9e:	00ff      	lsls	r7, r7, #3
 8001ca0:	019b      	lsls	r3, r3, #6
 8001ca2:	1e58      	subs	r0, r3, #1
 8001ca4:	4183      	sbcs	r3, r0
 8001ca6:	0f69      	lsrs	r1, r5, #29
 8001ca8:	433b      	orrs	r3, r7
 8001caa:	430b      	orrs	r3, r1
 8001cac:	0759      	lsls	r1, r3, #29
 8001cae:	d127      	bne.n	8001d00 <__aeabi_d2f+0xb8>
 8001cb0:	08db      	lsrs	r3, r3, #3
 8001cb2:	b2e0      	uxtb	r0, r4
 8001cb4:	e7de      	b.n	8001c74 <__aeabi_d2f+0x2c>
 8001cb6:	0021      	movs	r1, r4
 8001cb8:	3117      	adds	r1, #23
 8001cba:	db31      	blt.n	8001d20 <__aeabi_d2f+0xd8>
 8001cbc:	2180      	movs	r1, #128	@ 0x80
 8001cbe:	201e      	movs	r0, #30
 8001cc0:	0409      	lsls	r1, r1, #16
 8001cc2:	4339      	orrs	r1, r7
 8001cc4:	1b00      	subs	r0, r0, r4
 8001cc6:	281f      	cmp	r0, #31
 8001cc8:	dd2d      	ble.n	8001d26 <__aeabi_d2f+0xde>
 8001cca:	2602      	movs	r6, #2
 8001ccc:	4276      	negs	r6, r6
 8001cce:	1b34      	subs	r4, r6, r4
 8001cd0:	000e      	movs	r6, r1
 8001cd2:	40e6      	lsrs	r6, r4
 8001cd4:	0034      	movs	r4, r6
 8001cd6:	2820      	cmp	r0, #32
 8001cd8:	d004      	beq.n	8001ce4 <__aeabi_d2f+0x9c>
 8001cda:	481a      	ldr	r0, [pc, #104]	@ (8001d44 <__aeabi_d2f+0xfc>)
 8001cdc:	4684      	mov	ip, r0
 8001cde:	4463      	add	r3, ip
 8001ce0:	4099      	lsls	r1, r3
 8001ce2:	430d      	orrs	r5, r1
 8001ce4:	002b      	movs	r3, r5
 8001ce6:	1e59      	subs	r1, r3, #1
 8001ce8:	418b      	sbcs	r3, r1
 8001cea:	4323      	orrs	r3, r4
 8001cec:	0759      	lsls	r1, r3, #29
 8001cee:	d003      	beq.n	8001cf8 <__aeabi_d2f+0xb0>
 8001cf0:	210f      	movs	r1, #15
 8001cf2:	4019      	ands	r1, r3
 8001cf4:	2904      	cmp	r1, #4
 8001cf6:	d10b      	bne.n	8001d10 <__aeabi_d2f+0xc8>
 8001cf8:	019b      	lsls	r3, r3, #6
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	0a5b      	lsrs	r3, r3, #9
 8001cfe:	e7b9      	b.n	8001c74 <__aeabi_d2f+0x2c>
 8001d00:	210f      	movs	r1, #15
 8001d02:	4019      	ands	r1, r3
 8001d04:	2904      	cmp	r1, #4
 8001d06:	d104      	bne.n	8001d12 <__aeabi_d2f+0xca>
 8001d08:	019b      	lsls	r3, r3, #6
 8001d0a:	0a5b      	lsrs	r3, r3, #9
 8001d0c:	b2e0      	uxtb	r0, r4
 8001d0e:	e7b1      	b.n	8001c74 <__aeabi_d2f+0x2c>
 8001d10:	2400      	movs	r4, #0
 8001d12:	3304      	adds	r3, #4
 8001d14:	0159      	lsls	r1, r3, #5
 8001d16:	d5f7      	bpl.n	8001d08 <__aeabi_d2f+0xc0>
 8001d18:	3401      	adds	r4, #1
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	b2e0      	uxtb	r0, r4
 8001d1e:	e7a9      	b.n	8001c74 <__aeabi_d2f+0x2c>
 8001d20:	2000      	movs	r0, #0
 8001d22:	2300      	movs	r3, #0
 8001d24:	e7a6      	b.n	8001c74 <__aeabi_d2f+0x2c>
 8001d26:	4c08      	ldr	r4, [pc, #32]	@ (8001d48 <__aeabi_d2f+0x100>)
 8001d28:	191c      	adds	r4, r3, r4
 8001d2a:	002b      	movs	r3, r5
 8001d2c:	40a5      	lsls	r5, r4
 8001d2e:	40c3      	lsrs	r3, r0
 8001d30:	40a1      	lsls	r1, r4
 8001d32:	1e68      	subs	r0, r5, #1
 8001d34:	4185      	sbcs	r5, r0
 8001d36:	4329      	orrs	r1, r5
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	e7d7      	b.n	8001cec <__aeabi_d2f+0xa4>
 8001d3c:	000007fe 	.word	0x000007fe
 8001d40:	fffffc80 	.word	0xfffffc80
 8001d44:	fffffca2 	.word	0xfffffca2
 8001d48:	fffffc82 	.word	0xfffffc82

08001d4c <__aeabi_cdrcmple>:
 8001d4c:	4684      	mov	ip, r0
 8001d4e:	0010      	movs	r0, r2
 8001d50:	4662      	mov	r2, ip
 8001d52:	468c      	mov	ip, r1
 8001d54:	0019      	movs	r1, r3
 8001d56:	4663      	mov	r3, ip
 8001d58:	e000      	b.n	8001d5c <__aeabi_cdcmpeq>
 8001d5a:	46c0      	nop			@ (mov r8, r8)

08001d5c <__aeabi_cdcmpeq>:
 8001d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001d5e:	f000 f905 	bl	8001f6c <__ledf2>
 8001d62:	2800      	cmp	r0, #0
 8001d64:	d401      	bmi.n	8001d6a <__aeabi_cdcmpeq+0xe>
 8001d66:	2100      	movs	r1, #0
 8001d68:	42c8      	cmn	r0, r1
 8001d6a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001d6c <__aeabi_dcmpeq>:
 8001d6c:	b510      	push	{r4, lr}
 8001d6e:	f000 f849 	bl	8001e04 <__eqdf2>
 8001d72:	4240      	negs	r0, r0
 8001d74:	3001      	adds	r0, #1
 8001d76:	bd10      	pop	{r4, pc}

08001d78 <__aeabi_dcmplt>:
 8001d78:	b510      	push	{r4, lr}
 8001d7a:	f000 f8f7 	bl	8001f6c <__ledf2>
 8001d7e:	2800      	cmp	r0, #0
 8001d80:	db01      	blt.n	8001d86 <__aeabi_dcmplt+0xe>
 8001d82:	2000      	movs	r0, #0
 8001d84:	bd10      	pop	{r4, pc}
 8001d86:	2001      	movs	r0, #1
 8001d88:	bd10      	pop	{r4, pc}
 8001d8a:	46c0      	nop			@ (mov r8, r8)

08001d8c <__aeabi_dcmple>:
 8001d8c:	b510      	push	{r4, lr}
 8001d8e:	f000 f8ed 	bl	8001f6c <__ledf2>
 8001d92:	2800      	cmp	r0, #0
 8001d94:	dd01      	ble.n	8001d9a <__aeabi_dcmple+0xe>
 8001d96:	2000      	movs	r0, #0
 8001d98:	bd10      	pop	{r4, pc}
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	bd10      	pop	{r4, pc}
 8001d9e:	46c0      	nop			@ (mov r8, r8)

08001da0 <__aeabi_dcmpgt>:
 8001da0:	b510      	push	{r4, lr}
 8001da2:	f000 f873 	bl	8001e8c <__gedf2>
 8001da6:	2800      	cmp	r0, #0
 8001da8:	dc01      	bgt.n	8001dae <__aeabi_dcmpgt+0xe>
 8001daa:	2000      	movs	r0, #0
 8001dac:	bd10      	pop	{r4, pc}
 8001dae:	2001      	movs	r0, #1
 8001db0:	bd10      	pop	{r4, pc}
 8001db2:	46c0      	nop			@ (mov r8, r8)

08001db4 <__aeabi_dcmpge>:
 8001db4:	b510      	push	{r4, lr}
 8001db6:	f000 f869 	bl	8001e8c <__gedf2>
 8001dba:	2800      	cmp	r0, #0
 8001dbc:	da01      	bge.n	8001dc2 <__aeabi_dcmpge+0xe>
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	bd10      	pop	{r4, pc}
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	bd10      	pop	{r4, pc}
 8001dc6:	46c0      	nop			@ (mov r8, r8)

08001dc8 <__clzsi2>:
 8001dc8:	211c      	movs	r1, #28
 8001dca:	2301      	movs	r3, #1
 8001dcc:	041b      	lsls	r3, r3, #16
 8001dce:	4298      	cmp	r0, r3
 8001dd0:	d301      	bcc.n	8001dd6 <__clzsi2+0xe>
 8001dd2:	0c00      	lsrs	r0, r0, #16
 8001dd4:	3910      	subs	r1, #16
 8001dd6:	0a1b      	lsrs	r3, r3, #8
 8001dd8:	4298      	cmp	r0, r3
 8001dda:	d301      	bcc.n	8001de0 <__clzsi2+0x18>
 8001ddc:	0a00      	lsrs	r0, r0, #8
 8001dde:	3908      	subs	r1, #8
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	4298      	cmp	r0, r3
 8001de4:	d301      	bcc.n	8001dea <__clzsi2+0x22>
 8001de6:	0900      	lsrs	r0, r0, #4
 8001de8:	3904      	subs	r1, #4
 8001dea:	a202      	add	r2, pc, #8	@ (adr r2, 8001df4 <__clzsi2+0x2c>)
 8001dec:	5c10      	ldrb	r0, [r2, r0]
 8001dee:	1840      	adds	r0, r0, r1
 8001df0:	4770      	bx	lr
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	02020304 	.word	0x02020304
 8001df8:	01010101 	.word	0x01010101
	...

08001e04 <__eqdf2>:
 8001e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e06:	4657      	mov	r7, sl
 8001e08:	46de      	mov	lr, fp
 8001e0a:	464e      	mov	r6, r9
 8001e0c:	4645      	mov	r5, r8
 8001e0e:	b5e0      	push	{r5, r6, r7, lr}
 8001e10:	000d      	movs	r5, r1
 8001e12:	0004      	movs	r4, r0
 8001e14:	0fe8      	lsrs	r0, r5, #31
 8001e16:	4683      	mov	fp, r0
 8001e18:	0309      	lsls	r1, r1, #12
 8001e1a:	0fd8      	lsrs	r0, r3, #31
 8001e1c:	0b09      	lsrs	r1, r1, #12
 8001e1e:	4682      	mov	sl, r0
 8001e20:	4819      	ldr	r0, [pc, #100]	@ (8001e88 <__eqdf2+0x84>)
 8001e22:	468c      	mov	ip, r1
 8001e24:	031f      	lsls	r7, r3, #12
 8001e26:	0069      	lsls	r1, r5, #1
 8001e28:	005e      	lsls	r6, r3, #1
 8001e2a:	0d49      	lsrs	r1, r1, #21
 8001e2c:	0b3f      	lsrs	r7, r7, #12
 8001e2e:	0d76      	lsrs	r6, r6, #21
 8001e30:	4281      	cmp	r1, r0
 8001e32:	d018      	beq.n	8001e66 <__eqdf2+0x62>
 8001e34:	4286      	cmp	r6, r0
 8001e36:	d00f      	beq.n	8001e58 <__eqdf2+0x54>
 8001e38:	2001      	movs	r0, #1
 8001e3a:	42b1      	cmp	r1, r6
 8001e3c:	d10d      	bne.n	8001e5a <__eqdf2+0x56>
 8001e3e:	45bc      	cmp	ip, r7
 8001e40:	d10b      	bne.n	8001e5a <__eqdf2+0x56>
 8001e42:	4294      	cmp	r4, r2
 8001e44:	d109      	bne.n	8001e5a <__eqdf2+0x56>
 8001e46:	45d3      	cmp	fp, sl
 8001e48:	d01c      	beq.n	8001e84 <__eqdf2+0x80>
 8001e4a:	2900      	cmp	r1, #0
 8001e4c:	d105      	bne.n	8001e5a <__eqdf2+0x56>
 8001e4e:	4660      	mov	r0, ip
 8001e50:	4320      	orrs	r0, r4
 8001e52:	1e43      	subs	r3, r0, #1
 8001e54:	4198      	sbcs	r0, r3
 8001e56:	e000      	b.n	8001e5a <__eqdf2+0x56>
 8001e58:	2001      	movs	r0, #1
 8001e5a:	bcf0      	pop	{r4, r5, r6, r7}
 8001e5c:	46bb      	mov	fp, r7
 8001e5e:	46b2      	mov	sl, r6
 8001e60:	46a9      	mov	r9, r5
 8001e62:	46a0      	mov	r8, r4
 8001e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e66:	2001      	movs	r0, #1
 8001e68:	428e      	cmp	r6, r1
 8001e6a:	d1f6      	bne.n	8001e5a <__eqdf2+0x56>
 8001e6c:	4661      	mov	r1, ip
 8001e6e:	4339      	orrs	r1, r7
 8001e70:	000f      	movs	r7, r1
 8001e72:	4317      	orrs	r7, r2
 8001e74:	4327      	orrs	r7, r4
 8001e76:	d1f0      	bne.n	8001e5a <__eqdf2+0x56>
 8001e78:	465b      	mov	r3, fp
 8001e7a:	4652      	mov	r2, sl
 8001e7c:	1a98      	subs	r0, r3, r2
 8001e7e:	1e43      	subs	r3, r0, #1
 8001e80:	4198      	sbcs	r0, r3
 8001e82:	e7ea      	b.n	8001e5a <__eqdf2+0x56>
 8001e84:	2000      	movs	r0, #0
 8001e86:	e7e8      	b.n	8001e5a <__eqdf2+0x56>
 8001e88:	000007ff 	.word	0x000007ff

08001e8c <__gedf2>:
 8001e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8e:	4657      	mov	r7, sl
 8001e90:	464e      	mov	r6, r9
 8001e92:	4645      	mov	r5, r8
 8001e94:	46de      	mov	lr, fp
 8001e96:	b5e0      	push	{r5, r6, r7, lr}
 8001e98:	000d      	movs	r5, r1
 8001e9a:	030e      	lsls	r6, r1, #12
 8001e9c:	0049      	lsls	r1, r1, #1
 8001e9e:	0d49      	lsrs	r1, r1, #21
 8001ea0:	468a      	mov	sl, r1
 8001ea2:	0fdf      	lsrs	r7, r3, #31
 8001ea4:	0fe9      	lsrs	r1, r5, #31
 8001ea6:	46bc      	mov	ip, r7
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	4f2f      	ldr	r7, [pc, #188]	@ (8001f68 <__gedf2+0xdc>)
 8001eac:	0004      	movs	r4, r0
 8001eae:	4680      	mov	r8, r0
 8001eb0:	9101      	str	r1, [sp, #4]
 8001eb2:	0058      	lsls	r0, r3, #1
 8001eb4:	0319      	lsls	r1, r3, #12
 8001eb6:	4691      	mov	r9, r2
 8001eb8:	0b36      	lsrs	r6, r6, #12
 8001eba:	0b09      	lsrs	r1, r1, #12
 8001ebc:	0d40      	lsrs	r0, r0, #21
 8001ebe:	45ba      	cmp	sl, r7
 8001ec0:	d01d      	beq.n	8001efe <__gedf2+0x72>
 8001ec2:	42b8      	cmp	r0, r7
 8001ec4:	d00d      	beq.n	8001ee2 <__gedf2+0x56>
 8001ec6:	4657      	mov	r7, sl
 8001ec8:	2f00      	cmp	r7, #0
 8001eca:	d12a      	bne.n	8001f22 <__gedf2+0x96>
 8001ecc:	4334      	orrs	r4, r6
 8001ece:	2800      	cmp	r0, #0
 8001ed0:	d124      	bne.n	8001f1c <__gedf2+0x90>
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	d036      	beq.n	8001f44 <__gedf2+0xb8>
 8001ed6:	2c00      	cmp	r4, #0
 8001ed8:	d141      	bne.n	8001f5e <__gedf2+0xd2>
 8001eda:	4663      	mov	r3, ip
 8001edc:	0058      	lsls	r0, r3, #1
 8001ede:	3801      	subs	r0, #1
 8001ee0:	e015      	b.n	8001f0e <__gedf2+0x82>
 8001ee2:	4311      	orrs	r1, r2
 8001ee4:	d138      	bne.n	8001f58 <__gedf2+0xcc>
 8001ee6:	4653      	mov	r3, sl
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <__gedf2+0x64>
 8001eec:	4326      	orrs	r6, r4
 8001eee:	d0f4      	beq.n	8001eda <__gedf2+0x4e>
 8001ef0:	9b01      	ldr	r3, [sp, #4]
 8001ef2:	4563      	cmp	r3, ip
 8001ef4:	d107      	bne.n	8001f06 <__gedf2+0x7a>
 8001ef6:	9b01      	ldr	r3, [sp, #4]
 8001ef8:	0058      	lsls	r0, r3, #1
 8001efa:	3801      	subs	r0, #1
 8001efc:	e007      	b.n	8001f0e <__gedf2+0x82>
 8001efe:	4326      	orrs	r6, r4
 8001f00:	d12a      	bne.n	8001f58 <__gedf2+0xcc>
 8001f02:	4550      	cmp	r0, sl
 8001f04:	d021      	beq.n	8001f4a <__gedf2+0xbe>
 8001f06:	2001      	movs	r0, #1
 8001f08:	9b01      	ldr	r3, [sp, #4]
 8001f0a:	425f      	negs	r7, r3
 8001f0c:	4338      	orrs	r0, r7
 8001f0e:	b003      	add	sp, #12
 8001f10:	bcf0      	pop	{r4, r5, r6, r7}
 8001f12:	46bb      	mov	fp, r7
 8001f14:	46b2      	mov	sl, r6
 8001f16:	46a9      	mov	r9, r5
 8001f18:	46a0      	mov	r8, r4
 8001f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f1c:	2c00      	cmp	r4, #0
 8001f1e:	d0dc      	beq.n	8001eda <__gedf2+0x4e>
 8001f20:	e7e6      	b.n	8001ef0 <__gedf2+0x64>
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d0ef      	beq.n	8001f06 <__gedf2+0x7a>
 8001f26:	9b01      	ldr	r3, [sp, #4]
 8001f28:	4563      	cmp	r3, ip
 8001f2a:	d1ec      	bne.n	8001f06 <__gedf2+0x7a>
 8001f2c:	4582      	cmp	sl, r0
 8001f2e:	dcea      	bgt.n	8001f06 <__gedf2+0x7a>
 8001f30:	dbe1      	blt.n	8001ef6 <__gedf2+0x6a>
 8001f32:	428e      	cmp	r6, r1
 8001f34:	d8e7      	bhi.n	8001f06 <__gedf2+0x7a>
 8001f36:	d1de      	bne.n	8001ef6 <__gedf2+0x6a>
 8001f38:	45c8      	cmp	r8, r9
 8001f3a:	d8e4      	bhi.n	8001f06 <__gedf2+0x7a>
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	45c8      	cmp	r8, r9
 8001f40:	d2e5      	bcs.n	8001f0e <__gedf2+0x82>
 8001f42:	e7d8      	b.n	8001ef6 <__gedf2+0x6a>
 8001f44:	2c00      	cmp	r4, #0
 8001f46:	d0e2      	beq.n	8001f0e <__gedf2+0x82>
 8001f48:	e7dd      	b.n	8001f06 <__gedf2+0x7a>
 8001f4a:	4311      	orrs	r1, r2
 8001f4c:	d104      	bne.n	8001f58 <__gedf2+0xcc>
 8001f4e:	9b01      	ldr	r3, [sp, #4]
 8001f50:	4563      	cmp	r3, ip
 8001f52:	d1d8      	bne.n	8001f06 <__gedf2+0x7a>
 8001f54:	2000      	movs	r0, #0
 8001f56:	e7da      	b.n	8001f0e <__gedf2+0x82>
 8001f58:	2002      	movs	r0, #2
 8001f5a:	4240      	negs	r0, r0
 8001f5c:	e7d7      	b.n	8001f0e <__gedf2+0x82>
 8001f5e:	9b01      	ldr	r3, [sp, #4]
 8001f60:	4563      	cmp	r3, ip
 8001f62:	d0e6      	beq.n	8001f32 <__gedf2+0xa6>
 8001f64:	e7cf      	b.n	8001f06 <__gedf2+0x7a>
 8001f66:	46c0      	nop			@ (mov r8, r8)
 8001f68:	000007ff 	.word	0x000007ff

08001f6c <__ledf2>:
 8001f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6e:	4657      	mov	r7, sl
 8001f70:	464e      	mov	r6, r9
 8001f72:	4645      	mov	r5, r8
 8001f74:	46de      	mov	lr, fp
 8001f76:	b5e0      	push	{r5, r6, r7, lr}
 8001f78:	000d      	movs	r5, r1
 8001f7a:	030e      	lsls	r6, r1, #12
 8001f7c:	0049      	lsls	r1, r1, #1
 8001f7e:	0d49      	lsrs	r1, r1, #21
 8001f80:	468a      	mov	sl, r1
 8001f82:	0fdf      	lsrs	r7, r3, #31
 8001f84:	0fe9      	lsrs	r1, r5, #31
 8001f86:	46bc      	mov	ip, r7
 8001f88:	b083      	sub	sp, #12
 8001f8a:	4f2e      	ldr	r7, [pc, #184]	@ (8002044 <__ledf2+0xd8>)
 8001f8c:	0004      	movs	r4, r0
 8001f8e:	4680      	mov	r8, r0
 8001f90:	9101      	str	r1, [sp, #4]
 8001f92:	0058      	lsls	r0, r3, #1
 8001f94:	0319      	lsls	r1, r3, #12
 8001f96:	4691      	mov	r9, r2
 8001f98:	0b36      	lsrs	r6, r6, #12
 8001f9a:	0b09      	lsrs	r1, r1, #12
 8001f9c:	0d40      	lsrs	r0, r0, #21
 8001f9e:	45ba      	cmp	sl, r7
 8001fa0:	d01e      	beq.n	8001fe0 <__ledf2+0x74>
 8001fa2:	42b8      	cmp	r0, r7
 8001fa4:	d00d      	beq.n	8001fc2 <__ledf2+0x56>
 8001fa6:	4657      	mov	r7, sl
 8001fa8:	2f00      	cmp	r7, #0
 8001faa:	d127      	bne.n	8001ffc <__ledf2+0x90>
 8001fac:	4334      	orrs	r4, r6
 8001fae:	2800      	cmp	r0, #0
 8001fb0:	d133      	bne.n	800201a <__ledf2+0xae>
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	d034      	beq.n	8002020 <__ledf2+0xb4>
 8001fb6:	2c00      	cmp	r4, #0
 8001fb8:	d140      	bne.n	800203c <__ledf2+0xd0>
 8001fba:	4663      	mov	r3, ip
 8001fbc:	0058      	lsls	r0, r3, #1
 8001fbe:	3801      	subs	r0, #1
 8001fc0:	e015      	b.n	8001fee <__ledf2+0x82>
 8001fc2:	4311      	orrs	r1, r2
 8001fc4:	d112      	bne.n	8001fec <__ledf2+0x80>
 8001fc6:	4653      	mov	r3, sl
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <__ledf2+0x64>
 8001fcc:	4326      	orrs	r6, r4
 8001fce:	d0f4      	beq.n	8001fba <__ledf2+0x4e>
 8001fd0:	9b01      	ldr	r3, [sp, #4]
 8001fd2:	4563      	cmp	r3, ip
 8001fd4:	d01d      	beq.n	8002012 <__ledf2+0xa6>
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	9b01      	ldr	r3, [sp, #4]
 8001fda:	425f      	negs	r7, r3
 8001fdc:	4338      	orrs	r0, r7
 8001fde:	e006      	b.n	8001fee <__ledf2+0x82>
 8001fe0:	4326      	orrs	r6, r4
 8001fe2:	d103      	bne.n	8001fec <__ledf2+0x80>
 8001fe4:	4550      	cmp	r0, sl
 8001fe6:	d1f6      	bne.n	8001fd6 <__ledf2+0x6a>
 8001fe8:	4311      	orrs	r1, r2
 8001fea:	d01c      	beq.n	8002026 <__ledf2+0xba>
 8001fec:	2002      	movs	r0, #2
 8001fee:	b003      	add	sp, #12
 8001ff0:	bcf0      	pop	{r4, r5, r6, r7}
 8001ff2:	46bb      	mov	fp, r7
 8001ff4:	46b2      	mov	sl, r6
 8001ff6:	46a9      	mov	r9, r5
 8001ff8:	46a0      	mov	r8, r4
 8001ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	d0ea      	beq.n	8001fd6 <__ledf2+0x6a>
 8002000:	9b01      	ldr	r3, [sp, #4]
 8002002:	4563      	cmp	r3, ip
 8002004:	d1e7      	bne.n	8001fd6 <__ledf2+0x6a>
 8002006:	4582      	cmp	sl, r0
 8002008:	dce5      	bgt.n	8001fd6 <__ledf2+0x6a>
 800200a:	db02      	blt.n	8002012 <__ledf2+0xa6>
 800200c:	428e      	cmp	r6, r1
 800200e:	d8e2      	bhi.n	8001fd6 <__ledf2+0x6a>
 8002010:	d00e      	beq.n	8002030 <__ledf2+0xc4>
 8002012:	9b01      	ldr	r3, [sp, #4]
 8002014:	0058      	lsls	r0, r3, #1
 8002016:	3801      	subs	r0, #1
 8002018:	e7e9      	b.n	8001fee <__ledf2+0x82>
 800201a:	2c00      	cmp	r4, #0
 800201c:	d0cd      	beq.n	8001fba <__ledf2+0x4e>
 800201e:	e7d7      	b.n	8001fd0 <__ledf2+0x64>
 8002020:	2c00      	cmp	r4, #0
 8002022:	d0e4      	beq.n	8001fee <__ledf2+0x82>
 8002024:	e7d7      	b.n	8001fd6 <__ledf2+0x6a>
 8002026:	9b01      	ldr	r3, [sp, #4]
 8002028:	2000      	movs	r0, #0
 800202a:	4563      	cmp	r3, ip
 800202c:	d0df      	beq.n	8001fee <__ledf2+0x82>
 800202e:	e7d2      	b.n	8001fd6 <__ledf2+0x6a>
 8002030:	45c8      	cmp	r8, r9
 8002032:	d8d0      	bhi.n	8001fd6 <__ledf2+0x6a>
 8002034:	2000      	movs	r0, #0
 8002036:	45c8      	cmp	r8, r9
 8002038:	d2d9      	bcs.n	8001fee <__ledf2+0x82>
 800203a:	e7ea      	b.n	8002012 <__ledf2+0xa6>
 800203c:	9b01      	ldr	r3, [sp, #4]
 800203e:	4563      	cmp	r3, ip
 8002040:	d0e4      	beq.n	800200c <__ledf2+0xa0>
 8002042:	e7c8      	b.n	8001fd6 <__ledf2+0x6a>
 8002044:	000007ff 	.word	0x000007ff

08002048 <Cell_Motoring_Task>:

unsigned int CellVoltage[15];
float Gain = 0;
int iGain = 0;

void Cell_Motoring_Task(){
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800204e:	2380      	movs	r3, #128	@ 0x80
 8002050:	019b      	lsls	r3, r3, #6
 8002052:	4826      	ldr	r0, [pc, #152]	@ (80020ec <Cell_Motoring_Task+0xa4>)
 8002054:	2200      	movs	r2, #0
 8002056:	0019      	movs	r1, r3
 8002058:	f002 f8c0 	bl	80041dc <HAL_GPIO_WritePin>
	vTaskDelay(20);
 800205c:	2014      	movs	r0, #20
 800205e:	f005 f923 	bl	80072a8 <vTaskDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002062:	2380      	movs	r3, #128	@ 0x80
 8002064:	019b      	lsls	r3, r3, #6
 8002066:	4821      	ldr	r0, [pc, #132]	@ (80020ec <Cell_Motoring_Task+0xa4>)
 8002068:	2201      	movs	r2, #1
 800206a:	0019      	movs	r1, r3
 800206c:	f002 f8b6 	bl	80041dc <HAL_GPIO_WritePin>
	vTaskDelay(20);
 8002070:	2014      	movs	r0, #20
 8002072:	f005 f919 	bl	80072a8 <vTaskDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002076:	2380      	movs	r3, #128	@ 0x80
 8002078:	019b      	lsls	r3, r3, #6
 800207a:	481c      	ldr	r0, [pc, #112]	@ (80020ec <Cell_Motoring_Task+0xa4>)
 800207c:	2200      	movs	r2, #0
 800207e:	0019      	movs	r1, r3
 8002080:	f002 f8ac 	bl	80041dc <HAL_GPIO_WritePin>
	vTaskDelay(20);
 8002084:	2014      	movs	r0, #20
 8002086:	f005 f90f 	bl	80072a8 <vTaskDelay>

	//vTaskDelay(1000);
    int init_status = InitialisebqMaximo();
 800208a:	f000 f997 	bl	80023bc <InitialisebqMaximo>
 800208e:	0003      	movs	r3, r0
 8002090:	60fb      	str	r3, [r7, #12]
	int Result;
	//vTaskDelay(1000);
	uint8_t data = 0;
 8002092:	230b      	movs	r3, #11
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]

	for(;;){

	    if (HAL_I2C_IsDeviceReady(&hi2c2, BQ76940_ADDR, 3, HAL_MAX_DELAY) == HAL_OK)
 800209a:	2301      	movs	r3, #1
 800209c:	425b      	negs	r3, r3
 800209e:	4814      	ldr	r0, [pc, #80]	@ (80020f0 <Cell_Motoring_Task+0xa8>)
 80020a0:	2203      	movs	r2, #3
 80020a2:	2110      	movs	r1, #16
 80020a4:	f002 fcde 	bl	8004a64 <HAL_I2C_IsDeviceReady>
 80020a8:	1e03      	subs	r3, r0, #0
 80020aa:	d10e      	bne.n	80020ca <Cell_Motoring_Task+0x82>
	    {
//	    	if (HAL_I2C_Mem_Read(&hi2c2, BQ76940_ADDR, 0x00, 1, &data, 1, 100) == HAL_OK){
			Result = UpdateVoltageFromBqMaximo();
 80020ac:	f000 fa86 	bl	80025bc <UpdateVoltageFromBqMaximo>
 80020b0:	0003      	movs	r3, r0
 80020b2:	607b      	str	r3, [r7, #4]
			// Red LED
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80020b4:	4b0f      	ldr	r3, [pc, #60]	@ (80020f4 <Cell_Motoring_Task+0xac>)
 80020b6:	2120      	movs	r1, #32
 80020b8:	0018      	movs	r0, r3
 80020ba:	f002 f8ac 	bl	8004216 <HAL_GPIO_TogglePin>
			vTaskDelay(1000);
 80020be:	23fa      	movs	r3, #250	@ 0xfa
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	0018      	movs	r0, r3
 80020c4:	f005 f8f0 	bl	80072a8 <vTaskDelay>
 80020c8:	e00c      	b.n	80020e4 <Cell_Motoring_Task+0x9c>

	    }
		else
		{
			// Yellow LED
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80020ca:	2380      	movs	r3, #128	@ 0x80
 80020cc:	021a      	lsls	r2, r3, #8
 80020ce:	23a0      	movs	r3, #160	@ 0xa0
 80020d0:	05db      	lsls	r3, r3, #23
 80020d2:	0011      	movs	r1, r2
 80020d4:	0018      	movs	r0, r3
 80020d6:	f002 f89e 	bl	8004216 <HAL_GPIO_TogglePin>
			vTaskDelay(1000);
 80020da:	23fa      	movs	r3, #250	@ 0xfa
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	0018      	movs	r0, r3
 80020e0:	f005 f8e2 	bl	80072a8 <vTaskDelay>
	    }

	vTaskDelay(100);
 80020e4:	2064      	movs	r0, #100	@ 0x64
 80020e6:	f005 f8df 	bl	80072a8 <vTaskDelay>
	    if (HAL_I2C_IsDeviceReady(&hi2c2, BQ76940_ADDR, 3, HAL_MAX_DELAY) == HAL_OK)
 80020ea:	e7d6      	b.n	800209a <Cell_Motoring_Task+0x52>
 80020ec:	50000800 	.word	0x50000800
 80020f0:	20000170 	.word	0x20000170
 80020f4:	50000400 	.word	0x50000400

080020f8 <I2CReadBlockWithCRC>:

    *Data = ReadData[0]; // Output the valid data
    return 0;
}
int I2CReadBlockWithCRC(uint8_t I2CSlaveAddress, uint8_t Register, uint8_t *Buffer, uint8_t Length)
{
 80020f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fa:	b097      	sub	sp, #92	@ 0x5c
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	0004      	movs	r4, r0
 8002100:	0008      	movs	r0, r1
 8002102:	603a      	str	r2, [r7, #0]
 8002104:	0019      	movs	r1, r3
 8002106:	1dfb      	adds	r3, r7, #7
 8002108:	1c22      	adds	r2, r4, #0
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	1dbb      	adds	r3, r7, #6
 800210e:	1c02      	adds	r2, r0, #0
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	1d7b      	adds	r3, r7, #5
 8002114:	1c0a      	adds	r2, r1, #0
 8002116:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef WriteStatus = HAL_OK;
 8002118:	234b      	movs	r3, #75	@ 0x4b
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef ReadStatus = HAL_OK;
 8002120:	234a      	movs	r3, #74	@ 0x4a
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]

    uint8_t TargetRegister = Register;
 8002128:	2349      	movs	r3, #73	@ 0x49
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	1dba      	adds	r2, r7, #6
 800212e:	7812      	ldrb	r2, [r2, #0]
 8002130:	701a      	strb	r2, [r3, #0]
    uint8_t ReadData[64];  // Max expected Length = 32 (adjust size as needed)

    if (Length > 32)  // Prevent buffer overrun
 8002132:	1d7b      	adds	r3, r7, #5
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b20      	cmp	r3, #32
 8002138:	d902      	bls.n	8002140 <I2CReadBlockWithCRC+0x48>
        return -1;
 800213a:	2301      	movs	r3, #1
 800213c:	425b      	negs	r3, r3
 800213e:	e04d      	b.n	80021dc <I2CReadBlockWithCRC+0xe4>

    // Send the register address
    WriteStatus = HAL_I2C_Master_Transmit(&hi2c2, I2CSlaveAddress << 1, &TargetRegister, 1, HAL_MAX_DELAY);
 8002140:	1dfb      	adds	r3, r7, #7
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	b29b      	uxth	r3, r3
 8002146:	18db      	adds	r3, r3, r3
 8002148:	b299      	uxth	r1, r3
 800214a:	254b      	movs	r5, #75	@ 0x4b
 800214c:	197c      	adds	r4, r7, r5
 800214e:	2349      	movs	r3, #73	@ 0x49
 8002150:	18fa      	adds	r2, r7, r3
 8002152:	4824      	ldr	r0, [pc, #144]	@ (80021e4 <I2CReadBlockWithCRC+0xec>)
 8002154:	2301      	movs	r3, #1
 8002156:	425b      	negs	r3, r3
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2301      	movs	r3, #1
 800215c:	f002 f91c 	bl	8004398 <HAL_I2C_Master_Transmit>
 8002160:	0003      	movs	r3, r0
 8002162:	7023      	strb	r3, [r4, #0]
    if (WriteStatus != HAL_OK)
 8002164:	197b      	adds	r3, r7, r5
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <I2CReadBlockWithCRC+0x7a>
        return -1;
 800216c:	2301      	movs	r3, #1
 800216e:	425b      	negs	r3, r3
 8002170:	e034      	b.n	80021dc <I2CReadBlockWithCRC+0xe4>

    // Read Length bytes (without CRC)
    ReadStatus = HAL_I2C_Master_Receive(&hi2c2, (I2CSlaveAddress << 1) | 0x01, ReadData, Length, HAL_MAX_DELAY);
 8002172:	1dfb      	adds	r3, r7, #7
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	b21b      	sxth	r3, r3
 8002178:	18db      	adds	r3, r3, r3
 800217a:	b21b      	sxth	r3, r3
 800217c:	2201      	movs	r2, #1
 800217e:	4313      	orrs	r3, r2
 8002180:	b21b      	sxth	r3, r3
 8002182:	b299      	uxth	r1, r3
 8002184:	1d7b      	adds	r3, r7, #5
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b29d      	uxth	r5, r3
 800218a:	264a      	movs	r6, #74	@ 0x4a
 800218c:	19bc      	adds	r4, r7, r6
 800218e:	2308      	movs	r3, #8
 8002190:	18fa      	adds	r2, r7, r3
 8002192:	4814      	ldr	r0, [pc, #80]	@ (80021e4 <I2CReadBlockWithCRC+0xec>)
 8002194:	2301      	movs	r3, #1
 8002196:	425b      	negs	r3, r3
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	002b      	movs	r3, r5
 800219c:	f002 fa26 	bl	80045ec <HAL_I2C_Master_Receive>
 80021a0:	0003      	movs	r3, r0
 80021a2:	7023      	strb	r3, [r4, #0]
    if (ReadStatus != HAL_OK)
 80021a4:	19bb      	adds	r3, r7, r6
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <I2CReadBlockWithCRC+0xba>
        return -1;
 80021ac:	2301      	movs	r3, #1
 80021ae:	425b      	negs	r3, r3
 80021b0:	e014      	b.n	80021dc <I2CReadBlockWithCRC+0xe4>

    // Copy received data to buffer
    for (int i = 0; i < Length; i++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021b6:	e00b      	b.n	80021d0 <I2CReadBlockWithCRC+0xd8>
    {
        Buffer[i] = ReadData[i];
 80021b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	18d3      	adds	r3, r2, r3
 80021be:	2208      	movs	r2, #8
 80021c0:	18b9      	adds	r1, r7, r2
 80021c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021c4:	188a      	adds	r2, r1, r2
 80021c6:	7812      	ldrb	r2, [r2, #0]
 80021c8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < Length; i++)
 80021ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021cc:	3301      	adds	r3, #1
 80021ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021d0:	1d7b      	adds	r3, r7, #5
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021d6:	429a      	cmp	r2, r3
 80021d8:	dbee      	blt.n	80021b8 <I2CReadBlockWithCRC+0xc0>
    }

    return 0;
 80021da:	2300      	movs	r3, #0
        Buffer[i] = data;
    }

    return 0;
    */
}
 80021dc:	0018      	movs	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	b015      	add	sp, #84	@ 0x54
 80021e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021e4:	20000170 	.word	0x20000170

080021e8 <I2CWriteBlockWithCRC>:
int I2CWriteBlockWithCRC(uint8_t I2CSlaveAddress, uint8_t StartAddress, uint8_t *Buffer, uint8_t Length)
{
 80021e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ea:	b08f      	sub	sp, #60	@ 0x3c
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	0004      	movs	r4, r0
 80021f0:	0008      	movs	r0, r1
 80021f2:	603a      	str	r2, [r7, #0]
 80021f4:	0019      	movs	r1, r3
 80021f6:	1dfb      	adds	r3, r7, #7
 80021f8:	1c22      	adds	r2, r4, #0
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	1dbb      	adds	r3, r7, #6
 80021fe:	1c02      	adds	r2, r0, #0
 8002200:	701a      	strb	r2, [r3, #0]
 8002202:	1d7b      	adds	r3, r7, #5
 8002204:	1c0a      	adds	r2, r1, #0
 8002206:	701a      	strb	r2, [r3, #0]

    HAL_StatusTypeDef WriteStatus = HAL_OK;
 8002208:	232e      	movs	r3, #46	@ 0x2e
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]

    uint8_t BufferToSend[32 + 1]; // Max Length = 32 → (1 + 32) = 33 bytes
    uint8_t i;

    if (Length > 32)  // Prevent buffer overflow
 8002210:	1d7b      	adds	r3, r7, #5
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b20      	cmp	r3, #32
 8002216:	d902      	bls.n	800221e <I2CWriteBlockWithCRC+0x36>
        return -1;
 8002218:	2301      	movs	r3, #1
 800221a:	425b      	negs	r3, r3
 800221c:	e040      	b.n	80022a0 <I2CWriteBlockWithCRC+0xb8>

    // First byte: Start address
    BufferToSend[0] = StartAddress;
 800221e:	230c      	movs	r3, #12
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	1dba      	adds	r2, r7, #6
 8002224:	7812      	ldrb	r2, [r2, #0]
 8002226:	701a      	strb	r2, [r3, #0]

    // Copy data bytes into BufferToSend
    for (i = 0; i < Length; i++)
 8002228:	232f      	movs	r3, #47	@ 0x2f
 800222a:	18fb      	adds	r3, r7, r3
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	e010      	b.n	8002254 <I2CWriteBlockWithCRC+0x6c>
    {
        BufferToSend[i + 1] = Buffer[i];
 8002232:	202f      	movs	r0, #47	@ 0x2f
 8002234:	183b      	adds	r3, r7, r0
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	18d2      	adds	r2, r2, r3
 800223c:	183b      	adds	r3, r7, r0
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	3301      	adds	r3, #1
 8002242:	7811      	ldrb	r1, [r2, #0]
 8002244:	220c      	movs	r2, #12
 8002246:	18ba      	adds	r2, r7, r2
 8002248:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < Length; i++)
 800224a:	183b      	adds	r3, r7, r0
 800224c:	781a      	ldrb	r2, [r3, #0]
 800224e:	183b      	adds	r3, r7, r0
 8002250:	3201      	adds	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	232f      	movs	r3, #47	@ 0x2f
 8002256:	18fa      	adds	r2, r7, r3
 8002258:	1d7b      	adds	r3, r7, #5
 800225a:	7812      	ldrb	r2, [r2, #0]
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d3e7      	bcc.n	8002232 <I2CWriteBlockWithCRC+0x4a>
    }

    // Send data starting from StartAddress
    // Total size = 1 (Start Address) + Length (Data Bytes)
    WriteStatus = HAL_I2C_Master_Transmit(&hi2c2, I2CSlaveAddress << 1, BufferToSend, 1 + Length, HAL_MAX_DELAY);
 8002262:	1dfb      	adds	r3, r7, #7
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	18db      	adds	r3, r3, r3
 800226a:	b299      	uxth	r1, r3
 800226c:	1d7b      	adds	r3, r7, #5
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	b29b      	uxth	r3, r3
 8002272:	3301      	adds	r3, #1
 8002274:	b29d      	uxth	r5, r3
 8002276:	262e      	movs	r6, #46	@ 0x2e
 8002278:	19bc      	adds	r4, r7, r6
 800227a:	230c      	movs	r3, #12
 800227c:	18fa      	adds	r2, r7, r3
 800227e:	480a      	ldr	r0, [pc, #40]	@ (80022a8 <I2CWriteBlockWithCRC+0xc0>)
 8002280:	2301      	movs	r3, #1
 8002282:	425b      	negs	r3, r3
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	002b      	movs	r3, r5
 8002288:	f002 f886 	bl	8004398 <HAL_I2C_Master_Transmit>
 800228c:	0003      	movs	r3, r0
 800228e:	7023      	strb	r3, [r4, #0]

    if (WriteStatus != HAL_OK)
 8002290:	19bb      	adds	r3, r7, r6
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <I2CWriteBlockWithCRC+0xb6>
        return -1;
 8002298:	2301      	movs	r3, #1
 800229a:	425b      	negs	r3, r3
 800229c:	e000      	b.n	80022a0 <I2CWriteBlockWithCRC+0xb8>

    return 0;
 800229e:	2300      	movs	r3, #0
        return -1;

    return 0;

   */
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b00d      	add	sp, #52	@ 0x34
 80022a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a8:	20000170 	.word	0x20000170

080022ac <GetADCGainOffset>:


HAL_StatusTypeDef GetADCGainOffset()
{
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef WriteStatus = HAL_OK;
 80022b2:	1dfb      	adds	r3, r7, #7
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]


    WriteStatus = HAL_I2C_Mem_Read(&hi2c2, BQMAXIMO, ADCGAIN1, I2C_MEMADD_SIZE_8BIT, &(Registers.ADCGain1.ADCGain1Byte), 1, HAL_MAX_DELAY);
 80022b8:	1dfc      	adds	r4, r7, #7
 80022ba:	481a      	ldr	r0, [pc, #104]	@ (8002324 <GetADCGainOffset+0x78>)
 80022bc:	2301      	movs	r3, #1
 80022be:	425b      	negs	r3, r3
 80022c0:	9302      	str	r3, [sp, #8]
 80022c2:	2301      	movs	r3, #1
 80022c4:	9301      	str	r3, [sp, #4]
 80022c6:	4b18      	ldr	r3, [pc, #96]	@ (8002328 <GetADCGainOffset+0x7c>)
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	2301      	movs	r3, #1
 80022cc:	2250      	movs	r2, #80	@ 0x50
 80022ce:	2110      	movs	r1, #16
 80022d0:	f002 fa94 	bl	80047fc <HAL_I2C_Mem_Read>
 80022d4:	0003      	movs	r3, r0
 80022d6:	7023      	strb	r3, [r4, #0]
    WriteStatus = HAL_I2C_Mem_Read(&hi2c2, BQMAXIMO, ADCGAIN2, I2C_MEMADD_SIZE_8BIT, &(Registers.ADCGain2.ADCGain2Byte), 1, HAL_MAX_DELAY);
 80022d8:	1dfc      	adds	r4, r7, #7
 80022da:	4812      	ldr	r0, [pc, #72]	@ (8002324 <GetADCGainOffset+0x78>)
 80022dc:	2301      	movs	r3, #1
 80022de:	425b      	negs	r3, r3
 80022e0:	9302      	str	r3, [sp, #8]
 80022e2:	2301      	movs	r3, #1
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	4b11      	ldr	r3, [pc, #68]	@ (800232c <GetADCGainOffset+0x80>)
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2301      	movs	r3, #1
 80022ec:	2259      	movs	r2, #89	@ 0x59
 80022ee:	2110      	movs	r1, #16
 80022f0:	f002 fa84 	bl	80047fc <HAL_I2C_Mem_Read>
 80022f4:	0003      	movs	r3, r0
 80022f6:	7023      	strb	r3, [r4, #0]
    WriteStatus = HAL_I2C_Mem_Read(&hi2c2, BQMAXIMO, ADCOFFSET, I2C_MEMADD_SIZE_8BIT, &(Registers.ADCOffset), 1, HAL_MAX_DELAY);
 80022f8:	1dfc      	adds	r4, r7, #7
 80022fa:	480a      	ldr	r0, [pc, #40]	@ (8002324 <GetADCGainOffset+0x78>)
 80022fc:	2301      	movs	r3, #1
 80022fe:	425b      	negs	r3, r3
 8002300:	9302      	str	r3, [sp, #8]
 8002302:	2301      	movs	r3, #1
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <GetADCGainOffset+0x84>)
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2301      	movs	r3, #1
 800230c:	2251      	movs	r2, #81	@ 0x51
 800230e:	2110      	movs	r1, #16
 8002310:	f002 fa74 	bl	80047fc <HAL_I2C_Mem_Read>
 8002314:	0003      	movs	r3, r0
 8002316:	7023      	strb	r3, [r4, #0]

	//result = ReadRegisterWithCRC(BQMAXIMO, ADCGAIN1, &(Registers.ADCGain1.ADCGain1Byte));
	//result = ReadRegisterWithCRC(BQMAXIMO, ADCGAIN2, &(Registers.ADCGain2.ADCGain2Byte));
	//result = ReadRegisterWithCRC(BQMAXIMO, ADCOFFSET, &(Registers.ADCOffset));

	return WriteStatus;
 8002318:	1dfb      	adds	r3, r7, #7
 800231a:	781b      	ldrb	r3, [r3, #0]
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b003      	add	sp, #12
 8002322:	bd90      	pop	{r4, r7, pc}
 8002324:	20000170 	.word	0x20000170
 8002328:	20000060 	.word	0x20000060
 800232c:	20000062 	.word	0x20000062
 8002330:	20000061 	.word	0x20000061

08002334 <ConfigureBqMaximo>:

HAL_StatusTypeDef ConfigureBqMaximo()
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef WriteStatus = HAL_OK;
 800233a:	1dfb      	adds	r3, r7, #7
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]
	unsigned char bqMaximoProtectionConfig[5];

	WriteStatus = I2CWriteBlockWithCRC(BQMAXIMO, PROTECT1, &(Registers.Protect1.Protect1Byte), 5);
 8002340:	4a1c      	ldr	r2, [pc, #112]	@ (80023b4 <ConfigureBqMaximo+0x80>)
 8002342:	2305      	movs	r3, #5
 8002344:	2106      	movs	r1, #6
 8002346:	2010      	movs	r0, #16
 8002348:	f7ff ff4e 	bl	80021e8 <I2CWriteBlockWithCRC>
 800234c:	0002      	movs	r2, r0
 800234e:	1dfb      	adds	r3, r7, #7
 8002350:	701a      	strb	r2, [r3, #0]

	WriteStatus = I2CReadBlockWithCRC(BQMAXIMO, PROTECT1, bqMaximoProtectionConfig, 5);
 8002352:	003a      	movs	r2, r7
 8002354:	2305      	movs	r3, #5
 8002356:	2106      	movs	r1, #6
 8002358:	2010      	movs	r0, #16
 800235a:	f7ff fecd 	bl	80020f8 <I2CReadBlockWithCRC>
 800235e:	0002      	movs	r2, r0
 8002360:	1dfb      	adds	r3, r7, #7
 8002362:	701a      	strb	r2, [r3, #0]

	if(bqMaximoProtectionConfig[0] != Registers.Protect1.Protect1Byte
 8002364:	003b      	movs	r3, r7
 8002366:	781a      	ldrb	r2, [r3, #0]
 8002368:	4b13      	ldr	r3, [pc, #76]	@ (80023b8 <ConfigureBqMaximo+0x84>)
 800236a:	799b      	ldrb	r3, [r3, #6]
 800236c:	429a      	cmp	r2, r3
 800236e:	d117      	bne.n	80023a0 <ConfigureBqMaximo+0x6c>
			|| bqMaximoProtectionConfig[1] != Registers.Protect2.Protect2Byte
 8002370:	003b      	movs	r3, r7
 8002372:	785a      	ldrb	r2, [r3, #1]
 8002374:	4b10      	ldr	r3, [pc, #64]	@ (80023b8 <ConfigureBqMaximo+0x84>)
 8002376:	79db      	ldrb	r3, [r3, #7]
 8002378:	429a      	cmp	r2, r3
 800237a:	d111      	bne.n	80023a0 <ConfigureBqMaximo+0x6c>
			|| bqMaximoProtectionConfig[2] != Registers.Protect3.Protect3Byte
 800237c:	003b      	movs	r3, r7
 800237e:	789a      	ldrb	r2, [r3, #2]
 8002380:	4b0d      	ldr	r3, [pc, #52]	@ (80023b8 <ConfigureBqMaximo+0x84>)
 8002382:	7a1b      	ldrb	r3, [r3, #8]
 8002384:	429a      	cmp	r2, r3
 8002386:	d10b      	bne.n	80023a0 <ConfigureBqMaximo+0x6c>
			|| bqMaximoProtectionConfig[3] != Registers.OVTrip
 8002388:	003b      	movs	r3, r7
 800238a:	78da      	ldrb	r2, [r3, #3]
 800238c:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <ConfigureBqMaximo+0x84>)
 800238e:	7a5b      	ldrb	r3, [r3, #9]
 8002390:	429a      	cmp	r2, r3
 8002392:	d105      	bne.n	80023a0 <ConfigureBqMaximo+0x6c>
			|| bqMaximoProtectionConfig[4] != Registers.UVTrip)
 8002394:	003b      	movs	r3, r7
 8002396:	791a      	ldrb	r2, [r3, #4]
 8002398:	4b07      	ldr	r3, [pc, #28]	@ (80023b8 <ConfigureBqMaximo+0x84>)
 800239a:	7a9b      	ldrb	r3, [r3, #10]
 800239c:	429a      	cmp	r2, r3
 800239e:	d002      	beq.n	80023a6 <ConfigureBqMaximo+0x72>
	{
		WriteStatus = HAL_ERROR;
 80023a0:	1dfb      	adds	r3, r7, #7
 80023a2:	2201      	movs	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]
	}

	return WriteStatus;
 80023a6:	1dfb      	adds	r3, r7, #7
 80023a8:	781b      	ldrb	r3, [r3, #0]
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b002      	add	sp, #8
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	20000032 	.word	0x20000032
 80023b8:	2000002c 	.word	0x2000002c

080023bc <InitialisebqMaximo>:

HAL_StatusTypeDef InitialisebqMaximo()
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef WriteStatus = HAL_OK;
 80023c2:	1dfb      	adds	r3, r7, #7
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]

	Registers.Protect1.Protect1Bit.SCD_DELAY = SCDDelay;
 80023c8:	2301      	movs	r3, #1
 80023ca:	1c1a      	adds	r2, r3, #0
 80023cc:	2303      	movs	r3, #3
 80023ce:	4013      	ands	r3, r2
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4b71      	ldr	r3, [pc, #452]	@ (8002598 <InitialisebqMaximo+0x1dc>)
 80023d4:	2103      	movs	r1, #3
 80023d6:	400a      	ands	r2, r1
 80023d8:	00d0      	lsls	r0, r2, #3
 80023da:	799a      	ldrb	r2, [r3, #6]
 80023dc:	2118      	movs	r1, #24
 80023de:	438a      	bics	r2, r1
 80023e0:	1c11      	adds	r1, r2, #0
 80023e2:	1c02      	adds	r2, r0, #0
 80023e4:	430a      	orrs	r2, r1
 80023e6:	719a      	strb	r2, [r3, #6]
	Registers.Protect1.Protect1Bit.SCD_THRESH = SCDThresh;
 80023e8:	2302      	movs	r3, #2
 80023ea:	1c1a      	adds	r2, r3, #0
 80023ec:	2307      	movs	r3, #7
 80023ee:	4013      	ands	r3, r2
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4b69      	ldr	r3, [pc, #420]	@ (8002598 <InitialisebqMaximo+0x1dc>)
 80023f4:	2107      	movs	r1, #7
 80023f6:	400a      	ands	r2, r1
 80023f8:	0010      	movs	r0, r2
 80023fa:	799a      	ldrb	r2, [r3, #6]
 80023fc:	2107      	movs	r1, #7
 80023fe:	438a      	bics	r2, r1
 8002400:	1c11      	adds	r1, r2, #0
 8002402:	1c02      	adds	r2, r0, #0
 8002404:	430a      	orrs	r2, r1
 8002406:	719a      	strb	r2, [r3, #6]
	Registers.Protect2.Protect2Bit.OCD_DELAY = OCDDelay;
 8002408:	2305      	movs	r3, #5
 800240a:	1c1a      	adds	r2, r3, #0
 800240c:	2307      	movs	r3, #7
 800240e:	4013      	ands	r3, r2
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4b61      	ldr	r3, [pc, #388]	@ (8002598 <InitialisebqMaximo+0x1dc>)
 8002414:	2107      	movs	r1, #7
 8002416:	400a      	ands	r2, r1
 8002418:	0110      	lsls	r0, r2, #4
 800241a:	79da      	ldrb	r2, [r3, #7]
 800241c:	2170      	movs	r1, #112	@ 0x70
 800241e:	438a      	bics	r2, r1
 8002420:	1c11      	adds	r1, r2, #0
 8002422:	1c02      	adds	r2, r0, #0
 8002424:	430a      	orrs	r2, r1
 8002426:	71da      	strb	r2, [r3, #7]
	Registers.Protect2.Protect2Bit.OCD_THRESH = OCDThresh;
 8002428:	2301      	movs	r3, #1
 800242a:	1c1a      	adds	r2, r3, #0
 800242c:	230f      	movs	r3, #15
 800242e:	4013      	ands	r3, r2
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4b59      	ldr	r3, [pc, #356]	@ (8002598 <InitialisebqMaximo+0x1dc>)
 8002434:	210f      	movs	r1, #15
 8002436:	400a      	ands	r2, r1
 8002438:	0010      	movs	r0, r2
 800243a:	79da      	ldrb	r2, [r3, #7]
 800243c:	210f      	movs	r1, #15
 800243e:	438a      	bics	r2, r1
 8002440:	1c11      	adds	r1, r2, #0
 8002442:	1c02      	adds	r2, r0, #0
 8002444:	430a      	orrs	r2, r1
 8002446:	71da      	strb	r2, [r3, #7]
	Registers.Protect3.Protect3Bit.OV_DELAY = OVDelay;
 8002448:	2301      	movs	r3, #1
 800244a:	1c1a      	adds	r2, r3, #0
 800244c:	2303      	movs	r3, #3
 800244e:	4013      	ands	r3, r2
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4b51      	ldr	r3, [pc, #324]	@ (8002598 <InitialisebqMaximo+0x1dc>)
 8002454:	2103      	movs	r1, #3
 8002456:	400a      	ands	r2, r1
 8002458:	0110      	lsls	r0, r2, #4
 800245a:	7a1a      	ldrb	r2, [r3, #8]
 800245c:	2130      	movs	r1, #48	@ 0x30
 800245e:	438a      	bics	r2, r1
 8002460:	1c11      	adds	r1, r2, #0
 8002462:	1c02      	adds	r2, r0, #0
 8002464:	430a      	orrs	r2, r1
 8002466:	721a      	strb	r2, [r3, #8]
	Registers.Protect3.Protect3Bit.UV_DELAY = UVDelay;
 8002468:	2302      	movs	r3, #2
 800246a:	1c1a      	adds	r2, r3, #0
 800246c:	2303      	movs	r3, #3
 800246e:	4013      	ands	r3, r2
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4b49      	ldr	r3, [pc, #292]	@ (8002598 <InitialisebqMaximo+0x1dc>)
 8002474:	0190      	lsls	r0, r2, #6
 8002476:	7a1a      	ldrb	r2, [r3, #8]
 8002478:	213f      	movs	r1, #63	@ 0x3f
 800247a:	400a      	ands	r2, r1
 800247c:	1c11      	adds	r1, r2, #0
 800247e:	1c02      	adds	r2, r0, #0
 8002480:	430a      	orrs	r2, r1
 8002482:	721a      	strb	r2, [r3, #8]

	WriteStatus = GetADCGainOffset();
 8002484:	1dfc      	adds	r4, r7, #7
 8002486:	f7ff ff11 	bl	80022ac <GetADCGainOffset>
 800248a:	0003      	movs	r3, r0
 800248c:	7023      	strb	r3, [r4, #0]

	Gain = (365 + ((Registers.ADCGain1.ADCGain1Byte & 0x0C) << 1) + ((Registers.ADCGain2.ADCGain2Byte & 0xE0)>> 5)) / 1000.0;
 800248e:	4b42      	ldr	r3, [pc, #264]	@ (8002598 <InitialisebqMaximo+0x1dc>)
 8002490:	2234      	movs	r2, #52	@ 0x34
 8002492:	5c9b      	ldrb	r3, [r3, r2]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2218      	movs	r2, #24
 8002498:	4013      	ands	r3, r2
 800249a:	336e      	adds	r3, #110	@ 0x6e
 800249c:	33ff      	adds	r3, #255	@ 0xff
 800249e:	4a3e      	ldr	r2, [pc, #248]	@ (8002598 <InitialisebqMaximo+0x1dc>)
 80024a0:	2136      	movs	r1, #54	@ 0x36
 80024a2:	5c52      	ldrb	r2, [r2, r1]
 80024a4:	0952      	lsrs	r2, r2, #5
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	189b      	adds	r3, r3, r2
 80024aa:	0018      	movs	r0, r3
 80024ac:	f7ff fb56 	bl	8001b5c <__aeabi_i2d>
 80024b0:	2200      	movs	r2, #0
 80024b2:	4b3a      	ldr	r3, [pc, #232]	@ (800259c <InitialisebqMaximo+0x1e0>)
 80024b4:	f7fe fbf4 	bl	8000ca0 <__aeabi_ddiv>
 80024b8:	0002      	movs	r2, r0
 80024ba:	000b      	movs	r3, r1
 80024bc:	0010      	movs	r0, r2
 80024be:	0019      	movs	r1, r3
 80024c0:	f7ff fbc2 	bl	8001c48 <__aeabi_d2f>
 80024c4:	1c02      	adds	r2, r0, #0
 80024c6:	4b36      	ldr	r3, [pc, #216]	@ (80025a0 <InitialisebqMaximo+0x1e4>)
 80024c8:	601a      	str	r2, [r3, #0]
	iGain = 365 + ((Registers.ADCGain1.ADCGain1Byte & 0x0C) << 1) + ((Registers.ADCGain2.ADCGain2Byte & 0xE0)>> 5);
 80024ca:	4b33      	ldr	r3, [pc, #204]	@ (8002598 <InitialisebqMaximo+0x1dc>)
 80024cc:	2234      	movs	r2, #52	@ 0x34
 80024ce:	5c9b      	ldrb	r3, [r3, r2]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2218      	movs	r2, #24
 80024d4:	4013      	ands	r3, r2
 80024d6:	336e      	adds	r3, #110	@ 0x6e
 80024d8:	33ff      	adds	r3, #255	@ 0xff
 80024da:	4a2f      	ldr	r2, [pc, #188]	@ (8002598 <InitialisebqMaximo+0x1dc>)
 80024dc:	2136      	movs	r1, #54	@ 0x36
 80024de:	5c52      	ldrb	r2, [r2, r1]
 80024e0:	0952      	lsrs	r2, r2, #5
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	189a      	adds	r2, r3, r2
 80024e6:	4b2f      	ldr	r3, [pc, #188]	@ (80025a4 <InitialisebqMaximo+0x1e8>)
 80024e8:	601a      	str	r2, [r3, #0]

    Registers.OVTrip = (unsigned char)((((unsigned short)((OVPThreshold - Registers.ADCOffset)/Gain + 0.5) - OV_THRESH_BASE) >> 4) & 0xFF);
 80024ea:	4a2f      	ldr	r2, [pc, #188]	@ (80025a8 <InitialisebqMaximo+0x1ec>)
 80024ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002598 <InitialisebqMaximo+0x1dc>)
 80024ee:	2135      	movs	r1, #53	@ 0x35
 80024f0:	5c5b      	ldrb	r3, [r3, r1]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	0018      	movs	r0, r3
 80024f6:	f7fd ffc7 	bl	8000488 <__aeabi_ui2f>
 80024fa:	1c02      	adds	r2, r0, #0
 80024fc:	4b28      	ldr	r3, [pc, #160]	@ (80025a0 <InitialisebqMaximo+0x1e4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	1c19      	adds	r1, r3, #0
 8002502:	1c10      	adds	r0, r2, #0
 8002504:	f7fd feaa 	bl	800025c <__aeabi_fdiv>
 8002508:	1c03      	adds	r3, r0, #0
 800250a:	1c18      	adds	r0, r3, #0
 800250c:	f7ff fb54 	bl	8001bb8 <__aeabi_f2d>
 8002510:	2200      	movs	r2, #0
 8002512:	4b26      	ldr	r3, [pc, #152]	@ (80025ac <InitialisebqMaximo+0x1f0>)
 8002514:	f7fd fffe 	bl	8000514 <__aeabi_dadd>
 8002518:	0002      	movs	r2, r0
 800251a:	000b      	movs	r3, r1
 800251c:	0010      	movs	r0, r2
 800251e:	0019      	movs	r1, r3
 8002520:	f7fd fe7e 	bl	8000220 <__aeabi_d2uiz>
 8002524:	0003      	movs	r3, r0
 8002526:	b29b      	uxth	r3, r3
 8002528:	4a21      	ldr	r2, [pc, #132]	@ (80025b0 <InitialisebqMaximo+0x1f4>)
 800252a:	4694      	mov	ip, r2
 800252c:	4463      	add	r3, ip
 800252e:	111b      	asrs	r3, r3, #4
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4b19      	ldr	r3, [pc, #100]	@ (8002598 <InitialisebqMaximo+0x1dc>)
 8002534:	725a      	strb	r2, [r3, #9]
    Registers.UVTrip = (unsigned char)((((unsigned short)((UVPThreshold - Registers.ADCOffset)/Gain + 0.5) - UV_THRESH_BASE) >> 4) & 0xFF);
 8002536:	4a1f      	ldr	r2, [pc, #124]	@ (80025b4 <InitialisebqMaximo+0x1f8>)
 8002538:	4b17      	ldr	r3, [pc, #92]	@ (8002598 <InitialisebqMaximo+0x1dc>)
 800253a:	2135      	movs	r1, #53	@ 0x35
 800253c:	5c5b      	ldrb	r3, [r3, r1]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	0018      	movs	r0, r3
 8002542:	f7fd ffa1 	bl	8000488 <__aeabi_ui2f>
 8002546:	1c02      	adds	r2, r0, #0
 8002548:	4b15      	ldr	r3, [pc, #84]	@ (80025a0 <InitialisebqMaximo+0x1e4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	1c19      	adds	r1, r3, #0
 800254e:	1c10      	adds	r0, r2, #0
 8002550:	f7fd fe84 	bl	800025c <__aeabi_fdiv>
 8002554:	1c03      	adds	r3, r0, #0
 8002556:	1c18      	adds	r0, r3, #0
 8002558:	f7ff fb2e 	bl	8001bb8 <__aeabi_f2d>
 800255c:	2200      	movs	r2, #0
 800255e:	4b13      	ldr	r3, [pc, #76]	@ (80025ac <InitialisebqMaximo+0x1f0>)
 8002560:	f7fd ffd8 	bl	8000514 <__aeabi_dadd>
 8002564:	0002      	movs	r2, r0
 8002566:	000b      	movs	r3, r1
 8002568:	0010      	movs	r0, r2
 800256a:	0019      	movs	r1, r3
 800256c:	f7fd fe58 	bl	8000220 <__aeabi_d2uiz>
 8002570:	0003      	movs	r3, r0
 8002572:	b29b      	uxth	r3, r3
 8002574:	4a10      	ldr	r2, [pc, #64]	@ (80025b8 <InitialisebqMaximo+0x1fc>)
 8002576:	4694      	mov	ip, r2
 8002578:	4463      	add	r3, ip
 800257a:	111b      	asrs	r3, r3, #4
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <InitialisebqMaximo+0x1dc>)
 8002580:	729a      	strb	r2, [r3, #10]

    WriteStatus = ConfigureBqMaximo();
 8002582:	1dfc      	adds	r4, r7, #7
 8002584:	f7ff fed6 	bl	8002334 <ConfigureBqMaximo>
 8002588:	0003      	movs	r3, r0
 800258a:	7023      	strb	r3, [r4, #0]

    return WriteStatus;
 800258c:	1dfb      	adds	r3, r7, #7
 800258e:	781b      	ldrb	r3, [r3, #0]
}
 8002590:	0018      	movs	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	b003      	add	sp, #12
 8002596:	bd90      	pop	{r4, r7, pc}
 8002598:	2000002c 	.word	0x2000002c
 800259c:	408f4000 	.word	0x408f4000
 80025a0:	200000a0 	.word	0x200000a0
 80025a4:	200000a4 	.word	0x200000a4
 80025a8:	000010cc 	.word	0x000010cc
 80025ac:	3fe00000 	.word	0x3fe00000
 80025b0:	ffffdff8 	.word	0xffffdff8
 80025b4:	000009c4 	.word	0x000009c4
 80025b8:	fffff000 	.word	0xfffff000

080025bc <UpdateVoltageFromBqMaximo>:

HAL_StatusTypeDef UpdateVoltageFromBqMaximo()
{
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef WriteStatus = HAL_OK;
 80025c2:	240f      	movs	r4, #15
 80025c4:	193b      	adds	r3, r7, r4
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
	int i = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
	unsigned char *pRawADCData = NULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
	unsigned int iTemp = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60bb      	str	r3, [r7, #8]
	unsigned long lTemp = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	607b      	str	r3, [r7, #4]

	WriteStatus = I2CReadBlockWithCRC(BQMAXIMO, \
 80025da:	4a1f      	ldr	r2, [pc, #124]	@ (8002658 <UpdateVoltageFromBqMaximo+0x9c>)
 80025dc:	231e      	movs	r3, #30
 80025de:	210c      	movs	r1, #12
 80025e0:	2010      	movs	r0, #16
 80025e2:	f7ff fd89 	bl	80020f8 <I2CReadBlockWithCRC>
 80025e6:	0002      	movs	r2, r0
 80025e8:	193b      	adds	r3, r7, r4
 80025ea:	701a      	strb	r2, [r3, #0]
			VC1_HI_BYTE, \
			&(Registers.VCell1.VCell1Byte.VC1_HI), \
			30);

	pRawADCData = &Registers.VCell1.VCell1Byte.VC1_HI;
 80025ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002658 <UpdateVoltageFromBqMaximo+0x9c>)
 80025ee:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 15; i++)
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	e025      	b.n	8002642 <UpdateVoltageFromBqMaximo+0x86>
	{
		iTemp = (unsigned int)(*pRawADCData << 8) + *(pRawADCData + 1);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	3201      	adds	r2, #1
 8002600:	7812      	ldrb	r2, [r2, #0]
 8002602:	189b      	adds	r3, r3, r2
 8002604:	60bb      	str	r3, [r7, #8]
		lTemp = ((unsigned long)iTemp * iGain)/1000;
 8002606:	4b15      	ldr	r3, [pc, #84]	@ (800265c <UpdateVoltageFromBqMaximo+0xa0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	001a      	movs	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	4353      	muls	r3, r2
 8002610:	22fa      	movs	r2, #250	@ 0xfa
 8002612:	0091      	lsls	r1, r2, #2
 8002614:	0018      	movs	r0, r3
 8002616:	f7fd fd77 	bl	8000108 <__udivsi3>
 800261a:	0003      	movs	r3, r0
 800261c:	607b      	str	r3, [r7, #4]
		lTemp += Registers.ADCOffset;
 800261e:	4b10      	ldr	r3, [pc, #64]	@ (8002660 <UpdateVoltageFromBqMaximo+0xa4>)
 8002620:	2235      	movs	r2, #53	@ 0x35
 8002622:	5c9b      	ldrb	r3, [r3, r2]
 8002624:	001a      	movs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	189b      	adds	r3, r3, r2
 800262a:	607b      	str	r3, [r7, #4]
		CellVoltage[i] = lTemp;
 800262c:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <UpdateVoltageFromBqMaximo+0xa8>)
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	0092      	lsls	r2, r2, #2
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	50d1      	str	r1, [r2, r3]
		pRawADCData += 2;
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	3302      	adds	r3, #2
 800263a:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 15; i++)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3301      	adds	r3, #1
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b0e      	cmp	r3, #14
 8002646:	ddd6      	ble.n	80025f6 <UpdateVoltageFromBqMaximo+0x3a>
	}

	return WriteStatus;
 8002648:	230f      	movs	r3, #15
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	781b      	ldrb	r3, [r3, #0]
}
 800264e:	0018      	movs	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	b007      	add	sp, #28
 8002654:	bd90      	pop	{r4, r7, pc}
 8002656:	46c0      	nop			@ (mov r8, r8)
 8002658:	20000038 	.word	0x20000038
 800265c:	200000a4 	.word	0x200000a4
 8002660:	2000002c 	.word	0x2000002c
 8002664:	20000064 	.word	0x20000064

08002668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800266c:	f000 fcaa 	bl	8002fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002670:	f000 f83e 	bl	80026f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002674:	f000 f9b6 	bl	80029e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002678:	f000 f882 	bl	8002780 <MX_ADC1_Init>
  MX_FDCAN2_Init();
 800267c:	f000 f8ea 	bl	8002854 <MX_FDCAN2_Init>
  MX_I2C3_Init();
 8002680:	f000 f970 	bl	8002964 <MX_I2C3_Init>
  MX_I2C2_Init();
 8002684:	f000 f92e 	bl	80028e4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002688:	f003 fe96 	bl	80063b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800268c:	4a0f      	ldr	r2, [pc, #60]	@ (80026cc <main+0x64>)
 800268e:	4b10      	ldr	r3, [pc, #64]	@ (80026d0 <main+0x68>)
 8002690:	2100      	movs	r1, #0
 8002692:	0018      	movs	r0, r3
 8002694:	f003 fed8 	bl	8006448 <osThreadNew>
 8002698:	0002      	movs	r2, r0
 800269a:	4b0e      	ldr	r3, [pc, #56]	@ (80026d4 <main+0x6c>)
 800269c:	601a      	str	r2, [r3, #0]

  /* creation of HeartBeat_Task */
  HeartBeat_TaskHandle = osThreadNew(HB_Task, NULL, &HeartBeat_Task_attributes);
 800269e:	4a0e      	ldr	r2, [pc, #56]	@ (80026d8 <main+0x70>)
 80026a0:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <main+0x74>)
 80026a2:	2100      	movs	r1, #0
 80026a4:	0018      	movs	r0, r3
 80026a6:	f003 fecf 	bl	8006448 <osThreadNew>
 80026aa:	0002      	movs	r2, r0
 80026ac:	4b0c      	ldr	r3, [pc, #48]	@ (80026e0 <main+0x78>)
 80026ae:	601a      	str	r2, [r3, #0]

  /* creation of Cell_Monitoring */
  Cell_MonitoringHandle = osThreadNew(Cell_Motoring_Task, NULL, &Cell_Monitoring_attributes);
 80026b0:	4a0c      	ldr	r2, [pc, #48]	@ (80026e4 <main+0x7c>)
 80026b2:	4b0d      	ldr	r3, [pc, #52]	@ (80026e8 <main+0x80>)
 80026b4:	2100      	movs	r1, #0
 80026b6:	0018      	movs	r0, r3
 80026b8:	f003 fec6 	bl	8006448 <osThreadNew>
 80026bc:	0002      	movs	r2, r0
 80026be:	4b0b      	ldr	r3, [pc, #44]	@ (80026ec <main+0x84>)
 80026c0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80026c2:	f003 fe9b 	bl	80063fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026c6:	46c0      	nop			@ (mov r8, r8)
 80026c8:	e7fd      	b.n	80026c6 <main+0x5e>
 80026ca:	46c0      	nop			@ (mov r8, r8)
 80026cc:	080089e4 	.word	0x080089e4
 80026d0:	08002c35 	.word	0x08002c35
 80026d4:	20000218 	.word	0x20000218
 80026d8:	08008a08 	.word	0x08008a08
 80026dc:	08002c41 	.word	0x08002c41
 80026e0:	2000021c 	.word	0x2000021c
 80026e4:	08008a2c 	.word	0x08008a2c
 80026e8:	08002049 	.word	0x08002049
 80026ec:	20000220 	.word	0x20000220

080026f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b095      	sub	sp, #84	@ 0x54
 80026f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026f6:	2414      	movs	r4, #20
 80026f8:	193b      	adds	r3, r7, r4
 80026fa:	0018      	movs	r0, r3
 80026fc:	233c      	movs	r3, #60	@ 0x3c
 80026fe:	001a      	movs	r2, r3
 8002700:	2100      	movs	r1, #0
 8002702:	f006 f8ad 	bl	8008860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002706:	1d3b      	adds	r3, r7, #4
 8002708:	0018      	movs	r0, r3
 800270a:	2310      	movs	r3, #16
 800270c:	001a      	movs	r2, r3
 800270e:	2100      	movs	r1, #0
 8002710:	f006 f8a6 	bl	8008860 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002714:	2380      	movs	r3, #128	@ 0x80
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	0018      	movs	r0, r3
 800271a:	f002 fe6d 	bl	80053f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800271e:	193b      	adds	r3, r7, r4
 8002720:	2202      	movs	r2, #2
 8002722:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002724:	193b      	adds	r3, r7, r4
 8002726:	2280      	movs	r2, #128	@ 0x80
 8002728:	0052      	lsls	r2, r2, #1
 800272a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800272c:	193b      	adds	r3, r7, r4
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002732:	193b      	adds	r3, r7, r4
 8002734:	2240      	movs	r2, #64	@ 0x40
 8002736:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002738:	193b      	adds	r3, r7, r4
 800273a:	2200      	movs	r2, #0
 800273c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800273e:	193b      	adds	r3, r7, r4
 8002740:	0018      	movs	r0, r3
 8002742:	f002 fe99 	bl	8005478 <HAL_RCC_OscConfig>
 8002746:	1e03      	subs	r3, r0, #0
 8002748:	d001      	beq.n	800274e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800274a:	f000 fa7f 	bl	8002c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	2207      	movs	r2, #7
 8002752:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002754:	1d3b      	adds	r3, r7, #4
 8002756:	2200      	movs	r2, #0
 8002758:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002760:	1d3b      	adds	r3, r7, #4
 8002762:	2200      	movs	r2, #0
 8002764:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	2100      	movs	r1, #0
 800276a:	0018      	movs	r0, r3
 800276c:	f003 f9e4 	bl	8005b38 <HAL_RCC_ClockConfig>
 8002770:	1e03      	subs	r3, r0, #0
 8002772:	d001      	beq.n	8002778 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002774:	f000 fa6a 	bl	8002c4c <Error_Handler>
  }
}
 8002778:	46c0      	nop			@ (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b015      	add	sp, #84	@ 0x54
 800277e:	bd90      	pop	{r4, r7, pc}

08002780 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	0018      	movs	r0, r3
 800278a:	230c      	movs	r3, #12
 800278c:	001a      	movs	r2, r3
 800278e:	2100      	movs	r1, #0
 8002790:	f006 f866 	bl	8008860 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002794:	4b2d      	ldr	r3, [pc, #180]	@ (800284c <MX_ADC1_Init+0xcc>)
 8002796:	4a2e      	ldr	r2, [pc, #184]	@ (8002850 <MX_ADC1_Init+0xd0>)
 8002798:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800279a:	4b2c      	ldr	r3, [pc, #176]	@ (800284c <MX_ADC1_Init+0xcc>)
 800279c:	2280      	movs	r2, #128	@ 0x80
 800279e:	05d2      	lsls	r2, r2, #23
 80027a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027a2:	4b2a      	ldr	r3, [pc, #168]	@ (800284c <MX_ADC1_Init+0xcc>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027a8:	4b28      	ldr	r3, [pc, #160]	@ (800284c <MX_ADC1_Init+0xcc>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80027ae:	4b27      	ldr	r3, [pc, #156]	@ (800284c <MX_ADC1_Init+0xcc>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027b4:	4b25      	ldr	r3, [pc, #148]	@ (800284c <MX_ADC1_Init+0xcc>)
 80027b6:	2204      	movs	r2, #4
 80027b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80027ba:	4b24      	ldr	r3, [pc, #144]	@ (800284c <MX_ADC1_Init+0xcc>)
 80027bc:	2200      	movs	r2, #0
 80027be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80027c0:	4b22      	ldr	r3, [pc, #136]	@ (800284c <MX_ADC1_Init+0xcc>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80027c6:	4b21      	ldr	r3, [pc, #132]	@ (800284c <MX_ADC1_Init+0xcc>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80027cc:	4b1f      	ldr	r3, [pc, #124]	@ (800284c <MX_ADC1_Init+0xcc>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027d2:	4b1e      	ldr	r3, [pc, #120]	@ (800284c <MX_ADC1_Init+0xcc>)
 80027d4:	2220      	movs	r2, #32
 80027d6:	2100      	movs	r1, #0
 80027d8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027da:	4b1c      	ldr	r3, [pc, #112]	@ (800284c <MX_ADC1_Init+0xcc>)
 80027dc:	2200      	movs	r2, #0
 80027de:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027e0:	4b1a      	ldr	r3, [pc, #104]	@ (800284c <MX_ADC1_Init+0xcc>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80027e6:	4b19      	ldr	r3, [pc, #100]	@ (800284c <MX_ADC1_Init+0xcc>)
 80027e8:	222c      	movs	r2, #44	@ 0x2c
 80027ea:	2100      	movs	r1, #0
 80027ec:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027ee:	4b17      	ldr	r3, [pc, #92]	@ (800284c <MX_ADC1_Init+0xcc>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80027f4:	4b15      	ldr	r3, [pc, #84]	@ (800284c <MX_ADC1_Init+0xcc>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80027fa:	4b14      	ldr	r3, [pc, #80]	@ (800284c <MX_ADC1_Init+0xcc>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002800:	4b12      	ldr	r3, [pc, #72]	@ (800284c <MX_ADC1_Init+0xcc>)
 8002802:	223c      	movs	r2, #60	@ 0x3c
 8002804:	2100      	movs	r1, #0
 8002806:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002808:	4b10      	ldr	r3, [pc, #64]	@ (800284c <MX_ADC1_Init+0xcc>)
 800280a:	2200      	movs	r2, #0
 800280c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800280e:	4b0f      	ldr	r3, [pc, #60]	@ (800284c <MX_ADC1_Init+0xcc>)
 8002810:	0018      	movs	r0, r3
 8002812:	f000 fd71 	bl	80032f8 <HAL_ADC_Init>
 8002816:	1e03      	subs	r3, r0, #0
 8002818:	d001      	beq.n	800281e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800281a:	f000 fa17 	bl	8002c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800281e:	1d3b      	adds	r3, r7, #4
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	2200      	movs	r2, #0
 8002828:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002830:	1d3a      	adds	r2, r7, #4
 8002832:	4b06      	ldr	r3, [pc, #24]	@ (800284c <MX_ADC1_Init+0xcc>)
 8002834:	0011      	movs	r1, r2
 8002836:	0018      	movs	r0, r3
 8002838:	f000 ff06 	bl	8003648 <HAL_ADC_ConfigChannel>
 800283c:	1e03      	subs	r3, r0, #0
 800283e:	d001      	beq.n	8002844 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8002840:	f000 fa04 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002844:	46c0      	nop			@ (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b004      	add	sp, #16
 800284a:	bd80      	pop	{r7, pc}
 800284c:	200000a8 	.word	0x200000a8
 8002850:	40012400 	.word	0x40012400

08002854 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8002858:	4b20      	ldr	r3, [pc, #128]	@ (80028dc <MX_FDCAN2_Init+0x88>)
 800285a:	4a21      	ldr	r2, [pc, #132]	@ (80028e0 <MX_FDCAN2_Init+0x8c>)
 800285c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800285e:	4b1f      	ldr	r3, [pc, #124]	@ (80028dc <MX_FDCAN2_Init+0x88>)
 8002860:	2200      	movs	r2, #0
 8002862:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002864:	4b1d      	ldr	r3, [pc, #116]	@ (80028dc <MX_FDCAN2_Init+0x88>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800286a:	4b1c      	ldr	r3, [pc, #112]	@ (80028dc <MX_FDCAN2_Init+0x88>)
 800286c:	2200      	movs	r2, #0
 800286e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8002870:	4b1a      	ldr	r3, [pc, #104]	@ (80028dc <MX_FDCAN2_Init+0x88>)
 8002872:	2200      	movs	r2, #0
 8002874:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8002876:	4b19      	ldr	r3, [pc, #100]	@ (80028dc <MX_FDCAN2_Init+0x88>)
 8002878:	2200      	movs	r2, #0
 800287a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800287c:	4b17      	ldr	r3, [pc, #92]	@ (80028dc <MX_FDCAN2_Init+0x88>)
 800287e:	2200      	movs	r2, #0
 8002880:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8002882:	4b16      	ldr	r3, [pc, #88]	@ (80028dc <MX_FDCAN2_Init+0x88>)
 8002884:	2210      	movs	r2, #16
 8002886:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8002888:	4b14      	ldr	r3, [pc, #80]	@ (80028dc <MX_FDCAN2_Init+0x88>)
 800288a:	2201      	movs	r2, #1
 800288c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 800288e:	4b13      	ldr	r3, [pc, #76]	@ (80028dc <MX_FDCAN2_Init+0x88>)
 8002890:	2201      	movs	r2, #1
 8002892:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 8002894:	4b11      	ldr	r3, [pc, #68]	@ (80028dc <MX_FDCAN2_Init+0x88>)
 8002896:	2201      	movs	r2, #1
 8002898:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800289a:	4b10      	ldr	r3, [pc, #64]	@ (80028dc <MX_FDCAN2_Init+0x88>)
 800289c:	2201      	movs	r2, #1
 800289e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80028a0:	4b0e      	ldr	r3, [pc, #56]	@ (80028dc <MX_FDCAN2_Init+0x88>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80028a6:	4b0d      	ldr	r3, [pc, #52]	@ (80028dc <MX_FDCAN2_Init+0x88>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80028ac:	4b0b      	ldr	r3, [pc, #44]	@ (80028dc <MX_FDCAN2_Init+0x88>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80028b2:	4b0a      	ldr	r3, [pc, #40]	@ (80028dc <MX_FDCAN2_Init+0x88>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80028b8:	4b08      	ldr	r3, [pc, #32]	@ (80028dc <MX_FDCAN2_Init+0x88>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80028be:	4b07      	ldr	r3, [pc, #28]	@ (80028dc <MX_FDCAN2_Init+0x88>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80028c4:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <MX_FDCAN2_Init+0x88>)
 80028c6:	0018      	movs	r0, r3
 80028c8:	f001 f94a 	bl	8003b60 <HAL_FDCAN_Init>
 80028cc:	1e03      	subs	r3, r0, #0
 80028ce:	d001      	beq.n	80028d4 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80028d0:	f000 f9bc 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80028d4:	46c0      	nop			@ (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	46c0      	nop			@ (mov r8, r8)
 80028dc:	2000010c 	.word	0x2000010c
 80028e0:	40006800 	.word	0x40006800

080028e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80028e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002958 <MX_I2C2_Init+0x74>)
 80028ea:	4a1c      	ldr	r2, [pc, #112]	@ (800295c <MX_I2C2_Init+0x78>)
 80028ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80028ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002958 <MX_I2C2_Init+0x74>)
 80028f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002960 <MX_I2C2_Init+0x7c>)
 80028f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 16;
 80028f4:	4b18      	ldr	r3, [pc, #96]	@ (8002958 <MX_I2C2_Init+0x74>)
 80028f6:	2210      	movs	r2, #16
 80028f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028fa:	4b17      	ldr	r3, [pc, #92]	@ (8002958 <MX_I2C2_Init+0x74>)
 80028fc:	2201      	movs	r2, #1
 80028fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002900:	4b15      	ldr	r3, [pc, #84]	@ (8002958 <MX_I2C2_Init+0x74>)
 8002902:	2200      	movs	r2, #0
 8002904:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002906:	4b14      	ldr	r3, [pc, #80]	@ (8002958 <MX_I2C2_Init+0x74>)
 8002908:	2200      	movs	r2, #0
 800290a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800290c:	4b12      	ldr	r3, [pc, #72]	@ (8002958 <MX_I2C2_Init+0x74>)
 800290e:	2200      	movs	r2, #0
 8002910:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002912:	4b11      	ldr	r3, [pc, #68]	@ (8002958 <MX_I2C2_Init+0x74>)
 8002914:	2200      	movs	r2, #0
 8002916:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002918:	4b0f      	ldr	r3, [pc, #60]	@ (8002958 <MX_I2C2_Init+0x74>)
 800291a:	2200      	movs	r2, #0
 800291c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800291e:	4b0e      	ldr	r3, [pc, #56]	@ (8002958 <MX_I2C2_Init+0x74>)
 8002920:	0018      	movs	r0, r3
 8002922:	f001 fc93 	bl	800424c <HAL_I2C_Init>
 8002926:	1e03      	subs	r3, r0, #0
 8002928:	d001      	beq.n	800292e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800292a:	f000 f98f 	bl	8002c4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800292e:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <MX_I2C2_Init+0x74>)
 8002930:	2100      	movs	r1, #0
 8002932:	0018      	movs	r0, r3
 8002934:	f002 fcc8 	bl	80052c8 <HAL_I2CEx_ConfigAnalogFilter>
 8002938:	1e03      	subs	r3, r0, #0
 800293a:	d001      	beq.n	8002940 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800293c:	f000 f986 	bl	8002c4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002940:	4b05      	ldr	r3, [pc, #20]	@ (8002958 <MX_I2C2_Init+0x74>)
 8002942:	2100      	movs	r1, #0
 8002944:	0018      	movs	r0, r3
 8002946:	f002 fd0b 	bl	8005360 <HAL_I2CEx_ConfigDigitalFilter>
 800294a:	1e03      	subs	r3, r0, #0
 800294c:	d001      	beq.n	8002952 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800294e:	f000 f97d 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002952:	46c0      	nop			@ (mov r8, r8)
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000170 	.word	0x20000170
 800295c:	40005800 	.word	0x40005800
 8002960:	00503d58 	.word	0x00503d58

08002964 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002968:	4b1b      	ldr	r3, [pc, #108]	@ (80029d8 <MX_I2C3_Init+0x74>)
 800296a:	4a1c      	ldr	r2, [pc, #112]	@ (80029dc <MX_I2C3_Init+0x78>)
 800296c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 800296e:	4b1a      	ldr	r3, [pc, #104]	@ (80029d8 <MX_I2C3_Init+0x74>)
 8002970:	4a1b      	ldr	r2, [pc, #108]	@ (80029e0 <MX_I2C3_Init+0x7c>)
 8002972:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002974:	4b18      	ldr	r3, [pc, #96]	@ (80029d8 <MX_I2C3_Init+0x74>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800297a:	4b17      	ldr	r3, [pc, #92]	@ (80029d8 <MX_I2C3_Init+0x74>)
 800297c:	2201      	movs	r2, #1
 800297e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002980:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <MX_I2C3_Init+0x74>)
 8002982:	2200      	movs	r2, #0
 8002984:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002986:	4b14      	ldr	r3, [pc, #80]	@ (80029d8 <MX_I2C3_Init+0x74>)
 8002988:	2200      	movs	r2, #0
 800298a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800298c:	4b12      	ldr	r3, [pc, #72]	@ (80029d8 <MX_I2C3_Init+0x74>)
 800298e:	2200      	movs	r2, #0
 8002990:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002992:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <MX_I2C3_Init+0x74>)
 8002994:	2200      	movs	r2, #0
 8002996:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002998:	4b0f      	ldr	r3, [pc, #60]	@ (80029d8 <MX_I2C3_Init+0x74>)
 800299a:	2200      	movs	r2, #0
 800299c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800299e:	4b0e      	ldr	r3, [pc, #56]	@ (80029d8 <MX_I2C3_Init+0x74>)
 80029a0:	0018      	movs	r0, r3
 80029a2:	f001 fc53 	bl	800424c <HAL_I2C_Init>
 80029a6:	1e03      	subs	r3, r0, #0
 80029a8:	d001      	beq.n	80029ae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80029aa:	f000 f94f 	bl	8002c4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029ae:	4b0a      	ldr	r3, [pc, #40]	@ (80029d8 <MX_I2C3_Init+0x74>)
 80029b0:	2100      	movs	r1, #0
 80029b2:	0018      	movs	r0, r3
 80029b4:	f002 fc88 	bl	80052c8 <HAL_I2CEx_ConfigAnalogFilter>
 80029b8:	1e03      	subs	r3, r0, #0
 80029ba:	d001      	beq.n	80029c0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80029bc:	f000 f946 	bl	8002c4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80029c0:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <MX_I2C3_Init+0x74>)
 80029c2:	2100      	movs	r1, #0
 80029c4:	0018      	movs	r0, r3
 80029c6:	f002 fccb 	bl	8005360 <HAL_I2CEx_ConfigDigitalFilter>
 80029ca:	1e03      	subs	r3, r0, #0
 80029cc:	d001      	beq.n	80029d2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80029ce:	f000 f93d 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80029d2:	46c0      	nop			@ (mov r8, r8)
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	200001c4 	.word	0x200001c4
 80029dc:	40008800 	.word	0x40008800
 80029e0:	00503d58 	.word	0x00503d58

080029e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b08b      	sub	sp, #44	@ 0x2c
 80029e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ea:	2414      	movs	r4, #20
 80029ec:	193b      	adds	r3, r7, r4
 80029ee:	0018      	movs	r0, r3
 80029f0:	2314      	movs	r3, #20
 80029f2:	001a      	movs	r2, r3
 80029f4:	2100      	movs	r1, #0
 80029f6:	f005 ff33 	bl	8008860 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fa:	4b87      	ldr	r3, [pc, #540]	@ (8002c18 <MX_GPIO_Init+0x234>)
 80029fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029fe:	4b86      	ldr	r3, [pc, #536]	@ (8002c18 <MX_GPIO_Init+0x234>)
 8002a00:	2104      	movs	r1, #4
 8002a02:	430a      	orrs	r2, r1
 8002a04:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a06:	4b84      	ldr	r3, [pc, #528]	@ (8002c18 <MX_GPIO_Init+0x234>)
 8002a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a12:	4b81      	ldr	r3, [pc, #516]	@ (8002c18 <MX_GPIO_Init+0x234>)
 8002a14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a16:	4b80      	ldr	r3, [pc, #512]	@ (8002c18 <MX_GPIO_Init+0x234>)
 8002a18:	2120      	movs	r1, #32
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a1e:	4b7e      	ldr	r3, [pc, #504]	@ (8002c18 <MX_GPIO_Init+0x234>)
 8002a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a22:	2220      	movs	r2, #32
 8002a24:	4013      	ands	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2a:	4b7b      	ldr	r3, [pc, #492]	@ (8002c18 <MX_GPIO_Init+0x234>)
 8002a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a2e:	4b7a      	ldr	r3, [pc, #488]	@ (8002c18 <MX_GPIO_Init+0x234>)
 8002a30:	2101      	movs	r1, #1
 8002a32:	430a      	orrs	r2, r1
 8002a34:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a36:	4b78      	ldr	r3, [pc, #480]	@ (8002c18 <MX_GPIO_Init+0x234>)
 8002a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a42:	4b75      	ldr	r3, [pc, #468]	@ (8002c18 <MX_GPIO_Init+0x234>)
 8002a44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a46:	4b74      	ldr	r3, [pc, #464]	@ (8002c18 <MX_GPIO_Init+0x234>)
 8002a48:	2102      	movs	r1, #2
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a4e:	4b72      	ldr	r3, [pc, #456]	@ (8002c18 <MX_GPIO_Init+0x234>)
 8002a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a52:	2202      	movs	r2, #2
 8002a54:	4013      	ands	r3, r2
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BMS_BOOT_Pin|BalanceEnableCell0_Pin|BalanceEnableCell1_Pin, GPIO_PIN_RESET);
 8002a5a:	23e0      	movs	r3, #224	@ 0xe0
 8002a5c:	021b      	lsls	r3, r3, #8
 8002a5e:	486f      	ldr	r0, [pc, #444]	@ (8002c1c <MX_GPIO_Init+0x238>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	0019      	movs	r1, r3
 8002a64:	f001 fbba 	bl	80041dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BalanceEnableCell2_Pin|BalanceEnableCell3_Pin|BalanceEnableCell4_Pin|BalanceEnableCell5_Pin
 8002a68:	496d      	ldr	r1, [pc, #436]	@ (8002c20 <MX_GPIO_Init+0x23c>)
 8002a6a:	23a0      	movs	r3, #160	@ 0xa0
 8002a6c:	05db      	lsls	r3, r3, #23
 8002a6e:	2200      	movs	r2, #0
 8002a70:	0018      	movs	r0, r3
 8002a72:	f001 fbb3 	bl	80041dc <HAL_GPIO_WritePin>
                          |BalanceEnableCell6_Pin|BalanceEnableCell7_Pin|BalanceEnableCell10_Pin|BalanceEnableCell11_Pin
                          |BalanceEnableCell12_Pin|BalanceEnableCell13_Pin|BalanceEnableCell14_Pin|YELLOW_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BalanceEnableCell8_Pin|BalanceEnableCell9_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8002a76:	496b      	ldr	r1, [pc, #428]	@ (8002c24 <MX_GPIO_Init+0x240>)
 8002a78:	4b6b      	ldr	r3, [pc, #428]	@ (8002c28 <MX_GPIO_Init+0x244>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f001 fbad 	bl	80041dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BMS_BOOT_Pin */
  GPIO_InitStruct.Pin = BMS_BOOT_Pin;
 8002a82:	193b      	adds	r3, r7, r4
 8002a84:	2280      	movs	r2, #128	@ 0x80
 8002a86:	0192      	lsls	r2, r2, #6
 8002a88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8a:	193b      	adds	r3, r7, r4
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	193b      	adds	r3, r7, r4
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BMS_BOOT_GPIO_Port, &GPIO_InitStruct);
 8002a9c:	193b      	adds	r3, r7, r4
 8002a9e:	4a5f      	ldr	r2, [pc, #380]	@ (8002c1c <MX_GPIO_Init+0x238>)
 8002aa0:	0019      	movs	r1, r3
 8002aa2:	0010      	movs	r0, r2
 8002aa4:	f001 fa2e 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BalanceEnableCell0_Pin BalanceEnableCell1_Pin */
  GPIO_InitStruct.Pin = BalanceEnableCell0_Pin|BalanceEnableCell1_Pin;
 8002aa8:	0021      	movs	r1, r4
 8002aaa:	187b      	adds	r3, r7, r1
 8002aac:	22c0      	movs	r2, #192	@ 0xc0
 8002aae:	0212      	lsls	r2, r2, #8
 8002ab0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab2:	000c      	movs	r4, r1
 8002ab4:	193b      	adds	r3, r7, r4
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aba:	193b      	adds	r3, r7, r4
 8002abc:	2201      	movs	r2, #1
 8002abe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac0:	193b      	adds	r3, r7, r4
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac6:	193b      	adds	r3, r7, r4
 8002ac8:	4a54      	ldr	r2, [pc, #336]	@ (8002c1c <MX_GPIO_Init+0x238>)
 8002aca:	0019      	movs	r1, r3
 8002acc:	0010      	movs	r0, r2
 8002ace:	f001 fa19 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ad2:	193b      	adds	r3, r7, r4
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad8:	193b      	adds	r3, r7, r4
 8002ada:	2202      	movs	r2, #2
 8002adc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	193b      	adds	r3, r7, r4
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae4:	193b      	adds	r3, r7, r4
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_OSC;
 8002aea:	193b      	adds	r3, r7, r4
 8002aec:	2200      	movs	r2, #0
 8002aee:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002af0:	193b      	adds	r3, r7, r4
 8002af2:	4a4e      	ldr	r2, [pc, #312]	@ (8002c2c <MX_GPIO_Init+0x248>)
 8002af4:	0019      	movs	r1, r3
 8002af6:	0010      	movs	r0, r2
 8002af8:	f001 fa04 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BalanceEnableCell2_Pin BalanceEnableCell3_Pin BalanceEnableCell4_Pin BalanceEnableCell5_Pin
                           BalanceEnableCell6_Pin BalanceEnableCell7_Pin BalanceEnableCell10_Pin BalanceEnableCell11_Pin
                           BalanceEnableCell13_Pin YELLOW_LED_Pin */
  GPIO_InitStruct.Pin = BalanceEnableCell2_Pin|BalanceEnableCell3_Pin|BalanceEnableCell4_Pin|BalanceEnableCell5_Pin
 8002afc:	193b      	adds	r3, r7, r4
 8002afe:	4a4c      	ldr	r2, [pc, #304]	@ (8002c30 <MX_GPIO_Init+0x24c>)
 8002b00:	601a      	str	r2, [r3, #0]
                          |BalanceEnableCell6_Pin|BalanceEnableCell7_Pin|BalanceEnableCell10_Pin|BalanceEnableCell11_Pin
                          |BalanceEnableCell13_Pin|YELLOW_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b02:	193b      	adds	r3, r7, r4
 8002b04:	2201      	movs	r2, #1
 8002b06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b08:	193b      	adds	r3, r7, r4
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	193b      	adds	r3, r7, r4
 8002b10:	2200      	movs	r2, #0
 8002b12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b14:	193a      	adds	r2, r7, r4
 8002b16:	23a0      	movs	r3, #160	@ 0xa0
 8002b18:	05db      	lsls	r3, r3, #23
 8002b1a:	0011      	movs	r1, r2
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f001 f9f1 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BalanceEnableCell8_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = BalanceEnableCell8_Pin|RED_LED_Pin;
 8002b22:	193b      	adds	r3, r7, r4
 8002b24:	2224      	movs	r2, #36	@ 0x24
 8002b26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b28:	193b      	adds	r3, r7, r4
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b2e:	193b      	adds	r3, r7, r4
 8002b30:	2201      	movs	r2, #1
 8002b32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b34:	193b      	adds	r3, r7, r4
 8002b36:	2200      	movs	r2, #0
 8002b38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3a:	193b      	adds	r3, r7, r4
 8002b3c:	4a3a      	ldr	r2, [pc, #232]	@ (8002c28 <MX_GPIO_Init+0x244>)
 8002b3e:	0019      	movs	r1, r3
 8002b40:	0010      	movs	r0, r2
 8002b42:	f001 f9df 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b46:	0021      	movs	r1, r4
 8002b48:	187b      	adds	r3, r7, r1
 8002b4a:	22c0      	movs	r2, #192	@ 0xc0
 8002b4c:	0112      	lsls	r2, r2, #4
 8002b4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b50:	000c      	movs	r4, r1
 8002b52:	193b      	adds	r3, r7, r4
 8002b54:	2202      	movs	r2, #2
 8002b56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	193b      	adds	r3, r7, r4
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5e:	193b      	adds	r3, r7, r4
 8002b60:	2200      	movs	r2, #0
 8002b62:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002b64:	193b      	adds	r3, r7, r4
 8002b66:	2204      	movs	r2, #4
 8002b68:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6a:	193b      	adds	r3, r7, r4
 8002b6c:	4a2e      	ldr	r2, [pc, #184]	@ (8002c28 <MX_GPIO_Init+0x244>)
 8002b6e:	0019      	movs	r1, r3
 8002b70:	0010      	movs	r0, r2
 8002b72:	f001 f9c7 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BalanceEnableCell9_Pin */
  GPIO_InitStruct.Pin = BalanceEnableCell9_Pin;
 8002b76:	0021      	movs	r1, r4
 8002b78:	187b      	adds	r3, r7, r1
 8002b7a:	2280      	movs	r2, #128	@ 0x80
 8002b7c:	0152      	lsls	r2, r2, #5
 8002b7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b80:	000c      	movs	r4, r1
 8002b82:	193b      	adds	r3, r7, r4
 8002b84:	2201      	movs	r2, #1
 8002b86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	193b      	adds	r3, r7, r4
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8e:	193b      	adds	r3, r7, r4
 8002b90:	2200      	movs	r2, #0
 8002b92:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BalanceEnableCell9_GPIO_Port, &GPIO_InitStruct);
 8002b94:	193b      	adds	r3, r7, r4
 8002b96:	4a24      	ldr	r2, [pc, #144]	@ (8002c28 <MX_GPIO_Init+0x244>)
 8002b98:	0019      	movs	r1, r3
 8002b9a:	0010      	movs	r0, r2
 8002b9c:	f001 f9b2 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_Alert_Pin */
  GPIO_InitStruct.Pin = BMS_Alert_Pin;
 8002ba0:	0021      	movs	r1, r4
 8002ba2:	187b      	adds	r3, r7, r1
 8002ba4:	2280      	movs	r2, #128	@ 0x80
 8002ba6:	0212      	lsls	r2, r2, #8
 8002ba8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002baa:	187b      	adds	r3, r7, r1
 8002bac:	2288      	movs	r2, #136	@ 0x88
 8002bae:	0352      	lsls	r2, r2, #13
 8002bb0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002bb2:	187b      	adds	r3, r7, r1
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BMS_Alert_GPIO_Port, &GPIO_InitStruct);
 8002bb8:	000c      	movs	r4, r1
 8002bba:	187b      	adds	r3, r7, r1
 8002bbc:	4a1a      	ldr	r2, [pc, #104]	@ (8002c28 <MX_GPIO_Init+0x244>)
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	0010      	movs	r0, r2
 8002bc2:	f001 f99f 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BalanceEnableCell12_Pin BalanceEnableCell14_Pin */
  GPIO_InitStruct.Pin = BalanceEnableCell12_Pin|BalanceEnableCell14_Pin;
 8002bc6:	0021      	movs	r1, r4
 8002bc8:	187b      	adds	r3, r7, r1
 8002bca:	22a0      	movs	r2, #160	@ 0xa0
 8002bcc:	0152      	lsls	r2, r2, #5
 8002bce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd0:	000c      	movs	r4, r1
 8002bd2:	193b      	adds	r3, r7, r4
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	193b      	adds	r3, r7, r4
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	193b      	adds	r3, r7, r4
 8002be0:	2200      	movs	r2, #0
 8002be2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be4:	193a      	adds	r2, r7, r4
 8002be6:	23a0      	movs	r3, #160	@ 0xa0
 8002be8:	05db      	lsls	r3, r3, #23
 8002bea:	0011      	movs	r1, r2
 8002bec:	0018      	movs	r0, r3
 8002bee:	f001 f989 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BalaResCheck_Pin */
  GPIO_InitStruct.Pin = BalaResCheck_Pin;
 8002bf2:	193b      	adds	r3, r7, r4
 8002bf4:	2240      	movs	r2, #64	@ 0x40
 8002bf6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bf8:	193b      	adds	r3, r7, r4
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	193b      	adds	r3, r7, r4
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BalaResCheck_GPIO_Port, &GPIO_InitStruct);
 8002c04:	193b      	adds	r3, r7, r4
 8002c06:	4a08      	ldr	r2, [pc, #32]	@ (8002c28 <MX_GPIO_Init+0x244>)
 8002c08:	0019      	movs	r1, r3
 8002c0a:	0010      	movs	r0, r2
 8002c0c:	f001 f97a 	bl	8003f04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c10:	46c0      	nop			@ (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b00b      	add	sp, #44	@ 0x2c
 8002c16:	bd90      	pop	{r4, r7, pc}
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	50000800 	.word	0x50000800
 8002c20:	00009ffc 	.word	0x00009ffc
 8002c24:	00001024 	.word	0x00001024
 8002c28:	50000400 	.word	0x50000400
 8002c2c:	50001400 	.word	0x50001400
 8002c30:	00008bfc 	.word	0x00008bfc

08002c34 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void *argument)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 8002c3c:	46c0      	nop			@ (mov r8, r8)
 8002c3e:	e7fd      	b.n	8002c3c <StartDefaultTask+0x8>

08002c40 <HB_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HB_Task */
void HB_Task(void *argument)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HB_Task */
  /* Infinite loop */
  for(;;)
 8002c48:	46c0      	nop			@ (mov r8, r8)
 8002c4a:	e7fd      	b.n	8002c48 <HB_Task+0x8>

08002c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c50:	b672      	cpsid	i
}
 8002c52:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c54:	46c0      	nop			@ (mov r8, r8)
 8002c56:	e7fd      	b.n	8002c54 <Error_Handler+0x8>

08002c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5e:	4b15      	ldr	r3, [pc, #84]	@ (8002cb4 <HAL_MspInit+0x5c>)
 8002c60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c62:	4b14      	ldr	r3, [pc, #80]	@ (8002cb4 <HAL_MspInit+0x5c>)
 8002c64:	2101      	movs	r1, #1
 8002c66:	430a      	orrs	r2, r1
 8002c68:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c6a:	4b12      	ldr	r3, [pc, #72]	@ (8002cb4 <HAL_MspInit+0x5c>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	2201      	movs	r2, #1
 8002c70:	4013      	ands	r3, r2
 8002c72:	607b      	str	r3, [r7, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c76:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb4 <HAL_MspInit+0x5c>)
 8002c78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb4 <HAL_MspInit+0x5c>)
 8002c7c:	2180      	movs	r1, #128	@ 0x80
 8002c7e:	0549      	lsls	r1, r1, #21
 8002c80:	430a      	orrs	r2, r1
 8002c82:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c84:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <HAL_MspInit+0x5c>)
 8002c86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c88:	2380      	movs	r3, #128	@ 0x80
 8002c8a:	055b      	lsls	r3, r3, #21
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002c92:	2302      	movs	r3, #2
 8002c94:	425b      	negs	r3, r3
 8002c96:	2200      	movs	r2, #0
 8002c98:	2103      	movs	r1, #3
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f000 ff3e 	bl	8003b1c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002ca0:	23c0      	movs	r3, #192	@ 0xc0
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f000 fa13 	bl	80030d0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002caa:	46c0      	nop			@ (mov r8, r8)
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b002      	add	sp, #8
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	46c0      	nop			@ (mov r8, r8)
 8002cb4:	40021000 	.word	0x40021000

08002cb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cb8:	b590      	push	{r4, r7, lr}
 8002cba:	b08b      	sub	sp, #44	@ 0x2c
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	2414      	movs	r4, #20
 8002cc2:	193b      	adds	r3, r7, r4
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	2314      	movs	r3, #20
 8002cc8:	001a      	movs	r2, r3
 8002cca:	2100      	movs	r1, #0
 8002ccc:	f005 fdc8 	bl	8008860 <memset>
  if(hadc->Instance==ADC1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a18      	ldr	r2, [pc, #96]	@ (8002d38 <HAL_ADC_MspInit+0x80>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d129      	bne.n	8002d2e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002cda:	4b18      	ldr	r3, [pc, #96]	@ (8002d3c <HAL_ADC_MspInit+0x84>)
 8002cdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cde:	4b17      	ldr	r3, [pc, #92]	@ (8002d3c <HAL_ADC_MspInit+0x84>)
 8002ce0:	2180      	movs	r1, #128	@ 0x80
 8002ce2:	0349      	lsls	r1, r1, #13
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ce8:	4b14      	ldr	r3, [pc, #80]	@ (8002d3c <HAL_ADC_MspInit+0x84>)
 8002cea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cec:	2380      	movs	r3, #128	@ 0x80
 8002cee:	035b      	lsls	r3, r3, #13
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf6:	4b11      	ldr	r3, [pc, #68]	@ (8002d3c <HAL_ADC_MspInit+0x84>)
 8002cf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cfa:	4b10      	ldr	r3, [pc, #64]	@ (8002d3c <HAL_ADC_MspInit+0x84>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d02:	4b0e      	ldr	r3, [pc, #56]	@ (8002d3c <HAL_ADC_MspInit+0x84>)
 8002d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d06:	2201      	movs	r2, #1
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = BalanceThermistor1_Pin|BalanceThermistor2_Pin;
 8002d0e:	193b      	adds	r3, r7, r4
 8002d10:	2203      	movs	r2, #3
 8002d12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d14:	193b      	adds	r3, r7, r4
 8002d16:	2203      	movs	r2, #3
 8002d18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	193b      	adds	r3, r7, r4
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d20:	193a      	adds	r2, r7, r4
 8002d22:	23a0      	movs	r3, #160	@ 0xa0
 8002d24:	05db      	lsls	r3, r3, #23
 8002d26:	0011      	movs	r1, r2
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f001 f8eb 	bl	8003f04 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b00b      	add	sp, #44	@ 0x2c
 8002d34:	bd90      	pop	{r4, r7, pc}
 8002d36:	46c0      	nop			@ (mov r8, r8)
 8002d38:	40012400 	.word	0x40012400
 8002d3c:	40021000 	.word	0x40021000

08002d40 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b09d      	sub	sp, #116	@ 0x74
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	235c      	movs	r3, #92	@ 0x5c
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	2314      	movs	r3, #20
 8002d50:	001a      	movs	r2, r3
 8002d52:	2100      	movs	r1, #0
 8002d54:	f005 fd84 	bl	8008860 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d58:	2410      	movs	r4, #16
 8002d5a:	193b      	adds	r3, r7, r4
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	234c      	movs	r3, #76	@ 0x4c
 8002d60:	001a      	movs	r2, r3
 8002d62:	2100      	movs	r1, #0
 8002d64:	f005 fd7c 	bl	8008860 <memset>
  if(hfdcan->Instance==FDCAN2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a22      	ldr	r2, [pc, #136]	@ (8002df8 <HAL_FDCAN_MspInit+0xb8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d13e      	bne.n	8002df0 <HAL_FDCAN_MspInit+0xb0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002d72:	193b      	adds	r3, r7, r4
 8002d74:	2280      	movs	r2, #128	@ 0x80
 8002d76:	0492      	lsls	r2, r2, #18
 8002d78:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002d7a:	193b      	adds	r3, r7, r4
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d80:	193b      	adds	r3, r7, r4
 8002d82:	0018      	movs	r0, r3
 8002d84:	f003 f862 	bl	8005e4c <HAL_RCCEx_PeriphCLKConfig>
 8002d88:	1e03      	subs	r3, r0, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002d8c:	f7ff ff5e 	bl	8002c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002d90:	4b1a      	ldr	r3, [pc, #104]	@ (8002dfc <HAL_FDCAN_MspInit+0xbc>)
 8002d92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d94:	4b19      	ldr	r3, [pc, #100]	@ (8002dfc <HAL_FDCAN_MspInit+0xbc>)
 8002d96:	2180      	movs	r1, #128	@ 0x80
 8002d98:	0149      	lsls	r1, r1, #5
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d9e:	4b17      	ldr	r3, [pc, #92]	@ (8002dfc <HAL_FDCAN_MspInit+0xbc>)
 8002da0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002da2:	2380      	movs	r3, #128	@ 0x80
 8002da4:	015b      	lsls	r3, r3, #5
 8002da6:	4013      	ands	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dac:	4b13      	ldr	r3, [pc, #76]	@ (8002dfc <HAL_FDCAN_MspInit+0xbc>)
 8002dae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002db0:	4b12      	ldr	r3, [pc, #72]	@ (8002dfc <HAL_FDCAN_MspInit+0xbc>)
 8002db2:	2102      	movs	r1, #2
 8002db4:	430a      	orrs	r2, r1
 8002db6:	635a      	str	r2, [r3, #52]	@ 0x34
 8002db8:	4b10      	ldr	r3, [pc, #64]	@ (8002dfc <HAL_FDCAN_MspInit+0xbc>)
 8002dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB0     ------> FDCAN2_RX
    PB1     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002dc4:	215c      	movs	r1, #92	@ 0x5c
 8002dc6:	187b      	adds	r3, r7, r1
 8002dc8:	2203      	movs	r2, #3
 8002dca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dcc:	187b      	adds	r3, r7, r1
 8002dce:	2202      	movs	r2, #2
 8002dd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	187b      	adds	r3, r7, r1
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd8:	187b      	adds	r3, r7, r1
 8002dda:	2200      	movs	r2, #0
 8002ddc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 8002dde:	187b      	adds	r3, r7, r1
 8002de0:	2203      	movs	r2, #3
 8002de2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de4:	187b      	adds	r3, r7, r1
 8002de6:	4a06      	ldr	r2, [pc, #24]	@ (8002e00 <HAL_FDCAN_MspInit+0xc0>)
 8002de8:	0019      	movs	r1, r3
 8002dea:	0010      	movs	r0, r2
 8002dec:	f001 f88a 	bl	8003f04 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8002df0:	46c0      	nop			@ (mov r8, r8)
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b01d      	add	sp, #116	@ 0x74
 8002df6:	bd90      	pop	{r4, r7, pc}
 8002df8:	40006800 	.word	0x40006800
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	50000400 	.word	0x50000400

08002e04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b09f      	sub	sp, #124	@ 0x7c
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0c:	2364      	movs	r3, #100	@ 0x64
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	0018      	movs	r0, r3
 8002e12:	2314      	movs	r3, #20
 8002e14:	001a      	movs	r2, r3
 8002e16:	2100      	movs	r1, #0
 8002e18:	f005 fd22 	bl	8008860 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e1c:	2418      	movs	r4, #24
 8002e1e:	193b      	adds	r3, r7, r4
 8002e20:	0018      	movs	r0, r3
 8002e22:	234c      	movs	r3, #76	@ 0x4c
 8002e24:	001a      	movs	r2, r3
 8002e26:	2100      	movs	r1, #0
 8002e28:	f005 fd1a 	bl	8008860 <memset>
  if(hi2c->Instance==I2C2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a3d      	ldr	r2, [pc, #244]	@ (8002f28 <HAL_I2C_MspInit+0x124>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d13f      	bne.n	8002eb6 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002e36:	193b      	adds	r3, r7, r4
 8002e38:	2240      	movs	r2, #64	@ 0x40
 8002e3a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002e3c:	193b      	adds	r3, r7, r4
 8002e3e:	2200      	movs	r2, #0
 8002e40:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e42:	193b      	adds	r3, r7, r4
 8002e44:	0018      	movs	r0, r3
 8002e46:	f003 f801 	bl	8005e4c <HAL_RCCEx_PeriphCLKConfig>
 8002e4a:	1e03      	subs	r3, r0, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002e4e:	f7ff fefd 	bl	8002c4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e52:	4b36      	ldr	r3, [pc, #216]	@ (8002f2c <HAL_I2C_MspInit+0x128>)
 8002e54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e56:	4b35      	ldr	r3, [pc, #212]	@ (8002f2c <HAL_I2C_MspInit+0x128>)
 8002e58:	2102      	movs	r1, #2
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e5e:	4b33      	ldr	r3, [pc, #204]	@ (8002f2c <HAL_I2C_MspInit+0x128>)
 8002e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e62:	2202      	movs	r2, #2
 8002e64:	4013      	ands	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BMS_SCL_Pin|BMS_SDA_Pin;
 8002e6a:	2164      	movs	r1, #100	@ 0x64
 8002e6c:	187b      	adds	r3, r7, r1
 8002e6e:	22c0      	movs	r2, #192	@ 0xc0
 8002e70:	01d2      	lsls	r2, r2, #7
 8002e72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e74:	187b      	adds	r3, r7, r1
 8002e76:	2212      	movs	r2, #18
 8002e78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e7a:	187b      	adds	r3, r7, r1
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e80:	187b      	adds	r3, r7, r1
 8002e82:	2203      	movs	r2, #3
 8002e84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002e86:	187b      	adds	r3, r7, r1
 8002e88:	2206      	movs	r2, #6
 8002e8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8c:	187b      	adds	r3, r7, r1
 8002e8e:	4a28      	ldr	r2, [pc, #160]	@ (8002f30 <HAL_I2C_MspInit+0x12c>)
 8002e90:	0019      	movs	r1, r3
 8002e92:	0010      	movs	r0, r2
 8002e94:	f001 f836 	bl	8003f04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e98:	4b24      	ldr	r3, [pc, #144]	@ (8002f2c <HAL_I2C_MspInit+0x128>)
 8002e9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e9c:	4b23      	ldr	r3, [pc, #140]	@ (8002f2c <HAL_I2C_MspInit+0x128>)
 8002e9e:	2180      	movs	r1, #128	@ 0x80
 8002ea0:	03c9      	lsls	r1, r1, #15
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ea6:	4b21      	ldr	r3, [pc, #132]	@ (8002f2c <HAL_I2C_MspInit+0x128>)
 8002ea8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002eaa:	2380      	movs	r3, #128	@ 0x80
 8002eac:	03db      	lsls	r3, r3, #15
 8002eae:	4013      	ands	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002eb4:	e034      	b.n	8002f20 <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1e      	ldr	r2, [pc, #120]	@ (8002f34 <HAL_I2C_MspInit+0x130>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d12f      	bne.n	8002f20 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f2c <HAL_I2C_MspInit+0x128>)
 8002ec2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ec4:	4b19      	ldr	r3, [pc, #100]	@ (8002f2c <HAL_I2C_MspInit+0x128>)
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ecc:	4b17      	ldr	r3, [pc, #92]	@ (8002f2c <HAL_I2C_MspInit+0x128>)
 8002ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002ed8:	2164      	movs	r1, #100	@ 0x64
 8002eda:	187b      	adds	r3, r7, r1
 8002edc:	2218      	movs	r2, #24
 8002ede:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ee0:	187b      	adds	r3, r7, r1
 8002ee2:	2212      	movs	r2, #18
 8002ee4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	187b      	adds	r3, r7, r1
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	187b      	adds	r3, r7, r1
 8002eee:	2200      	movs	r2, #0
 8002ef0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C3;
 8002ef2:	187b      	adds	r3, r7, r1
 8002ef4:	2206      	movs	r2, #6
 8002ef6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef8:	187b      	adds	r3, r7, r1
 8002efa:	4a0d      	ldr	r2, [pc, #52]	@ (8002f30 <HAL_I2C_MspInit+0x12c>)
 8002efc:	0019      	movs	r1, r3
 8002efe:	0010      	movs	r0, r2
 8002f00:	f001 f800 	bl	8003f04 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002f04:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <HAL_I2C_MspInit+0x128>)
 8002f06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f08:	4b08      	ldr	r3, [pc, #32]	@ (8002f2c <HAL_I2C_MspInit+0x128>)
 8002f0a:	2180      	movs	r1, #128	@ 0x80
 8002f0c:	0409      	lsls	r1, r1, #16
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002f12:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <HAL_I2C_MspInit+0x128>)
 8002f14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f16:	2380      	movs	r3, #128	@ 0x80
 8002f18:	041b      	lsls	r3, r3, #16
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
}
 8002f20:	46c0      	nop			@ (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b01f      	add	sp, #124	@ 0x7c
 8002f26:	bd90      	pop	{r4, r7, pc}
 8002f28:	40005800 	.word	0x40005800
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	50000400 	.word	0x50000400
 8002f34:	40008800 	.word	0x40008800

08002f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f3c:	46c0      	nop			@ (mov r8, r8)
 8002f3e:	e7fd      	b.n	8002f3c <NMI_Handler+0x4>

08002f40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f44:	46c0      	nop			@ (mov r8, r8)
 8002f46:	e7fd      	b.n	8002f44 <HardFault_Handler+0x4>

08002f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f4c:	f000 f8a4 	bl	8003098 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002f50:	f004 fdae 	bl	8007ab0 <xTaskGetSchedulerState>
 8002f54:	0003      	movs	r3, r0
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d001      	beq.n	8002f5e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002f5a:	f005 fa8d 	bl	8008478 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f68:	46c0      	nop			@ (mov r8, r8)
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f70:	480d      	ldr	r0, [pc, #52]	@ (8002fa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f72:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f74:	f7ff fff6 	bl	8002f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f78:	480c      	ldr	r0, [pc, #48]	@ (8002fac <LoopForever+0x6>)
  ldr r1, =_edata
 8002f7a:	490d      	ldr	r1, [pc, #52]	@ (8002fb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb4 <LoopForever+0xe>)
  movs r3, #0
 8002f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f80:	e002      	b.n	8002f88 <LoopCopyDataInit>

08002f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f86:	3304      	adds	r3, #4

08002f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f8c:	d3f9      	bcc.n	8002f82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f90:	4c0a      	ldr	r4, [pc, #40]	@ (8002fbc <LoopForever+0x16>)
  movs r3, #0
 8002f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f94:	e001      	b.n	8002f9a <LoopFillZerobss>

08002f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f98:	3204      	adds	r2, #4

08002f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f9c:	d3fb      	bcc.n	8002f96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f9e:	f005 fc67 	bl	8008870 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002fa2:	f7ff fb61 	bl	8002668 <main>

08002fa6 <LoopForever>:

LoopForever:
  b LoopForever
 8002fa6:	e7fe      	b.n	8002fa6 <LoopForever>
  ldr   r0, =_estack
 8002fa8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8002fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fb0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002fb4:	08008ac0 	.word	0x08008ac0
  ldr r2, =_sbss
 8002fb8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002fbc:	20001b70 	.word	0x20001b70

08002fc0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fc0:	e7fe      	b.n	8002fc0 <ADC1_COMP_IRQHandler>
	...

08002fc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fca:	1dfb      	adds	r3, r7, #7
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003000 <HAL_Init+0x3c>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003000 <HAL_Init+0x3c>)
 8002fd6:	2180      	movs	r1, #128	@ 0x80
 8002fd8:	0049      	lsls	r1, r1, #1
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fde:	2003      	movs	r0, #3
 8002fe0:	f000 f810 	bl	8003004 <HAL_InitTick>
 8002fe4:	1e03      	subs	r3, r0, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002fe8:	1dfb      	adds	r3, r7, #7
 8002fea:	2201      	movs	r2, #1
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	e001      	b.n	8002ff4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002ff0:	f7ff fe32 	bl	8002c58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ff4:	1dfb      	adds	r3, r7, #7
 8002ff6:	781b      	ldrb	r3, [r3, #0]
}
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b002      	add	sp, #8
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40022000 	.word	0x40022000

08003004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800300c:	230f      	movs	r3, #15
 800300e:	18fb      	adds	r3, r7, r3
 8003010:	2200      	movs	r2, #0
 8003012:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003014:	4b1d      	ldr	r3, [pc, #116]	@ (800308c <HAL_InitTick+0x88>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d02b      	beq.n	8003074 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800301c:	4b1c      	ldr	r3, [pc, #112]	@ (8003090 <HAL_InitTick+0x8c>)
 800301e:	681c      	ldr	r4, [r3, #0]
 8003020:	4b1a      	ldr	r3, [pc, #104]	@ (800308c <HAL_InitTick+0x88>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	0019      	movs	r1, r3
 8003026:	23fa      	movs	r3, #250	@ 0xfa
 8003028:	0098      	lsls	r0, r3, #2
 800302a:	f7fd f86d 	bl	8000108 <__udivsi3>
 800302e:	0003      	movs	r3, r0
 8003030:	0019      	movs	r1, r3
 8003032:	0020      	movs	r0, r4
 8003034:	f7fd f868 	bl	8000108 <__udivsi3>
 8003038:	0003      	movs	r3, r0
 800303a:	0018      	movs	r0, r3
 800303c:	f000 fd83 	bl	8003b46 <HAL_SYSTICK_Config>
 8003040:	1e03      	subs	r3, r0, #0
 8003042:	d112      	bne.n	800306a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b03      	cmp	r3, #3
 8003048:	d80a      	bhi.n	8003060 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	2301      	movs	r3, #1
 800304e:	425b      	negs	r3, r3
 8003050:	2200      	movs	r2, #0
 8003052:	0018      	movs	r0, r3
 8003054:	f000 fd62 	bl	8003b1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003058:	4b0e      	ldr	r3, [pc, #56]	@ (8003094 <HAL_InitTick+0x90>)
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	e00d      	b.n	800307c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003060:	230f      	movs	r3, #15
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]
 8003068:	e008      	b.n	800307c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800306a:	230f      	movs	r3, #15
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
 8003072:	e003      	b.n	800307c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003074:	230f      	movs	r3, #15
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	2201      	movs	r2, #1
 800307a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800307c:	230f      	movs	r3, #15
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	781b      	ldrb	r3, [r3, #0]
}
 8003082:	0018      	movs	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	b005      	add	sp, #20
 8003088:	bd90      	pop	{r4, r7, pc}
 800308a:	46c0      	nop			@ (mov r8, r8)
 800308c:	20000008 	.word	0x20000008
 8003090:	20000000 	.word	0x20000000
 8003094:	20000004 	.word	0x20000004

08003098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800309c:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <HAL_IncTick+0x1c>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	001a      	movs	r2, r3
 80030a2:	4b05      	ldr	r3, [pc, #20]	@ (80030b8 <HAL_IncTick+0x20>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	18d2      	adds	r2, r2, r3
 80030a8:	4b03      	ldr	r3, [pc, #12]	@ (80030b8 <HAL_IncTick+0x20>)
 80030aa:	601a      	str	r2, [r3, #0]
}
 80030ac:	46c0      	nop			@ (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	46c0      	nop			@ (mov r8, r8)
 80030b4:	20000008 	.word	0x20000008
 80030b8:	20000224 	.word	0x20000224

080030bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  return uwTick;
 80030c0:	4b02      	ldr	r3, [pc, #8]	@ (80030cc <HAL_GetTick+0x10>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	46c0      	nop			@ (mov r8, r8)
 80030cc:	20000224 	.word	0x20000224

080030d0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80030d8:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a06      	ldr	r2, [pc, #24]	@ (80030f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80030de:	4013      	ands	r3, r2
 80030e0:	0019      	movs	r1, r3
 80030e2:	4b04      	ldr	r3, [pc, #16]	@ (80030f4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]
}
 80030ea:	46c0      	nop			@ (mov r8, r8)
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b002      	add	sp, #8
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	46c0      	nop			@ (mov r8, r8)
 80030f4:	40010000 	.word	0x40010000
 80030f8:	fffff9ff 	.word	0xfffff9ff

080030fc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a05      	ldr	r2, [pc, #20]	@ (8003120 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800310c:	401a      	ands	r2, r3
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	601a      	str	r2, [r3, #0]
}
 8003116:	46c0      	nop			@ (mov r8, r8)
 8003118:	46bd      	mov	sp, r7
 800311a:	b002      	add	sp, #8
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			@ (mov r8, r8)
 8003120:	fe3fffff 	.word	0xfe3fffff

08003124 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	23e0      	movs	r3, #224	@ 0xe0
 8003132:	045b      	lsls	r3, r3, #17
 8003134:	4013      	ands	r3, r2
}
 8003136:	0018      	movs	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	b002      	add	sp, #8
 800313c:	bd80      	pop	{r7, pc}

0800313e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	2104      	movs	r1, #4
 8003152:	400a      	ands	r2, r1
 8003154:	2107      	movs	r1, #7
 8003156:	4091      	lsls	r1, r2
 8003158:	000a      	movs	r2, r1
 800315a:	43d2      	mvns	r2, r2
 800315c:	401a      	ands	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2104      	movs	r1, #4
 8003162:	400b      	ands	r3, r1
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4099      	lsls	r1, r3
 8003168:	000b      	movs	r3, r1
 800316a:	431a      	orrs	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003170:	46c0      	nop			@ (mov r8, r8)
 8003172:	46bd      	mov	sp, r7
 8003174:	b004      	add	sp, #16
 8003176:	bd80      	pop	{r7, pc}

08003178 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	2104      	movs	r1, #4
 800318a:	400a      	ands	r2, r1
 800318c:	2107      	movs	r1, #7
 800318e:	4091      	lsls	r1, r2
 8003190:	000a      	movs	r2, r1
 8003192:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	2104      	movs	r1, #4
 8003198:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800319a:	40da      	lsrs	r2, r3
 800319c:	0013      	movs	r3, r2
}
 800319e:	0018      	movs	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b002      	add	sp, #8
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b084      	sub	sp, #16
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	211f      	movs	r1, #31
 80031ba:	400a      	ands	r2, r1
 80031bc:	210f      	movs	r1, #15
 80031be:	4091      	lsls	r1, r2
 80031c0:	000a      	movs	r2, r1
 80031c2:	43d2      	mvns	r2, r2
 80031c4:	401a      	ands	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	0e9b      	lsrs	r3, r3, #26
 80031ca:	210f      	movs	r1, #15
 80031cc:	4019      	ands	r1, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	201f      	movs	r0, #31
 80031d2:	4003      	ands	r3, r0
 80031d4:	4099      	lsls	r1, r3
 80031d6:	000b      	movs	r3, r1
 80031d8:	431a      	orrs	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031de:	46c0      	nop			@ (mov r8, r8)
 80031e0:	46bd      	mov	sp, r7
 80031e2:	b004      	add	sp, #16
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	035b      	lsls	r3, r3, #13
 80031f8:	0b5b      	lsrs	r3, r3, #13
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003200:	46c0      	nop			@ (mov r8, r8)
 8003202:	46bd      	mov	sp, r7
 8003204:	b002      	add	sp, #8
 8003206:	bd80      	pop	{r7, pc}

08003208 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	0352      	lsls	r2, r2, #13
 800321a:	0b52      	lsrs	r2, r2, #13
 800321c:	43d2      	mvns	r2, r2
 800321e:	401a      	ands	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003224:	46c0      	nop			@ (mov r8, r8)
 8003226:	46bd      	mov	sp, r7
 8003228:	b002      	add	sp, #8
 800322a:	bd80      	pop	{r7, pc}

0800322c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	0212      	lsls	r2, r2, #8
 8003240:	43d2      	mvns	r2, r2
 8003242:	401a      	ands	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	021b      	lsls	r3, r3, #8
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	400b      	ands	r3, r1
 800324c:	4904      	ldr	r1, [pc, #16]	@ (8003260 <LL_ADC_SetChannelSamplingTime+0x34>)
 800324e:	400b      	ands	r3, r1
 8003250:	431a      	orrs	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003256:	46c0      	nop			@ (mov r8, r8)
 8003258:	46bd      	mov	sp, r7
 800325a:	b004      	add	sp, #16
 800325c:	bd80      	pop	{r7, pc}
 800325e:	46c0      	nop			@ (mov r8, r8)
 8003260:	07ffff00 	.word	0x07ffff00

08003264 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4a05      	ldr	r2, [pc, #20]	@ (8003288 <LL_ADC_EnableInternalRegulator+0x24>)
 8003272:	4013      	ands	r3, r2
 8003274:	2280      	movs	r2, #128	@ 0x80
 8003276:	0552      	lsls	r2, r2, #21
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	46bd      	mov	sp, r7
 8003282:	b002      	add	sp, #8
 8003284:	bd80      	pop	{r7, pc}
 8003286:	46c0      	nop			@ (mov r8, r8)
 8003288:	6fffffe8 	.word	0x6fffffe8

0800328c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	2380      	movs	r3, #128	@ 0x80
 800329a:	055b      	lsls	r3, r3, #21
 800329c:	401a      	ands	r2, r3
 800329e:	2380      	movs	r3, #128	@ 0x80
 80032a0:	055b      	lsls	r3, r3, #21
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d101      	bne.n	80032aa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	0018      	movs	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b002      	add	sp, #8
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2201      	movs	r2, #1
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <LL_ADC_IsEnabled+0x18>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <LL_ADC_IsEnabled+0x1a>
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	0018      	movs	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b002      	add	sp, #8
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2204      	movs	r2, #4
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d101      	bne.n	80032ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	0018      	movs	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b002      	add	sp, #8
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003300:	231f      	movs	r3, #31
 8003302:	18fb      	adds	r3, r7, r3
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8003308:	2300      	movs	r3, #0
 800330a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e17f      	b.n	800361e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10a      	bne.n	800333c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	0018      	movs	r0, r3
 800332a:	f7ff fcc5 	bl	8002cb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2254      	movs	r2, #84	@ 0x54
 8003338:	2100      	movs	r1, #0
 800333a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0018      	movs	r0, r3
 8003342:	f7ff ffa3 	bl	800328c <LL_ADC_IsInternalRegulatorEnabled>
 8003346:	1e03      	subs	r3, r0, #0
 8003348:	d115      	bne.n	8003376 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	0018      	movs	r0, r3
 8003350:	f7ff ff88 	bl	8003264 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003354:	4bb4      	ldr	r3, [pc, #720]	@ (8003628 <HAL_ADC_Init+0x330>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	49b4      	ldr	r1, [pc, #720]	@ (800362c <HAL_ADC_Init+0x334>)
 800335a:	0018      	movs	r0, r3
 800335c:	f7fc fed4 	bl	8000108 <__udivsi3>
 8003360:	0003      	movs	r3, r0
 8003362:	3301      	adds	r3, #1
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003368:	e002      	b.n	8003370 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3b01      	subs	r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f9      	bne.n	800336a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	0018      	movs	r0, r3
 800337c:	f7ff ff86 	bl	800328c <LL_ADC_IsInternalRegulatorEnabled>
 8003380:	1e03      	subs	r3, r0, #0
 8003382:	d10f      	bne.n	80033a4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003388:	2210      	movs	r2, #16
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003394:	2201      	movs	r2, #1
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800339c:	231f      	movs	r3, #31
 800339e:	18fb      	adds	r3, r7, r3
 80033a0:	2201      	movs	r2, #1
 80033a2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	0018      	movs	r0, r3
 80033aa:	f7ff ff94 	bl	80032d6 <LL_ADC_REG_IsConversionOngoing>
 80033ae:	0003      	movs	r3, r0
 80033b0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b6:	2210      	movs	r2, #16
 80033b8:	4013      	ands	r3, r2
 80033ba:	d000      	beq.n	80033be <HAL_ADC_Init+0xc6>
 80033bc:	e122      	b.n	8003604 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d000      	beq.n	80033c6 <HAL_ADC_Init+0xce>
 80033c4:	e11e      	b.n	8003604 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ca:	4a99      	ldr	r2, [pc, #612]	@ (8003630 <HAL_ADC_Init+0x338>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	2202      	movs	r2, #2
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	0018      	movs	r0, r3
 80033dc:	f7ff ff6a 	bl	80032b4 <LL_ADC_IsEnabled>
 80033e0:	1e03      	subs	r3, r0, #0
 80033e2:	d000      	beq.n	80033e6 <HAL_ADC_Init+0xee>
 80033e4:	e0ad      	b.n	8003542 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	7e1b      	ldrb	r3, [r3, #24]
 80033ee:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80033f0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	7e5b      	ldrb	r3, [r3, #25]
 80033f6:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80033f8:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	7e9b      	ldrb	r3, [r3, #26]
 80033fe:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003400:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <HAL_ADC_Init+0x118>
 800340a:	2380      	movs	r3, #128	@ 0x80
 800340c:	015b      	lsls	r3, r3, #5
 800340e:	e000      	b.n	8003412 <HAL_ADC_Init+0x11a>
 8003410:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003412:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003418:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b00      	cmp	r3, #0
 8003420:	da04      	bge.n	800342c <HAL_ADC_Init+0x134>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	085b      	lsrs	r3, r3, #1
 800342a:	e001      	b.n	8003430 <HAL_ADC_Init+0x138>
 800342c:	2380      	movs	r3, #128	@ 0x80
 800342e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8003430:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	212c      	movs	r1, #44	@ 0x2c
 8003436:	5c5b      	ldrb	r3, [r3, r1]
 8003438:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800343a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	5c9b      	ldrb	r3, [r3, r2]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d115      	bne.n	8003478 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	7e9b      	ldrb	r3, [r3, #26]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	2280      	movs	r2, #128	@ 0x80
 8003458:	0252      	lsls	r2, r2, #9
 800345a:	4313      	orrs	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
 800345e:	e00b      	b.n	8003478 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003464:	2220      	movs	r2, #32
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003470:	2201      	movs	r2, #1
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003484:	23e0      	movs	r3, #224	@ 0xe0
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800348e:	4313      	orrs	r3, r2
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4a65      	ldr	r2, [pc, #404]	@ (8003634 <HAL_ADC_Init+0x33c>)
 800349e:	4013      	ands	r3, r2
 80034a0:	0019      	movs	r1, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	0f9b      	lsrs	r3, r3, #30
 80034b2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034b8:	4313      	orrs	r3, r2
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	223c      	movs	r2, #60	@ 0x3c
 80034c4:	5c9b      	ldrb	r3, [r3, r2]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d111      	bne.n	80034ee <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	0f9b      	lsrs	r3, r3, #30
 80034d0:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034d6:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80034dc:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80034e2:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	2201      	movs	r2, #1
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	4a50      	ldr	r2, [pc, #320]	@ (8003638 <HAL_ADC_Init+0x340>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	0019      	movs	r1, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	430a      	orrs	r2, r1
 8003502:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	23c0      	movs	r3, #192	@ 0xc0
 800350a:	061b      	lsls	r3, r3, #24
 800350c:	429a      	cmp	r2, r3
 800350e:	d018      	beq.n	8003542 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003514:	2380      	movs	r3, #128	@ 0x80
 8003516:	05db      	lsls	r3, r3, #23
 8003518:	429a      	cmp	r2, r3
 800351a:	d012      	beq.n	8003542 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003520:	2380      	movs	r3, #128	@ 0x80
 8003522:	061b      	lsls	r3, r3, #24
 8003524:	429a      	cmp	r2, r3
 8003526:	d00c      	beq.n	8003542 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003528:	4b44      	ldr	r3, [pc, #272]	@ (800363c <HAL_ADC_Init+0x344>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a44      	ldr	r2, [pc, #272]	@ (8003640 <HAL_ADC_Init+0x348>)
 800352e:	4013      	ands	r3, r2
 8003530:	0019      	movs	r1, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	23f0      	movs	r3, #240	@ 0xf0
 8003538:	039b      	lsls	r3, r3, #14
 800353a:	401a      	ands	r2, r3
 800353c:	4b3f      	ldr	r3, [pc, #252]	@ (800363c <HAL_ADC_Init+0x344>)
 800353e:	430a      	orrs	r2, r1
 8003540:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800354a:	001a      	movs	r2, r3
 800354c:	2100      	movs	r1, #0
 800354e:	f7ff fdf6 	bl	800313e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355a:	493a      	ldr	r1, [pc, #232]	@ (8003644 <HAL_ADC_Init+0x34c>)
 800355c:	001a      	movs	r2, r3
 800355e:	f7ff fdee 	bl	800313e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2110      	movs	r1, #16
 8003576:	4249      	negs	r1, r1
 8003578:	430a      	orrs	r2, r1
 800357a:	629a      	str	r2, [r3, #40]	@ 0x28
 800357c:	e018      	b.n	80035b0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691a      	ldr	r2, [r3, #16]
 8003582:	2380      	movs	r3, #128	@ 0x80
 8003584:	039b      	lsls	r3, r3, #14
 8003586:	429a      	cmp	r2, r3
 8003588:	d112      	bne.n	80035b0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	3b01      	subs	r3, #1
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	221c      	movs	r2, #28
 800359a:	4013      	ands	r3, r2
 800359c:	2210      	movs	r2, #16
 800359e:	4252      	negs	r2, r2
 80035a0:	409a      	lsls	r2, r3
 80035a2:	0011      	movs	r1, r2
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2100      	movs	r1, #0
 80035b6:	0018      	movs	r0, r3
 80035b8:	f7ff fdde 	bl	8003178 <LL_ADC_GetSamplingTimeCommonChannels>
 80035bc:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d10b      	bne.n	80035de <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d0:	2203      	movs	r2, #3
 80035d2:	4393      	bics	r3, r2
 80035d4:	2201      	movs	r2, #1
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80035dc:	e01c      	b.n	8003618 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e2:	2212      	movs	r2, #18
 80035e4:	4393      	bics	r3, r2
 80035e6:	2210      	movs	r2, #16
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f2:	2201      	movs	r2, #1
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80035fa:	231f      	movs	r3, #31
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	2201      	movs	r2, #1
 8003600:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003602:	e009      	b.n	8003618 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003608:	2210      	movs	r2, #16
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003610:	231f      	movs	r3, #31
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	2201      	movs	r2, #1
 8003616:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003618:	231f      	movs	r3, #31
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	781b      	ldrb	r3, [r3, #0]
}
 800361e:	0018      	movs	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	b008      	add	sp, #32
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	20000000 	.word	0x20000000
 800362c:	00030d40 	.word	0x00030d40
 8003630:	fffffefd 	.word	0xfffffefd
 8003634:	ffde0201 	.word	0xffde0201
 8003638:	1ffffc02 	.word	0x1ffffc02
 800363c:	40012708 	.word	0x40012708
 8003640:	ffc3ffff 	.word	0xffc3ffff
 8003644:	07ffff04 	.word	0x07ffff04

08003648 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003652:	2317      	movs	r3, #23
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2254      	movs	r2, #84	@ 0x54
 8003662:	5c9b      	ldrb	r3, [r3, r2]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_ADC_ConfigChannel+0x24>
 8003668:	2302      	movs	r3, #2
 800366a:	e1c0      	b.n	80039ee <HAL_ADC_ConfigChannel+0x3a6>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2254      	movs	r2, #84	@ 0x54
 8003670:	2101      	movs	r1, #1
 8003672:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	0018      	movs	r0, r3
 800367a:	f7ff fe2c 	bl	80032d6 <LL_ADC_REG_IsConversionOngoing>
 800367e:	1e03      	subs	r3, r0, #0
 8003680:	d000      	beq.n	8003684 <HAL_ADC_ConfigChannel+0x3c>
 8003682:	e1a3      	b.n	80039cc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d100      	bne.n	800368e <HAL_ADC_ConfigChannel+0x46>
 800368c:	e143      	b.n	8003916 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	2380      	movs	r3, #128	@ 0x80
 8003694:	061b      	lsls	r3, r3, #24
 8003696:	429a      	cmp	r2, r3
 8003698:	d004      	beq.n	80036a4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800369e:	4ac1      	ldr	r2, [pc, #772]	@ (80039a4 <HAL_ADC_ConfigChannel+0x35c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d108      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	0019      	movs	r1, r3
 80036ae:	0010      	movs	r0, r2
 80036b0:	f7ff fd99 	bl	80031e6 <LL_ADC_REG_SetSequencerChAdd>
 80036b4:	e0c9      	b.n	800384a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	211f      	movs	r1, #31
 80036c0:	400b      	ands	r3, r1
 80036c2:	210f      	movs	r1, #15
 80036c4:	4099      	lsls	r1, r3
 80036c6:	000b      	movs	r3, r1
 80036c8:	43db      	mvns	r3, r3
 80036ca:	4013      	ands	r3, r2
 80036cc:	0019      	movs	r1, r3
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	035b      	lsls	r3, r3, #13
 80036d4:	0b5b      	lsrs	r3, r3, #13
 80036d6:	d105      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x9c>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	0e9b      	lsrs	r3, r3, #26
 80036de:	221f      	movs	r2, #31
 80036e0:	4013      	ands	r3, r2
 80036e2:	e098      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1ce>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2201      	movs	r2, #1
 80036ea:	4013      	ands	r3, r2
 80036ec:	d000      	beq.n	80036f0 <HAL_ADC_ConfigChannel+0xa8>
 80036ee:	e091      	b.n	8003814 <HAL_ADC_ConfigChannel+0x1cc>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2202      	movs	r2, #2
 80036f6:	4013      	ands	r3, r2
 80036f8:	d000      	beq.n	80036fc <HAL_ADC_ConfigChannel+0xb4>
 80036fa:	e089      	b.n	8003810 <HAL_ADC_ConfigChannel+0x1c8>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2204      	movs	r2, #4
 8003702:	4013      	ands	r3, r2
 8003704:	d000      	beq.n	8003708 <HAL_ADC_ConfigChannel+0xc0>
 8003706:	e081      	b.n	800380c <HAL_ADC_ConfigChannel+0x1c4>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2208      	movs	r2, #8
 800370e:	4013      	ands	r3, r2
 8003710:	d000      	beq.n	8003714 <HAL_ADC_ConfigChannel+0xcc>
 8003712:	e079      	b.n	8003808 <HAL_ADC_ConfigChannel+0x1c0>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2210      	movs	r2, #16
 800371a:	4013      	ands	r3, r2
 800371c:	d000      	beq.n	8003720 <HAL_ADC_ConfigChannel+0xd8>
 800371e:	e071      	b.n	8003804 <HAL_ADC_ConfigChannel+0x1bc>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2220      	movs	r2, #32
 8003726:	4013      	ands	r3, r2
 8003728:	d000      	beq.n	800372c <HAL_ADC_ConfigChannel+0xe4>
 800372a:	e069      	b.n	8003800 <HAL_ADC_ConfigChannel+0x1b8>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2240      	movs	r2, #64	@ 0x40
 8003732:	4013      	ands	r3, r2
 8003734:	d000      	beq.n	8003738 <HAL_ADC_ConfigChannel+0xf0>
 8003736:	e061      	b.n	80037fc <HAL_ADC_ConfigChannel+0x1b4>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2280      	movs	r2, #128	@ 0x80
 800373e:	4013      	ands	r3, r2
 8003740:	d000      	beq.n	8003744 <HAL_ADC_ConfigChannel+0xfc>
 8003742:	e059      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x1b0>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	2380      	movs	r3, #128	@ 0x80
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	4013      	ands	r3, r2
 800374e:	d151      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x1ac>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	2380      	movs	r3, #128	@ 0x80
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4013      	ands	r3, r2
 800375a:	d149      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x1a8>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	2380      	movs	r3, #128	@ 0x80
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	4013      	ands	r3, r2
 8003766:	d141      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x1a4>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	2380      	movs	r3, #128	@ 0x80
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	4013      	ands	r3, r2
 8003772:	d139      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x1a0>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	2380      	movs	r3, #128	@ 0x80
 800377a:	015b      	lsls	r3, r3, #5
 800377c:	4013      	ands	r3, r2
 800377e:	d131      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x19c>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	2380      	movs	r3, #128	@ 0x80
 8003786:	019b      	lsls	r3, r3, #6
 8003788:	4013      	ands	r3, r2
 800378a:	d129      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x198>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	2380      	movs	r3, #128	@ 0x80
 8003792:	01db      	lsls	r3, r3, #7
 8003794:	4013      	ands	r3, r2
 8003796:	d121      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x194>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	2380      	movs	r3, #128	@ 0x80
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	4013      	ands	r3, r2
 80037a2:	d119      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x190>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	2380      	movs	r3, #128	@ 0x80
 80037aa:	025b      	lsls	r3, r3, #9
 80037ac:	4013      	ands	r3, r2
 80037ae:	d111      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x18c>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	2380      	movs	r3, #128	@ 0x80
 80037b6:	029b      	lsls	r3, r3, #10
 80037b8:	4013      	ands	r3, r2
 80037ba:	d109      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x188>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	2380      	movs	r3, #128	@ 0x80
 80037c2:	02db      	lsls	r3, r3, #11
 80037c4:	4013      	ands	r3, r2
 80037c6:	d001      	beq.n	80037cc <HAL_ADC_ConfigChannel+0x184>
 80037c8:	2312      	movs	r3, #18
 80037ca:	e024      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1ce>
 80037cc:	2300      	movs	r3, #0
 80037ce:	e022      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1ce>
 80037d0:	2311      	movs	r3, #17
 80037d2:	e020      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1ce>
 80037d4:	2310      	movs	r3, #16
 80037d6:	e01e      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1ce>
 80037d8:	230f      	movs	r3, #15
 80037da:	e01c      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1ce>
 80037dc:	230e      	movs	r3, #14
 80037de:	e01a      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1ce>
 80037e0:	230d      	movs	r3, #13
 80037e2:	e018      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1ce>
 80037e4:	230c      	movs	r3, #12
 80037e6:	e016      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1ce>
 80037e8:	230b      	movs	r3, #11
 80037ea:	e014      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1ce>
 80037ec:	230a      	movs	r3, #10
 80037ee:	e012      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1ce>
 80037f0:	2309      	movs	r3, #9
 80037f2:	e010      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1ce>
 80037f4:	2308      	movs	r3, #8
 80037f6:	e00e      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1ce>
 80037f8:	2307      	movs	r3, #7
 80037fa:	e00c      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1ce>
 80037fc:	2306      	movs	r3, #6
 80037fe:	e00a      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1ce>
 8003800:	2305      	movs	r3, #5
 8003802:	e008      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1ce>
 8003804:	2304      	movs	r3, #4
 8003806:	e006      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1ce>
 8003808:	2303      	movs	r3, #3
 800380a:	e004      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1ce>
 800380c:	2302      	movs	r3, #2
 800380e:	e002      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1ce>
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <HAL_ADC_ConfigChannel+0x1ce>
 8003814:	2300      	movs	r3, #0
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	6852      	ldr	r2, [r2, #4]
 800381a:	201f      	movs	r0, #31
 800381c:	4002      	ands	r2, r0
 800381e:	4093      	lsls	r3, r2
 8003820:	000a      	movs	r2, r1
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	089b      	lsrs	r3, r3, #2
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	429a      	cmp	r2, r3
 8003836:	d808      	bhi.n	800384a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6818      	ldr	r0, [r3, #0]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	6859      	ldr	r1, [r3, #4]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	001a      	movs	r2, r3
 8003846:	f7ff fcae 	bl	80031a6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6819      	ldr	r1, [r3, #0]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	001a      	movs	r2, r3
 8003858:	f7ff fce8 	bl	800322c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	db00      	blt.n	8003866 <HAL_ADC_ConfigChannel+0x21e>
 8003864:	e0bc      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003866:	4b50      	ldr	r3, [pc, #320]	@ (80039a8 <HAL_ADC_ConfigChannel+0x360>)
 8003868:	0018      	movs	r0, r3
 800386a:	f7ff fc5b 	bl	8003124 <LL_ADC_GetCommonPathInternalCh>
 800386e:	0003      	movs	r3, r0
 8003870:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a4d      	ldr	r2, [pc, #308]	@ (80039ac <HAL_ADC_ConfigChannel+0x364>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d122      	bne.n	80038c2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	2380      	movs	r3, #128	@ 0x80
 8003880:	041b      	lsls	r3, r3, #16
 8003882:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003884:	d11d      	bne.n	80038c2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	2280      	movs	r2, #128	@ 0x80
 800388a:	0412      	lsls	r2, r2, #16
 800388c:	4313      	orrs	r3, r2
 800388e:	4a46      	ldr	r2, [pc, #280]	@ (80039a8 <HAL_ADC_ConfigChannel+0x360>)
 8003890:	0019      	movs	r1, r3
 8003892:	0010      	movs	r0, r2
 8003894:	f7ff fc32 	bl	80030fc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003898:	4b45      	ldr	r3, [pc, #276]	@ (80039b0 <HAL_ADC_ConfigChannel+0x368>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4945      	ldr	r1, [pc, #276]	@ (80039b4 <HAL_ADC_ConfigChannel+0x36c>)
 800389e:	0018      	movs	r0, r3
 80038a0:	f7fc fc32 	bl	8000108 <__udivsi3>
 80038a4:	0003      	movs	r3, r0
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	0013      	movs	r3, r2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	189b      	adds	r3, r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038b2:	e002      	b.n	80038ba <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1f9      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80038c0:	e08e      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a3c      	ldr	r2, [pc, #240]	@ (80039b8 <HAL_ADC_ConfigChannel+0x370>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d10e      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	2380      	movs	r3, #128	@ 0x80
 80038d0:	045b      	lsls	r3, r3, #17
 80038d2:	4013      	ands	r3, r2
 80038d4:	d109      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2280      	movs	r2, #128	@ 0x80
 80038da:	0452      	lsls	r2, r2, #17
 80038dc:	4313      	orrs	r3, r2
 80038de:	4a32      	ldr	r2, [pc, #200]	@ (80039a8 <HAL_ADC_ConfigChannel+0x360>)
 80038e0:	0019      	movs	r1, r3
 80038e2:	0010      	movs	r0, r2
 80038e4:	f7ff fc0a 	bl	80030fc <LL_ADC_SetCommonPathInternalCh>
 80038e8:	e07a      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a33      	ldr	r2, [pc, #204]	@ (80039bc <HAL_ADC_ConfigChannel+0x374>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d000      	beq.n	80038f6 <HAL_ADC_ConfigChannel+0x2ae>
 80038f4:	e074      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	2380      	movs	r3, #128	@ 0x80
 80038fa:	03db      	lsls	r3, r3, #15
 80038fc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80038fe:	d000      	beq.n	8003902 <HAL_ADC_ConfigChannel+0x2ba>
 8003900:	e06e      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	2280      	movs	r2, #128	@ 0x80
 8003906:	03d2      	lsls	r2, r2, #15
 8003908:	4313      	orrs	r3, r2
 800390a:	4a27      	ldr	r2, [pc, #156]	@ (80039a8 <HAL_ADC_ConfigChannel+0x360>)
 800390c:	0019      	movs	r1, r3
 800390e:	0010      	movs	r0, r2
 8003910:	f7ff fbf4 	bl	80030fc <LL_ADC_SetCommonPathInternalCh>
 8003914:	e064      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	2380      	movs	r3, #128	@ 0x80
 800391c:	061b      	lsls	r3, r3, #24
 800391e:	429a      	cmp	r2, r3
 8003920:	d004      	beq.n	800392c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003926:	4a1f      	ldr	r2, [pc, #124]	@ (80039a4 <HAL_ADC_ConfigChannel+0x35c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d107      	bne.n	800393c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	0019      	movs	r1, r3
 8003936:	0010      	movs	r0, r2
 8003938:	f7ff fc66 	bl	8003208 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	da4d      	bge.n	80039e0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003944:	4b18      	ldr	r3, [pc, #96]	@ (80039a8 <HAL_ADC_ConfigChannel+0x360>)
 8003946:	0018      	movs	r0, r3
 8003948:	f7ff fbec 	bl	8003124 <LL_ADC_GetCommonPathInternalCh>
 800394c:	0003      	movs	r3, r0
 800394e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a15      	ldr	r2, [pc, #84]	@ (80039ac <HAL_ADC_ConfigChannel+0x364>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d108      	bne.n	800396c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4a18      	ldr	r2, [pc, #96]	@ (80039c0 <HAL_ADC_ConfigChannel+0x378>)
 800395e:	4013      	ands	r3, r2
 8003960:	4a11      	ldr	r2, [pc, #68]	@ (80039a8 <HAL_ADC_ConfigChannel+0x360>)
 8003962:	0019      	movs	r1, r3
 8003964:	0010      	movs	r0, r2
 8003966:	f7ff fbc9 	bl	80030fc <LL_ADC_SetCommonPathInternalCh>
 800396a:	e039      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a11      	ldr	r2, [pc, #68]	@ (80039b8 <HAL_ADC_ConfigChannel+0x370>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d108      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4a12      	ldr	r2, [pc, #72]	@ (80039c4 <HAL_ADC_ConfigChannel+0x37c>)
 800397a:	4013      	ands	r3, r2
 800397c:	4a0a      	ldr	r2, [pc, #40]	@ (80039a8 <HAL_ADC_ConfigChannel+0x360>)
 800397e:	0019      	movs	r1, r3
 8003980:	0010      	movs	r0, r2
 8003982:	f7ff fbbb 	bl	80030fc <LL_ADC_SetCommonPathInternalCh>
 8003986:	e02b      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a0b      	ldr	r2, [pc, #44]	@ (80039bc <HAL_ADC_ConfigChannel+0x374>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d126      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4a0c      	ldr	r2, [pc, #48]	@ (80039c8 <HAL_ADC_ConfigChannel+0x380>)
 8003996:	4013      	ands	r3, r2
 8003998:	4a03      	ldr	r2, [pc, #12]	@ (80039a8 <HAL_ADC_ConfigChannel+0x360>)
 800399a:	0019      	movs	r1, r3
 800399c:	0010      	movs	r0, r2
 800399e:	f7ff fbad 	bl	80030fc <LL_ADC_SetCommonPathInternalCh>
 80039a2:	e01d      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x398>
 80039a4:	80000004 	.word	0x80000004
 80039a8:	40012708 	.word	0x40012708
 80039ac:	b0001000 	.word	0xb0001000
 80039b0:	20000000 	.word	0x20000000
 80039b4:	00030d40 	.word	0x00030d40
 80039b8:	b8004000 	.word	0xb8004000
 80039bc:	b4002000 	.word	0xb4002000
 80039c0:	ff7fffff 	.word	0xff7fffff
 80039c4:	feffffff 	.word	0xfeffffff
 80039c8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d0:	2220      	movs	r2, #32
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80039d8:	2317      	movs	r3, #23
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	2201      	movs	r2, #1
 80039de:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2254      	movs	r2, #84	@ 0x54
 80039e4:	2100      	movs	r1, #0
 80039e6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80039e8:	2317      	movs	r3, #23
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	781b      	ldrb	r3, [r3, #0]
}
 80039ee:	0018      	movs	r0, r3
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b006      	add	sp, #24
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	46c0      	nop			@ (mov r8, r8)

080039f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039f8:	b590      	push	{r4, r7, lr}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	0002      	movs	r2, r0
 8003a00:	6039      	str	r1, [r7, #0]
 8003a02:	1dfb      	adds	r3, r7, #7
 8003a04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a06:	1dfb      	adds	r3, r7, #7
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a0c:	d828      	bhi.n	8003a60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a0e:	4a2f      	ldr	r2, [pc, #188]	@ (8003acc <__NVIC_SetPriority+0xd4>)
 8003a10:	1dfb      	adds	r3, r7, #7
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	b25b      	sxtb	r3, r3
 8003a16:	089b      	lsrs	r3, r3, #2
 8003a18:	33c0      	adds	r3, #192	@ 0xc0
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	589b      	ldr	r3, [r3, r2]
 8003a1e:	1dfa      	adds	r2, r7, #7
 8003a20:	7812      	ldrb	r2, [r2, #0]
 8003a22:	0011      	movs	r1, r2
 8003a24:	2203      	movs	r2, #3
 8003a26:	400a      	ands	r2, r1
 8003a28:	00d2      	lsls	r2, r2, #3
 8003a2a:	21ff      	movs	r1, #255	@ 0xff
 8003a2c:	4091      	lsls	r1, r2
 8003a2e:	000a      	movs	r2, r1
 8003a30:	43d2      	mvns	r2, r2
 8003a32:	401a      	ands	r2, r3
 8003a34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	019b      	lsls	r3, r3, #6
 8003a3a:	22ff      	movs	r2, #255	@ 0xff
 8003a3c:	401a      	ands	r2, r3
 8003a3e:	1dfb      	adds	r3, r7, #7
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	0018      	movs	r0, r3
 8003a44:	2303      	movs	r3, #3
 8003a46:	4003      	ands	r3, r0
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a4c:	481f      	ldr	r0, [pc, #124]	@ (8003acc <__NVIC_SetPriority+0xd4>)
 8003a4e:	1dfb      	adds	r3, r7, #7
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	b25b      	sxtb	r3, r3
 8003a54:	089b      	lsrs	r3, r3, #2
 8003a56:	430a      	orrs	r2, r1
 8003a58:	33c0      	adds	r3, #192	@ 0xc0
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003a5e:	e031      	b.n	8003ac4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a60:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad0 <__NVIC_SetPriority+0xd8>)
 8003a62:	1dfb      	adds	r3, r7, #7
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	0019      	movs	r1, r3
 8003a68:	230f      	movs	r3, #15
 8003a6a:	400b      	ands	r3, r1
 8003a6c:	3b08      	subs	r3, #8
 8003a6e:	089b      	lsrs	r3, r3, #2
 8003a70:	3306      	adds	r3, #6
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	18d3      	adds	r3, r2, r3
 8003a76:	3304      	adds	r3, #4
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	1dfa      	adds	r2, r7, #7
 8003a7c:	7812      	ldrb	r2, [r2, #0]
 8003a7e:	0011      	movs	r1, r2
 8003a80:	2203      	movs	r2, #3
 8003a82:	400a      	ands	r2, r1
 8003a84:	00d2      	lsls	r2, r2, #3
 8003a86:	21ff      	movs	r1, #255	@ 0xff
 8003a88:	4091      	lsls	r1, r2
 8003a8a:	000a      	movs	r2, r1
 8003a8c:	43d2      	mvns	r2, r2
 8003a8e:	401a      	ands	r2, r3
 8003a90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	019b      	lsls	r3, r3, #6
 8003a96:	22ff      	movs	r2, #255	@ 0xff
 8003a98:	401a      	ands	r2, r3
 8003a9a:	1dfb      	adds	r3, r7, #7
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	4003      	ands	r3, r0
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003aa8:	4809      	ldr	r0, [pc, #36]	@ (8003ad0 <__NVIC_SetPriority+0xd8>)
 8003aaa:	1dfb      	adds	r3, r7, #7
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	001c      	movs	r4, r3
 8003ab0:	230f      	movs	r3, #15
 8003ab2:	4023      	ands	r3, r4
 8003ab4:	3b08      	subs	r3, #8
 8003ab6:	089b      	lsrs	r3, r3, #2
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	3306      	adds	r3, #6
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	18c3      	adds	r3, r0, r3
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	601a      	str	r2, [r3, #0]
}
 8003ac4:	46c0      	nop			@ (mov r8, r8)
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b003      	add	sp, #12
 8003aca:	bd90      	pop	{r4, r7, pc}
 8003acc:	e000e100 	.word	0xe000e100
 8003ad0:	e000ed00 	.word	0xe000ed00

08003ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	1e5a      	subs	r2, r3, #1
 8003ae0:	2380      	movs	r3, #128	@ 0x80
 8003ae2:	045b      	lsls	r3, r3, #17
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d301      	bcc.n	8003aec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e010      	b.n	8003b0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aec:	4b0a      	ldr	r3, [pc, #40]	@ (8003b18 <SysTick_Config+0x44>)
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	3a01      	subs	r2, #1
 8003af2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003af4:	2301      	movs	r3, #1
 8003af6:	425b      	negs	r3, r3
 8003af8:	2103      	movs	r1, #3
 8003afa:	0018      	movs	r0, r3
 8003afc:	f7ff ff7c 	bl	80039f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b00:	4b05      	ldr	r3, [pc, #20]	@ (8003b18 <SysTick_Config+0x44>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b06:	4b04      	ldr	r3, [pc, #16]	@ (8003b18 <SysTick_Config+0x44>)
 8003b08:	2207      	movs	r2, #7
 8003b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	0018      	movs	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	b002      	add	sp, #8
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	e000e010 	.word	0xe000e010

08003b1c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	210f      	movs	r1, #15
 8003b28:	187b      	adds	r3, r7, r1
 8003b2a:	1c02      	adds	r2, r0, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	187b      	adds	r3, r7, r1
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	b25b      	sxtb	r3, r3
 8003b36:	0011      	movs	r1, r2
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f7ff ff5d 	bl	80039f8 <__NVIC_SetPriority>
}
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b004      	add	sp, #16
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7ff ffbf 	bl	8003ad4 <SysTick_Config>
 8003b56:	0003      	movs	r3, r0
}
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b002      	add	sp, #8
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e14e      	b.n	8003e10 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	225c      	movs	r2, #92	@ 0x5c
 8003b76:	5c9b      	ldrb	r3, [r3, r2]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d107      	bne.n	8003b8e <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	225d      	movs	r2, #93	@ 0x5d
 8003b82:	2100      	movs	r1, #0
 8003b84:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f7ff f8d9 	bl	8002d40 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	699a      	ldr	r2, [r3, #24]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2110      	movs	r1, #16
 8003b9a:	438a      	bics	r2, r1
 8003b9c:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b9e:	f7ff fa8d 	bl	80030bc <HAL_GetTick>
 8003ba2:	0003      	movs	r3, r0
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003ba6:	e012      	b.n	8003bce <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003ba8:	f7ff fa88 	bl	80030bc <HAL_GetTick>
 8003bac:	0002      	movs	r2, r0
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b0a      	cmp	r3, #10
 8003bb4:	d90b      	bls.n	8003bce <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bba:	2201      	movs	r2, #1
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	225c      	movs	r2, #92	@ 0x5c
 8003bc6:	2103      	movs	r1, #3
 8003bc8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e120      	b.n	8003e10 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d0e5      	beq.n	8003ba8 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2101      	movs	r1, #1
 8003be8:	430a      	orrs	r2, r1
 8003bea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bec:	f7ff fa66 	bl	80030bc <HAL_GetTick>
 8003bf0:	0003      	movs	r3, r0
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003bf4:	e012      	b.n	8003c1c <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003bf6:	f7ff fa61 	bl	80030bc <HAL_GetTick>
 8003bfa:	0002      	movs	r2, r0
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b0a      	cmp	r3, #10
 8003c02:	d90b      	bls.n	8003c1c <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c08:	2201      	movs	r2, #1
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	225c      	movs	r2, #92	@ 0x5c
 8003c14:	2103      	movs	r1, #3
 8003c16:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0f9      	b.n	8003e10 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	2201      	movs	r2, #1
 8003c24:	4013      	ands	r3, r2
 8003c26:	d0e6      	beq.n	8003bf6 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2102      	movs	r1, #2
 8003c34:	430a      	orrs	r2, r1
 8003c36:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a76      	ldr	r2, [pc, #472]	@ (8003e18 <HAL_FDCAN_Init+0x2b8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d103      	bne.n	8003c4a <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003c42:	4a76      	ldr	r2, [pc, #472]	@ (8003e1c <HAL_FDCAN_Init+0x2bc>)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	7c1b      	ldrb	r3, [r3, #16]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d108      	bne.n	8003c64 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699a      	ldr	r2, [r3, #24]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2140      	movs	r1, #64	@ 0x40
 8003c5e:	438a      	bics	r2, r1
 8003c60:	619a      	str	r2, [r3, #24]
 8003c62:	e007      	b.n	8003c74 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2140      	movs	r1, #64	@ 0x40
 8003c70:	430a      	orrs	r2, r1
 8003c72:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	7c5b      	ldrb	r3, [r3, #17]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d109      	bne.n	8003c90 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2180      	movs	r1, #128	@ 0x80
 8003c88:	01c9      	lsls	r1, r1, #7
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	619a      	str	r2, [r3, #24]
 8003c8e:	e007      	b.n	8003ca0 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4961      	ldr	r1, [pc, #388]	@ (8003e20 <HAL_FDCAN_Init+0x2c0>)
 8003c9c:	400a      	ands	r2, r1
 8003c9e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	7c9b      	ldrb	r3, [r3, #18]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d108      	bne.n	8003cba <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	495c      	ldr	r1, [pc, #368]	@ (8003e24 <HAL_FDCAN_Init+0x2c4>)
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	619a      	str	r2, [r3, #24]
 8003cb8:	e008      	b.n	8003ccc <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699a      	ldr	r2, [r3, #24]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2180      	movs	r1, #128	@ 0x80
 8003cc6:	0149      	lsls	r1, r1, #5
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	4a55      	ldr	r2, [pc, #340]	@ (8003e28 <HAL_FDCAN_Init+0x2c8>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	0019      	movs	r1, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699a      	ldr	r2, [r3, #24]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	21a4      	movs	r1, #164	@ 0xa4
 8003cf0:	438a      	bics	r2, r1
 8003cf2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691a      	ldr	r2, [r3, #16]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2110      	movs	r1, #16
 8003d00:	438a      	bics	r2, r1
 8003d02:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d108      	bne.n	8003d1e <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2104      	movs	r1, #4
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	619a      	str	r2, [r3, #24]
 8003d1c:	e02c      	b.n	8003d78 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d028      	beq.n	8003d78 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d01c      	beq.n	8003d68 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699a      	ldr	r2, [r3, #24]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2180      	movs	r1, #128	@ 0x80
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2110      	movs	r1, #16
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d110      	bne.n	8003d78 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699a      	ldr	r2, [r3, #24]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2120      	movs	r1, #32
 8003d62:	430a      	orrs	r2, r1
 8003d64:	619a      	str	r2, [r3, #24]
 8003d66:	e007      	b.n	8003d78 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2120      	movs	r1, #32
 8003d74:	430a      	orrs	r2, r1
 8003d76:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	3b01      	subs	r3, #1
 8003d86:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003d88:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003d90:	431a      	orrs	r2, r3
 8003d92:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003da0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003da2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	23c0      	movs	r3, #192	@ 0xc0
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d115      	bne.n	8003ddc <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003dbe:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003dd8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003dda:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	22c0      	movs	r2, #192	@ 0xc0
 8003de2:	5899      	ldr	r1, [r3, r2]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	21c0      	movs	r1, #192	@ 0xc0
 8003df0:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	0018      	movs	r0, r3
 8003df6:	f000 f819 	bl	8003e2c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	225c      	movs	r2, #92	@ 0x5c
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	0018      	movs	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b004      	add	sp, #16
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40006400 	.word	0x40006400
 8003e1c:	40006500 	.word	0x40006500
 8003e20:	ffffbfff 	.word	0xffffbfff
 8003e24:	ffffefff 	.word	0xffffefff
 8003e28:	fffffcff 	.word	0xfffffcff

08003e2c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003e34:	4b2f      	ldr	r3, [pc, #188]	@ (8003ef4 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8003e36:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a2e      	ldr	r2, [pc, #184]	@ (8003ef8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d105      	bne.n	8003e4e <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	22d4      	movs	r2, #212	@ 0xd4
 8003e46:	0092      	lsls	r2, r2, #2
 8003e48:	4694      	mov	ip, r2
 8003e4a:	4463      	add	r3, ip
 8003e4c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2280      	movs	r2, #128	@ 0x80
 8003e5a:	589b      	ldr	r3, [r3, r2]
 8003e5c:	4a27      	ldr	r2, [pc, #156]	@ (8003efc <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	0019      	movs	r1, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e66:	041a      	lsls	r2, r3, #16
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	2180      	movs	r1, #128	@ 0x80
 8003e70:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	3370      	adds	r3, #112	@ 0x70
 8003e76:	001a      	movs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2280      	movs	r2, #128	@ 0x80
 8003e82:	589b      	ldr	r3, [r3, r2]
 8003e84:	4a1e      	ldr	r2, [pc, #120]	@ (8003f00 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	0019      	movs	r1, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8e:	061a      	lsls	r2, r3, #24
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	2180      	movs	r1, #128	@ 0x80
 8003e98:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	33b0      	adds	r3, #176	@ 0xb0
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	3389      	adds	r3, #137	@ 0x89
 8003ea8:	33ff      	adds	r3, #255	@ 0xff
 8003eaa:	001a      	movs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2298      	movs	r2, #152	@ 0x98
 8003eb4:	0092      	lsls	r2, r2, #2
 8003eb6:	189a      	adds	r2, r3, r2
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	229e      	movs	r2, #158	@ 0x9e
 8003ec0:	0092      	lsls	r2, r2, #2
 8003ec2:	189a      	adds	r2, r3, r2
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	e005      	b.n	8003eda <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	22d4      	movs	r2, #212	@ 0xd4
 8003ede:	0092      	lsls	r2, r2, #2
 8003ee0:	4694      	mov	ip, r2
 8003ee2:	4463      	add	r3, ip
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d3f1      	bcc.n	8003ece <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8003eea:	46c0      	nop			@ (mov r8, r8)
 8003eec:	46c0      	nop			@ (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b004      	add	sp, #16
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	4000b400 	.word	0x4000b400
 8003ef8:	40006800 	.word	0x40006800
 8003efc:	ffe0ffff 	.word	0xffe0ffff
 8003f00:	f0ffffff 	.word	0xf0ffffff

08003f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f12:	e14d      	b.n	80041b0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2101      	movs	r1, #1
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	4091      	lsls	r1, r2
 8003f1e:	000a      	movs	r2, r1
 8003f20:	4013      	ands	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d100      	bne.n	8003f2c <HAL_GPIO_Init+0x28>
 8003f2a:	e13e      	b.n	80041aa <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2203      	movs	r2, #3
 8003f32:	4013      	ands	r3, r2
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d005      	beq.n	8003f44 <HAL_GPIO_Init+0x40>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2203      	movs	r2, #3
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d130      	bne.n	8003fa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	2203      	movs	r2, #3
 8003f50:	409a      	lsls	r2, r3
 8003f52:	0013      	movs	r3, r2
 8003f54:	43da      	mvns	r2, r3
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	409a      	lsls	r2, r3
 8003f66:	0013      	movs	r3, r2
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	0013      	movs	r3, r2
 8003f82:	43da      	mvns	r2, r3
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4013      	ands	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	091b      	lsrs	r3, r3, #4
 8003f90:	2201      	movs	r2, #1
 8003f92:	401a      	ands	r2, r3
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	409a      	lsls	r2, r3
 8003f98:	0013      	movs	r3, r2
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2203      	movs	r2, #3
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d017      	beq.n	8003fe2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	409a      	lsls	r2, r3
 8003fc0:	0013      	movs	r3, r2
 8003fc2:	43da      	mvns	r2, r3
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	0013      	movs	r3, r2
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d123      	bne.n	8004036 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	08da      	lsrs	r2, r3, #3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3208      	adds	r2, #8
 8003ff6:	0092      	lsls	r2, r2, #2
 8003ff8:	58d3      	ldr	r3, [r2, r3]
 8003ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2207      	movs	r2, #7
 8004000:	4013      	ands	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	220f      	movs	r2, #15
 8004006:	409a      	lsls	r2, r3
 8004008:	0013      	movs	r3, r2
 800400a:	43da      	mvns	r2, r3
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4013      	ands	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2107      	movs	r1, #7
 800401a:	400b      	ands	r3, r1
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	409a      	lsls	r2, r3
 8004020:	0013      	movs	r3, r2
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	08da      	lsrs	r2, r3, #3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3208      	adds	r2, #8
 8004030:	0092      	lsls	r2, r2, #2
 8004032:	6939      	ldr	r1, [r7, #16]
 8004034:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	2203      	movs	r2, #3
 8004042:	409a      	lsls	r2, r3
 8004044:	0013      	movs	r3, r2
 8004046:	43da      	mvns	r2, r3
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	4013      	ands	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2203      	movs	r2, #3
 8004054:	401a      	ands	r2, r3
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	409a      	lsls	r2, r3
 800405c:	0013      	movs	r3, r2
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	23c0      	movs	r3, #192	@ 0xc0
 8004070:	029b      	lsls	r3, r3, #10
 8004072:	4013      	ands	r3, r2
 8004074:	d100      	bne.n	8004078 <HAL_GPIO_Init+0x174>
 8004076:	e098      	b.n	80041aa <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004078:	4a53      	ldr	r2, [pc, #332]	@ (80041c8 <HAL_GPIO_Init+0x2c4>)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	089b      	lsrs	r3, r3, #2
 800407e:	3318      	adds	r3, #24
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	589b      	ldr	r3, [r3, r2]
 8004084:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2203      	movs	r2, #3
 800408a:	4013      	ands	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	220f      	movs	r2, #15
 8004090:	409a      	lsls	r2, r3
 8004092:	0013      	movs	r3, r2
 8004094:	43da      	mvns	r2, r3
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	4013      	ands	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	23a0      	movs	r3, #160	@ 0xa0
 80040a0:	05db      	lsls	r3, r3, #23
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d019      	beq.n	80040da <HAL_GPIO_Init+0x1d6>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a48      	ldr	r2, [pc, #288]	@ (80041cc <HAL_GPIO_Init+0x2c8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d013      	beq.n	80040d6 <HAL_GPIO_Init+0x1d2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a47      	ldr	r2, [pc, #284]	@ (80041d0 <HAL_GPIO_Init+0x2cc>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00d      	beq.n	80040d2 <HAL_GPIO_Init+0x1ce>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a46      	ldr	r2, [pc, #280]	@ (80041d4 <HAL_GPIO_Init+0x2d0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d007      	beq.n	80040ce <HAL_GPIO_Init+0x1ca>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a45      	ldr	r2, [pc, #276]	@ (80041d8 <HAL_GPIO_Init+0x2d4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d101      	bne.n	80040ca <HAL_GPIO_Init+0x1c6>
 80040c6:	2304      	movs	r3, #4
 80040c8:	e008      	b.n	80040dc <HAL_GPIO_Init+0x1d8>
 80040ca:	2305      	movs	r3, #5
 80040cc:	e006      	b.n	80040dc <HAL_GPIO_Init+0x1d8>
 80040ce:	2303      	movs	r3, #3
 80040d0:	e004      	b.n	80040dc <HAL_GPIO_Init+0x1d8>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e002      	b.n	80040dc <HAL_GPIO_Init+0x1d8>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <HAL_GPIO_Init+0x1d8>
 80040da:	2300      	movs	r3, #0
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	2103      	movs	r1, #3
 80040e0:	400a      	ands	r2, r1
 80040e2:	00d2      	lsls	r2, r2, #3
 80040e4:	4093      	lsls	r3, r2
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80040ec:	4936      	ldr	r1, [pc, #216]	@ (80041c8 <HAL_GPIO_Init+0x2c4>)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	089b      	lsrs	r3, r3, #2
 80040f2:	3318      	adds	r3, #24
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040fa:	4b33      	ldr	r3, [pc, #204]	@ (80041c8 <HAL_GPIO_Init+0x2c4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	43da      	mvns	r2, r3
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	4013      	ands	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	2380      	movs	r3, #128	@ 0x80
 8004110:	035b      	lsls	r3, r3, #13
 8004112:	4013      	ands	r3, r2
 8004114:	d003      	beq.n	800411e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800411e:	4b2a      	ldr	r3, [pc, #168]	@ (80041c8 <HAL_GPIO_Init+0x2c4>)
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004124:	4b28      	ldr	r3, [pc, #160]	@ (80041c8 <HAL_GPIO_Init+0x2c4>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	43da      	mvns	r2, r3
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	4013      	ands	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	2380      	movs	r3, #128	@ 0x80
 800413a:	039b      	lsls	r3, r3, #14
 800413c:	4013      	ands	r3, r2
 800413e:	d003      	beq.n	8004148 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004148:	4b1f      	ldr	r3, [pc, #124]	@ (80041c8 <HAL_GPIO_Init+0x2c4>)
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800414e:	4a1e      	ldr	r2, [pc, #120]	@ (80041c8 <HAL_GPIO_Init+0x2c4>)
 8004150:	2384      	movs	r3, #132	@ 0x84
 8004152:	58d3      	ldr	r3, [r2, r3]
 8004154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	43da      	mvns	r2, r3
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4013      	ands	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	2380      	movs	r3, #128	@ 0x80
 8004166:	029b      	lsls	r3, r3, #10
 8004168:	4013      	ands	r3, r2
 800416a:	d003      	beq.n	8004174 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004174:	4914      	ldr	r1, [pc, #80]	@ (80041c8 <HAL_GPIO_Init+0x2c4>)
 8004176:	2284      	movs	r2, #132	@ 0x84
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800417c:	4a12      	ldr	r2, [pc, #72]	@ (80041c8 <HAL_GPIO_Init+0x2c4>)
 800417e:	2380      	movs	r3, #128	@ 0x80
 8004180:	58d3      	ldr	r3, [r2, r3]
 8004182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	43da      	mvns	r2, r3
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	4013      	ands	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	2380      	movs	r3, #128	@ 0x80
 8004194:	025b      	lsls	r3, r3, #9
 8004196:	4013      	ands	r3, r2
 8004198:	d003      	beq.n	80041a2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041a2:	4909      	ldr	r1, [pc, #36]	@ (80041c8 <HAL_GPIO_Init+0x2c4>)
 80041a4:	2280      	movs	r2, #128	@ 0x80
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	3301      	adds	r3, #1
 80041ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	40da      	lsrs	r2, r3
 80041b8:	1e13      	subs	r3, r2, #0
 80041ba:	d000      	beq.n	80041be <HAL_GPIO_Init+0x2ba>
 80041bc:	e6aa      	b.n	8003f14 <HAL_GPIO_Init+0x10>
  }
}
 80041be:	46c0      	nop			@ (mov r8, r8)
 80041c0:	46c0      	nop			@ (mov r8, r8)
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b006      	add	sp, #24
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40021800 	.word	0x40021800
 80041cc:	50000400 	.word	0x50000400
 80041d0:	50000800 	.word	0x50000800
 80041d4:	50000c00 	.word	0x50000c00
 80041d8:	50001000 	.word	0x50001000

080041dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	0008      	movs	r0, r1
 80041e6:	0011      	movs	r1, r2
 80041e8:	1cbb      	adds	r3, r7, #2
 80041ea:	1c02      	adds	r2, r0, #0
 80041ec:	801a      	strh	r2, [r3, #0]
 80041ee:	1c7b      	adds	r3, r7, #1
 80041f0:	1c0a      	adds	r2, r1, #0
 80041f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041f4:	1c7b      	adds	r3, r7, #1
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d004      	beq.n	8004206 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041fc:	1cbb      	adds	r3, r7, #2
 80041fe:	881a      	ldrh	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004204:	e003      	b.n	800420e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004206:	1cbb      	adds	r3, r7, #2
 8004208:	881a      	ldrh	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800420e:	46c0      	nop			@ (mov r8, r8)
 8004210:	46bd      	mov	sp, r7
 8004212:	b002      	add	sp, #8
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	000a      	movs	r2, r1
 8004220:	1cbb      	adds	r3, r7, #2
 8004222:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800422a:	1cbb      	adds	r3, r7, #2
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4013      	ands	r3, r2
 8004232:	041a      	lsls	r2, r3, #16
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	43db      	mvns	r3, r3
 8004238:	1cb9      	adds	r1, r7, #2
 800423a:	8809      	ldrh	r1, [r1, #0]
 800423c:	400b      	ands	r3, r1
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	619a      	str	r2, [r3, #24]
}
 8004244:	46c0      	nop			@ (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	b004      	add	sp, #16
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e08f      	b.n	800437e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2241      	movs	r2, #65	@ 0x41
 8004262:	5c9b      	ldrb	r3, [r3, r2]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d107      	bne.n	800427a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2240      	movs	r2, #64	@ 0x40
 800426e:	2100      	movs	r1, #0
 8004270:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	0018      	movs	r0, r3
 8004276:	f7fe fdc5 	bl	8002e04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2241      	movs	r2, #65	@ 0x41
 800427e:	2124      	movs	r1, #36	@ 0x24
 8004280:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2101      	movs	r1, #1
 800428e:	438a      	bics	r2, r1
 8004290:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	493b      	ldr	r1, [pc, #236]	@ (8004388 <HAL_I2C_Init+0x13c>)
 800429c:	400a      	ands	r2, r1
 800429e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4938      	ldr	r1, [pc, #224]	@ (800438c <HAL_I2C_Init+0x140>)
 80042ac:	400a      	ands	r2, r1
 80042ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d108      	bne.n	80042ca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2180      	movs	r1, #128	@ 0x80
 80042c2:	0209      	lsls	r1, r1, #8
 80042c4:	430a      	orrs	r2, r1
 80042c6:	609a      	str	r2, [r3, #8]
 80042c8:	e007      	b.n	80042da <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2184      	movs	r1, #132	@ 0x84
 80042d4:	0209      	lsls	r1, r1, #8
 80042d6:	430a      	orrs	r2, r1
 80042d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d109      	bne.n	80042f6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2180      	movs	r1, #128	@ 0x80
 80042ee:	0109      	lsls	r1, r1, #4
 80042f0:	430a      	orrs	r2, r1
 80042f2:	605a      	str	r2, [r3, #4]
 80042f4:	e007      	b.n	8004306 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4923      	ldr	r1, [pc, #140]	@ (8004390 <HAL_I2C_Init+0x144>)
 8004302:	400a      	ands	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4920      	ldr	r1, [pc, #128]	@ (8004394 <HAL_I2C_Init+0x148>)
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	491a      	ldr	r1, [pc, #104]	@ (800438c <HAL_I2C_Init+0x140>)
 8004322:	400a      	ands	r2, r1
 8004324:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	431a      	orrs	r2, r3
 8004330:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69d9      	ldr	r1, [r3, #28]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1a      	ldr	r2, [r3, #32]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2101      	movs	r1, #1
 800435c:	430a      	orrs	r2, r1
 800435e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2241      	movs	r2, #65	@ 0x41
 800436a:	2120      	movs	r1, #32
 800436c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2242      	movs	r2, #66	@ 0x42
 8004378:	2100      	movs	r1, #0
 800437a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	0018      	movs	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	b002      	add	sp, #8
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			@ (mov r8, r8)
 8004388:	f0ffffff 	.word	0xf0ffffff
 800438c:	ffff7fff 	.word	0xffff7fff
 8004390:	fffff7ff 	.word	0xfffff7ff
 8004394:	02008000 	.word	0x02008000

08004398 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004398:	b590      	push	{r4, r7, lr}
 800439a:	b089      	sub	sp, #36	@ 0x24
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	0008      	movs	r0, r1
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	0019      	movs	r1, r3
 80043a6:	230a      	movs	r3, #10
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	1c02      	adds	r2, r0, #0
 80043ac:	801a      	strh	r2, [r3, #0]
 80043ae:	2308      	movs	r3, #8
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	1c0a      	adds	r2, r1, #0
 80043b4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2241      	movs	r2, #65	@ 0x41
 80043ba:	5c9b      	ldrb	r3, [r3, r2]
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d000      	beq.n	80043c4 <HAL_I2C_Master_Transmit+0x2c>
 80043c2:	e10a      	b.n	80045da <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2240      	movs	r2, #64	@ 0x40
 80043c8:	5c9b      	ldrb	r3, [r3, r2]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_I2C_Master_Transmit+0x3a>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e104      	b.n	80045dc <HAL_I2C_Master_Transmit+0x244>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2240      	movs	r2, #64	@ 0x40
 80043d6:	2101      	movs	r1, #1
 80043d8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043da:	f7fe fe6f 	bl	80030bc <HAL_GetTick>
 80043de:	0003      	movs	r3, r0
 80043e0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043e2:	2380      	movs	r3, #128	@ 0x80
 80043e4:	0219      	lsls	r1, r3, #8
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	2319      	movs	r3, #25
 80043ee:	2201      	movs	r2, #1
 80043f0:	f000 fcb8 	bl	8004d64 <I2C_WaitOnFlagUntilTimeout>
 80043f4:	1e03      	subs	r3, r0, #0
 80043f6:	d001      	beq.n	80043fc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0ef      	b.n	80045dc <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2241      	movs	r2, #65	@ 0x41
 8004400:	2121      	movs	r1, #33	@ 0x21
 8004402:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2242      	movs	r2, #66	@ 0x42
 8004408:	2110      	movs	r1, #16
 800440a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2208      	movs	r2, #8
 800441c:	18ba      	adds	r2, r7, r2
 800441e:	8812      	ldrh	r2, [r2, #0]
 8004420:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442c:	b29b      	uxth	r3, r3
 800442e:	2bff      	cmp	r3, #255	@ 0xff
 8004430:	d906      	bls.n	8004440 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	22ff      	movs	r2, #255	@ 0xff
 8004436:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004438:	2380      	movs	r3, #128	@ 0x80
 800443a:	045b      	lsls	r3, r3, #17
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	e007      	b.n	8004450 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800444a:	2380      	movs	r3, #128	@ 0x80
 800444c:	049b      	lsls	r3, r3, #18
 800444e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004454:	2b00      	cmp	r3, #0
 8004456:	d027      	beq.n	80044a8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445c:	781a      	ldrb	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800448c:	b2db      	uxtb	r3, r3
 800448e:	3301      	adds	r3, #1
 8004490:	b2da      	uxtb	r2, r3
 8004492:	697c      	ldr	r4, [r7, #20]
 8004494:	230a      	movs	r3, #10
 8004496:	18fb      	adds	r3, r7, r3
 8004498:	8819      	ldrh	r1, [r3, #0]
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	4b51      	ldr	r3, [pc, #324]	@ (80045e4 <HAL_I2C_Master_Transmit+0x24c>)
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	0023      	movs	r3, r4
 80044a2:	f000 fed7 	bl	8005254 <I2C_TransferConfig>
 80044a6:	e06f      	b.n	8004588 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	697c      	ldr	r4, [r7, #20]
 80044b0:	230a      	movs	r3, #10
 80044b2:	18fb      	adds	r3, r7, r3
 80044b4:	8819      	ldrh	r1, [r3, #0]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	4b4a      	ldr	r3, [pc, #296]	@ (80045e4 <HAL_I2C_Master_Transmit+0x24c>)
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	0023      	movs	r3, r4
 80044be:	f000 fec9 	bl	8005254 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80044c2:	e061      	b.n	8004588 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	0018      	movs	r0, r3
 80044cc:	f000 fca2 	bl	8004e14 <I2C_WaitOnTXISFlagUntilTimeout>
 80044d0:	1e03      	subs	r3, r0, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e081      	b.n	80045dc <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	781a      	ldrb	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d03a      	beq.n	8004588 <HAL_I2C_Master_Transmit+0x1f0>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004516:	2b00      	cmp	r3, #0
 8004518:	d136      	bne.n	8004588 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800451a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	0013      	movs	r3, r2
 8004524:	2200      	movs	r2, #0
 8004526:	2180      	movs	r1, #128	@ 0x80
 8004528:	f000 fc1c 	bl	8004d64 <I2C_WaitOnFlagUntilTimeout>
 800452c:	1e03      	subs	r3, r0, #0
 800452e:	d001      	beq.n	8004534 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e053      	b.n	80045dc <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004538:	b29b      	uxth	r3, r3
 800453a:	2bff      	cmp	r3, #255	@ 0xff
 800453c:	d911      	bls.n	8004562 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	22ff      	movs	r2, #255	@ 0xff
 8004542:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004548:	b2da      	uxtb	r2, r3
 800454a:	2380      	movs	r3, #128	@ 0x80
 800454c:	045c      	lsls	r4, r3, #17
 800454e:	230a      	movs	r3, #10
 8004550:	18fb      	adds	r3, r7, r3
 8004552:	8819      	ldrh	r1, [r3, #0]
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	2300      	movs	r3, #0
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	0023      	movs	r3, r4
 800455c:	f000 fe7a 	bl	8005254 <I2C_TransferConfig>
 8004560:	e012      	b.n	8004588 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004570:	b2da      	uxtb	r2, r3
 8004572:	2380      	movs	r3, #128	@ 0x80
 8004574:	049c      	lsls	r4, r3, #18
 8004576:	230a      	movs	r3, #10
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	8819      	ldrh	r1, [r3, #0]
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	2300      	movs	r3, #0
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	0023      	movs	r3, r4
 8004584:	f000 fe66 	bl	8005254 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d198      	bne.n	80044c4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	0018      	movs	r0, r3
 800459a:	f000 fc81 	bl	8004ea0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800459e:	1e03      	subs	r3, r0, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e01a      	b.n	80045dc <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2220      	movs	r2, #32
 80045ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	490b      	ldr	r1, [pc, #44]	@ (80045e8 <HAL_I2C_Master_Transmit+0x250>)
 80045ba:	400a      	ands	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2241      	movs	r2, #65	@ 0x41
 80045c2:	2120      	movs	r1, #32
 80045c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2242      	movs	r2, #66	@ 0x42
 80045ca:	2100      	movs	r1, #0
 80045cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2240      	movs	r2, #64	@ 0x40
 80045d2:	2100      	movs	r1, #0
 80045d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	e000      	b.n	80045dc <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80045da:	2302      	movs	r3, #2
  }
}
 80045dc:	0018      	movs	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	b007      	add	sp, #28
 80045e2:	bd90      	pop	{r4, r7, pc}
 80045e4:	80002000 	.word	0x80002000
 80045e8:	fe00e800 	.word	0xfe00e800

080045ec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b089      	sub	sp, #36	@ 0x24
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	0008      	movs	r0, r1
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	0019      	movs	r1, r3
 80045fa:	230a      	movs	r3, #10
 80045fc:	18fb      	adds	r3, r7, r3
 80045fe:	1c02      	adds	r2, r0, #0
 8004600:	801a      	strh	r2, [r3, #0]
 8004602:	2308      	movs	r3, #8
 8004604:	18fb      	adds	r3, r7, r3
 8004606:	1c0a      	adds	r2, r1, #0
 8004608:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2241      	movs	r2, #65	@ 0x41
 800460e:	5c9b      	ldrb	r3, [r3, r2]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b20      	cmp	r3, #32
 8004614:	d000      	beq.n	8004618 <HAL_I2C_Master_Receive+0x2c>
 8004616:	e0e8      	b.n	80047ea <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2240      	movs	r2, #64	@ 0x40
 800461c:	5c9b      	ldrb	r3, [r3, r2]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d101      	bne.n	8004626 <HAL_I2C_Master_Receive+0x3a>
 8004622:	2302      	movs	r3, #2
 8004624:	e0e2      	b.n	80047ec <HAL_I2C_Master_Receive+0x200>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2240      	movs	r2, #64	@ 0x40
 800462a:	2101      	movs	r1, #1
 800462c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800462e:	f7fe fd45 	bl	80030bc <HAL_GetTick>
 8004632:	0003      	movs	r3, r0
 8004634:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004636:	2380      	movs	r3, #128	@ 0x80
 8004638:	0219      	lsls	r1, r3, #8
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	2319      	movs	r3, #25
 8004642:	2201      	movs	r2, #1
 8004644:	f000 fb8e 	bl	8004d64 <I2C_WaitOnFlagUntilTimeout>
 8004648:	1e03      	subs	r3, r0, #0
 800464a:	d001      	beq.n	8004650 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0cd      	b.n	80047ec <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2241      	movs	r2, #65	@ 0x41
 8004654:	2122      	movs	r1, #34	@ 0x22
 8004656:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2242      	movs	r2, #66	@ 0x42
 800465c:	2110      	movs	r1, #16
 800465e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2208      	movs	r2, #8
 8004670:	18ba      	adds	r2, r7, r2
 8004672:	8812      	ldrh	r2, [r2, #0]
 8004674:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	2bff      	cmp	r3, #255	@ 0xff
 8004684:	d911      	bls.n	80046aa <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	22ff      	movs	r2, #255	@ 0xff
 800468a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004690:	b2da      	uxtb	r2, r3
 8004692:	2380      	movs	r3, #128	@ 0x80
 8004694:	045c      	lsls	r4, r3, #17
 8004696:	230a      	movs	r3, #10
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	8819      	ldrh	r1, [r3, #0]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	4b55      	ldr	r3, [pc, #340]	@ (80047f4 <HAL_I2C_Master_Receive+0x208>)
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	0023      	movs	r3, r4
 80046a4:	f000 fdd6 	bl	8005254 <I2C_TransferConfig>
 80046a8:	e076      	b.n	8004798 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	2380      	movs	r3, #128	@ 0x80
 80046bc:	049c      	lsls	r4, r3, #18
 80046be:	230a      	movs	r3, #10
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	8819      	ldrh	r1, [r3, #0]
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	4b4b      	ldr	r3, [pc, #300]	@ (80047f4 <HAL_I2C_Master_Receive+0x208>)
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	0023      	movs	r3, r4
 80046cc:	f000 fdc2 	bl	8005254 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80046d0:	e062      	b.n	8004798 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	0018      	movs	r0, r3
 80046da:	f000 fc25 	bl	8004f28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046de:	1e03      	subs	r3, r0, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e082      	b.n	80047ec <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d03a      	beq.n	8004798 <HAL_I2C_Master_Receive+0x1ac>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004726:	2b00      	cmp	r3, #0
 8004728:	d136      	bne.n	8004798 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800472a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	0013      	movs	r3, r2
 8004734:	2200      	movs	r2, #0
 8004736:	2180      	movs	r1, #128	@ 0x80
 8004738:	f000 fb14 	bl	8004d64 <I2C_WaitOnFlagUntilTimeout>
 800473c:	1e03      	subs	r3, r0, #0
 800473e:	d001      	beq.n	8004744 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e053      	b.n	80047ec <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004748:	b29b      	uxth	r3, r3
 800474a:	2bff      	cmp	r3, #255	@ 0xff
 800474c:	d911      	bls.n	8004772 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	22ff      	movs	r2, #255	@ 0xff
 8004752:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004758:	b2da      	uxtb	r2, r3
 800475a:	2380      	movs	r3, #128	@ 0x80
 800475c:	045c      	lsls	r4, r3, #17
 800475e:	230a      	movs	r3, #10
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	8819      	ldrh	r1, [r3, #0]
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	2300      	movs	r3, #0
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	0023      	movs	r3, r4
 800476c:	f000 fd72 	bl	8005254 <I2C_TransferConfig>
 8004770:	e012      	b.n	8004798 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004776:	b29a      	uxth	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004780:	b2da      	uxtb	r2, r3
 8004782:	2380      	movs	r3, #128	@ 0x80
 8004784:	049c      	lsls	r4, r3, #18
 8004786:	230a      	movs	r3, #10
 8004788:	18fb      	adds	r3, r7, r3
 800478a:	8819      	ldrh	r1, [r3, #0]
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	2300      	movs	r3, #0
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	0023      	movs	r3, r4
 8004794:	f000 fd5e 	bl	8005254 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d197      	bne.n	80046d2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	0018      	movs	r0, r3
 80047aa:	f000 fb79 	bl	8004ea0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047ae:	1e03      	subs	r3, r0, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e01a      	b.n	80047ec <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2220      	movs	r2, #32
 80047bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	490b      	ldr	r1, [pc, #44]	@ (80047f8 <HAL_I2C_Master_Receive+0x20c>)
 80047ca:	400a      	ands	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2241      	movs	r2, #65	@ 0x41
 80047d2:	2120      	movs	r1, #32
 80047d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2242      	movs	r2, #66	@ 0x42
 80047da:	2100      	movs	r1, #0
 80047dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2240      	movs	r2, #64	@ 0x40
 80047e2:	2100      	movs	r1, #0
 80047e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e000      	b.n	80047ec <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
  }
}
 80047ec:	0018      	movs	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b007      	add	sp, #28
 80047f2:	bd90      	pop	{r4, r7, pc}
 80047f4:	80002400 	.word	0x80002400
 80047f8:	fe00e800 	.word	0xfe00e800

080047fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fc:	b590      	push	{r4, r7, lr}
 80047fe:	b089      	sub	sp, #36	@ 0x24
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	000c      	movs	r4, r1
 8004806:	0010      	movs	r0, r2
 8004808:	0019      	movs	r1, r3
 800480a:	230a      	movs	r3, #10
 800480c:	18fb      	adds	r3, r7, r3
 800480e:	1c22      	adds	r2, r4, #0
 8004810:	801a      	strh	r2, [r3, #0]
 8004812:	2308      	movs	r3, #8
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	1c02      	adds	r2, r0, #0
 8004818:	801a      	strh	r2, [r3, #0]
 800481a:	1dbb      	adds	r3, r7, #6
 800481c:	1c0a      	adds	r2, r1, #0
 800481e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2241      	movs	r2, #65	@ 0x41
 8004824:	5c9b      	ldrb	r3, [r3, r2]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b20      	cmp	r3, #32
 800482a:	d000      	beq.n	800482e <HAL_I2C_Mem_Read+0x32>
 800482c:	e110      	b.n	8004a50 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800482e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004830:	2b00      	cmp	r3, #0
 8004832:	d004      	beq.n	800483e <HAL_I2C_Mem_Read+0x42>
 8004834:	232c      	movs	r3, #44	@ 0x2c
 8004836:	18fb      	adds	r3, r7, r3
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d105      	bne.n	800484a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2280      	movs	r2, #128	@ 0x80
 8004842:	0092      	lsls	r2, r2, #2
 8004844:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e103      	b.n	8004a52 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2240      	movs	r2, #64	@ 0x40
 800484e:	5c9b      	ldrb	r3, [r3, r2]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_I2C_Mem_Read+0x5c>
 8004854:	2302      	movs	r3, #2
 8004856:	e0fc      	b.n	8004a52 <HAL_I2C_Mem_Read+0x256>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2240      	movs	r2, #64	@ 0x40
 800485c:	2101      	movs	r1, #1
 800485e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004860:	f7fe fc2c 	bl	80030bc <HAL_GetTick>
 8004864:	0003      	movs	r3, r0
 8004866:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004868:	2380      	movs	r3, #128	@ 0x80
 800486a:	0219      	lsls	r1, r3, #8
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	2319      	movs	r3, #25
 8004874:	2201      	movs	r2, #1
 8004876:	f000 fa75 	bl	8004d64 <I2C_WaitOnFlagUntilTimeout>
 800487a:	1e03      	subs	r3, r0, #0
 800487c:	d001      	beq.n	8004882 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e0e7      	b.n	8004a52 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2241      	movs	r2, #65	@ 0x41
 8004886:	2122      	movs	r1, #34	@ 0x22
 8004888:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2242      	movs	r2, #66	@ 0x42
 800488e:	2140      	movs	r1, #64	@ 0x40
 8004890:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800489c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	222c      	movs	r2, #44	@ 0x2c
 80048a2:	18ba      	adds	r2, r7, r2
 80048a4:	8812      	ldrh	r2, [r2, #0]
 80048a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048ae:	1dbb      	adds	r3, r7, #6
 80048b0:	881c      	ldrh	r4, [r3, #0]
 80048b2:	2308      	movs	r3, #8
 80048b4:	18fb      	adds	r3, r7, r3
 80048b6:	881a      	ldrh	r2, [r3, #0]
 80048b8:	230a      	movs	r3, #10
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	8819      	ldrh	r1, [r3, #0]
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	0023      	movs	r3, r4
 80048ca:	f000 f9c7 	bl	8004c5c <I2C_RequestMemoryRead>
 80048ce:	1e03      	subs	r3, r0, #0
 80048d0:	d005      	beq.n	80048de <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2240      	movs	r2, #64	@ 0x40
 80048d6:	2100      	movs	r1, #0
 80048d8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e0b9      	b.n	8004a52 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2bff      	cmp	r3, #255	@ 0xff
 80048e6:	d911      	bls.n	800490c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	22ff      	movs	r2, #255	@ 0xff
 80048ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	2380      	movs	r3, #128	@ 0x80
 80048f6:	045c      	lsls	r4, r3, #17
 80048f8:	230a      	movs	r3, #10
 80048fa:	18fb      	adds	r3, r7, r3
 80048fc:	8819      	ldrh	r1, [r3, #0]
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	4b56      	ldr	r3, [pc, #344]	@ (8004a5c <HAL_I2C_Mem_Read+0x260>)
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	0023      	movs	r3, r4
 8004906:	f000 fca5 	bl	8005254 <I2C_TransferConfig>
 800490a:	e012      	b.n	8004932 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800491a:	b2da      	uxtb	r2, r3
 800491c:	2380      	movs	r3, #128	@ 0x80
 800491e:	049c      	lsls	r4, r3, #18
 8004920:	230a      	movs	r3, #10
 8004922:	18fb      	adds	r3, r7, r3
 8004924:	8819      	ldrh	r1, [r3, #0]
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	4b4c      	ldr	r3, [pc, #304]	@ (8004a5c <HAL_I2C_Mem_Read+0x260>)
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	0023      	movs	r3, r4
 800492e:	f000 fc91 	bl	8005254 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	0013      	movs	r3, r2
 800493c:	2200      	movs	r2, #0
 800493e:	2104      	movs	r1, #4
 8004940:	f000 fa10 	bl	8004d64 <I2C_WaitOnFlagUntilTimeout>
 8004944:	1e03      	subs	r3, r0, #0
 8004946:	d001      	beq.n	800494c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e082      	b.n	8004a52 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d03a      	beq.n	80049fe <HAL_I2C_Mem_Read+0x202>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800498c:	2b00      	cmp	r3, #0
 800498e:	d136      	bne.n	80049fe <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	0013      	movs	r3, r2
 800499a:	2200      	movs	r2, #0
 800499c:	2180      	movs	r1, #128	@ 0x80
 800499e:	f000 f9e1 	bl	8004d64 <I2C_WaitOnFlagUntilTimeout>
 80049a2:	1e03      	subs	r3, r0, #0
 80049a4:	d001      	beq.n	80049aa <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e053      	b.n	8004a52 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	2bff      	cmp	r3, #255	@ 0xff
 80049b2:	d911      	bls.n	80049d8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	22ff      	movs	r2, #255	@ 0xff
 80049b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	2380      	movs	r3, #128	@ 0x80
 80049c2:	045c      	lsls	r4, r3, #17
 80049c4:	230a      	movs	r3, #10
 80049c6:	18fb      	adds	r3, r7, r3
 80049c8:	8819      	ldrh	r1, [r3, #0]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	2300      	movs	r3, #0
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	0023      	movs	r3, r4
 80049d2:	f000 fc3f 	bl	8005254 <I2C_TransferConfig>
 80049d6:	e012      	b.n	80049fe <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	2380      	movs	r3, #128	@ 0x80
 80049ea:	049c      	lsls	r4, r3, #18
 80049ec:	230a      	movs	r3, #10
 80049ee:	18fb      	adds	r3, r7, r3
 80049f0:	8819      	ldrh	r1, [r3, #0]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	2300      	movs	r3, #0
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	0023      	movs	r3, r4
 80049fa:	f000 fc2b 	bl	8005254 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d194      	bne.n	8004932 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f000 fa46 	bl	8004ea0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a14:	1e03      	subs	r3, r0, #0
 8004a16:	d001      	beq.n	8004a1c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e01a      	b.n	8004a52 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2220      	movs	r2, #32
 8004a22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	490c      	ldr	r1, [pc, #48]	@ (8004a60 <HAL_I2C_Mem_Read+0x264>)
 8004a30:	400a      	ands	r2, r1
 8004a32:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2241      	movs	r2, #65	@ 0x41
 8004a38:	2120      	movs	r1, #32
 8004a3a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2242      	movs	r2, #66	@ 0x42
 8004a40:	2100      	movs	r1, #0
 8004a42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2240      	movs	r2, #64	@ 0x40
 8004a48:	2100      	movs	r1, #0
 8004a4a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e000      	b.n	8004a52 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004a50:	2302      	movs	r3, #2
  }
}
 8004a52:	0018      	movs	r0, r3
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b007      	add	sp, #28
 8004a58:	bd90      	pop	{r4, r7, pc}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	80002400 	.word	0x80002400
 8004a60:	fe00e800 	.word	0xfe00e800

08004a64 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08a      	sub	sp, #40	@ 0x28
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	603b      	str	r3, [r7, #0]
 8004a70:	230a      	movs	r3, #10
 8004a72:	18fb      	adds	r3, r7, r3
 8004a74:	1c0a      	adds	r2, r1, #0
 8004a76:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2241      	movs	r2, #65	@ 0x41
 8004a80:	5c9b      	ldrb	r3, [r3, r2]
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b20      	cmp	r3, #32
 8004a86:	d000      	beq.n	8004a8a <HAL_I2C_IsDeviceReady+0x26>
 8004a88:	e0df      	b.n	8004c4a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699a      	ldr	r2, [r3, #24]
 8004a90:	2380      	movs	r3, #128	@ 0x80
 8004a92:	021b      	lsls	r3, r3, #8
 8004a94:	401a      	ands	r2, r3
 8004a96:	2380      	movs	r3, #128	@ 0x80
 8004a98:	021b      	lsls	r3, r3, #8
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d101      	bne.n	8004aa2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e0d4      	b.n	8004c4c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2240      	movs	r2, #64	@ 0x40
 8004aa6:	5c9b      	ldrb	r3, [r3, r2]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_I2C_IsDeviceReady+0x4c>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e0cd      	b.n	8004c4c <HAL_I2C_IsDeviceReady+0x1e8>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2240      	movs	r2, #64	@ 0x40
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2241      	movs	r2, #65	@ 0x41
 8004abc:	2124      	movs	r1, #36	@ 0x24
 8004abe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d107      	bne.n	8004ade <HAL_I2C_IsDeviceReady+0x7a>
 8004ace:	230a      	movs	r3, #10
 8004ad0:	18fb      	adds	r3, r7, r3
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	059b      	lsls	r3, r3, #22
 8004ad6:	0d9b      	lsrs	r3, r3, #22
 8004ad8:	4a5e      	ldr	r2, [pc, #376]	@ (8004c54 <HAL_I2C_IsDeviceReady+0x1f0>)
 8004ada:	431a      	orrs	r2, r3
 8004adc:	e006      	b.n	8004aec <HAL_I2C_IsDeviceReady+0x88>
 8004ade:	230a      	movs	r3, #10
 8004ae0:	18fb      	adds	r3, r7, r3
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	059b      	lsls	r3, r3, #22
 8004ae6:	0d9b      	lsrs	r3, r3, #22
 8004ae8:	4a5b      	ldr	r2, [pc, #364]	@ (8004c58 <HAL_I2C_IsDeviceReady+0x1f4>)
 8004aea:	431a      	orrs	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004af2:	f7fe fae3 	bl	80030bc <HAL_GetTick>
 8004af6:	0003      	movs	r3, r0
 8004af8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	2220      	movs	r2, #32
 8004b02:	4013      	ands	r3, r2
 8004b04:	3b20      	subs	r3, #32
 8004b06:	425a      	negs	r2, r3
 8004b08:	4153      	adcs	r3, r2
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	231f      	movs	r3, #31
 8004b0e:	18fb      	adds	r3, r7, r3
 8004b10:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	2210      	movs	r2, #16
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	3b10      	subs	r3, #16
 8004b1e:	425a      	negs	r2, r3
 8004b20:	4153      	adcs	r3, r2
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	231e      	movs	r3, #30
 8004b26:	18fb      	adds	r3, r7, r3
 8004b28:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004b2a:	e035      	b.n	8004b98 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	d01a      	beq.n	8004b68 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b32:	f7fe fac3 	bl	80030bc <HAL_GetTick>
 8004b36:	0002      	movs	r2, r0
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d302      	bcc.n	8004b48 <HAL_I2C_IsDeviceReady+0xe4>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10f      	bne.n	8004b68 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2241      	movs	r2, #65	@ 0x41
 8004b4c:	2120      	movs	r1, #32
 8004b4e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b54:	2220      	movs	r2, #32
 8004b56:	431a      	orrs	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2240      	movs	r2, #64	@ 0x40
 8004b60:	2100      	movs	r1, #0
 8004b62:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e071      	b.n	8004c4c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	4013      	ands	r3, r2
 8004b72:	3b20      	subs	r3, #32
 8004b74:	425a      	negs	r2, r3
 8004b76:	4153      	adcs	r3, r2
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	231f      	movs	r3, #31
 8004b7c:	18fb      	adds	r3, r7, r3
 8004b7e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	2210      	movs	r2, #16
 8004b88:	4013      	ands	r3, r2
 8004b8a:	3b10      	subs	r3, #16
 8004b8c:	425a      	negs	r2, r3
 8004b8e:	4153      	adcs	r3, r2
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	231e      	movs	r3, #30
 8004b94:	18fb      	adds	r3, r7, r3
 8004b96:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004b98:	231f      	movs	r3, #31
 8004b9a:	18fb      	adds	r3, r7, r3
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d104      	bne.n	8004bac <HAL_I2C_IsDeviceReady+0x148>
 8004ba2:	231e      	movs	r3, #30
 8004ba4:	18fb      	adds	r3, r7, r3
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0bf      	beq.n	8004b2c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	2210      	movs	r2, #16
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b10      	cmp	r3, #16
 8004bb8:	d01a      	beq.n	8004bf0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	0013      	movs	r3, r2
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2120      	movs	r1, #32
 8004bc8:	f000 f8cc 	bl	8004d64 <I2C_WaitOnFlagUntilTimeout>
 8004bcc:	1e03      	subs	r3, r0, #0
 8004bce:	d001      	beq.n	8004bd4 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e03b      	b.n	8004c4c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2241      	movs	r2, #65	@ 0x41
 8004be0:	2120      	movs	r1, #32
 8004be2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2240      	movs	r2, #64	@ 0x40
 8004be8:	2100      	movs	r1, #0
 8004bea:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	e02d      	b.n	8004c4c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	0013      	movs	r3, r2
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2120      	movs	r1, #32
 8004bfe:	f000 f8b1 	bl	8004d64 <I2C_WaitOnFlagUntilTimeout>
 8004c02:	1e03      	subs	r3, r0, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e020      	b.n	8004c4c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2210      	movs	r2, #16
 8004c10:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2220      	movs	r2, #32
 8004c18:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d900      	bls.n	8004c2a <HAL_I2C_IsDeviceReady+0x1c6>
 8004c28:	e74d      	b.n	8004ac6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2241      	movs	r2, #65	@ 0x41
 8004c2e:	2120      	movs	r1, #32
 8004c30:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c36:	2220      	movs	r2, #32
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2240      	movs	r2, #64	@ 0x40
 8004c42:	2100      	movs	r1, #0
 8004c44:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8004c4a:	2302      	movs	r3, #2
  }
}
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b008      	add	sp, #32
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	02002000 	.word	0x02002000
 8004c58:	02002800 	.word	0x02002800

08004c5c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004c5c:	b5b0      	push	{r4, r5, r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	000c      	movs	r4, r1
 8004c66:	0010      	movs	r0, r2
 8004c68:	0019      	movs	r1, r3
 8004c6a:	250a      	movs	r5, #10
 8004c6c:	197b      	adds	r3, r7, r5
 8004c6e:	1c22      	adds	r2, r4, #0
 8004c70:	801a      	strh	r2, [r3, #0]
 8004c72:	2308      	movs	r3, #8
 8004c74:	18fb      	adds	r3, r7, r3
 8004c76:	1c02      	adds	r2, r0, #0
 8004c78:	801a      	strh	r2, [r3, #0]
 8004c7a:	1dbb      	adds	r3, r7, #6
 8004c7c:	1c0a      	adds	r2, r1, #0
 8004c7e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004c80:	1dbb      	adds	r3, r7, #6
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	197b      	adds	r3, r7, r5
 8004c88:	8819      	ldrh	r1, [r3, #0]
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	4b23      	ldr	r3, [pc, #140]	@ (8004d1c <I2C_RequestMemoryRead+0xc0>)
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	2300      	movs	r3, #0
 8004c92:	f000 fadf 	bl	8005254 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c98:	6a39      	ldr	r1, [r7, #32]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f000 f8b9 	bl	8004e14 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ca2:	1e03      	subs	r3, r0, #0
 8004ca4:	d001      	beq.n	8004caa <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e033      	b.n	8004d12 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004caa:	1dbb      	adds	r3, r7, #6
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d107      	bne.n	8004cc2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cc0:	e019      	b.n	8004cf6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004cc2:	2308      	movs	r3, #8
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	0a1b      	lsrs	r3, r3, #8
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd6:	6a39      	ldr	r1, [r7, #32]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	0018      	movs	r0, r3
 8004cdc:	f000 f89a 	bl	8004e14 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ce0:	1e03      	subs	r3, r0, #0
 8004ce2:	d001      	beq.n	8004ce8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e014      	b.n	8004d12 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ce8:	2308      	movs	r3, #8
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf6:	6a3a      	ldr	r2, [r7, #32]
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	0013      	movs	r3, r2
 8004d00:	2200      	movs	r2, #0
 8004d02:	2140      	movs	r1, #64	@ 0x40
 8004d04:	f000 f82e 	bl	8004d64 <I2C_WaitOnFlagUntilTimeout>
 8004d08:	1e03      	subs	r3, r0, #0
 8004d0a:	d001      	beq.n	8004d10 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	0018      	movs	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b004      	add	sp, #16
 8004d18:	bdb0      	pop	{r4, r5, r7, pc}
 8004d1a:	46c0      	nop			@ (mov r8, r8)
 8004d1c:	80002000 	.word	0x80002000

08004d20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	4013      	ands	r3, r2
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d103      	bne.n	8004d3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2201      	movs	r2, #1
 8004d46:	4013      	ands	r3, r2
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d007      	beq.n	8004d5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2101      	movs	r1, #1
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	619a      	str	r2, [r3, #24]
  }
}
 8004d5c:	46c0      	nop			@ (mov r8, r8)
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	b002      	add	sp, #8
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	603b      	str	r3, [r7, #0]
 8004d70:	1dfb      	adds	r3, r7, #7
 8004d72:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d74:	e03a      	b.n	8004dec <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	6839      	ldr	r1, [r7, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f000 f971 	bl	8005064 <I2C_IsErrorOccurred>
 8004d82:	1e03      	subs	r3, r0, #0
 8004d84:	d001      	beq.n	8004d8a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e040      	b.n	8004e0c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	d02d      	beq.n	8004dec <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d90:	f7fe f994 	bl	80030bc <HAL_GetTick>
 8004d94:	0002      	movs	r2, r0
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d302      	bcc.n	8004da6 <I2C_WaitOnFlagUntilTimeout+0x42>
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d122      	bne.n	8004dec <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	4013      	ands	r3, r2
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	425a      	negs	r2, r3
 8004db6:	4153      	adcs	r3, r2
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	001a      	movs	r2, r3
 8004dbc:	1dfb      	adds	r3, r7, #7
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d113      	bne.n	8004dec <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc8:	2220      	movs	r2, #32
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2241      	movs	r2, #65	@ 0x41
 8004dd4:	2120      	movs	r1, #32
 8004dd6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2242      	movs	r2, #66	@ 0x42
 8004ddc:	2100      	movs	r1, #0
 8004dde:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2240      	movs	r2, #64	@ 0x40
 8004de4:	2100      	movs	r1, #0
 8004de6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e00f      	b.n	8004e0c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	4013      	ands	r3, r2
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	425a      	negs	r2, r3
 8004dfc:	4153      	adcs	r3, r2
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	001a      	movs	r2, r3
 8004e02:	1dfb      	adds	r3, r7, #7
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d0b5      	beq.n	8004d76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b004      	add	sp, #16
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e20:	e032      	b.n	8004e88 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f000 f91b 	bl	8005064 <I2C_IsErrorOccurred>
 8004e2e:	1e03      	subs	r3, r0, #0
 8004e30:	d001      	beq.n	8004e36 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e030      	b.n	8004e98 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	d025      	beq.n	8004e88 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e3c:	f7fe f93e 	bl	80030bc <HAL_GetTick>
 8004e40:	0002      	movs	r2, r0
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d302      	bcc.n	8004e52 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d11a      	bne.n	8004e88 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d013      	beq.n	8004e88 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e64:	2220      	movs	r2, #32
 8004e66:	431a      	orrs	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2241      	movs	r2, #65	@ 0x41
 8004e70:	2120      	movs	r1, #32
 8004e72:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2242      	movs	r2, #66	@ 0x42
 8004e78:	2100      	movs	r1, #0
 8004e7a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2240      	movs	r2, #64	@ 0x40
 8004e80:	2100      	movs	r1, #0
 8004e82:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e007      	b.n	8004e98 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	4013      	ands	r3, r2
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d1c5      	bne.n	8004e22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	0018      	movs	r0, r3
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	b004      	add	sp, #16
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eac:	e02f      	b.n	8004f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	68b9      	ldr	r1, [r7, #8]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f000 f8d5 	bl	8005064 <I2C_IsErrorOccurred>
 8004eba:	1e03      	subs	r3, r0, #0
 8004ebc:	d001      	beq.n	8004ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e02d      	b.n	8004f1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec2:	f7fe f8fb 	bl	80030bc <HAL_GetTick>
 8004ec6:	0002      	movs	r2, r0
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d302      	bcc.n	8004ed8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d11a      	bne.n	8004f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	2b20      	cmp	r3, #32
 8004ee4:	d013      	beq.n	8004f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eea:	2220      	movs	r2, #32
 8004eec:	431a      	orrs	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2241      	movs	r2, #65	@ 0x41
 8004ef6:	2120      	movs	r1, #32
 8004ef8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2242      	movs	r2, #66	@ 0x42
 8004efe:	2100      	movs	r1, #0
 8004f00:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2240      	movs	r2, #64	@ 0x40
 8004f06:	2100      	movs	r1, #0
 8004f08:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e007      	b.n	8004f1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	2220      	movs	r2, #32
 8004f16:	4013      	ands	r3, r2
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	d1c8      	bne.n	8004eae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	0018      	movs	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	b004      	add	sp, #16
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f34:	2317      	movs	r3, #23
 8004f36:	18fb      	adds	r3, r7, r3
 8004f38:	2200      	movs	r2, #0
 8004f3a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004f3c:	e07b      	b.n	8005036 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	0018      	movs	r0, r3
 8004f46:	f000 f88d 	bl	8005064 <I2C_IsErrorOccurred>
 8004f4a:	1e03      	subs	r3, r0, #0
 8004f4c:	d003      	beq.n	8004f56 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004f4e:	2317      	movs	r3, #23
 8004f50:	18fb      	adds	r3, r7, r3
 8004f52:	2201      	movs	r2, #1
 8004f54:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d140      	bne.n	8004fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004f64:	2117      	movs	r1, #23
 8004f66:	187b      	adds	r3, r7, r1
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d13b      	bne.n	8004fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	2204      	movs	r2, #4
 8004f76:	4013      	ands	r3, r2
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d106      	bne.n	8004f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004f84:	187b      	adds	r3, r7, r1
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	2210      	movs	r2, #16
 8004f92:	4013      	ands	r3, r2
 8004f94:	2b10      	cmp	r3, #16
 8004f96:	d123      	bne.n	8004fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2210      	movs	r2, #16
 8004f9e:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2220      	movs	r2, #32
 8004fac:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4929      	ldr	r1, [pc, #164]	@ (8005060 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004fba:	400a      	ands	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2241      	movs	r2, #65	@ 0x41
 8004fc2:	2120      	movs	r1, #32
 8004fc4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2242      	movs	r2, #66	@ 0x42
 8004fca:	2100      	movs	r1, #0
 8004fcc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2240      	movs	r2, #64	@ 0x40
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004fd6:	2317      	movs	r3, #23
 8004fd8:	18fb      	adds	r3, r7, r3
 8004fda:	2201      	movs	r2, #1
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	e002      	b.n	8004fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004fe6:	f7fe f869 	bl	80030bc <HAL_GetTick>
 8004fea:	0002      	movs	r2, r0
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d302      	bcc.n	8004ffc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d11c      	bne.n	8005036 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004ffc:	2017      	movs	r0, #23
 8004ffe:	183b      	adds	r3, r7, r0
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d117      	bne.n	8005036 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	2204      	movs	r2, #4
 800500e:	4013      	ands	r3, r2
 8005010:	2b04      	cmp	r3, #4
 8005012:	d010      	beq.n	8005036 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005018:	2220      	movs	r2, #32
 800501a:	431a      	orrs	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2241      	movs	r2, #65	@ 0x41
 8005024:	2120      	movs	r1, #32
 8005026:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2240      	movs	r2, #64	@ 0x40
 800502c:	2100      	movs	r1, #0
 800502e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8005030:	183b      	adds	r3, r7, r0
 8005032:	2201      	movs	r2, #1
 8005034:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	2204      	movs	r2, #4
 800503e:	4013      	ands	r3, r2
 8005040:	2b04      	cmp	r3, #4
 8005042:	d005      	beq.n	8005050 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8005044:	2317      	movs	r3, #23
 8005046:	18fb      	adds	r3, r7, r3
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d100      	bne.n	8005050 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800504e:	e776      	b.n	8004f3e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8005050:	2317      	movs	r3, #23
 8005052:	18fb      	adds	r3, r7, r3
 8005054:	781b      	ldrb	r3, [r3, #0]
}
 8005056:	0018      	movs	r0, r3
 8005058:	46bd      	mov	sp, r7
 800505a:	b006      	add	sp, #24
 800505c:	bd80      	pop	{r7, pc}
 800505e:	46c0      	nop			@ (mov r8, r8)
 8005060:	fe00e800 	.word	0xfe00e800

08005064 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	@ 0x28
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005070:	2327      	movs	r3, #39	@ 0x27
 8005072:	18fb      	adds	r3, r7, r3
 8005074:	2200      	movs	r2, #0
 8005076:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	2210      	movs	r2, #16
 800508c:	4013      	ands	r3, r2
 800508e:	d100      	bne.n	8005092 <I2C_IsErrorOccurred+0x2e>
 8005090:	e079      	b.n	8005186 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2210      	movs	r2, #16
 8005098:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800509a:	e057      	b.n	800514c <I2C_IsErrorOccurred+0xe8>
 800509c:	2227      	movs	r2, #39	@ 0x27
 800509e:	18bb      	adds	r3, r7, r2
 80050a0:	18ba      	adds	r2, r7, r2
 80050a2:	7812      	ldrb	r2, [r2, #0]
 80050a4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	3301      	adds	r3, #1
 80050aa:	d04f      	beq.n	800514c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80050ac:	f7fe f806 	bl	80030bc <HAL_GetTick>
 80050b0:	0002      	movs	r2, r0
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d302      	bcc.n	80050c2 <I2C_IsErrorOccurred+0x5e>
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d144      	bne.n	800514c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	2380      	movs	r3, #128	@ 0x80
 80050ca:	01db      	lsls	r3, r3, #7
 80050cc:	4013      	ands	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80050d0:	2013      	movs	r0, #19
 80050d2:	183b      	adds	r3, r7, r0
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	2142      	movs	r1, #66	@ 0x42
 80050d8:	5c52      	ldrb	r2, [r2, r1]
 80050da:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699a      	ldr	r2, [r3, #24]
 80050e2:	2380      	movs	r3, #128	@ 0x80
 80050e4:	021b      	lsls	r3, r3, #8
 80050e6:	401a      	ands	r2, r3
 80050e8:	2380      	movs	r3, #128	@ 0x80
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d126      	bne.n	800513e <I2C_IsErrorOccurred+0xda>
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	2380      	movs	r3, #128	@ 0x80
 80050f4:	01db      	lsls	r3, r3, #7
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d021      	beq.n	800513e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80050fa:	183b      	adds	r3, r7, r0
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	2b20      	cmp	r3, #32
 8005100:	d01d      	beq.n	800513e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2180      	movs	r1, #128	@ 0x80
 800510e:	01c9      	lsls	r1, r1, #7
 8005110:	430a      	orrs	r2, r1
 8005112:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005114:	f7fd ffd2 	bl	80030bc <HAL_GetTick>
 8005118:	0003      	movs	r3, r0
 800511a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800511c:	e00f      	b.n	800513e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800511e:	f7fd ffcd 	bl	80030bc <HAL_GetTick>
 8005122:	0002      	movs	r2, r0
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b19      	cmp	r3, #25
 800512a:	d908      	bls.n	800513e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	2220      	movs	r2, #32
 8005130:	4313      	orrs	r3, r2
 8005132:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005134:	2327      	movs	r3, #39	@ 0x27
 8005136:	18fb      	adds	r3, r7, r3
 8005138:	2201      	movs	r2, #1
 800513a:	701a      	strb	r2, [r3, #0]

              break;
 800513c:	e006      	b.n	800514c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	2220      	movs	r2, #32
 8005146:	4013      	ands	r3, r2
 8005148:	2b20      	cmp	r3, #32
 800514a:	d1e8      	bne.n	800511e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	2220      	movs	r2, #32
 8005154:	4013      	ands	r3, r2
 8005156:	2b20      	cmp	r3, #32
 8005158:	d004      	beq.n	8005164 <I2C_IsErrorOccurred+0x100>
 800515a:	2327      	movs	r3, #39	@ 0x27
 800515c:	18fb      	adds	r3, r7, r3
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d09b      	beq.n	800509c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005164:	2327      	movs	r3, #39	@ 0x27
 8005166:	18fb      	adds	r3, r7, r3
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d103      	bne.n	8005176 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2220      	movs	r2, #32
 8005174:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	2204      	movs	r2, #4
 800517a:	4313      	orrs	r3, r2
 800517c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800517e:	2327      	movs	r3, #39	@ 0x27
 8005180:	18fb      	adds	r3, r7, r3
 8005182:	2201      	movs	r2, #1
 8005184:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	2380      	movs	r3, #128	@ 0x80
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	4013      	ands	r3, r2
 8005196:	d00c      	beq.n	80051b2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	2201      	movs	r2, #1
 800519c:	4313      	orrs	r3, r2
 800519e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2280      	movs	r2, #128	@ 0x80
 80051a6:	0052      	lsls	r2, r2, #1
 80051a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051aa:	2327      	movs	r3, #39	@ 0x27
 80051ac:	18fb      	adds	r3, r7, r3
 80051ae:	2201      	movs	r2, #1
 80051b0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	2380      	movs	r3, #128	@ 0x80
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	4013      	ands	r3, r2
 80051ba:	d00c      	beq.n	80051d6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	2208      	movs	r2, #8
 80051c0:	4313      	orrs	r3, r2
 80051c2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2280      	movs	r2, #128	@ 0x80
 80051ca:	00d2      	lsls	r2, r2, #3
 80051cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051ce:	2327      	movs	r3, #39	@ 0x27
 80051d0:	18fb      	adds	r3, r7, r3
 80051d2:	2201      	movs	r2, #1
 80051d4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	2380      	movs	r3, #128	@ 0x80
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4013      	ands	r3, r2
 80051de:	d00c      	beq.n	80051fa <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	2202      	movs	r2, #2
 80051e4:	4313      	orrs	r3, r2
 80051e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2280      	movs	r2, #128	@ 0x80
 80051ee:	0092      	lsls	r2, r2, #2
 80051f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051f2:	2327      	movs	r3, #39	@ 0x27
 80051f4:	18fb      	adds	r3, r7, r3
 80051f6:	2201      	movs	r2, #1
 80051f8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80051fa:	2327      	movs	r3, #39	@ 0x27
 80051fc:	18fb      	adds	r3, r7, r3
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01d      	beq.n	8005240 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	0018      	movs	r0, r3
 8005208:	f7ff fd8a 	bl	8004d20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	490e      	ldr	r1, [pc, #56]	@ (8005250 <I2C_IsErrorOccurred+0x1ec>)
 8005218:	400a      	ands	r2, r1
 800521a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	431a      	orrs	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2241      	movs	r2, #65	@ 0x41
 800522c:	2120      	movs	r1, #32
 800522e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2242      	movs	r2, #66	@ 0x42
 8005234:	2100      	movs	r1, #0
 8005236:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2240      	movs	r2, #64	@ 0x40
 800523c:	2100      	movs	r1, #0
 800523e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005240:	2327      	movs	r3, #39	@ 0x27
 8005242:	18fb      	adds	r3, r7, r3
 8005244:	781b      	ldrb	r3, [r3, #0]
}
 8005246:	0018      	movs	r0, r3
 8005248:	46bd      	mov	sp, r7
 800524a:	b00a      	add	sp, #40	@ 0x28
 800524c:	bd80      	pop	{r7, pc}
 800524e:	46c0      	nop			@ (mov r8, r8)
 8005250:	fe00e800 	.word	0xfe00e800

08005254 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005254:	b590      	push	{r4, r7, lr}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	0008      	movs	r0, r1
 800525e:	0011      	movs	r1, r2
 8005260:	607b      	str	r3, [r7, #4]
 8005262:	240a      	movs	r4, #10
 8005264:	193b      	adds	r3, r7, r4
 8005266:	1c02      	adds	r2, r0, #0
 8005268:	801a      	strh	r2, [r3, #0]
 800526a:	2009      	movs	r0, #9
 800526c:	183b      	adds	r3, r7, r0
 800526e:	1c0a      	adds	r2, r1, #0
 8005270:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005272:	193b      	adds	r3, r7, r4
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	059b      	lsls	r3, r3, #22
 8005278:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800527a:	183b      	adds	r3, r7, r0
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	0419      	lsls	r1, r3, #16
 8005280:	23ff      	movs	r3, #255	@ 0xff
 8005282:	041b      	lsls	r3, r3, #16
 8005284:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005286:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800528c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528e:	4313      	orrs	r3, r2
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	085b      	lsrs	r3, r3, #1
 8005294:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800529e:	0d51      	lsrs	r1, r2, #21
 80052a0:	2280      	movs	r2, #128	@ 0x80
 80052a2:	00d2      	lsls	r2, r2, #3
 80052a4:	400a      	ands	r2, r1
 80052a6:	4907      	ldr	r1, [pc, #28]	@ (80052c4 <I2C_TransferConfig+0x70>)
 80052a8:	430a      	orrs	r2, r1
 80052aa:	43d2      	mvns	r2, r2
 80052ac:	401a      	ands	r2, r3
 80052ae:	0011      	movs	r1, r2
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80052ba:	46c0      	nop			@ (mov r8, r8)
 80052bc:	46bd      	mov	sp, r7
 80052be:	b007      	add	sp, #28
 80052c0:	bd90      	pop	{r4, r7, pc}
 80052c2:	46c0      	nop			@ (mov r8, r8)
 80052c4:	03ff63ff 	.word	0x03ff63ff

080052c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2241      	movs	r2, #65	@ 0x41
 80052d6:	5c9b      	ldrb	r3, [r3, r2]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b20      	cmp	r3, #32
 80052dc:	d138      	bne.n	8005350 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2240      	movs	r2, #64	@ 0x40
 80052e2:	5c9b      	ldrb	r3, [r3, r2]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e032      	b.n	8005352 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2240      	movs	r2, #64	@ 0x40
 80052f0:	2101      	movs	r1, #1
 80052f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2241      	movs	r2, #65	@ 0x41
 80052f8:	2124      	movs	r1, #36	@ 0x24
 80052fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2101      	movs	r1, #1
 8005308:	438a      	bics	r2, r1
 800530a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4911      	ldr	r1, [pc, #68]	@ (800535c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005318:	400a      	ands	r2, r1
 800531a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6819      	ldr	r1, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2101      	movs	r1, #1
 8005338:	430a      	orrs	r2, r1
 800533a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2241      	movs	r2, #65	@ 0x41
 8005340:	2120      	movs	r1, #32
 8005342:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2240      	movs	r2, #64	@ 0x40
 8005348:	2100      	movs	r1, #0
 800534a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800534c:	2300      	movs	r3, #0
 800534e:	e000      	b.n	8005352 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005350:	2302      	movs	r3, #2
  }
}
 8005352:	0018      	movs	r0, r3
 8005354:	46bd      	mov	sp, r7
 8005356:	b002      	add	sp, #8
 8005358:	bd80      	pop	{r7, pc}
 800535a:	46c0      	nop			@ (mov r8, r8)
 800535c:	ffffefff 	.word	0xffffefff

08005360 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2241      	movs	r2, #65	@ 0x41
 800536e:	5c9b      	ldrb	r3, [r3, r2]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b20      	cmp	r3, #32
 8005374:	d139      	bne.n	80053ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2240      	movs	r2, #64	@ 0x40
 800537a:	5c9b      	ldrb	r3, [r3, r2]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005380:	2302      	movs	r3, #2
 8005382:	e033      	b.n	80053ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2240      	movs	r2, #64	@ 0x40
 8005388:	2101      	movs	r1, #1
 800538a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2241      	movs	r2, #65	@ 0x41
 8005390:	2124      	movs	r1, #36	@ 0x24
 8005392:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2101      	movs	r1, #1
 80053a0:	438a      	bics	r2, r1
 80053a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4a11      	ldr	r2, [pc, #68]	@ (80053f4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	021b      	lsls	r3, r3, #8
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2101      	movs	r1, #1
 80053d2:	430a      	orrs	r2, r1
 80053d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2241      	movs	r2, #65	@ 0x41
 80053da:	2120      	movs	r1, #32
 80053dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2240      	movs	r2, #64	@ 0x40
 80053e2:	2100      	movs	r1, #0
 80053e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	e000      	b.n	80053ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053ea:	2302      	movs	r3, #2
  }
}
 80053ec:	0018      	movs	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b004      	add	sp, #16
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	fffff0ff 	.word	0xfffff0ff

080053f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005400:	4b19      	ldr	r3, [pc, #100]	@ (8005468 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a19      	ldr	r2, [pc, #100]	@ (800546c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005406:	4013      	ands	r3, r2
 8005408:	0019      	movs	r1, r3
 800540a:	4b17      	ldr	r3, [pc, #92]	@ (8005468 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	430a      	orrs	r2, r1
 8005410:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	2380      	movs	r3, #128	@ 0x80
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	429a      	cmp	r2, r3
 800541a:	d11f      	bne.n	800545c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800541c:	4b14      	ldr	r3, [pc, #80]	@ (8005470 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	0013      	movs	r3, r2
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	189b      	adds	r3, r3, r2
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	4912      	ldr	r1, [pc, #72]	@ (8005474 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800542a:	0018      	movs	r0, r3
 800542c:	f7fa fe6c 	bl	8000108 <__udivsi3>
 8005430:	0003      	movs	r3, r0
 8005432:	3301      	adds	r3, #1
 8005434:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005436:	e008      	b.n	800544a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3b01      	subs	r3, #1
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	e001      	b.n	800544a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e009      	b.n	800545e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800544a:	4b07      	ldr	r3, [pc, #28]	@ (8005468 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800544c:	695a      	ldr	r2, [r3, #20]
 800544e:	2380      	movs	r3, #128	@ 0x80
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	401a      	ands	r2, r3
 8005454:	2380      	movs	r3, #128	@ 0x80
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	429a      	cmp	r2, r3
 800545a:	d0ed      	beq.n	8005438 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	0018      	movs	r0, r3
 8005460:	46bd      	mov	sp, r7
 8005462:	b004      	add	sp, #16
 8005464:	bd80      	pop	{r7, pc}
 8005466:	46c0      	nop			@ (mov r8, r8)
 8005468:	40007000 	.word	0x40007000
 800546c:	fffff9ff 	.word	0xfffff9ff
 8005470:	20000000 	.word	0x20000000
 8005474:	000f4240 	.word	0x000f4240

08005478 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b088      	sub	sp, #32
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d102      	bne.n	800548c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	f000 fb50 	bl	8005b2c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2201      	movs	r2, #1
 8005492:	4013      	ands	r3, r2
 8005494:	d100      	bne.n	8005498 <HAL_RCC_OscConfig+0x20>
 8005496:	e07c      	b.n	8005592 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005498:	4bc3      	ldr	r3, [pc, #780]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2238      	movs	r2, #56	@ 0x38
 800549e:	4013      	ands	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054a2:	4bc1      	ldr	r3, [pc, #772]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	2203      	movs	r2, #3
 80054a8:	4013      	ands	r3, r2
 80054aa:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	2b10      	cmp	r3, #16
 80054b0:	d102      	bne.n	80054b8 <HAL_RCC_OscConfig+0x40>
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b03      	cmp	r3, #3
 80054b6:	d002      	beq.n	80054be <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d10b      	bne.n	80054d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054be:	4bba      	ldr	r3, [pc, #744]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	2380      	movs	r3, #128	@ 0x80
 80054c4:	029b      	lsls	r3, r3, #10
 80054c6:	4013      	ands	r3, r2
 80054c8:	d062      	beq.n	8005590 <HAL_RCC_OscConfig+0x118>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d15e      	bne.n	8005590 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e32a      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	2380      	movs	r3, #128	@ 0x80
 80054dc:	025b      	lsls	r3, r3, #9
 80054de:	429a      	cmp	r2, r3
 80054e0:	d107      	bne.n	80054f2 <HAL_RCC_OscConfig+0x7a>
 80054e2:	4bb1      	ldr	r3, [pc, #708]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	4bb0      	ldr	r3, [pc, #704]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 80054e8:	2180      	movs	r1, #128	@ 0x80
 80054ea:	0249      	lsls	r1, r1, #9
 80054ec:	430a      	orrs	r2, r1
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	e020      	b.n	8005534 <HAL_RCC_OscConfig+0xbc>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	23a0      	movs	r3, #160	@ 0xa0
 80054f8:	02db      	lsls	r3, r3, #11
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d10e      	bne.n	800551c <HAL_RCC_OscConfig+0xa4>
 80054fe:	4baa      	ldr	r3, [pc, #680]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4ba9      	ldr	r3, [pc, #676]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 8005504:	2180      	movs	r1, #128	@ 0x80
 8005506:	02c9      	lsls	r1, r1, #11
 8005508:	430a      	orrs	r2, r1
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	4ba6      	ldr	r3, [pc, #664]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	4ba5      	ldr	r3, [pc, #660]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 8005512:	2180      	movs	r1, #128	@ 0x80
 8005514:	0249      	lsls	r1, r1, #9
 8005516:	430a      	orrs	r2, r1
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	e00b      	b.n	8005534 <HAL_RCC_OscConfig+0xbc>
 800551c:	4ba2      	ldr	r3, [pc, #648]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	4ba1      	ldr	r3, [pc, #644]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 8005522:	49a2      	ldr	r1, [pc, #648]	@ (80057ac <HAL_RCC_OscConfig+0x334>)
 8005524:	400a      	ands	r2, r1
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	4b9f      	ldr	r3, [pc, #636]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	4b9e      	ldr	r3, [pc, #632]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 800552e:	49a0      	ldr	r1, [pc, #640]	@ (80057b0 <HAL_RCC_OscConfig+0x338>)
 8005530:	400a      	ands	r2, r1
 8005532:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d014      	beq.n	8005566 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553c:	f7fd fdbe 	bl	80030bc <HAL_GetTick>
 8005540:	0003      	movs	r3, r0
 8005542:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005546:	f7fd fdb9 	bl	80030bc <HAL_GetTick>
 800554a:	0002      	movs	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b64      	cmp	r3, #100	@ 0x64
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e2e9      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005558:	4b93      	ldr	r3, [pc, #588]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	2380      	movs	r3, #128	@ 0x80
 800555e:	029b      	lsls	r3, r3, #10
 8005560:	4013      	ands	r3, r2
 8005562:	d0f0      	beq.n	8005546 <HAL_RCC_OscConfig+0xce>
 8005564:	e015      	b.n	8005592 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005566:	f7fd fda9 	bl	80030bc <HAL_GetTick>
 800556a:	0003      	movs	r3, r0
 800556c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005570:	f7fd fda4 	bl	80030bc <HAL_GetTick>
 8005574:	0002      	movs	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b64      	cmp	r3, #100	@ 0x64
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e2d4      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005582:	4b89      	ldr	r3, [pc, #548]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	2380      	movs	r3, #128	@ 0x80
 8005588:	029b      	lsls	r3, r3, #10
 800558a:	4013      	ands	r3, r2
 800558c:	d1f0      	bne.n	8005570 <HAL_RCC_OscConfig+0xf8>
 800558e:	e000      	b.n	8005592 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005590:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2202      	movs	r2, #2
 8005598:	4013      	ands	r3, r2
 800559a:	d100      	bne.n	800559e <HAL_RCC_OscConfig+0x126>
 800559c:	e099      	b.n	80056d2 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800559e:	4b82      	ldr	r3, [pc, #520]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	2238      	movs	r2, #56	@ 0x38
 80055a4:	4013      	ands	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055a8:	4b7f      	ldr	r3, [pc, #508]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	2203      	movs	r2, #3
 80055ae:	4013      	ands	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	2b10      	cmp	r3, #16
 80055b6:	d102      	bne.n	80055be <HAL_RCC_OscConfig+0x146>
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d002      	beq.n	80055c4 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d135      	bne.n	8005630 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055c4:	4b78      	ldr	r3, [pc, #480]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	2380      	movs	r3, #128	@ 0x80
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	4013      	ands	r3, r2
 80055ce:	d005      	beq.n	80055dc <HAL_RCC_OscConfig+0x164>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e2a7      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055dc:	4b72      	ldr	r3, [pc, #456]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	4a74      	ldr	r2, [pc, #464]	@ (80057b4 <HAL_RCC_OscConfig+0x33c>)
 80055e2:	4013      	ands	r3, r2
 80055e4:	0019      	movs	r1, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	021a      	lsls	r2, r3, #8
 80055ec:	4b6e      	ldr	r3, [pc, #440]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 80055ee:	430a      	orrs	r2, r1
 80055f0:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d112      	bne.n	800561e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80055f8:	4b6b      	ldr	r3, [pc, #428]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a6e      	ldr	r2, [pc, #440]	@ (80057b8 <HAL_RCC_OscConfig+0x340>)
 80055fe:	4013      	ands	r3, r2
 8005600:	0019      	movs	r1, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691a      	ldr	r2, [r3, #16]
 8005606:	4b68      	ldr	r3, [pc, #416]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 8005608:	430a      	orrs	r2, r1
 800560a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800560c:	4b66      	ldr	r3, [pc, #408]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	0adb      	lsrs	r3, r3, #11
 8005612:	2207      	movs	r2, #7
 8005614:	4013      	ands	r3, r2
 8005616:	4a69      	ldr	r2, [pc, #420]	@ (80057bc <HAL_RCC_OscConfig+0x344>)
 8005618:	40da      	lsrs	r2, r3
 800561a:	4b69      	ldr	r3, [pc, #420]	@ (80057c0 <HAL_RCC_OscConfig+0x348>)
 800561c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800561e:	4b69      	ldr	r3, [pc, #420]	@ (80057c4 <HAL_RCC_OscConfig+0x34c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	0018      	movs	r0, r3
 8005624:	f7fd fcee 	bl	8003004 <HAL_InitTick>
 8005628:	1e03      	subs	r3, r0, #0
 800562a:	d051      	beq.n	80056d0 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e27d      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d030      	beq.n	800569a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005638:	4b5b      	ldr	r3, [pc, #364]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a5e      	ldr	r2, [pc, #376]	@ (80057b8 <HAL_RCC_OscConfig+0x340>)
 800563e:	4013      	ands	r3, r2
 8005640:	0019      	movs	r1, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	4b58      	ldr	r3, [pc, #352]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 8005648:	430a      	orrs	r2, r1
 800564a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800564c:	4b56      	ldr	r3, [pc, #344]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	4b55      	ldr	r3, [pc, #340]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 8005652:	2180      	movs	r1, #128	@ 0x80
 8005654:	0049      	lsls	r1, r1, #1
 8005656:	430a      	orrs	r2, r1
 8005658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565a:	f7fd fd2f 	bl	80030bc <HAL_GetTick>
 800565e:	0003      	movs	r3, r0
 8005660:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005664:	f7fd fd2a 	bl	80030bc <HAL_GetTick>
 8005668:	0002      	movs	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e25a      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005676:	4b4c      	ldr	r3, [pc, #304]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	2380      	movs	r3, #128	@ 0x80
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	4013      	ands	r3, r2
 8005680:	d0f0      	beq.n	8005664 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005682:	4b49      	ldr	r3, [pc, #292]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	4a4b      	ldr	r2, [pc, #300]	@ (80057b4 <HAL_RCC_OscConfig+0x33c>)
 8005688:	4013      	ands	r3, r2
 800568a:	0019      	movs	r1, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	021a      	lsls	r2, r3, #8
 8005692:	4b45      	ldr	r3, [pc, #276]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 8005694:	430a      	orrs	r2, r1
 8005696:	605a      	str	r2, [r3, #4]
 8005698:	e01b      	b.n	80056d2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800569a:	4b43      	ldr	r3, [pc, #268]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	4b42      	ldr	r3, [pc, #264]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 80056a0:	4949      	ldr	r1, [pc, #292]	@ (80057c8 <HAL_RCC_OscConfig+0x350>)
 80056a2:	400a      	ands	r2, r1
 80056a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a6:	f7fd fd09 	bl	80030bc <HAL_GetTick>
 80056aa:	0003      	movs	r3, r0
 80056ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056b0:	f7fd fd04 	bl	80030bc <HAL_GetTick>
 80056b4:	0002      	movs	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e234      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056c2:	4b39      	ldr	r3, [pc, #228]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	2380      	movs	r3, #128	@ 0x80
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	4013      	ands	r3, r2
 80056cc:	d1f0      	bne.n	80056b0 <HAL_RCC_OscConfig+0x238>
 80056ce:	e000      	b.n	80056d2 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056d0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2208      	movs	r2, #8
 80056d8:	4013      	ands	r3, r2
 80056da:	d047      	beq.n	800576c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80056dc:	4b32      	ldr	r3, [pc, #200]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	2238      	movs	r2, #56	@ 0x38
 80056e2:	4013      	ands	r3, r2
 80056e4:	2b18      	cmp	r3, #24
 80056e6:	d10a      	bne.n	80056fe <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80056e8:	4b2f      	ldr	r3, [pc, #188]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 80056ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ec:	2202      	movs	r2, #2
 80056ee:	4013      	ands	r3, r2
 80056f0:	d03c      	beq.n	800576c <HAL_RCC_OscConfig+0x2f4>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d138      	bne.n	800576c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e216      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d019      	beq.n	800573a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005706:	4b28      	ldr	r3, [pc, #160]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 8005708:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800570a:	4b27      	ldr	r3, [pc, #156]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 800570c:	2101      	movs	r1, #1
 800570e:	430a      	orrs	r2, r1
 8005710:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005712:	f7fd fcd3 	bl	80030bc <HAL_GetTick>
 8005716:	0003      	movs	r3, r0
 8005718:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800571a:	e008      	b.n	800572e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800571c:	f7fd fcce 	bl	80030bc <HAL_GetTick>
 8005720:	0002      	movs	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e1fe      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800572e:	4b1e      	ldr	r3, [pc, #120]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 8005730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005732:	2202      	movs	r2, #2
 8005734:	4013      	ands	r3, r2
 8005736:	d0f1      	beq.n	800571c <HAL_RCC_OscConfig+0x2a4>
 8005738:	e018      	b.n	800576c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800573a:	4b1b      	ldr	r3, [pc, #108]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 800573c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800573e:	4b1a      	ldr	r3, [pc, #104]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 8005740:	2101      	movs	r1, #1
 8005742:	438a      	bics	r2, r1
 8005744:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005746:	f7fd fcb9 	bl	80030bc <HAL_GetTick>
 800574a:	0003      	movs	r3, r0
 800574c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800574e:	e008      	b.n	8005762 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005750:	f7fd fcb4 	bl	80030bc <HAL_GetTick>
 8005754:	0002      	movs	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e1e4      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005762:	4b11      	ldr	r3, [pc, #68]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 8005764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005766:	2202      	movs	r2, #2
 8005768:	4013      	ands	r3, r2
 800576a:	d1f1      	bne.n	8005750 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2204      	movs	r2, #4
 8005772:	4013      	ands	r3, r2
 8005774:	d100      	bne.n	8005778 <HAL_RCC_OscConfig+0x300>
 8005776:	e0c7      	b.n	8005908 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005778:	231f      	movs	r3, #31
 800577a:	18fb      	adds	r3, r7, r3
 800577c:	2200      	movs	r2, #0
 800577e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005780:	4b09      	ldr	r3, [pc, #36]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2238      	movs	r2, #56	@ 0x38
 8005786:	4013      	ands	r3, r2
 8005788:	2b20      	cmp	r3, #32
 800578a:	d11f      	bne.n	80057cc <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800578c:	4b06      	ldr	r3, [pc, #24]	@ (80057a8 <HAL_RCC_OscConfig+0x330>)
 800578e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005790:	2202      	movs	r2, #2
 8005792:	4013      	ands	r3, r2
 8005794:	d100      	bne.n	8005798 <HAL_RCC_OscConfig+0x320>
 8005796:	e0b7      	b.n	8005908 <HAL_RCC_OscConfig+0x490>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d000      	beq.n	80057a2 <HAL_RCC_OscConfig+0x32a>
 80057a0:	e0b2      	b.n	8005908 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e1c2      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
 80057a6:	46c0      	nop			@ (mov r8, r8)
 80057a8:	40021000 	.word	0x40021000
 80057ac:	fffeffff 	.word	0xfffeffff
 80057b0:	fffbffff 	.word	0xfffbffff
 80057b4:	ffff80ff 	.word	0xffff80ff
 80057b8:	ffffc7ff 	.word	0xffffc7ff
 80057bc:	00f42400 	.word	0x00f42400
 80057c0:	20000000 	.word	0x20000000
 80057c4:	20000004 	.word	0x20000004
 80057c8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057cc:	4bb5      	ldr	r3, [pc, #724]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 80057ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057d0:	2380      	movs	r3, #128	@ 0x80
 80057d2:	055b      	lsls	r3, r3, #21
 80057d4:	4013      	ands	r3, r2
 80057d6:	d101      	bne.n	80057dc <HAL_RCC_OscConfig+0x364>
 80057d8:	2301      	movs	r3, #1
 80057da:	e000      	b.n	80057de <HAL_RCC_OscConfig+0x366>
 80057dc:	2300      	movs	r3, #0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d011      	beq.n	8005806 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80057e2:	4bb0      	ldr	r3, [pc, #704]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 80057e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057e6:	4baf      	ldr	r3, [pc, #700]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 80057e8:	2180      	movs	r1, #128	@ 0x80
 80057ea:	0549      	lsls	r1, r1, #21
 80057ec:	430a      	orrs	r2, r1
 80057ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80057f0:	4bac      	ldr	r3, [pc, #688]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 80057f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057f4:	2380      	movs	r3, #128	@ 0x80
 80057f6:	055b      	lsls	r3, r3, #21
 80057f8:	4013      	ands	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80057fe:	231f      	movs	r3, #31
 8005800:	18fb      	adds	r3, r7, r3
 8005802:	2201      	movs	r2, #1
 8005804:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005806:	4ba8      	ldr	r3, [pc, #672]	@ (8005aa8 <HAL_RCC_OscConfig+0x630>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	2380      	movs	r3, #128	@ 0x80
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	4013      	ands	r3, r2
 8005810:	d11a      	bne.n	8005848 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005812:	4ba5      	ldr	r3, [pc, #660]	@ (8005aa8 <HAL_RCC_OscConfig+0x630>)
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	4ba4      	ldr	r3, [pc, #656]	@ (8005aa8 <HAL_RCC_OscConfig+0x630>)
 8005818:	2180      	movs	r1, #128	@ 0x80
 800581a:	0049      	lsls	r1, r1, #1
 800581c:	430a      	orrs	r2, r1
 800581e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005820:	f7fd fc4c 	bl	80030bc <HAL_GetTick>
 8005824:	0003      	movs	r3, r0
 8005826:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005828:	e008      	b.n	800583c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800582a:	f7fd fc47 	bl	80030bc <HAL_GetTick>
 800582e:	0002      	movs	r2, r0
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e177      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800583c:	4b9a      	ldr	r3, [pc, #616]	@ (8005aa8 <HAL_RCC_OscConfig+0x630>)
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	2380      	movs	r3, #128	@ 0x80
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	4013      	ands	r3, r2
 8005846:	d0f0      	beq.n	800582a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d106      	bne.n	800585e <HAL_RCC_OscConfig+0x3e6>
 8005850:	4b94      	ldr	r3, [pc, #592]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005852:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005854:	4b93      	ldr	r3, [pc, #588]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005856:	2101      	movs	r1, #1
 8005858:	430a      	orrs	r2, r1
 800585a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800585c:	e01c      	b.n	8005898 <HAL_RCC_OscConfig+0x420>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	2b05      	cmp	r3, #5
 8005864:	d10c      	bne.n	8005880 <HAL_RCC_OscConfig+0x408>
 8005866:	4b8f      	ldr	r3, [pc, #572]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005868:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800586a:	4b8e      	ldr	r3, [pc, #568]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 800586c:	2104      	movs	r1, #4
 800586e:	430a      	orrs	r2, r1
 8005870:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005872:	4b8c      	ldr	r3, [pc, #560]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005874:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005876:	4b8b      	ldr	r3, [pc, #556]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005878:	2101      	movs	r1, #1
 800587a:	430a      	orrs	r2, r1
 800587c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800587e:	e00b      	b.n	8005898 <HAL_RCC_OscConfig+0x420>
 8005880:	4b88      	ldr	r3, [pc, #544]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005882:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005884:	4b87      	ldr	r3, [pc, #540]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005886:	2101      	movs	r1, #1
 8005888:	438a      	bics	r2, r1
 800588a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800588c:	4b85      	ldr	r3, [pc, #532]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 800588e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005890:	4b84      	ldr	r3, [pc, #528]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005892:	2104      	movs	r1, #4
 8005894:	438a      	bics	r2, r1
 8005896:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d014      	beq.n	80058ca <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a0:	f7fd fc0c 	bl	80030bc <HAL_GetTick>
 80058a4:	0003      	movs	r3, r0
 80058a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058a8:	e009      	b.n	80058be <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058aa:	f7fd fc07 	bl	80030bc <HAL_GetTick>
 80058ae:	0002      	movs	r2, r0
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	4a7d      	ldr	r2, [pc, #500]	@ (8005aac <HAL_RCC_OscConfig+0x634>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e136      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058be:	4b79      	ldr	r3, [pc, #484]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 80058c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c2:	2202      	movs	r2, #2
 80058c4:	4013      	ands	r3, r2
 80058c6:	d0f0      	beq.n	80058aa <HAL_RCC_OscConfig+0x432>
 80058c8:	e013      	b.n	80058f2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ca:	f7fd fbf7 	bl	80030bc <HAL_GetTick>
 80058ce:	0003      	movs	r3, r0
 80058d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058d2:	e009      	b.n	80058e8 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d4:	f7fd fbf2 	bl	80030bc <HAL_GetTick>
 80058d8:	0002      	movs	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	4a73      	ldr	r2, [pc, #460]	@ (8005aac <HAL_RCC_OscConfig+0x634>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e121      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058e8:	4b6e      	ldr	r3, [pc, #440]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 80058ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ec:	2202      	movs	r2, #2
 80058ee:	4013      	ands	r3, r2
 80058f0:	d1f0      	bne.n	80058d4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80058f2:	231f      	movs	r3, #31
 80058f4:	18fb      	adds	r3, r7, r3
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d105      	bne.n	8005908 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80058fc:	4b69      	ldr	r3, [pc, #420]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 80058fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005900:	4b68      	ldr	r3, [pc, #416]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005902:	496b      	ldr	r1, [pc, #428]	@ (8005ab0 <HAL_RCC_OscConfig+0x638>)
 8005904:	400a      	ands	r2, r1
 8005906:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2220      	movs	r2, #32
 800590e:	4013      	ands	r3, r2
 8005910:	d039      	beq.n	8005986 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d01b      	beq.n	8005952 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800591a:	4b62      	ldr	r3, [pc, #392]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	4b61      	ldr	r3, [pc, #388]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005920:	2180      	movs	r1, #128	@ 0x80
 8005922:	03c9      	lsls	r1, r1, #15
 8005924:	430a      	orrs	r2, r1
 8005926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005928:	f7fd fbc8 	bl	80030bc <HAL_GetTick>
 800592c:	0003      	movs	r3, r0
 800592e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005930:	e008      	b.n	8005944 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005932:	f7fd fbc3 	bl	80030bc <HAL_GetTick>
 8005936:	0002      	movs	r2, r0
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d901      	bls.n	8005944 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e0f3      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005944:	4b57      	ldr	r3, [pc, #348]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	2380      	movs	r3, #128	@ 0x80
 800594a:	041b      	lsls	r3, r3, #16
 800594c:	4013      	ands	r3, r2
 800594e:	d0f0      	beq.n	8005932 <HAL_RCC_OscConfig+0x4ba>
 8005950:	e019      	b.n	8005986 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005952:	4b54      	ldr	r3, [pc, #336]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	4b53      	ldr	r3, [pc, #332]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005958:	4956      	ldr	r1, [pc, #344]	@ (8005ab4 <HAL_RCC_OscConfig+0x63c>)
 800595a:	400a      	ands	r2, r1
 800595c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595e:	f7fd fbad 	bl	80030bc <HAL_GetTick>
 8005962:	0003      	movs	r3, r0
 8005964:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005966:	e008      	b.n	800597a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005968:	f7fd fba8 	bl	80030bc <HAL_GetTick>
 800596c:	0002      	movs	r2, r0
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e0d8      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800597a:	4b4a      	ldr	r3, [pc, #296]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	2380      	movs	r3, #128	@ 0x80
 8005980:	041b      	lsls	r3, r3, #16
 8005982:	4013      	ands	r3, r2
 8005984:	d1f0      	bne.n	8005968 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d100      	bne.n	8005990 <HAL_RCC_OscConfig+0x518>
 800598e:	e0cc      	b.n	8005b2a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005990:	4b44      	ldr	r3, [pc, #272]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	2238      	movs	r2, #56	@ 0x38
 8005996:	4013      	ands	r3, r2
 8005998:	2b10      	cmp	r3, #16
 800599a:	d100      	bne.n	800599e <HAL_RCC_OscConfig+0x526>
 800599c:	e07b      	b.n	8005a96 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d156      	bne.n	8005a54 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a6:	4b3f      	ldr	r3, [pc, #252]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	4b3e      	ldr	r3, [pc, #248]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 80059ac:	4942      	ldr	r1, [pc, #264]	@ (8005ab8 <HAL_RCC_OscConfig+0x640>)
 80059ae:	400a      	ands	r2, r1
 80059b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b2:	f7fd fb83 	bl	80030bc <HAL_GetTick>
 80059b6:	0003      	movs	r3, r0
 80059b8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059bc:	f7fd fb7e 	bl	80030bc <HAL_GetTick>
 80059c0:	0002      	movs	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e0ae      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059ce:	4b35      	ldr	r3, [pc, #212]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	2380      	movs	r3, #128	@ 0x80
 80059d4:	049b      	lsls	r3, r3, #18
 80059d6:	4013      	ands	r3, r2
 80059d8:	d1f0      	bne.n	80059bc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059da:	4b32      	ldr	r3, [pc, #200]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	4a37      	ldr	r2, [pc, #220]	@ (8005abc <HAL_RCC_OscConfig+0x644>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	0019      	movs	r1, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f2:	021b      	lsls	r3, r3, #8
 80059f4:	431a      	orrs	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a06:	431a      	orrs	r2, r3
 8005a08:	4b26      	ldr	r3, [pc, #152]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a0e:	4b25      	ldr	r3, [pc, #148]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	4b24      	ldr	r3, [pc, #144]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005a14:	2180      	movs	r1, #128	@ 0x80
 8005a16:	0449      	lsls	r1, r1, #17
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005a1c:	4b21      	ldr	r3, [pc, #132]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	4b20      	ldr	r3, [pc, #128]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005a22:	2180      	movs	r1, #128	@ 0x80
 8005a24:	0549      	lsls	r1, r1, #21
 8005a26:	430a      	orrs	r2, r1
 8005a28:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2a:	f7fd fb47 	bl	80030bc <HAL_GetTick>
 8005a2e:	0003      	movs	r3, r0
 8005a30:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a34:	f7fd fb42 	bl	80030bc <HAL_GetTick>
 8005a38:	0002      	movs	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e072      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a46:	4b17      	ldr	r3, [pc, #92]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	2380      	movs	r3, #128	@ 0x80
 8005a4c:	049b      	lsls	r3, r3, #18
 8005a4e:	4013      	ands	r3, r2
 8005a50:	d0f0      	beq.n	8005a34 <HAL_RCC_OscConfig+0x5bc>
 8005a52:	e06a      	b.n	8005b2a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a54:	4b13      	ldr	r3, [pc, #76]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	4b12      	ldr	r3, [pc, #72]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005a5a:	4917      	ldr	r1, [pc, #92]	@ (8005ab8 <HAL_RCC_OscConfig+0x640>)
 8005a5c:	400a      	ands	r2, r1
 8005a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a60:	f7fd fb2c 	bl	80030bc <HAL_GetTick>
 8005a64:	0003      	movs	r3, r0
 8005a66:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a6a:	f7fd fb27 	bl	80030bc <HAL_GetTick>
 8005a6e:	0002      	movs	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e057      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a7c:	4b09      	ldr	r3, [pc, #36]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	2380      	movs	r3, #128	@ 0x80
 8005a82:	049b      	lsls	r3, r3, #18
 8005a84:	4013      	ands	r3, r2
 8005a86:	d1f0      	bne.n	8005a6a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005a88:	4b06      	ldr	r3, [pc, #24]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	4b05      	ldr	r3, [pc, #20]	@ (8005aa4 <HAL_RCC_OscConfig+0x62c>)
 8005a8e:	490c      	ldr	r1, [pc, #48]	@ (8005ac0 <HAL_RCC_OscConfig+0x648>)
 8005a90:	400a      	ands	r2, r1
 8005a92:	60da      	str	r2, [r3, #12]
 8005a94:	e049      	b.n	8005b2a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d112      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e044      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
 8005aa2:	46c0      	nop			@ (mov r8, r8)
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	40007000 	.word	0x40007000
 8005aac:	00001388 	.word	0x00001388
 8005ab0:	efffffff 	.word	0xefffffff
 8005ab4:	ffbfffff 	.word	0xffbfffff
 8005ab8:	feffffff 	.word	0xfeffffff
 8005abc:	11c1808c 	.word	0x11c1808c
 8005ac0:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8005b34 <HAL_RCC_OscConfig+0x6bc>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2203      	movs	r2, #3
 8005ace:	401a      	ands	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d126      	bne.n	8005b26 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2270      	movs	r2, #112	@ 0x70
 8005adc:	401a      	ands	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d11f      	bne.n	8005b26 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	23fe      	movs	r3, #254	@ 0xfe
 8005aea:	01db      	lsls	r3, r3, #7
 8005aec:	401a      	ands	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d116      	bne.n	8005b26 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	23f8      	movs	r3, #248	@ 0xf8
 8005afc:	039b      	lsls	r3, r3, #14
 8005afe:	401a      	ands	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d10e      	bne.n	8005b26 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	23e0      	movs	r3, #224	@ 0xe0
 8005b0c:	051b      	lsls	r3, r3, #20
 8005b0e:	401a      	ands	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d106      	bne.n	8005b26 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	0f5b      	lsrs	r3, r3, #29
 8005b1c:	075a      	lsls	r2, r3, #29
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d001      	beq.n	8005b2a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	b008      	add	sp, #32
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40021000 	.word	0x40021000

08005b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0e9      	b.n	8005d20 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b4c:	4b76      	ldr	r3, [pc, #472]	@ (8005d28 <HAL_RCC_ClockConfig+0x1f0>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2207      	movs	r2, #7
 8005b52:	4013      	ands	r3, r2
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d91e      	bls.n	8005b98 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b5a:	4b73      	ldr	r3, [pc, #460]	@ (8005d28 <HAL_RCC_ClockConfig+0x1f0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2207      	movs	r2, #7
 8005b60:	4393      	bics	r3, r2
 8005b62:	0019      	movs	r1, r3
 8005b64:	4b70      	ldr	r3, [pc, #448]	@ (8005d28 <HAL_RCC_ClockConfig+0x1f0>)
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b6c:	f7fd faa6 	bl	80030bc <HAL_GetTick>
 8005b70:	0003      	movs	r3, r0
 8005b72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b74:	e009      	b.n	8005b8a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b76:	f7fd faa1 	bl	80030bc <HAL_GetTick>
 8005b7a:	0002      	movs	r2, r0
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	4a6a      	ldr	r2, [pc, #424]	@ (8005d2c <HAL_RCC_ClockConfig+0x1f4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e0ca      	b.n	8005d20 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b8a:	4b67      	ldr	r3, [pc, #412]	@ (8005d28 <HAL_RCC_ClockConfig+0x1f0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2207      	movs	r2, #7
 8005b90:	4013      	ands	r3, r2
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d1ee      	bne.n	8005b76 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	d015      	beq.n	8005bce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2204      	movs	r2, #4
 8005ba8:	4013      	ands	r3, r2
 8005baa:	d006      	beq.n	8005bba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005bac:	4b60      	ldr	r3, [pc, #384]	@ (8005d30 <HAL_RCC_ClockConfig+0x1f8>)
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	4b5f      	ldr	r3, [pc, #380]	@ (8005d30 <HAL_RCC_ClockConfig+0x1f8>)
 8005bb2:	21e0      	movs	r1, #224	@ 0xe0
 8005bb4:	01c9      	lsls	r1, r1, #7
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bba:	4b5d      	ldr	r3, [pc, #372]	@ (8005d30 <HAL_RCC_ClockConfig+0x1f8>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	4a5d      	ldr	r2, [pc, #372]	@ (8005d34 <HAL_RCC_ClockConfig+0x1fc>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	0019      	movs	r1, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	4b59      	ldr	r3, [pc, #356]	@ (8005d30 <HAL_RCC_ClockConfig+0x1f8>)
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	d057      	beq.n	8005c88 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d107      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005be0:	4b53      	ldr	r3, [pc, #332]	@ (8005d30 <HAL_RCC_ClockConfig+0x1f8>)
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	2380      	movs	r3, #128	@ 0x80
 8005be6:	029b      	lsls	r3, r3, #10
 8005be8:	4013      	ands	r3, r2
 8005bea:	d12b      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e097      	b.n	8005d20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d107      	bne.n	8005c08 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bf8:	4b4d      	ldr	r3, [pc, #308]	@ (8005d30 <HAL_RCC_ClockConfig+0x1f8>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	2380      	movs	r3, #128	@ 0x80
 8005bfe:	049b      	lsls	r3, r3, #18
 8005c00:	4013      	ands	r3, r2
 8005c02:	d11f      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e08b      	b.n	8005d20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d107      	bne.n	8005c20 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c10:	4b47      	ldr	r3, [pc, #284]	@ (8005d30 <HAL_RCC_ClockConfig+0x1f8>)
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	2380      	movs	r3, #128	@ 0x80
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	4013      	ands	r3, r2
 8005c1a:	d113      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e07f      	b.n	8005d20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d106      	bne.n	8005c36 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c28:	4b41      	ldr	r3, [pc, #260]	@ (8005d30 <HAL_RCC_ClockConfig+0x1f8>)
 8005c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	4013      	ands	r3, r2
 8005c30:	d108      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e074      	b.n	8005d20 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c36:	4b3e      	ldr	r3, [pc, #248]	@ (8005d30 <HAL_RCC_ClockConfig+0x1f8>)
 8005c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	d101      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e06d      	b.n	8005d20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c44:	4b3a      	ldr	r3, [pc, #232]	@ (8005d30 <HAL_RCC_ClockConfig+0x1f8>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	2207      	movs	r2, #7
 8005c4a:	4393      	bics	r3, r2
 8005c4c:	0019      	movs	r1, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	4b37      	ldr	r3, [pc, #220]	@ (8005d30 <HAL_RCC_ClockConfig+0x1f8>)
 8005c54:	430a      	orrs	r2, r1
 8005c56:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c58:	f7fd fa30 	bl	80030bc <HAL_GetTick>
 8005c5c:	0003      	movs	r3, r0
 8005c5e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c60:	e009      	b.n	8005c76 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c62:	f7fd fa2b 	bl	80030bc <HAL_GetTick>
 8005c66:	0002      	movs	r2, r0
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	4a2f      	ldr	r2, [pc, #188]	@ (8005d2c <HAL_RCC_ClockConfig+0x1f4>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e054      	b.n	8005d20 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c76:	4b2e      	ldr	r3, [pc, #184]	@ (8005d30 <HAL_RCC_ClockConfig+0x1f8>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	2238      	movs	r2, #56	@ 0x38
 8005c7c:	401a      	ands	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d1ec      	bne.n	8005c62 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c88:	4b27      	ldr	r3, [pc, #156]	@ (8005d28 <HAL_RCC_ClockConfig+0x1f0>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2207      	movs	r2, #7
 8005c8e:	4013      	ands	r3, r2
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d21e      	bcs.n	8005cd4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c96:	4b24      	ldr	r3, [pc, #144]	@ (8005d28 <HAL_RCC_ClockConfig+0x1f0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2207      	movs	r2, #7
 8005c9c:	4393      	bics	r3, r2
 8005c9e:	0019      	movs	r1, r3
 8005ca0:	4b21      	ldr	r3, [pc, #132]	@ (8005d28 <HAL_RCC_ClockConfig+0x1f0>)
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ca8:	f7fd fa08 	bl	80030bc <HAL_GetTick>
 8005cac:	0003      	movs	r3, r0
 8005cae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005cb0:	e009      	b.n	8005cc6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb2:	f7fd fa03 	bl	80030bc <HAL_GetTick>
 8005cb6:	0002      	movs	r2, r0
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8005d2c <HAL_RCC_ClockConfig+0x1f4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e02c      	b.n	8005d20 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005cc6:	4b18      	ldr	r3, [pc, #96]	@ (8005d28 <HAL_RCC_ClockConfig+0x1f0>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2207      	movs	r2, #7
 8005ccc:	4013      	ands	r3, r2
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d1ee      	bne.n	8005cb2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2204      	movs	r2, #4
 8005cda:	4013      	ands	r3, r2
 8005cdc:	d009      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005cde:	4b14      	ldr	r3, [pc, #80]	@ (8005d30 <HAL_RCC_ClockConfig+0x1f8>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	4a15      	ldr	r2, [pc, #84]	@ (8005d38 <HAL_RCC_ClockConfig+0x200>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	0019      	movs	r1, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	4b10      	ldr	r3, [pc, #64]	@ (8005d30 <HAL_RCC_ClockConfig+0x1f8>)
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005cf2:	f000 f829 	bl	8005d48 <HAL_RCC_GetSysClockFreq>
 8005cf6:	0001      	movs	r1, r0
 8005cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8005d30 <HAL_RCC_ClockConfig+0x1f8>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	0a1b      	lsrs	r3, r3, #8
 8005cfe:	220f      	movs	r2, #15
 8005d00:	401a      	ands	r2, r3
 8005d02:	4b0e      	ldr	r3, [pc, #56]	@ (8005d3c <HAL_RCC_ClockConfig+0x204>)
 8005d04:	0092      	lsls	r2, r2, #2
 8005d06:	58d3      	ldr	r3, [r2, r3]
 8005d08:	221f      	movs	r2, #31
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	000a      	movs	r2, r1
 8005d0e:	40da      	lsrs	r2, r3
 8005d10:	4b0b      	ldr	r3, [pc, #44]	@ (8005d40 <HAL_RCC_ClockConfig+0x208>)
 8005d12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d14:	4b0b      	ldr	r3, [pc, #44]	@ (8005d44 <HAL_RCC_ClockConfig+0x20c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f7fd f973 	bl	8003004 <HAL_InitTick>
 8005d1e:	0003      	movs	r3, r0
}
 8005d20:	0018      	movs	r0, r3
 8005d22:	46bd      	mov	sp, r7
 8005d24:	b004      	add	sp, #16
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	40022000 	.word	0x40022000
 8005d2c:	00001388 	.word	0x00001388
 8005d30:	40021000 	.word	0x40021000
 8005d34:	fffff0ff 	.word	0xfffff0ff
 8005d38:	ffff8fff 	.word	0xffff8fff
 8005d3c:	08008a50 	.word	0x08008a50
 8005d40:	20000000 	.word	0x20000000
 8005d44:	20000004 	.word	0x20000004

08005d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d4e:	4b3c      	ldr	r3, [pc, #240]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	2238      	movs	r2, #56	@ 0x38
 8005d54:	4013      	ands	r3, r2
 8005d56:	d10f      	bne.n	8005d78 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005d58:	4b39      	ldr	r3, [pc, #228]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	0adb      	lsrs	r3, r3, #11
 8005d5e:	2207      	movs	r2, #7
 8005d60:	4013      	ands	r3, r2
 8005d62:	2201      	movs	r2, #1
 8005d64:	409a      	lsls	r2, r3
 8005d66:	0013      	movs	r3, r2
 8005d68:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005d6a:	6839      	ldr	r1, [r7, #0]
 8005d6c:	4835      	ldr	r0, [pc, #212]	@ (8005e44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005d6e:	f7fa f9cb 	bl	8000108 <__udivsi3>
 8005d72:	0003      	movs	r3, r0
 8005d74:	613b      	str	r3, [r7, #16]
 8005d76:	e05d      	b.n	8005e34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d78:	4b31      	ldr	r3, [pc, #196]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	2238      	movs	r2, #56	@ 0x38
 8005d7e:	4013      	ands	r3, r2
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	d102      	bne.n	8005d8a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d84:	4b30      	ldr	r3, [pc, #192]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x100>)
 8005d86:	613b      	str	r3, [r7, #16]
 8005d88:	e054      	b.n	8005e34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	2238      	movs	r2, #56	@ 0x38
 8005d90:	4013      	ands	r3, r2
 8005d92:	2b10      	cmp	r3, #16
 8005d94:	d138      	bne.n	8005e08 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005d96:	4b2a      	ldr	r3, [pc, #168]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	2203      	movs	r2, #3
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005da0:	4b27      	ldr	r3, [pc, #156]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	091b      	lsrs	r3, r3, #4
 8005da6:	2207      	movs	r2, #7
 8005da8:	4013      	ands	r3, r2
 8005daa:	3301      	adds	r3, #1
 8005dac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d10d      	bne.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	4824      	ldr	r0, [pc, #144]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x100>)
 8005db8:	f7fa f9a6 	bl	8000108 <__udivsi3>
 8005dbc:	0003      	movs	r3, r0
 8005dbe:	0019      	movs	r1, r3
 8005dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	0a1b      	lsrs	r3, r3, #8
 8005dc6:	227f      	movs	r2, #127	@ 0x7f
 8005dc8:	4013      	ands	r3, r2
 8005dca:	434b      	muls	r3, r1
 8005dcc:	617b      	str	r3, [r7, #20]
        break;
 8005dce:	e00d      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005dd0:	68b9      	ldr	r1, [r7, #8]
 8005dd2:	481c      	ldr	r0, [pc, #112]	@ (8005e44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005dd4:	f7fa f998 	bl	8000108 <__udivsi3>
 8005dd8:	0003      	movs	r3, r0
 8005dda:	0019      	movs	r1, r3
 8005ddc:	4b18      	ldr	r3, [pc, #96]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	0a1b      	lsrs	r3, r3, #8
 8005de2:	227f      	movs	r2, #127	@ 0x7f
 8005de4:	4013      	ands	r3, r2
 8005de6:	434b      	muls	r3, r1
 8005de8:	617b      	str	r3, [r7, #20]
        break;
 8005dea:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005dec:	4b14      	ldr	r3, [pc, #80]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	0f5b      	lsrs	r3, r3, #29
 8005df2:	2207      	movs	r2, #7
 8005df4:	4013      	ands	r3, r2
 8005df6:	3301      	adds	r3, #1
 8005df8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005dfa:	6879      	ldr	r1, [r7, #4]
 8005dfc:	6978      	ldr	r0, [r7, #20]
 8005dfe:	f7fa f983 	bl	8000108 <__udivsi3>
 8005e02:	0003      	movs	r3, r0
 8005e04:	613b      	str	r3, [r7, #16]
 8005e06:	e015      	b.n	8005e34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005e08:	4b0d      	ldr	r3, [pc, #52]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	2238      	movs	r2, #56	@ 0x38
 8005e0e:	4013      	ands	r3, r2
 8005e10:	2b20      	cmp	r3, #32
 8005e12:	d103      	bne.n	8005e1c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005e14:	2380      	movs	r3, #128	@ 0x80
 8005e16:	021b      	lsls	r3, r3, #8
 8005e18:	613b      	str	r3, [r7, #16]
 8005e1a:	e00b      	b.n	8005e34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005e1c:	4b08      	ldr	r3, [pc, #32]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	2238      	movs	r2, #56	@ 0x38
 8005e22:	4013      	ands	r3, r2
 8005e24:	2b18      	cmp	r3, #24
 8005e26:	d103      	bne.n	8005e30 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005e28:	23fa      	movs	r3, #250	@ 0xfa
 8005e2a:	01db      	lsls	r3, r3, #7
 8005e2c:	613b      	str	r3, [r7, #16]
 8005e2e:	e001      	b.n	8005e34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005e34:	693b      	ldr	r3, [r7, #16]
}
 8005e36:	0018      	movs	r0, r3
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	b006      	add	sp, #24
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	46c0      	nop			@ (mov r8, r8)
 8005e40:	40021000 	.word	0x40021000
 8005e44:	00f42400 	.word	0x00f42400
 8005e48:	007a1200 	.word	0x007a1200

08005e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005e54:	2313      	movs	r3, #19
 8005e56:	18fb      	adds	r3, r7, r3
 8005e58:	2200      	movs	r2, #0
 8005e5a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e5c:	2312      	movs	r3, #18
 8005e5e:	18fb      	adds	r3, r7, r3
 8005e60:	2200      	movs	r2, #0
 8005e62:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	2380      	movs	r3, #128	@ 0x80
 8005e6a:	029b      	lsls	r3, r3, #10
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	d100      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005e70:	e0ad      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e72:	2011      	movs	r0, #17
 8005e74:	183b      	adds	r3, r7, r0
 8005e76:	2200      	movs	r2, #0
 8005e78:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e7a:	4b47      	ldr	r3, [pc, #284]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005e7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e7e:	2380      	movs	r3, #128	@ 0x80
 8005e80:	055b      	lsls	r3, r3, #21
 8005e82:	4013      	ands	r3, r2
 8005e84:	d110      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e86:	4b44      	ldr	r3, [pc, #272]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005e88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e8a:	4b43      	ldr	r3, [pc, #268]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005e8c:	2180      	movs	r1, #128	@ 0x80
 8005e8e:	0549      	lsls	r1, r1, #21
 8005e90:	430a      	orrs	r2, r1
 8005e92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005e94:	4b40      	ldr	r3, [pc, #256]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005e96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e98:	2380      	movs	r3, #128	@ 0x80
 8005e9a:	055b      	lsls	r3, r3, #21
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	60bb      	str	r3, [r7, #8]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ea2:	183b      	adds	r3, r7, r0
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ea8:	4b3c      	ldr	r3, [pc, #240]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	4b3b      	ldr	r3, [pc, #236]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005eae:	2180      	movs	r1, #128	@ 0x80
 8005eb0:	0049      	lsls	r1, r1, #1
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005eb6:	f7fd f901 	bl	80030bc <HAL_GetTick>
 8005eba:	0003      	movs	r3, r0
 8005ebc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ebe:	e00b      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ec0:	f7fd f8fc 	bl	80030bc <HAL_GetTick>
 8005ec4:	0002      	movs	r2, r0
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d904      	bls.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005ece:	2313      	movs	r3, #19
 8005ed0:	18fb      	adds	r3, r7, r3
 8005ed2:	2203      	movs	r2, #3
 8005ed4:	701a      	strb	r2, [r3, #0]
        break;
 8005ed6:	e005      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ed8:	4b30      	ldr	r3, [pc, #192]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	2380      	movs	r3, #128	@ 0x80
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	d0ed      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005ee4:	2313      	movs	r3, #19
 8005ee6:	18fb      	adds	r3, r7, r3
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d15e      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005eee:	4b2a      	ldr	r3, [pc, #168]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005ef0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ef2:	23c0      	movs	r3, #192	@ 0xc0
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d019      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d014      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f0a:	4b23      	ldr	r3, [pc, #140]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f0e:	4a24      	ldr	r2, [pc, #144]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f14:	4b20      	ldr	r3, [pc, #128]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005f16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f18:	4b1f      	ldr	r3, [pc, #124]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005f1a:	2180      	movs	r1, #128	@ 0x80
 8005f1c:	0249      	lsls	r1, r1, #9
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f22:	4b1d      	ldr	r3, [pc, #116]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005f24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f26:	4b1c      	ldr	r3, [pc, #112]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005f28:	491e      	ldr	r1, [pc, #120]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005f2a:	400a      	ands	r2, r1
 8005f2c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2201      	movs	r2, #1
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d016      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3c:	f7fd f8be 	bl	80030bc <HAL_GetTick>
 8005f40:	0003      	movs	r3, r0
 8005f42:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f44:	e00c      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f46:	f7fd f8b9 	bl	80030bc <HAL_GetTick>
 8005f4a:	0002      	movs	r2, r0
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	4a15      	ldr	r2, [pc, #84]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d904      	bls.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005f56:	2313      	movs	r3, #19
 8005f58:	18fb      	adds	r3, r7, r3
 8005f5a:	2203      	movs	r2, #3
 8005f5c:	701a      	strb	r2, [r3, #0]
            break;
 8005f5e:	e004      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f60:	4b0d      	ldr	r3, [pc, #52]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f64:	2202      	movs	r2, #2
 8005f66:	4013      	ands	r3, r2
 8005f68:	d0ed      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005f6a:	2313      	movs	r3, #19
 8005f6c:	18fb      	adds	r3, r7, r3
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f74:	4b08      	ldr	r3, [pc, #32]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f78:	4a09      	ldr	r2, [pc, #36]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	0019      	movs	r1, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f82:	4b05      	ldr	r3, [pc, #20]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005f84:	430a      	orrs	r2, r1
 8005f86:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f88:	e016      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f8a:	2312      	movs	r3, #18
 8005f8c:	18fb      	adds	r3, r7, r3
 8005f8e:	2213      	movs	r2, #19
 8005f90:	18ba      	adds	r2, r7, r2
 8005f92:	7812      	ldrb	r2, [r2, #0]
 8005f94:	701a      	strb	r2, [r3, #0]
 8005f96:	e00f      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	40007000 	.word	0x40007000
 8005fa0:	fffffcff 	.word	0xfffffcff
 8005fa4:	fffeffff 	.word	0xfffeffff
 8005fa8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fac:	2312      	movs	r3, #18
 8005fae:	18fb      	adds	r3, r7, r3
 8005fb0:	2213      	movs	r2, #19
 8005fb2:	18ba      	adds	r2, r7, r2
 8005fb4:	7812      	ldrb	r2, [r2, #0]
 8005fb6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fb8:	2311      	movs	r3, #17
 8005fba:	18fb      	adds	r3, r7, r3
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d105      	bne.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fc2:	4bb6      	ldr	r3, [pc, #728]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005fc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fc6:	4bb5      	ldr	r3, [pc, #724]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005fc8:	49b5      	ldr	r1, [pc, #724]	@ (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8005fca:	400a      	ands	r2, r1
 8005fcc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	d009      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fd8:	4bb0      	ldr	r3, [pc, #704]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fdc:	2203      	movs	r2, #3
 8005fde:	4393      	bics	r3, r2
 8005fe0:	0019      	movs	r1, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	4bad      	ldr	r3, [pc, #692]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	d009      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ff6:	4ba9      	ldr	r3, [pc, #676]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ffa:	220c      	movs	r2, #12
 8005ffc:	4393      	bics	r3, r2
 8005ffe:	0019      	movs	r1, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	4ba5      	ldr	r3, [pc, #660]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006006:	430a      	orrs	r2, r1
 8006008:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2204      	movs	r2, #4
 8006010:	4013      	ands	r3, r2
 8006012:	d009      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006014:	4ba1      	ldr	r3, [pc, #644]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006018:	2230      	movs	r2, #48	@ 0x30
 800601a:	4393      	bics	r3, r2
 800601c:	0019      	movs	r1, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	4b9e      	ldr	r3, [pc, #632]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006024:	430a      	orrs	r2, r1
 8006026:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2210      	movs	r2, #16
 800602e:	4013      	ands	r3, r2
 8006030:	d009      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006032:	4b9a      	ldr	r3, [pc, #616]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006036:	4a9b      	ldr	r2, [pc, #620]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006038:	4013      	ands	r3, r2
 800603a:	0019      	movs	r1, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691a      	ldr	r2, [r3, #16]
 8006040:	4b96      	ldr	r3, [pc, #600]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006042:	430a      	orrs	r2, r1
 8006044:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	2380      	movs	r3, #128	@ 0x80
 800604c:	015b      	lsls	r3, r3, #5
 800604e:	4013      	ands	r3, r2
 8006050:	d009      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8006052:	4b92      	ldr	r3, [pc, #584]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006056:	4a94      	ldr	r2, [pc, #592]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006058:	4013      	ands	r3, r2
 800605a:	0019      	movs	r1, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	695a      	ldr	r2, [r3, #20]
 8006060:	4b8e      	ldr	r3, [pc, #568]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006062:	430a      	orrs	r2, r1
 8006064:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	2380      	movs	r3, #128	@ 0x80
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4013      	ands	r3, r2
 8006070:	d009      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006072:	4b8a      	ldr	r3, [pc, #552]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006076:	4a8d      	ldr	r2, [pc, #564]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8006078:	4013      	ands	r3, r2
 800607a:	0019      	movs	r1, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006080:	4b86      	ldr	r3, [pc, #536]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006082:	430a      	orrs	r2, r1
 8006084:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	2380      	movs	r3, #128	@ 0x80
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	4013      	ands	r3, r2
 8006090:	d009      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006092:	4b82      	ldr	r3, [pc, #520]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006096:	4a86      	ldr	r2, [pc, #536]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8006098:	4013      	ands	r3, r2
 800609a:	0019      	movs	r1, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a0:	4b7e      	ldr	r3, [pc, #504]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80060a2:	430a      	orrs	r2, r1
 80060a4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2220      	movs	r2, #32
 80060ac:	4013      	ands	r3, r2
 80060ae:	d009      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060b0:	4b7a      	ldr	r3, [pc, #488]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80060b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b4:	4a7f      	ldr	r2, [pc, #508]	@ (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80060b6:	4013      	ands	r3, r2
 80060b8:	0019      	movs	r1, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699a      	ldr	r2, [r3, #24]
 80060be:	4b77      	ldr	r3, [pc, #476]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80060c0:	430a      	orrs	r2, r1
 80060c2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2240      	movs	r2, #64	@ 0x40
 80060ca:	4013      	ands	r3, r2
 80060cc:	d009      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060ce:	4b73      	ldr	r3, [pc, #460]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80060d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d2:	4a79      	ldr	r2, [pc, #484]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80060d4:	4013      	ands	r3, r2
 80060d6:	0019      	movs	r1, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	4b6f      	ldr	r3, [pc, #444]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80060de:	430a      	orrs	r2, r1
 80060e0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	2380      	movs	r3, #128	@ 0x80
 80060e8:	01db      	lsls	r3, r3, #7
 80060ea:	4013      	ands	r3, r2
 80060ec:	d015      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060ee:	4b6b      	ldr	r3, [pc, #428]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80060f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	0899      	lsrs	r1, r3, #2
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060fa:	4b68      	ldr	r3, [pc, #416]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80060fc:	430a      	orrs	r2, r1
 80060fe:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006104:	2380      	movs	r3, #128	@ 0x80
 8006106:	05db      	lsls	r3, r3, #23
 8006108:	429a      	cmp	r2, r3
 800610a:	d106      	bne.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800610c:	4b63      	ldr	r3, [pc, #396]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800610e:	68da      	ldr	r2, [r3, #12]
 8006110:	4b62      	ldr	r3, [pc, #392]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006112:	2180      	movs	r1, #128	@ 0x80
 8006114:	0249      	lsls	r1, r1, #9
 8006116:	430a      	orrs	r2, r1
 8006118:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	2380      	movs	r3, #128	@ 0x80
 8006120:	031b      	lsls	r3, r3, #12
 8006122:	4013      	ands	r3, r2
 8006124:	d009      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006126:	4b5d      	ldr	r3, [pc, #372]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800612a:	2240      	movs	r2, #64	@ 0x40
 800612c:	4393      	bics	r3, r2
 800612e:	0019      	movs	r1, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006134:	4b59      	ldr	r3, [pc, #356]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006136:	430a      	orrs	r2, r1
 8006138:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	2380      	movs	r3, #128	@ 0x80
 8006140:	039b      	lsls	r3, r3, #14
 8006142:	4013      	ands	r3, r2
 8006144:	d016      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006146:	4b55      	ldr	r3, [pc, #340]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800614a:	4a5c      	ldr	r2, [pc, #368]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800614c:	4013      	ands	r3, r2
 800614e:	0019      	movs	r1, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006154:	4b51      	ldr	r3, [pc, #324]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006156:	430a      	orrs	r2, r1
 8006158:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800615e:	2380      	movs	r3, #128	@ 0x80
 8006160:	03db      	lsls	r3, r3, #15
 8006162:	429a      	cmp	r2, r3
 8006164:	d106      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006166:	4b4d      	ldr	r3, [pc, #308]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	4b4c      	ldr	r3, [pc, #304]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800616c:	2180      	movs	r1, #128	@ 0x80
 800616e:	0449      	lsls	r1, r1, #17
 8006170:	430a      	orrs	r2, r1
 8006172:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	2380      	movs	r3, #128	@ 0x80
 800617a:	03db      	lsls	r3, r3, #15
 800617c:	4013      	ands	r3, r2
 800617e:	d016      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006180:	4b46      	ldr	r3, [pc, #280]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006184:	4a4e      	ldr	r2, [pc, #312]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006186:	4013      	ands	r3, r2
 8006188:	0019      	movs	r1, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800618e:	4b43      	ldr	r3, [pc, #268]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006190:	430a      	orrs	r2, r1
 8006192:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006198:	2380      	movs	r3, #128	@ 0x80
 800619a:	045b      	lsls	r3, r3, #17
 800619c:	429a      	cmp	r2, r3
 800619e:	d106      	bne.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80061a0:	4b3e      	ldr	r3, [pc, #248]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80061a2:	68da      	ldr	r2, [r3, #12]
 80061a4:	4b3d      	ldr	r3, [pc, #244]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80061a6:	2180      	movs	r1, #128	@ 0x80
 80061a8:	0449      	lsls	r1, r1, #17
 80061aa:	430a      	orrs	r2, r1
 80061ac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	2380      	movs	r3, #128	@ 0x80
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	4013      	ands	r3, r2
 80061b8:	d014      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80061ba:	4b38      	ldr	r3, [pc, #224]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80061bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061be:	2203      	movs	r2, #3
 80061c0:	4393      	bics	r3, r2
 80061c2:	0019      	movs	r1, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	4b34      	ldr	r3, [pc, #208]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80061ca:	430a      	orrs	r2, r1
 80061cc:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d106      	bne.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80061d6:	4b31      	ldr	r3, [pc, #196]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	4b30      	ldr	r3, [pc, #192]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80061dc:	2180      	movs	r1, #128	@ 0x80
 80061de:	0249      	lsls	r1, r1, #9
 80061e0:	430a      	orrs	r2, r1
 80061e2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	2380      	movs	r3, #128	@ 0x80
 80061ea:	019b      	lsls	r3, r3, #6
 80061ec:	4013      	ands	r3, r2
 80061ee:	d014      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80061f0:	4b2a      	ldr	r3, [pc, #168]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80061f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061f4:	220c      	movs	r2, #12
 80061f6:	4393      	bics	r3, r2
 80061f8:	0019      	movs	r1, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061fe:	4b27      	ldr	r3, [pc, #156]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006200:	430a      	orrs	r2, r1
 8006202:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006208:	2b04      	cmp	r3, #4
 800620a:	d106      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800620c:	4b23      	ldr	r3, [pc, #140]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800620e:	68da      	ldr	r2, [r3, #12]
 8006210:	4b22      	ldr	r3, [pc, #136]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006212:	2180      	movs	r1, #128	@ 0x80
 8006214:	0249      	lsls	r1, r1, #9
 8006216:	430a      	orrs	r2, r1
 8006218:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	2380      	movs	r3, #128	@ 0x80
 8006220:	045b      	lsls	r3, r3, #17
 8006222:	4013      	ands	r3, r2
 8006224:	d016      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006226:	4b1d      	ldr	r3, [pc, #116]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800622a:	4a22      	ldr	r2, [pc, #136]	@ (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800622c:	4013      	ands	r3, r2
 800622e:	0019      	movs	r1, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006234:	4b19      	ldr	r3, [pc, #100]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006236:	430a      	orrs	r2, r1
 8006238:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800623e:	2380      	movs	r3, #128	@ 0x80
 8006240:	019b      	lsls	r3, r3, #6
 8006242:	429a      	cmp	r2, r3
 8006244:	d106      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006246:	4b15      	ldr	r3, [pc, #84]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	4b14      	ldr	r3, [pc, #80]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800624c:	2180      	movs	r1, #128	@ 0x80
 800624e:	0449      	lsls	r1, r1, #17
 8006250:	430a      	orrs	r2, r1
 8006252:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	2380      	movs	r3, #128	@ 0x80
 800625a:	049b      	lsls	r3, r3, #18
 800625c:	4013      	ands	r3, r2
 800625e:	d016      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006260:	4b0e      	ldr	r3, [pc, #56]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006264:	4a10      	ldr	r2, [pc, #64]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006266:	4013      	ands	r3, r2
 8006268:	0019      	movs	r1, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800626e:	4b0b      	ldr	r3, [pc, #44]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006270:	430a      	orrs	r2, r1
 8006272:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006278:	2380      	movs	r3, #128	@ 0x80
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	429a      	cmp	r2, r3
 800627e:	d106      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006280:	4b06      	ldr	r3, [pc, #24]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006282:	68da      	ldr	r2, [r3, #12]
 8006284:	4b05      	ldr	r3, [pc, #20]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006286:	2180      	movs	r1, #128	@ 0x80
 8006288:	0449      	lsls	r1, r1, #17
 800628a:	430a      	orrs	r2, r1
 800628c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800628e:	2312      	movs	r3, #18
 8006290:	18fb      	adds	r3, r7, r3
 8006292:	781b      	ldrb	r3, [r3, #0]
}
 8006294:	0018      	movs	r0, r3
 8006296:	46bd      	mov	sp, r7
 8006298:	b006      	add	sp, #24
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40021000 	.word	0x40021000
 80062a0:	efffffff 	.word	0xefffffff
 80062a4:	fffff3ff 	.word	0xfffff3ff
 80062a8:	fffffcff 	.word	0xfffffcff
 80062ac:	fff3ffff 	.word	0xfff3ffff
 80062b0:	ffcfffff 	.word	0xffcfffff
 80062b4:	ffffcfff 	.word	0xffffcfff
 80062b8:	ffff3fff 	.word	0xffff3fff
 80062bc:	ffbfffff 	.word	0xffbfffff
 80062c0:	feffffff 	.word	0xfeffffff

080062c4 <__NVIC_SetPriority>:
{
 80062c4:	b590      	push	{r4, r7, lr}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	0002      	movs	r2, r0
 80062cc:	6039      	str	r1, [r7, #0]
 80062ce:	1dfb      	adds	r3, r7, #7
 80062d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80062d2:	1dfb      	adds	r3, r7, #7
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80062d8:	d828      	bhi.n	800632c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80062da:	4a2f      	ldr	r2, [pc, #188]	@ (8006398 <__NVIC_SetPriority+0xd4>)
 80062dc:	1dfb      	adds	r3, r7, #7
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	b25b      	sxtb	r3, r3
 80062e2:	089b      	lsrs	r3, r3, #2
 80062e4:	33c0      	adds	r3, #192	@ 0xc0
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	589b      	ldr	r3, [r3, r2]
 80062ea:	1dfa      	adds	r2, r7, #7
 80062ec:	7812      	ldrb	r2, [r2, #0]
 80062ee:	0011      	movs	r1, r2
 80062f0:	2203      	movs	r2, #3
 80062f2:	400a      	ands	r2, r1
 80062f4:	00d2      	lsls	r2, r2, #3
 80062f6:	21ff      	movs	r1, #255	@ 0xff
 80062f8:	4091      	lsls	r1, r2
 80062fa:	000a      	movs	r2, r1
 80062fc:	43d2      	mvns	r2, r2
 80062fe:	401a      	ands	r2, r3
 8006300:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	019b      	lsls	r3, r3, #6
 8006306:	22ff      	movs	r2, #255	@ 0xff
 8006308:	401a      	ands	r2, r3
 800630a:	1dfb      	adds	r3, r7, #7
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	0018      	movs	r0, r3
 8006310:	2303      	movs	r3, #3
 8006312:	4003      	ands	r3, r0
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006318:	481f      	ldr	r0, [pc, #124]	@ (8006398 <__NVIC_SetPriority+0xd4>)
 800631a:	1dfb      	adds	r3, r7, #7
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	b25b      	sxtb	r3, r3
 8006320:	089b      	lsrs	r3, r3, #2
 8006322:	430a      	orrs	r2, r1
 8006324:	33c0      	adds	r3, #192	@ 0xc0
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	501a      	str	r2, [r3, r0]
}
 800632a:	e031      	b.n	8006390 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800632c:	4a1b      	ldr	r2, [pc, #108]	@ (800639c <__NVIC_SetPriority+0xd8>)
 800632e:	1dfb      	adds	r3, r7, #7
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	0019      	movs	r1, r3
 8006334:	230f      	movs	r3, #15
 8006336:	400b      	ands	r3, r1
 8006338:	3b08      	subs	r3, #8
 800633a:	089b      	lsrs	r3, r3, #2
 800633c:	3306      	adds	r3, #6
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	18d3      	adds	r3, r2, r3
 8006342:	3304      	adds	r3, #4
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	1dfa      	adds	r2, r7, #7
 8006348:	7812      	ldrb	r2, [r2, #0]
 800634a:	0011      	movs	r1, r2
 800634c:	2203      	movs	r2, #3
 800634e:	400a      	ands	r2, r1
 8006350:	00d2      	lsls	r2, r2, #3
 8006352:	21ff      	movs	r1, #255	@ 0xff
 8006354:	4091      	lsls	r1, r2
 8006356:	000a      	movs	r2, r1
 8006358:	43d2      	mvns	r2, r2
 800635a:	401a      	ands	r2, r3
 800635c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	019b      	lsls	r3, r3, #6
 8006362:	22ff      	movs	r2, #255	@ 0xff
 8006364:	401a      	ands	r2, r3
 8006366:	1dfb      	adds	r3, r7, #7
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	0018      	movs	r0, r3
 800636c:	2303      	movs	r3, #3
 800636e:	4003      	ands	r3, r0
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006374:	4809      	ldr	r0, [pc, #36]	@ (800639c <__NVIC_SetPriority+0xd8>)
 8006376:	1dfb      	adds	r3, r7, #7
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	001c      	movs	r4, r3
 800637c:	230f      	movs	r3, #15
 800637e:	4023      	ands	r3, r4
 8006380:	3b08      	subs	r3, #8
 8006382:	089b      	lsrs	r3, r3, #2
 8006384:	430a      	orrs	r2, r1
 8006386:	3306      	adds	r3, #6
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	18c3      	adds	r3, r0, r3
 800638c:	3304      	adds	r3, #4
 800638e:	601a      	str	r2, [r3, #0]
}
 8006390:	46c0      	nop			@ (mov r8, r8)
 8006392:	46bd      	mov	sp, r7
 8006394:	b003      	add	sp, #12
 8006396:	bd90      	pop	{r4, r7, pc}
 8006398:	e000e100 	.word	0xe000e100
 800639c:	e000ed00 	.word	0xe000ed00

080063a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80063a4:	2305      	movs	r3, #5
 80063a6:	425b      	negs	r3, r3
 80063a8:	2100      	movs	r1, #0
 80063aa:	0018      	movs	r0, r3
 80063ac:	f7ff ff8a 	bl	80062c4 <__NVIC_SetPriority>
#endif
}
 80063b0:	46c0      	nop			@ (mov r8, r8)
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
	...

080063b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063be:	f3ef 8305 	mrs	r3, IPSR
 80063c2:	603b      	str	r3, [r7, #0]
  return(result);
 80063c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80063ca:	2306      	movs	r3, #6
 80063cc:	425b      	negs	r3, r3
 80063ce:	607b      	str	r3, [r7, #4]
 80063d0:	e00c      	b.n	80063ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80063d2:	4b09      	ldr	r3, [pc, #36]	@ (80063f8 <osKernelInitialize+0x40>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d105      	bne.n	80063e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80063da:	4b07      	ldr	r3, [pc, #28]	@ (80063f8 <osKernelInitialize+0x40>)
 80063dc:	2201      	movs	r2, #1
 80063de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	607b      	str	r3, [r7, #4]
 80063e4:	e002      	b.n	80063ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80063e6:	2301      	movs	r3, #1
 80063e8:	425b      	negs	r3, r3
 80063ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80063ec:	687b      	ldr	r3, [r7, #4]
}
 80063ee:	0018      	movs	r0, r3
 80063f0:	46bd      	mov	sp, r7
 80063f2:	b002      	add	sp, #8
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	46c0      	nop			@ (mov r8, r8)
 80063f8:	20000228 	.word	0x20000228

080063fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006402:	f3ef 8305 	mrs	r3, IPSR
 8006406:	603b      	str	r3, [r7, #0]
  return(result);
 8006408:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <osKernelStart+0x1a>
    stat = osErrorISR;
 800640e:	2306      	movs	r3, #6
 8006410:	425b      	negs	r3, r3
 8006412:	607b      	str	r3, [r7, #4]
 8006414:	e010      	b.n	8006438 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006416:	4b0b      	ldr	r3, [pc, #44]	@ (8006444 <osKernelStart+0x48>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d109      	bne.n	8006432 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800641e:	f7ff ffbf 	bl	80063a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006422:	4b08      	ldr	r3, [pc, #32]	@ (8006444 <osKernelStart+0x48>)
 8006424:	2202      	movs	r2, #2
 8006426:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006428:	f000 ff64 	bl	80072f4 <vTaskStartScheduler>
      stat = osOK;
 800642c:	2300      	movs	r3, #0
 800642e:	607b      	str	r3, [r7, #4]
 8006430:	e002      	b.n	8006438 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006432:	2301      	movs	r3, #1
 8006434:	425b      	negs	r3, r3
 8006436:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006438:	687b      	ldr	r3, [r7, #4]
}
 800643a:	0018      	movs	r0, r3
 800643c:	46bd      	mov	sp, r7
 800643e:	b002      	add	sp, #8
 8006440:	bd80      	pop	{r7, pc}
 8006442:	46c0      	nop			@ (mov r8, r8)
 8006444:	20000228 	.word	0x20000228

08006448 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006448:	b5b0      	push	{r4, r5, r7, lr}
 800644a:	b08e      	sub	sp, #56	@ 0x38
 800644c:	af04      	add	r7, sp, #16
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006454:	2300      	movs	r3, #0
 8006456:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006458:	f3ef 8305 	mrs	r3, IPSR
 800645c:	617b      	str	r3, [r7, #20]
  return(result);
 800645e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006460:	2b00      	cmp	r3, #0
 8006462:	d000      	beq.n	8006466 <osThreadNew+0x1e>
 8006464:	e081      	b.n	800656a <osThreadNew+0x122>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d100      	bne.n	800646e <osThreadNew+0x26>
 800646c:	e07d      	b.n	800656a <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 800646e:	2380      	movs	r3, #128	@ 0x80
 8006470:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006472:	2318      	movs	r3, #24
 8006474:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006476:	2300      	movs	r3, #0
 8006478:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800647a:	2301      	movs	r3, #1
 800647c:	425b      	negs	r3, r3
 800647e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d044      	beq.n	8006510 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <osThreadNew+0x4c>
        name = attr->name;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d007      	beq.n	80064b8 <osThreadNew+0x70>
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	2b38      	cmp	r3, #56	@ 0x38
 80064ac:	d804      	bhi.n	80064b8 <osThreadNew+0x70>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	4013      	ands	r3, r2
 80064b6:	d001      	beq.n	80064bc <osThreadNew+0x74>
        return (NULL);
 80064b8:	2300      	movs	r3, #0
 80064ba:	e057      	b.n	800656c <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	089b      	lsrs	r3, r3, #2
 80064ca:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00e      	beq.n	80064f2 <osThreadNew+0xaa>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	2b5b      	cmp	r3, #91	@ 0x5b
 80064da:	d90a      	bls.n	80064f2 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d006      	beq.n	80064f2 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <osThreadNew+0xaa>
        mem = 1;
 80064ec:	2301      	movs	r3, #1
 80064ee:	61bb      	str	r3, [r7, #24]
 80064f0:	e010      	b.n	8006514 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10c      	bne.n	8006514 <osThreadNew+0xcc>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d108      	bne.n	8006514 <osThreadNew+0xcc>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d104      	bne.n	8006514 <osThreadNew+0xcc>
          mem = 0;
 800650a:	2300      	movs	r3, #0
 800650c:	61bb      	str	r3, [r7, #24]
 800650e:	e001      	b.n	8006514 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8006510:	2300      	movs	r3, #0
 8006512:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d112      	bne.n	8006540 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006522:	68bd      	ldr	r5, [r7, #8]
 8006524:	6a3c      	ldr	r4, [r7, #32]
 8006526:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	9302      	str	r3, [sp, #8]
 800652c:	9201      	str	r2, [sp, #4]
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	002b      	movs	r3, r5
 8006534:	0022      	movs	r2, r4
 8006536:	f000 fd32 	bl	8006f9e <xTaskCreateStatic>
 800653a:	0003      	movs	r3, r0
 800653c:	613b      	str	r3, [r7, #16]
 800653e:	e014      	b.n	800656a <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d111      	bne.n	800656a <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	b29a      	uxth	r2, r3
 800654a:	68bc      	ldr	r4, [r7, #8]
 800654c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	2310      	movs	r3, #16
 8006552:	18fb      	adds	r3, r7, r3
 8006554:	9301      	str	r3, [sp, #4]
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	0023      	movs	r3, r4
 800655c:	f000 fd66 	bl	800702c <xTaskCreate>
 8006560:	0003      	movs	r3, r0
 8006562:	2b01      	cmp	r3, #1
 8006564:	d001      	beq.n	800656a <osThreadNew+0x122>
            hTask = NULL;
 8006566:	2300      	movs	r3, #0
 8006568:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800656a:	693b      	ldr	r3, [r7, #16]
}
 800656c:	0018      	movs	r0, r3
 800656e:	46bd      	mov	sp, r7
 8006570:	b00a      	add	sp, #40	@ 0x28
 8006572:	bdb0      	pop	{r4, r5, r7, pc}

08006574 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4a06      	ldr	r2, [pc, #24]	@ (800659c <vApplicationGetIdleTaskMemory+0x28>)
 8006584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	4a05      	ldr	r2, [pc, #20]	@ (80065a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800658a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2280      	movs	r2, #128	@ 0x80
 8006590:	601a      	str	r2, [r3, #0]
}
 8006592:	46c0      	nop			@ (mov r8, r8)
 8006594:	46bd      	mov	sp, r7
 8006596:	b004      	add	sp, #16
 8006598:	bd80      	pop	{r7, pc}
 800659a:	46c0      	nop			@ (mov r8, r8)
 800659c:	2000022c 	.word	0x2000022c
 80065a0:	20000288 	.word	0x20000288

080065a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4a06      	ldr	r2, [pc, #24]	@ (80065cc <vApplicationGetTimerTaskMemory+0x28>)
 80065b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	4a05      	ldr	r2, [pc, #20]	@ (80065d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80065ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2280      	movs	r2, #128	@ 0x80
 80065c0:	0052      	lsls	r2, r2, #1
 80065c2:	601a      	str	r2, [r3, #0]
}
 80065c4:	46c0      	nop			@ (mov r8, r8)
 80065c6:	46bd      	mov	sp, r7
 80065c8:	b004      	add	sp, #16
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	20000488 	.word	0x20000488
 80065d0:	200004e4 	.word	0x200004e4

080065d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3308      	adds	r3, #8
 80065e0:	001a      	movs	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	4252      	negs	r2, r2
 80065ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	3308      	adds	r3, #8
 80065f2:	001a      	movs	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3308      	adds	r3, #8
 80065fc:	001a      	movs	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006608:	46c0      	nop			@ (mov r8, r8)
 800660a:	46bd      	mov	sp, r7
 800660c:	b002      	add	sp, #8
 800660e:	bd80      	pop	{r7, pc}

08006610 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800661e:	46c0      	nop			@ (mov r8, r8)
 8006620:	46bd      	mov	sp, r7
 8006622:	b002      	add	sp, #8
 8006624:	bd80      	pop	{r7, pc}

08006626 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	601a      	str	r2, [r3, #0]
}
 8006662:	46c0      	nop			@ (mov r8, r8)
 8006664:	46bd      	mov	sp, r7
 8006666:	b004      	add	sp, #16
 8006668:	bd80      	pop	{r7, pc}

0800666a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	3301      	adds	r3, #1
 800667e:	d103      	bne.n	8006688 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	60fb      	str	r3, [r7, #12]
 8006686:	e00c      	b.n	80066a2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3308      	adds	r3, #8
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	e002      	b.n	8006696 <vListInsert+0x2c>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d2f6      	bcs.n	8006690 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	601a      	str	r2, [r3, #0]
}
 80066ce:	46c0      	nop			@ (mov r8, r8)
 80066d0:	46bd      	mov	sp, r7
 80066d2:	b004      	add	sp, #16
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b084      	sub	sp, #16
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6892      	ldr	r2, [r2, #8]
 80066ec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6852      	ldr	r2, [r2, #4]
 80066f6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d103      	bne.n	800670a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	1e5a      	subs	r2, r3, #1
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
}
 800671e:	0018      	movs	r0, r3
 8006720:	46bd      	mov	sp, r7
 8006722:	b004      	add	sp, #16
 8006724:	bd80      	pop	{r7, pc}

08006726 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d102      	bne.n	8006740 <xQueueGenericReset+0x1a>
 800673a:	b672      	cpsid	i
 800673c:	46c0      	nop			@ (mov r8, r8)
 800673e:	e7fd      	b.n	800673c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8006740:	f001 fe3e 	bl	80083c0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006750:	434b      	muls	r3, r1
 8006752:	18d2      	adds	r2, r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676e:	1e59      	subs	r1, r3, #1
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006774:	434b      	muls	r3, r1
 8006776:	18d2      	adds	r2, r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2244      	movs	r2, #68	@ 0x44
 8006780:	21ff      	movs	r1, #255	@ 0xff
 8006782:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2245      	movs	r2, #69	@ 0x45
 8006788:	21ff      	movs	r1, #255	@ 0xff
 800678a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10d      	bne.n	80067ae <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d013      	beq.n	80067c2 <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3310      	adds	r3, #16
 800679e:	0018      	movs	r0, r3
 80067a0:	f000 ffee 	bl	8007780 <xTaskRemoveFromEventList>
 80067a4:	1e03      	subs	r3, r0, #0
 80067a6:	d00c      	beq.n	80067c2 <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80067a8:	f001 fdfa 	bl	80083a0 <vPortYield>
 80067ac:	e009      	b.n	80067c2 <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3310      	adds	r3, #16
 80067b2:	0018      	movs	r0, r3
 80067b4:	f7ff ff0e 	bl	80065d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	3324      	adds	r3, #36	@ 0x24
 80067bc:	0018      	movs	r0, r3
 80067be:	f7ff ff09 	bl	80065d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80067c2:	f001 fe0f 	bl	80083e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80067c6:	2301      	movs	r3, #1
}
 80067c8:	0018      	movs	r0, r3
 80067ca:	46bd      	mov	sp, r7
 80067cc:	b004      	add	sp, #16
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80067d0:	b590      	push	{r4, r7, lr}
 80067d2:	b089      	sub	sp, #36	@ 0x24
 80067d4:	af02      	add	r7, sp, #8
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d102      	bne.n	80067ea <xQueueGenericCreateStatic+0x1a>
 80067e4:	b672      	cpsid	i
 80067e6:	46c0      	nop			@ (mov r8, r8)
 80067e8:	e7fd      	b.n	80067e6 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d102      	bne.n	80067f6 <xQueueGenericCreateStatic+0x26>
 80067f0:	b672      	cpsid	i
 80067f2:	46c0      	nop			@ (mov r8, r8)
 80067f4:	e7fd      	b.n	80067f2 <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <xQueueGenericCreateStatic+0x32>
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <xQueueGenericCreateStatic+0x36>
 8006802:	2301      	movs	r3, #1
 8006804:	e000      	b.n	8006808 <xQueueGenericCreateStatic+0x38>
 8006806:	2300      	movs	r3, #0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d102      	bne.n	8006812 <xQueueGenericCreateStatic+0x42>
 800680c:	b672      	cpsid	i
 800680e:	46c0      	nop			@ (mov r8, r8)
 8006810:	e7fd      	b.n	800680e <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d102      	bne.n	800681e <xQueueGenericCreateStatic+0x4e>
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <xQueueGenericCreateStatic+0x52>
 800681e:	2301      	movs	r3, #1
 8006820:	e000      	b.n	8006824 <xQueueGenericCreateStatic+0x54>
 8006822:	2300      	movs	r3, #0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d102      	bne.n	800682e <xQueueGenericCreateStatic+0x5e>
 8006828:	b672      	cpsid	i
 800682a:	46c0      	nop			@ (mov r8, r8)
 800682c:	e7fd      	b.n	800682a <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800682e:	2350      	movs	r3, #80	@ 0x50
 8006830:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	2b50      	cmp	r3, #80	@ 0x50
 8006836:	d002      	beq.n	800683e <xQueueGenericCreateStatic+0x6e>
 8006838:	b672      	cpsid	i
 800683a:	46c0      	nop			@ (mov r8, r8)
 800683c:	e7fd      	b.n	800683a <xQueueGenericCreateStatic+0x6a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800683e:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00e      	beq.n	8006868 <xQueueGenericCreateStatic+0x98>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2246      	movs	r2, #70	@ 0x46
 800684e:	2101      	movs	r1, #1
 8006850:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006852:	2328      	movs	r3, #40	@ 0x28
 8006854:	18fb      	adds	r3, r7, r3
 8006856:	781c      	ldrb	r4, [r3, #0]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	68b9      	ldr	r1, [r7, #8]
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	0023      	movs	r3, r4
 8006864:	f000 f805 	bl	8006872 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006868:	697b      	ldr	r3, [r7, #20]
	}
 800686a:	0018      	movs	r0, r3
 800686c:	46bd      	mov	sp, r7
 800686e:	b007      	add	sp, #28
 8006870:	bd90      	pop	{r4, r7, pc}

08006872 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	60f8      	str	r0, [r7, #12]
 800687a:	60b9      	str	r1, [r7, #8]
 800687c:	607a      	str	r2, [r7, #4]
 800687e:	001a      	movs	r2, r3
 8006880:	1cfb      	adds	r3, r7, #3
 8006882:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d103      	bne.n	8006892 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	e002      	b.n	8006898 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	2101      	movs	r1, #1
 80068a8:	0018      	movs	r0, r3
 80068aa:	f7ff ff3c 	bl	8006726 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	1cfa      	adds	r2, r7, #3
 80068b2:	214c      	movs	r1, #76	@ 0x4c
 80068b4:	7812      	ldrb	r2, [r2, #0]
 80068b6:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80068b8:	46c0      	nop			@ (mov r8, r8)
 80068ba:	46bd      	mov	sp, r7
 80068bc:	b004      	add	sp, #16
 80068be:	bd80      	pop	{r7, pc}

080068c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08a      	sub	sp, #40	@ 0x28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068ce:	2300      	movs	r3, #0
 80068d0:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d102      	bne.n	80068e2 <xQueueGenericSend+0x22>
 80068dc:	b672      	cpsid	i
 80068de:	46c0      	nop			@ (mov r8, r8)
 80068e0:	e7fd      	b.n	80068de <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d103      	bne.n	80068f0 <xQueueGenericSend+0x30>
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <xQueueGenericSend+0x34>
 80068f0:	2301      	movs	r3, #1
 80068f2:	e000      	b.n	80068f6 <xQueueGenericSend+0x36>
 80068f4:	2300      	movs	r3, #0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d102      	bne.n	8006900 <xQueueGenericSend+0x40>
 80068fa:	b672      	cpsid	i
 80068fc:	46c0      	nop			@ (mov r8, r8)
 80068fe:	e7fd      	b.n	80068fc <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b02      	cmp	r3, #2
 8006904:	d103      	bne.n	800690e <xQueueGenericSend+0x4e>
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <xQueueGenericSend+0x52>
 800690e:	2301      	movs	r3, #1
 8006910:	e000      	b.n	8006914 <xQueueGenericSend+0x54>
 8006912:	2300      	movs	r3, #0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d102      	bne.n	800691e <xQueueGenericSend+0x5e>
 8006918:	b672      	cpsid	i
 800691a:	46c0      	nop			@ (mov r8, r8)
 800691c:	e7fd      	b.n	800691a <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800691e:	f001 f8c7 	bl	8007ab0 <xTaskGetSchedulerState>
 8006922:	1e03      	subs	r3, r0, #0
 8006924:	d102      	bne.n	800692c <xQueueGenericSend+0x6c>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <xQueueGenericSend+0x70>
 800692c:	2301      	movs	r3, #1
 800692e:	e000      	b.n	8006932 <xQueueGenericSend+0x72>
 8006930:	2300      	movs	r3, #0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d102      	bne.n	800693c <xQueueGenericSend+0x7c>
 8006936:	b672      	cpsid	i
 8006938:	46c0      	nop			@ (mov r8, r8)
 800693a:	e7fd      	b.n	8006938 <xQueueGenericSend+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800693c:	f001 fd40 	bl	80083c0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006948:	429a      	cmp	r2, r3
 800694a:	d302      	bcc.n	8006952 <xQueueGenericSend+0x92>
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	2b02      	cmp	r3, #2
 8006950:	d11e      	bne.n	8006990 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	68b9      	ldr	r1, [r7, #8]
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	0018      	movs	r0, r3
 800695a:	f000 f9a8 	bl	8006cae <prvCopyDataToQueue>
 800695e:	0003      	movs	r3, r0
 8006960:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006966:	2b00      	cmp	r3, #0
 8006968:	d009      	beq.n	800697e <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	3324      	adds	r3, #36	@ 0x24
 800696e:	0018      	movs	r0, r3
 8006970:	f000 ff06 	bl	8007780 <xTaskRemoveFromEventList>
 8006974:	1e03      	subs	r3, r0, #0
 8006976:	d007      	beq.n	8006988 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006978:	f001 fd12 	bl	80083a0 <vPortYield>
 800697c:	e004      	b.n	8006988 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006984:	f001 fd0c 	bl	80083a0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006988:	f001 fd2c 	bl	80083e4 <vPortExitCritical>
				return pdPASS;
 800698c:	2301      	movs	r3, #1
 800698e:	e05b      	b.n	8006a48 <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d103      	bne.n	800699e <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006996:	f001 fd25 	bl	80083e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800699a:	2300      	movs	r3, #0
 800699c:	e054      	b.n	8006a48 <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 800699e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d106      	bne.n	80069b2 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069a4:	2314      	movs	r3, #20
 80069a6:	18fb      	adds	r3, r7, r3
 80069a8:	0018      	movs	r0, r3
 80069aa:	f000 ff47 	bl	800783c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069ae:	2301      	movs	r3, #1
 80069b0:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069b2:	f001 fd17 	bl	80083e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069b6:	f000 fcf3 	bl	80073a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069ba:	f001 fd01 	bl	80083c0 <vPortEnterCritical>
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	2244      	movs	r2, #68	@ 0x44
 80069c2:	5c9b      	ldrb	r3, [r3, r2]
 80069c4:	b25b      	sxtb	r3, r3
 80069c6:	3301      	adds	r3, #1
 80069c8:	d103      	bne.n	80069d2 <xQueueGenericSend+0x112>
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	2244      	movs	r2, #68	@ 0x44
 80069ce:	2100      	movs	r1, #0
 80069d0:	5499      	strb	r1, [r3, r2]
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	2245      	movs	r2, #69	@ 0x45
 80069d6:	5c9b      	ldrb	r3, [r3, r2]
 80069d8:	b25b      	sxtb	r3, r3
 80069da:	3301      	adds	r3, #1
 80069dc:	d103      	bne.n	80069e6 <xQueueGenericSend+0x126>
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	2245      	movs	r2, #69	@ 0x45
 80069e2:	2100      	movs	r1, #0
 80069e4:	5499      	strb	r1, [r3, r2]
 80069e6:	f001 fcfd 	bl	80083e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069ea:	1d3a      	adds	r2, r7, #4
 80069ec:	2314      	movs	r3, #20
 80069ee:	18fb      	adds	r3, r7, r3
 80069f0:	0011      	movs	r1, r2
 80069f2:	0018      	movs	r0, r3
 80069f4:	f000 ff36 	bl	8007864 <xTaskCheckForTimeOut>
 80069f8:	1e03      	subs	r3, r0, #0
 80069fa:	d11e      	bne.n	8006a3a <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	0018      	movs	r0, r3
 8006a00:	f000 fa5a 	bl	8006eb8 <prvIsQueueFull>
 8006a04:	1e03      	subs	r3, r0, #0
 8006a06:	d011      	beq.n	8006a2c <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	3310      	adds	r3, #16
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	0011      	movs	r1, r2
 8006a10:	0018      	movs	r0, r3
 8006a12:	f000 fe6d 	bl	80076f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f000 f9d9 	bl	8006dd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a1e:	f000 fccb 	bl	80073b8 <xTaskResumeAll>
 8006a22:	1e03      	subs	r3, r0, #0
 8006a24:	d18a      	bne.n	800693c <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 8006a26:	f001 fcbb 	bl	80083a0 <vPortYield>
 8006a2a:	e787      	b.n	800693c <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	0018      	movs	r0, r3
 8006a30:	f000 f9ce 	bl	8006dd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a34:	f000 fcc0 	bl	80073b8 <xTaskResumeAll>
 8006a38:	e780      	b.n	800693c <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	0018      	movs	r0, r3
 8006a3e:	f000 f9c7 	bl	8006dd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a42:	f000 fcb9 	bl	80073b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a48:	0018      	movs	r0, r3
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	b00a      	add	sp, #40	@ 0x28
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a50:	b590      	push	{r4, r7, lr}
 8006a52:	b08b      	sub	sp, #44	@ 0x2c
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d102      	bne.n	8006a6e <xQueueGenericSendFromISR+0x1e>
 8006a68:	b672      	cpsid	i
 8006a6a:	46c0      	nop			@ (mov r8, r8)
 8006a6c:	e7fd      	b.n	8006a6a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d103      	bne.n	8006a7c <xQueueGenericSendFromISR+0x2c>
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <xQueueGenericSendFromISR+0x30>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e000      	b.n	8006a82 <xQueueGenericSendFromISR+0x32>
 8006a80:	2300      	movs	r3, #0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d102      	bne.n	8006a8c <xQueueGenericSendFromISR+0x3c>
 8006a86:	b672      	cpsid	i
 8006a88:	46c0      	nop			@ (mov r8, r8)
 8006a8a:	e7fd      	b.n	8006a88 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d103      	bne.n	8006a9a <xQueueGenericSendFromISR+0x4a>
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <xQueueGenericSendFromISR+0x4e>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e000      	b.n	8006aa0 <xQueueGenericSendFromISR+0x50>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d102      	bne.n	8006aaa <xQueueGenericSendFromISR+0x5a>
 8006aa4:	b672      	cpsid	i
 8006aa6:	46c0      	nop			@ (mov r8, r8)
 8006aa8:	e7fd      	b.n	8006aa6 <xQueueGenericSendFromISR+0x56>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006aaa:	f001 fcb3 	bl	8008414 <ulSetInterruptMaskFromISR>
 8006aae:	0003      	movs	r3, r0
 8006ab0:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d302      	bcc.n	8006ac4 <xQueueGenericSendFromISR+0x74>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d131      	bne.n	8006b28 <xQueueGenericSendFromISR+0xd8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ac4:	241b      	movs	r4, #27
 8006ac6:	193b      	adds	r3, r7, r4
 8006ac8:	6a3a      	ldr	r2, [r7, #32]
 8006aca:	2145      	movs	r1, #69	@ 0x45
 8006acc:	5c52      	ldrb	r2, [r2, r1]
 8006ace:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad4:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	68b9      	ldr	r1, [r7, #8]
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	0018      	movs	r0, r3
 8006ade:	f000 f8e6 	bl	8006cae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ae2:	193b      	adds	r3, r7, r4
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	b25b      	sxtb	r3, r3
 8006ae8:	3301      	adds	r3, #1
 8006aea:	d111      	bne.n	8006b10 <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d016      	beq.n	8006b22 <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	3324      	adds	r3, #36	@ 0x24
 8006af8:	0018      	movs	r0, r3
 8006afa:	f000 fe41 	bl	8007780 <xTaskRemoveFromEventList>
 8006afe:	1e03      	subs	r3, r0, #0
 8006b00:	d00f      	beq.n	8006b22 <xQueueGenericSendFromISR+0xd2>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00c      	beq.n	8006b22 <xQueueGenericSendFromISR+0xd2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	e008      	b.n	8006b22 <xQueueGenericSendFromISR+0xd2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b10:	231b      	movs	r3, #27
 8006b12:	18fb      	adds	r3, r7, r3
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	3301      	adds	r3, #1
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	b259      	sxtb	r1, r3
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	2245      	movs	r2, #69	@ 0x45
 8006b20:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8006b22:	2301      	movs	r3, #1
 8006b24:	627b      	str	r3, [r7, #36]	@ 0x24
		{
 8006b26:	e001      	b.n	8006b2c <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	627b      	str	r3, [r7, #36]	@ 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	0018      	movs	r0, r3
 8006b30:	f001 fc76 	bl	8008420 <vClearInterruptMaskFromISR>

	return xReturn;
 8006b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006b36:	0018      	movs	r0, r3
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	b00b      	add	sp, #44	@ 0x2c
 8006b3c:	bd90      	pop	{r4, r7, pc}

08006b3e <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b08a      	sub	sp, #40	@ 0x28
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d102      	bne.n	8006b5e <xQueueReceive+0x20>
 8006b58:	b672      	cpsid	i
 8006b5a:	46c0      	nop			@ (mov r8, r8)
 8006b5c:	e7fd      	b.n	8006b5a <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d103      	bne.n	8006b6c <xQueueReceive+0x2e>
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <xQueueReceive+0x32>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e000      	b.n	8006b72 <xQueueReceive+0x34>
 8006b70:	2300      	movs	r3, #0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d102      	bne.n	8006b7c <xQueueReceive+0x3e>
 8006b76:	b672      	cpsid	i
 8006b78:	46c0      	nop			@ (mov r8, r8)
 8006b7a:	e7fd      	b.n	8006b78 <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b7c:	f000 ff98 	bl	8007ab0 <xTaskGetSchedulerState>
 8006b80:	1e03      	subs	r3, r0, #0
 8006b82:	d102      	bne.n	8006b8a <xQueueReceive+0x4c>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <xQueueReceive+0x50>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e000      	b.n	8006b90 <xQueueReceive+0x52>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d102      	bne.n	8006b9a <xQueueReceive+0x5c>
 8006b94:	b672      	cpsid	i
 8006b96:	46c0      	nop			@ (mov r8, r8)
 8006b98:	e7fd      	b.n	8006b96 <xQueueReceive+0x58>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b9a:	f001 fc11 	bl	80083c0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d01a      	beq.n	8006be0 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	0011      	movs	r1, r2
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f000 f8e7 	bl	8006d84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	1e5a      	subs	r2, r3, #1
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d008      	beq.n	8006bd8 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	3310      	adds	r3, #16
 8006bca:	0018      	movs	r0, r3
 8006bcc:	f000 fdd8 	bl	8007780 <xTaskRemoveFromEventList>
 8006bd0:	1e03      	subs	r3, r0, #0
 8006bd2:	d001      	beq.n	8006bd8 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bd4:	f001 fbe4 	bl	80083a0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bd8:	f001 fc04 	bl	80083e4 <vPortExitCritical>
				return pdPASS;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e062      	b.n	8006ca6 <xQueueReceive+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d103      	bne.n	8006bee <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006be6:	f001 fbfd 	bl	80083e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006bea:	2300      	movs	r3, #0
 8006bec:	e05b      	b.n	8006ca6 <xQueueReceive+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d106      	bne.n	8006c02 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bf4:	2314      	movs	r3, #20
 8006bf6:	18fb      	adds	r3, r7, r3
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f000 fe1f 	bl	800783c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c02:	f001 fbef 	bl	80083e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c06:	f000 fbcb 	bl	80073a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c0a:	f001 fbd9 	bl	80083c0 <vPortEnterCritical>
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	2244      	movs	r2, #68	@ 0x44
 8006c12:	5c9b      	ldrb	r3, [r3, r2]
 8006c14:	b25b      	sxtb	r3, r3
 8006c16:	3301      	adds	r3, #1
 8006c18:	d103      	bne.n	8006c22 <xQueueReceive+0xe4>
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	2244      	movs	r2, #68	@ 0x44
 8006c1e:	2100      	movs	r1, #0
 8006c20:	5499      	strb	r1, [r3, r2]
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	2245      	movs	r2, #69	@ 0x45
 8006c26:	5c9b      	ldrb	r3, [r3, r2]
 8006c28:	b25b      	sxtb	r3, r3
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	d103      	bne.n	8006c36 <xQueueReceive+0xf8>
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	2245      	movs	r2, #69	@ 0x45
 8006c32:	2100      	movs	r1, #0
 8006c34:	5499      	strb	r1, [r3, r2]
 8006c36:	f001 fbd5 	bl	80083e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c3a:	1d3a      	adds	r2, r7, #4
 8006c3c:	2314      	movs	r3, #20
 8006c3e:	18fb      	adds	r3, r7, r3
 8006c40:	0011      	movs	r1, r2
 8006c42:	0018      	movs	r0, r3
 8006c44:	f000 fe0e 	bl	8007864 <xTaskCheckForTimeOut>
 8006c48:	1e03      	subs	r3, r0, #0
 8006c4a:	d11e      	bne.n	8006c8a <xQueueReceive+0x14c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	0018      	movs	r0, r3
 8006c50:	f000 f91c 	bl	8006e8c <prvIsQueueEmpty>
 8006c54:	1e03      	subs	r3, r0, #0
 8006c56:	d011      	beq.n	8006c7c <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	3324      	adds	r3, #36	@ 0x24
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	0011      	movs	r1, r2
 8006c60:	0018      	movs	r0, r3
 8006c62:	f000 fd45 	bl	80076f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	0018      	movs	r0, r3
 8006c6a:	f000 f8b1 	bl	8006dd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c6e:	f000 fba3 	bl	80073b8 <xTaskResumeAll>
 8006c72:	1e03      	subs	r3, r0, #0
 8006c74:	d191      	bne.n	8006b9a <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 8006c76:	f001 fb93 	bl	80083a0 <vPortYield>
 8006c7a:	e78e      	b.n	8006b9a <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	0018      	movs	r0, r3
 8006c80:	f000 f8a6 	bl	8006dd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c84:	f000 fb98 	bl	80073b8 <xTaskResumeAll>
 8006c88:	e787      	b.n	8006b9a <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	f000 f89f 	bl	8006dd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c92:	f000 fb91 	bl	80073b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	0018      	movs	r0, r3
 8006c9a:	f000 f8f7 	bl	8006e8c <prvIsQueueEmpty>
 8006c9e:	1e03      	subs	r3, r0, #0
 8006ca0:	d100      	bne.n	8006ca4 <xQueueReceive+0x166>
 8006ca2:	e77a      	b.n	8006b9a <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ca4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	b00a      	add	sp, #40	@ 0x28
 8006cac:	bd80      	pop	{r7, pc}

08006cae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b086      	sub	sp, #24
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cc2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10e      	bne.n	8006cea <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d14e      	bne.n	8006d72 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	0018      	movs	r0, r3
 8006cda:	f000 ff05 	bl	8007ae8 <xTaskPriorityDisinherit>
 8006cde:	0003      	movs	r3, r0
 8006ce0:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	609a      	str	r2, [r3, #8]
 8006ce8:	e043      	b.n	8006d72 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d119      	bne.n	8006d24 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6858      	ldr	r0, [r3, #4]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	0019      	movs	r1, r3
 8006cfc:	f001 fddc 	bl	80088b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d08:	18d2      	adds	r2, r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d32b      	bcc.n	8006d72 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	605a      	str	r2, [r3, #4]
 8006d22:	e026      	b.n	8006d72 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	68d8      	ldr	r0, [r3, #12]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	0019      	movs	r1, r3
 8006d30:	f001 fdc2 	bl	80088b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	68da      	ldr	r2, [r3, #12]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3c:	425b      	negs	r3, r3
 8006d3e:	18d2      	adds	r2, r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	68da      	ldr	r2, [r3, #12]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d207      	bcs.n	8006d60 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d58:	425b      	negs	r3, r3
 8006d5a:	18d2      	adds	r2, r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d105      	bne.n	8006d72 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006d7a:	697b      	ldr	r3, [r7, #20]
}
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	b006      	add	sp, #24
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d018      	beq.n	8006dc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9e:	18d2      	adds	r2, r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d303      	bcc.n	8006db8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68d9      	ldr	r1, [r3, #12]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	f001 fd78 	bl	80088b8 <memcpy>
	}
}
 8006dc8:	46c0      	nop			@ (mov r8, r8)
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	b002      	add	sp, #8
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006dd8:	f001 faf2 	bl	80083c0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ddc:	230f      	movs	r3, #15
 8006dde:	18fb      	adds	r3, r7, r3
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	2145      	movs	r1, #69	@ 0x45
 8006de4:	5c52      	ldrb	r2, [r2, r1]
 8006de6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006de8:	e013      	b.n	8006e12 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d016      	beq.n	8006e20 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	3324      	adds	r3, #36	@ 0x24
 8006df6:	0018      	movs	r0, r3
 8006df8:	f000 fcc2 	bl	8007780 <xTaskRemoveFromEventList>
 8006dfc:	1e03      	subs	r3, r0, #0
 8006dfe:	d001      	beq.n	8006e04 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e00:	f000 fd82 	bl	8007908 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e04:	210f      	movs	r1, #15
 8006e06:	187b      	adds	r3, r7, r1
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	187b      	adds	r3, r7, r1
 8006e10:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e12:	230f      	movs	r3, #15
 8006e14:	18fb      	adds	r3, r7, r3
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	b25b      	sxtb	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	dce5      	bgt.n	8006dea <prvUnlockQueue+0x1a>
 8006e1e:	e000      	b.n	8006e22 <prvUnlockQueue+0x52>
					break;
 8006e20:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2245      	movs	r2, #69	@ 0x45
 8006e26:	21ff      	movs	r1, #255	@ 0xff
 8006e28:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006e2a:	f001 fadb 	bl	80083e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e2e:	f001 fac7 	bl	80083c0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e32:	230e      	movs	r3, #14
 8006e34:	18fb      	adds	r3, r7, r3
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	2144      	movs	r1, #68	@ 0x44
 8006e3a:	5c52      	ldrb	r2, [r2, r1]
 8006e3c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e3e:	e013      	b.n	8006e68 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d016      	beq.n	8006e76 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3310      	adds	r3, #16
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	f000 fc97 	bl	8007780 <xTaskRemoveFromEventList>
 8006e52:	1e03      	subs	r3, r0, #0
 8006e54:	d001      	beq.n	8006e5a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8006e56:	f000 fd57 	bl	8007908 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e5a:	210e      	movs	r1, #14
 8006e5c:	187b      	adds	r3, r7, r1
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	187b      	adds	r3, r7, r1
 8006e66:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e68:	230e      	movs	r3, #14
 8006e6a:	18fb      	adds	r3, r7, r3
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	b25b      	sxtb	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	dce5      	bgt.n	8006e40 <prvUnlockQueue+0x70>
 8006e74:	e000      	b.n	8006e78 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8006e76:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2244      	movs	r2, #68	@ 0x44
 8006e7c:	21ff      	movs	r1, #255	@ 0xff
 8006e7e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006e80:	f001 fab0 	bl	80083e4 <vPortExitCritical>
}
 8006e84:	46c0      	nop			@ (mov r8, r8)
 8006e86:	46bd      	mov	sp, r7
 8006e88:	b004      	add	sp, #16
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e94:	f001 fa94 	bl	80083c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d102      	bne.n	8006ea6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	60fb      	str	r3, [r7, #12]
 8006ea4:	e001      	b.n	8006eaa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006eaa:	f001 fa9b 	bl	80083e4 <vPortExitCritical>

	return xReturn;
 8006eae:	68fb      	ldr	r3, [r7, #12]
}
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b004      	add	sp, #16
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ec0:	f001 fa7e 	bl	80083c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d102      	bne.n	8006ed6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	e001      	b.n	8006eda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006eda:	f001 fa83 	bl	80083e4 <vPortExitCritical>

	return xReturn;
 8006ede:	68fb      	ldr	r3, [r7, #12]
}
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	b004      	add	sp, #16
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60fb      	str	r3, [r7, #12]
 8006ef6:	e015      	b.n	8006f24 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8006f34 <vQueueAddToRegistry+0x4c>)
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	00d2      	lsls	r2, r2, #3
 8006efe:	58d3      	ldr	r3, [r2, r3]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10c      	bne.n	8006f1e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f04:	4b0b      	ldr	r3, [pc, #44]	@ (8006f34 <vQueueAddToRegistry+0x4c>)
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	00d2      	lsls	r2, r2, #3
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f0e:	4a09      	ldr	r2, [pc, #36]	@ (8006f34 <vQueueAddToRegistry+0x4c>)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	18d3      	adds	r3, r2, r3
 8006f16:	3304      	adds	r3, #4
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f1c:	e006      	b.n	8006f2c <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3301      	adds	r3, #1
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2b07      	cmp	r3, #7
 8006f28:	d9e6      	bls.n	8006ef8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f2a:	46c0      	nop			@ (mov r8, r8)
 8006f2c:	46c0      	nop			@ (mov r8, r8)
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	b004      	add	sp, #16
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	200008e4 	.word	0x200008e4

08006f38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f48:	f001 fa3a 	bl	80083c0 <vPortEnterCritical>
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	2244      	movs	r2, #68	@ 0x44
 8006f50:	5c9b      	ldrb	r3, [r3, r2]
 8006f52:	b25b      	sxtb	r3, r3
 8006f54:	3301      	adds	r3, #1
 8006f56:	d103      	bne.n	8006f60 <vQueueWaitForMessageRestricted+0x28>
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2244      	movs	r2, #68	@ 0x44
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	5499      	strb	r1, [r3, r2]
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	2245      	movs	r2, #69	@ 0x45
 8006f64:	5c9b      	ldrb	r3, [r3, r2]
 8006f66:	b25b      	sxtb	r3, r3
 8006f68:	3301      	adds	r3, #1
 8006f6a:	d103      	bne.n	8006f74 <vQueueWaitForMessageRestricted+0x3c>
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	2245      	movs	r2, #69	@ 0x45
 8006f70:	2100      	movs	r1, #0
 8006f72:	5499      	strb	r1, [r3, r2]
 8006f74:	f001 fa36 	bl	80083e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d106      	bne.n	8006f8e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	3324      	adds	r3, #36	@ 0x24
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	68b9      	ldr	r1, [r7, #8]
 8006f88:	0018      	movs	r0, r3
 8006f8a:	f000 fbd1 	bl	8007730 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	0018      	movs	r0, r3
 8006f92:	f7ff ff1d 	bl	8006dd0 <prvUnlockQueue>
	}
 8006f96:	46c0      	nop			@ (mov r8, r8)
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	b006      	add	sp, #24
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f9e:	b590      	push	{r4, r7, lr}
 8006fa0:	b08d      	sub	sp, #52	@ 0x34
 8006fa2:	af04      	add	r7, sp, #16
 8006fa4:	60f8      	str	r0, [r7, #12]
 8006fa6:	60b9      	str	r1, [r7, #8]
 8006fa8:	607a      	str	r2, [r7, #4]
 8006faa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d102      	bne.n	8006fb8 <xTaskCreateStatic+0x1a>
 8006fb2:	b672      	cpsid	i
 8006fb4:	46c0      	nop			@ (mov r8, r8)
 8006fb6:	e7fd      	b.n	8006fb4 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d102      	bne.n	8006fc4 <xTaskCreateStatic+0x26>
 8006fbe:	b672      	cpsid	i
 8006fc0:	46c0      	nop			@ (mov r8, r8)
 8006fc2:	e7fd      	b.n	8006fc0 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006fc4:	235c      	movs	r3, #92	@ 0x5c
 8006fc6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2b5c      	cmp	r3, #92	@ 0x5c
 8006fcc:	d002      	beq.n	8006fd4 <xTaskCreateStatic+0x36>
 8006fce:	b672      	cpsid	i
 8006fd0:	46c0      	nop			@ (mov r8, r8)
 8006fd2:	e7fd      	b.n	8006fd0 <xTaskCreateStatic+0x32>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006fd4:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d020      	beq.n	800701e <xTaskCreateStatic+0x80>
 8006fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d01d      	beq.n	800701e <xTaskCreateStatic+0x80>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe4:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	2259      	movs	r2, #89	@ 0x59
 8006ff0:	2102      	movs	r1, #2
 8006ff2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ff4:	683c      	ldr	r4, [r7, #0]
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	68b9      	ldr	r1, [r7, #8]
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	9303      	str	r3, [sp, #12]
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	9302      	str	r3, [sp, #8]
 8007004:	2318      	movs	r3, #24
 8007006:	18fb      	adds	r3, r7, r3
 8007008:	9301      	str	r3, [sp, #4]
 800700a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	0023      	movs	r3, r4
 8007010:	f000 f858 	bl	80070c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	0018      	movs	r0, r3
 8007018:	f000 f8de 	bl	80071d8 <prvAddNewTaskToReadyList>
 800701c:	e001      	b.n	8007022 <xTaskCreateStatic+0x84>
		}
		else
		{
			xReturn = NULL;
 800701e:	2300      	movs	r3, #0
 8007020:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007022:	69bb      	ldr	r3, [r7, #24]
	}
 8007024:	0018      	movs	r0, r3
 8007026:	46bd      	mov	sp, r7
 8007028:	b009      	add	sp, #36	@ 0x24
 800702a:	bd90      	pop	{r4, r7, pc}

0800702c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800702c:	b590      	push	{r4, r7, lr}
 800702e:	b08d      	sub	sp, #52	@ 0x34
 8007030:	af04      	add	r7, sp, #16
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	603b      	str	r3, [r7, #0]
 8007038:	1dbb      	adds	r3, r7, #6
 800703a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800703c:	1dbb      	adds	r3, r7, #6
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	0018      	movs	r0, r3
 8007044:	f001 fa54 	bl	80084f0 <pvPortMalloc>
 8007048:	0003      	movs	r3, r0
 800704a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d010      	beq.n	8007074 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007052:	205c      	movs	r0, #92	@ 0x5c
 8007054:	f001 fa4c 	bl	80084f0 <pvPortMalloc>
 8007058:	0003      	movs	r3, r0
 800705a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	631a      	str	r2, [r3, #48]	@ 0x30
 8007068:	e006      	b.n	8007078 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	0018      	movs	r0, r3
 800706e:	f001 faef 	bl	8008650 <vPortFree>
 8007072:	e001      	b.n	8007078 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007074:	2300      	movs	r3, #0
 8007076:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d01a      	beq.n	80070b4 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	2259      	movs	r2, #89	@ 0x59
 8007082:	2100      	movs	r1, #0
 8007084:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007086:	1dbb      	adds	r3, r7, #6
 8007088:	881a      	ldrh	r2, [r3, #0]
 800708a:	683c      	ldr	r4, [r7, #0]
 800708c:	68b9      	ldr	r1, [r7, #8]
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	2300      	movs	r3, #0
 8007092:	9303      	str	r3, [sp, #12]
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	9302      	str	r3, [sp, #8]
 8007098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800709a:	9301      	str	r3, [sp, #4]
 800709c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	0023      	movs	r3, r4
 80070a2:	f000 f80f 	bl	80070c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	0018      	movs	r0, r3
 80070aa:	f000 f895 	bl	80071d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070ae:	2301      	movs	r3, #1
 80070b0:	61bb      	str	r3, [r7, #24]
 80070b2:	e002      	b.n	80070ba <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070b4:	2301      	movs	r3, #1
 80070b6:	425b      	negs	r3, r3
 80070b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80070ba:	69bb      	ldr	r3, [r7, #24]
	}
 80070bc:	0018      	movs	r0, r3
 80070be:	46bd      	mov	sp, r7
 80070c0:	b009      	add	sp, #36	@ 0x24
 80070c2:	bd90      	pop	{r4, r7, pc}

080070c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80070d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	001a      	movs	r2, r3
 80070dc:	21a5      	movs	r1, #165	@ 0xa5
 80070de:	f001 fbbf 	bl	8008860 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80070e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	493a      	ldr	r1, [pc, #232]	@ (80071d4 <prvInitialiseNewTask+0x110>)
 80070ea:	468c      	mov	ip, r1
 80070ec:	4463      	add	r3, ip
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	18d3      	adds	r3, r2, r3
 80070f2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	2207      	movs	r2, #7
 80070f8:	4393      	bics	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	2207      	movs	r2, #7
 8007100:	4013      	ands	r3, r2
 8007102:	d002      	beq.n	800710a <prvInitialiseNewTask+0x46>
 8007104:	b672      	cpsid	i
 8007106:	46c0      	nop			@ (mov r8, r8)
 8007108:	e7fd      	b.n	8007106 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d020      	beq.n	8007152 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007110:	2300      	movs	r3, #0
 8007112:	617b      	str	r3, [r7, #20]
 8007114:	e013      	b.n	800713e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	18d3      	adds	r3, r2, r3
 800711c:	7818      	ldrb	r0, [r3, #0]
 800711e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007120:	2134      	movs	r1, #52	@ 0x34
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	18d3      	adds	r3, r2, r3
 8007126:	185b      	adds	r3, r3, r1
 8007128:	1c02      	adds	r2, r0, #0
 800712a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	18d3      	adds	r3, r2, r3
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d006      	beq.n	8007146 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	3301      	adds	r3, #1
 800713c:	617b      	str	r3, [r7, #20]
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b0f      	cmp	r3, #15
 8007142:	d9e8      	bls.n	8007116 <prvInitialiseNewTask+0x52>
 8007144:	e000      	b.n	8007148 <prvInitialiseNewTask+0x84>
			{
				break;
 8007146:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714a:	2243      	movs	r2, #67	@ 0x43
 800714c:	2100      	movs	r1, #0
 800714e:	5499      	strb	r1, [r3, r2]
 8007150:	e003      	b.n	800715a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007154:	2234      	movs	r2, #52	@ 0x34
 8007156:	2100      	movs	r1, #0
 8007158:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	2b37      	cmp	r3, #55	@ 0x37
 800715e:	d901      	bls.n	8007164 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007160:	2337      	movs	r3, #55	@ 0x37
 8007162:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007166:	6a3a      	ldr	r2, [r7, #32]
 8007168:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800716a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716c:	6a3a      	ldr	r2, [r7, #32]
 800716e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007172:	2200      	movs	r2, #0
 8007174:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007178:	3304      	adds	r3, #4
 800717a:	0018      	movs	r0, r3
 800717c:	f7ff fa48 	bl	8006610 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007182:	3318      	adds	r3, #24
 8007184:	0018      	movs	r0, r3
 8007186:	f7ff fa43 	bl	8006610 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800718a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800718e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	2238      	movs	r2, #56	@ 0x38
 8007194:	1ad2      	subs	r2, r2, r3
 8007196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007198:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800719a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800719e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a2:	2200      	movs	r2, #0
 80071a4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a8:	2258      	movs	r2, #88	@ 0x58
 80071aa:	2100      	movs	r1, #0
 80071ac:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	68f9      	ldr	r1, [r7, #12]
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	0018      	movs	r0, r3
 80071b6:	f001 f867 	bl	8008288 <pxPortInitialiseStack>
 80071ba:	0002      	movs	r2, r0
 80071bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80071c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d002      	beq.n	80071cc <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071cc:	46c0      	nop			@ (mov r8, r8)
 80071ce:	46bd      	mov	sp, r7
 80071d0:	b006      	add	sp, #24
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	3fffffff 	.word	0x3fffffff

080071d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80071e0:	f001 f8ee 	bl	80083c0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80071e4:	4b2a      	ldr	r3, [pc, #168]	@ (8007290 <prvAddNewTaskToReadyList+0xb8>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	4b29      	ldr	r3, [pc, #164]	@ (8007290 <prvAddNewTaskToReadyList+0xb8>)
 80071ec:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80071ee:	4b29      	ldr	r3, [pc, #164]	@ (8007294 <prvAddNewTaskToReadyList+0xbc>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d109      	bne.n	800720a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071f6:	4b27      	ldr	r3, [pc, #156]	@ (8007294 <prvAddNewTaskToReadyList+0xbc>)
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071fc:	4b24      	ldr	r3, [pc, #144]	@ (8007290 <prvAddNewTaskToReadyList+0xb8>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d110      	bne.n	8007226 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007204:	f000 fb9a 	bl	800793c <prvInitialiseTaskLists>
 8007208:	e00d      	b.n	8007226 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800720a:	4b23      	ldr	r3, [pc, #140]	@ (8007298 <prvAddNewTaskToReadyList+0xc0>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d109      	bne.n	8007226 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007212:	4b20      	ldr	r3, [pc, #128]	@ (8007294 <prvAddNewTaskToReadyList+0xbc>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721c:	429a      	cmp	r2, r3
 800721e:	d802      	bhi.n	8007226 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007220:	4b1c      	ldr	r3, [pc, #112]	@ (8007294 <prvAddNewTaskToReadyList+0xbc>)
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007226:	4b1d      	ldr	r3, [pc, #116]	@ (800729c <prvAddNewTaskToReadyList+0xc4>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	4b1b      	ldr	r3, [pc, #108]	@ (800729c <prvAddNewTaskToReadyList+0xc4>)
 800722e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007230:	4b1a      	ldr	r3, [pc, #104]	@ (800729c <prvAddNewTaskToReadyList+0xc4>)
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800723c:	4b18      	ldr	r3, [pc, #96]	@ (80072a0 <prvAddNewTaskToReadyList+0xc8>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	429a      	cmp	r2, r3
 8007242:	d903      	bls.n	800724c <prvAddNewTaskToReadyList+0x74>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007248:	4b15      	ldr	r3, [pc, #84]	@ (80072a0 <prvAddNewTaskToReadyList+0xc8>)
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007250:	0013      	movs	r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	189b      	adds	r3, r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4a12      	ldr	r2, [pc, #72]	@ (80072a4 <prvAddNewTaskToReadyList+0xcc>)
 800725a:	189a      	adds	r2, r3, r2
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	3304      	adds	r3, #4
 8007260:	0019      	movs	r1, r3
 8007262:	0010      	movs	r0, r2
 8007264:	f7ff f9df 	bl	8006626 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007268:	f001 f8bc 	bl	80083e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800726c:	4b0a      	ldr	r3, [pc, #40]	@ (8007298 <prvAddNewTaskToReadyList+0xc0>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d008      	beq.n	8007286 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007274:	4b07      	ldr	r3, [pc, #28]	@ (8007294 <prvAddNewTaskToReadyList+0xbc>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727e:	429a      	cmp	r2, r3
 8007280:	d201      	bcs.n	8007286 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007282:	f001 f88d 	bl	80083a0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007286:	46c0      	nop			@ (mov r8, r8)
 8007288:	46bd      	mov	sp, r7
 800728a:	b002      	add	sp, #8
 800728c:	bd80      	pop	{r7, pc}
 800728e:	46c0      	nop			@ (mov r8, r8)
 8007290:	20000df8 	.word	0x20000df8
 8007294:	20000924 	.word	0x20000924
 8007298:	20000e04 	.word	0x20000e04
 800729c:	20000e14 	.word	0x20000e14
 80072a0:	20000e00 	.word	0x20000e00
 80072a4:	20000928 	.word	0x20000928

080072a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80072b0:	2300      	movs	r3, #0
 80072b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d011      	beq.n	80072de <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80072ba:	4b0d      	ldr	r3, [pc, #52]	@ (80072f0 <vTaskDelay+0x48>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <vTaskDelay+0x20>
 80072c2:	b672      	cpsid	i
 80072c4:	46c0      	nop			@ (mov r8, r8)
 80072c6:	e7fd      	b.n	80072c4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80072c8:	f000 f86a 	bl	80073a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2100      	movs	r1, #0
 80072d0:	0018      	movs	r0, r3
 80072d2:	f000 fc67 	bl	8007ba4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80072d6:	f000 f86f 	bl	80073b8 <xTaskResumeAll>
 80072da:	0003      	movs	r3, r0
 80072dc:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 80072e4:	f001 f85c 	bl	80083a0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072e8:	46c0      	nop			@ (mov r8, r8)
 80072ea:	46bd      	mov	sp, r7
 80072ec:	b004      	add	sp, #16
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	20000e20 	.word	0x20000e20

080072f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072f4:	b590      	push	{r4, r7, lr}
 80072f6:	b089      	sub	sp, #36	@ 0x24
 80072f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072fa:	2300      	movs	r3, #0
 80072fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072fe:	2300      	movs	r3, #0
 8007300:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007302:	003a      	movs	r2, r7
 8007304:	1d39      	adds	r1, r7, #4
 8007306:	2308      	movs	r3, #8
 8007308:	18fb      	adds	r3, r7, r3
 800730a:	0018      	movs	r0, r3
 800730c:	f7ff f932 	bl	8006574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007310:	683c      	ldr	r4, [r7, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	491c      	ldr	r1, [pc, #112]	@ (8007388 <vTaskStartScheduler+0x94>)
 8007318:	481c      	ldr	r0, [pc, #112]	@ (800738c <vTaskStartScheduler+0x98>)
 800731a:	9202      	str	r2, [sp, #8]
 800731c:	9301      	str	r3, [sp, #4]
 800731e:	2300      	movs	r3, #0
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	2300      	movs	r3, #0
 8007324:	0022      	movs	r2, r4
 8007326:	f7ff fe3a 	bl	8006f9e <xTaskCreateStatic>
 800732a:	0002      	movs	r2, r0
 800732c:	4b18      	ldr	r3, [pc, #96]	@ (8007390 <vTaskStartScheduler+0x9c>)
 800732e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007330:	4b17      	ldr	r3, [pc, #92]	@ (8007390 <vTaskStartScheduler+0x9c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007338:	2301      	movs	r3, #1
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	e001      	b.n	8007342 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800733e:	2300      	movs	r3, #0
 8007340:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d103      	bne.n	8007350 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8007348:	f000 fc80 	bl	8007c4c <xTimerCreateTimerTask>
 800734c:	0003      	movs	r3, r0
 800734e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d10d      	bne.n	8007372 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8007356:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007358:	4b0e      	ldr	r3, [pc, #56]	@ (8007394 <vTaskStartScheduler+0xa0>)
 800735a:	2201      	movs	r2, #1
 800735c:	4252      	negs	r2, r2
 800735e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007360:	4b0d      	ldr	r3, [pc, #52]	@ (8007398 <vTaskStartScheduler+0xa4>)
 8007362:	2201      	movs	r2, #1
 8007364:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007366:	4b0d      	ldr	r3, [pc, #52]	@ (800739c <vTaskStartScheduler+0xa8>)
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800736c:	f000 fff4 	bl	8008358 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007370:	e005      	b.n	800737e <vTaskStartScheduler+0x8a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	3301      	adds	r3, #1
 8007376:	d102      	bne.n	800737e <vTaskStartScheduler+0x8a>
 8007378:	b672      	cpsid	i
 800737a:	46c0      	nop			@ (mov r8, r8)
 800737c:	e7fd      	b.n	800737a <vTaskStartScheduler+0x86>
}
 800737e:	46c0      	nop			@ (mov r8, r8)
 8007380:	46bd      	mov	sp, r7
 8007382:	b005      	add	sp, #20
 8007384:	bd90      	pop	{r4, r7, pc}
 8007386:	46c0      	nop			@ (mov r8, r8)
 8007388:	08008910 	.word	0x08008910
 800738c:	0800791d 	.word	0x0800791d
 8007390:	20000e1c 	.word	0x20000e1c
 8007394:	20000e18 	.word	0x20000e18
 8007398:	20000e04 	.word	0x20000e04
 800739c:	20000dfc 	.word	0x20000dfc

080073a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80073a4:	4b03      	ldr	r3, [pc, #12]	@ (80073b4 <vTaskSuspendAll+0x14>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	4b02      	ldr	r3, [pc, #8]	@ (80073b4 <vTaskSuspendAll+0x14>)
 80073ac:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80073ae:	46c0      	nop			@ (mov r8, r8)
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	20000e20 	.word	0x20000e20

080073b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073be:	2300      	movs	r3, #0
 80073c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073c6:	4b3a      	ldr	r3, [pc, #232]	@ (80074b0 <xTaskResumeAll+0xf8>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d102      	bne.n	80073d4 <xTaskResumeAll+0x1c>
 80073ce:	b672      	cpsid	i
 80073d0:	46c0      	nop			@ (mov r8, r8)
 80073d2:	e7fd      	b.n	80073d0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073d4:	f000 fff4 	bl	80083c0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073d8:	4b35      	ldr	r3, [pc, #212]	@ (80074b0 <xTaskResumeAll+0xf8>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	1e5a      	subs	r2, r3, #1
 80073de:	4b34      	ldr	r3, [pc, #208]	@ (80074b0 <xTaskResumeAll+0xf8>)
 80073e0:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073e2:	4b33      	ldr	r3, [pc, #204]	@ (80074b0 <xTaskResumeAll+0xf8>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d15b      	bne.n	80074a2 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073ea:	4b32      	ldr	r3, [pc, #200]	@ (80074b4 <xTaskResumeAll+0xfc>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d057      	beq.n	80074a2 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073f2:	e02f      	b.n	8007454 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f4:	4b30      	ldr	r3, [pc, #192]	@ (80074b8 <xTaskResumeAll+0x100>)
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3318      	adds	r3, #24
 8007400:	0018      	movs	r0, r3
 8007402:	f7ff f968 	bl	80066d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	3304      	adds	r3, #4
 800740a:	0018      	movs	r0, r3
 800740c:	f7ff f963 	bl	80066d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007414:	4b29      	ldr	r3, [pc, #164]	@ (80074bc <xTaskResumeAll+0x104>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	429a      	cmp	r2, r3
 800741a:	d903      	bls.n	8007424 <xTaskResumeAll+0x6c>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007420:	4b26      	ldr	r3, [pc, #152]	@ (80074bc <xTaskResumeAll+0x104>)
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007428:	0013      	movs	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	189b      	adds	r3, r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4a23      	ldr	r2, [pc, #140]	@ (80074c0 <xTaskResumeAll+0x108>)
 8007432:	189a      	adds	r2, r3, r2
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3304      	adds	r3, #4
 8007438:	0019      	movs	r1, r3
 800743a:	0010      	movs	r0, r2
 800743c:	f7ff f8f3 	bl	8006626 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007444:	4b1f      	ldr	r3, [pc, #124]	@ (80074c4 <xTaskResumeAll+0x10c>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800744a:	429a      	cmp	r2, r3
 800744c:	d302      	bcc.n	8007454 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 800744e:	4b1e      	ldr	r3, [pc, #120]	@ (80074c8 <xTaskResumeAll+0x110>)
 8007450:	2201      	movs	r2, #1
 8007452:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007454:	4b18      	ldr	r3, [pc, #96]	@ (80074b8 <xTaskResumeAll+0x100>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1cb      	bne.n	80073f4 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d001      	beq.n	8007466 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007462:	f000 fb07 	bl	8007a74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007466:	4b19      	ldr	r3, [pc, #100]	@ (80074cc <xTaskResumeAll+0x114>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00f      	beq.n	8007492 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007472:	f000 f83b 	bl	80074ec <xTaskIncrementTick>
 8007476:	1e03      	subs	r3, r0, #0
 8007478:	d002      	beq.n	8007480 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 800747a:	4b13      	ldr	r3, [pc, #76]	@ (80074c8 <xTaskResumeAll+0x110>)
 800747c:	2201      	movs	r2, #1
 800747e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	3b01      	subs	r3, #1
 8007484:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1f2      	bne.n	8007472 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 800748c:	4b0f      	ldr	r3, [pc, #60]	@ (80074cc <xTaskResumeAll+0x114>)
 800748e:	2200      	movs	r2, #0
 8007490:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007492:	4b0d      	ldr	r3, [pc, #52]	@ (80074c8 <xTaskResumeAll+0x110>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800749a:	2301      	movs	r3, #1
 800749c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800749e:	f000 ff7f 	bl	80083a0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074a2:	f000 ff9f 	bl	80083e4 <vPortExitCritical>

	return xAlreadyYielded;
 80074a6:	68bb      	ldr	r3, [r7, #8]
}
 80074a8:	0018      	movs	r0, r3
 80074aa:	46bd      	mov	sp, r7
 80074ac:	b004      	add	sp, #16
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	20000e20 	.word	0x20000e20
 80074b4:	20000df8 	.word	0x20000df8
 80074b8:	20000db8 	.word	0x20000db8
 80074bc:	20000e00 	.word	0x20000e00
 80074c0:	20000928 	.word	0x20000928
 80074c4:	20000924 	.word	0x20000924
 80074c8:	20000e0c 	.word	0x20000e0c
 80074cc:	20000e08 	.word	0x20000e08

080074d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80074d6:	4b04      	ldr	r3, [pc, #16]	@ (80074e8 <xTaskGetTickCount+0x18>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80074dc:	687b      	ldr	r3, [r7, #4]
}
 80074de:	0018      	movs	r0, r3
 80074e0:	46bd      	mov	sp, r7
 80074e2:	b002      	add	sp, #8
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	46c0      	nop			@ (mov r8, r8)
 80074e8:	20000dfc 	.word	0x20000dfc

080074ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074f2:	2300      	movs	r3, #0
 80074f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074f6:	4b4a      	ldr	r3, [pc, #296]	@ (8007620 <xTaskIncrementTick+0x134>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d000      	beq.n	8007500 <xTaskIncrementTick+0x14>
 80074fe:	e085      	b.n	800760c <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007500:	4b48      	ldr	r3, [pc, #288]	@ (8007624 <xTaskIncrementTick+0x138>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3301      	adds	r3, #1
 8007506:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007508:	4b46      	ldr	r3, [pc, #280]	@ (8007624 <xTaskIncrementTick+0x138>)
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d118      	bne.n	8007546 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007514:	4b44      	ldr	r3, [pc, #272]	@ (8007628 <xTaskIncrementTick+0x13c>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d002      	beq.n	8007524 <xTaskIncrementTick+0x38>
 800751e:	b672      	cpsid	i
 8007520:	46c0      	nop			@ (mov r8, r8)
 8007522:	e7fd      	b.n	8007520 <xTaskIncrementTick+0x34>
 8007524:	4b40      	ldr	r3, [pc, #256]	@ (8007628 <xTaskIncrementTick+0x13c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	60fb      	str	r3, [r7, #12]
 800752a:	4b40      	ldr	r3, [pc, #256]	@ (800762c <xTaskIncrementTick+0x140>)
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4b3e      	ldr	r3, [pc, #248]	@ (8007628 <xTaskIncrementTick+0x13c>)
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	4b3e      	ldr	r3, [pc, #248]	@ (800762c <xTaskIncrementTick+0x140>)
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	4b3d      	ldr	r3, [pc, #244]	@ (8007630 <xTaskIncrementTick+0x144>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	1c5a      	adds	r2, r3, #1
 800753e:	4b3c      	ldr	r3, [pc, #240]	@ (8007630 <xTaskIncrementTick+0x144>)
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	f000 fa97 	bl	8007a74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007546:	4b3b      	ldr	r3, [pc, #236]	@ (8007634 <xTaskIncrementTick+0x148>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	429a      	cmp	r2, r3
 800754e:	d349      	bcc.n	80075e4 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007550:	4b35      	ldr	r3, [pc, #212]	@ (8007628 <xTaskIncrementTick+0x13c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d104      	bne.n	8007564 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800755a:	4b36      	ldr	r3, [pc, #216]	@ (8007634 <xTaskIncrementTick+0x148>)
 800755c:	2201      	movs	r2, #1
 800755e:	4252      	negs	r2, r2
 8007560:	601a      	str	r2, [r3, #0]
					break;
 8007562:	e03f      	b.n	80075e4 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007564:	4b30      	ldr	r3, [pc, #192]	@ (8007628 <xTaskIncrementTick+0x13c>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	429a      	cmp	r2, r3
 800757a:	d203      	bcs.n	8007584 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800757c:	4b2d      	ldr	r3, [pc, #180]	@ (8007634 <xTaskIncrementTick+0x148>)
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007582:	e02f      	b.n	80075e4 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	3304      	adds	r3, #4
 8007588:	0018      	movs	r0, r3
 800758a:	f7ff f8a4 	bl	80066d6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007592:	2b00      	cmp	r3, #0
 8007594:	d004      	beq.n	80075a0 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	3318      	adds	r3, #24
 800759a:	0018      	movs	r0, r3
 800759c:	f7ff f89b 	bl	80066d6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a4:	4b24      	ldr	r3, [pc, #144]	@ (8007638 <xTaskIncrementTick+0x14c>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d903      	bls.n	80075b4 <xTaskIncrementTick+0xc8>
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b0:	4b21      	ldr	r3, [pc, #132]	@ (8007638 <xTaskIncrementTick+0x14c>)
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b8:	0013      	movs	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	189b      	adds	r3, r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4a1e      	ldr	r2, [pc, #120]	@ (800763c <xTaskIncrementTick+0x150>)
 80075c2:	189a      	adds	r2, r3, r2
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	3304      	adds	r3, #4
 80075c8:	0019      	movs	r1, r3
 80075ca:	0010      	movs	r0, r2
 80075cc:	f7ff f82b 	bl	8006626 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d4:	4b1a      	ldr	r3, [pc, #104]	@ (8007640 <xTaskIncrementTick+0x154>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075da:	429a      	cmp	r2, r3
 80075dc:	d3b8      	bcc.n	8007550 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 80075de:	2301      	movs	r3, #1
 80075e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075e2:	e7b5      	b.n	8007550 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075e4:	4b16      	ldr	r3, [pc, #88]	@ (8007640 <xTaskIncrementTick+0x154>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ea:	4914      	ldr	r1, [pc, #80]	@ (800763c <xTaskIncrementTick+0x150>)
 80075ec:	0013      	movs	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	189b      	adds	r3, r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	585b      	ldr	r3, [r3, r1]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d901      	bls.n	80075fe <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 80075fa:	2301      	movs	r3, #1
 80075fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80075fe:	4b11      	ldr	r3, [pc, #68]	@ (8007644 <xTaskIncrementTick+0x158>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d007      	beq.n	8007616 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 8007606:	2301      	movs	r3, #1
 8007608:	617b      	str	r3, [r7, #20]
 800760a:	e004      	b.n	8007616 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800760c:	4b0e      	ldr	r3, [pc, #56]	@ (8007648 <xTaskIncrementTick+0x15c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	1c5a      	adds	r2, r3, #1
 8007612:	4b0d      	ldr	r3, [pc, #52]	@ (8007648 <xTaskIncrementTick+0x15c>)
 8007614:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007616:	697b      	ldr	r3, [r7, #20]
}
 8007618:	0018      	movs	r0, r3
 800761a:	46bd      	mov	sp, r7
 800761c:	b006      	add	sp, #24
 800761e:	bd80      	pop	{r7, pc}
 8007620:	20000e20 	.word	0x20000e20
 8007624:	20000dfc 	.word	0x20000dfc
 8007628:	20000db0 	.word	0x20000db0
 800762c:	20000db4 	.word	0x20000db4
 8007630:	20000e10 	.word	0x20000e10
 8007634:	20000e18 	.word	0x20000e18
 8007638:	20000e00 	.word	0x20000e00
 800763c:	20000928 	.word	0x20000928
 8007640:	20000924 	.word	0x20000924
 8007644:	20000e0c 	.word	0x20000e0c
 8007648:	20000e08 	.word	0x20000e08

0800764c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007652:	4b22      	ldr	r3, [pc, #136]	@ (80076dc <vTaskSwitchContext+0x90>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800765a:	4b21      	ldr	r3, [pc, #132]	@ (80076e0 <vTaskSwitchContext+0x94>)
 800765c:	2201      	movs	r2, #1
 800765e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007660:	e038      	b.n	80076d4 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8007662:	4b1f      	ldr	r3, [pc, #124]	@ (80076e0 <vTaskSwitchContext+0x94>)
 8007664:	2200      	movs	r2, #0
 8007666:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007668:	4b1e      	ldr	r3, [pc, #120]	@ (80076e4 <vTaskSwitchContext+0x98>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	607b      	str	r3, [r7, #4]
 800766e:	e008      	b.n	8007682 <vTaskSwitchContext+0x36>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d102      	bne.n	800767c <vTaskSwitchContext+0x30>
 8007676:	b672      	cpsid	i
 8007678:	46c0      	nop			@ (mov r8, r8)
 800767a:	e7fd      	b.n	8007678 <vTaskSwitchContext+0x2c>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3b01      	subs	r3, #1
 8007680:	607b      	str	r3, [r7, #4]
 8007682:	4919      	ldr	r1, [pc, #100]	@ (80076e8 <vTaskSwitchContext+0x9c>)
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	0013      	movs	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	189b      	adds	r3, r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	585b      	ldr	r3, [r3, r1]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d0ed      	beq.n	8007670 <vTaskSwitchContext+0x24>
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	0013      	movs	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	189b      	adds	r3, r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4a12      	ldr	r2, [pc, #72]	@ (80076e8 <vTaskSwitchContext+0x9c>)
 80076a0:	189b      	adds	r3, r3, r2
 80076a2:	603b      	str	r3, [r7, #0]
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	605a      	str	r2, [r3, #4]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	3308      	adds	r3, #8
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d104      	bne.n	80076c4 <vTaskSwitchContext+0x78>
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	605a      	str	r2, [r3, #4]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	68da      	ldr	r2, [r3, #12]
 80076ca:	4b08      	ldr	r3, [pc, #32]	@ (80076ec <vTaskSwitchContext+0xa0>)
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	4b05      	ldr	r3, [pc, #20]	@ (80076e4 <vTaskSwitchContext+0x98>)
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	601a      	str	r2, [r3, #0]
}
 80076d4:	46c0      	nop			@ (mov r8, r8)
 80076d6:	46bd      	mov	sp, r7
 80076d8:	b002      	add	sp, #8
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	20000e20 	.word	0x20000e20
 80076e0:	20000e0c 	.word	0x20000e0c
 80076e4:	20000e00 	.word	0x20000e00
 80076e8:	20000928 	.word	0x20000928
 80076ec:	20000924 	.word	0x20000924

080076f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d102      	bne.n	8007706 <vTaskPlaceOnEventList+0x16>
 8007700:	b672      	cpsid	i
 8007702:	46c0      	nop			@ (mov r8, r8)
 8007704:	e7fd      	b.n	8007702 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007706:	4b09      	ldr	r3, [pc, #36]	@ (800772c <vTaskPlaceOnEventList+0x3c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3318      	adds	r3, #24
 800770c:	001a      	movs	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	0011      	movs	r1, r2
 8007712:	0018      	movs	r0, r3
 8007714:	f7fe ffa9 	bl	800666a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	2101      	movs	r1, #1
 800771c:	0018      	movs	r0, r3
 800771e:	f000 fa41 	bl	8007ba4 <prvAddCurrentTaskToDelayedList>
}
 8007722:	46c0      	nop			@ (mov r8, r8)
 8007724:	46bd      	mov	sp, r7
 8007726:	b002      	add	sp, #8
 8007728:	bd80      	pop	{r7, pc}
 800772a:	46c0      	nop			@ (mov r8, r8)
 800772c:	20000924 	.word	0x20000924

08007730 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d102      	bne.n	8007748 <vTaskPlaceOnEventListRestricted+0x18>
 8007742:	b672      	cpsid	i
 8007744:	46c0      	nop			@ (mov r8, r8)
 8007746:	e7fd      	b.n	8007744 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007748:	4b0c      	ldr	r3, [pc, #48]	@ (800777c <vTaskPlaceOnEventListRestricted+0x4c>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3318      	adds	r3, #24
 800774e:	001a      	movs	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	0011      	movs	r1, r2
 8007754:	0018      	movs	r0, r3
 8007756:	f7fe ff66 	bl	8006626 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 8007760:	2301      	movs	r3, #1
 8007762:	425b      	negs	r3, r3
 8007764:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	0011      	movs	r1, r2
 800776c:	0018      	movs	r0, r3
 800776e:	f000 fa19 	bl	8007ba4 <prvAddCurrentTaskToDelayedList>
	}
 8007772:	46c0      	nop			@ (mov r8, r8)
 8007774:	46bd      	mov	sp, r7
 8007776:	b004      	add	sp, #16
 8007778:	bd80      	pop	{r7, pc}
 800777a:	46c0      	nop			@ (mov r8, r8)
 800777c:	20000924 	.word	0x20000924

08007780 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d102      	bne.n	800779c <xTaskRemoveFromEventList+0x1c>
 8007796:	b672      	cpsid	i
 8007798:	46c0      	nop			@ (mov r8, r8)
 800779a:	e7fd      	b.n	8007798 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	3318      	adds	r3, #24
 80077a0:	0018      	movs	r0, r3
 80077a2:	f7fe ff98 	bl	80066d6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077a6:	4b1f      	ldr	r3, [pc, #124]	@ (8007824 <xTaskRemoveFromEventList+0xa4>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d11d      	bne.n	80077ea <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	3304      	adds	r3, #4
 80077b2:	0018      	movs	r0, r3
 80077b4:	f7fe ff8f 	bl	80066d6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007828 <xTaskRemoveFromEventList+0xa8>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d903      	bls.n	80077cc <xTaskRemoveFromEventList+0x4c>
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077c8:	4b17      	ldr	r3, [pc, #92]	@ (8007828 <xTaskRemoveFromEventList+0xa8>)
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077d0:	0013      	movs	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	189b      	adds	r3, r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4a14      	ldr	r2, [pc, #80]	@ (800782c <xTaskRemoveFromEventList+0xac>)
 80077da:	189a      	adds	r2, r3, r2
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	3304      	adds	r3, #4
 80077e0:	0019      	movs	r1, r3
 80077e2:	0010      	movs	r0, r2
 80077e4:	f7fe ff1f 	bl	8006626 <vListInsertEnd>
 80077e8:	e007      	b.n	80077fa <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	3318      	adds	r3, #24
 80077ee:	001a      	movs	r2, r3
 80077f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007830 <xTaskRemoveFromEventList+0xb0>)
 80077f2:	0011      	movs	r1, r2
 80077f4:	0018      	movs	r0, r3
 80077f6:	f7fe ff16 	bl	8006626 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007834 <xTaskRemoveFromEventList+0xb4>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007804:	429a      	cmp	r2, r3
 8007806:	d905      	bls.n	8007814 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007808:	2301      	movs	r3, #1
 800780a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800780c:	4b0a      	ldr	r3, [pc, #40]	@ (8007838 <xTaskRemoveFromEventList+0xb8>)
 800780e:	2201      	movs	r2, #1
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	e001      	b.n	8007818 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8007814:	2300      	movs	r3, #0
 8007816:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8007818:	68fb      	ldr	r3, [r7, #12]
}
 800781a:	0018      	movs	r0, r3
 800781c:	46bd      	mov	sp, r7
 800781e:	b004      	add	sp, #16
 8007820:	bd80      	pop	{r7, pc}
 8007822:	46c0      	nop			@ (mov r8, r8)
 8007824:	20000e20 	.word	0x20000e20
 8007828:	20000e00 	.word	0x20000e00
 800782c:	20000928 	.word	0x20000928
 8007830:	20000db8 	.word	0x20000db8
 8007834:	20000924 	.word	0x20000924
 8007838:	20000e0c 	.word	0x20000e0c

0800783c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007844:	4b05      	ldr	r3, [pc, #20]	@ (800785c <vTaskInternalSetTimeOutState+0x20>)
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800784c:	4b04      	ldr	r3, [pc, #16]	@ (8007860 <vTaskInternalSetTimeOutState+0x24>)
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	605a      	str	r2, [r3, #4]
}
 8007854:	46c0      	nop			@ (mov r8, r8)
 8007856:	46bd      	mov	sp, r7
 8007858:	b002      	add	sp, #8
 800785a:	bd80      	pop	{r7, pc}
 800785c:	20000e10 	.word	0x20000e10
 8007860:	20000dfc 	.word	0x20000dfc

08007864 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b086      	sub	sp, #24
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d102      	bne.n	800787a <xTaskCheckForTimeOut+0x16>
 8007874:	b672      	cpsid	i
 8007876:	46c0      	nop			@ (mov r8, r8)
 8007878:	e7fd      	b.n	8007876 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d102      	bne.n	8007886 <xTaskCheckForTimeOut+0x22>
 8007880:	b672      	cpsid	i
 8007882:	46c0      	nop			@ (mov r8, r8)
 8007884:	e7fd      	b.n	8007882 <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 8007886:	f000 fd9b 	bl	80083c0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800788a:	4b1d      	ldr	r3, [pc, #116]	@ (8007900 <xTaskCheckForTimeOut+0x9c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	3301      	adds	r3, #1
 80078a0:	d102      	bne.n	80078a8 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80078a2:	2300      	movs	r3, #0
 80078a4:	617b      	str	r3, [r7, #20]
 80078a6:	e024      	b.n	80078f2 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	4b15      	ldr	r3, [pc, #84]	@ (8007904 <xTaskCheckForTimeOut+0xa0>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d007      	beq.n	80078c4 <xTaskCheckForTimeOut+0x60>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d302      	bcc.n	80078c4 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80078be:	2301      	movs	r3, #1
 80078c0:	617b      	str	r3, [r7, #20]
 80078c2:	e016      	b.n	80078f2 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d20c      	bcs.n	80078e8 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	1ad2      	subs	r2, r2, r3
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	0018      	movs	r0, r3
 80078de:	f7ff ffad 	bl	800783c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80078e2:	2300      	movs	r3, #0
 80078e4:	617b      	str	r3, [r7, #20]
 80078e6:	e004      	b.n	80078f2 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2200      	movs	r2, #0
 80078ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80078ee:	2301      	movs	r3, #1
 80078f0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80078f2:	f000 fd77 	bl	80083e4 <vPortExitCritical>

	return xReturn;
 80078f6:	697b      	ldr	r3, [r7, #20]
}
 80078f8:	0018      	movs	r0, r3
 80078fa:	46bd      	mov	sp, r7
 80078fc:	b006      	add	sp, #24
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	20000dfc 	.word	0x20000dfc
 8007904:	20000e10 	.word	0x20000e10

08007908 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800790c:	4b02      	ldr	r3, [pc, #8]	@ (8007918 <vTaskMissedYield+0x10>)
 800790e:	2201      	movs	r2, #1
 8007910:	601a      	str	r2, [r3, #0]
}
 8007912:	46c0      	nop			@ (mov r8, r8)
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	20000e0c 	.word	0x20000e0c

0800791c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007924:	f000 f84e 	bl	80079c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007928:	4b03      	ldr	r3, [pc, #12]	@ (8007938 <prvIdleTask+0x1c>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d9f9      	bls.n	8007924 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007930:	f000 fd36 	bl	80083a0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8007934:	e7f6      	b.n	8007924 <prvIdleTask+0x8>
 8007936:	46c0      	nop			@ (mov r8, r8)
 8007938:	20000928 	.word	0x20000928

0800793c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007942:	2300      	movs	r3, #0
 8007944:	607b      	str	r3, [r7, #4]
 8007946:	e00c      	b.n	8007962 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	0013      	movs	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	189b      	adds	r3, r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4a14      	ldr	r2, [pc, #80]	@ (80079a4 <prvInitialiseTaskLists+0x68>)
 8007954:	189b      	adds	r3, r3, r2
 8007956:	0018      	movs	r0, r3
 8007958:	f7fe fe3c 	bl	80065d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	3301      	adds	r3, #1
 8007960:	607b      	str	r3, [r7, #4]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b37      	cmp	r3, #55	@ 0x37
 8007966:	d9ef      	bls.n	8007948 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007968:	4b0f      	ldr	r3, [pc, #60]	@ (80079a8 <prvInitialiseTaskLists+0x6c>)
 800796a:	0018      	movs	r0, r3
 800796c:	f7fe fe32 	bl	80065d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007970:	4b0e      	ldr	r3, [pc, #56]	@ (80079ac <prvInitialiseTaskLists+0x70>)
 8007972:	0018      	movs	r0, r3
 8007974:	f7fe fe2e 	bl	80065d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007978:	4b0d      	ldr	r3, [pc, #52]	@ (80079b0 <prvInitialiseTaskLists+0x74>)
 800797a:	0018      	movs	r0, r3
 800797c:	f7fe fe2a 	bl	80065d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007980:	4b0c      	ldr	r3, [pc, #48]	@ (80079b4 <prvInitialiseTaskLists+0x78>)
 8007982:	0018      	movs	r0, r3
 8007984:	f7fe fe26 	bl	80065d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007988:	4b0b      	ldr	r3, [pc, #44]	@ (80079b8 <prvInitialiseTaskLists+0x7c>)
 800798a:	0018      	movs	r0, r3
 800798c:	f7fe fe22 	bl	80065d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007990:	4b0a      	ldr	r3, [pc, #40]	@ (80079bc <prvInitialiseTaskLists+0x80>)
 8007992:	4a05      	ldr	r2, [pc, #20]	@ (80079a8 <prvInitialiseTaskLists+0x6c>)
 8007994:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007996:	4b0a      	ldr	r3, [pc, #40]	@ (80079c0 <prvInitialiseTaskLists+0x84>)
 8007998:	4a04      	ldr	r2, [pc, #16]	@ (80079ac <prvInitialiseTaskLists+0x70>)
 800799a:	601a      	str	r2, [r3, #0]
}
 800799c:	46c0      	nop			@ (mov r8, r8)
 800799e:	46bd      	mov	sp, r7
 80079a0:	b002      	add	sp, #8
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	20000928 	.word	0x20000928
 80079a8:	20000d88 	.word	0x20000d88
 80079ac:	20000d9c 	.word	0x20000d9c
 80079b0:	20000db8 	.word	0x20000db8
 80079b4:	20000dcc 	.word	0x20000dcc
 80079b8:	20000de4 	.word	0x20000de4
 80079bc:	20000db0 	.word	0x20000db0
 80079c0:	20000db4 	.word	0x20000db4

080079c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079ca:	e01a      	b.n	8007a02 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80079cc:	f000 fcf8 	bl	80083c0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079d0:	4b10      	ldr	r3, [pc, #64]	@ (8007a14 <prvCheckTasksWaitingTermination+0x50>)
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	3304      	adds	r3, #4
 80079dc:	0018      	movs	r0, r3
 80079de:	f7fe fe7a 	bl	80066d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80079e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007a18 <prvCheckTasksWaitingTermination+0x54>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	1e5a      	subs	r2, r3, #1
 80079e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007a18 <prvCheckTasksWaitingTermination+0x54>)
 80079ea:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80079ec:	4b0b      	ldr	r3, [pc, #44]	@ (8007a1c <prvCheckTasksWaitingTermination+0x58>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	1e5a      	subs	r2, r3, #1
 80079f2:	4b0a      	ldr	r3, [pc, #40]	@ (8007a1c <prvCheckTasksWaitingTermination+0x58>)
 80079f4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80079f6:	f000 fcf5 	bl	80083e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	0018      	movs	r0, r3
 80079fe:	f000 f80f 	bl	8007a20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a02:	4b06      	ldr	r3, [pc, #24]	@ (8007a1c <prvCheckTasksWaitingTermination+0x58>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e0      	bne.n	80079cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a0a:	46c0      	nop			@ (mov r8, r8)
 8007a0c:	46c0      	nop			@ (mov r8, r8)
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	b002      	add	sp, #8
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	20000dcc 	.word	0x20000dcc
 8007a18:	20000df8 	.word	0x20000df8
 8007a1c:	20000de0 	.word	0x20000de0

08007a20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2259      	movs	r2, #89	@ 0x59
 8007a2c:	5c9b      	ldrb	r3, [r3, r2]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d109      	bne.n	8007a46 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a36:	0018      	movs	r0, r3
 8007a38:	f000 fe0a 	bl	8008650 <vPortFree>
				vPortFree( pxTCB );
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f000 fe06 	bl	8008650 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a44:	e011      	b.n	8007a6a <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2259      	movs	r2, #89	@ 0x59
 8007a4a:	5c9b      	ldrb	r3, [r3, r2]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d104      	bne.n	8007a5a <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	0018      	movs	r0, r3
 8007a54:	f000 fdfc 	bl	8008650 <vPortFree>
	}
 8007a58:	e007      	b.n	8007a6a <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2259      	movs	r2, #89	@ 0x59
 8007a5e:	5c9b      	ldrb	r3, [r3, r2]
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d002      	beq.n	8007a6a <prvDeleteTCB+0x4a>
 8007a64:	b672      	cpsid	i
 8007a66:	46c0      	nop			@ (mov r8, r8)
 8007a68:	e7fd      	b.n	8007a66 <prvDeleteTCB+0x46>
	}
 8007a6a:	46c0      	nop			@ (mov r8, r8)
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	b002      	add	sp, #8
 8007a70:	bd80      	pop	{r7, pc}
	...

08007a74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007aa8 <prvResetNextTaskUnblockTime+0x34>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d104      	bne.n	8007a8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a84:	4b09      	ldr	r3, [pc, #36]	@ (8007aac <prvResetNextTaskUnblockTime+0x38>)
 8007a86:	2201      	movs	r2, #1
 8007a88:	4252      	negs	r2, r2
 8007a8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a8c:	e008      	b.n	8007aa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a8e:	4b06      	ldr	r3, [pc, #24]	@ (8007aa8 <prvResetNextTaskUnblockTime+0x34>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	4b03      	ldr	r3, [pc, #12]	@ (8007aac <prvResetNextTaskUnblockTime+0x38>)
 8007a9e:	601a      	str	r2, [r3, #0]
}
 8007aa0:	46c0      	nop			@ (mov r8, r8)
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	b002      	add	sp, #8
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	20000db0 	.word	0x20000db0
 8007aac:	20000e18 	.word	0x20000e18

08007ab0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae0 <xTaskGetSchedulerState+0x30>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d102      	bne.n	8007ac4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	607b      	str	r3, [r7, #4]
 8007ac2:	e008      	b.n	8007ad6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ac4:	4b07      	ldr	r3, [pc, #28]	@ (8007ae4 <xTaskGetSchedulerState+0x34>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d102      	bne.n	8007ad2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007acc:	2302      	movs	r3, #2
 8007ace:	607b      	str	r3, [r7, #4]
 8007ad0:	e001      	b.n	8007ad6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ad6:	687b      	ldr	r3, [r7, #4]
	}
 8007ad8:	0018      	movs	r0, r3
 8007ada:	46bd      	mov	sp, r7
 8007adc:	b002      	add	sp, #8
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	20000e04 	.word	0x20000e04
 8007ae4:	20000e20 	.word	0x20000e20

08007ae8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007af4:	2300      	movs	r3, #0
 8007af6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d046      	beq.n	8007b8c <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007afe:	4b26      	ldr	r3, [pc, #152]	@ (8007b98 <xTaskPriorityDisinherit+0xb0>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d002      	beq.n	8007b0e <xTaskPriorityDisinherit+0x26>
 8007b08:	b672      	cpsid	i
 8007b0a:	46c0      	nop			@ (mov r8, r8)
 8007b0c:	e7fd      	b.n	8007b0a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d102      	bne.n	8007b1c <xTaskPriorityDisinherit+0x34>
 8007b16:	b672      	cpsid	i
 8007b18:	46c0      	nop			@ (mov r8, r8)
 8007b1a:	e7fd      	b.n	8007b18 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b20:	1e5a      	subs	r2, r3, #1
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d02c      	beq.n	8007b8c <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d128      	bne.n	8007b8c <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	0018      	movs	r0, r3
 8007b40:	f7fe fdc9 	bl	80066d6 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b50:	2238      	movs	r2, #56	@ 0x38
 8007b52:	1ad2      	subs	r2, r2, r3
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8007b9c <xTaskPriorityDisinherit+0xb4>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d903      	bls.n	8007b6c <xTaskPriorityDisinherit+0x84>
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b68:	4b0c      	ldr	r3, [pc, #48]	@ (8007b9c <xTaskPriorityDisinherit+0xb4>)
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b70:	0013      	movs	r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	189b      	adds	r3, r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	4a09      	ldr	r2, [pc, #36]	@ (8007ba0 <xTaskPriorityDisinherit+0xb8>)
 8007b7a:	189a      	adds	r2, r3, r2
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	3304      	adds	r3, #4
 8007b80:	0019      	movs	r1, r3
 8007b82:	0010      	movs	r0, r2
 8007b84:	f7fe fd4f 	bl	8006626 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
	}
 8007b8e:	0018      	movs	r0, r3
 8007b90:	46bd      	mov	sp, r7
 8007b92:	b004      	add	sp, #16
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	46c0      	nop			@ (mov r8, r8)
 8007b98:	20000924 	.word	0x20000924
 8007b9c:	20000e00 	.word	0x20000e00
 8007ba0:	20000928 	.word	0x20000928

08007ba4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007bae:	4b21      	ldr	r3, [pc, #132]	@ (8007c34 <prvAddCurrentTaskToDelayedList+0x90>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bb4:	4b20      	ldr	r3, [pc, #128]	@ (8007c38 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3304      	adds	r3, #4
 8007bba:	0018      	movs	r0, r3
 8007bbc:	f7fe fd8b 	bl	80066d6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	d10b      	bne.n	8007bde <prvAddCurrentTaskToDelayedList+0x3a>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d008      	beq.n	8007bde <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8007c38 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	1d1a      	adds	r2, r3, #4
 8007bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8007c3c <prvAddCurrentTaskToDelayedList+0x98>)
 8007bd4:	0011      	movs	r1, r2
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	f7fe fd25 	bl	8006626 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007bdc:	e026      	b.n	8007c2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	18d3      	adds	r3, r2, r3
 8007be4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007be6:	4b14      	ldr	r3, [pc, #80]	@ (8007c38 <prvAddCurrentTaskToDelayedList+0x94>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d209      	bcs.n	8007c0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bf6:	4b12      	ldr	r3, [pc, #72]	@ (8007c40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8007c38 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	3304      	adds	r3, #4
 8007c00:	0019      	movs	r1, r3
 8007c02:	0010      	movs	r0, r2
 8007c04:	f7fe fd31 	bl	800666a <vListInsert>
}
 8007c08:	e010      	b.n	8007c2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8007c44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c38 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3304      	adds	r3, #4
 8007c14:	0019      	movs	r1, r3
 8007c16:	0010      	movs	r0, r2
 8007c18:	f7fe fd27 	bl	800666a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d202      	bcs.n	8007c2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c26:	4b08      	ldr	r3, [pc, #32]	@ (8007c48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	601a      	str	r2, [r3, #0]
}
 8007c2c:	46c0      	nop			@ (mov r8, r8)
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	b004      	add	sp, #16
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	20000dfc 	.word	0x20000dfc
 8007c38:	20000924 	.word	0x20000924
 8007c3c:	20000de4 	.word	0x20000de4
 8007c40:	20000db4 	.word	0x20000db4
 8007c44:	20000db0 	.word	0x20000db0
 8007c48:	20000e18 	.word	0x20000e18

08007c4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c4c:	b590      	push	{r4, r7, lr}
 8007c4e:	b089      	sub	sp, #36	@ 0x24
 8007c50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007c52:	2300      	movs	r3, #0
 8007c54:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007c56:	f000 fad5 	bl	8008204 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007c5a:	4b18      	ldr	r3, [pc, #96]	@ (8007cbc <xTimerCreateTimerTask+0x70>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d020      	beq.n	8007ca4 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c62:	2300      	movs	r3, #0
 8007c64:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c6a:	003a      	movs	r2, r7
 8007c6c:	1d39      	adds	r1, r7, #4
 8007c6e:	2308      	movs	r3, #8
 8007c70:	18fb      	adds	r3, r7, r3
 8007c72:	0018      	movs	r0, r3
 8007c74:	f7fe fc96 	bl	80065a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c78:	683c      	ldr	r4, [r7, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	4910      	ldr	r1, [pc, #64]	@ (8007cc0 <xTimerCreateTimerTask+0x74>)
 8007c80:	4810      	ldr	r0, [pc, #64]	@ (8007cc4 <xTimerCreateTimerTask+0x78>)
 8007c82:	9202      	str	r2, [sp, #8]
 8007c84:	9301      	str	r3, [sp, #4]
 8007c86:	2302      	movs	r3, #2
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	0022      	movs	r2, r4
 8007c8e:	f7ff f986 	bl	8006f9e <xTaskCreateStatic>
 8007c92:	0002      	movs	r2, r0
 8007c94:	4b0c      	ldr	r3, [pc, #48]	@ (8007cc8 <xTimerCreateTimerTask+0x7c>)
 8007c96:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c98:	4b0b      	ldr	r3, [pc, #44]	@ (8007cc8 <xTimerCreateTimerTask+0x7c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d102      	bne.n	8007cb0 <xTimerCreateTimerTask+0x64>
 8007caa:	b672      	cpsid	i
 8007cac:	46c0      	nop			@ (mov r8, r8)
 8007cae:	e7fd      	b.n	8007cac <xTimerCreateTimerTask+0x60>
	return xReturn;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
}
 8007cb2:	0018      	movs	r0, r3
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	b005      	add	sp, #20
 8007cb8:	bd90      	pop	{r4, r7, pc}
 8007cba:	46c0      	nop			@ (mov r8, r8)
 8007cbc:	20000e54 	.word	0x20000e54
 8007cc0:	08008918 	.word	0x08008918
 8007cc4:	08007df1 	.word	0x08007df1
 8007cc8:	20000e58 	.word	0x20000e58

08007ccc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ccc:	b590      	push	{r4, r7, lr}
 8007cce:	b08b      	sub	sp, #44	@ 0x2c
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d102      	bne.n	8007cea <xTimerGenericCommand+0x1e>
 8007ce4:	b672      	cpsid	i
 8007ce6:	46c0      	nop			@ (mov r8, r8)
 8007ce8:	e7fd      	b.n	8007ce6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007cea:	4b1d      	ldr	r3, [pc, #116]	@ (8007d60 <xTimerGenericCommand+0x94>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d030      	beq.n	8007d54 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007cf2:	2414      	movs	r4, #20
 8007cf4:	193b      	adds	r3, r7, r4
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007cfa:	193b      	adds	r3, r7, r4
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d00:	193b      	adds	r3, r7, r4
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	2b05      	cmp	r3, #5
 8007d0a:	dc19      	bgt.n	8007d40 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d0c:	f7ff fed0 	bl	8007ab0 <xTaskGetSchedulerState>
 8007d10:	0003      	movs	r3, r0
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d109      	bne.n	8007d2a <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d16:	4b12      	ldr	r3, [pc, #72]	@ (8007d60 <xTimerGenericCommand+0x94>)
 8007d18:	6818      	ldr	r0, [r3, #0]
 8007d1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d1c:	1939      	adds	r1, r7, r4
 8007d1e:	2300      	movs	r3, #0
 8007d20:	f7fe fdce 	bl	80068c0 <xQueueGenericSend>
 8007d24:	0003      	movs	r3, r0
 8007d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d28:	e014      	b.n	8007d54 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d60 <xTimerGenericCommand+0x94>)
 8007d2c:	6818      	ldr	r0, [r3, #0]
 8007d2e:	2314      	movs	r3, #20
 8007d30:	18f9      	adds	r1, r7, r3
 8007d32:	2300      	movs	r3, #0
 8007d34:	2200      	movs	r2, #0
 8007d36:	f7fe fdc3 	bl	80068c0 <xQueueGenericSend>
 8007d3a:	0003      	movs	r3, r0
 8007d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d3e:	e009      	b.n	8007d54 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d40:	4b07      	ldr	r3, [pc, #28]	@ (8007d60 <xTimerGenericCommand+0x94>)
 8007d42:	6818      	ldr	r0, [r3, #0]
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	2314      	movs	r3, #20
 8007d48:	18f9      	adds	r1, r7, r3
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	f7fe fe80 	bl	8006a50 <xQueueGenericSendFromISR>
 8007d50:	0003      	movs	r3, r0
 8007d52:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007d56:	0018      	movs	r0, r3
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	b00b      	add	sp, #44	@ 0x2c
 8007d5c:	bd90      	pop	{r4, r7, pc}
 8007d5e:	46c0      	nop			@ (mov r8, r8)
 8007d60:	20000e54 	.word	0x20000e54

08007d64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af02      	add	r7, sp, #8
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8007dec <prvProcessExpiredTimer+0x88>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	0018      	movs	r0, r3
 8007d7e:	f7fe fcaa 	bl	80066d6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2228      	movs	r2, #40	@ 0x28
 8007d86:	5c9b      	ldrb	r3, [r3, r2]
 8007d88:	001a      	movs	r2, r3
 8007d8a:	2304      	movs	r3, #4
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	d01a      	beq.n	8007dc6 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	699a      	ldr	r2, [r3, #24]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	18d1      	adds	r1, r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f000 f8c7 	bl	8007f30 <prvInsertTimerInActiveList>
 8007da2:	1e03      	subs	r3, r0, #0
 8007da4:	d018      	beq.n	8007dd8 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	2300      	movs	r3, #0
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	2300      	movs	r3, #0
 8007db0:	2100      	movs	r1, #0
 8007db2:	f7ff ff8b 	bl	8007ccc <xTimerGenericCommand>
 8007db6:	0003      	movs	r3, r0
 8007db8:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10b      	bne.n	8007dd8 <prvProcessExpiredTimer+0x74>
 8007dc0:	b672      	cpsid	i
 8007dc2:	46c0      	nop			@ (mov r8, r8)
 8007dc4:	e7fd      	b.n	8007dc2 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2228      	movs	r2, #40	@ 0x28
 8007dca:	5c9b      	ldrb	r3, [r3, r2]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	4393      	bics	r3, r2
 8007dd0:	b2d9      	uxtb	r1, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2228      	movs	r2, #40	@ 0x28
 8007dd6:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6a1b      	ldr	r3, [r3, #32]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	0010      	movs	r0, r2
 8007de0:	4798      	blx	r3
}
 8007de2:	46c0      	nop			@ (mov r8, r8)
 8007de4:	46bd      	mov	sp, r7
 8007de6:	b004      	add	sp, #16
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	46c0      	nop			@ (mov r8, r8)
 8007dec:	20000e4c 	.word	0x20000e4c

08007df0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007df8:	2308      	movs	r3, #8
 8007dfa:	18fb      	adds	r3, r7, r3
 8007dfc:	0018      	movs	r0, r3
 8007dfe:	f000 f855 	bl	8007eac <prvGetNextExpireTime>
 8007e02:	0003      	movs	r3, r0
 8007e04:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	0011      	movs	r1, r2
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	f000 f805 	bl	8007e1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007e12:	f000 f8cf 	bl	8007fb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e16:	46c0      	nop			@ (mov r8, r8)
 8007e18:	e7ee      	b.n	8007df8 <prvTimerTask+0x8>
	...

08007e1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007e26:	f7ff fabb 	bl	80073a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e2a:	2308      	movs	r3, #8
 8007e2c:	18fb      	adds	r3, r7, r3
 8007e2e:	0018      	movs	r0, r3
 8007e30:	f000 f85e 	bl	8007ef0 <prvSampleTimeNow>
 8007e34:	0003      	movs	r3, r0
 8007e36:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d12b      	bne.n	8007e96 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10c      	bne.n	8007e5e <prvProcessTimerOrBlockTask+0x42>
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d808      	bhi.n	8007e5e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8007e4c:	f7ff fab4 	bl	80073b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	0011      	movs	r1, r2
 8007e56:	0018      	movs	r0, r3
 8007e58:	f7ff ff84 	bl	8007d64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007e5c:	e01d      	b.n	8007e9a <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d008      	beq.n	8007e76 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e64:	4b0f      	ldr	r3, [pc, #60]	@ (8007ea4 <prvProcessTimerOrBlockTask+0x88>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <prvProcessTimerOrBlockTask+0x56>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e000      	b.n	8007e74 <prvProcessTimerOrBlockTask+0x58>
 8007e72:	2300      	movs	r3, #0
 8007e74:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e76:	4b0c      	ldr	r3, [pc, #48]	@ (8007ea8 <prvProcessTimerOrBlockTask+0x8c>)
 8007e78:	6818      	ldr	r0, [r3, #0]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	0019      	movs	r1, r3
 8007e84:	f7ff f858 	bl	8006f38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e88:	f7ff fa96 	bl	80073b8 <xTaskResumeAll>
 8007e8c:	1e03      	subs	r3, r0, #0
 8007e8e:	d104      	bne.n	8007e9a <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8007e90:	f000 fa86 	bl	80083a0 <vPortYield>
}
 8007e94:	e001      	b.n	8007e9a <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8007e96:	f7ff fa8f 	bl	80073b8 <xTaskResumeAll>
}
 8007e9a:	46c0      	nop			@ (mov r8, r8)
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	b004      	add	sp, #16
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	46c0      	nop			@ (mov r8, r8)
 8007ea4:	20000e50 	.word	0x20000e50
 8007ea8:	20000e54 	.word	0x20000e54

08007eac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8007eec <prvGetNextExpireTime+0x40>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <prvGetNextExpireTime+0x16>
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	e000      	b.n	8007ec4 <prvGetNextExpireTime+0x18>
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d105      	bne.n	8007edc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ed0:	4b06      	ldr	r3, [pc, #24]	@ (8007eec <prvGetNextExpireTime+0x40>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	60fb      	str	r3, [r7, #12]
 8007eda:	e001      	b.n	8007ee0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
}
 8007ee2:	0018      	movs	r0, r3
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	b004      	add	sp, #16
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	46c0      	nop			@ (mov r8, r8)
 8007eec:	20000e4c 	.word	0x20000e4c

08007ef0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ef8:	f7ff faea 	bl	80074d0 <xTaskGetTickCount>
 8007efc:	0003      	movs	r3, r0
 8007efe:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8007f00:	4b0a      	ldr	r3, [pc, #40]	@ (8007f2c <prvSampleTimeNow+0x3c>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d205      	bcs.n	8007f16 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8007f0a:	f000 f91d 	bl	8008148 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	e002      	b.n	8007f1c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007f1c:	4b03      	ldr	r3, [pc, #12]	@ (8007f2c <prvSampleTimeNow+0x3c>)
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8007f22:	68fb      	ldr	r3, [r7, #12]
}
 8007f24:	0018      	movs	r0, r3
 8007f26:	46bd      	mov	sp, r7
 8007f28:	b004      	add	sp, #16
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20000e5c 	.word	0x20000e5c

08007f30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
 8007f3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d812      	bhi.n	8007f7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	1ad2      	subs	r2, r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d302      	bcc.n	8007f6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f64:	2301      	movs	r3, #1
 8007f66:	617b      	str	r3, [r7, #20]
 8007f68:	e01b      	b.n	8007fa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f6a:	4b10      	ldr	r3, [pc, #64]	@ (8007fac <prvInsertTimerInActiveList+0x7c>)
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	3304      	adds	r3, #4
 8007f72:	0019      	movs	r1, r3
 8007f74:	0010      	movs	r0, r2
 8007f76:	f7fe fb78 	bl	800666a <vListInsert>
 8007f7a:	e012      	b.n	8007fa2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d206      	bcs.n	8007f92 <prvInsertTimerInActiveList+0x62>
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d302      	bcc.n	8007f92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	617b      	str	r3, [r7, #20]
 8007f90:	e007      	b.n	8007fa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f92:	4b07      	ldr	r3, [pc, #28]	@ (8007fb0 <prvInsertTimerInActiveList+0x80>)
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	3304      	adds	r3, #4
 8007f9a:	0019      	movs	r1, r3
 8007f9c:	0010      	movs	r0, r2
 8007f9e:	f7fe fb64 	bl	800666a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007fa2:	697b      	ldr	r3, [r7, #20]
}
 8007fa4:	0018      	movs	r0, r3
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	b006      	add	sp, #24
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	20000e50 	.word	0x20000e50
 8007fb0:	20000e4c 	.word	0x20000e4c

08007fb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007fb4:	b590      	push	{r4, r7, lr}
 8007fb6:	b08d      	sub	sp, #52	@ 0x34
 8007fb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007fba:	e0b1      	b.n	8008120 <prvProcessReceivedCommands+0x16c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007fbc:	2208      	movs	r2, #8
 8007fbe:	18bb      	adds	r3, r7, r2
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	da10      	bge.n	8007fe8 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007fc6:	18bb      	adds	r3, r7, r2
 8007fc8:	3304      	adds	r3, #4
 8007fca:	627b      	str	r3, [r7, #36]	@ 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d102      	bne.n	8007fd8 <prvProcessReceivedCommands+0x24>
 8007fd2:	b672      	cpsid	i
 8007fd4:	46c0      	nop			@ (mov r8, r8)
 8007fd6:	e7fd      	b.n	8007fd4 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fde:	6858      	ldr	r0, [r3, #4]
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	0019      	movs	r1, r3
 8007fe6:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007fe8:	2208      	movs	r2, #8
 8007fea:	18bb      	adds	r3, r7, r2
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	da00      	bge.n	8007ff4 <prvProcessReceivedCommands+0x40>
 8007ff2:	e095      	b.n	8008120 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ff4:	18bb      	adds	r3, r7, r2
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ffa:	6a3b      	ldr	r3, [r7, #32]
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d004      	beq.n	800800c <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	3304      	adds	r3, #4
 8008006:	0018      	movs	r0, r3
 8008008:	f7fe fb65 	bl	80066d6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800800c:	1d3b      	adds	r3, r7, #4
 800800e:	0018      	movs	r0, r3
 8008010:	f7ff ff6e 	bl	8007ef0 <prvSampleTimeNow>
 8008014:	0003      	movs	r3, r0
 8008016:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8008018:	2308      	movs	r3, #8
 800801a:	18fb      	adds	r3, r7, r3
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b09      	cmp	r3, #9
 8008020:	d900      	bls.n	8008024 <prvProcessReceivedCommands+0x70>
 8008022:	e07a      	b.n	800811a <prvProcessReceivedCommands+0x166>
 8008024:	009a      	lsls	r2, r3, #2
 8008026:	4b46      	ldr	r3, [pc, #280]	@ (8008140 <prvProcessReceivedCommands+0x18c>)
 8008028:	18d3      	adds	r3, r2, r3
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800802e:	6a3b      	ldr	r3, [r7, #32]
 8008030:	2228      	movs	r2, #40	@ 0x28
 8008032:	5c9b      	ldrb	r3, [r3, r2]
 8008034:	2201      	movs	r2, #1
 8008036:	4313      	orrs	r3, r2
 8008038:	b2d9      	uxtb	r1, r3
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	2228      	movs	r2, #40	@ 0x28
 800803e:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008040:	2408      	movs	r4, #8
 8008042:	193b      	adds	r3, r7, r4
 8008044:	685a      	ldr	r2, [r3, #4]
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	18d1      	adds	r1, r2, r3
 800804c:	193b      	adds	r3, r7, r4
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	69fa      	ldr	r2, [r7, #28]
 8008052:	6a38      	ldr	r0, [r7, #32]
 8008054:	f7ff ff6c 	bl	8007f30 <prvInsertTimerInActiveList>
 8008058:	1e03      	subs	r3, r0, #0
 800805a:	d060      	beq.n	800811e <prvProcessReceivedCommands+0x16a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	6a1b      	ldr	r3, [r3, #32]
 8008060:	6a3a      	ldr	r2, [r7, #32]
 8008062:	0010      	movs	r0, r2
 8008064:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	2228      	movs	r2, #40	@ 0x28
 800806a:	5c9b      	ldrb	r3, [r3, r2]
 800806c:	001a      	movs	r2, r3
 800806e:	2304      	movs	r3, #4
 8008070:	4013      	ands	r3, r2
 8008072:	d054      	beq.n	800811e <prvProcessReceivedCommands+0x16a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008074:	193b      	adds	r3, r7, r4
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	18d2      	adds	r2, r2, r3
 800807e:	6a38      	ldr	r0, [r7, #32]
 8008080:	2300      	movs	r3, #0
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	2300      	movs	r3, #0
 8008086:	2100      	movs	r1, #0
 8008088:	f7ff fe20 	bl	8007ccc <xTimerGenericCommand>
 800808c:	0003      	movs	r3, r0
 800808e:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d143      	bne.n	800811e <prvProcessReceivedCommands+0x16a>
 8008096:	b672      	cpsid	i
 8008098:	46c0      	nop			@ (mov r8, r8)
 800809a:	e7fd      	b.n	8008098 <prvProcessReceivedCommands+0xe4>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	2228      	movs	r2, #40	@ 0x28
 80080a0:	5c9b      	ldrb	r3, [r3, r2]
 80080a2:	2201      	movs	r2, #1
 80080a4:	4393      	bics	r3, r2
 80080a6:	b2d9      	uxtb	r1, r3
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	2228      	movs	r2, #40	@ 0x28
 80080ac:	5499      	strb	r1, [r3, r2]
					break;
 80080ae:	e037      	b.n	8008120 <prvProcessReceivedCommands+0x16c>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	2228      	movs	r2, #40	@ 0x28
 80080b4:	5c9b      	ldrb	r3, [r3, r2]
 80080b6:	2201      	movs	r2, #1
 80080b8:	4313      	orrs	r3, r2
 80080ba:	b2d9      	uxtb	r1, r3
 80080bc:	6a3b      	ldr	r3, [r7, #32]
 80080be:	2228      	movs	r2, #40	@ 0x28
 80080c0:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80080c2:	2308      	movs	r3, #8
 80080c4:	18fb      	adds	r3, r7, r3
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80080cc:	6a3b      	ldr	r3, [r7, #32]
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d102      	bne.n	80080da <prvProcessReceivedCommands+0x126>
 80080d4:	b672      	cpsid	i
 80080d6:	46c0      	nop			@ (mov r8, r8)
 80080d8:	e7fd      	b.n	80080d6 <prvProcessReceivedCommands+0x122>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	699a      	ldr	r2, [r3, #24]
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	18d1      	adds	r1, r2, r3
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	69fa      	ldr	r2, [r7, #28]
 80080e6:	6a38      	ldr	r0, [r7, #32]
 80080e8:	f7ff ff22 	bl	8007f30 <prvInsertTimerInActiveList>
					break;
 80080ec:	e018      	b.n	8008120 <prvProcessReceivedCommands+0x16c>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80080ee:	6a3b      	ldr	r3, [r7, #32]
 80080f0:	2228      	movs	r2, #40	@ 0x28
 80080f2:	5c9b      	ldrb	r3, [r3, r2]
 80080f4:	001a      	movs	r2, r3
 80080f6:	2302      	movs	r3, #2
 80080f8:	4013      	ands	r3, r2
 80080fa:	d104      	bne.n	8008106 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	0018      	movs	r0, r3
 8008100:	f000 faa6 	bl	8008650 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008104:	e00c      	b.n	8008120 <prvProcessReceivedCommands+0x16c>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	2228      	movs	r2, #40	@ 0x28
 800810a:	5c9b      	ldrb	r3, [r3, r2]
 800810c:	2201      	movs	r2, #1
 800810e:	4393      	bics	r3, r2
 8008110:	b2d9      	uxtb	r1, r3
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	2228      	movs	r2, #40	@ 0x28
 8008116:	5499      	strb	r1, [r3, r2]
					break;
 8008118:	e002      	b.n	8008120 <prvProcessReceivedCommands+0x16c>

				default	:
					/* Don't expect to get here. */
					break;
 800811a:	46c0      	nop			@ (mov r8, r8)
 800811c:	e000      	b.n	8008120 <prvProcessReceivedCommands+0x16c>
					break;
 800811e:	46c0      	nop			@ (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008120:	4b08      	ldr	r3, [pc, #32]	@ (8008144 <prvProcessReceivedCommands+0x190>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2208      	movs	r2, #8
 8008126:	18b9      	adds	r1, r7, r2
 8008128:	2200      	movs	r2, #0
 800812a:	0018      	movs	r0, r3
 800812c:	f7fe fd07 	bl	8006b3e <xQueueReceive>
 8008130:	1e03      	subs	r3, r0, #0
 8008132:	d000      	beq.n	8008136 <prvProcessReceivedCommands+0x182>
 8008134:	e742      	b.n	8007fbc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008136:	46c0      	nop			@ (mov r8, r8)
 8008138:	46c0      	nop			@ (mov r8, r8)
 800813a:	46bd      	mov	sp, r7
 800813c:	b00b      	add	sp, #44	@ 0x2c
 800813e:	bd90      	pop	{r4, r7, pc}
 8008140:	08008a90 	.word	0x08008a90
 8008144:	20000e54 	.word	0x20000e54

08008148 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b088      	sub	sp, #32
 800814c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800814e:	e042      	b.n	80081d6 <prvSwitchTimerLists+0x8e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008150:	4b2a      	ldr	r3, [pc, #168]	@ (80081fc <prvSwitchTimerLists+0xb4>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800815a:	4b28      	ldr	r3, [pc, #160]	@ (80081fc <prvSwitchTimerLists+0xb4>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	3304      	adds	r3, #4
 8008168:	0018      	movs	r0, r3
 800816a:	f7fe fab4 	bl	80066d6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	0010      	movs	r0, r2
 8008176:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2228      	movs	r2, #40	@ 0x28
 800817c:	5c9b      	ldrb	r3, [r3, r2]
 800817e:	001a      	movs	r2, r3
 8008180:	2304      	movs	r3, #4
 8008182:	4013      	ands	r3, r2
 8008184:	d027      	beq.n	80081d6 <prvSwitchTimerLists+0x8e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	18d3      	adds	r3, r2, r3
 800818e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	429a      	cmp	r2, r3
 8008196:	d90e      	bls.n	80081b6 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081a4:	4b15      	ldr	r3, [pc, #84]	@ (80081fc <prvSwitchTimerLists+0xb4>)
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3304      	adds	r3, #4
 80081ac:	0019      	movs	r1, r3
 80081ae:	0010      	movs	r0, r2
 80081b0:	f7fe fa5b 	bl	800666a <vListInsert>
 80081b4:	e00f      	b.n	80081d6 <prvSwitchTimerLists+0x8e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	2300      	movs	r3, #0
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	2300      	movs	r3, #0
 80081c0:	2100      	movs	r1, #0
 80081c2:	f7ff fd83 	bl	8007ccc <xTimerGenericCommand>
 80081c6:	0003      	movs	r3, r0
 80081c8:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d102      	bne.n	80081d6 <prvSwitchTimerLists+0x8e>
 80081d0:	b672      	cpsid	i
 80081d2:	46c0      	nop			@ (mov r8, r8)
 80081d4:	e7fd      	b.n	80081d2 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081d6:	4b09      	ldr	r3, [pc, #36]	@ (80081fc <prvSwitchTimerLists+0xb4>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1b7      	bne.n	8008150 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80081e0:	4b06      	ldr	r3, [pc, #24]	@ (80081fc <prvSwitchTimerLists+0xb4>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80081e6:	4b06      	ldr	r3, [pc, #24]	@ (8008200 <prvSwitchTimerLists+0xb8>)
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	4b04      	ldr	r3, [pc, #16]	@ (80081fc <prvSwitchTimerLists+0xb4>)
 80081ec:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80081ee:	4b04      	ldr	r3, [pc, #16]	@ (8008200 <prvSwitchTimerLists+0xb8>)
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	601a      	str	r2, [r3, #0]
}
 80081f4:	46c0      	nop			@ (mov r8, r8)
 80081f6:	46bd      	mov	sp, r7
 80081f8:	b006      	add	sp, #24
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	20000e4c 	.word	0x20000e4c
 8008200:	20000e50 	.word	0x20000e50

08008204 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800820a:	f000 f8d9 	bl	80083c0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800820e:	4b16      	ldr	r3, [pc, #88]	@ (8008268 <prvCheckForValidListAndQueue+0x64>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d123      	bne.n	800825e <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8008216:	4b15      	ldr	r3, [pc, #84]	@ (800826c <prvCheckForValidListAndQueue+0x68>)
 8008218:	0018      	movs	r0, r3
 800821a:	f7fe f9db 	bl	80065d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800821e:	4b14      	ldr	r3, [pc, #80]	@ (8008270 <prvCheckForValidListAndQueue+0x6c>)
 8008220:	0018      	movs	r0, r3
 8008222:	f7fe f9d7 	bl	80065d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008226:	4b13      	ldr	r3, [pc, #76]	@ (8008274 <prvCheckForValidListAndQueue+0x70>)
 8008228:	4a10      	ldr	r2, [pc, #64]	@ (800826c <prvCheckForValidListAndQueue+0x68>)
 800822a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800822c:	4b12      	ldr	r3, [pc, #72]	@ (8008278 <prvCheckForValidListAndQueue+0x74>)
 800822e:	4a10      	ldr	r2, [pc, #64]	@ (8008270 <prvCheckForValidListAndQueue+0x6c>)
 8008230:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008232:	4b12      	ldr	r3, [pc, #72]	@ (800827c <prvCheckForValidListAndQueue+0x78>)
 8008234:	4a12      	ldr	r2, [pc, #72]	@ (8008280 <prvCheckForValidListAndQueue+0x7c>)
 8008236:	2100      	movs	r1, #0
 8008238:	9100      	str	r1, [sp, #0]
 800823a:	2110      	movs	r1, #16
 800823c:	200a      	movs	r0, #10
 800823e:	f7fe fac7 	bl	80067d0 <xQueueGenericCreateStatic>
 8008242:	0002      	movs	r2, r0
 8008244:	4b08      	ldr	r3, [pc, #32]	@ (8008268 <prvCheckForValidListAndQueue+0x64>)
 8008246:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008248:	4b07      	ldr	r3, [pc, #28]	@ (8008268 <prvCheckForValidListAndQueue+0x64>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d006      	beq.n	800825e <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008250:	4b05      	ldr	r3, [pc, #20]	@ (8008268 <prvCheckForValidListAndQueue+0x64>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a0b      	ldr	r2, [pc, #44]	@ (8008284 <prvCheckForValidListAndQueue+0x80>)
 8008256:	0011      	movs	r1, r2
 8008258:	0018      	movs	r0, r3
 800825a:	f7fe fe45 	bl	8006ee8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800825e:	f000 f8c1 	bl	80083e4 <vPortExitCritical>
}
 8008262:	46c0      	nop			@ (mov r8, r8)
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	20000e54 	.word	0x20000e54
 800826c:	20000e24 	.word	0x20000e24
 8008270:	20000e38 	.word	0x20000e38
 8008274:	20000e4c 	.word	0x20000e4c
 8008278:	20000e50 	.word	0x20000e50
 800827c:	20000f00 	.word	0x20000f00
 8008280:	20000e60 	.word	0x20000e60
 8008284:	08008920 	.word	0x08008920

08008288 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	3b04      	subs	r3, #4
 8008298:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2280      	movs	r2, #128	@ 0x80
 800829e:	0452      	lsls	r2, r2, #17
 80082a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	3b04      	subs	r3, #4
 80082a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	3b04      	subs	r3, #4
 80082b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80082b4:	4a08      	ldr	r2, [pc, #32]	@ (80082d8 <pxPortInitialiseStack+0x50>)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3b14      	subs	r3, #20
 80082be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	3b20      	subs	r3, #32
 80082ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80082cc:	68fb      	ldr	r3, [r7, #12]
}
 80082ce:	0018      	movs	r0, r3
 80082d0:	46bd      	mov	sp, r7
 80082d2:	b004      	add	sp, #16
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	46c0      	nop			@ (mov r8, r8)
 80082d8:	080082dd 	.word	0x080082dd

080082dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80082e2:	2300      	movs	r3, #0
 80082e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80082e6:	4b08      	ldr	r3, [pc, #32]	@ (8008308 <prvTaskExitError+0x2c>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	3301      	adds	r3, #1
 80082ec:	d002      	beq.n	80082f4 <prvTaskExitError+0x18>
 80082ee:	b672      	cpsid	i
 80082f0:	46c0      	nop			@ (mov r8, r8)
 80082f2:	e7fd      	b.n	80082f0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80082f4:	b672      	cpsid	i
	while( ulDummy == 0 )
 80082f6:	46c0      	nop			@ (mov r8, r8)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d0fc      	beq.n	80082f8 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80082fe:	46c0      	nop			@ (mov r8, r8)
 8008300:	46c0      	nop			@ (mov r8, r8)
 8008302:	46bd      	mov	sp, r7
 8008304:	b002      	add	sp, #8
 8008306:	bd80      	pop	{r7, pc}
 8008308:	2000000c 	.word	0x2000000c

0800830c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8008310:	46c0      	nop			@ (mov r8, r8)
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
	...

08008320 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8008320:	4a0b      	ldr	r2, [pc, #44]	@ (8008350 <pxCurrentTCBConst2>)
 8008322:	6813      	ldr	r3, [r2, #0]
 8008324:	6818      	ldr	r0, [r3, #0]
 8008326:	3020      	adds	r0, #32
 8008328:	f380 8809 	msr	PSP, r0
 800832c:	2002      	movs	r0, #2
 800832e:	f380 8814 	msr	CONTROL, r0
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8008338:	46ae      	mov	lr, r5
 800833a:	bc08      	pop	{r3}
 800833c:	bc04      	pop	{r2}
 800833e:	b662      	cpsie	i
 8008340:	4718      	bx	r3
 8008342:	46c0      	nop			@ (mov r8, r8)
 8008344:	46c0      	nop			@ (mov r8, r8)
 8008346:	46c0      	nop			@ (mov r8, r8)
 8008348:	46c0      	nop			@ (mov r8, r8)
 800834a:	46c0      	nop			@ (mov r8, r8)
 800834c:	46c0      	nop			@ (mov r8, r8)
 800834e:	46c0      	nop			@ (mov r8, r8)

08008350 <pxCurrentTCBConst2>:
 8008350:	20000924 	.word	0x20000924
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8008354:	46c0      	nop			@ (mov r8, r8)
 8008356:	46c0      	nop			@ (mov r8, r8)

08008358 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800835c:	4b0e      	ldr	r3, [pc, #56]	@ (8008398 <xPortStartScheduler+0x40>)
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	4b0d      	ldr	r3, [pc, #52]	@ (8008398 <xPortStartScheduler+0x40>)
 8008362:	21ff      	movs	r1, #255	@ 0xff
 8008364:	0409      	lsls	r1, r1, #16
 8008366:	430a      	orrs	r2, r1
 8008368:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800836a:	4b0b      	ldr	r3, [pc, #44]	@ (8008398 <xPortStartScheduler+0x40>)
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	4b0a      	ldr	r3, [pc, #40]	@ (8008398 <xPortStartScheduler+0x40>)
 8008370:	21ff      	movs	r1, #255	@ 0xff
 8008372:	0609      	lsls	r1, r1, #24
 8008374:	430a      	orrs	r2, r1
 8008376:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008378:	f000 f898 	bl	80084ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800837c:	4b07      	ldr	r3, [pc, #28]	@ (800839c <xPortStartScheduler+0x44>)
 800837e:	2200      	movs	r2, #0
 8008380:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8008382:	f7ff ffcd 	bl	8008320 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008386:	f7ff f961 	bl	800764c <vTaskSwitchContext>
	prvTaskExitError();
 800838a:	f7ff ffa7 	bl	80082dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800838e:	2300      	movs	r3, #0
}
 8008390:	0018      	movs	r0, r3
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	46c0      	nop			@ (mov r8, r8)
 8008398:	e000ed20 	.word	0xe000ed20
 800839c:	2000000c 	.word	0x2000000c

080083a0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083a4:	4b05      	ldr	r3, [pc, #20]	@ (80083bc <vPortYield+0x1c>)
 80083a6:	2280      	movs	r2, #128	@ 0x80
 80083a8:	0552      	lsls	r2, r2, #21
 80083aa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80083ac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80083b0:	f3bf 8f6f 	isb	sy
}
 80083b4:	46c0      	nop			@ (mov r8, r8)
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	46c0      	nop			@ (mov r8, r8)
 80083bc:	e000ed04 	.word	0xe000ed04

080083c0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80083c4:	b672      	cpsid	i
	uxCriticalNesting++;
 80083c6:	4b06      	ldr	r3, [pc, #24]	@ (80083e0 <vPortEnterCritical+0x20>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	1c5a      	adds	r2, r3, #1
 80083cc:	4b04      	ldr	r3, [pc, #16]	@ (80083e0 <vPortEnterCritical+0x20>)
 80083ce:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80083d0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80083d4:	f3bf 8f6f 	isb	sy
}
 80083d8:	46c0      	nop			@ (mov r8, r8)
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	46c0      	nop			@ (mov r8, r8)
 80083e0:	2000000c 	.word	0x2000000c

080083e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083e8:	4b09      	ldr	r3, [pc, #36]	@ (8008410 <vPortExitCritical+0x2c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d102      	bne.n	80083f6 <vPortExitCritical+0x12>
 80083f0:	b672      	cpsid	i
 80083f2:	46c0      	nop			@ (mov r8, r8)
 80083f4:	e7fd      	b.n	80083f2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80083f6:	4b06      	ldr	r3, [pc, #24]	@ (8008410 <vPortExitCritical+0x2c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	1e5a      	subs	r2, r3, #1
 80083fc:	4b04      	ldr	r3, [pc, #16]	@ (8008410 <vPortExitCritical+0x2c>)
 80083fe:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8008400:	4b03      	ldr	r3, [pc, #12]	@ (8008410 <vPortExitCritical+0x2c>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d100      	bne.n	800840a <vPortExitCritical+0x26>
	{
		portENABLE_INTERRUPTS();
 8008408:	b662      	cpsie	i
	}
}
 800840a:	46c0      	nop			@ (mov r8, r8)
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	2000000c 	.word	0x2000000c

08008414 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8008414:	f3ef 8010 	mrs	r0, PRIMASK
 8008418:	b672      	cpsid	i
 800841a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800841c:	46c0      	nop			@ (mov r8, r8)
 800841e:	0018      	movs	r0, r3

08008420 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8008420:	f380 8810 	msr	PRIMASK, r0
 8008424:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8008426:	46c0      	nop			@ (mov r8, r8)
	...

08008430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008430:	f3ef 8009 	mrs	r0, PSP
 8008434:	4b0e      	ldr	r3, [pc, #56]	@ (8008470 <pxCurrentTCBConst>)
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	3820      	subs	r0, #32
 800843a:	6010      	str	r0, [r2, #0]
 800843c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800843e:	4644      	mov	r4, r8
 8008440:	464d      	mov	r5, r9
 8008442:	4656      	mov	r6, sl
 8008444:	465f      	mov	r7, fp
 8008446:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008448:	b508      	push	{r3, lr}
 800844a:	b672      	cpsid	i
 800844c:	f7ff f8fe 	bl	800764c <vTaskSwitchContext>
 8008450:	b662      	cpsie	i
 8008452:	bc0c      	pop	{r2, r3}
 8008454:	6811      	ldr	r1, [r2, #0]
 8008456:	6808      	ldr	r0, [r1, #0]
 8008458:	3010      	adds	r0, #16
 800845a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800845c:	46a0      	mov	r8, r4
 800845e:	46a9      	mov	r9, r5
 8008460:	46b2      	mov	sl, r6
 8008462:	46bb      	mov	fp, r7
 8008464:	f380 8809 	msr	PSP, r0
 8008468:	3820      	subs	r0, #32
 800846a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800846c:	4718      	bx	r3
 800846e:	46c0      	nop			@ (mov r8, r8)

08008470 <pxCurrentTCBConst>:
 8008470:	20000924 	.word	0x20000924
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8008474:	46c0      	nop			@ (mov r8, r8)
 8008476:	46c0      	nop			@ (mov r8, r8)

08008478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800847e:	f7ff ffc9 	bl	8008414 <ulSetInterruptMaskFromISR>
 8008482:	0003      	movs	r3, r0
 8008484:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008486:	f7ff f831 	bl	80074ec <xTaskIncrementTick>
 800848a:	1e03      	subs	r3, r0, #0
 800848c:	d003      	beq.n	8008496 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800848e:	4b06      	ldr	r3, [pc, #24]	@ (80084a8 <xPortSysTickHandler+0x30>)
 8008490:	2280      	movs	r2, #128	@ 0x80
 8008492:	0552      	lsls	r2, r2, #21
 8008494:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	0018      	movs	r0, r3
 800849a:	f7ff ffc1 	bl	8008420 <vClearInterruptMaskFromISR>
}
 800849e:	46c0      	nop			@ (mov r8, r8)
 80084a0:	46bd      	mov	sp, r7
 80084a2:	b002      	add	sp, #8
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	46c0      	nop			@ (mov r8, r8)
 80084a8:	e000ed04 	.word	0xe000ed04

080084ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084b0:	4b0b      	ldr	r3, [pc, #44]	@ (80084e0 <vPortSetupTimerInterrupt+0x34>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084b6:	4b0b      	ldr	r3, [pc, #44]	@ (80084e4 <vPortSetupTimerInterrupt+0x38>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084bc:	4b0a      	ldr	r3, [pc, #40]	@ (80084e8 <vPortSetupTimerInterrupt+0x3c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	22fa      	movs	r2, #250	@ 0xfa
 80084c2:	0091      	lsls	r1, r2, #2
 80084c4:	0018      	movs	r0, r3
 80084c6:	f7f7 fe1f 	bl	8000108 <__udivsi3>
 80084ca:	0003      	movs	r3, r0
 80084cc:	001a      	movs	r2, r3
 80084ce:	4b07      	ldr	r3, [pc, #28]	@ (80084ec <vPortSetupTimerInterrupt+0x40>)
 80084d0:	3a01      	subs	r2, #1
 80084d2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80084d4:	4b02      	ldr	r3, [pc, #8]	@ (80084e0 <vPortSetupTimerInterrupt+0x34>)
 80084d6:	2207      	movs	r2, #7
 80084d8:	601a      	str	r2, [r3, #0]
}
 80084da:	46c0      	nop			@ (mov r8, r8)
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	e000e010 	.word	0xe000e010
 80084e4:	e000e018 	.word	0xe000e018
 80084e8:	20000000 	.word	0x20000000
 80084ec:	e000e014 	.word	0xe000e014

080084f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084f8:	2300      	movs	r3, #0
 80084fa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80084fc:	f7fe ff50 	bl	80073a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008500:	4b4d      	ldr	r3, [pc, #308]	@ (8008638 <pvPortMalloc+0x148>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d101      	bne.n	800850c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008508:	f000 f8f2 	bl	80086f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800850c:	4b4b      	ldr	r3, [pc, #300]	@ (800863c <pvPortMalloc+0x14c>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	4013      	ands	r3, r2
 8008514:	d000      	beq.n	8008518 <pvPortMalloc+0x28>
 8008516:	e080      	b.n	800861a <pvPortMalloc+0x12a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d013      	beq.n	8008546 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800851e:	2208      	movs	r2, #8
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	189b      	adds	r3, r3, r2
 8008524:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2207      	movs	r2, #7
 800852a:	4013      	ands	r3, r2
 800852c:	d00b      	beq.n	8008546 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2207      	movs	r2, #7
 8008532:	4393      	bics	r3, r2
 8008534:	3308      	adds	r3, #8
 8008536:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2207      	movs	r2, #7
 800853c:	4013      	ands	r3, r2
 800853e:	d002      	beq.n	8008546 <pvPortMalloc+0x56>
 8008540:	b672      	cpsid	i
 8008542:	46c0      	nop			@ (mov r8, r8)
 8008544:	e7fd      	b.n	8008542 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d066      	beq.n	800861a <pvPortMalloc+0x12a>
 800854c:	4b3c      	ldr	r3, [pc, #240]	@ (8008640 <pvPortMalloc+0x150>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	429a      	cmp	r2, r3
 8008554:	d861      	bhi.n	800861a <pvPortMalloc+0x12a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008556:	4b3b      	ldr	r3, [pc, #236]	@ (8008644 <pvPortMalloc+0x154>)
 8008558:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800855a:	4b3a      	ldr	r3, [pc, #232]	@ (8008644 <pvPortMalloc+0x154>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008560:	e004      	b.n	800856c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	429a      	cmp	r2, r3
 8008574:	d903      	bls.n	800857e <pvPortMalloc+0x8e>
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1f1      	bne.n	8008562 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800857e:	4b2e      	ldr	r3, [pc, #184]	@ (8008638 <pvPortMalloc+0x148>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	429a      	cmp	r2, r3
 8008586:	d048      	beq.n	800861a <pvPortMalloc+0x12a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2208      	movs	r2, #8
 800858e:	189b      	adds	r3, r3, r2
 8008590:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	1ad2      	subs	r2, r2, r3
 80085a2:	2308      	movs	r3, #8
 80085a4:	005b      	lsls	r3, r3, #1
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d917      	bls.n	80085da <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	18d3      	adds	r3, r2, r3
 80085b0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	2207      	movs	r2, #7
 80085b6:	4013      	ands	r3, r2
 80085b8:	d002      	beq.n	80085c0 <pvPortMalloc+0xd0>
 80085ba:	b672      	cpsid	i
 80085bc:	46c0      	nop			@ (mov r8, r8)
 80085be:	e7fd      	b.n	80085bc <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	1ad2      	subs	r2, r2, r3
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	0018      	movs	r0, r3
 80085d6:	f000 f8eb 	bl	80087b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085da:	4b19      	ldr	r3, [pc, #100]	@ (8008640 <pvPortMalloc+0x150>)
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	1ad2      	subs	r2, r2, r3
 80085e4:	4b16      	ldr	r3, [pc, #88]	@ (8008640 <pvPortMalloc+0x150>)
 80085e6:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085e8:	4b15      	ldr	r3, [pc, #84]	@ (8008640 <pvPortMalloc+0x150>)
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	4b16      	ldr	r3, [pc, #88]	@ (8008648 <pvPortMalloc+0x158>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d203      	bcs.n	80085fc <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085f4:	4b12      	ldr	r3, [pc, #72]	@ (8008640 <pvPortMalloc+0x150>)
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	4b13      	ldr	r3, [pc, #76]	@ (8008648 <pvPortMalloc+0x158>)
 80085fa:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	4b0e      	ldr	r3, [pc, #56]	@ (800863c <pvPortMalloc+0x14c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	431a      	orrs	r2, r3
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2200      	movs	r2, #0
 800860e:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008610:	4b0e      	ldr	r3, [pc, #56]	@ (800864c <pvPortMalloc+0x15c>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	1c5a      	adds	r2, r3, #1
 8008616:	4b0d      	ldr	r3, [pc, #52]	@ (800864c <pvPortMalloc+0x15c>)
 8008618:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800861a:	f7fe fecd 	bl	80073b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2207      	movs	r2, #7
 8008622:	4013      	ands	r3, r2
 8008624:	d002      	beq.n	800862c <pvPortMalloc+0x13c>
 8008626:	b672      	cpsid	i
 8008628:	46c0      	nop			@ (mov r8, r8)
 800862a:	e7fd      	b.n	8008628 <pvPortMalloc+0x138>
	return pvReturn;
 800862c:	68fb      	ldr	r3, [r7, #12]
}
 800862e:	0018      	movs	r0, r3
 8008630:	46bd      	mov	sp, r7
 8008632:	b006      	add	sp, #24
 8008634:	bd80      	pop	{r7, pc}
 8008636:	46c0      	nop			@ (mov r8, r8)
 8008638:	20001b58 	.word	0x20001b58
 800863c:	20001b6c 	.word	0x20001b6c
 8008640:	20001b5c 	.word	0x20001b5c
 8008644:	20001b50 	.word	0x20001b50
 8008648:	20001b60 	.word	0x20001b60
 800864c:	20001b64 	.word	0x20001b64

08008650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d03c      	beq.n	80086dc <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008662:	2308      	movs	r3, #8
 8008664:	425b      	negs	r3, r3
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	18d3      	adds	r3, r2, r3
 800866a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	4b1b      	ldr	r3, [pc, #108]	@ (80086e4 <vPortFree+0x94>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4013      	ands	r3, r2
 800867a:	d102      	bne.n	8008682 <vPortFree+0x32>
 800867c:	b672      	cpsid	i
 800867e:	46c0      	nop			@ (mov r8, r8)
 8008680:	e7fd      	b.n	800867e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d002      	beq.n	8008690 <vPortFree+0x40>
 800868a:	b672      	cpsid	i
 800868c:	46c0      	nop			@ (mov r8, r8)
 800868e:	e7fd      	b.n	800868c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	685a      	ldr	r2, [r3, #4]
 8008694:	4b13      	ldr	r3, [pc, #76]	@ (80086e4 <vPortFree+0x94>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4013      	ands	r3, r2
 800869a:	d01f      	beq.n	80086dc <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d11b      	bne.n	80086dc <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	4b0e      	ldr	r3, [pc, #56]	@ (80086e4 <vPortFree+0x94>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	43db      	mvns	r3, r3
 80086ae:	401a      	ands	r2, r3
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086b4:	f7fe fe74 	bl	80073a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	4b0a      	ldr	r3, [pc, #40]	@ (80086e8 <vPortFree+0x98>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	18d2      	adds	r2, r2, r3
 80086c2:	4b09      	ldr	r3, [pc, #36]	@ (80086e8 <vPortFree+0x98>)
 80086c4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	0018      	movs	r0, r3
 80086ca:	f000 f871 	bl	80087b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80086ce:	4b07      	ldr	r3, [pc, #28]	@ (80086ec <vPortFree+0x9c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	1c5a      	adds	r2, r3, #1
 80086d4:	4b05      	ldr	r3, [pc, #20]	@ (80086ec <vPortFree+0x9c>)
 80086d6:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 80086d8:	f7fe fe6e 	bl	80073b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086dc:	46c0      	nop			@ (mov r8, r8)
 80086de:	46bd      	mov	sp, r7
 80086e0:	b004      	add	sp, #16
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	20001b6c 	.word	0x20001b6c
 80086e8:	20001b5c 	.word	0x20001b5c
 80086ec:	20001b68 	.word	0x20001b68

080086f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086f6:	23c0      	movs	r3, #192	@ 0xc0
 80086f8:	011b      	lsls	r3, r3, #4
 80086fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086fc:	4b26      	ldr	r3, [pc, #152]	@ (8008798 <prvHeapInit+0xa8>)
 80086fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2207      	movs	r2, #7
 8008704:	4013      	ands	r3, r2
 8008706:	d00c      	beq.n	8008722 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	3307      	adds	r3, #7
 800870c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2207      	movs	r2, #7
 8008712:	4393      	bics	r3, r2
 8008714:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	1ad2      	subs	r2, r2, r3
 800871c:	4b1e      	ldr	r3, [pc, #120]	@ (8008798 <prvHeapInit+0xa8>)
 800871e:	18d3      	adds	r3, r2, r3
 8008720:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008726:	4b1d      	ldr	r3, [pc, #116]	@ (800879c <prvHeapInit+0xac>)
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800872c:	4b1b      	ldr	r3, [pc, #108]	@ (800879c <prvHeapInit+0xac>)
 800872e:	2200      	movs	r2, #0
 8008730:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	18d3      	adds	r3, r2, r3
 8008738:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800873a:	2208      	movs	r2, #8
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	1a9b      	subs	r3, r3, r2
 8008740:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2207      	movs	r2, #7
 8008746:	4393      	bics	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	4b14      	ldr	r3, [pc, #80]	@ (80087a0 <prvHeapInit+0xb0>)
 800874e:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8008750:	4b13      	ldr	r3, [pc, #76]	@ (80087a0 <prvHeapInit+0xb0>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2200      	movs	r2, #0
 8008756:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008758:	4b11      	ldr	r3, [pc, #68]	@ (80087a0 <prvHeapInit+0xb0>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2200      	movs	r2, #0
 800875e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	1ad2      	subs	r2, r2, r3
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800876e:	4b0c      	ldr	r3, [pc, #48]	@ (80087a0 <prvHeapInit+0xb0>)
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	685a      	ldr	r2, [r3, #4]
 800877a:	4b0a      	ldr	r3, [pc, #40]	@ (80087a4 <prvHeapInit+0xb4>)
 800877c:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	4b09      	ldr	r3, [pc, #36]	@ (80087a8 <prvHeapInit+0xb8>)
 8008784:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008786:	4b09      	ldr	r3, [pc, #36]	@ (80087ac <prvHeapInit+0xbc>)
 8008788:	2280      	movs	r2, #128	@ 0x80
 800878a:	0612      	lsls	r2, r2, #24
 800878c:	601a      	str	r2, [r3, #0]
}
 800878e:	46c0      	nop			@ (mov r8, r8)
 8008790:	46bd      	mov	sp, r7
 8008792:	b004      	add	sp, #16
 8008794:	bd80      	pop	{r7, pc}
 8008796:	46c0      	nop			@ (mov r8, r8)
 8008798:	20000f50 	.word	0x20000f50
 800879c:	20001b50 	.word	0x20001b50
 80087a0:	20001b58 	.word	0x20001b58
 80087a4:	20001b60 	.word	0x20001b60
 80087a8:	20001b5c 	.word	0x20001b5c
 80087ac:	20001b6c 	.word	0x20001b6c

080087b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087b8:	4b27      	ldr	r3, [pc, #156]	@ (8008858 <prvInsertBlockIntoFreeList+0xa8>)
 80087ba:	60fb      	str	r3, [r7, #12]
 80087bc:	e002      	b.n	80087c4 <prvInsertBlockIntoFreeList+0x14>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d8f7      	bhi.n	80087be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	18d3      	adds	r3, r2, r3
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d108      	bne.n	80087f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	685a      	ldr	r2, [r3, #4]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	18d2      	adds	r2, r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	18d2      	adds	r2, r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	429a      	cmp	r2, r3
 8008804:	d118      	bne.n	8008838 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	4b14      	ldr	r3, [pc, #80]	@ (800885c <prvInsertBlockIntoFreeList+0xac>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	429a      	cmp	r2, r3
 8008810:	d00d      	beq.n	800882e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	18d2      	adds	r2, r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	e008      	b.n	8008840 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800882e:	4b0b      	ldr	r3, [pc, #44]	@ (800885c <prvInsertBlockIntoFreeList+0xac>)
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	e003      	b.n	8008840 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	429a      	cmp	r2, r3
 8008846:	d002      	beq.n	800884e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800884e:	46c0      	nop			@ (mov r8, r8)
 8008850:	46bd      	mov	sp, r7
 8008852:	b004      	add	sp, #16
 8008854:	bd80      	pop	{r7, pc}
 8008856:	46c0      	nop			@ (mov r8, r8)
 8008858:	20001b50 	.word	0x20001b50
 800885c:	20001b58 	.word	0x20001b58

08008860 <memset>:
 8008860:	0003      	movs	r3, r0
 8008862:	1882      	adds	r2, r0, r2
 8008864:	4293      	cmp	r3, r2
 8008866:	d100      	bne.n	800886a <memset+0xa>
 8008868:	4770      	bx	lr
 800886a:	7019      	strb	r1, [r3, #0]
 800886c:	3301      	adds	r3, #1
 800886e:	e7f9      	b.n	8008864 <memset+0x4>

08008870 <__libc_init_array>:
 8008870:	b570      	push	{r4, r5, r6, lr}
 8008872:	2600      	movs	r6, #0
 8008874:	4c0c      	ldr	r4, [pc, #48]	@ (80088a8 <__libc_init_array+0x38>)
 8008876:	4d0d      	ldr	r5, [pc, #52]	@ (80088ac <__libc_init_array+0x3c>)
 8008878:	1b64      	subs	r4, r4, r5
 800887a:	10a4      	asrs	r4, r4, #2
 800887c:	42a6      	cmp	r6, r4
 800887e:	d109      	bne.n	8008894 <__libc_init_array+0x24>
 8008880:	2600      	movs	r6, #0
 8008882:	f000 f823 	bl	80088cc <_init>
 8008886:	4c0a      	ldr	r4, [pc, #40]	@ (80088b0 <__libc_init_array+0x40>)
 8008888:	4d0a      	ldr	r5, [pc, #40]	@ (80088b4 <__libc_init_array+0x44>)
 800888a:	1b64      	subs	r4, r4, r5
 800888c:	10a4      	asrs	r4, r4, #2
 800888e:	42a6      	cmp	r6, r4
 8008890:	d105      	bne.n	800889e <__libc_init_array+0x2e>
 8008892:	bd70      	pop	{r4, r5, r6, pc}
 8008894:	00b3      	lsls	r3, r6, #2
 8008896:	58eb      	ldr	r3, [r5, r3]
 8008898:	4798      	blx	r3
 800889a:	3601      	adds	r6, #1
 800889c:	e7ee      	b.n	800887c <__libc_init_array+0xc>
 800889e:	00b3      	lsls	r3, r6, #2
 80088a0:	58eb      	ldr	r3, [r5, r3]
 80088a2:	4798      	blx	r3
 80088a4:	3601      	adds	r6, #1
 80088a6:	e7f2      	b.n	800888e <__libc_init_array+0x1e>
 80088a8:	08008ab8 	.word	0x08008ab8
 80088ac:	08008ab8 	.word	0x08008ab8
 80088b0:	08008abc 	.word	0x08008abc
 80088b4:	08008ab8 	.word	0x08008ab8

080088b8 <memcpy>:
 80088b8:	2300      	movs	r3, #0
 80088ba:	b510      	push	{r4, lr}
 80088bc:	429a      	cmp	r2, r3
 80088be:	d100      	bne.n	80088c2 <memcpy+0xa>
 80088c0:	bd10      	pop	{r4, pc}
 80088c2:	5ccc      	ldrb	r4, [r1, r3]
 80088c4:	54c4      	strb	r4, [r0, r3]
 80088c6:	3301      	adds	r3, #1
 80088c8:	e7f8      	b.n	80088bc <memcpy+0x4>
	...

080088cc <_init>:
 80088cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ce:	46c0      	nop			@ (mov r8, r8)
 80088d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088d2:	bc08      	pop	{r3}
 80088d4:	469e      	mov	lr, r3
 80088d6:	4770      	bx	lr

080088d8 <_fini>:
 80088d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088da:	46c0      	nop			@ (mov r8, r8)
 80088dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088de:	bc08      	pop	{r3}
 80088e0:	469e      	mov	lr, r3
 80088e2:	4770      	bx	lr
