
BMS_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08007598  08007598  00008598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007604  08007604  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007604  08007604  00008604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800760c  0800760c  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800760c  0800760c  0000860c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007610  08007610  00008610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007614  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000874  20000068  0800767c  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008dc  0800767c  000098dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b3a5  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003969  00000000  00000000  0002443d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a30  00000000  00000000  00027da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001458  00000000  00000000  000297d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000252f6  00000000  00000000  0002ac30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e980  00000000  00000000  0004ff26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd6ac  00000000  00000000  0006e8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014bf52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000789c  00000000  00000000  0014bf98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00153834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007580 	.word	0x08007580

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08007580 	.word	0x08007580

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_CAN_RxFifo0MsgPendingCallback>:
extern TIM_HandleTypeDef htim3;



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
//	slave_return_t return_message;

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 80005a8:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80005aa:	4a18      	ldr	r2, [pc, #96]	@ (800060c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80005ac:	2100      	movs	r1, #0
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f001 fe01 	bl	80021b6 <HAL_CAN_GetRxMessage>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d121      	bne.n	80005fe <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
    {
//    	Start timer and turn ON Yellow LED
    	HAL_TIM_Base_Start_IT(&htim3);
 80005ba:	4815      	ldr	r0, [pc, #84]	@ (8000610 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80005bc:	f004 fd82 	bl	80050c4 <HAL_TIM_Base_Start_IT>
        HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_SET); // Turn ON LED
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005c6:	4813      	ldr	r0, [pc, #76]	@ (8000614 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80005c8:	f002 fbec 	bl	8002da4 <HAL_GPIO_WritePin>

        // Print or process the received message
        printf("Received CAN Message: ");
 80005cc:	4812      	ldr	r0, [pc, #72]	@ (8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80005ce:	f006 f92d 	bl	800682c <iprintf>
        for (int i = 0; i < RxHeader.DLC; i++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	e00a      	b.n	80005ee <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
        {
            printf("%02X ", RxData[i]);
 80005d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000608 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	4413      	add	r3, r2
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	4619      	mov	r1, r3
 80005e2:	480e      	ldr	r0, [pc, #56]	@ (800061c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80005e4:	f006 f922 	bl	800682c <iprintf>
        for (int i = 0; i < RxHeader.DLC; i++)
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3301      	adds	r3, #1
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	4b07      	ldr	r3, [pc, #28]	@ (800060c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80005f0:	691a      	ldr	r2, [r3, #16]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d8ef      	bhi.n	80005d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
        }
//        return_message = convert_to_struct(RxData);

        printf("\n");
 80005f8:	200a      	movs	r0, #10
 80005fa:	f006 f929 	bl	8006850 <putchar>
    }
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200000a0 	.word	0x200000a0
 800060c:	20000084 	.word	0x20000084
 8000610:	200002e4 	.word	0x200002e4
 8000614:	40020400 	.word	0x40020400
 8000618:	08007598 	.word	0x08007598
 800061c:	080075b0 	.word	0x080075b0

08000620 <HAL_TIM_PeriodElapsedCallback>:
	//    	Start timer and turn ON Yellow LED
	    	HAL_TIM_Base_Start_IT(&htim3);
	        HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_SET); // Turn ON LED
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]


	if (htim->Instance == TIM2) {  // Check if it's the correct timer
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000630:	d161      	bne.n	80006f6 <HAL_TIM_PeriodElapsedCallback+0xd6>

    	if((timer_count % HB_10MS_PERIODS) == 0){
 8000632:	4b3a      	ldr	r3, [pc, #232]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	4a39      	ldr	r2, [pc, #228]	@ (8000720 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800063a:	fba2 1203 	umull	r1, r2, r2, r3
 800063e:	0912      	lsrs	r2, r2, #4
 8000640:	2132      	movs	r1, #50	@ 0x32
 8000642:	fb01 f202 	mul.w	r2, r1, r2
 8000646:	1a9b      	subs	r3, r3, r2
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d104      	bne.n	8000658 <HAL_TIM_PeriodElapsedCallback+0x38>
    		HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin); // Toggle LED
 800064e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000652:	4834      	ldr	r0, [pc, #208]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000654:	f002 fbbf 	bl	8002dd6 <HAL_GPIO_TogglePin>
    	}

    	if((timer_count % CHARGER_CONNECTION_10MS_PERIODS) == 0){
 8000658:	4b30      	ldr	r3, [pc, #192]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800065a:	781b      	ldrb	r3, [r3, #0]

    	}

    	if((timer_count % ASK_SLAVE_FOR_INFO_10MS_PERIODS) == 0){
 800065c:	4b2f      	ldr	r3, [pc, #188]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800065e:	781b      	ldrb	r3, [r3, #0]

    	}


    	// High voltage light blinking and activating logic
    	if((timer_count % SLOW_BLINKING_HV_10MS_PERIODS) == 0)
 8000660:	4b2e      	ldr	r3, [pc, #184]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	4a2e      	ldr	r2, [pc, #184]	@ (8000720 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000668:	fba2 1203 	umull	r1, r2, r2, r3
 800066c:	0912      	lsrs	r2, r2, #4
 800066e:	2132      	movs	r1, #50	@ 0x32
 8000670:	fb01 f202 	mul.w	r2, r1, r2
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	b2db      	uxtb	r3, r3
 8000678:	2b00      	cmp	r3, #0
 800067a:	d108      	bne.n	800068e <HAL_TIM_PeriodElapsedCallback+0x6e>
    	{
    		//  If the precharge contactor is ON, blink the HV light
    		if(blinking_HV_led == 1)
 800067c:	4b2a      	ldr	r3, [pc, #168]	@ (8000728 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b01      	cmp	r3, #1
 8000684:	d103      	bne.n	800068e <HAL_TIM_PeriodElapsedCallback+0x6e>
    			HAL_GPIO_TogglePin(LIGHT_GPIO_Port, LIGHT_Pin);
 8000686:	2108      	movs	r1, #8
 8000688:	4828      	ldr	r0, [pc, #160]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800068a:	f002 fba4 	bl	8002dd6 <HAL_GPIO_TogglePin>
    	}
    	if((timer_count % FAST_BLINKING_HV_10MS_PERIODS) == 0)
 800068e:	4b23      	ldr	r3, [pc, #140]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b2da      	uxtb	r2, r3
 8000694:	4b26      	ldr	r3, [pc, #152]	@ (8000730 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000696:	fba3 1302 	umull	r1, r3, r3, r2
 800069a:	08d9      	lsrs	r1, r3, #3
 800069c:	460b      	mov	r3, r1
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	440b      	add	r3, r1
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d108      	bne.n	80006be <HAL_TIM_PeriodElapsedCallback+0x9e>
    	{
    		//  If the precharge contactor and the main contactor are ON, blink the HV light rapidly
    		if(blinking_HV_led == 2)
 80006ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	d103      	bne.n	80006be <HAL_TIM_PeriodElapsedCallback+0x9e>
    			HAL_GPIO_TogglePin(LIGHT_GPIO_Port, LIGHT_Pin);
 80006b6:	2108      	movs	r1, #8
 80006b8:	481c      	ldr	r0, [pc, #112]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80006ba:	f002 fb8c 	bl	8002dd6 <HAL_GPIO_TogglePin>
    	}

    	// If timer counter has not reached max value, increment
    	((timer_count + 1) % TIMER_MAX) ? timer_count = 0 : timer_count++;
 80006be:	4b17      	ldr	r3, [pc, #92]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	1c5a      	adds	r2, r3, #1
 80006c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80006c8:	fb83 1302 	smull	r1, r3, r3, r2
 80006cc:	1199      	asrs	r1, r3, #6
 80006ce:	17d3      	asrs	r3, r2, #31
 80006d0:	1acb      	subs	r3, r1, r3
 80006d2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006d6:	fb01 f303 	mul.w	r3, r1, r3
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d003      	beq.n	80006e8 <HAL_TIM_PeriodElapsedCallback+0xc8>
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
 80006e6:	e006      	b.n	80006f6 <HAL_TIM_PeriodElapsedCallback+0xd6>
 80006e8:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	3301      	adds	r3, #1
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80006f4:	701a      	strb	r2, [r3, #0]
    }


	// Timer that handles the activation time of yellow led on CAN package Rx/Tx
    if (htim->Instance == TIM3) {
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000738 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d108      	bne.n	8000712 <HAL_TIM_PeriodElapsedCallback+0xf2>
        HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET); // Turn off LED
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000706:	4807      	ldr	r0, [pc, #28]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000708:	f002 fb4c 	bl	8002da4 <HAL_GPIO_WritePin>
        HAL_TIM_Base_Stop_IT(&htim3);
 800070c:	480b      	ldr	r0, [pc, #44]	@ (800073c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800070e:	f004 fd49 	bl	80051a4 <HAL_TIM_Base_Stop_IT>
    }

}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000785 	.word	0x20000785
 8000720:	51eb851f 	.word	0x51eb851f
 8000724:	40020400 	.word	0x40020400
 8000728:	20000787 	.word	0x20000787
 800072c:	40020000 	.word	0x40020000
 8000730:	cccccccd 	.word	0xcccccccd
 8000734:	10624dd3 	.word	0x10624dd3
 8000738:	40000400 	.word	0x40000400
 800073c:	200002e4 	.word	0x200002e4

08000740 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == IGNITION_Pin){ //Ignition interrupt triggered on both rising and falling edge.
 800074a:	88fb      	ldrh	r3, [r7, #6]
 800074c:	2b20      	cmp	r3, #32
 800074e:	d108      	bne.n	8000762 <HAL_GPIO_EXTI_Callback+0x22>

		all_connection_states ^= IGNITION_MASK; //Ignition bit is toggled when edge is detected
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <HAL_GPIO_EXTI_Callback+0x60>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	f083 0301 	eor.w	r3, r3, #1
 800075a:	b2da      	uxtb	r2, r3
 800075c:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <HAL_GPIO_EXTI_Callback+0x60>)
 800075e:	701a      	strb	r2, [r3, #0]
		deactivate_precharge_contactor();

	}


}
 8000760:	e01a      	b.n	8000798 <HAL_GPIO_EXTI_Callback+0x58>
	}else if(GPIO_Pin == CHARGER_DETECT_Pin){ //Ignition interrupt triggered on both rising and falling edge.
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	2b08      	cmp	r3, #8
 8000766:	d108      	bne.n	800077a <HAL_GPIO_EXTI_Callback+0x3a>
		all_connection_states ^= IGNITION_MASK; //Charger bit is toggled when edge is detected
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <HAL_GPIO_EXTI_Callback+0x60>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	f083 0301 	eor.w	r3, r3, #1
 8000772:	b2da      	uxtb	r2, r3
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <HAL_GPIO_EXTI_Callback+0x60>)
 8000776:	701a      	strb	r2, [r3, #0]
}
 8000778:	e00e      	b.n	8000798 <HAL_GPIO_EXTI_Callback+0x58>
	}else if(GPIO_Pin == EMERGENCY_STOP_Pin){
 800077a:	88fb      	ldrh	r3, [r7, #6]
 800077c:	2b10      	cmp	r3, #16
 800077e:	d10b      	bne.n	8000798 <HAL_GPIO_EXTI_Callback+0x58>
		all_connection_states |= IGNITION_MASK;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <HAL_GPIO_EXTI_Callback+0x60>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	f043 0301 	orr.w	r3, r3, #1
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b04      	ldr	r3, [pc, #16]	@ (80007a0 <HAL_GPIO_EXTI_Callback+0x60>)
 800078e:	701a      	strb	r2, [r3, #0]
		deactivate_main_contactor();
 8000790:	f000 fc0e 	bl	8000fb0 <deactivate_main_contactor>
		deactivate_precharge_contactor();
 8000794:	f000 fc24 	bl	8000fe0 <deactivate_precharge_contactor>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000786 	.word	0x20000786

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f001 f912 	bl	80019d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f834 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b0:	f000 faf2 	bl	8000d98 <MX_GPIO_Init>
  MX_CAN2_Init();
 80007b4:	f000 f8f0 	bl	8000998 <MX_CAN2_Init>
  MX_I2C1_Init();
 80007b8:	f000 f922 	bl	8000a00 <MX_I2C1_Init>
  MX_I2C3_Init();
 80007bc:	f000 f94e 	bl	8000a5c <MX_I2C3_Init>
  MX_SDIO_SD_Init();
 80007c0:	f000 f97a 	bl	8000ab8 <MX_SDIO_SD_Init>
  MX_SPI3_Init();
 80007c4:	f000 f9a8 	bl	8000b18 <MX_SPI3_Init>
  MX_USART6_IRDA_Init();
 80007c8:	f000 fa9e 	bl	8000d08 <MX_USART6_IRDA_Init>
  MX_USB_OTG_FS_HCD_Init();
 80007cc:	f000 fac2 	bl	8000d54 <MX_USB_OTG_FS_HCD_Init>
  MX_ADC1_Init();
 80007d0:	f000 f890 	bl	80008f4 <MX_ADC1_Init>
  MX_USART1_IRDA_Init();
 80007d4:	f000 fa72 	bl	8000cbc <MX_USART1_IRDA_Init>
  MX_TIM2_Init();
 80007d8:	f000 f9d4 	bl	8000b84 <MX_TIM2_Init>
  MX_TIM3_Init();
 80007dc:	f000 fa20 	bl	8000c20 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ITM_Init(); // Init ITM to send data through ITM port 0
 80007e0:	f000 fbca 	bl	8000f78 <ITM_Init>

  HAL_TIM_Base_Start_IT(&htim2); //Start Main timer (10 ms)
 80007e4:	4809      	ldr	r0, [pc, #36]	@ (800080c <main+0x68>)
 80007e6:	f004 fc6d 	bl	80050c4 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if((all_connection_states & CHARGER_CONN_MASK) != 0){
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <main+0x6c>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	f003 0302 	and.w	r3, r3, #2
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d101      	bne.n	80007fc <main+0x58>



	  }else if((all_connection_states & IGNITION_MASK) != 0){
 80007f8:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <main+0x6c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]


	  }


	  master_mode = 0;
 80007fc:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <main+0x70>)
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(MAIN_LOOP_DELAY_MS);
 8000802:	2014      	movs	r0, #20
 8000804:	f001 f956 	bl	8001ab4 <HAL_Delay>
	  if((all_connection_states & CHARGER_CONN_MASK) != 0){
 8000808:	e7ef      	b.n	80007ea <main+0x46>
 800080a:	bf00      	nop
 800080c:	2000029c 	.word	0x2000029c
 8000810:	20000786 	.word	0x20000786
 8000814:	20000784 	.word	0x20000784

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b094      	sub	sp, #80	@ 0x50
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2234      	movs	r2, #52	@ 0x34
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f006 f8f2 	bl	8006a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	f107 0308 	add.w	r3, r7, #8
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b2a      	ldr	r3, [pc, #168]	@ (80008ec <SystemClock_Config+0xd4>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000844:	4a29      	ldr	r2, [pc, #164]	@ (80008ec <SystemClock_Config+0xd4>)
 8000846:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084a:	6413      	str	r3, [r2, #64]	@ 0x40
 800084c:	4b27      	ldr	r3, [pc, #156]	@ (80008ec <SystemClock_Config+0xd4>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000858:	2300      	movs	r3, #0
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	4b24      	ldr	r3, [pc, #144]	@ (80008f0 <SystemClock_Config+0xd8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a23      	ldr	r2, [pc, #140]	@ (80008f0 <SystemClock_Config+0xd8>)
 8000862:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b21      	ldr	r3, [pc, #132]	@ (80008f0 <SystemClock_Config+0xd8>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000874:	2303      	movs	r3, #3
 8000876:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000878:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800087c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087e:	2301      	movs	r3, #1
 8000880:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000882:	2310      	movs	r3, #16
 8000884:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	2302      	movs	r3, #2
 8000888:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800088e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000890:	230f      	movs	r3, #15
 8000892:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000894:	2390      	movs	r3, #144	@ 0x90
 8000896:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800089c:	2305      	movs	r3, #5
 800089e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4618      	mov	r0, r3
 80008aa:	f003 fafb 	bl	8003ea4 <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80008b4:	f000 fb76 	bl	8000fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	230f      	movs	r3, #15
 80008ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f002 ff38 	bl	8003748 <HAL_RCC_ClockConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008de:	f000 fb61 	bl	8000fa4 <Error_Handler>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3750      	adds	r7, #80	@ 0x50
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40007000 	.word	0x40007000

080008f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008fa:	463b      	mov	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000906:	4b21      	ldr	r3, [pc, #132]	@ (800098c <MX_ADC1_Init+0x98>)
 8000908:	4a21      	ldr	r2, [pc, #132]	@ (8000990 <MX_ADC1_Init+0x9c>)
 800090a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800090c:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <MX_ADC1_Init+0x98>)
 800090e:	2200      	movs	r2, #0
 8000910:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000912:	4b1e      	ldr	r3, [pc, #120]	@ (800098c <MX_ADC1_Init+0x98>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000918:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <MX_ADC1_Init+0x98>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800091e:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <MX_ADC1_Init+0x98>)
 8000920:	2200      	movs	r2, #0
 8000922:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000924:	4b19      	ldr	r3, [pc, #100]	@ (800098c <MX_ADC1_Init+0x98>)
 8000926:	2200      	movs	r2, #0
 8000928:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800092c:	4b17      	ldr	r3, [pc, #92]	@ (800098c <MX_ADC1_Init+0x98>)
 800092e:	2200      	movs	r2, #0
 8000930:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000932:	4b16      	ldr	r3, [pc, #88]	@ (800098c <MX_ADC1_Init+0x98>)
 8000934:	4a17      	ldr	r2, [pc, #92]	@ (8000994 <MX_ADC1_Init+0xa0>)
 8000936:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000938:	4b14      	ldr	r3, [pc, #80]	@ (800098c <MX_ADC1_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800093e:	4b13      	ldr	r3, [pc, #76]	@ (800098c <MX_ADC1_Init+0x98>)
 8000940:	2201      	movs	r2, #1
 8000942:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000944:	4b11      	ldr	r3, [pc, #68]	@ (800098c <MX_ADC1_Init+0x98>)
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800094c:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <MX_ADC1_Init+0x98>)
 800094e:	2201      	movs	r2, #1
 8000950:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000952:	480e      	ldr	r0, [pc, #56]	@ (800098c <MX_ADC1_Init+0x98>)
 8000954:	f001 f8d2 	bl	8001afc <HAL_ADC_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800095e:	f000 fb21 	bl	8000fa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000962:	2309      	movs	r3, #9
 8000964:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000966:	2301      	movs	r3, #1
 8000968:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096e:	463b      	mov	r3, r7
 8000970:	4619      	mov	r1, r3
 8000972:	4806      	ldr	r0, [pc, #24]	@ (800098c <MX_ADC1_Init+0x98>)
 8000974:	f001 f906 	bl	8001b84 <HAL_ADC_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800097e:	f000 fb11 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200000a8 	.word	0x200000a8
 8000990:	40012000 	.word	0x40012000
 8000994:	0f000001 	.word	0x0f000001

08000998 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800099c:	4b16      	ldr	r3, [pc, #88]	@ (80009f8 <MX_CAN2_Init+0x60>)
 800099e:	4a17      	ldr	r2, [pc, #92]	@ (80009fc <MX_CAN2_Init+0x64>)
 80009a0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80009a2:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <MX_CAN2_Init+0x60>)
 80009a4:	2210      	movs	r2, #16
 80009a6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80009a8:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <MX_CAN2_Init+0x60>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009ae:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <MX_CAN2_Init+0x60>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80009b4:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <MX_CAN2_Init+0x60>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009ba:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <MX_CAN2_Init+0x60>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80009c0:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <MX_CAN2_Init+0x60>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <MX_CAN2_Init+0x60>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80009cc:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <MX_CAN2_Init+0x60>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <MX_CAN2_Init+0x60>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80009d8:	4b07      	ldr	r3, [pc, #28]	@ (80009f8 <MX_CAN2_Init+0x60>)
 80009da:	2200      	movs	r2, #0
 80009dc:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80009de:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <MX_CAN2_Init+0x60>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	@ (80009f8 <MX_CAN2_Init+0x60>)
 80009e6:	f001 faeb 	bl	8001fc0 <HAL_CAN_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80009f0:	f000 fad8 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200000f0 	.word	0x200000f0
 80009fc:	40006800 	.word	0x40006800

08000a00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a04:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <MX_I2C1_Init+0x50>)
 8000a06:	4a13      	ldr	r2, [pc, #76]	@ (8000a54 <MX_I2C1_Init+0x54>)
 8000a08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <MX_I2C1_Init+0x50>)
 8000a0c:	4a12      	ldr	r2, [pc, #72]	@ (8000a58 <MX_I2C1_Init+0x58>)
 8000a0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <MX_I2C1_Init+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <MX_I2C1_Init+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <MX_I2C1_Init+0x50>)
 8000a1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <MX_I2C1_Init+0x50>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_I2C1_Init+0x50>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a30:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <MX_I2C1_Init+0x50>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <MX_I2C1_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a3c:	4804      	ldr	r0, [pc, #16]	@ (8000a50 <MX_I2C1_Init+0x50>)
 8000a3e:	f002 fa65 	bl	8002f0c <HAL_I2C_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a48:	f000 faac 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000118 	.word	0x20000118
 8000a54:	40005400 	.word	0x40005400
 8000a58:	000186a0 	.word	0x000186a0

08000a5c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <MX_I2C3_Init+0x50>)
 8000a62:	4a13      	ldr	r2, [pc, #76]	@ (8000ab0 <MX_I2C3_Init+0x54>)
 8000a64:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <MX_I2C3_Init+0x50>)
 8000a68:	4a12      	ldr	r2, [pc, #72]	@ (8000ab4 <MX_I2C3_Init+0x58>)
 8000a6a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <MX_I2C3_Init+0x50>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <MX_I2C3_Init+0x50>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <MX_I2C3_Init+0x50>)
 8000a7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a7e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a80:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <MX_I2C3_Init+0x50>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a86:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <MX_I2C3_Init+0x50>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	@ (8000aac <MX_I2C3_Init+0x50>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <MX_I2C3_Init+0x50>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	@ (8000aac <MX_I2C3_Init+0x50>)
 8000a9a:	f002 fa37 	bl	8002f0c <HAL_I2C_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000aa4:	f000 fa7e 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	2000016c 	.word	0x2000016c
 8000ab0:	40005c00 	.word	0x40005c00
 8000ab4:	000186a0 	.word	0x000186a0

08000ab8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000abc:	4b14      	ldr	r3, [pc, #80]	@ (8000b10 <MX_SDIO_SD_Init+0x58>)
 8000abe:	4a15      	ldr	r2, [pc, #84]	@ (8000b14 <MX_SDIO_SD_Init+0x5c>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <MX_SDIO_SD_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <MX_SDIO_SD_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000ace:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <MX_SDIO_SD_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <MX_SDIO_SD_Init+0x58>)
 8000ad6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ada:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <MX_SDIO_SD_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <MX_SDIO_SD_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000ae8:	4809      	ldr	r0, [pc, #36]	@ (8000b10 <MX_SDIO_SD_Init+0x58>)
 8000aea:	f003 fc5f 	bl	80043ac <HAL_SD_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_SDIO_SD_Init+0x40>
  {
    Error_Handler();
 8000af4:	f000 fa56 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000af8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000afc:	4804      	ldr	r0, [pc, #16]	@ (8000b10 <MX_SDIO_SD_Init+0x58>)
 8000afe:	f003 fea9 	bl	8004854 <HAL_SD_ConfigWideBusOperation>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_SDIO_SD_Init+0x54>
  {
    Error_Handler();
 8000b08:	f000 fa4c 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200001c0 	.word	0x200001c0
 8000b14:	40012c00 	.word	0x40012c00

08000b18 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <MX_SPI3_Init+0x64>)
 8000b1e:	4a18      	ldr	r2, [pc, #96]	@ (8000b80 <MX_SPI3_Init+0x68>)
 8000b20:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b22:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <MX_SPI3_Init+0x64>)
 8000b24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b28:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b2a:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <MX_SPI3_Init+0x64>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b30:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <MX_SPI3_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <MX_SPI3_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <MX_SPI3_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <MX_SPI3_Init+0x64>)
 8000b44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b48:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <MX_SPI3_Init+0x64>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b50:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <MX_SPI3_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <MX_SPI3_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <MX_SPI3_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <MX_SPI3_Init+0x64>)
 8000b64:	220a      	movs	r2, #10
 8000b66:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b68:	4804      	ldr	r0, [pc, #16]	@ (8000b7c <MX_SPI3_Init+0x64>)
 8000b6a:	f004 f9d2 	bl	8004f12 <HAL_SPI_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000b74:	f000 fa16 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000244 	.word	0x20000244
 8000b80:	40003c00 	.word	0x40003c00

08000b84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b98:	463b      	mov	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c1c <MX_TIM2_Init+0x98>)
 8000ba2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ba6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = PSC_1000;
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <MX_TIM2_Init+0x98>)
 8000baa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <MX_TIM2_Init+0x98>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = COUNTER_50MS;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <MX_TIM2_Init+0x98>)
 8000bb8:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8000bbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <MX_TIM2_Init+0x98>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <MX_TIM2_Init+0x98>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bca:	4814      	ldr	r0, [pc, #80]	@ (8000c1c <MX_TIM2_Init+0x98>)
 8000bcc:	f004 fa2a 	bl	8005024 <HAL_TIM_Base_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bd6:	f000 f9e5 	bl	8000fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	4619      	mov	r1, r3
 8000be6:	480d      	ldr	r0, [pc, #52]	@ (8000c1c <MX_TIM2_Init+0x98>)
 8000be8:	f004 fbfb 	bl	80053e2 <HAL_TIM_ConfigClockSource>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bf2:	f000 f9d7 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bfe:	463b      	mov	r3, r7
 8000c00:	4619      	mov	r1, r3
 8000c02:	4806      	ldr	r0, [pc, #24]	@ (8000c1c <MX_TIM2_Init+0x98>)
 8000c04:	f004 fe22 	bl	800584c <HAL_TIMEx_MasterConfigSynchronization>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c0e:	f000 f9c9 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000029c 	.word	0x2000029c

08000c20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	463b      	mov	r3, r7
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <MX_TIM3_Init+0x94>)
 8000c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000cb8 <MX_TIM3_Init+0x98>)
 8000c40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = PSC_1000;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb4 <MX_TIM3_Init+0x94>)
 8000c44:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <MX_TIM3_Init+0x94>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = COUNTER_50MS;
 8000c50:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <MX_TIM3_Init+0x94>)
 8000c52:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8000c56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c58:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <MX_TIM3_Init+0x94>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <MX_TIM3_Init+0x94>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c64:	4813      	ldr	r0, [pc, #76]	@ (8000cb4 <MX_TIM3_Init+0x94>)
 8000c66:	f004 f9dd 	bl	8005024 <HAL_TIM_Base_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c70:	f000 f998 	bl	8000fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480c      	ldr	r0, [pc, #48]	@ (8000cb4 <MX_TIM3_Init+0x94>)
 8000c82:	f004 fbae 	bl	80053e2 <HAL_TIM_ConfigClockSource>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c8c:	f000 f98a 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c90:	2300      	movs	r3, #0
 8000c92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c98:	463b      	mov	r3, r7
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_TIM3_Init+0x94>)
 8000c9e:	f004 fdd5 	bl	800584c <HAL_TIMEx_MasterConfigSynchronization>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ca8:	f000 f97c 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200002e4 	.word	0x200002e4
 8000cb8:	40000400 	.word	0x40000400

08000cbc <MX_USART1_IRDA_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_IRDA_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  hirda1.Instance = USART1;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <MX_USART1_IRDA_Init+0x44>)
 8000cc2:	4a10      	ldr	r2, [pc, #64]	@ (8000d04 <MX_USART1_IRDA_Init+0x48>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hirda1.Init.BaudRate = 115200;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <MX_USART1_IRDA_Init+0x44>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  hirda1.Init.WordLength = IRDA_WORDLENGTH_8B;
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <MX_USART1_IRDA_Init+0x44>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  hirda1.Init.Parity = IRDA_PARITY_NONE;
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <MX_USART1_IRDA_Init+0x44>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  hirda1.Init.Mode = IRDA_MODE_TX_RX;
 8000cda:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <MX_USART1_IRDA_Init+0x44>)
 8000cdc:	220c      	movs	r2, #12
 8000cde:	611a      	str	r2, [r3, #16]
  hirda1.Init.Prescaler = 1;
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <MX_USART1_IRDA_Init+0x44>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	751a      	strb	r2, [r3, #20]
  hirda1.Init.IrDAMode = IRDA_POWERMODE_NORMAL;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <MX_USART1_IRDA_Init+0x44>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  if (HAL_IRDA_Init(&hirda1) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	@ (8000d00 <MX_USART1_IRDA_Init+0x44>)
 8000cee:	f002 fa51 	bl	8003194 <HAL_IRDA_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_USART1_IRDA_Init+0x40>
  {
    Error_Handler();
 8000cf8:	f000 f954 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2000032c 	.word	0x2000032c
 8000d04:	40011000 	.word	0x40011000

08000d08 <MX_USART6_IRDA_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_IRDA_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  hirda6.Instance = USART6;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <MX_USART6_IRDA_Init+0x44>)
 8000d0e:	4a10      	ldr	r2, [pc, #64]	@ (8000d50 <MX_USART6_IRDA_Init+0x48>)
 8000d10:	601a      	str	r2, [r3, #0]
  hirda6.Init.BaudRate = 115200;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <MX_USART6_IRDA_Init+0x44>)
 8000d14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d18:	605a      	str	r2, [r3, #4]
  hirda6.Init.WordLength = IRDA_WORDLENGTH_8B;
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <MX_USART6_IRDA_Init+0x44>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hirda6.Init.Parity = IRDA_PARITY_NONE;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <MX_USART6_IRDA_Init+0x44>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  hirda6.Init.Mode = IRDA_MODE_TX_RX;
 8000d26:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <MX_USART6_IRDA_Init+0x44>)
 8000d28:	220c      	movs	r2, #12
 8000d2a:	611a      	str	r2, [r3, #16]
  hirda6.Init.Prescaler = 1;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <MX_USART6_IRDA_Init+0x44>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	751a      	strb	r2, [r3, #20]
  hirda6.Init.IrDAMode = IRDA_POWERMODE_NORMAL;
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <MX_USART6_IRDA_Init+0x44>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_IRDA_Init(&hirda6) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <MX_USART6_IRDA_Init+0x44>)
 8000d3a:	f002 fa2b 	bl	8003194 <HAL_IRDA_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_USART6_IRDA_Init+0x40>
  {
    Error_Handler();
 8000d44:	f000 f92e 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000368 	.word	0x20000368
 8000d50:	40011400 	.word	0x40011400

08000d54 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d58:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000d5a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d5e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000d62:	2208      	movs	r2, #8
 8000d64:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000d72:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000d74:	2202      	movs	r2, #2
 8000d76:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000d80:	f002 f85c 	bl	8002e3c <HAL_HCD_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8000d8a:	f000 f90b 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200003a4 	.word	0x200003a4

08000d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	@ 0x28
 8000d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b6d      	ldr	r3, [pc, #436]	@ (8000f68 <MX_GPIO_Init+0x1d0>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a6c      	ldr	r2, [pc, #432]	@ (8000f68 <MX_GPIO_Init+0x1d0>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b6a      	ldr	r3, [pc, #424]	@ (8000f68 <MX_GPIO_Init+0x1d0>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b66      	ldr	r3, [pc, #408]	@ (8000f68 <MX_GPIO_Init+0x1d0>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	4a65      	ldr	r2, [pc, #404]	@ (8000f68 <MX_GPIO_Init+0x1d0>)
 8000dd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dda:	4b63      	ldr	r3, [pc, #396]	@ (8000f68 <MX_GPIO_Init+0x1d0>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	4b5f      	ldr	r3, [pc, #380]	@ (8000f68 <MX_GPIO_Init+0x1d0>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	4a5e      	ldr	r2, [pc, #376]	@ (8000f68 <MX_GPIO_Init+0x1d0>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df6:	4b5c      	ldr	r3, [pc, #368]	@ (8000f68 <MX_GPIO_Init+0x1d0>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	4b58      	ldr	r3, [pc, #352]	@ (8000f68 <MX_GPIO_Init+0x1d0>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	4a57      	ldr	r2, [pc, #348]	@ (8000f68 <MX_GPIO_Init+0x1d0>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e12:	4b55      	ldr	r3, [pc, #340]	@ (8000f68 <MX_GPIO_Init+0x1d0>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	4b51      	ldr	r3, [pc, #324]	@ (8000f68 <MX_GPIO_Init+0x1d0>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	4a50      	ldr	r2, [pc, #320]	@ (8000f68 <MX_GPIO_Init+0x1d0>)
 8000e28:	f043 0308 	orr.w	r3, r3, #8
 8000e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2e:	4b4e      	ldr	r3, [pc, #312]	@ (8000f68 <MX_GPIO_Init+0x1d0>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PRECHARGE_CONTACTOR_Pin|MAIN_CONTACTOR_Pin|GPIO0_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2107      	movs	r1, #7
 8000e3e:	484b      	ldr	r0, [pc, #300]	@ (8000f6c <MX_GPIO_Init+0x1d4>)
 8000e40:	f001 ffb0 	bl	8002da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LIGHT_Pin|CHANNEL_STATUS_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2148      	movs	r1, #72	@ 0x48
 8000e48:	4849      	ldr	r0, [pc, #292]	@ (8000f70 <MX_GPIO_Init+0x1d8>)
 8000e4a:	f001 ffab 	bl	8002da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO3_Pin|YELLOW_LED_Pin|RED_LED_Pin|GPIO2_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 4146 	mov.w	r1, #50688	@ 0xc600
 8000e54:	4847      	ldr	r0, [pc, #284]	@ (8000f74 <MX_GPIO_Init+0x1dc>)
 8000e56:	f001 ffa5 	bl	8002da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ISOLATION_FAULT_DETECT_Pin */
  GPIO_InitStruct.Pin = ISOLATION_FAULT_DETECT_Pin;
 8000e5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ISOLATION_FAULT_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	483f      	ldr	r0, [pc, #252]	@ (8000f6c <MX_GPIO_Init+0x1d4>)
 8000e70:	f001 fe04 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PRECHARGE_CONTACTOR_Pin MAIN_CONTACTOR_Pin GPIO0_Pin */
  GPIO_InitStruct.Pin = PRECHARGE_CONTACTOR_Pin|MAIN_CONTACTOR_Pin|GPIO0_Pin;
 8000e74:	2307      	movs	r3, #7
 8000e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4838      	ldr	r0, [pc, #224]	@ (8000f6c <MX_GPIO_Init+0x1d4>)
 8000e8c:	f001 fdf6 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGER_DETECT_Pin IGNITION_Pin */
  GPIO_InitStruct.Pin = CHARGER_DETECT_Pin|IGNITION_Pin;
 8000e90:	2328      	movs	r3, #40	@ 0x28
 8000e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e94:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000e98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4831      	ldr	r0, [pc, #196]	@ (8000f6c <MX_GPIO_Init+0x1d4>)
 8000ea6:	f001 fde9 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CURRENT_Pin */
  GPIO_InitStruct.Pin = CURRENT_Pin;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CURRENT_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	482c      	ldr	r0, [pc, #176]	@ (8000f70 <MX_GPIO_Init+0x1d8>)
 8000ebe:	f001 fddd 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHT_Pin CHANNEL_STATUS_Pin */
  GPIO_InitStruct.Pin = LIGHT_Pin|CHANNEL_STATUS_Pin;
 8000ec2:	2348      	movs	r3, #72	@ 0x48
 8000ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4825      	ldr	r0, [pc, #148]	@ (8000f70 <MX_GPIO_Init+0x1d8>)
 8000eda:	f001 fdcf 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : EMERGENCY_STOP_Pin */
  GPIO_InitStruct.Pin = EMERGENCY_STOP_Pin;
 8000ede:	2310      	movs	r3, #16
 8000ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ee2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMERGENCY_STOP_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	481e      	ldr	r0, [pc, #120]	@ (8000f6c <MX_GPIO_Init+0x1d4>)
 8000ef4:	f001 fdc2 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ISOLATION_FAULT_DETECTB0_Pin */
  GPIO_InitStruct.Pin = ISOLATION_FAULT_DETECTB0_Pin;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ISOLATION_FAULT_DETECTB0_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4619      	mov	r1, r3
 8000f0a:	481a      	ldr	r0, [pc, #104]	@ (8000f74 <MX_GPIO_Init+0x1dc>)
 8000f0c:	f001 fdb6 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin YELLOW_LED_Pin RED_LED_Pin GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|YELLOW_LED_Pin|RED_LED_Pin|GPIO2_Pin;
 8000f10:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4812      	ldr	r0, [pc, #72]	@ (8000f74 <MX_GPIO_Init+0x1dc>)
 8000f2a:	f001 fda7 	bl	8002a7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	2009      	movs	r0, #9
 8000f34:	f001 fd6b 	bl	8002a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f38:	2009      	movs	r0, #9
 8000f3a:	f001 fd84 	bl	8002a46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	200a      	movs	r0, #10
 8000f44:	f001 fd63 	bl	8002a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f48:	200a      	movs	r0, #10
 8000f4a:	f001 fd7c 	bl	8002a46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	2017      	movs	r0, #23
 8000f54:	f001 fd5b 	bl	8002a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f58:	2017      	movs	r0, #23
 8000f5a:	f001 fd74 	bl	8002a46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	@ 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020800 	.word	0x40020800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40020400 	.word	0x40020400

08000f78 <ITM_Init>:
/* USER CODE BEGIN 4 */




void ITM_Init(void) {
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
    // Enable the ITM (Instrumentation Trace Macrocell)
    ITM->TCR = ITM_TCR_ITMENA_Msk;        // Enable ITM
 8000f7c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f80:	2201      	movs	r2, #1
 8000f82:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
    ITM->TPR = 0x0;                       // Set privilege level to 0 (default)
 8000f86:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f8c3 2e40 	str.w	r2, [r3, #3648]	@ 0xe40
    ITM->TER = 0x01;                      // Enable stimulus 0 (SWO)
 8000f90:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f94:	2201      	movs	r2, #1
 8000f96:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <Error_Handler+0x8>

08000fb0 <deactivate_main_contactor>:

	return 0;
}

void deactivate_main_contactor(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	//	Deactivate main contactor
	HAL_GPIO_WritePin(MAIN_CONTACTOR_GPIO_Port, MAIN_CONTACTOR_Pin, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <deactivate_main_contactor+0x24>)
 8000fba:	f001 fef3 	bl	8002da4 <HAL_GPIO_WritePin>

	//  Turn OFF HV light
	HAL_GPIO_WritePin(LIGHT_GPIO_Port, LIGHT_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2108      	movs	r1, #8
 8000fc2:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <deactivate_main_contactor+0x28>)
 8000fc4:	f001 feee 	bl	8002da4 <HAL_GPIO_WritePin>
	blinking_HV_led = 0;
 8000fc8:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <deactivate_main_contactor+0x2c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	20000787 	.word	0x20000787

08000fe0 <deactivate_precharge_contactor>:


}

void deactivate_precharge_contactor(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	//	Deactivate main contactor
	HAL_GPIO_WritePin(PRECHARGE_PIN_GROUP, PRECHARGE_PIN, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	4809      	ldr	r0, [pc, #36]	@ (8001010 <deactivate_precharge_contactor+0x30>)
 8000fea:	f001 fedb 	bl	8002da4 <HAL_GPIO_WritePin>
	blinking_HV_led = 0;
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <deactivate_precharge_contactor+0x34>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]

	// If main contactor is ON, ensures that the HV light is ON
	if(HAL_GPIO_ReadPin(MAIN_CONTACTOR_GPIO_Port, MAIN_CONTACTOR_Pin) == GPIO_PIN_SET)
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4806      	ldr	r0, [pc, #24]	@ (8001010 <deactivate_precharge_contactor+0x30>)
 8000ff8:	f001 febc 	bl	8002d74 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d104      	bne.n	800100c <deactivate_precharge_contactor+0x2c>
		HAL_GPIO_WritePin(LIGHT_GPIO_Port, LIGHT_Pin, GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	2108      	movs	r1, #8
 8001006:	4804      	ldr	r0, [pc, #16]	@ (8001018 <deactivate_precharge_contactor+0x38>)
 8001008:	f001 fecc 	bl	8002da4 <HAL_GPIO_WritePin>

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40020800 	.word	0x40020800
 8001014:	20000787 	.word	0x20000787
 8001018:	40020000 	.word	0x40020000

0800101c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001024:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001028:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b00      	cmp	r3, #0
 8001032:	d013      	beq.n	800105c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001034:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001038:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800103c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001040:	2b00      	cmp	r3, #0
 8001042:	d00b      	beq.n	800105c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001044:	e000      	b.n	8001048 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001046:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001048:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f9      	beq.n	8001046 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001052:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800105c:	687b      	ldr	r3, [r7, #4]
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <__io_putchar>:
#include "stdio.h"
#include "stdint.h"
#include "stm32f4xx.h"

int __io_putchar(int ch)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 // Write character to ITM ch.0
 ITM_SendChar(ch);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ffd1 	bl	800101c <ITM_SendChar>
 return(ch);
 800107a:	687b      	ldr	r3, [r7, #4]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <HAL_MspInit+0x4c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001092:	4a0f      	ldr	r2, [pc, #60]	@ (80010d0 <HAL_MspInit+0x4c>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001098:	6453      	str	r3, [r2, #68]	@ 0x44
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <HAL_MspInit+0x4c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
 80010aa:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <HAL_MspInit+0x4c>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	4a08      	ldr	r2, [pc, #32]	@ (80010d0 <HAL_MspInit+0x4c>)
 80010b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b6:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_MspInit+0x4c>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800

080010d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	@ 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a17      	ldr	r2, [pc, #92]	@ (8001150 <HAL_ADC_MspInit+0x7c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d127      	bne.n	8001146 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <HAL_ADC_MspInit+0x80>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fe:	4a15      	ldr	r2, [pc, #84]	@ (8001154 <HAL_ADC_MspInit+0x80>)
 8001100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001104:	6453      	str	r3, [r2, #68]	@ 0x44
 8001106:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <HAL_ADC_MspInit+0x80>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <HAL_ADC_MspInit+0x80>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a0e      	ldr	r2, [pc, #56]	@ (8001154 <HAL_ADC_MspInit+0x80>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <HAL_ADC_MspInit+0x80>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LV_BATTERY_VOLTAGE_Pin;
 800112e:	2302      	movs	r3, #2
 8001130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001132:	2303      	movs	r3, #3
 8001134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LV_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	@ (8001158 <HAL_ADC_MspInit+0x84>)
 8001142:	f001 fc9b 	bl	8002a7c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001146:	bf00      	nop
 8001148:	3728      	adds	r7, #40	@ 0x28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40012000 	.word	0x40012000
 8001154:	40023800 	.word	0x40023800
 8001158:	40020400 	.word	0x40020400

0800115c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	@ 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a28      	ldr	r2, [pc, #160]	@ (800121c <HAL_CAN_MspInit+0xc0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d14a      	bne.n	8001214 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b27      	ldr	r3, [pc, #156]	@ (8001220 <HAL_CAN_MspInit+0xc4>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001186:	4a26      	ldr	r2, [pc, #152]	@ (8001220 <HAL_CAN_MspInit+0xc4>)
 8001188:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800118c:	6413      	str	r3, [r2, #64]	@ 0x40
 800118e:	4b24      	ldr	r3, [pc, #144]	@ (8001220 <HAL_CAN_MspInit+0xc4>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN2_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b20      	ldr	r3, [pc, #128]	@ (8001220 <HAL_CAN_MspInit+0xc4>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001220 <HAL_CAN_MspInit+0xc4>)
 80011a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <HAL_CAN_MspInit+0xc4>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <HAL_CAN_MspInit+0xc4>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a18      	ldr	r2, [pc, #96]	@ (8001220 <HAL_CAN_MspInit+0xc4>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <HAL_CAN_MspInit+0xc4>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80011d2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80011d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011dc:	2302      	movs	r3, #2
 80011de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80011e4:	2309      	movs	r3, #9
 80011e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	480d      	ldr	r0, [pc, #52]	@ (8001224 <HAL_CAN_MspInit+0xc8>)
 80011f0:	f001 fc44 	bl	8002a7c <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	203f      	movs	r0, #63	@ 0x3f
 80011fa:	f001 fc08 	bl	8002a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80011fe:	203f      	movs	r0, #63	@ 0x3f
 8001200:	f001 fc21 	bl	8002a46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	2040      	movs	r0, #64	@ 0x40
 800120a:	f001 fc00 	bl	8002a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800120e:	2040      	movs	r0, #64	@ 0x40
 8001210:	f001 fc19 	bl	8002a46 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN2_MspInit 1 */

  }

}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	@ 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40006800 	.word	0x40006800
 8001220:	40023800 	.word	0x40023800
 8001224:	40020400 	.word	0x40020400

08001228 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08c      	sub	sp, #48	@ 0x30
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a42      	ldr	r2, [pc, #264]	@ (8001350 <HAL_I2C_MspInit+0x128>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d12c      	bne.n	80012a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	4b41      	ldr	r3, [pc, #260]	@ (8001354 <HAL_I2C_MspInit+0x12c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a40      	ldr	r2, [pc, #256]	@ (8001354 <HAL_I2C_MspInit+0x12c>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b3e      	ldr	r3, [pc, #248]	@ (8001354 <HAL_I2C_MspInit+0x12c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_I2C_SCL_Pin|EEPROM_I2C_SDA_Pin;
 8001266:	23c0      	movs	r3, #192	@ 0xc0
 8001268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126a:	2312      	movs	r3, #18
 800126c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001276:	2304      	movs	r3, #4
 8001278:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	f107 031c 	add.w	r3, r7, #28
 800127e:	4619      	mov	r1, r3
 8001280:	4835      	ldr	r0, [pc, #212]	@ (8001358 <HAL_I2C_MspInit+0x130>)
 8001282:	f001 fbfb 	bl	8002a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	4b32      	ldr	r3, [pc, #200]	@ (8001354 <HAL_I2C_MspInit+0x12c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	4a31      	ldr	r2, [pc, #196]	@ (8001354 <HAL_I2C_MspInit+0x12c>)
 8001290:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001294:	6413      	str	r3, [r2, #64]	@ 0x40
 8001296:	4b2f      	ldr	r3, [pc, #188]	@ (8001354 <HAL_I2C_MspInit+0x12c>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80012a2:	e050      	b.n	8001346 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a2c      	ldr	r2, [pc, #176]	@ (800135c <HAL_I2C_MspInit+0x134>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d14b      	bne.n	8001346 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b28      	ldr	r3, [pc, #160]	@ (8001354 <HAL_I2C_MspInit+0x12c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a27      	ldr	r2, [pc, #156]	@ (8001354 <HAL_I2C_MspInit+0x12c>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b25      	ldr	r3, [pc, #148]	@ (8001354 <HAL_I2C_MspInit+0x12c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b21      	ldr	r3, [pc, #132]	@ (8001354 <HAL_I2C_MspInit+0x12c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a20      	ldr	r2, [pc, #128]	@ (8001354 <HAL_I2C_MspInit+0x12c>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b1e      	ldr	r3, [pc, #120]	@ (8001354 <HAL_I2C_MspInit+0x12c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ec:	2312      	movs	r3, #18
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012f8:	2304      	movs	r3, #4
 80012fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4619      	mov	r1, r3
 8001302:	4817      	ldr	r0, [pc, #92]	@ (8001360 <HAL_I2C_MspInit+0x138>)
 8001304:	f001 fbba 	bl	8002a7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001308:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800130e:	2312      	movs	r3, #18
 8001310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 800131a:	2309      	movs	r3, #9
 800131c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	480c      	ldr	r0, [pc, #48]	@ (8001358 <HAL_I2C_MspInit+0x130>)
 8001326:	f001 fba9 	bl	8002a7c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <HAL_I2C_MspInit+0x12c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	4a08      	ldr	r2, [pc, #32]	@ (8001354 <HAL_I2C_MspInit+0x12c>)
 8001334:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001338:	6413      	str	r3, [r2, #64]	@ 0x40
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_I2C_MspInit+0x12c>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
}
 8001346:	bf00      	nop
 8001348:	3730      	adds	r7, #48	@ 0x30
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40005400 	.word	0x40005400
 8001354:	40023800 	.word	0x40023800
 8001358:	40020400 	.word	0x40020400
 800135c:	40005c00 	.word	0x40005c00
 8001360:	40020000 	.word	0x40020000

08001364 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b09a      	sub	sp, #104	@ 0x68
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800137c:	f107 0318 	add.w	r3, r7, #24
 8001380:	223c      	movs	r2, #60	@ 0x3c
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f005 fb43 	bl	8006a10 <memset>
  if(hsd->Instance==SDIO)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a30      	ldr	r2, [pc, #192]	@ (8001450 <HAL_SD_MspInit+0xec>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d159      	bne.n	8001448 <HAL_SD_MspInit+0xe4>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO;
 8001394:	2340      	movs	r3, #64	@ 0x40
 8001396:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 8001398:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800139c:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139e:	f107 0318 	add.w	r3, r7, #24
 80013a2:	4618      	mov	r0, r3
 80013a4:	f002 fbb0 	bl	8003b08 <HAL_RCCEx_PeriphCLKConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 80013ae:	f7ff fdf9 	bl	8000fa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	4b27      	ldr	r3, [pc, #156]	@ (8001454 <HAL_SD_MspInit+0xf0>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ba:	4a26      	ldr	r2, [pc, #152]	@ (8001454 <HAL_SD_MspInit+0xf0>)
 80013bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013c2:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <HAL_SD_MspInit+0xf0>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b20      	ldr	r3, [pc, #128]	@ (8001454 <HAL_SD_MspInit+0xf0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001454 <HAL_SD_MspInit+0xf0>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b1d      	ldr	r3, [pc, #116]	@ (8001454 <HAL_SD_MspInit+0xf0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <HAL_SD_MspInit+0xf0>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a18      	ldr	r2, [pc, #96]	@ (8001454 <HAL_SD_MspInit+0xf0>)
 80013f4:	f043 0308 	orr.w	r3, r3, #8
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <HAL_SD_MspInit+0xf0>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001406:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800140a:	657b      	str	r3, [r7, #84]	@ 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001418:	230c      	movs	r3, #12
 800141a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001420:	4619      	mov	r1, r3
 8001422:	480d      	ldr	r0, [pc, #52]	@ (8001458 <HAL_SD_MspInit+0xf4>)
 8001424:	f001 fb2a 	bl	8002a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001428:	2304      	movs	r3, #4
 800142a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001434:	2303      	movs	r3, #3
 8001436:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001438:	230c      	movs	r3, #12
 800143a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001440:	4619      	mov	r1, r3
 8001442:	4806      	ldr	r0, [pc, #24]	@ (800145c <HAL_SD_MspInit+0xf8>)
 8001444:	f001 fb1a 	bl	8002a7c <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8001448:	bf00      	nop
 800144a:	3768      	adds	r7, #104	@ 0x68
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40012c00 	.word	0x40012c00
 8001454:	40023800 	.word	0x40023800
 8001458:	40020800 	.word	0x40020800
 800145c:	40020c00 	.word	0x40020c00

08001460 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a19      	ldr	r2, [pc, #100]	@ (80014e4 <HAL_SPI_MspInit+0x84>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d12b      	bne.n	80014da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <HAL_SPI_MspInit+0x88>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	4a17      	ldr	r2, [pc, #92]	@ (80014e8 <HAL_SPI_MspInit+0x88>)
 800148c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001490:	6413      	str	r3, [r2, #64]	@ 0x40
 8001492:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <HAL_SPI_MspInit+0x88>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <HAL_SPI_MspInit+0x88>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a10      	ldr	r2, [pc, #64]	@ (80014e8 <HAL_SPI_MspInit+0x88>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <HAL_SPI_MspInit+0x88>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80014ba:	2338      	movs	r3, #56	@ 0x38
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014ca:	2306      	movs	r3, #6
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	@ (80014ec <HAL_SPI_MspInit+0x8c>)
 80014d6:	f001 fad1 	bl	8002a7c <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	@ 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40003c00 	.word	0x40003c00
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020400 	.word	0x40020400

080014f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001500:	d116      	bne.n	8001530 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b1a      	ldr	r3, [pc, #104]	@ (8001570 <HAL_TIM_Base_MspInit+0x80>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	4a19      	ldr	r2, [pc, #100]	@ (8001570 <HAL_TIM_Base_MspInit+0x80>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6413      	str	r3, [r2, #64]	@ 0x40
 8001512:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <HAL_TIM_Base_MspInit+0x80>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	201c      	movs	r0, #28
 8001524:	f001 fa73 	bl	8002a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001528:	201c      	movs	r0, #28
 800152a:	f001 fa8c 	bl	8002a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800152e:	e01a      	b.n	8001566 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0f      	ldr	r2, [pc, #60]	@ (8001574 <HAL_TIM_Base_MspInit+0x84>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d115      	bne.n	8001566 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <HAL_TIM_Base_MspInit+0x80>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	4a0b      	ldr	r2, [pc, #44]	@ (8001570 <HAL_TIM_Base_MspInit+0x80>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6413      	str	r3, [r2, #64]	@ 0x40
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <HAL_TIM_Base_MspInit+0x80>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	201d      	movs	r0, #29
 800155c:	f001 fa57 	bl	8002a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001560:	201d      	movs	r0, #29
 8001562:	f001 fa70 	bl	8002a46 <HAL_NVIC_EnableIRQ>
}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40000400 	.word	0x40000400

08001578 <HAL_IRDA_MspInit>:
* This function configures the hardware resources used in this example
* @param hirda: IRDA handle pointer
* @retval None
*/
void HAL_IRDA_MspInit(IRDA_HandleTypeDef* hirda)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	@ 0x30
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(hirda->Instance==USART1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a32      	ldr	r2, [pc, #200]	@ (8001660 <HAL_IRDA_MspInit+0xe8>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d12d      	bne.n	80015f6 <HAL_IRDA_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	4b31      	ldr	r3, [pc, #196]	@ (8001664 <HAL_IRDA_MspInit+0xec>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	4a30      	ldr	r2, [pc, #192]	@ (8001664 <HAL_IRDA_MspInit+0xec>)
 80015a4:	f043 0310 	orr.w	r3, r3, #16
 80015a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001664 <HAL_IRDA_MspInit+0xec>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	61bb      	str	r3, [r7, #24]
 80015b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001664 <HAL_IRDA_MspInit+0xec>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a29      	ldr	r2, [pc, #164]	@ (8001664 <HAL_IRDA_MspInit+0xec>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b27      	ldr	r3, [pc, #156]	@ (8001664 <HAL_IRDA_MspInit+0xec>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = UART_MCU_TO_DEBUG_RX_Pin|UART_MCU_TO_DEBUG_TX_Pin;
 80015d2:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 80015d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015e4:	2307      	movs	r3, #7
 80015e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	481e      	ldr	r0, [pc, #120]	@ (8001668 <HAL_IRDA_MspInit+0xf0>)
 80015f0:	f001 fa44 	bl	8002a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80015f4:	e030      	b.n	8001658 <HAL_IRDA_MspInit+0xe0>
  else if(hirda->Instance==USART6)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a1c      	ldr	r2, [pc, #112]	@ (800166c <HAL_IRDA_MspInit+0xf4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d12b      	bne.n	8001658 <HAL_IRDA_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <HAL_IRDA_MspInit+0xec>)
 8001606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001608:	4a16      	ldr	r2, [pc, #88]	@ (8001664 <HAL_IRDA_MspInit+0xec>)
 800160a:	f043 0320 	orr.w	r3, r3, #32
 800160e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001610:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <HAL_IRDA_MspInit+0xec>)
 8001612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001614:	f003 0320 	and.w	r3, r3, #32
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <HAL_IRDA_MspInit+0xec>)
 8001622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001624:	4a0f      	ldr	r2, [pc, #60]	@ (8001664 <HAL_IRDA_MspInit+0xec>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6313      	str	r3, [r2, #48]	@ 0x30
 800162c:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <HAL_IRDA_MspInit+0xec>)
 800162e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001638:	23c0      	movs	r3, #192	@ 0xc0
 800163a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001648:	2308      	movs	r3, #8
 800164a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	4807      	ldr	r0, [pc, #28]	@ (8001670 <HAL_IRDA_MspInit+0xf8>)
 8001654:	f001 fa12 	bl	8002a7c <HAL_GPIO_Init>
}
 8001658:	bf00      	nop
 800165a:	3730      	adds	r7, #48	@ 0x30
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40011000 	.word	0x40011000
 8001664:	40023800 	.word	0x40023800
 8001668:	40020000 	.word	0x40020000
 800166c:	40011400 	.word	0x40011400
 8001670:	40020800 	.word	0x40020800

08001674 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b098      	sub	sp, #96	@ 0x60
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	223c      	movs	r2, #60	@ 0x3c
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f005 f9bb 	bl	8006a10 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016a2:	d140      	bne.n	8001726 <HAL_HCD_MspInit+0xb2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80016a4:	2320      	movs	r3, #32
 80016a6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80016a8:	2300      	movs	r3, #0
 80016aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 fa29 	bl	8003b08 <HAL_RCCEx_PeriphCLKConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_HCD_MspInit+0x4c>
    {
      Error_Handler();
 80016bc:	f7ff fc72 	bl	8000fa4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <HAL_HCD_MspInit+0xbc>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c8:	4a19      	ldr	r2, [pc, #100]	@ (8001730 <HAL_HCD_MspInit+0xbc>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d0:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <HAL_HCD_MspInit+0xbc>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016dc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80016e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016ee:	230a      	movs	r3, #10
 80016f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016f6:	4619      	mov	r1, r3
 80016f8:	480e      	ldr	r0, [pc, #56]	@ (8001734 <HAL_HCD_MspInit+0xc0>)
 80016fa:	f001 f9bf 	bl	8002a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <HAL_HCD_MspInit+0xbc>)
 8001700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001702:	4a0b      	ldr	r2, [pc, #44]	@ (8001730 <HAL_HCD_MspInit+0xbc>)
 8001704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001708:	6353      	str	r3, [r2, #52]	@ 0x34
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <HAL_HCD_MspInit+0xbc>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001712:	4a07      	ldr	r2, [pc, #28]	@ (8001730 <HAL_HCD_MspInit+0xbc>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001718:	6453      	str	r3, [r2, #68]	@ 0x44
 800171a:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <HAL_HCD_MspInit+0xbc>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001726:	bf00      	nop
 8001728:	3760      	adds	r7, #96	@ 0x60
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	40020000 	.word	0x40020000

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <NMI_Handler+0x4>

08001740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <HardFault_Handler+0x4>

08001748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <MemManage_Handler+0x4>

08001750 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <UsageFault_Handler+0x4>

08001760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178e:	f000 f971 	bl	8001a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}

08001796 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CHARGER_DETECT_Pin);
 800179a:	2008      	movs	r0, #8
 800179c:	f001 fb36 	bl	8002e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMERGENCY_STOP_Pin);
 80017a8:	2010      	movs	r0, #16
 80017aa:	f001 fb2f 	bl	8002e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IGNITION_Pin);
 80017b6:	2020      	movs	r0, #32
 80017b8:	f001 fb28 	bl	8002e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <TIM2_IRQHandler+0x10>)
 80017c6:	f003 fd1c 	bl	8005202 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000029c 	.word	0x2000029c

080017d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <TIM3_IRQHandler+0x10>)
 80017da:	f003 fd12 	bl	8005202 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200002e4 	.word	0x200002e4

080017e8 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <CAN2_TX_IRQHandler+0x10>)
 80017ee:	f000 fe04 	bl	80023fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200000f0 	.word	0x200000f0

080017fc <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <CAN2_RX0_IRQHandler+0x10>)
 8001802:	f000 fdfa 	bl	80023fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200000f0 	.word	0x200000f0

08001810 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	e00a      	b.n	8001838 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001822:	f3af 8000 	nop.w
 8001826:	4601      	mov	r1, r0
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	60ba      	str	r2, [r7, #8]
 800182e:	b2ca      	uxtb	r2, r1
 8001830:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbf0      	blt.n	8001822 <_read+0x12>
  }

  return len;
 8001840:	687b      	ldr	r3, [r7, #4]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	e009      	b.n	8001870 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	60ba      	str	r2, [r7, #8]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fc00 	bl	800106a <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	dbf1      	blt.n	800185c <_write+0x12>
  }
  return len;
 8001878:	687b      	ldr	r3, [r7, #4]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <_close>:

int _close(int file)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018aa:	605a      	str	r2, [r3, #4]
  return 0;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <_isatty>:

int _isatty(int file)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f4:	4a14      	ldr	r2, [pc, #80]	@ (8001948 <_sbrk+0x5c>)
 80018f6:	4b15      	ldr	r3, [pc, #84]	@ (800194c <_sbrk+0x60>)
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001900:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <_sbrk+0x64>)
 800190a:	4a12      	ldr	r2, [pc, #72]	@ (8001954 <_sbrk+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190e:	4b10      	ldr	r3, [pc, #64]	@ (8001950 <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d207      	bcs.n	800192c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800191c:	f005 f8c6 	bl	8006aac <__errno>
 8001920:	4603      	mov	r3, r0
 8001922:	220c      	movs	r2, #12
 8001924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800192a:	e009      	b.n	8001940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800192c:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001932:	4b07      	ldr	r3, [pc, #28]	@ (8001950 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	4a05      	ldr	r2, [pc, #20]	@ (8001950 <_sbrk+0x64>)
 800193c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20040000 	.word	0x20040000
 800194c:	00000400 	.word	0x00000400
 8001950:	20000788 	.word	0x20000788
 8001954:	200008e0 	.word	0x200008e0

08001958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800195c:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <SystemInit+0x20>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001962:	4a05      	ldr	r2, [pc, #20]	@ (8001978 <SystemInit+0x20>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800197c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001980:	f7ff ffea 	bl	8001958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001984:	480c      	ldr	r0, [pc, #48]	@ (80019b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001986:	490d      	ldr	r1, [pc, #52]	@ (80019bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001988:	4a0d      	ldr	r2, [pc, #52]	@ (80019c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800199c:	4c0a      	ldr	r4, [pc, #40]	@ (80019c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019aa:	f005 f885 	bl	8006ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ae:	f7fe fef9 	bl	80007a4 <main>
  bx  lr    
 80019b2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019b4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019bc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80019c0:	08007614 	.word	0x08007614
  ldr r2, =_sbss
 80019c4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80019c8:	200008dc 	.word	0x200008dc

080019cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC_IRQHandler>
	...

080019d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a10 <HAL_Init+0x40>)
 80019da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <HAL_Init+0x40>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001a10 <HAL_Init+0x40>)
 80019e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a07      	ldr	r2, [pc, #28]	@ (8001a10 <HAL_Init+0x40>)
 80019f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f8:	2003      	movs	r0, #3
 80019fa:	f000 fffd 	bl	80029f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fe:	200f      	movs	r0, #15
 8001a00:	f000 f808 	bl	8001a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a04:	f7ff fb3e 	bl	8001084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023c00 	.word	0x40023c00

08001a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a1c:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <HAL_InitTick+0x54>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <HAL_InitTick+0x58>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f001 f815 	bl	8002a62 <HAL_SYSTICK_Config>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00e      	b.n	8001a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b0f      	cmp	r3, #15
 8001a46:	d80a      	bhi.n	8001a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a50:	f000 ffdd 	bl	8002a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a54:	4a06      	ldr	r2, [pc, #24]	@ (8001a70 <HAL_InitTick+0x5c>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e000      	b.n	8001a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	20000004 	.word	0x20000004

08001a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_IncTick+0x20>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_IncTick+0x24>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a04      	ldr	r2, [pc, #16]	@ (8001a98 <HAL_IncTick+0x24>)
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000008 	.word	0x20000008
 8001a98:	2000078c 	.word	0x2000078c

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	@ (8001ab0 <HAL_GetTick+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	2000078c 	.word	0x2000078c

08001ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff ffee 	bl	8001a9c <HAL_GetTick>
 8001ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001acc:	d005      	beq.n	8001ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ace:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <HAL_Delay+0x44>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ada:	bf00      	nop
 8001adc:	f7ff ffde 	bl	8001a9c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d8f7      	bhi.n	8001adc <HAL_Delay+0x28>
  {
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000008 	.word	0x20000008

08001afc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e033      	b.n	8001b7a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff fada 	bl	80010d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d118      	bne.n	8001b6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b42:	f023 0302 	bic.w	r3, r3, #2
 8001b46:	f043 0202 	orr.w	r2, r3, #2
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f93a 	bl	8001dc8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	f023 0303 	bic.w	r3, r3, #3
 8001b62:	f043 0201 	orr.w	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b6a:	e001      	b.n	8001b70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x1c>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	e105      	b.n	8001dac <HAL_ADC_ConfigChannel+0x228>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b09      	cmp	r3, #9
 8001bae:	d925      	bls.n	8001bfc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68d9      	ldr	r1, [r3, #12]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3b1e      	subs	r3, #30
 8001bc6:	2207      	movs	r2, #7
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43da      	mvns	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	400a      	ands	r2, r1
 8001bd4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68d9      	ldr	r1, [r3, #12]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	4603      	mov	r3, r0
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4403      	add	r3, r0
 8001bee:	3b1e      	subs	r3, #30
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	e022      	b.n	8001c42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6919      	ldr	r1, [r3, #16]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	2207      	movs	r2, #7
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43da      	mvns	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6919      	ldr	r1, [r3, #16]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	4618      	mov	r0, r3
 8001c32:	4603      	mov	r3, r0
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4403      	add	r3, r0
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d824      	bhi.n	8001c94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	3b05      	subs	r3, #5
 8001c5c:	221f      	movs	r2, #31
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	400a      	ands	r2, r1
 8001c6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	3b05      	subs	r3, #5
 8001c86:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c92:	e04c      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b0c      	cmp	r3, #12
 8001c9a:	d824      	bhi.n	8001ce6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	3b23      	subs	r3, #35	@ 0x23
 8001cae:	221f      	movs	r2, #31
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43da      	mvns	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	400a      	ands	r2, r1
 8001cbc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3b23      	subs	r3, #35	@ 0x23
 8001cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ce4:	e023      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3b41      	subs	r3, #65	@ 0x41
 8001cf8:	221f      	movs	r2, #31
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	400a      	ands	r2, r1
 8001d06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	4618      	mov	r0, r3
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	3b41      	subs	r3, #65	@ 0x41
 8001d22:	fa00 f203 	lsl.w	r2, r0, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d2e:	4b22      	ldr	r3, [pc, #136]	@ (8001db8 <HAL_ADC_ConfigChannel+0x234>)
 8001d30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a21      	ldr	r2, [pc, #132]	@ (8001dbc <HAL_ADC_ConfigChannel+0x238>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d109      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x1cc>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b12      	cmp	r3, #18
 8001d42:	d105      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a19      	ldr	r2, [pc, #100]	@ (8001dbc <HAL_ADC_ConfigChannel+0x238>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d123      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x21e>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b10      	cmp	r3, #16
 8001d60:	d003      	beq.n	8001d6a <HAL_ADC_ConfigChannel+0x1e6>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b11      	cmp	r3, #17
 8001d68:	d11b      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d111      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d7e:	4b10      	ldr	r3, [pc, #64]	@ (8001dc0 <HAL_ADC_ConfigChannel+0x23c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a10      	ldr	r2, [pc, #64]	@ (8001dc4 <HAL_ADC_ConfigChannel+0x240>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	0c9a      	lsrs	r2, r3, #18
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d94:	e002      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f9      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	40012300 	.word	0x40012300
 8001dbc:	40012000 	.word	0x40012000
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	431bde83 	.word	0x431bde83

08001dc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dd0:	4b79      	ldr	r3, [pc, #484]	@ (8001fb8 <ADC_Init+0x1f0>)
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	021a      	lsls	r2, r3, #8
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6859      	ldr	r1, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6899      	ldr	r1, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5a:	4a58      	ldr	r2, [pc, #352]	@ (8001fbc <ADC_Init+0x1f4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d022      	beq.n	8001ea6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6899      	ldr	r1, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6899      	ldr	r1, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	e00f      	b.n	8001ec6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001eb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ec4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0202 	bic.w	r2, r2, #2
 8001ed4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6899      	ldr	r1, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	7e1b      	ldrb	r3, [r3, #24]
 8001ee0:	005a      	lsls	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d01b      	beq.n	8001f2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f02:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6859      	ldr	r1, [r3, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	035a      	lsls	r2, r3, #13
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	e007      	b.n	8001f3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f3a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	051a      	lsls	r2, r3, #20
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6899      	ldr	r1, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f7e:	025a      	lsls	r2, r3, #9
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6899      	ldr	r1, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	029a      	lsls	r2, r3, #10
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	609a      	str	r2, [r3, #8]
}
 8001fac:	bf00      	nop
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	40012300 	.word	0x40012300
 8001fbc:	0f000001 	.word	0x0f000001

08001fc0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0ed      	b.n	80021ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d102      	bne.n	8001fe4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff f8bc 	bl	800115c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0201 	orr.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ff4:	f7ff fd52 	bl	8001a9c <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ffa:	e012      	b.n	8002022 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ffc:	f7ff fd4e 	bl	8001a9c <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b0a      	cmp	r3, #10
 8002008:	d90b      	bls.n	8002022 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2205      	movs	r2, #5
 800201a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e0c5      	b.n	80021ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0e5      	beq.n	8001ffc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0202 	bic.w	r2, r2, #2
 800203e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002040:	f7ff fd2c 	bl	8001a9c <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002046:	e012      	b.n	800206e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002048:	f7ff fd28 	bl	8001a9c <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b0a      	cmp	r3, #10
 8002054:	d90b      	bls.n	800206e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2205      	movs	r2, #5
 8002066:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e09f      	b.n	80021ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1e5      	bne.n	8002048 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	7e1b      	ldrb	r3, [r3, #24]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d108      	bne.n	8002096 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	e007      	b.n	80020a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	7e5b      	ldrb	r3, [r3, #25]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d108      	bne.n	80020c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	e007      	b.n	80020d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	7e9b      	ldrb	r3, [r3, #26]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d108      	bne.n	80020ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0220 	orr.w	r2, r2, #32
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	e007      	b.n	80020fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0220 	bic.w	r2, r2, #32
 80020f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	7edb      	ldrb	r3, [r3, #27]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d108      	bne.n	8002114 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0210 	bic.w	r2, r2, #16
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e007      	b.n	8002124 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0210 	orr.w	r2, r2, #16
 8002122:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7f1b      	ldrb	r3, [r3, #28]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d108      	bne.n	800213e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0208 	orr.w	r2, r2, #8
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e007      	b.n	800214e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0208 	bic.w	r2, r2, #8
 800214c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	7f5b      	ldrb	r3, [r3, #29]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d108      	bne.n	8002168 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0204 	orr.w	r2, r2, #4
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	e007      	b.n	8002178 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0204 	bic.w	r2, r2, #4
 8002176:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	ea42 0103 	orr.w	r1, r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	1e5a      	subs	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80021b6:	b480      	push	{r7}
 80021b8:	b087      	sub	sp, #28
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d003      	beq.n	80021da <HAL_CAN_GetRxMessage+0x24>
 80021d2:	7dfb      	ldrb	r3, [r7, #23]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	f040 8103 	bne.w	80023e0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10e      	bne.n	80021fe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d116      	bne.n	800221c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0f7      	b.n	80023ee <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d107      	bne.n	800221c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002210:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0e8      	b.n	80023ee <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	331b      	adds	r3, #27
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	4413      	add	r3, r2
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0204 	and.w	r2, r3, #4
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	331b      	adds	r3, #27
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	4413      	add	r3, r2
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0d5b      	lsrs	r3, r3, #21
 800224a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	e00b      	b.n	800226c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	331b      	adds	r3, #27
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	4413      	add	r3, r2
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	08db      	lsrs	r3, r3, #3
 8002264:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	331b      	adds	r3, #27
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	4413      	add	r3, r2
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0202 	and.w	r2, r3, #2
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	331b      	adds	r3, #27
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	4413      	add	r3, r2
 800228e:	3304      	adds	r3, #4
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2208      	movs	r2, #8
 800229e:	611a      	str	r2, [r3, #16]
 80022a0:	e00b      	b.n	80022ba <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	331b      	adds	r3, #27
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	4413      	add	r3, r2
 80022ae:	3304      	adds	r3, #4
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 020f 	and.w	r2, r3, #15
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	331b      	adds	r3, #27
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	4413      	add	r3, r2
 80022c6:	3304      	adds	r3, #4
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	331b      	adds	r3, #27
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	4413      	add	r3, r2
 80022de:	3304      	adds	r3, #4
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	0c1b      	lsrs	r3, r3, #16
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	4413      	add	r3, r2
 800230a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	0a1a      	lsrs	r2, r3, #8
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	3301      	adds	r3, #1
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	4413      	add	r3, r2
 8002324:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	0c1a      	lsrs	r2, r3, #16
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	3302      	adds	r3, #2
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	4413      	add	r3, r2
 800233e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	0e1a      	lsrs	r2, r3, #24
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	3303      	adds	r3, #3
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	4413      	add	r3, r2
 8002358:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	3304      	adds	r3, #4
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	4413      	add	r3, r2
 8002370:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	0a1a      	lsrs	r2, r3, #8
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	3305      	adds	r3, #5
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	4413      	add	r3, r2
 800238a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	0c1a      	lsrs	r2, r3, #16
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	3306      	adds	r3, #6
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	0e1a      	lsrs	r2, r3, #24
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	3307      	adds	r3, #7
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d108      	bne.n	80023cc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0220 	orr.w	r2, r2, #32
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	e007      	b.n	80023dc <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0220 	orr.w	r2, r2, #32
 80023da:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	e006      	b.n	80023ee <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
  }
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	371c      	adds	r7, #28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b08a      	sub	sp, #40	@ 0x28
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d07c      	beq.n	800253a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d023      	beq.n	8002492 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2201      	movs	r2, #1
 8002450:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f983 	bl	8002768 <HAL_CAN_TxMailbox0CompleteCallback>
 8002462:	e016      	b.n	8002492 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b00      	cmp	r3, #0
 800246c:	d004      	beq.n	8002478 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002474:	627b      	str	r3, [r7, #36]	@ 0x24
 8002476:	e00c      	b.n	8002492 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d004      	beq.n	800248c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002484:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002488:	627b      	str	r3, [r7, #36]	@ 0x24
 800248a:	e002      	b.n	8002492 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f989 	bl	80027a4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d024      	beq.n	80024e6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f963 	bl	800277c <HAL_CAN_TxMailbox1CompleteCallback>
 80024b6:	e016      	b.n	80024e6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d004      	beq.n	80024cc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ca:	e00c      	b.n	80024e6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d004      	beq.n	80024e0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80024d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80024de:	e002      	b.n	80024e6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f969 	bl	80027b8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d024      	beq.n	800253a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80024f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f943 	bl	8002790 <HAL_CAN_TxMailbox2CompleteCallback>
 800250a:	e016      	b.n	800253a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d004      	beq.n	8002520 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800251c:	627b      	str	r3, [r7, #36]	@ 0x24
 800251e:	e00c      	b.n	800253a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d004      	beq.n	8002534 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
 8002532:	e002      	b.n	800253a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f949 	bl	80027cc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00c      	beq.n	800255e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b00      	cmp	r3, #0
 800254c:	d007      	beq.n	800255e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002554:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2210      	movs	r2, #16
 800255c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00b      	beq.n	8002580 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d006      	beq.n	8002580 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2208      	movs	r2, #8
 8002578:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f930 	bl	80027e0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d009      	beq.n	800259e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7fe f801 	bl	80005a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00c      	beq.n	80025c2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2210      	movs	r2, #16
 80025c0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00b      	beq.n	80025e4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d006      	beq.n	80025e4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2208      	movs	r2, #8
 80025dc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f912 	bl	8002808 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f8f9 	bl	80027f4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00b      	beq.n	8002624 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	2b00      	cmp	r3, #0
 8002614:	d006      	beq.n	8002624 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2210      	movs	r2, #16
 800261c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f8fc 	bl	800281c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	d006      	beq.n	8002646 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2208      	movs	r2, #8
 800263e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f8f5 	bl	8002830 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d07b      	beq.n	8002748 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d072      	beq.n	8002740 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	f043 0302 	orr.w	r3, r3, #2
 8002690:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	f043 0304 	orr.w	r3, r3, #4
 80026ac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d043      	beq.n	8002740 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d03e      	beq.n	8002740 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026c8:	2b60      	cmp	r3, #96	@ 0x60
 80026ca:	d02b      	beq.n	8002724 <HAL_CAN_IRQHandler+0x32a>
 80026cc:	2b60      	cmp	r3, #96	@ 0x60
 80026ce:	d82e      	bhi.n	800272e <HAL_CAN_IRQHandler+0x334>
 80026d0:	2b50      	cmp	r3, #80	@ 0x50
 80026d2:	d022      	beq.n	800271a <HAL_CAN_IRQHandler+0x320>
 80026d4:	2b50      	cmp	r3, #80	@ 0x50
 80026d6:	d82a      	bhi.n	800272e <HAL_CAN_IRQHandler+0x334>
 80026d8:	2b40      	cmp	r3, #64	@ 0x40
 80026da:	d019      	beq.n	8002710 <HAL_CAN_IRQHandler+0x316>
 80026dc:	2b40      	cmp	r3, #64	@ 0x40
 80026de:	d826      	bhi.n	800272e <HAL_CAN_IRQHandler+0x334>
 80026e0:	2b30      	cmp	r3, #48	@ 0x30
 80026e2:	d010      	beq.n	8002706 <HAL_CAN_IRQHandler+0x30c>
 80026e4:	2b30      	cmp	r3, #48	@ 0x30
 80026e6:	d822      	bhi.n	800272e <HAL_CAN_IRQHandler+0x334>
 80026e8:	2b10      	cmp	r3, #16
 80026ea:	d002      	beq.n	80026f2 <HAL_CAN_IRQHandler+0x2f8>
 80026ec:	2b20      	cmp	r3, #32
 80026ee:	d005      	beq.n	80026fc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80026f0:	e01d      	b.n	800272e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80026f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f4:	f043 0308 	orr.w	r3, r3, #8
 80026f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026fa:	e019      	b.n	8002730 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fe:	f043 0310 	orr.w	r3, r3, #16
 8002702:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002704:	e014      	b.n	8002730 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002708:	f043 0320 	orr.w	r3, r3, #32
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800270e:	e00f      	b.n	8002730 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002716:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002718:	e00a      	b.n	8002730 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002720:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002722:	e005      	b.n	8002730 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002726:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800272c:	e000      	b.n	8002730 <HAL_CAN_IRQHandler+0x336>
            break;
 800272e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800273e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2204      	movs	r2, #4
 8002746:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	2b00      	cmp	r3, #0
 800274c:	d008      	beq.n	8002760 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f872 	bl	8002844 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002760:	bf00      	nop
 8002762:	3728      	adds	r7, #40	@ 0x28
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <__NVIC_SetPriorityGrouping>:
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002868:	4b0c      	ldr	r3, [pc, #48]	@ (800289c <__NVIC_SetPriorityGrouping+0x44>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002874:	4013      	ands	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002880:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800288a:	4a04      	ldr	r2, [pc, #16]	@ (800289c <__NVIC_SetPriorityGrouping+0x44>)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	60d3      	str	r3, [r2, #12]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <__NVIC_GetPriorityGrouping>:
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a4:	4b04      	ldr	r3, [pc, #16]	@ (80028b8 <__NVIC_GetPriorityGrouping+0x18>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	f003 0307 	and.w	r3, r3, #7
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <__NVIC_EnableIRQ>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	db0b      	blt.n	80028e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	f003 021f 	and.w	r2, r3, #31
 80028d4:	4907      	ldr	r1, [pc, #28]	@ (80028f4 <__NVIC_EnableIRQ+0x38>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	2001      	movs	r0, #1
 80028de:	fa00 f202 	lsl.w	r2, r0, r2
 80028e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000e100 	.word	0xe000e100

080028f8 <__NVIC_SetPriority>:
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	6039      	str	r1, [r7, #0]
 8002902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002908:	2b00      	cmp	r3, #0
 800290a:	db0a      	blt.n	8002922 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	b2da      	uxtb	r2, r3
 8002910:	490c      	ldr	r1, [pc, #48]	@ (8002944 <__NVIC_SetPriority+0x4c>)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	0112      	lsls	r2, r2, #4
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	440b      	add	r3, r1
 800291c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002920:	e00a      	b.n	8002938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4908      	ldr	r1, [pc, #32]	@ (8002948 <__NVIC_SetPriority+0x50>)
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	3b04      	subs	r3, #4
 8002930:	0112      	lsls	r2, r2, #4
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	440b      	add	r3, r1
 8002936:	761a      	strb	r2, [r3, #24]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000e100 	.word	0xe000e100
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <NVIC_EncodePriority>:
{
 800294c:	b480      	push	{r7}
 800294e:	b089      	sub	sp, #36	@ 0x24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f1c3 0307 	rsb	r3, r3, #7
 8002966:	2b04      	cmp	r3, #4
 8002968:	bf28      	it	cs
 800296a:	2304      	movcs	r3, #4
 800296c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	3304      	adds	r3, #4
 8002972:	2b06      	cmp	r3, #6
 8002974:	d902      	bls.n	800297c <NVIC_EncodePriority+0x30>
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3b03      	subs	r3, #3
 800297a:	e000      	b.n	800297e <NVIC_EncodePriority+0x32>
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002980:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43da      	mvns	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	401a      	ands	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002994:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	43d9      	mvns	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a4:	4313      	orrs	r3, r2
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3724      	adds	r7, #36	@ 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <SysTick_Config>:
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029c4:	d301      	bcc.n	80029ca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80029c6:	2301      	movs	r3, #1
 80029c8:	e00f      	b.n	80029ea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ca:	4a0a      	ldr	r2, [pc, #40]	@ (80029f4 <SysTick_Config+0x40>)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029d2:	210f      	movs	r1, #15
 80029d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029d8:	f7ff ff8e 	bl	80028f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029dc:	4b05      	ldr	r3, [pc, #20]	@ (80029f4 <SysTick_Config+0x40>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029e2:	4b04      	ldr	r3, [pc, #16]	@ (80029f4 <SysTick_Config+0x40>)
 80029e4:	2207      	movs	r2, #7
 80029e6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	e000e010 	.word	0xe000e010

080029f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ff29 	bl	8002858 <__NVIC_SetPriorityGrouping>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4603      	mov	r3, r0
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a20:	f7ff ff3e 	bl	80028a0 <__NVIC_GetPriorityGrouping>
 8002a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	6978      	ldr	r0, [r7, #20]
 8002a2c:	f7ff ff8e 	bl	800294c <NVIC_EncodePriority>
 8002a30:	4602      	mov	r2, r0
 8002a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff5d 	bl	80028f8 <__NVIC_SetPriority>
}
 8002a3e:	bf00      	nop
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff31 	bl	80028bc <__NVIC_EnableIRQ>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff ffa2 	bl	80029b4 <SysTick_Config>
 8002a70:	4603      	mov	r3, r0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b089      	sub	sp, #36	@ 0x24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
 8002a96:	e153      	b.n	8002d40 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a98:	2201      	movs	r2, #1
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	f040 8142 	bne.w	8002d3a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d005      	beq.n	8002ace <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d130      	bne.n	8002b30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	2203      	movs	r2, #3
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b04:	2201      	movs	r2, #1
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 0201 	and.w	r2, r3, #1
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d017      	beq.n	8002b6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	2203      	movs	r2, #3
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d123      	bne.n	8002bc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	08da      	lsrs	r2, r3, #3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3208      	adds	r2, #8
 8002b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	220f      	movs	r2, #15
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	08da      	lsrs	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3208      	adds	r2, #8
 8002bba:	69b9      	ldr	r1, [r7, #24]
 8002bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	2203      	movs	r2, #3
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0203 	and.w	r2, r3, #3
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 809c 	beq.w	8002d3a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	4b54      	ldr	r3, [pc, #336]	@ (8002d58 <HAL_GPIO_Init+0x2dc>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0a:	4a53      	ldr	r2, [pc, #332]	@ (8002d58 <HAL_GPIO_Init+0x2dc>)
 8002c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c12:	4b51      	ldr	r3, [pc, #324]	@ (8002d58 <HAL_GPIO_Init+0x2dc>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c1e:	4a4f      	ldr	r2, [pc, #316]	@ (8002d5c <HAL_GPIO_Init+0x2e0>)
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	3302      	adds	r3, #2
 8002c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	220f      	movs	r2, #15
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a46      	ldr	r2, [pc, #280]	@ (8002d60 <HAL_GPIO_Init+0x2e4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_GPIO_Init+0x1f6>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a45      	ldr	r2, [pc, #276]	@ (8002d64 <HAL_GPIO_Init+0x2e8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00d      	beq.n	8002c6e <HAL_GPIO_Init+0x1f2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a44      	ldr	r2, [pc, #272]	@ (8002d68 <HAL_GPIO_Init+0x2ec>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d007      	beq.n	8002c6a <HAL_GPIO_Init+0x1ee>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a43      	ldr	r2, [pc, #268]	@ (8002d6c <HAL_GPIO_Init+0x2f0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d101      	bne.n	8002c66 <HAL_GPIO_Init+0x1ea>
 8002c62:	2303      	movs	r3, #3
 8002c64:	e006      	b.n	8002c74 <HAL_GPIO_Init+0x1f8>
 8002c66:	2307      	movs	r3, #7
 8002c68:	e004      	b.n	8002c74 <HAL_GPIO_Init+0x1f8>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_Init+0x1f8>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_GPIO_Init+0x1f8>
 8002c72:	2300      	movs	r3, #0
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f002 0203 	and.w	r2, r2, #3
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c84:	4935      	ldr	r1, [pc, #212]	@ (8002d5c <HAL_GPIO_Init+0x2e0>)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c92:	4b37      	ldr	r3, [pc, #220]	@ (8002d70 <HAL_GPIO_Init+0x2f4>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cb6:	4a2e      	ldr	r2, [pc, #184]	@ (8002d70 <HAL_GPIO_Init+0x2f4>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8002d70 <HAL_GPIO_Init+0x2f4>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce0:	4a23      	ldr	r2, [pc, #140]	@ (8002d70 <HAL_GPIO_Init+0x2f4>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ce6:	4b22      	ldr	r3, [pc, #136]	@ (8002d70 <HAL_GPIO_Init+0x2f4>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d0a:	4a19      	ldr	r2, [pc, #100]	@ (8002d70 <HAL_GPIO_Init+0x2f4>)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d10:	4b17      	ldr	r3, [pc, #92]	@ (8002d70 <HAL_GPIO_Init+0x2f4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d34:	4a0e      	ldr	r2, [pc, #56]	@ (8002d70 <HAL_GPIO_Init+0x2f4>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	f67f aea8 	bls.w	8002a98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3724      	adds	r7, #36	@ 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	40020000 	.word	0x40020000
 8002d64:	40020400 	.word	0x40020400
 8002d68:	40020800 	.word	0x40020800
 8002d6c:	40020c00 	.word	0x40020c00
 8002d70:	40013c00 	.word	0x40013c00

08002d74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	887b      	ldrh	r3, [r7, #2]
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
 8002d90:	e001      	b.n	8002d96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d92:	2300      	movs	r3, #0
 8002d94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
 8002db0:	4613      	mov	r3, r2
 8002db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db4:	787b      	ldrb	r3, [r7, #1]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dba:	887a      	ldrh	r2, [r7, #2]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dc0:	e003      	b.n	8002dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dc2:	887b      	ldrh	r3, [r7, #2]
 8002dc4:	041a      	lsls	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	619a      	str	r2, [r3, #24]
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b085      	sub	sp, #20
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002de8:	887a      	ldrh	r2, [r7, #2]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4013      	ands	r3, r2
 8002dee:	041a      	lsls	r2, r3, #16
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	43d9      	mvns	r1, r3
 8002df4:	887b      	ldrh	r3, [r7, #2]
 8002df6:	400b      	ands	r3, r1
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	619a      	str	r2, [r3, #24]
}
 8002dfe:	bf00      	nop
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e16:	4b08      	ldr	r3, [pc, #32]	@ (8002e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d006      	beq.n	8002e30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e22:	4a05      	ldr	r2, [pc, #20]	@ (8002e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fd fc88 	bl	8000740 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40013c00 	.word	0x40013c00

08002e3c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e059      	b.n	8002f02 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d106      	bne.n	8002e6e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fe fc03 	bl	8001674 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2203      	movs	r2, #3
 8002e72:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e7c:	d102      	bne.n	8002e84 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f003 fa69 	bl	8006360 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7c1a      	ldrb	r2, [r3, #16]
 8002e96:	f88d 2000 	strb.w	r2, [sp]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e9e:	f003 f9fb 	bl	8006298 <USB_CoreInit>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e026      	b.n	8002f02 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2101      	movs	r1, #1
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f003 fa61 	bl	8006382 <USB_SetCurrentMode>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e017      	b.n	8002f02 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	7c1a      	ldrb	r2, [r3, #16]
 8002eda:	f88d 2000 	strb.w	r2, [sp]
 8002ede:	3304      	adds	r3, #4
 8002ee0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ee2:	f003 fb39 	bl	8006558 <USB_HostInit>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e004      	b.n	8002f02 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e12b      	b.n	8003176 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7fe f978 	bl	8001228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2224      	movs	r2, #36	@ 0x24
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f70:	f000 fda2 	bl	8003ab8 <HAL_RCC_GetPCLK1Freq>
 8002f74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4a81      	ldr	r2, [pc, #516]	@ (8003180 <HAL_I2C_Init+0x274>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d807      	bhi.n	8002f90 <HAL_I2C_Init+0x84>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a80      	ldr	r2, [pc, #512]	@ (8003184 <HAL_I2C_Init+0x278>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	bf94      	ite	ls
 8002f88:	2301      	movls	r3, #1
 8002f8a:	2300      	movhi	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	e006      	b.n	8002f9e <HAL_I2C_Init+0x92>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4a7d      	ldr	r2, [pc, #500]	@ (8003188 <HAL_I2C_Init+0x27c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	bf94      	ite	ls
 8002f98:	2301      	movls	r3, #1
 8002f9a:	2300      	movhi	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e0e7      	b.n	8003176 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4a78      	ldr	r2, [pc, #480]	@ (800318c <HAL_I2C_Init+0x280>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	0c9b      	lsrs	r3, r3, #18
 8002fb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a6a      	ldr	r2, [pc, #424]	@ (8003180 <HAL_I2C_Init+0x274>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d802      	bhi.n	8002fe0 <HAL_I2C_Init+0xd4>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	e009      	b.n	8002ff4 <HAL_I2C_Init+0xe8>
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	4a69      	ldr	r2, [pc, #420]	@ (8003190 <HAL_I2C_Init+0x284>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	099b      	lsrs	r3, r3, #6
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003006:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	495c      	ldr	r1, [pc, #368]	@ (8003180 <HAL_I2C_Init+0x274>)
 8003010:	428b      	cmp	r3, r1
 8003012:	d819      	bhi.n	8003048 <HAL_I2C_Init+0x13c>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1e59      	subs	r1, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003022:	1c59      	adds	r1, r3, #1
 8003024:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003028:	400b      	ands	r3, r1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_I2C_Init+0x138>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1e59      	subs	r1, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	fbb1 f3f3 	udiv	r3, r1, r3
 800303c:	3301      	adds	r3, #1
 800303e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003042:	e051      	b.n	80030e8 <HAL_I2C_Init+0x1dc>
 8003044:	2304      	movs	r3, #4
 8003046:	e04f      	b.n	80030e8 <HAL_I2C_Init+0x1dc>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d111      	bne.n	8003074 <HAL_I2C_Init+0x168>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	1e58      	subs	r0, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6859      	ldr	r1, [r3, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	440b      	add	r3, r1
 800305e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003062:	3301      	adds	r3, #1
 8003064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	e012      	b.n	800309a <HAL_I2C_Init+0x18e>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1e58      	subs	r0, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6859      	ldr	r1, [r3, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	0099      	lsls	r1, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	fbb0 f3f3 	udiv	r3, r0, r3
 800308a:	3301      	adds	r3, #1
 800308c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_Init+0x196>
 800309e:	2301      	movs	r3, #1
 80030a0:	e022      	b.n	80030e8 <HAL_I2C_Init+0x1dc>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10e      	bne.n	80030c8 <HAL_I2C_Init+0x1bc>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1e58      	subs	r0, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	460b      	mov	r3, r1
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	440b      	add	r3, r1
 80030b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030c6:	e00f      	b.n	80030e8 <HAL_I2C_Init+0x1dc>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1e58      	subs	r0, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	0099      	lsls	r1, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	fbb0 f3f3 	udiv	r3, r0, r3
 80030de:	3301      	adds	r3, #1
 80030e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	6809      	ldr	r1, [r1, #0]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69da      	ldr	r2, [r3, #28]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003116:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6911      	ldr	r1, [r2, #16]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68d2      	ldr	r2, [r2, #12]
 8003122:	4311      	orrs	r1, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	430b      	orrs	r3, r1
 800312a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2220      	movs	r2, #32
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	000186a0 	.word	0x000186a0
 8003184:	001e847f 	.word	0x001e847f
 8003188:	003d08ff 	.word	0x003d08ff
 800318c:	431bde83 	.word	0x431bde83
 8003190:	10624dd3 	.word	0x10624dd3

08003194 <HAL_IRDA_Init>:
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IRDA_Init(IRDA_HandleTypeDef *hirda)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the IRDA handle allocation */
  if (hirda == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_IRDA_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e05e      	b.n	8003264 <HAL_IRDA_Init+0xd0>
  /* Check the IRDA instance parameters */
  assert_param(IS_IRDA_INSTANCE(hirda->Instance));
  /* Check the IRDA mode parameter in the IRDA handle */
  assert_param(IS_IRDA_POWERMODE(hirda->Init.IrDAMode));

  if (hirda->gState == HAL_IRDA_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_IRDA_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hirda->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware */
    hirda->MspInitCallback(hirda);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_IRDA_MspInit(hirda);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fe f9dc 	bl	8001578 <HAL_IRDA_MspInit>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
  }

  hirda->gState = HAL_IRDA_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2224      	movs	r2, #36	@ 0x24
 80031c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable the IRDA peripheral */
  __HAL_IRDA_DISABLE(hirda);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031d6:	60da      	str	r2, [r3, #12]

  /* Set the IRDA communication parameters */
  IRDA_SetConfig(hirda);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f847 	bl	800326c <IRDA_SetConfig>

  /* In IrDA mode, the following bits must be kept cleared:
  - LINEN, STOP and CLKEN bits in the USART_CR2 register,
  - SCEN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(hirda->Instance->CR2, (USART_CR2_LINEN | USART_CR2_STOP | USART_CR2_CLKEN));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 42f0 	bic.w	r2, r2, #30720	@ 0x7800
 80031ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0228 	bic.w	r2, r2, #40	@ 0x28
 80031fc:	615a      	str	r2, [r3, #20]

  /* Enable the IRDA peripheral */
  __HAL_IRDA_ENABLE(hirda);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800320c:	60da      	str	r2, [r3, #12]

  /* Set the prescaler */
  MODIFY_REG(hirda->Instance->GTPR, USART_GTPR_PSC, hirda->Init.Prescaler);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	7d1b      	ldrb	r3, [r3, #20]
 800321c:	4619      	mov	r1, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	619a      	str	r2, [r3, #24]

  /* Configure the IrDA mode */
  MODIFY_REG(hirda->Instance->CR3, USART_CR3_IRLP, hirda->Init.IrDAMode);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f023 0104 	bic.w	r1, r3, #4
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699a      	ldr	r2, [r3, #24]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	615a      	str	r2, [r3, #20]

  /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
  SET_BIT(hirda->Instance->CR3, USART_CR3_IREN);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0202 	orr.w	r2, r2, #2
 800324a:	615a      	str	r2, [r3, #20]

  /* Initialize the IRDA state*/
  hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	639a      	str	r2, [r3, #56]	@ 0x38
  hirda->gState = HAL_IRDA_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hirda->RxState = HAL_IRDA_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <IRDA_SetConfig>:
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_SetConfig(IRDA_HandleTypeDef *hirda)
{
 800326c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003270:	b0bb      	sub	sp, #236	@ 0xec
 8003272:	af00      	add	r7, sp, #0
 8003274:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
  assert_param(IS_IRDA_MODE(hirda->Init.Mode));
  assert_param(IS_IRDA_POWERMODE(hirda->Init.IrDAMode));

  /*-------------------------- USART CR2 Configuration ------------------------*/
  /* Clear STOP[13:12] bits */
  CLEAR_BIT(hirda->Instance->CR2, USART_CR2_STOP);
 8003278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6919      	ldr	r1, [r3, #16]
 8003280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	f421 5340 	bic.w	r3, r1, #12288	@ 0x3000
 800328a:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  /* Clear M, PCE, PS, TE and RE bits */
  CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 800328c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68d9      	ldr	r1, [r3, #12]
 8003294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	f421 53b0 	bic.w	r3, r1, #5632	@ 0x1600
 800329e:	f023 030c 	bic.w	r3, r3, #12
 80032a2:	60d3      	str	r3, [r2, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to hirda->Init.WordLength value
     Set PCE and PS bits according to hirda->Init.Parity value
     Set TE and RE bits according to hirda->Init.Mode value */
  /* Write to USART CR1 */
  SET_BIT(hirda->Instance->CR1, (hirda->Init.WordLength | hirda->Init.Parity | hirda->Init.Mode));
 80032a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68d8      	ldr	r0, [r3, #12]
 80032ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	ea42 0103 	orr.w	r1, r2, r3
 80032c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	ea40 0301 	orr.w	r3, r0, r1
 80032ce:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80032d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6959      	ldr	r1, [r3, #20]
 80032d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
 80032e2:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
   }
#elif defined(USART6)
  if((hirda->Instance == USART1) || (hirda->Instance == USART6))
 80032e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4b90      	ldr	r3, [pc, #576]	@ (800352c <IRDA_SetConfig+0x2c0>)
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d006      	beq.n	80032fe <IRDA_SetConfig+0x92>
 80032f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4b8e      	ldr	r3, [pc, #568]	@ (8003530 <IRDA_SetConfig+0x2c4>)
 80032f8:	429a      	cmp	r2, r3
 80032fa:	f040 811d 	bne.w	8003538 <IRDA_SetConfig+0x2cc>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032fe:	f000 fbef 	bl	8003ae0 <HAL_RCC_GetPCLK2Freq>
 8003302:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
    SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
 8003306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689d      	ldr	r5, [r3, #8]
 800330e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003312:	2200      	movs	r2, #0
 8003314:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003318:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800331c:	e9d7 ab34 	ldrd	sl, fp, [r7, #208]	@ 0xd0
 8003320:	4652      	mov	r2, sl
 8003322:	465b      	mov	r3, fp
 8003324:	1891      	adds	r1, r2, r2
 8003326:	6439      	str	r1, [r7, #64]	@ 0x40
 8003328:	415b      	adcs	r3, r3
 800332a:	647b      	str	r3, [r7, #68]	@ 0x44
 800332c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003330:	4651      	mov	r1, sl
 8003332:	eb12 0801 	adds.w	r8, r2, r1
 8003336:	4659      	mov	r1, fp
 8003338:	eb43 0901 	adc.w	r9, r3, r1
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003348:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800334c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003350:	4690      	mov	r8, r2
 8003352:	4699      	mov	r9, r3
 8003354:	4653      	mov	r3, sl
 8003356:	eb18 0303 	adds.w	r3, r8, r3
 800335a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800335e:	465b      	mov	r3, fp
 8003360:	eb49 0303 	adc.w	r3, r9, r3
 8003364:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003374:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8003384:	4649      	mov	r1, r9
 8003386:	008b      	lsls	r3, r1, #2
 8003388:	4641      	mov	r1, r8
 800338a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800338e:	4641      	mov	r1, r8
 8003390:	008a      	lsls	r2, r1, #2
 8003392:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003396:	f7fc ff8b 	bl	80002b0 <__aeabi_uldivmod>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4b65      	ldr	r3, [pc, #404]	@ (8003534 <IRDA_SetConfig+0x2c8>)
 80033a0:	fba3 2302 	umull	r2, r3, r3, r2
 80033a4:	095b      	lsrs	r3, r3, #5
 80033a6:	011c      	lsls	r4, r3, #4
 80033a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033ac:	2200      	movs	r2, #0
 80033ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033b2:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80033b6:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80033ba:	4642      	mov	r2, r8
 80033bc:	464b      	mov	r3, r9
 80033be:	1891      	adds	r1, r2, r2
 80033c0:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033c2:	415b      	adcs	r3, r3
 80033c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80033ca:	4641      	mov	r1, r8
 80033cc:	1851      	adds	r1, r2, r1
 80033ce:	6339      	str	r1, [r7, #48]	@ 0x30
 80033d0:	4649      	mov	r1, r9
 80033d2:	414b      	adcs	r3, r1
 80033d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033e2:	4659      	mov	r1, fp
 80033e4:	00cb      	lsls	r3, r1, #3
 80033e6:	4651      	mov	r1, sl
 80033e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ec:	4651      	mov	r1, sl
 80033ee:	00ca      	lsls	r2, r1, #3
 80033f0:	4610      	mov	r0, r2
 80033f2:	4619      	mov	r1, r3
 80033f4:	4603      	mov	r3, r0
 80033f6:	4642      	mov	r2, r8
 80033f8:	189b      	adds	r3, r3, r2
 80033fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033fe:	464b      	mov	r3, r9
 8003400:	460a      	mov	r2, r1
 8003402:	eb42 0303 	adc.w	r3, r2, r3
 8003406:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800340a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003416:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8003426:	4649      	mov	r1, r9
 8003428:	008b      	lsls	r3, r1, #2
 800342a:	4641      	mov	r1, r8
 800342c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003430:	4641      	mov	r1, r8
 8003432:	008a      	lsls	r2, r1, #2
 8003434:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003438:	f7fc ff3a 	bl	80002b0 <__aeabi_uldivmod>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4611      	mov	r1, r2
 8003442:	4b3c      	ldr	r3, [pc, #240]	@ (8003534 <IRDA_SetConfig+0x2c8>)
 8003444:	fba3 2301 	umull	r2, r3, r3, r1
 8003448:	095b      	lsrs	r3, r3, #5
 800344a:	2264      	movs	r2, #100	@ 0x64
 800344c:	fb02 f303 	mul.w	r3, r2, r3
 8003450:	1acb      	subs	r3, r1, r3
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	3332      	adds	r3, #50	@ 0x32
 8003456:	4a37      	ldr	r2, [pc, #220]	@ (8003534 <IRDA_SetConfig+0x2c8>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	095b      	lsrs	r3, r3, #5
 800345e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003462:	441c      	add	r4, r3
 8003464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003468:	2200      	movs	r2, #0
 800346a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800346e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003472:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003476:	4642      	mov	r2, r8
 8003478:	464b      	mov	r3, r9
 800347a:	1891      	adds	r1, r2, r2
 800347c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800347e:	415b      	adcs	r3, r3
 8003480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003486:	4641      	mov	r1, r8
 8003488:	1851      	adds	r1, r2, r1
 800348a:	6239      	str	r1, [r7, #32]
 800348c:	4649      	mov	r1, r9
 800348e:	414b      	adcs	r3, r1
 8003490:	627b      	str	r3, [r7, #36]	@ 0x24
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 800349e:	4659      	mov	r1, fp
 80034a0:	00cb      	lsls	r3, r1, #3
 80034a2:	4651      	mov	r1, sl
 80034a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034a8:	4651      	mov	r1, sl
 80034aa:	00ca      	lsls	r2, r1, #3
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	4603      	mov	r3, r0
 80034b2:	4642      	mov	r2, r8
 80034b4:	189b      	adds	r3, r3, r2
 80034b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034ba:	464b      	mov	r3, r9
 80034bc:	460a      	mov	r2, r1
 80034be:	eb42 0303 	adc.w	r3, r2, r3
 80034c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80034e2:	4649      	mov	r1, r9
 80034e4:	008b      	lsls	r3, r1, #2
 80034e6:	4641      	mov	r1, r8
 80034e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ec:	4641      	mov	r1, r8
 80034ee:	008a      	lsls	r2, r1, #2
 80034f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034f4:	f7fc fedc 	bl	80002b0 <__aeabi_uldivmod>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003534 <IRDA_SetConfig+0x2c8>)
 80034fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	2164      	movs	r1, #100	@ 0x64
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	3332      	adds	r3, #50	@ 0x32
 8003510:	4a08      	ldr	r2, [pc, #32]	@ (8003534 <IRDA_SetConfig+0x2c8>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	f003 030f 	and.w	r3, r3, #15
 800351c:	18e2      	adds	r2, r4, r3
 800351e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	432a      	orrs	r2, r5
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	e106      	b.n	8003738 <IRDA_SetConfig+0x4cc>
 800352a:	bf00      	nop
 800352c:	40011000 	.word	0x40011000
 8003530:	40011400 	.word	0x40011400
 8003534:	51eb851f 	.word	0x51eb851f
    SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
  }
#endif /* USART6 */
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003538:	f000 fabe 	bl	8003ab8 <HAL_RCC_GetPCLK1Freq>
 800353c:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
    SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
 8003540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689e      	ldr	r6, [r3, #8]
 8003548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800354c:	2200      	movs	r2, #0
 800354e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003552:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003556:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800355a:	4642      	mov	r2, r8
 800355c:	464b      	mov	r3, r9
 800355e:	1891      	adds	r1, r2, r2
 8003560:	61b9      	str	r1, [r7, #24]
 8003562:	415b      	adcs	r3, r3
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800356a:	4641      	mov	r1, r8
 800356c:	1854      	adds	r4, r2, r1
 800356e:	4649      	mov	r1, r9
 8003570:	eb43 0501 	adc.w	r5, r3, r1
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	00eb      	lsls	r3, r5, #3
 800357e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003582:	00e2      	lsls	r2, r4, #3
 8003584:	4614      	mov	r4, r2
 8003586:	461d      	mov	r5, r3
 8003588:	4643      	mov	r3, r8
 800358a:	18e3      	adds	r3, r4, r3
 800358c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003590:	464b      	mov	r3, r9
 8003592:	eb45 0303 	adc.w	r3, r5, r3
 8003596:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800359a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035a4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80035b2:	4629      	mov	r1, r5
 80035b4:	008b      	lsls	r3, r1, #2
 80035b6:	4621      	mov	r1, r4
 80035b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035bc:	4621      	mov	r1, r4
 80035be:	008a      	lsls	r2, r1, #2
 80035c0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80035c4:	f7fc fe74 	bl	80002b0 <__aeabi_uldivmod>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4b5d      	ldr	r3, [pc, #372]	@ (8003744 <IRDA_SetConfig+0x4d8>)
 80035ce:	fba3 2302 	umull	r2, r3, r3, r2
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	011c      	lsls	r4, r3, #4
 80035d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035da:	2200      	movs	r2, #0
 80035dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80035de:	677a      	str	r2, [r7, #116]	@ 0x74
 80035e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80035e4:	4642      	mov	r2, r8
 80035e6:	464b      	mov	r3, r9
 80035e8:	1891      	adds	r1, r2, r2
 80035ea:	6139      	str	r1, [r7, #16]
 80035ec:	415b      	adcs	r3, r3
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035f4:	4641      	mov	r1, r8
 80035f6:	eb12 0a01 	adds.w	sl, r2, r1
 80035fa:	4649      	mov	r1, r9
 80035fc:	eb43 0b01 	adc.w	fp, r3, r1
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800360c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003610:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003614:	4692      	mov	sl, r2
 8003616:	469b      	mov	fp, r3
 8003618:	4643      	mov	r3, r8
 800361a:	eb1a 0303 	adds.w	r3, sl, r3
 800361e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003620:	464b      	mov	r3, r9
 8003622:	eb4b 0303 	adc.w	r3, fp, r3
 8003626:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	663b      	str	r3, [r7, #96]	@ 0x60
 8003632:	667a      	str	r2, [r7, #100]	@ 0x64
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003640:	4649      	mov	r1, r9
 8003642:	008b      	lsls	r3, r1, #2
 8003644:	4641      	mov	r1, r8
 8003646:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800364a:	4641      	mov	r1, r8
 800364c:	008a      	lsls	r2, r1, #2
 800364e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003652:	f7fc fe2d 	bl	80002b0 <__aeabi_uldivmod>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	4611      	mov	r1, r2
 800365c:	4b39      	ldr	r3, [pc, #228]	@ (8003744 <IRDA_SetConfig+0x4d8>)
 800365e:	fba3 2301 	umull	r2, r3, r3, r1
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	2264      	movs	r2, #100	@ 0x64
 8003666:	fb02 f303 	mul.w	r3, r2, r3
 800366a:	1acb      	subs	r3, r1, r3
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	3332      	adds	r3, #50	@ 0x32
 8003670:	4a34      	ldr	r2, [pc, #208]	@ (8003744 <IRDA_SetConfig+0x4d8>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800367c:	441c      	add	r4, r3
 800367e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003682:	2200      	movs	r2, #0
 8003684:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003686:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003688:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 800368c:	4642      	mov	r2, r8
 800368e:	464b      	mov	r3, r9
 8003690:	1891      	adds	r1, r2, r2
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	415b      	adcs	r3, r3
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800369c:	4641      	mov	r1, r8
 800369e:	1851      	adds	r1, r2, r1
 80036a0:	6039      	str	r1, [r7, #0]
 80036a2:	4649      	mov	r1, r9
 80036a4:	414b      	adcs	r3, r1
 80036a6:	607b      	str	r3, [r7, #4]
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036b4:	4659      	mov	r1, fp
 80036b6:	00cb      	lsls	r3, r1, #3
 80036b8:	4651      	mov	r1, sl
 80036ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036be:	4651      	mov	r1, sl
 80036c0:	00ca      	lsls	r2, r1, #3
 80036c2:	4610      	mov	r0, r2
 80036c4:	4619      	mov	r1, r3
 80036c6:	4603      	mov	r3, r0
 80036c8:	4642      	mov	r2, r8
 80036ca:	189b      	adds	r3, r3, r2
 80036cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80036ce:	464b      	mov	r3, r9
 80036d0:	460a      	mov	r2, r1
 80036d2:	eb42 0303 	adc.w	r3, r2, r3
 80036d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80036d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036e2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80036f0:	4649      	mov	r1, r9
 80036f2:	008b      	lsls	r3, r1, #2
 80036f4:	4641      	mov	r1, r8
 80036f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036fa:	4641      	mov	r1, r8
 80036fc:	008a      	lsls	r2, r1, #2
 80036fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8003702:	f7fc fdd5 	bl	80002b0 <__aeabi_uldivmod>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4b0e      	ldr	r3, [pc, #56]	@ (8003744 <IRDA_SetConfig+0x4d8>)
 800370c:	fba3 1302 	umull	r1, r3, r3, r2
 8003710:	095b      	lsrs	r3, r3, #5
 8003712:	2164      	movs	r1, #100	@ 0x64
 8003714:	fb01 f303 	mul.w	r3, r1, r3
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	3332      	adds	r3, #50	@ 0x32
 800371e:	4a09      	ldr	r2, [pc, #36]	@ (8003744 <IRDA_SetConfig+0x4d8>)
 8003720:	fba2 2303 	umull	r2, r3, r2, r3
 8003724:	095b      	lsrs	r3, r3, #5
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	18e2      	adds	r2, r4, r3
 800372c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4332      	orrs	r2, r6
 8003734:	609a      	str	r2, [r3, #8]
  }
}
 8003736:	bf00      	nop
 8003738:	bf00      	nop
 800373a:	37ec      	adds	r7, #236	@ 0xec
 800373c:	46bd      	mov	sp, r7
 800373e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003742:	bf00      	nop
 8003744:	51eb851f 	.word	0x51eb851f

08003748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0cc      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800375c:	4b68      	ldr	r3, [pc, #416]	@ (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d90c      	bls.n	8003784 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376a:	4b65      	ldr	r3, [pc, #404]	@ (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003772:	4b63      	ldr	r3, [pc, #396]	@ (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d001      	beq.n	8003784 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0b8      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d020      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800379c:	4b59      	ldr	r3, [pc, #356]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	4a58      	ldr	r2, [pc, #352]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037b4:	4b53      	ldr	r3, [pc, #332]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	4a52      	ldr	r2, [pc, #328]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c0:	4b50      	ldr	r3, [pc, #320]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	494d      	ldr	r1, [pc, #308]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d044      	beq.n	8003868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d107      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e6:	4b47      	ldr	r3, [pc, #284]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d119      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e07f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d003      	beq.n	8003806 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003802:	2b03      	cmp	r3, #3
 8003804:	d107      	bne.n	8003816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003806:	4b3f      	ldr	r3, [pc, #252]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e06f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003816:	4b3b      	ldr	r3, [pc, #236]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e067      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003826:	4b37      	ldr	r3, [pc, #220]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f023 0203 	bic.w	r2, r3, #3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	4934      	ldr	r1, [pc, #208]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	4313      	orrs	r3, r2
 8003836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003838:	f7fe f930 	bl	8001a9c <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383e:	e00a      	b.n	8003856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003840:	f7fe f92c 	bl	8001a9c <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e04f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003856:	4b2b      	ldr	r3, [pc, #172]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 020c 	and.w	r2, r3, #12
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	429a      	cmp	r2, r3
 8003866:	d1eb      	bne.n	8003840 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003868:	4b25      	ldr	r3, [pc, #148]	@ (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d20c      	bcs.n	8003890 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b22      	ldr	r3, [pc, #136]	@ (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b20      	ldr	r3, [pc, #128]	@ (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e032      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800389c:	4b19      	ldr	r3, [pc, #100]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4916      	ldr	r1, [pc, #88]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d009      	beq.n	80038ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ba:	4b12      	ldr	r3, [pc, #72]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	490e      	ldr	r1, [pc, #56]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038ce:	f000 f821 	bl	8003914 <HAL_RCC_GetSysClockFreq>
 80038d2:	4602      	mov	r2, r0
 80038d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	490a      	ldr	r1, [pc, #40]	@ (8003908 <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	5ccb      	ldrb	r3, [r1, r3]
 80038e2:	fa22 f303 	lsr.w	r3, r2, r3
 80038e6:	4a09      	ldr	r2, [pc, #36]	@ (800390c <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80038ea:	4b09      	ldr	r3, [pc, #36]	@ (8003910 <HAL_RCC_ClockConfig+0x1c8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe f890 	bl	8001a14 <HAL_InitTick>

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40023c00 	.word	0x40023c00
 8003904:	40023800 	.word	0x40023800
 8003908:	080075b8 	.word	0x080075b8
 800390c:	20000000 	.word	0x20000000
 8003910:	20000004 	.word	0x20000004

08003914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003918:	b090      	sub	sp, #64	@ 0x40
 800391a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800392c:	4b59      	ldr	r3, [pc, #356]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x180>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 030c 	and.w	r3, r3, #12
 8003934:	2b08      	cmp	r3, #8
 8003936:	d00d      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0x40>
 8003938:	2b08      	cmp	r3, #8
 800393a:	f200 80a1 	bhi.w	8003a80 <HAL_RCC_GetSysClockFreq+0x16c>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0x34>
 8003942:	2b04      	cmp	r3, #4
 8003944:	d003      	beq.n	800394e <HAL_RCC_GetSysClockFreq+0x3a>
 8003946:	e09b      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003948:	4b53      	ldr	r3, [pc, #332]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x184>)
 800394a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800394c:	e09b      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800394e:	4b53      	ldr	r3, [pc, #332]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x188>)
 8003950:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003952:	e098      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003954:	4b4f      	ldr	r3, [pc, #316]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800395c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800395e:	4b4d      	ldr	r3, [pc, #308]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d028      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x180>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	099b      	lsrs	r3, r3, #6
 8003970:	2200      	movs	r2, #0
 8003972:	623b      	str	r3, [r7, #32]
 8003974:	627a      	str	r2, [r7, #36]	@ 0x24
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800397c:	2100      	movs	r1, #0
 800397e:	4b47      	ldr	r3, [pc, #284]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x188>)
 8003980:	fb03 f201 	mul.w	r2, r3, r1
 8003984:	2300      	movs	r3, #0
 8003986:	fb00 f303 	mul.w	r3, r0, r3
 800398a:	4413      	add	r3, r2
 800398c:	4a43      	ldr	r2, [pc, #268]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x188>)
 800398e:	fba0 1202 	umull	r1, r2, r0, r2
 8003992:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003994:	460a      	mov	r2, r1
 8003996:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003998:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800399a:	4413      	add	r3, r2
 800399c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800399e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a0:	2200      	movs	r2, #0
 80039a2:	61bb      	str	r3, [r7, #24]
 80039a4:	61fa      	str	r2, [r7, #28]
 80039a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80039ae:	f7fc fc7f 	bl	80002b0 <__aeabi_uldivmod>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4613      	mov	r3, r2
 80039b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039ba:	e053      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039bc:	4b35      	ldr	r3, [pc, #212]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x180>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	099b      	lsrs	r3, r3, #6
 80039c2:	2200      	movs	r2, #0
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	617a      	str	r2, [r7, #20]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039ce:	f04f 0b00 	mov.w	fp, #0
 80039d2:	4652      	mov	r2, sl
 80039d4:	465b      	mov	r3, fp
 80039d6:	f04f 0000 	mov.w	r0, #0
 80039da:	f04f 0100 	mov.w	r1, #0
 80039de:	0159      	lsls	r1, r3, #5
 80039e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039e4:	0150      	lsls	r0, r2, #5
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	ebb2 080a 	subs.w	r8, r2, sl
 80039ee:	eb63 090b 	sbc.w	r9, r3, fp
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a06:	ebb2 0408 	subs.w	r4, r2, r8
 8003a0a:	eb63 0509 	sbc.w	r5, r3, r9
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	00eb      	lsls	r3, r5, #3
 8003a18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a1c:	00e2      	lsls	r2, r4, #3
 8003a1e:	4614      	mov	r4, r2
 8003a20:	461d      	mov	r5, r3
 8003a22:	eb14 030a 	adds.w	r3, r4, sl
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	eb45 030b 	adc.w	r3, r5, fp
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	028b      	lsls	r3, r1, #10
 8003a3e:	4621      	mov	r1, r4
 8003a40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a44:	4621      	mov	r1, r4
 8003a46:	028a      	lsls	r2, r1, #10
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4e:	2200      	movs	r2, #0
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	60fa      	str	r2, [r7, #12]
 8003a54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a58:	f7fc fc2a 	bl	80002b0 <__aeabi_uldivmod>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4613      	mov	r3, r2
 8003a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a64:	4b0b      	ldr	r3, [pc, #44]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	0c1b      	lsrs	r3, r3, #16
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003a74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a7e:	e002      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a80:	4b05      	ldr	r3, [pc, #20]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3740      	adds	r7, #64	@ 0x40
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a92:	bf00      	nop
 8003a94:	40023800 	.word	0x40023800
 8003a98:	00f42400 	.word	0x00f42400
 8003a9c:	017d7840 	.word	0x017d7840

08003aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aa4:	4b03      	ldr	r3, [pc, #12]	@ (8003ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000000 	.word	0x20000000

08003ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003abc:	f7ff fff0 	bl	8003aa0 <HAL_RCC_GetHCLKFreq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b05      	ldr	r3, [pc, #20]	@ (8003ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	0a9b      	lsrs	r3, r3, #10
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	4903      	ldr	r1, [pc, #12]	@ (8003adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	080075c8 	.word	0x080075c8

08003ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ae4:	f7ff ffdc 	bl	8003aa0 <HAL_RCC_GetHCLKFreq>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	4b05      	ldr	r3, [pc, #20]	@ (8003b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	0b5b      	lsrs	r3, r3, #13
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	4903      	ldr	r1, [pc, #12]	@ (8003b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003af6:	5ccb      	ldrb	r3, [r1, r3]
 8003af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40023800 	.word	0x40023800
 8003b04:	080075c8 	.word	0x080075c8

08003b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d010      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003b28:	4b87      	ldr	r3, [pc, #540]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b2e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	4984      	ldr	r1, [pc, #528]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8003b46:	2301      	movs	r3, #1
 8003b48:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d010      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003b56:	4b7c      	ldr	r3, [pc, #496]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b5c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	4978      	ldr	r1, [pc, #480]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8003b74:	2301      	movs	r3, #1
 8003b76:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8083 	beq.w	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	4b6f      	ldr	r3, [pc, #444]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	4a6e      	ldr	r2, [pc, #440]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b96:	4b6c      	ldr	r3, [pc, #432]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a69      	ldr	r2, [pc, #420]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bae:	f7fd ff75 	bl	8001a9c <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb6:	f7fd ff71 	bl	8001a9c <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e162      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x386>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003bc8:	4b60      	ldr	r3, [pc, #384]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bd4:	4b5c      	ldr	r3, [pc, #368]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bdc:	60fb      	str	r3, [r7, #12]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d02f      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d028      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bf2:	4b55      	ldr	r3, [pc, #340]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bfa:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bfc:	4b54      	ldr	r3, [pc, #336]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c02:	4b53      	ldr	r3, [pc, #332]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c08:	4a4f      	ldr	r2, [pc, #316]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c0e:	4b4e      	ldr	r3, [pc, #312]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d114      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c1a:	f7fd ff3f 	bl	8001a9c <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c20:	e00a      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c22:	f7fd ff3b 	bl	8001a9c <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e12a      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x386>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c38:	4b43      	ldr	r3, [pc, #268]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0ee      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c50:	d10d      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c52:	4b3d      	ldr	r3, [pc, #244]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003c62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c66:	4938      	ldr	r1, [pc, #224]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	608b      	str	r3, [r1, #8]
 8003c6c:	e005      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003c6e:	4b36      	ldr	r3, [pc, #216]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	4a35      	ldr	r2, [pc, #212]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c74:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003c78:	6093      	str	r3, [r2, #8]
 8003c7a:	4b33      	ldr	r3, [pc, #204]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c7c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c86:	4930      	ldr	r1, [pc, #192]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d004      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8003c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003ca0:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003cae:	4b26      	ldr	r3, [pc, #152]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cb4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbc:	4922      	ldr	r1, [pc, #136]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d011      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cd6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cde:	491a      	ldr	r1, [pc, #104]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cee:	d101      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003d00:	4b11      	ldr	r3, [pc, #68]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d06:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	490e      	ldr	r1, [pc, #56]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d004      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b80      	cmp	r3, #128	@ 0x80
 8003d22:	f040 8091 	bne.w	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d26:	4b0c      	ldr	r3, [pc, #48]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d2c:	f7fd feb6 	bl	8001a9c <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d32:	e013      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d34:	f7fd feb2 	bl	8001a9c <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d90c      	bls.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e0a3      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8003d46:	bf00      	nop
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	40007000 	.word	0x40007000
 8003d50:	42470e40 	.word	0x42470e40
 8003d54:	424711e0 	.word	0x424711e0
 8003d58:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d5c:	4b4e      	ldr	r3, [pc, #312]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e5      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8003d68:	4a4c      	ldr	r2, [pc, #304]	@ (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d6e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d023      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x290>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d019      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d004      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dac:	d00e      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d019      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d115      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dca:	d110      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	019b      	lsls	r3, r3, #6
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	061b      	lsls	r3, r3, #24
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	071b      	lsls	r3, r3, #28
 8003de6:	492c      	ldr	r1, [pc, #176]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d010      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	019b      	lsls	r3, r3, #6
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	061b      	lsls	r3, r3, #24
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	071b      	lsls	r3, r3, #28
 8003e14:	4920      	ldr	r1, [pc, #128]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e1c:	4b20      	ldr	r3, [pc, #128]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8003e1e:	2201      	movs	r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e22:	f7fd fe3b 	bl	8001a9c <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e28:	e008      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e2a:	f7fd fe37 	bl	8001a9c <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e028      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x386>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e3c:	4b16      	ldr	r3, [pc, #88]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0f0      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e54:	4b10      	ldr	r3, [pc, #64]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e62:	490d      	ldr	r1, [pc, #52]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e76:	4b08      	ldr	r3, [pc, #32]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e7c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e84:	4904      	ldr	r1, [pc, #16]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	424710d8 	.word	0x424710d8
 8003ea0:	42470068 	.word	0x42470068

08003ea4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e273      	b.n	800439e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d075      	beq.n	8003fae <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ec2:	4b88      	ldr	r3, [pc, #544]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d00c      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ece:	4b85      	ldr	r3, [pc, #532]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
        || \
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d112      	bne.n	8003f00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eda:	4b82      	ldr	r3, [pc, #520]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ee2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ee6:	d10b      	bne.n	8003f00 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee8:	4b7e      	ldr	r3, [pc, #504]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d05b      	beq.n	8003fac <HAL_RCC_OscConfig+0x108>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d157      	bne.n	8003fac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e24e      	b.n	800439e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f08:	d106      	bne.n	8003f18 <HAL_RCC_OscConfig+0x74>
 8003f0a:	4b76      	ldr	r3, [pc, #472]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a75      	ldr	r2, [pc, #468]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	e01d      	b.n	8003f54 <HAL_RCC_OscConfig+0xb0>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCC_OscConfig+0x98>
 8003f22:	4b70      	ldr	r3, [pc, #448]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a6f      	ldr	r2, [pc, #444]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	4b6d      	ldr	r3, [pc, #436]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a6c      	ldr	r2, [pc, #432]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e00b      	b.n	8003f54 <HAL_RCC_OscConfig+0xb0>
 8003f3c:	4b69      	ldr	r3, [pc, #420]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a68      	ldr	r2, [pc, #416]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	4b66      	ldr	r3, [pc, #408]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a65      	ldr	r2, [pc, #404]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d013      	beq.n	8003f84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fd fd9e 	bl	8001a9c <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f64:	f7fd fd9a 	bl	8001a9c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b64      	cmp	r3, #100	@ 0x64
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e213      	b.n	800439e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f76:	4b5b      	ldr	r3, [pc, #364]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0xc0>
 8003f82:	e014      	b.n	8003fae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fd fd8a 	bl	8001a9c <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f8c:	f7fd fd86 	bl	8001a9c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b64      	cmp	r3, #100	@ 0x64
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e1ff      	b.n	800439e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f9e:	4b51      	ldr	r3, [pc, #324]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0xe8>
 8003faa:	e000      	b.n	8003fae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d063      	beq.n	8004082 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003fba:	4b4a      	ldr	r3, [pc, #296]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00b      	beq.n	8003fde <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fc6:	4b47      	ldr	r3, [pc, #284]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
        || \
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d11c      	bne.n	800400c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fd2:	4b44      	ldr	r3, [pc, #272]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d116      	bne.n	800400c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fde:	4b41      	ldr	r3, [pc, #260]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x152>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d001      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e1d3      	b.n	800439e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4937      	ldr	r1, [pc, #220]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400a:	e03a      	b.n	8004082 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d020      	beq.n	8004056 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004014:	4b34      	ldr	r3, [pc, #208]	@ (80040e8 <HAL_RCC_OscConfig+0x244>)
 8004016:	2201      	movs	r2, #1
 8004018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401a:	f7fd fd3f 	bl	8001a9c <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004022:	f7fd fd3b 	bl	8001a9c <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e1b4      	b.n	800439e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004034:	4b2b      	ldr	r3, [pc, #172]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004040:	4b28      	ldr	r3, [pc, #160]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	4925      	ldr	r1, [pc, #148]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8004050:	4313      	orrs	r3, r2
 8004052:	600b      	str	r3, [r1, #0]
 8004054:	e015      	b.n	8004082 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004056:	4b24      	ldr	r3, [pc, #144]	@ (80040e8 <HAL_RCC_OscConfig+0x244>)
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fd fd1e 	bl	8001a9c <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004064:	f7fd fd1a 	bl	8001a9c <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e193      	b.n	800439e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004076:	4b1b      	ldr	r3, [pc, #108]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d036      	beq.n	80040fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d016      	beq.n	80040c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004096:	4b15      	ldr	r3, [pc, #84]	@ (80040ec <HAL_RCC_OscConfig+0x248>)
 8004098:	2201      	movs	r2, #1
 800409a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409c:	f7fd fcfe 	bl	8001a9c <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a4:	f7fd fcfa 	bl	8001a9c <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e173      	b.n	800439e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b6:	4b0b      	ldr	r3, [pc, #44]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 80040b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0x200>
 80040c2:	e01b      	b.n	80040fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c4:	4b09      	ldr	r3, [pc, #36]	@ (80040ec <HAL_RCC_OscConfig+0x248>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ca:	f7fd fce7 	bl	8001a9c <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d0:	e00e      	b.n	80040f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d2:	f7fd fce3 	bl	8001a9c <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d907      	bls.n	80040f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e15c      	b.n	800439e <HAL_RCC_OscConfig+0x4fa>
 80040e4:	40023800 	.word	0x40023800
 80040e8:	42470000 	.word	0x42470000
 80040ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f0:	4b8a      	ldr	r3, [pc, #552]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 80040f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1ea      	bne.n	80040d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8097 	beq.w	8004238 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800410a:	2300      	movs	r3, #0
 800410c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800410e:	4b83      	ldr	r3, [pc, #524]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10f      	bne.n	800413a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	4b7f      	ldr	r3, [pc, #508]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	4a7e      	ldr	r2, [pc, #504]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 8004124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004128:	6413      	str	r3, [r2, #64]	@ 0x40
 800412a:	4b7c      	ldr	r3, [pc, #496]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004132:	60bb      	str	r3, [r7, #8]
 8004134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004136:	2301      	movs	r3, #1
 8004138:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413a:	4b79      	ldr	r3, [pc, #484]	@ (8004320 <HAL_RCC_OscConfig+0x47c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004142:	2b00      	cmp	r3, #0
 8004144:	d118      	bne.n	8004178 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004146:	4b76      	ldr	r3, [pc, #472]	@ (8004320 <HAL_RCC_OscConfig+0x47c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a75      	ldr	r2, [pc, #468]	@ (8004320 <HAL_RCC_OscConfig+0x47c>)
 800414c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004152:	f7fd fca3 	bl	8001a9c <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800415a:	f7fd fc9f 	bl	8001a9c <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e118      	b.n	800439e <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416c:	4b6c      	ldr	r3, [pc, #432]	@ (8004320 <HAL_RCC_OscConfig+0x47c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d106      	bne.n	800418e <HAL_RCC_OscConfig+0x2ea>
 8004180:	4b66      	ldr	r3, [pc, #408]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 8004182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004184:	4a65      	ldr	r2, [pc, #404]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	6713      	str	r3, [r2, #112]	@ 0x70
 800418c:	e01c      	b.n	80041c8 <HAL_RCC_OscConfig+0x324>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b05      	cmp	r3, #5
 8004194:	d10c      	bne.n	80041b0 <HAL_RCC_OscConfig+0x30c>
 8004196:	4b61      	ldr	r3, [pc, #388]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419a:	4a60      	ldr	r2, [pc, #384]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 800419c:	f043 0304 	orr.w	r3, r3, #4
 80041a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a2:	4b5e      	ldr	r3, [pc, #376]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a6:	4a5d      	ldr	r2, [pc, #372]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ae:	e00b      	b.n	80041c8 <HAL_RCC_OscConfig+0x324>
 80041b0:	4b5a      	ldr	r3, [pc, #360]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 80041b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b4:	4a59      	ldr	r2, [pc, #356]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80041bc:	4b57      	ldr	r3, [pc, #348]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c0:	4a56      	ldr	r2, [pc, #344]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 80041c2:	f023 0304 	bic.w	r3, r3, #4
 80041c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d015      	beq.n	80041fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d0:	f7fd fc64 	bl	8001a9c <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d6:	e00a      	b.n	80041ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d8:	f7fd fc60 	bl	8001a9c <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e0d7      	b.n	800439e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ee:	4b4b      	ldr	r3, [pc, #300]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0ee      	beq.n	80041d8 <HAL_RCC_OscConfig+0x334>
 80041fa:	e014      	b.n	8004226 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fc:	f7fd fc4e 	bl	8001a9c <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004202:	e00a      	b.n	800421a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004204:	f7fd fc4a 	bl	8001a9c <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e0c1      	b.n	800439e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800421a:	4b40      	ldr	r3, [pc, #256]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1ee      	bne.n	8004204 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004226:	7dfb      	ldrb	r3, [r7, #23]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d105      	bne.n	8004238 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800422c:	4b3b      	ldr	r3, [pc, #236]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 800422e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004230:	4a3a      	ldr	r2, [pc, #232]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 8004232:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004236:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 80ad 	beq.w	800439c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004242:	4b36      	ldr	r3, [pc, #216]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 030c 	and.w	r3, r3, #12
 800424a:	2b08      	cmp	r3, #8
 800424c:	d060      	beq.n	8004310 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d145      	bne.n	80042e2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004256:	4b33      	ldr	r3, [pc, #204]	@ (8004324 <HAL_RCC_OscConfig+0x480>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7fd fc1e 	bl	8001a9c <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004264:	f7fd fc1a 	bl	8001a9c <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e093      	b.n	800439e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004276:	4b29      	ldr	r3, [pc, #164]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69da      	ldr	r2, [r3, #28]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	019b      	lsls	r3, r3, #6
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004298:	085b      	lsrs	r3, r3, #1
 800429a:	3b01      	subs	r3, #1
 800429c:	041b      	lsls	r3, r3, #16
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a4:	061b      	lsls	r3, r3, #24
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ac:	071b      	lsls	r3, r3, #28
 80042ae:	491b      	ldr	r1, [pc, #108]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004324 <HAL_RCC_OscConfig+0x480>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ba:	f7fd fbef 	bl	8001a9c <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c2:	f7fd fbeb 	bl	8001a9c <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e064      	b.n	800439e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d4:	4b11      	ldr	r3, [pc, #68]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0f0      	beq.n	80042c2 <HAL_RCC_OscConfig+0x41e>
 80042e0:	e05c      	b.n	800439c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e2:	4b10      	ldr	r3, [pc, #64]	@ (8004324 <HAL_RCC_OscConfig+0x480>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e8:	f7fd fbd8 	bl	8001a9c <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f0:	f7fd fbd4 	bl	8001a9c <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e04d      	b.n	800439e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004302:	4b06      	ldr	r3, [pc, #24]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0x44c>
 800430e:	e045      	b.n	800439c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d107      	bne.n	8004328 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e040      	b.n	800439e <HAL_RCC_OscConfig+0x4fa>
 800431c:	40023800 	.word	0x40023800
 8004320:	40007000 	.word	0x40007000
 8004324:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004328:	4b1f      	ldr	r3, [pc, #124]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d030      	beq.n	8004398 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004340:	429a      	cmp	r2, r3
 8004342:	d129      	bne.n	8004398 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800434e:	429a      	cmp	r2, r3
 8004350:	d122      	bne.n	8004398 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004358:	4013      	ands	r3, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800435e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004360:	4293      	cmp	r3, r2
 8004362:	d119      	bne.n	8004398 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436e:	085b      	lsrs	r3, r3, #1
 8004370:	3b01      	subs	r3, #1
 8004372:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d10f      	bne.n	8004398 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004382:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d107      	bne.n	8004398 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004392:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004394:	429a      	cmp	r2, r3
 8004396:	d001      	beq.n	800439c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40023800 	.word	0x40023800

080043ac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e022      	b.n	8004404 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d105      	bne.n	80043d6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7fc ffc7 	bl	8001364 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2203      	movs	r2, #3
 80043da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f814 	bl	800440c <HAL_SD_InitCard>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e00a      	b.n	8004404 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800440c:	b5b0      	push	{r4, r5, r7, lr}
 800440e:	b08e      	sub	sp, #56	@ 0x38
 8004410:	af04      	add	r7, sp, #16
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004414:	2300      	movs	r3, #0
 8004416:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800441c:	2300      	movs	r3, #0
 800441e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004424:	2300      	movs	r3, #0
 8004426:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004428:	2376      	movs	r3, #118	@ 0x76
 800442a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681d      	ldr	r5, [r3, #0]
 8004430:	466c      	mov	r4, sp
 8004432:	f107 0314 	add.w	r3, r7, #20
 8004436:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800443a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800443e:	f107 0308 	add.w	r3, r7, #8
 8004442:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004444:	4628      	mov	r0, r5
 8004446:	f001 fa91 	bl	800596c <SDIO_Init>
 800444a:	4603      	mov	r3, r0
 800444c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8004450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e04f      	b.n	80044fc <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800445c:	4b29      	ldr	r3, [pc, #164]	@ (8004504 <HAL_SD_InitCard+0xf8>)
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f001 fab8 	bl	80059dc <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800446c:	4b25      	ldr	r3, [pc, #148]	@ (8004504 <HAL_SD_InitCard+0xf8>)
 800446e:	2201      	movs	r2, #1
 8004470:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004472:	2002      	movs	r0, #2
 8004474:	f7fd fb1e 	bl	8001ab4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fb53 	bl	8004b24 <SD_PowerON>
 800447e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00b      	beq.n	800449e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e02e      	b.n	80044fc <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fa72 	bl	8004988 <SD_InitCard>
 80044a4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00b      	beq.n	80044c4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e01b      	b.n	80044fc <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044cc:	4618      	mov	r0, r3
 80044ce:	f001 fb17 	bl	8005b00 <SDMMC_CmdBlockLength>
 80044d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00f      	beq.n	80044fa <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a0a      	ldr	r2, [pc, #40]	@ (8004508 <HAL_SD_InitCard+0xfc>)
 80044e0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3728      	adds	r7, #40	@ 0x28
 8004500:	46bd      	mov	sp, r7
 8004502:	bdb0      	pop	{r4, r5, r7, pc}
 8004504:	422580a0 	.word	0x422580a0
 8004508:	004005ff 	.word	0x004005ff

0800450c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800451a:	0f9b      	lsrs	r3, r3, #30
 800451c:	b2da      	uxtb	r2, r3
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004526:	0e9b      	lsrs	r3, r3, #26
 8004528:	b2db      	uxtb	r3, r3
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	b2da      	uxtb	r2, r3
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004538:	0e1b      	lsrs	r3, r3, #24
 800453a:	b2db      	uxtb	r3, r3
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	b2da      	uxtb	r2, r3
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800454a:	0c1b      	lsrs	r3, r3, #16
 800454c:	b2da      	uxtb	r2, r3
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004556:	0a1b      	lsrs	r3, r3, #8
 8004558:	b2da      	uxtb	r2, r3
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004562:	b2da      	uxtb	r2, r3
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800456c:	0d1b      	lsrs	r3, r3, #20
 800456e:	b29a      	uxth	r2, r3
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004578:	0c1b      	lsrs	r3, r3, #16
 800457a:	b2db      	uxtb	r3, r3
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	b2da      	uxtb	r2, r3
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800458a:	0bdb      	lsrs	r3, r3, #15
 800458c:	b2db      	uxtb	r3, r3
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	b2da      	uxtb	r2, r3
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800459c:	0b9b      	lsrs	r3, r3, #14
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045ae:	0b5b      	lsrs	r3, r3, #13
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045c0:	0b1b      	lsrs	r3, r3, #12
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2200      	movs	r2, #0
 80045d2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d163      	bne.n	80046a4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045e0:	009a      	lsls	r2, r3, #2
 80045e2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80045e6:	4013      	ands	r3, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80045ec:	0f92      	lsrs	r2, r2, #30
 80045ee:	431a      	orrs	r2, r3
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045f8:	0edb      	lsrs	r3, r3, #27
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	b2da      	uxtb	r2, r3
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800460a:	0e1b      	lsrs	r3, r3, #24
 800460c:	b2db      	uxtb	r3, r3
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	b2da      	uxtb	r2, r3
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800461c:	0d5b      	lsrs	r3, r3, #21
 800461e:	b2db      	uxtb	r3, r3
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	b2da      	uxtb	r2, r3
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800462e:	0c9b      	lsrs	r3, r3, #18
 8004630:	b2db      	uxtb	r3, r3
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	b2da      	uxtb	r2, r3
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004640:	0bdb      	lsrs	r3, r3, #15
 8004642:	b2db      	uxtb	r3, r3
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	b2da      	uxtb	r2, r3
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	7e1b      	ldrb	r3, [r3, #24]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	3302      	adds	r3, #2
 8004664:	2201      	movs	r2, #1
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800466e:	fb03 f202 	mul.w	r2, r3, r2
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	7a1b      	ldrb	r3, [r3, #8]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f003 030f 	and.w	r3, r3, #15
 8004680:	2201      	movs	r2, #1
 8004682:	409a      	lsls	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004690:	0a52      	lsrs	r2, r2, #9
 8004692:	fb03 f202 	mul.w	r2, r3, r2
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046a0:	661a      	str	r2, [r3, #96]	@ 0x60
 80046a2:	e031      	b.n	8004708 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d11d      	bne.n	80046e8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046b0:	041b      	lsls	r3, r3, #16
 80046b2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046ba:	0c1b      	lsrs	r3, r3, #16
 80046bc:	431a      	orrs	r2, r3
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	3301      	adds	r3, #1
 80046c8:	029a      	lsls	r2, r3, #10
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046dc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	661a      	str	r2, [r3, #96]	@ 0x60
 80046e6:	e00f      	b.n	8004708 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a58      	ldr	r2, [pc, #352]	@ (8004850 <HAL_SD_GetCardCSD+0x344>)
 80046ee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e09d      	b.n	8004844 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800470c:	0b9b      	lsrs	r3, r3, #14
 800470e:	b2db      	uxtb	r3, r3
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	b2da      	uxtb	r2, r3
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800471e:	09db      	lsrs	r3, r3, #7
 8004720:	b2db      	uxtb	r3, r3
 8004722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004726:	b2da      	uxtb	r2, r3
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004730:	b2db      	uxtb	r3, r3
 8004732:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004736:	b2da      	uxtb	r2, r3
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004740:	0fdb      	lsrs	r3, r3, #31
 8004742:	b2da      	uxtb	r2, r3
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800474c:	0f5b      	lsrs	r3, r3, #29
 800474e:	b2db      	uxtb	r3, r3
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	b2da      	uxtb	r2, r3
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475e:	0e9b      	lsrs	r3, r3, #26
 8004760:	b2db      	uxtb	r3, r3
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	b2da      	uxtb	r2, r3
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004770:	0d9b      	lsrs	r3, r3, #22
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f003 030f 	and.w	r3, r3, #15
 8004778:	b2da      	uxtb	r2, r3
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004782:	0d5b      	lsrs	r3, r3, #21
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	b2da      	uxtb	r2, r3
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479e:	0c1b      	lsrs	r3, r3, #16
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b2:	0bdb      	lsrs	r3, r3, #15
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c6:	0b9b      	lsrs	r3, r3, #14
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047da:	0b5b      	lsrs	r3, r3, #13
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ee:	0b1b      	lsrs	r3, r3, #12
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004802:	0a9b      	lsrs	r3, r3, #10
 8004804:	b2db      	uxtb	r3, r3
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	b2da      	uxtb	r2, r3
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004816:	0a1b      	lsrs	r3, r3, #8
 8004818:	b2db      	uxtb	r3, r3
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	b2da      	uxtb	r2, r3
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482a:	085b      	lsrs	r3, r3, #1
 800482c:	b2db      	uxtb	r3, r3
 800482e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004832:	b2da      	uxtb	r2, r3
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	004005ff 	.word	0x004005ff

08004854 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004854:	b5b0      	push	{r4, r5, r7, lr}
 8004856:	b08e      	sub	sp, #56	@ 0x38
 8004858:	af04      	add	r7, sp, #16
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2203      	movs	r2, #3
 8004868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004870:	2b03      	cmp	r3, #3
 8004872:	d02e      	beq.n	80048d2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800487a:	d106      	bne.n	800488a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004880:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	639a      	str	r2, [r3, #56]	@ 0x38
 8004888:	e029      	b.n	80048de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004890:	d10a      	bne.n	80048a8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f9d4 	bl	8004c40 <SD_WideBus_Enable>
 8004898:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80048a6:	e01a      	b.n	80048de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10a      	bne.n	80048c4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fa11 	bl	8004cd6 <SD_WideBus_Disable>
 80048b4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80048c2:	e00c      	b.n	80048de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80048d0:	e005      	b.n	80048de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00b      	beq.n	80048fe <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a26      	ldr	r2, [pc, #152]	@ (8004984 <HAL_SD_ConfigWideBusOperation+0x130>)
 80048ec:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80048fc:	e01f      	b.n	800493e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681d      	ldr	r5, [r3, #0]
 8004924:	466c      	mov	r4, sp
 8004926:	f107 0314 	add.w	r3, r7, #20
 800492a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800492e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004932:	f107 0308 	add.w	r3, r7, #8
 8004936:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004938:	4628      	mov	r0, r5
 800493a:	f001 f817 	bl	800596c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004946:	4618      	mov	r0, r3
 8004948:	f001 f8da 	bl	8005b00 <SDMMC_CmdBlockLength>
 800494c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00c      	beq.n	800496e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a0a      	ldr	r2, [pc, #40]	@ (8004984 <HAL_SD_ConfigWideBusOperation+0x130>)
 800495a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8004976:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800497a:	4618      	mov	r0, r3
 800497c:	3728      	adds	r7, #40	@ 0x28
 800497e:	46bd      	mov	sp, r7
 8004980:	bdb0      	pop	{r4, r5, r7, pc}
 8004982:	bf00      	nop
 8004984:	004005ff 	.word	0x004005ff

08004988 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004988:	b5b0      	push	{r4, r5, r7, lr}
 800498a:	b094      	sub	sp, #80	@ 0x50
 800498c:	af04      	add	r7, sp, #16
 800498e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004990:	2301      	movs	r3, #1
 8004992:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f001 f82d 	bl	80059f8 <SDIO_GetPowerState>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d102      	bne.n	80049aa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80049a4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80049a8:	e0b8      	b.n	8004b1c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d02f      	beq.n	8004a12 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f001 f9ac 	bl	8005d14 <SDMMC_CmdSendCID>
 80049bc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80049be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <SD_InitCard+0x40>
    {
      return errorstate;
 80049c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049c6:	e0a9      	b.n	8004b1c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2100      	movs	r1, #0
 80049ce:	4618      	mov	r0, r3
 80049d0:	f001 f857 	bl	8005a82 <SDIO_GetResponse>
 80049d4:	4602      	mov	r2, r0
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2104      	movs	r1, #4
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 f84e 	bl	8005a82 <SDIO_GetResponse>
 80049e6:	4602      	mov	r2, r0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2108      	movs	r1, #8
 80049f2:	4618      	mov	r0, r3
 80049f4:	f001 f845 	bl	8005a82 <SDIO_GetResponse>
 80049f8:	4602      	mov	r2, r0
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	210c      	movs	r1, #12
 8004a04:	4618      	mov	r0, r3
 8004a06:	f001 f83c 	bl	8005a82 <SDIO_GetResponse>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d00d      	beq.n	8004a36 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f107 020e 	add.w	r2, r7, #14
 8004a22:	4611      	mov	r1, r2
 8004a24:	4618      	mov	r0, r3
 8004a26:	f001 f9b2 	bl	8005d8e <SDMMC_CmdSetRelAdd>
 8004a2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <SD_InitCard+0xae>
    {
      return errorstate;
 8004a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a34:	e072      	b.n	8004b1c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d036      	beq.n	8004aac <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004a3e:	89fb      	ldrh	r3, [r7, #14]
 8004a40:	461a      	mov	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a4e:	041b      	lsls	r3, r3, #16
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f001 f97c 	bl	8005d50 <SDMMC_CmdSendCSD>
 8004a58:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a62:	e05b      	b.n	8004b1c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f001 f809 	bl	8005a82 <SDIO_GetResponse>
 8004a70:	4602      	mov	r2, r0
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2104      	movs	r1, #4
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f001 f800 	bl	8005a82 <SDIO_GetResponse>
 8004a82:	4602      	mov	r2, r0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2108      	movs	r1, #8
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fff7 	bl	8005a82 <SDIO_GetResponse>
 8004a94:	4602      	mov	r2, r0
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	210c      	movs	r1, #12
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 ffee 	bl	8005a82 <SDIO_GetResponse>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2104      	movs	r1, #4
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 ffe5 	bl	8005a82 <SDIO_GetResponse>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	0d1a      	lsrs	r2, r3, #20
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004ac0:	f107 0310 	add.w	r3, r7, #16
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff fd20 	bl	800450c <HAL_SD_GetCardCSD>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004ad2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004ad6:	e021      	b.n	8004b1c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6819      	ldr	r1, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ae0:	041b      	lsls	r3, r3, #16
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	461c      	mov	r4, r3
 8004ae6:	4615      	mov	r5, r2
 8004ae8:	4622      	mov	r2, r4
 8004aea:	462b      	mov	r3, r5
 8004aec:	4608      	mov	r0, r1
 8004aee:	f001 f829 	bl	8005b44 <SDMMC_CmdSelDesel>
 8004af2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <SD_InitCard+0x176>
  {
    return errorstate;
 8004afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004afc:	e00e      	b.n	8004b1c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681d      	ldr	r5, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	466c      	mov	r4, sp
 8004b06:	f103 0210 	add.w	r2, r3, #16
 8004b0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b10:	3304      	adds	r3, #4
 8004b12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b14:	4628      	mov	r0, r5
 8004b16:	f000 ff29 	bl	800596c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3740      	adds	r7, #64	@ 0x40
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bdb0      	pop	{r4, r5, r7, pc}

08004b24 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	2300      	movs	r3, #0
 8004b36:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f001 f824 	bl	8005b8a <SDMMC_CmdGoIdleState>
 8004b42:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <SD_PowerON+0x2a>
  {
    return errorstate;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	e072      	b.n	8004c34 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f001 f837 	bl	8005bc6 <SDMMC_CmdOperCond>
 8004b58:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00d      	beq.n	8004b7c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f001 f80d 	bl	8005b8a <SDMMC_CmdGoIdleState>
 8004b70:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d004      	beq.n	8004b82 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	e05b      	b.n	8004c34 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d137      	bne.n	8004bfa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2100      	movs	r1, #0
 8004b90:	4618      	mov	r0, r3
 8004b92:	f001 f837 	bl	8005c04 <SDMMC_CmdAppCommand>
 8004b96:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d02d      	beq.n	8004bfa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b9e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004ba2:	e047      	b.n	8004c34 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2100      	movs	r1, #0
 8004baa:	4618      	mov	r0, r3
 8004bac:	f001 f82a 	bl	8005c04 <SDMMC_CmdAppCommand>
 8004bb0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <SD_PowerON+0x98>
    {
      return errorstate;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	e03b      	b.n	8004c34 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	491e      	ldr	r1, [pc, #120]	@ (8004c3c <SD_PowerON+0x118>)
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f001 f840 	bl	8005c48 <SDMMC_CmdAppOperCommand>
 8004bc8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d002      	beq.n	8004bd6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004bd0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004bd4:	e02e      	b.n	8004c34 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2100      	movs	r1, #0
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 ff50 	bl	8005a82 <SDIO_GetResponse>
 8004be2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	0fdb      	lsrs	r3, r3, #31
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d101      	bne.n	8004bf0 <SD_PowerON+0xcc>
 8004bec:	2301      	movs	r3, #1
 8004bee:	e000      	b.n	8004bf2 <SD_PowerON+0xce>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	613b      	str	r3, [r7, #16]

    count++;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d802      	bhi.n	8004c0a <SD_PowerON+0xe6>
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0cc      	beq.n	8004ba4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d902      	bls.n	8004c1a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004c14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c18:	e00c      	b.n	8004c34 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	645a      	str	r2, [r3, #68]	@ 0x44
 8004c2a:	e002      	b.n	8004c32 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	c1100000 	.word	0xc1100000

08004c40 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2100      	movs	r1, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 ff13 	bl	8005a82 <SDIO_GetResponse>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c66:	d102      	bne.n	8004c6e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c68:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c6c:	e02f      	b.n	8004cce <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004c6e:	f107 030c 	add.w	r3, r7, #12
 8004c72:	4619      	mov	r1, r3
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f879 	bl	8004d6c <SD_FindSCR>
 8004c7a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	e023      	b.n	8004cce <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01c      	beq.n	8004cca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c98:	041b      	lsls	r3, r3, #16
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	f000 ffb1 	bl	8005c04 <SDMMC_CmdAppCommand>
 8004ca2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	e00f      	b.n	8004cce <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2102      	movs	r1, #2
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 ffea 	bl	8005c8e <SDMMC_CmdBusWidth>
 8004cba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	e003      	b.n	8004cce <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e001      	b.n	8004cce <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004cca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b086      	sub	sp, #24
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2100      	movs	r1, #0
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fec8 	bl	8005a82 <SDIO_GetResponse>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cfc:	d102      	bne.n	8004d04 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004cfe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d02:	e02f      	b.n	8004d64 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004d04:	f107 030c 	add.w	r3, r7, #12
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f82e 	bl	8004d6c <SD_FindSCR>
 8004d10:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	e023      	b.n	8004d64 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d01c      	beq.n	8004d60 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d2e:	041b      	lsls	r3, r3, #16
 8004d30:	4619      	mov	r1, r3
 8004d32:	4610      	mov	r0, r2
 8004d34:	f000 ff66 	bl	8005c04 <SDMMC_CmdAppCommand>
 8004d38:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	e00f      	b.n	8004d64 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2100      	movs	r1, #0
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 ff9f 	bl	8005c8e <SDMMC_CmdBusWidth>
 8004d50:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	e003      	b.n	8004d64 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e001      	b.n	8004d64 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004d60:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004d6c:	b590      	push	{r4, r7, lr}
 8004d6e:	b08f      	sub	sp, #60	@ 0x3c
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004d76:	f7fc fe91 	bl	8001a9c <HAL_GetTick>
 8004d7a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004d80:	2300      	movs	r3, #0
 8004d82:	60bb      	str	r3, [r7, #8]
 8004d84:	2300      	movs	r3, #0
 8004d86:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2108      	movs	r1, #8
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 feb4 	bl	8005b00 <SDMMC_CmdBlockLength>
 8004d98:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da2:	e0b2      	b.n	8004f0a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dac:	041b      	lsls	r3, r3, #16
 8004dae:	4619      	mov	r1, r3
 8004db0:	4610      	mov	r0, r2
 8004db2:	f000 ff27 	bl	8005c04 <SDMMC_CmdAppCommand>
 8004db6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc0:	e0a3      	b.n	8004f0a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004dc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004dc6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004dc8:	2308      	movs	r3, #8
 8004dca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004dcc:	2330      	movs	r3, #48	@ 0x30
 8004dce:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f107 0210 	add.w	r2, r7, #16
 8004de4:	4611      	mov	r1, r2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fe5e 	bl	8005aa8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 ff6e 	bl	8005cd2 <SDMMC_CmdSendSCR>
 8004df6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d02a      	beq.n	8004e54 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e00:	e083      	b.n	8004f0a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00f      	beq.n	8004e30 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6819      	ldr	r1, [r3, #0]
 8004e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	f107 0208 	add.w	r2, r7, #8
 8004e1c:	18d4      	adds	r4, r2, r3
 8004e1e:	4608      	mov	r0, r1
 8004e20:	f000 fdcf 	bl	80059c2 <SDIO_ReadFIFO>
 8004e24:	4603      	mov	r3, r0
 8004e26:	6023      	str	r3, [r4, #0]
      index++;
 8004e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e2e:	e006      	b.n	8004e3e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d012      	beq.n	8004e64 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8004e3e:	f7fc fe2d 	bl	8001a9c <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e4c:	d102      	bne.n	8004e54 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004e4e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004e52:	e05a      	b.n	8004f0a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e5a:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0cf      	beq.n	8004e02 <SD_FindSCR+0x96>
 8004e62:	e000      	b.n	8004e66 <SD_FindSCR+0xfa>
      break;
 8004e64:	bf00      	nop
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <SD_FindSCR+0x114>
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2208      	movs	r2, #8
 8004e7a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004e7c:	2308      	movs	r3, #8
 8004e7e:	e044      	b.n	8004f0a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d005      	beq.n	8004e9a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2202      	movs	r2, #2
 8004e94:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e96:	2302      	movs	r3, #2
 8004e98:	e037      	b.n	8004f0a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2220      	movs	r2, #32
 8004eae:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004eb0:	2320      	movs	r3, #32
 8004eb2:	e02a      	b.n	8004f0a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004ebc:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	061a      	lsls	r2, r3, #24
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004eca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	0a1b      	lsrs	r3, r3, #8
 8004ed0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004ed4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	0e1b      	lsrs	r3, r3, #24
 8004eda:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ede:	601a      	str	r2, [r3, #0]
    scr++;
 8004ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	061a      	lsls	r2, r3, #24
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	021b      	lsls	r3, r3, #8
 8004eee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004ef2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	0a1b      	lsrs	r3, r3, #8
 8004ef8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004efc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	0e1b      	lsrs	r3, r3, #24
 8004f02:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f06:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	373c      	adds	r7, #60	@ 0x3c
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd90      	pop	{r4, r7, pc}

08004f12 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e07b      	b.n	800501c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d108      	bne.n	8004f3e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f34:	d009      	beq.n	8004f4a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	61da      	str	r2, [r3, #28]
 8004f3c:	e005      	b.n	8004f4a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d106      	bne.n	8004f6a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7fc fa7b 	bl	8001460 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f80:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fce:	ea42 0103 	orr.w	r1, r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	0c1b      	lsrs	r3, r3, #16
 8004fe8:	f003 0104 	and.w	r1, r3, #4
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff0:	f003 0210 	and.w	r2, r3, #16
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	69da      	ldr	r2, [r3, #28]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800500a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e041      	b.n	80050ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fc fa50 	bl	80014f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3304      	adds	r3, #4
 8005060:	4619      	mov	r1, r3
 8005062:	4610      	mov	r0, r2
 8005064:	f000 faac 	bl	80055c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d001      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e04e      	b.n	800517a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a23      	ldr	r2, [pc, #140]	@ (8005188 <HAL_TIM_Base_Start_IT+0xc4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d022      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005106:	d01d      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1f      	ldr	r2, [pc, #124]	@ (800518c <HAL_TIM_Base_Start_IT+0xc8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d018      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1e      	ldr	r2, [pc, #120]	@ (8005190 <HAL_TIM_Base_Start_IT+0xcc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d013      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a1c      	ldr	r2, [pc, #112]	@ (8005194 <HAL_TIM_Base_Start_IT+0xd0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00e      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a1b      	ldr	r2, [pc, #108]	@ (8005198 <HAL_TIM_Base_Start_IT+0xd4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d009      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a19      	ldr	r2, [pc, #100]	@ (800519c <HAL_TIM_Base_Start_IT+0xd8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d004      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0x80>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a18      	ldr	r2, [pc, #96]	@ (80051a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d111      	bne.n	8005168 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b06      	cmp	r3, #6
 8005154:	d010      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0201 	orr.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005166:	e007      	b.n	8005178 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40010000 	.word	0x40010000
 800518c:	40000400 	.word	0x40000400
 8005190:	40000800 	.word	0x40000800
 8005194:	40000c00 	.word	0x40000c00
 8005198:	40010400 	.word	0x40010400
 800519c:	40014000 	.word	0x40014000
 80051a0:	40001800 	.word	0x40001800

080051a4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0201 	bic.w	r2, r2, #1
 80051ba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6a1a      	ldr	r2, [r3, #32]
 80051c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10f      	bne.n	80051ec <HAL_TIM_Base_Stop_IT+0x48>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6a1a      	ldr	r2, [r3, #32]
 80051d2:	f240 4344 	movw	r3, #1092	@ 0x444
 80051d6:	4013      	ands	r3, r2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d107      	bne.n	80051ec <HAL_TIM_Base_Stop_IT+0x48>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0201 	bic.w	r2, r2, #1
 80051ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b084      	sub	sp, #16
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d020      	beq.n	8005266 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d01b      	beq.n	8005266 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f06f 0202 	mvn.w	r2, #2
 8005236:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	f003 0303 	and.w	r3, r3, #3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f999 	bl	8005584 <HAL_TIM_IC_CaptureCallback>
 8005252:	e005      	b.n	8005260 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f98b 	bl	8005570 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f99c 	bl	8005598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	d020      	beq.n	80052b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	2b00      	cmp	r3, #0
 8005278:	d01b      	beq.n	80052b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f06f 0204 	mvn.w	r2, #4
 8005282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f973 	bl	8005584 <HAL_TIM_IC_CaptureCallback>
 800529e:	e005      	b.n	80052ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f965 	bl	8005570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f976 	bl	8005598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f003 0308 	and.w	r3, r3, #8
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d020      	beq.n	80052fe <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01b      	beq.n	80052fe <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f06f 0208 	mvn.w	r2, #8
 80052ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2204      	movs	r2, #4
 80052d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	f003 0303 	and.w	r3, r3, #3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f94d 	bl	8005584 <HAL_TIM_IC_CaptureCallback>
 80052ea:	e005      	b.n	80052f8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f93f 	bl	8005570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f950 	bl	8005598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f003 0310 	and.w	r3, r3, #16
 8005304:	2b00      	cmp	r3, #0
 8005306:	d020      	beq.n	800534a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 0310 	and.w	r3, r3, #16
 800530e:	2b00      	cmp	r3, #0
 8005310:	d01b      	beq.n	800534a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f06f 0210 	mvn.w	r2, #16
 800531a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2208      	movs	r2, #8
 8005320:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f927 	bl	8005584 <HAL_TIM_IC_CaptureCallback>
 8005336:	e005      	b.n	8005344 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f919 	bl	8005570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f92a 	bl	8005598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00c      	beq.n	800536e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d007      	beq.n	800536e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f06f 0201 	mvn.w	r2, #1
 8005366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fb f959 	bl	8000620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00c      	beq.n	8005392 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800538a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fae3 	bl	8005958 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00c      	beq.n	80053b6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d007      	beq.n	80053b6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f8fb 	bl	80055ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f003 0320 	and.w	r3, r3, #32
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00c      	beq.n	80053da <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d007      	beq.n	80053da <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f06f 0220 	mvn.w	r2, #32
 80053d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 fab5 	bl	8005944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053da:	bf00      	nop
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b084      	sub	sp, #16
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d101      	bne.n	80053fe <HAL_TIM_ConfigClockSource+0x1c>
 80053fa:	2302      	movs	r3, #2
 80053fc:	e0b4      	b.n	8005568 <HAL_TIM_ConfigClockSource+0x186>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2202      	movs	r2, #2
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800541c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005424:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005436:	d03e      	beq.n	80054b6 <HAL_TIM_ConfigClockSource+0xd4>
 8005438:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800543c:	f200 8087 	bhi.w	800554e <HAL_TIM_ConfigClockSource+0x16c>
 8005440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005444:	f000 8086 	beq.w	8005554 <HAL_TIM_ConfigClockSource+0x172>
 8005448:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800544c:	d87f      	bhi.n	800554e <HAL_TIM_ConfigClockSource+0x16c>
 800544e:	2b70      	cmp	r3, #112	@ 0x70
 8005450:	d01a      	beq.n	8005488 <HAL_TIM_ConfigClockSource+0xa6>
 8005452:	2b70      	cmp	r3, #112	@ 0x70
 8005454:	d87b      	bhi.n	800554e <HAL_TIM_ConfigClockSource+0x16c>
 8005456:	2b60      	cmp	r3, #96	@ 0x60
 8005458:	d050      	beq.n	80054fc <HAL_TIM_ConfigClockSource+0x11a>
 800545a:	2b60      	cmp	r3, #96	@ 0x60
 800545c:	d877      	bhi.n	800554e <HAL_TIM_ConfigClockSource+0x16c>
 800545e:	2b50      	cmp	r3, #80	@ 0x50
 8005460:	d03c      	beq.n	80054dc <HAL_TIM_ConfigClockSource+0xfa>
 8005462:	2b50      	cmp	r3, #80	@ 0x50
 8005464:	d873      	bhi.n	800554e <HAL_TIM_ConfigClockSource+0x16c>
 8005466:	2b40      	cmp	r3, #64	@ 0x40
 8005468:	d058      	beq.n	800551c <HAL_TIM_ConfigClockSource+0x13a>
 800546a:	2b40      	cmp	r3, #64	@ 0x40
 800546c:	d86f      	bhi.n	800554e <HAL_TIM_ConfigClockSource+0x16c>
 800546e:	2b30      	cmp	r3, #48	@ 0x30
 8005470:	d064      	beq.n	800553c <HAL_TIM_ConfigClockSource+0x15a>
 8005472:	2b30      	cmp	r3, #48	@ 0x30
 8005474:	d86b      	bhi.n	800554e <HAL_TIM_ConfigClockSource+0x16c>
 8005476:	2b20      	cmp	r3, #32
 8005478:	d060      	beq.n	800553c <HAL_TIM_ConfigClockSource+0x15a>
 800547a:	2b20      	cmp	r3, #32
 800547c:	d867      	bhi.n	800554e <HAL_TIM_ConfigClockSource+0x16c>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d05c      	beq.n	800553c <HAL_TIM_ConfigClockSource+0x15a>
 8005482:	2b10      	cmp	r3, #16
 8005484:	d05a      	beq.n	800553c <HAL_TIM_ConfigClockSource+0x15a>
 8005486:	e062      	b.n	800554e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005498:	f000 f9b8 	bl	800580c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054aa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	609a      	str	r2, [r3, #8]
      break;
 80054b4:	e04f      	b.n	8005556 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054c6:	f000 f9a1 	bl	800580c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054d8:	609a      	str	r2, [r3, #8]
      break;
 80054da:	e03c      	b.n	8005556 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054e8:	461a      	mov	r2, r3
 80054ea:	f000 f915 	bl	8005718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2150      	movs	r1, #80	@ 0x50
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 f96e 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 80054fa:	e02c      	b.n	8005556 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005508:	461a      	mov	r2, r3
 800550a:	f000 f934 	bl	8005776 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2160      	movs	r1, #96	@ 0x60
 8005514:	4618      	mov	r0, r3
 8005516:	f000 f95e 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 800551a:	e01c      	b.n	8005556 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005528:	461a      	mov	r2, r3
 800552a:	f000 f8f5 	bl	8005718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2140      	movs	r1, #64	@ 0x40
 8005534:	4618      	mov	r0, r3
 8005536:	f000 f94e 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 800553a:	e00c      	b.n	8005556 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4619      	mov	r1, r3
 8005546:	4610      	mov	r0, r2
 8005548:	f000 f945 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 800554c:	e003      	b.n	8005556 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	73fb      	strb	r3, [r7, #15]
      break;
 8005552:	e000      	b.n	8005556 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005554:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005566:	7bfb      	ldrb	r3, [r7, #15]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a46      	ldr	r2, [pc, #280]	@ (80056ec <TIM_Base_SetConfig+0x12c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d013      	beq.n	8005600 <TIM_Base_SetConfig+0x40>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055de:	d00f      	beq.n	8005600 <TIM_Base_SetConfig+0x40>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a43      	ldr	r2, [pc, #268]	@ (80056f0 <TIM_Base_SetConfig+0x130>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00b      	beq.n	8005600 <TIM_Base_SetConfig+0x40>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a42      	ldr	r2, [pc, #264]	@ (80056f4 <TIM_Base_SetConfig+0x134>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d007      	beq.n	8005600 <TIM_Base_SetConfig+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a41      	ldr	r2, [pc, #260]	@ (80056f8 <TIM_Base_SetConfig+0x138>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d003      	beq.n	8005600 <TIM_Base_SetConfig+0x40>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a40      	ldr	r2, [pc, #256]	@ (80056fc <TIM_Base_SetConfig+0x13c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d108      	bne.n	8005612 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a35      	ldr	r2, [pc, #212]	@ (80056ec <TIM_Base_SetConfig+0x12c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d02b      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005620:	d027      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a32      	ldr	r2, [pc, #200]	@ (80056f0 <TIM_Base_SetConfig+0x130>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d023      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a31      	ldr	r2, [pc, #196]	@ (80056f4 <TIM_Base_SetConfig+0x134>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d01f      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a30      	ldr	r2, [pc, #192]	@ (80056f8 <TIM_Base_SetConfig+0x138>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d01b      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a2f      	ldr	r2, [pc, #188]	@ (80056fc <TIM_Base_SetConfig+0x13c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d017      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a2e      	ldr	r2, [pc, #184]	@ (8005700 <TIM_Base_SetConfig+0x140>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a2d      	ldr	r2, [pc, #180]	@ (8005704 <TIM_Base_SetConfig+0x144>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00f      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a2c      	ldr	r2, [pc, #176]	@ (8005708 <TIM_Base_SetConfig+0x148>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00b      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a2b      	ldr	r2, [pc, #172]	@ (800570c <TIM_Base_SetConfig+0x14c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d007      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a2a      	ldr	r2, [pc, #168]	@ (8005710 <TIM_Base_SetConfig+0x150>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d003      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a29      	ldr	r2, [pc, #164]	@ (8005714 <TIM_Base_SetConfig+0x154>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d108      	bne.n	8005684 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	4313      	orrs	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a10      	ldr	r2, [pc, #64]	@ (80056ec <TIM_Base_SetConfig+0x12c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d003      	beq.n	80056b8 <TIM_Base_SetConfig+0xf8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a12      	ldr	r2, [pc, #72]	@ (80056fc <TIM_Base_SetConfig+0x13c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d103      	bne.n	80056c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	691a      	ldr	r2, [r3, #16]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d105      	bne.n	80056de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f023 0201 	bic.w	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	611a      	str	r2, [r3, #16]
  }
}
 80056de:	bf00      	nop
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	40010000 	.word	0x40010000
 80056f0:	40000400 	.word	0x40000400
 80056f4:	40000800 	.word	0x40000800
 80056f8:	40000c00 	.word	0x40000c00
 80056fc:	40010400 	.word	0x40010400
 8005700:	40014000 	.word	0x40014000
 8005704:	40014400 	.word	0x40014400
 8005708:	40014800 	.word	0x40014800
 800570c:	40001800 	.word	0x40001800
 8005710:	40001c00 	.word	0x40001c00
 8005714:	40002000 	.word	0x40002000

08005718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f023 0201 	bic.w	r2, r3, #1
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	011b      	lsls	r3, r3, #4
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f023 030a 	bic.w	r3, r3, #10
 8005754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4313      	orrs	r3, r2
 800575c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	621a      	str	r2, [r3, #32]
}
 800576a:	bf00      	nop
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005776:	b480      	push	{r7}
 8005778:	b087      	sub	sp, #28
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	f023 0210 	bic.w	r2, r3, #16
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	031b      	lsls	r3, r3, #12
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	621a      	str	r2, [r3, #32]
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b085      	sub	sp, #20
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f043 0307 	orr.w	r3, r3, #7
 80057f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	609a      	str	r2, [r3, #8]
}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	021a      	lsls	r2, r3, #8
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	431a      	orrs	r2, r3
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4313      	orrs	r3, r2
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	609a      	str	r2, [r3, #8]
}
 8005840:	bf00      	nop
 8005842:	371c      	adds	r7, #28
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005860:	2302      	movs	r3, #2
 8005862:	e05a      	b.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800588a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a21      	ldr	r2, [pc, #132]	@ (8005928 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d022      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058b0:	d01d      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1d      	ldr	r2, [pc, #116]	@ (800592c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d018      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d013      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00e      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a18      	ldr	r2, [pc, #96]	@ (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d009      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a17      	ldr	r2, [pc, #92]	@ (800593c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a15      	ldr	r2, [pc, #84]	@ (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d10c      	bne.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40010000 	.word	0x40010000
 800592c:	40000400 	.word	0x40000400
 8005930:	40000800 	.word	0x40000800
 8005934:	40000c00 	.word	0x40000c00
 8005938:	40010400 	.word	0x40010400
 800593c:	40014000 	.word	0x40014000
 8005940:	40001800 	.word	0x40001800

08005944 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800596c:	b084      	sub	sp, #16
 800596e:	b480      	push	{r7}
 8005970:	b085      	sub	sp, #20
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	f107 001c 	add.w	r0, r7, #28
 800597a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005982:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005984:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005986:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800598a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800598c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800598e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8005992:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005996:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80059a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	b004      	add	sp, #16
 80059c0:	4770      	bx	lr

080059c2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2203      	movs	r2, #3
 80059e8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0303 	and.w	r3, r3, #3
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005a32:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005a38:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005a3e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005a4e:	f023 030f 	bic.w	r3, r3, #15
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	431a      	orrs	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	b2db      	uxtb	r3, r3
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b085      	sub	sp, #20
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3314      	adds	r3, #20
 8005a90:	461a      	mov	r2, r3
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	4413      	add	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
}  
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ace:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005ad4:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005ada:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae6:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	431a      	orrs	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0

}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005b0e:	2310      	movs	r3, #16
 8005b10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b12:	2340      	movs	r3, #64	@ 0x40
 8005b14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b16:	2300      	movs	r3, #0
 8005b18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b20:	f107 0308 	add.w	r3, r7, #8
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff ff74 	bl	8005a14 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b30:	2110      	movs	r1, #16
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f94c 	bl	8005dd0 <SDMMC_GetCmdResp1>
 8005b38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b3a:	69fb      	ldr	r3, [r7, #28]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08a      	sub	sp, #40	@ 0x28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005b54:	2307      	movs	r3, #7
 8005b56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b58:	2340      	movs	r3, #64	@ 0x40
 8005b5a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b64:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b66:	f107 0310 	add.w	r3, r7, #16
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f7ff ff51 	bl	8005a14 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b76:	2107      	movs	r1, #7
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 f929 	bl	8005dd0 <SDMMC_GetCmdResp1>
 8005b7e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3728      	adds	r7, #40	@ 0x28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b088      	sub	sp, #32
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ba6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ba8:	f107 0308 	add.w	r3, r7, #8
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff ff30 	bl	8005a14 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fb43 	bl	8006240 <SDMMC_GetCmdError>
 8005bba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b088      	sub	sp, #32
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005bce:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005bd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005bd4:	2308      	movs	r3, #8
 8005bd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005bd8:	2340      	movs	r3, #64	@ 0x40
 8005bda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005be0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005be4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005be6:	f107 0308 	add.w	r3, r7, #8
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7ff ff11 	bl	8005a14 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fad6 	bl	80061a4 <SDMMC_GetCmdResp7>
 8005bf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bfa:	69fb      	ldr	r3, [r7, #28]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3720      	adds	r7, #32
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b088      	sub	sp, #32
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005c12:	2337      	movs	r3, #55	@ 0x37
 8005c14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c16:	2340      	movs	r3, #64	@ 0x40
 8005c18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c24:	f107 0308 	add.w	r3, r7, #8
 8005c28:	4619      	mov	r1, r3
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7ff fef2 	bl	8005a14 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c34:	2137      	movs	r1, #55	@ 0x37
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f8ca 	bl	8005dd0 <SDMMC_GetCmdResp1>
 8005c3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c3e:	69fb      	ldr	r3, [r7, #28]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3720      	adds	r7, #32
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005c5e:	2329      	movs	r3, #41	@ 0x29
 8005c60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c62:	2340      	movs	r3, #64	@ 0x40
 8005c64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c66:	2300      	movs	r3, #0
 8005c68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c70:	f107 0308 	add.w	r3, r7, #8
 8005c74:	4619      	mov	r1, r3
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7ff fecc 	bl	8005a14 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f9dd 	bl	800603c <SDMMC_GetCmdResp3>
 8005c82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c84:	69fb      	ldr	r3, [r7, #28]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3720      	adds	r7, #32
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b088      	sub	sp, #32
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005c9c:	2306      	movs	r3, #6
 8005c9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ca0:	2340      	movs	r3, #64	@ 0x40
 8005ca2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ca8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cae:	f107 0308 	add.w	r3, r7, #8
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff fead 	bl	8005a14 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cbe:	2106      	movs	r1, #6
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f885 	bl	8005dd0 <SDMMC_GetCmdResp1>
 8005cc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cc8:	69fb      	ldr	r3, [r7, #28]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3720      	adds	r7, #32
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b088      	sub	sp, #32
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005cde:	2333      	movs	r3, #51	@ 0x33
 8005ce0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ce2:	2340      	movs	r3, #64	@ 0x40
 8005ce4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005cea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cf0:	f107 0308 	add.w	r3, r7, #8
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7ff fe8c 	bl	8005a14 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d00:	2133      	movs	r1, #51	@ 0x33
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f864 	bl	8005dd0 <SDMMC_GetCmdResp1>
 8005d08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d0a:	69fb      	ldr	r3, [r7, #28]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3720      	adds	r7, #32
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005d20:	2302      	movs	r3, #2
 8005d22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005d24:	23c0      	movs	r3, #192	@ 0xc0
 8005d26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d32:	f107 0308 	add.w	r3, r7, #8
 8005d36:	4619      	mov	r1, r3
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff fe6b 	bl	8005a14 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f934 	bl	8005fac <SDMMC_GetCmdResp2>
 8005d44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d46:	69fb      	ldr	r3, [r7, #28]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3720      	adds	r7, #32
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005d5e:	2309      	movs	r3, #9
 8005d60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005d62:	23c0      	movs	r3, #192	@ 0xc0
 8005d64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d70:	f107 0308 	add.w	r3, r7, #8
 8005d74:	4619      	mov	r1, r3
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff fe4c 	bl	8005a14 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f915 	bl	8005fac <SDMMC_GetCmdResp2>
 8005d82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d84:	69fb      	ldr	r3, [r7, #28]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3720      	adds	r7, #32
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b088      	sub	sp, #32
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005da0:	2340      	movs	r3, #64	@ 0x40
 8005da2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005da4:	2300      	movs	r3, #0
 8005da6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005da8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005dac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005dae:	f107 0308 	add.w	r3, r7, #8
 8005db2:	4619      	mov	r1, r3
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff fe2d 	bl	8005a14 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	2103      	movs	r1, #3
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f97a 	bl	80060b8 <SDMMC_GetCmdResp6>
 8005dc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005dc6:	69fb      	ldr	r3, [r7, #28]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3720      	adds	r7, #32
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005dde:	4b70      	ldr	r3, [pc, #448]	@ (8005fa0 <SDMMC_GetCmdResp1+0x1d0>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a70      	ldr	r2, [pc, #448]	@ (8005fa4 <SDMMC_GetCmdResp1+0x1d4>)
 8005de4:	fba2 2303 	umull	r2, r3, r2, r3
 8005de8:	0a5a      	lsrs	r2, r3, #9
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	fb02 f303 	mul.w	r3, r2, r3
 8005df0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	1e5a      	subs	r2, r3, #1
 8005df6:	61fa      	str	r2, [r7, #28]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d102      	bne.n	8005e02 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005dfc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005e00:	e0c9      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e06:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0ef      	beq.n	8005df2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1ea      	bne.n	8005df2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2204      	movs	r2, #4
 8005e2c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e2e:	2304      	movs	r3, #4
 8005e30:	e0b1      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d004      	beq.n	8005e48 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2201      	movs	r2, #1
 8005e42:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e0a6      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	22c5      	movs	r2, #197	@ 0xc5
 8005e4c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f7ff fe0a 	bl	8005a68 <SDIO_GetCommandResponse>
 8005e54:	4603      	mov	r3, r0
 8005e56:	461a      	mov	r2, r3
 8005e58:	7afb      	ldrb	r3, [r7, #11]
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d001      	beq.n	8005e62 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e099      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005e62:	2100      	movs	r1, #0
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f7ff fe0c 	bl	8005a82 <SDIO_GetResponse>
 8005e6a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4b4e      	ldr	r3, [pc, #312]	@ (8005fa8 <SDMMC_GetCmdResp1+0x1d8>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005e76:	2300      	movs	r3, #0
 8005e78:	e08d      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	da02      	bge.n	8005e86 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005e80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e84:	e087      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005e90:	2340      	movs	r3, #64	@ 0x40
 8005e92:	e080      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005e9e:	2380      	movs	r3, #128	@ 0x80
 8005ea0:	e079      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005eac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005eb0:	e071      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005ebc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ec0:	e069      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005ecc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ed0:	e061      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005edc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005ee0:	e059      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005eec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ef0:	e051      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005efc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005f00:	e049      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005f0c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005f10:	e041      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005f1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f20:	e039      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d002      	beq.n	8005f32 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005f2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f30:	e031      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005f3c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005f40:	e029      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005f4c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005f50:	e021      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005f5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005f60:	e019      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005f6c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005f70:	e011      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005f7c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005f80:	e009      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005f8c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005f90:	e001      	b.n	8005f96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005f92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3720      	adds	r7, #32
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20000000 	.word	0x20000000
 8005fa4:	10624dd3 	.word	0x10624dd3
 8005fa8:	fdffe008 	.word	0xfdffe008

08005fac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8006034 <SDMMC_GetCmdResp2+0x88>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8006038 <SDMMC_GetCmdResp2+0x8c>)
 8005fba:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbe:	0a5b      	lsrs	r3, r3, #9
 8005fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fc4:	fb02 f303 	mul.w	r3, r2, r3
 8005fc8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	1e5a      	subs	r2, r3, #1
 8005fce:	60fa      	str	r2, [r7, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d102      	bne.n	8005fda <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005fd4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005fd8:	e026      	b.n	8006028 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fde:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0ef      	beq.n	8005fca <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1ea      	bne.n	8005fca <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2204      	movs	r2, #4
 8006004:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006006:	2304      	movs	r3, #4
 8006008:	e00e      	b.n	8006028 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d004      	beq.n	8006020 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800601c:	2301      	movs	r3, #1
 800601e:	e003      	b.n	8006028 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	22c5      	movs	r2, #197	@ 0xc5
 8006024:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	20000000 	.word	0x20000000
 8006038:	10624dd3 	.word	0x10624dd3

0800603c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006044:	4b1a      	ldr	r3, [pc, #104]	@ (80060b0 <SDMMC_GetCmdResp3+0x74>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a1a      	ldr	r2, [pc, #104]	@ (80060b4 <SDMMC_GetCmdResp3+0x78>)
 800604a:	fba2 2303 	umull	r2, r3, r2, r3
 800604e:	0a5b      	lsrs	r3, r3, #9
 8006050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006054:	fb02 f303 	mul.w	r3, r2, r3
 8006058:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	1e5a      	subs	r2, r3, #1
 800605e:	60fa      	str	r2, [r7, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d102      	bne.n	800606a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006064:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006068:	e01b      	b.n	80060a2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800606e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0ef      	beq.n	800605a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1ea      	bne.n	800605a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006088:	f003 0304 	and.w	r3, r3, #4
 800608c:	2b00      	cmp	r3, #0
 800608e:	d004      	beq.n	800609a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2204      	movs	r2, #4
 8006094:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006096:	2304      	movs	r3, #4
 8006098:	e003      	b.n	80060a2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	22c5      	movs	r2, #197	@ 0xc5
 800609e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	20000000 	.word	0x20000000
 80060b4:	10624dd3 	.word	0x10624dd3

080060b8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	460b      	mov	r3, r1
 80060c2:	607a      	str	r2, [r7, #4]
 80060c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80060c6:	4b35      	ldr	r3, [pc, #212]	@ (800619c <SDMMC_GetCmdResp6+0xe4>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a35      	ldr	r2, [pc, #212]	@ (80061a0 <SDMMC_GetCmdResp6+0xe8>)
 80060cc:	fba2 2303 	umull	r2, r3, r2, r3
 80060d0:	0a5b      	lsrs	r3, r3, #9
 80060d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060d6:	fb02 f303 	mul.w	r3, r2, r3
 80060da:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	1e5a      	subs	r2, r3, #1
 80060e0:	61fa      	str	r2, [r7, #28]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d102      	bne.n	80060ec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80060e6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80060ea:	e052      	b.n	8006192 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060f0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0ef      	beq.n	80060dc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1ea      	bne.n	80060dc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800610a:	f003 0304 	and.w	r3, r3, #4
 800610e:	2b00      	cmp	r3, #0
 8006110:	d004      	beq.n	800611c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2204      	movs	r2, #4
 8006116:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006118:	2304      	movs	r3, #4
 800611a:	e03a      	b.n	8006192 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d004      	beq.n	8006132 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2201      	movs	r2, #1
 800612c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800612e:	2301      	movs	r3, #1
 8006130:	e02f      	b.n	8006192 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7ff fc98 	bl	8005a68 <SDIO_GetCommandResponse>
 8006138:	4603      	mov	r3, r0
 800613a:	461a      	mov	r2, r3
 800613c:	7afb      	ldrb	r3, [r7, #11]
 800613e:	4293      	cmp	r3, r2
 8006140:	d001      	beq.n	8006146 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006142:	2301      	movs	r3, #1
 8006144:	e025      	b.n	8006192 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	22c5      	movs	r2, #197	@ 0xc5
 800614a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800614c:	2100      	movs	r1, #0
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f7ff fc97 	bl	8005a82 <SDIO_GetResponse>
 8006154:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d106      	bne.n	800616e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	0c1b      	lsrs	r3, r3, #16
 8006164:	b29a      	uxth	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800616a:	2300      	movs	r3, #0
 800616c:	e011      	b.n	8006192 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006178:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800617c:	e009      	b.n	8006192 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006188:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800618c:	e001      	b.n	8006192 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800618e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006192:	4618      	mov	r0, r3
 8006194:	3720      	adds	r7, #32
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	20000000 	.word	0x20000000
 80061a0:	10624dd3 	.word	0x10624dd3

080061a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80061ac:	4b22      	ldr	r3, [pc, #136]	@ (8006238 <SDMMC_GetCmdResp7+0x94>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a22      	ldr	r2, [pc, #136]	@ (800623c <SDMMC_GetCmdResp7+0x98>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	0a5b      	lsrs	r3, r3, #9
 80061b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061bc:	fb02 f303 	mul.w	r3, r2, r3
 80061c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	1e5a      	subs	r2, r3, #1
 80061c6:	60fa      	str	r2, [r7, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d102      	bne.n	80061d2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80061cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80061d0:	e02c      	b.n	800622c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0ef      	beq.n	80061c2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1ea      	bne.n	80061c2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d004      	beq.n	8006202 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2204      	movs	r2, #4
 80061fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80061fe:	2304      	movs	r3, #4
 8006200:	e014      	b.n	800622c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d004      	beq.n	8006218 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006214:	2301      	movs	r3, #1
 8006216:	e009      	b.n	800622c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800621c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2240      	movs	r2, #64	@ 0x40
 8006228:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800622a:	2300      	movs	r3, #0
  
}
 800622c:	4618      	mov	r0, r3
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	20000000 	.word	0x20000000
 800623c:	10624dd3 	.word	0x10624dd3

08006240 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006248:	4b11      	ldr	r3, [pc, #68]	@ (8006290 <SDMMC_GetCmdError+0x50>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a11      	ldr	r2, [pc, #68]	@ (8006294 <SDMMC_GetCmdError+0x54>)
 800624e:	fba2 2303 	umull	r2, r3, r2, r3
 8006252:	0a5b      	lsrs	r3, r3, #9
 8006254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006258:	fb02 f303 	mul.w	r3, r2, r3
 800625c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	1e5a      	subs	r2, r3, #1
 8006262:	60fa      	str	r2, [r7, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d102      	bne.n	800626e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006268:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800626c:	e009      	b.n	8006282 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006276:	2b00      	cmp	r3, #0
 8006278:	d0f1      	beq.n	800625e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	22c5      	movs	r2, #197	@ 0xc5
 800627e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	20000000 	.word	0x20000000
 8006294:	10624dd3 	.word	0x10624dd3

08006298 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006298:	b084      	sub	sp, #16
 800629a:	b580      	push	{r7, lr}
 800629c:	b084      	sub	sp, #16
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	f107 001c 	add.w	r0, r7, #28
 80062a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d123      	bne.n	80062fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80062c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80062da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d105      	bne.n	80062ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f901 	bl	80064f6 <USB_CoreReset>
 80062f4:	4603      	mov	r3, r0
 80062f6:	73fb      	strb	r3, [r7, #15]
 80062f8:	e01b      	b.n	8006332 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f8f5 	bl	80064f6 <USB_CoreReset>
 800630c:	4603      	mov	r3, r0
 800630e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006310:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006314:	2b00      	cmp	r3, #0
 8006316:	d106      	bne.n	8006326 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	639a      	str	r2, [r3, #56]	@ 0x38
 8006324:	e005      	b.n	8006332 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006332:	7fbb      	ldrb	r3, [r7, #30]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d10b      	bne.n	8006350 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f043 0206 	orr.w	r2, r3, #6
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f043 0220 	orr.w	r2, r3, #32
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006350:	7bfb      	ldrb	r3, [r7, #15]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800635c:	b004      	add	sp, #16
 800635e:	4770      	bx	lr

08006360 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f023 0201 	bic.w	r2, r3, #1
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b084      	sub	sp, #16
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	460b      	mov	r3, r1
 800638c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d115      	bne.n	80063d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80063b0:	200a      	movs	r0, #10
 80063b2:	f7fb fb7f 	bl	8001ab4 <HAL_Delay>
      ms += 10U;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	330a      	adds	r3, #10
 80063ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f88c 	bl	80064da <USB_GetMode>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d01e      	beq.n	8006406 <USB_SetCurrentMode+0x84>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80063cc:	d9f0      	bls.n	80063b0 <USB_SetCurrentMode+0x2e>
 80063ce:	e01a      	b.n	8006406 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d115      	bne.n	8006402 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80063e2:	200a      	movs	r0, #10
 80063e4:	f7fb fb66 	bl	8001ab4 <HAL_Delay>
      ms += 10U;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	330a      	adds	r3, #10
 80063ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f873 	bl	80064da <USB_GetMode>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d005      	beq.n	8006406 <USB_SetCurrentMode+0x84>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80063fe:	d9f0      	bls.n	80063e2 <USB_SetCurrentMode+0x60>
 8006400:	e001      	b.n	8006406 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e005      	b.n	8006412 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2bc8      	cmp	r3, #200	@ 0xc8
 800640a:	d101      	bne.n	8006410 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e000      	b.n	8006412 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800641a:	b480      	push	{r7}
 800641c:	b085      	sub	sp, #20
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
 8006422:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	3301      	adds	r3, #1
 800642c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006434:	d901      	bls.n	800643a <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e01b      	b.n	8006472 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	daf2      	bge.n	8006428 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	019b      	lsls	r3, r3, #6
 800644a:	f043 0220 	orr.w	r2, r3, #32
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3301      	adds	r3, #1
 8006456:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800645e:	d901      	bls.n	8006464 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e006      	b.n	8006472 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b20      	cmp	r3, #32
 800646e:	d0f0      	beq.n	8006452 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800647e:	b480      	push	{r7}
 8006480:	b085      	sub	sp, #20
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3301      	adds	r3, #1
 800648e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006496:	d901      	bls.n	800649c <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e018      	b.n	80064ce <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	daf2      	bge.n	800648a <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2210      	movs	r2, #16
 80064ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	3301      	adds	r3, #1
 80064b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064ba:	d901      	bls.n	80064c0 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e006      	b.n	80064ce <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	f003 0310 	and.w	r3, r3, #16
 80064c8:	2b10      	cmp	r3, #16
 80064ca:	d0f0      	beq.n	80064ae <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	f003 0301 	and.w	r3, r3, #1
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b085      	sub	sp, #20
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3301      	adds	r3, #1
 8006506:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800650e:	d901      	bls.n	8006514 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e01b      	b.n	800654c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	daf2      	bge.n	8006502 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	f043 0201 	orr.w	r2, r3, #1
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3301      	adds	r3, #1
 8006530:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006538:	d901      	bls.n	800653e <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e006      	b.n	800654c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b01      	cmp	r3, #1
 8006548:	d0f0      	beq.n	800652c <USB_CoreReset+0x36>

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006558:	b084      	sub	sp, #16
 800655a:	b580      	push	{r7, lr}
 800655c:	b086      	sub	sp, #24
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006566:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006578:	461a      	mov	r2, r3
 800657a:	2300      	movs	r3, #0
 800657c:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006582:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	639a      	str	r2, [r3, #56]	@ 0x38
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) \
 || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d119      	bne.n	80065d6 <USB_HostInit+0x7e>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80065a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d10a      	bne.n	80065c0 <USB_HostInit+0x68>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80065b8:	f043 0304 	orr.w	r3, r3, #4
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	e014      	b.n	80065ea <USB_HostInit+0x92>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80065ce:	f023 0304 	bic.w	r3, r3, #4
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	e009      	b.n	80065ea <USB_HostInit+0x92>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80065e4:	f023 0304 	bic.w	r3, r3, #4
 80065e8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065ea:	2110      	movs	r1, #16
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff ff14 	bl	800641a <USB_FlushTxFifo>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <USB_HostInit+0xa4>
  {
    ret = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7ff ff3e 	bl	800647e <USB_FlushRxFifo>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <USB_HostInit+0xb4>
  {
    ret = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800660c:	2300      	movs	r3, #0
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	e015      	b.n	800663e <USB_HostInit+0xe6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	015a      	lsls	r2, r3, #5
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4413      	add	r3, r2
 800661a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800661e:	461a      	mov	r2, r3
 8006620:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006624:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4413      	add	r3, r2
 800662e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006632:	461a      	mov	r2, r3
 8006634:	2300      	movs	r3, #0
 8006636:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	3301      	adds	r3, #1
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006642:	461a      	mov	r2, r3
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	4293      	cmp	r3, r2
 8006648:	d3e3      	bcc.n	8006612 <USB_HostInit+0xba>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006656:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2280      	movs	r2, #128	@ 0x80
 800665c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a0e      	ldr	r2, [pc, #56]	@ (800669c <USB_HostInit+0x144>)
 8006662:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a0e      	ldr	r2, [pc, #56]	@ (80066a0 <USB_HostInit+0x148>)
 8006668:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800666c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006670:	2b00      	cmp	r3, #0
 8006672:	d105      	bne.n	8006680 <USB_HostInit+0x128>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	f043 0210 	orr.w	r2, r3, #16
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699a      	ldr	r2, [r3, #24]
 8006684:	4b07      	ldr	r3, [pc, #28]	@ (80066a4 <USB_HostInit+0x14c>)
 8006686:	4313      	orrs	r3, r2
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800668c:	7dfb      	ldrb	r3, [r7, #23]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006698:	b004      	add	sp, #16
 800669a:	4770      	bx	lr
 800669c:	00600080 	.word	0x00600080
 80066a0:	004000e0 	.word	0x004000e0
 80066a4:	a3200008 	.word	0xa3200008

080066a8 <std>:
 80066a8:	2300      	movs	r3, #0
 80066aa:	b510      	push	{r4, lr}
 80066ac:	4604      	mov	r4, r0
 80066ae:	e9c0 3300 	strd	r3, r3, [r0]
 80066b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066b6:	6083      	str	r3, [r0, #8]
 80066b8:	8181      	strh	r1, [r0, #12]
 80066ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80066bc:	81c2      	strh	r2, [r0, #14]
 80066be:	6183      	str	r3, [r0, #24]
 80066c0:	4619      	mov	r1, r3
 80066c2:	2208      	movs	r2, #8
 80066c4:	305c      	adds	r0, #92	@ 0x5c
 80066c6:	f000 f9a3 	bl	8006a10 <memset>
 80066ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006700 <std+0x58>)
 80066cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80066ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006704 <std+0x5c>)
 80066d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80066d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006708 <std+0x60>)
 80066d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80066d6:	4b0d      	ldr	r3, [pc, #52]	@ (800670c <std+0x64>)
 80066d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80066da:	4b0d      	ldr	r3, [pc, #52]	@ (8006710 <std+0x68>)
 80066dc:	6224      	str	r4, [r4, #32]
 80066de:	429c      	cmp	r4, r3
 80066e0:	d006      	beq.n	80066f0 <std+0x48>
 80066e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80066e6:	4294      	cmp	r4, r2
 80066e8:	d002      	beq.n	80066f0 <std+0x48>
 80066ea:	33d0      	adds	r3, #208	@ 0xd0
 80066ec:	429c      	cmp	r4, r3
 80066ee:	d105      	bne.n	80066fc <std+0x54>
 80066f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80066f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066f8:	f000 ba02 	b.w	8006b00 <__retarget_lock_init_recursive>
 80066fc:	bd10      	pop	{r4, pc}
 80066fe:	bf00      	nop
 8006700:	08006861 	.word	0x08006861
 8006704:	08006883 	.word	0x08006883
 8006708:	080068bb 	.word	0x080068bb
 800670c:	080068df 	.word	0x080068df
 8006710:	20000790 	.word	0x20000790

08006714 <stdio_exit_handler>:
 8006714:	4a02      	ldr	r2, [pc, #8]	@ (8006720 <stdio_exit_handler+0xc>)
 8006716:	4903      	ldr	r1, [pc, #12]	@ (8006724 <stdio_exit_handler+0x10>)
 8006718:	4803      	ldr	r0, [pc, #12]	@ (8006728 <stdio_exit_handler+0x14>)
 800671a:	f000 b869 	b.w	80067f0 <_fwalk_sglue>
 800671e:	bf00      	nop
 8006720:	2000000c 	.word	0x2000000c
 8006724:	080073a1 	.word	0x080073a1
 8006728:	2000001c 	.word	0x2000001c

0800672c <cleanup_stdio>:
 800672c:	6841      	ldr	r1, [r0, #4]
 800672e:	4b0c      	ldr	r3, [pc, #48]	@ (8006760 <cleanup_stdio+0x34>)
 8006730:	4299      	cmp	r1, r3
 8006732:	b510      	push	{r4, lr}
 8006734:	4604      	mov	r4, r0
 8006736:	d001      	beq.n	800673c <cleanup_stdio+0x10>
 8006738:	f000 fe32 	bl	80073a0 <_fflush_r>
 800673c:	68a1      	ldr	r1, [r4, #8]
 800673e:	4b09      	ldr	r3, [pc, #36]	@ (8006764 <cleanup_stdio+0x38>)
 8006740:	4299      	cmp	r1, r3
 8006742:	d002      	beq.n	800674a <cleanup_stdio+0x1e>
 8006744:	4620      	mov	r0, r4
 8006746:	f000 fe2b 	bl	80073a0 <_fflush_r>
 800674a:	68e1      	ldr	r1, [r4, #12]
 800674c:	4b06      	ldr	r3, [pc, #24]	@ (8006768 <cleanup_stdio+0x3c>)
 800674e:	4299      	cmp	r1, r3
 8006750:	d004      	beq.n	800675c <cleanup_stdio+0x30>
 8006752:	4620      	mov	r0, r4
 8006754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006758:	f000 be22 	b.w	80073a0 <_fflush_r>
 800675c:	bd10      	pop	{r4, pc}
 800675e:	bf00      	nop
 8006760:	20000790 	.word	0x20000790
 8006764:	200007f8 	.word	0x200007f8
 8006768:	20000860 	.word	0x20000860

0800676c <global_stdio_init.part.0>:
 800676c:	b510      	push	{r4, lr}
 800676e:	4b0b      	ldr	r3, [pc, #44]	@ (800679c <global_stdio_init.part.0+0x30>)
 8006770:	4c0b      	ldr	r4, [pc, #44]	@ (80067a0 <global_stdio_init.part.0+0x34>)
 8006772:	4a0c      	ldr	r2, [pc, #48]	@ (80067a4 <global_stdio_init.part.0+0x38>)
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	4620      	mov	r0, r4
 8006778:	2200      	movs	r2, #0
 800677a:	2104      	movs	r1, #4
 800677c:	f7ff ff94 	bl	80066a8 <std>
 8006780:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006784:	2201      	movs	r2, #1
 8006786:	2109      	movs	r1, #9
 8006788:	f7ff ff8e 	bl	80066a8 <std>
 800678c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006790:	2202      	movs	r2, #2
 8006792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006796:	2112      	movs	r1, #18
 8006798:	f7ff bf86 	b.w	80066a8 <std>
 800679c:	200008c8 	.word	0x200008c8
 80067a0:	20000790 	.word	0x20000790
 80067a4:	08006715 	.word	0x08006715

080067a8 <__sfp_lock_acquire>:
 80067a8:	4801      	ldr	r0, [pc, #4]	@ (80067b0 <__sfp_lock_acquire+0x8>)
 80067aa:	f000 b9aa 	b.w	8006b02 <__retarget_lock_acquire_recursive>
 80067ae:	bf00      	nop
 80067b0:	200008d1 	.word	0x200008d1

080067b4 <__sfp_lock_release>:
 80067b4:	4801      	ldr	r0, [pc, #4]	@ (80067bc <__sfp_lock_release+0x8>)
 80067b6:	f000 b9a5 	b.w	8006b04 <__retarget_lock_release_recursive>
 80067ba:	bf00      	nop
 80067bc:	200008d1 	.word	0x200008d1

080067c0 <__sinit>:
 80067c0:	b510      	push	{r4, lr}
 80067c2:	4604      	mov	r4, r0
 80067c4:	f7ff fff0 	bl	80067a8 <__sfp_lock_acquire>
 80067c8:	6a23      	ldr	r3, [r4, #32]
 80067ca:	b11b      	cbz	r3, 80067d4 <__sinit+0x14>
 80067cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d0:	f7ff bff0 	b.w	80067b4 <__sfp_lock_release>
 80067d4:	4b04      	ldr	r3, [pc, #16]	@ (80067e8 <__sinit+0x28>)
 80067d6:	6223      	str	r3, [r4, #32]
 80067d8:	4b04      	ldr	r3, [pc, #16]	@ (80067ec <__sinit+0x2c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1f5      	bne.n	80067cc <__sinit+0xc>
 80067e0:	f7ff ffc4 	bl	800676c <global_stdio_init.part.0>
 80067e4:	e7f2      	b.n	80067cc <__sinit+0xc>
 80067e6:	bf00      	nop
 80067e8:	0800672d 	.word	0x0800672d
 80067ec:	200008c8 	.word	0x200008c8

080067f0 <_fwalk_sglue>:
 80067f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067f4:	4607      	mov	r7, r0
 80067f6:	4688      	mov	r8, r1
 80067f8:	4614      	mov	r4, r2
 80067fa:	2600      	movs	r6, #0
 80067fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006800:	f1b9 0901 	subs.w	r9, r9, #1
 8006804:	d505      	bpl.n	8006812 <_fwalk_sglue+0x22>
 8006806:	6824      	ldr	r4, [r4, #0]
 8006808:	2c00      	cmp	r4, #0
 800680a:	d1f7      	bne.n	80067fc <_fwalk_sglue+0xc>
 800680c:	4630      	mov	r0, r6
 800680e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006812:	89ab      	ldrh	r3, [r5, #12]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d907      	bls.n	8006828 <_fwalk_sglue+0x38>
 8006818:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800681c:	3301      	adds	r3, #1
 800681e:	d003      	beq.n	8006828 <_fwalk_sglue+0x38>
 8006820:	4629      	mov	r1, r5
 8006822:	4638      	mov	r0, r7
 8006824:	47c0      	blx	r8
 8006826:	4306      	orrs	r6, r0
 8006828:	3568      	adds	r5, #104	@ 0x68
 800682a:	e7e9      	b.n	8006800 <_fwalk_sglue+0x10>

0800682c <iprintf>:
 800682c:	b40f      	push	{r0, r1, r2, r3}
 800682e:	b507      	push	{r0, r1, r2, lr}
 8006830:	4906      	ldr	r1, [pc, #24]	@ (800684c <iprintf+0x20>)
 8006832:	ab04      	add	r3, sp, #16
 8006834:	6808      	ldr	r0, [r1, #0]
 8006836:	f853 2b04 	ldr.w	r2, [r3], #4
 800683a:	6881      	ldr	r1, [r0, #8]
 800683c:	9301      	str	r3, [sp, #4]
 800683e:	f000 fa85 	bl	8006d4c <_vfiprintf_r>
 8006842:	b003      	add	sp, #12
 8006844:	f85d eb04 	ldr.w	lr, [sp], #4
 8006848:	b004      	add	sp, #16
 800684a:	4770      	bx	lr
 800684c:	20000018 	.word	0x20000018

08006850 <putchar>:
 8006850:	4b02      	ldr	r3, [pc, #8]	@ (800685c <putchar+0xc>)
 8006852:	4601      	mov	r1, r0
 8006854:	6818      	ldr	r0, [r3, #0]
 8006856:	6882      	ldr	r2, [r0, #8]
 8006858:	f000 be2c 	b.w	80074b4 <_putc_r>
 800685c:	20000018 	.word	0x20000018

08006860 <__sread>:
 8006860:	b510      	push	{r4, lr}
 8006862:	460c      	mov	r4, r1
 8006864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006868:	f000 f8fc 	bl	8006a64 <_read_r>
 800686c:	2800      	cmp	r0, #0
 800686e:	bfab      	itete	ge
 8006870:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006872:	89a3      	ldrhlt	r3, [r4, #12]
 8006874:	181b      	addge	r3, r3, r0
 8006876:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800687a:	bfac      	ite	ge
 800687c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800687e:	81a3      	strhlt	r3, [r4, #12]
 8006880:	bd10      	pop	{r4, pc}

08006882 <__swrite>:
 8006882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006886:	461f      	mov	r7, r3
 8006888:	898b      	ldrh	r3, [r1, #12]
 800688a:	05db      	lsls	r3, r3, #23
 800688c:	4605      	mov	r5, r0
 800688e:	460c      	mov	r4, r1
 8006890:	4616      	mov	r6, r2
 8006892:	d505      	bpl.n	80068a0 <__swrite+0x1e>
 8006894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006898:	2302      	movs	r3, #2
 800689a:	2200      	movs	r2, #0
 800689c:	f000 f8d0 	bl	8006a40 <_lseek_r>
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068aa:	81a3      	strh	r3, [r4, #12]
 80068ac:	4632      	mov	r2, r6
 80068ae:	463b      	mov	r3, r7
 80068b0:	4628      	mov	r0, r5
 80068b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068b6:	f000 b8e7 	b.w	8006a88 <_write_r>

080068ba <__sseek>:
 80068ba:	b510      	push	{r4, lr}
 80068bc:	460c      	mov	r4, r1
 80068be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c2:	f000 f8bd 	bl	8006a40 <_lseek_r>
 80068c6:	1c43      	adds	r3, r0, #1
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	bf15      	itete	ne
 80068cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80068ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80068d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80068d6:	81a3      	strheq	r3, [r4, #12]
 80068d8:	bf18      	it	ne
 80068da:	81a3      	strhne	r3, [r4, #12]
 80068dc:	bd10      	pop	{r4, pc}

080068de <__sclose>:
 80068de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068e2:	f000 b89d 	b.w	8006a20 <_close_r>

080068e6 <__swbuf_r>:
 80068e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e8:	460e      	mov	r6, r1
 80068ea:	4614      	mov	r4, r2
 80068ec:	4605      	mov	r5, r0
 80068ee:	b118      	cbz	r0, 80068f8 <__swbuf_r+0x12>
 80068f0:	6a03      	ldr	r3, [r0, #32]
 80068f2:	b90b      	cbnz	r3, 80068f8 <__swbuf_r+0x12>
 80068f4:	f7ff ff64 	bl	80067c0 <__sinit>
 80068f8:	69a3      	ldr	r3, [r4, #24]
 80068fa:	60a3      	str	r3, [r4, #8]
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	071a      	lsls	r2, r3, #28
 8006900:	d501      	bpl.n	8006906 <__swbuf_r+0x20>
 8006902:	6923      	ldr	r3, [r4, #16]
 8006904:	b943      	cbnz	r3, 8006918 <__swbuf_r+0x32>
 8006906:	4621      	mov	r1, r4
 8006908:	4628      	mov	r0, r5
 800690a:	f000 f82b 	bl	8006964 <__swsetup_r>
 800690e:	b118      	cbz	r0, 8006918 <__swbuf_r+0x32>
 8006910:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006914:	4638      	mov	r0, r7
 8006916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	6922      	ldr	r2, [r4, #16]
 800691c:	1a98      	subs	r0, r3, r2
 800691e:	6963      	ldr	r3, [r4, #20]
 8006920:	b2f6      	uxtb	r6, r6
 8006922:	4283      	cmp	r3, r0
 8006924:	4637      	mov	r7, r6
 8006926:	dc05      	bgt.n	8006934 <__swbuf_r+0x4e>
 8006928:	4621      	mov	r1, r4
 800692a:	4628      	mov	r0, r5
 800692c:	f000 fd38 	bl	80073a0 <_fflush_r>
 8006930:	2800      	cmp	r0, #0
 8006932:	d1ed      	bne.n	8006910 <__swbuf_r+0x2a>
 8006934:	68a3      	ldr	r3, [r4, #8]
 8006936:	3b01      	subs	r3, #1
 8006938:	60a3      	str	r3, [r4, #8]
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	6022      	str	r2, [r4, #0]
 8006940:	701e      	strb	r6, [r3, #0]
 8006942:	6962      	ldr	r2, [r4, #20]
 8006944:	1c43      	adds	r3, r0, #1
 8006946:	429a      	cmp	r2, r3
 8006948:	d004      	beq.n	8006954 <__swbuf_r+0x6e>
 800694a:	89a3      	ldrh	r3, [r4, #12]
 800694c:	07db      	lsls	r3, r3, #31
 800694e:	d5e1      	bpl.n	8006914 <__swbuf_r+0x2e>
 8006950:	2e0a      	cmp	r6, #10
 8006952:	d1df      	bne.n	8006914 <__swbuf_r+0x2e>
 8006954:	4621      	mov	r1, r4
 8006956:	4628      	mov	r0, r5
 8006958:	f000 fd22 	bl	80073a0 <_fflush_r>
 800695c:	2800      	cmp	r0, #0
 800695e:	d0d9      	beq.n	8006914 <__swbuf_r+0x2e>
 8006960:	e7d6      	b.n	8006910 <__swbuf_r+0x2a>
	...

08006964 <__swsetup_r>:
 8006964:	b538      	push	{r3, r4, r5, lr}
 8006966:	4b29      	ldr	r3, [pc, #164]	@ (8006a0c <__swsetup_r+0xa8>)
 8006968:	4605      	mov	r5, r0
 800696a:	6818      	ldr	r0, [r3, #0]
 800696c:	460c      	mov	r4, r1
 800696e:	b118      	cbz	r0, 8006978 <__swsetup_r+0x14>
 8006970:	6a03      	ldr	r3, [r0, #32]
 8006972:	b90b      	cbnz	r3, 8006978 <__swsetup_r+0x14>
 8006974:	f7ff ff24 	bl	80067c0 <__sinit>
 8006978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800697c:	0719      	lsls	r1, r3, #28
 800697e:	d422      	bmi.n	80069c6 <__swsetup_r+0x62>
 8006980:	06da      	lsls	r2, r3, #27
 8006982:	d407      	bmi.n	8006994 <__swsetup_r+0x30>
 8006984:	2209      	movs	r2, #9
 8006986:	602a      	str	r2, [r5, #0]
 8006988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800698c:	81a3      	strh	r3, [r4, #12]
 800698e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006992:	e033      	b.n	80069fc <__swsetup_r+0x98>
 8006994:	0758      	lsls	r0, r3, #29
 8006996:	d512      	bpl.n	80069be <__swsetup_r+0x5a>
 8006998:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800699a:	b141      	cbz	r1, 80069ae <__swsetup_r+0x4a>
 800699c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069a0:	4299      	cmp	r1, r3
 80069a2:	d002      	beq.n	80069aa <__swsetup_r+0x46>
 80069a4:	4628      	mov	r0, r5
 80069a6:	f000 f8af 	bl	8006b08 <_free_r>
 80069aa:	2300      	movs	r3, #0
 80069ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80069ae:	89a3      	ldrh	r3, [r4, #12]
 80069b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80069b4:	81a3      	strh	r3, [r4, #12]
 80069b6:	2300      	movs	r3, #0
 80069b8:	6063      	str	r3, [r4, #4]
 80069ba:	6923      	ldr	r3, [r4, #16]
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	89a3      	ldrh	r3, [r4, #12]
 80069c0:	f043 0308 	orr.w	r3, r3, #8
 80069c4:	81a3      	strh	r3, [r4, #12]
 80069c6:	6923      	ldr	r3, [r4, #16]
 80069c8:	b94b      	cbnz	r3, 80069de <__swsetup_r+0x7a>
 80069ca:	89a3      	ldrh	r3, [r4, #12]
 80069cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80069d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069d4:	d003      	beq.n	80069de <__swsetup_r+0x7a>
 80069d6:	4621      	mov	r1, r4
 80069d8:	4628      	mov	r0, r5
 80069da:	f000 fd2f 	bl	800743c <__smakebuf_r>
 80069de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069e2:	f013 0201 	ands.w	r2, r3, #1
 80069e6:	d00a      	beq.n	80069fe <__swsetup_r+0x9a>
 80069e8:	2200      	movs	r2, #0
 80069ea:	60a2      	str	r2, [r4, #8]
 80069ec:	6962      	ldr	r2, [r4, #20]
 80069ee:	4252      	negs	r2, r2
 80069f0:	61a2      	str	r2, [r4, #24]
 80069f2:	6922      	ldr	r2, [r4, #16]
 80069f4:	b942      	cbnz	r2, 8006a08 <__swsetup_r+0xa4>
 80069f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80069fa:	d1c5      	bne.n	8006988 <__swsetup_r+0x24>
 80069fc:	bd38      	pop	{r3, r4, r5, pc}
 80069fe:	0799      	lsls	r1, r3, #30
 8006a00:	bf58      	it	pl
 8006a02:	6962      	ldrpl	r2, [r4, #20]
 8006a04:	60a2      	str	r2, [r4, #8]
 8006a06:	e7f4      	b.n	80069f2 <__swsetup_r+0x8e>
 8006a08:	2000      	movs	r0, #0
 8006a0a:	e7f7      	b.n	80069fc <__swsetup_r+0x98>
 8006a0c:	20000018 	.word	0x20000018

08006a10 <memset>:
 8006a10:	4402      	add	r2, r0
 8006a12:	4603      	mov	r3, r0
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d100      	bne.n	8006a1a <memset+0xa>
 8006a18:	4770      	bx	lr
 8006a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a1e:	e7f9      	b.n	8006a14 <memset+0x4>

08006a20 <_close_r>:
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	4d06      	ldr	r5, [pc, #24]	@ (8006a3c <_close_r+0x1c>)
 8006a24:	2300      	movs	r3, #0
 8006a26:	4604      	mov	r4, r0
 8006a28:	4608      	mov	r0, r1
 8006a2a:	602b      	str	r3, [r5, #0]
 8006a2c:	f7fa ff29 	bl	8001882 <_close>
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	d102      	bne.n	8006a3a <_close_r+0x1a>
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	b103      	cbz	r3, 8006a3a <_close_r+0x1a>
 8006a38:	6023      	str	r3, [r4, #0]
 8006a3a:	bd38      	pop	{r3, r4, r5, pc}
 8006a3c:	200008cc 	.word	0x200008cc

08006a40 <_lseek_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	4d07      	ldr	r5, [pc, #28]	@ (8006a60 <_lseek_r+0x20>)
 8006a44:	4604      	mov	r4, r0
 8006a46:	4608      	mov	r0, r1
 8006a48:	4611      	mov	r1, r2
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	602a      	str	r2, [r5, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f7fa ff3e 	bl	80018d0 <_lseek>
 8006a54:	1c43      	adds	r3, r0, #1
 8006a56:	d102      	bne.n	8006a5e <_lseek_r+0x1e>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	b103      	cbz	r3, 8006a5e <_lseek_r+0x1e>
 8006a5c:	6023      	str	r3, [r4, #0]
 8006a5e:	bd38      	pop	{r3, r4, r5, pc}
 8006a60:	200008cc 	.word	0x200008cc

08006a64 <_read_r>:
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	4d07      	ldr	r5, [pc, #28]	@ (8006a84 <_read_r+0x20>)
 8006a68:	4604      	mov	r4, r0
 8006a6a:	4608      	mov	r0, r1
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	2200      	movs	r2, #0
 8006a70:	602a      	str	r2, [r5, #0]
 8006a72:	461a      	mov	r2, r3
 8006a74:	f7fa fecc 	bl	8001810 <_read>
 8006a78:	1c43      	adds	r3, r0, #1
 8006a7a:	d102      	bne.n	8006a82 <_read_r+0x1e>
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	b103      	cbz	r3, 8006a82 <_read_r+0x1e>
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	bd38      	pop	{r3, r4, r5, pc}
 8006a84:	200008cc 	.word	0x200008cc

08006a88 <_write_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	4d07      	ldr	r5, [pc, #28]	@ (8006aa8 <_write_r+0x20>)
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	4608      	mov	r0, r1
 8006a90:	4611      	mov	r1, r2
 8006a92:	2200      	movs	r2, #0
 8006a94:	602a      	str	r2, [r5, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	f7fa fed7 	bl	800184a <_write>
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	d102      	bne.n	8006aa6 <_write_r+0x1e>
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	b103      	cbz	r3, 8006aa6 <_write_r+0x1e>
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	bd38      	pop	{r3, r4, r5, pc}
 8006aa8:	200008cc 	.word	0x200008cc

08006aac <__errno>:
 8006aac:	4b01      	ldr	r3, [pc, #4]	@ (8006ab4 <__errno+0x8>)
 8006aae:	6818      	ldr	r0, [r3, #0]
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	20000018 	.word	0x20000018

08006ab8 <__libc_init_array>:
 8006ab8:	b570      	push	{r4, r5, r6, lr}
 8006aba:	4d0d      	ldr	r5, [pc, #52]	@ (8006af0 <__libc_init_array+0x38>)
 8006abc:	4c0d      	ldr	r4, [pc, #52]	@ (8006af4 <__libc_init_array+0x3c>)
 8006abe:	1b64      	subs	r4, r4, r5
 8006ac0:	10a4      	asrs	r4, r4, #2
 8006ac2:	2600      	movs	r6, #0
 8006ac4:	42a6      	cmp	r6, r4
 8006ac6:	d109      	bne.n	8006adc <__libc_init_array+0x24>
 8006ac8:	4d0b      	ldr	r5, [pc, #44]	@ (8006af8 <__libc_init_array+0x40>)
 8006aca:	4c0c      	ldr	r4, [pc, #48]	@ (8006afc <__libc_init_array+0x44>)
 8006acc:	f000 fd58 	bl	8007580 <_init>
 8006ad0:	1b64      	subs	r4, r4, r5
 8006ad2:	10a4      	asrs	r4, r4, #2
 8006ad4:	2600      	movs	r6, #0
 8006ad6:	42a6      	cmp	r6, r4
 8006ad8:	d105      	bne.n	8006ae6 <__libc_init_array+0x2e>
 8006ada:	bd70      	pop	{r4, r5, r6, pc}
 8006adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ae0:	4798      	blx	r3
 8006ae2:	3601      	adds	r6, #1
 8006ae4:	e7ee      	b.n	8006ac4 <__libc_init_array+0xc>
 8006ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aea:	4798      	blx	r3
 8006aec:	3601      	adds	r6, #1
 8006aee:	e7f2      	b.n	8006ad6 <__libc_init_array+0x1e>
 8006af0:	0800760c 	.word	0x0800760c
 8006af4:	0800760c 	.word	0x0800760c
 8006af8:	0800760c 	.word	0x0800760c
 8006afc:	08007610 	.word	0x08007610

08006b00 <__retarget_lock_init_recursive>:
 8006b00:	4770      	bx	lr

08006b02 <__retarget_lock_acquire_recursive>:
 8006b02:	4770      	bx	lr

08006b04 <__retarget_lock_release_recursive>:
 8006b04:	4770      	bx	lr
	...

08006b08 <_free_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	2900      	cmp	r1, #0
 8006b0e:	d041      	beq.n	8006b94 <_free_r+0x8c>
 8006b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b14:	1f0c      	subs	r4, r1, #4
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bfb8      	it	lt
 8006b1a:	18e4      	addlt	r4, r4, r3
 8006b1c:	f000 f8e0 	bl	8006ce0 <__malloc_lock>
 8006b20:	4a1d      	ldr	r2, [pc, #116]	@ (8006b98 <_free_r+0x90>)
 8006b22:	6813      	ldr	r3, [r2, #0]
 8006b24:	b933      	cbnz	r3, 8006b34 <_free_r+0x2c>
 8006b26:	6063      	str	r3, [r4, #4]
 8006b28:	6014      	str	r4, [r2, #0]
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b30:	f000 b8dc 	b.w	8006cec <__malloc_unlock>
 8006b34:	42a3      	cmp	r3, r4
 8006b36:	d908      	bls.n	8006b4a <_free_r+0x42>
 8006b38:	6820      	ldr	r0, [r4, #0]
 8006b3a:	1821      	adds	r1, r4, r0
 8006b3c:	428b      	cmp	r3, r1
 8006b3e:	bf01      	itttt	eq
 8006b40:	6819      	ldreq	r1, [r3, #0]
 8006b42:	685b      	ldreq	r3, [r3, #4]
 8006b44:	1809      	addeq	r1, r1, r0
 8006b46:	6021      	streq	r1, [r4, #0]
 8006b48:	e7ed      	b.n	8006b26 <_free_r+0x1e>
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	b10b      	cbz	r3, 8006b54 <_free_r+0x4c>
 8006b50:	42a3      	cmp	r3, r4
 8006b52:	d9fa      	bls.n	8006b4a <_free_r+0x42>
 8006b54:	6811      	ldr	r1, [r2, #0]
 8006b56:	1850      	adds	r0, r2, r1
 8006b58:	42a0      	cmp	r0, r4
 8006b5a:	d10b      	bne.n	8006b74 <_free_r+0x6c>
 8006b5c:	6820      	ldr	r0, [r4, #0]
 8006b5e:	4401      	add	r1, r0
 8006b60:	1850      	adds	r0, r2, r1
 8006b62:	4283      	cmp	r3, r0
 8006b64:	6011      	str	r1, [r2, #0]
 8006b66:	d1e0      	bne.n	8006b2a <_free_r+0x22>
 8006b68:	6818      	ldr	r0, [r3, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	6053      	str	r3, [r2, #4]
 8006b6e:	4408      	add	r0, r1
 8006b70:	6010      	str	r0, [r2, #0]
 8006b72:	e7da      	b.n	8006b2a <_free_r+0x22>
 8006b74:	d902      	bls.n	8006b7c <_free_r+0x74>
 8006b76:	230c      	movs	r3, #12
 8006b78:	602b      	str	r3, [r5, #0]
 8006b7a:	e7d6      	b.n	8006b2a <_free_r+0x22>
 8006b7c:	6820      	ldr	r0, [r4, #0]
 8006b7e:	1821      	adds	r1, r4, r0
 8006b80:	428b      	cmp	r3, r1
 8006b82:	bf04      	itt	eq
 8006b84:	6819      	ldreq	r1, [r3, #0]
 8006b86:	685b      	ldreq	r3, [r3, #4]
 8006b88:	6063      	str	r3, [r4, #4]
 8006b8a:	bf04      	itt	eq
 8006b8c:	1809      	addeq	r1, r1, r0
 8006b8e:	6021      	streq	r1, [r4, #0]
 8006b90:	6054      	str	r4, [r2, #4]
 8006b92:	e7ca      	b.n	8006b2a <_free_r+0x22>
 8006b94:	bd38      	pop	{r3, r4, r5, pc}
 8006b96:	bf00      	nop
 8006b98:	200008d8 	.word	0x200008d8

08006b9c <sbrk_aligned>:
 8006b9c:	b570      	push	{r4, r5, r6, lr}
 8006b9e:	4e0f      	ldr	r6, [pc, #60]	@ (8006bdc <sbrk_aligned+0x40>)
 8006ba0:	460c      	mov	r4, r1
 8006ba2:	6831      	ldr	r1, [r6, #0]
 8006ba4:	4605      	mov	r5, r0
 8006ba6:	b911      	cbnz	r1, 8006bae <sbrk_aligned+0x12>
 8006ba8:	f000 fcda 	bl	8007560 <_sbrk_r>
 8006bac:	6030      	str	r0, [r6, #0]
 8006bae:	4621      	mov	r1, r4
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	f000 fcd5 	bl	8007560 <_sbrk_r>
 8006bb6:	1c43      	adds	r3, r0, #1
 8006bb8:	d103      	bne.n	8006bc2 <sbrk_aligned+0x26>
 8006bba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	bd70      	pop	{r4, r5, r6, pc}
 8006bc2:	1cc4      	adds	r4, r0, #3
 8006bc4:	f024 0403 	bic.w	r4, r4, #3
 8006bc8:	42a0      	cmp	r0, r4
 8006bca:	d0f8      	beq.n	8006bbe <sbrk_aligned+0x22>
 8006bcc:	1a21      	subs	r1, r4, r0
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f000 fcc6 	bl	8007560 <_sbrk_r>
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	d1f2      	bne.n	8006bbe <sbrk_aligned+0x22>
 8006bd8:	e7ef      	b.n	8006bba <sbrk_aligned+0x1e>
 8006bda:	bf00      	nop
 8006bdc:	200008d4 	.word	0x200008d4

08006be0 <_malloc_r>:
 8006be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006be4:	1ccd      	adds	r5, r1, #3
 8006be6:	f025 0503 	bic.w	r5, r5, #3
 8006bea:	3508      	adds	r5, #8
 8006bec:	2d0c      	cmp	r5, #12
 8006bee:	bf38      	it	cc
 8006bf0:	250c      	movcc	r5, #12
 8006bf2:	2d00      	cmp	r5, #0
 8006bf4:	4606      	mov	r6, r0
 8006bf6:	db01      	blt.n	8006bfc <_malloc_r+0x1c>
 8006bf8:	42a9      	cmp	r1, r5
 8006bfa:	d904      	bls.n	8006c06 <_malloc_r+0x26>
 8006bfc:	230c      	movs	r3, #12
 8006bfe:	6033      	str	r3, [r6, #0]
 8006c00:	2000      	movs	r0, #0
 8006c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006cdc <_malloc_r+0xfc>
 8006c0a:	f000 f869 	bl	8006ce0 <__malloc_lock>
 8006c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8006c12:	461c      	mov	r4, r3
 8006c14:	bb44      	cbnz	r4, 8006c68 <_malloc_r+0x88>
 8006c16:	4629      	mov	r1, r5
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f7ff ffbf 	bl	8006b9c <sbrk_aligned>
 8006c1e:	1c43      	adds	r3, r0, #1
 8006c20:	4604      	mov	r4, r0
 8006c22:	d158      	bne.n	8006cd6 <_malloc_r+0xf6>
 8006c24:	f8d8 4000 	ldr.w	r4, [r8]
 8006c28:	4627      	mov	r7, r4
 8006c2a:	2f00      	cmp	r7, #0
 8006c2c:	d143      	bne.n	8006cb6 <_malloc_r+0xd6>
 8006c2e:	2c00      	cmp	r4, #0
 8006c30:	d04b      	beq.n	8006cca <_malloc_r+0xea>
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	4639      	mov	r1, r7
 8006c36:	4630      	mov	r0, r6
 8006c38:	eb04 0903 	add.w	r9, r4, r3
 8006c3c:	f000 fc90 	bl	8007560 <_sbrk_r>
 8006c40:	4581      	cmp	r9, r0
 8006c42:	d142      	bne.n	8006cca <_malloc_r+0xea>
 8006c44:	6821      	ldr	r1, [r4, #0]
 8006c46:	1a6d      	subs	r5, r5, r1
 8006c48:	4629      	mov	r1, r5
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	f7ff ffa6 	bl	8006b9c <sbrk_aligned>
 8006c50:	3001      	adds	r0, #1
 8006c52:	d03a      	beq.n	8006cca <_malloc_r+0xea>
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	442b      	add	r3, r5
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	bb62      	cbnz	r2, 8006cbc <_malloc_r+0xdc>
 8006c62:	f8c8 7000 	str.w	r7, [r8]
 8006c66:	e00f      	b.n	8006c88 <_malloc_r+0xa8>
 8006c68:	6822      	ldr	r2, [r4, #0]
 8006c6a:	1b52      	subs	r2, r2, r5
 8006c6c:	d420      	bmi.n	8006cb0 <_malloc_r+0xd0>
 8006c6e:	2a0b      	cmp	r2, #11
 8006c70:	d917      	bls.n	8006ca2 <_malloc_r+0xc2>
 8006c72:	1961      	adds	r1, r4, r5
 8006c74:	42a3      	cmp	r3, r4
 8006c76:	6025      	str	r5, [r4, #0]
 8006c78:	bf18      	it	ne
 8006c7a:	6059      	strne	r1, [r3, #4]
 8006c7c:	6863      	ldr	r3, [r4, #4]
 8006c7e:	bf08      	it	eq
 8006c80:	f8c8 1000 	streq.w	r1, [r8]
 8006c84:	5162      	str	r2, [r4, r5]
 8006c86:	604b      	str	r3, [r1, #4]
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f000 f82f 	bl	8006cec <__malloc_unlock>
 8006c8e:	f104 000b 	add.w	r0, r4, #11
 8006c92:	1d23      	adds	r3, r4, #4
 8006c94:	f020 0007 	bic.w	r0, r0, #7
 8006c98:	1ac2      	subs	r2, r0, r3
 8006c9a:	bf1c      	itt	ne
 8006c9c:	1a1b      	subne	r3, r3, r0
 8006c9e:	50a3      	strne	r3, [r4, r2]
 8006ca0:	e7af      	b.n	8006c02 <_malloc_r+0x22>
 8006ca2:	6862      	ldr	r2, [r4, #4]
 8006ca4:	42a3      	cmp	r3, r4
 8006ca6:	bf0c      	ite	eq
 8006ca8:	f8c8 2000 	streq.w	r2, [r8]
 8006cac:	605a      	strne	r2, [r3, #4]
 8006cae:	e7eb      	b.n	8006c88 <_malloc_r+0xa8>
 8006cb0:	4623      	mov	r3, r4
 8006cb2:	6864      	ldr	r4, [r4, #4]
 8006cb4:	e7ae      	b.n	8006c14 <_malloc_r+0x34>
 8006cb6:	463c      	mov	r4, r7
 8006cb8:	687f      	ldr	r7, [r7, #4]
 8006cba:	e7b6      	b.n	8006c2a <_malloc_r+0x4a>
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	42a3      	cmp	r3, r4
 8006cc2:	d1fb      	bne.n	8006cbc <_malloc_r+0xdc>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	6053      	str	r3, [r2, #4]
 8006cc8:	e7de      	b.n	8006c88 <_malloc_r+0xa8>
 8006cca:	230c      	movs	r3, #12
 8006ccc:	6033      	str	r3, [r6, #0]
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f000 f80c 	bl	8006cec <__malloc_unlock>
 8006cd4:	e794      	b.n	8006c00 <_malloc_r+0x20>
 8006cd6:	6005      	str	r5, [r0, #0]
 8006cd8:	e7d6      	b.n	8006c88 <_malloc_r+0xa8>
 8006cda:	bf00      	nop
 8006cdc:	200008d8 	.word	0x200008d8

08006ce0 <__malloc_lock>:
 8006ce0:	4801      	ldr	r0, [pc, #4]	@ (8006ce8 <__malloc_lock+0x8>)
 8006ce2:	f7ff bf0e 	b.w	8006b02 <__retarget_lock_acquire_recursive>
 8006ce6:	bf00      	nop
 8006ce8:	200008d0 	.word	0x200008d0

08006cec <__malloc_unlock>:
 8006cec:	4801      	ldr	r0, [pc, #4]	@ (8006cf4 <__malloc_unlock+0x8>)
 8006cee:	f7ff bf09 	b.w	8006b04 <__retarget_lock_release_recursive>
 8006cf2:	bf00      	nop
 8006cf4:	200008d0 	.word	0x200008d0

08006cf8 <__sfputc_r>:
 8006cf8:	6893      	ldr	r3, [r2, #8]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	b410      	push	{r4}
 8006d00:	6093      	str	r3, [r2, #8]
 8006d02:	da08      	bge.n	8006d16 <__sfputc_r+0x1e>
 8006d04:	6994      	ldr	r4, [r2, #24]
 8006d06:	42a3      	cmp	r3, r4
 8006d08:	db01      	blt.n	8006d0e <__sfputc_r+0x16>
 8006d0a:	290a      	cmp	r1, #10
 8006d0c:	d103      	bne.n	8006d16 <__sfputc_r+0x1e>
 8006d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d12:	f7ff bde8 	b.w	80068e6 <__swbuf_r>
 8006d16:	6813      	ldr	r3, [r2, #0]
 8006d18:	1c58      	adds	r0, r3, #1
 8006d1a:	6010      	str	r0, [r2, #0]
 8006d1c:	7019      	strb	r1, [r3, #0]
 8006d1e:	4608      	mov	r0, r1
 8006d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <__sfputs_r>:
 8006d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d28:	4606      	mov	r6, r0
 8006d2a:	460f      	mov	r7, r1
 8006d2c:	4614      	mov	r4, r2
 8006d2e:	18d5      	adds	r5, r2, r3
 8006d30:	42ac      	cmp	r4, r5
 8006d32:	d101      	bne.n	8006d38 <__sfputs_r+0x12>
 8006d34:	2000      	movs	r0, #0
 8006d36:	e007      	b.n	8006d48 <__sfputs_r+0x22>
 8006d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d3c:	463a      	mov	r2, r7
 8006d3e:	4630      	mov	r0, r6
 8006d40:	f7ff ffda 	bl	8006cf8 <__sfputc_r>
 8006d44:	1c43      	adds	r3, r0, #1
 8006d46:	d1f3      	bne.n	8006d30 <__sfputs_r+0xa>
 8006d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d4c <_vfiprintf_r>:
 8006d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d50:	460d      	mov	r5, r1
 8006d52:	b09d      	sub	sp, #116	@ 0x74
 8006d54:	4614      	mov	r4, r2
 8006d56:	4698      	mov	r8, r3
 8006d58:	4606      	mov	r6, r0
 8006d5a:	b118      	cbz	r0, 8006d64 <_vfiprintf_r+0x18>
 8006d5c:	6a03      	ldr	r3, [r0, #32]
 8006d5e:	b90b      	cbnz	r3, 8006d64 <_vfiprintf_r+0x18>
 8006d60:	f7ff fd2e 	bl	80067c0 <__sinit>
 8006d64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d66:	07d9      	lsls	r1, r3, #31
 8006d68:	d405      	bmi.n	8006d76 <_vfiprintf_r+0x2a>
 8006d6a:	89ab      	ldrh	r3, [r5, #12]
 8006d6c:	059a      	lsls	r2, r3, #22
 8006d6e:	d402      	bmi.n	8006d76 <_vfiprintf_r+0x2a>
 8006d70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d72:	f7ff fec6 	bl	8006b02 <__retarget_lock_acquire_recursive>
 8006d76:	89ab      	ldrh	r3, [r5, #12]
 8006d78:	071b      	lsls	r3, r3, #28
 8006d7a:	d501      	bpl.n	8006d80 <_vfiprintf_r+0x34>
 8006d7c:	692b      	ldr	r3, [r5, #16]
 8006d7e:	b99b      	cbnz	r3, 8006da8 <_vfiprintf_r+0x5c>
 8006d80:	4629      	mov	r1, r5
 8006d82:	4630      	mov	r0, r6
 8006d84:	f7ff fdee 	bl	8006964 <__swsetup_r>
 8006d88:	b170      	cbz	r0, 8006da8 <_vfiprintf_r+0x5c>
 8006d8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d8c:	07dc      	lsls	r4, r3, #31
 8006d8e:	d504      	bpl.n	8006d9a <_vfiprintf_r+0x4e>
 8006d90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d94:	b01d      	add	sp, #116	@ 0x74
 8006d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d9a:	89ab      	ldrh	r3, [r5, #12]
 8006d9c:	0598      	lsls	r0, r3, #22
 8006d9e:	d4f7      	bmi.n	8006d90 <_vfiprintf_r+0x44>
 8006da0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006da2:	f7ff feaf 	bl	8006b04 <__retarget_lock_release_recursive>
 8006da6:	e7f3      	b.n	8006d90 <_vfiprintf_r+0x44>
 8006da8:	2300      	movs	r3, #0
 8006daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dac:	2320      	movs	r3, #32
 8006dae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006db2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006db6:	2330      	movs	r3, #48	@ 0x30
 8006db8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006f68 <_vfiprintf_r+0x21c>
 8006dbc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006dc0:	f04f 0901 	mov.w	r9, #1
 8006dc4:	4623      	mov	r3, r4
 8006dc6:	469a      	mov	sl, r3
 8006dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dcc:	b10a      	cbz	r2, 8006dd2 <_vfiprintf_r+0x86>
 8006dce:	2a25      	cmp	r2, #37	@ 0x25
 8006dd0:	d1f9      	bne.n	8006dc6 <_vfiprintf_r+0x7a>
 8006dd2:	ebba 0b04 	subs.w	fp, sl, r4
 8006dd6:	d00b      	beq.n	8006df0 <_vfiprintf_r+0xa4>
 8006dd8:	465b      	mov	r3, fp
 8006dda:	4622      	mov	r2, r4
 8006ddc:	4629      	mov	r1, r5
 8006dde:	4630      	mov	r0, r6
 8006de0:	f7ff ffa1 	bl	8006d26 <__sfputs_r>
 8006de4:	3001      	adds	r0, #1
 8006de6:	f000 80a7 	beq.w	8006f38 <_vfiprintf_r+0x1ec>
 8006dea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dec:	445a      	add	r2, fp
 8006dee:	9209      	str	r2, [sp, #36]	@ 0x24
 8006df0:	f89a 3000 	ldrb.w	r3, [sl]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 809f 	beq.w	8006f38 <_vfiprintf_r+0x1ec>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e04:	f10a 0a01 	add.w	sl, sl, #1
 8006e08:	9304      	str	r3, [sp, #16]
 8006e0a:	9307      	str	r3, [sp, #28]
 8006e0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e10:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e12:	4654      	mov	r4, sl
 8006e14:	2205      	movs	r2, #5
 8006e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e1a:	4853      	ldr	r0, [pc, #332]	@ (8006f68 <_vfiprintf_r+0x21c>)
 8006e1c:	f7f9 f9f8 	bl	8000210 <memchr>
 8006e20:	9a04      	ldr	r2, [sp, #16]
 8006e22:	b9d8      	cbnz	r0, 8006e5c <_vfiprintf_r+0x110>
 8006e24:	06d1      	lsls	r1, r2, #27
 8006e26:	bf44      	itt	mi
 8006e28:	2320      	movmi	r3, #32
 8006e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e2e:	0713      	lsls	r3, r2, #28
 8006e30:	bf44      	itt	mi
 8006e32:	232b      	movmi	r3, #43	@ 0x2b
 8006e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e38:	f89a 3000 	ldrb.w	r3, [sl]
 8006e3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e3e:	d015      	beq.n	8006e6c <_vfiprintf_r+0x120>
 8006e40:	9a07      	ldr	r2, [sp, #28]
 8006e42:	4654      	mov	r4, sl
 8006e44:	2000      	movs	r0, #0
 8006e46:	f04f 0c0a 	mov.w	ip, #10
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e50:	3b30      	subs	r3, #48	@ 0x30
 8006e52:	2b09      	cmp	r3, #9
 8006e54:	d94b      	bls.n	8006eee <_vfiprintf_r+0x1a2>
 8006e56:	b1b0      	cbz	r0, 8006e86 <_vfiprintf_r+0x13a>
 8006e58:	9207      	str	r2, [sp, #28]
 8006e5a:	e014      	b.n	8006e86 <_vfiprintf_r+0x13a>
 8006e5c:	eba0 0308 	sub.w	r3, r0, r8
 8006e60:	fa09 f303 	lsl.w	r3, r9, r3
 8006e64:	4313      	orrs	r3, r2
 8006e66:	9304      	str	r3, [sp, #16]
 8006e68:	46a2      	mov	sl, r4
 8006e6a:	e7d2      	b.n	8006e12 <_vfiprintf_r+0xc6>
 8006e6c:	9b03      	ldr	r3, [sp, #12]
 8006e6e:	1d19      	adds	r1, r3, #4
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	9103      	str	r1, [sp, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	bfbb      	ittet	lt
 8006e78:	425b      	neglt	r3, r3
 8006e7a:	f042 0202 	orrlt.w	r2, r2, #2
 8006e7e:	9307      	strge	r3, [sp, #28]
 8006e80:	9307      	strlt	r3, [sp, #28]
 8006e82:	bfb8      	it	lt
 8006e84:	9204      	strlt	r2, [sp, #16]
 8006e86:	7823      	ldrb	r3, [r4, #0]
 8006e88:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e8a:	d10a      	bne.n	8006ea2 <_vfiprintf_r+0x156>
 8006e8c:	7863      	ldrb	r3, [r4, #1]
 8006e8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e90:	d132      	bne.n	8006ef8 <_vfiprintf_r+0x1ac>
 8006e92:	9b03      	ldr	r3, [sp, #12]
 8006e94:	1d1a      	adds	r2, r3, #4
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	9203      	str	r2, [sp, #12]
 8006e9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e9e:	3402      	adds	r4, #2
 8006ea0:	9305      	str	r3, [sp, #20]
 8006ea2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006f78 <_vfiprintf_r+0x22c>
 8006ea6:	7821      	ldrb	r1, [r4, #0]
 8006ea8:	2203      	movs	r2, #3
 8006eaa:	4650      	mov	r0, sl
 8006eac:	f7f9 f9b0 	bl	8000210 <memchr>
 8006eb0:	b138      	cbz	r0, 8006ec2 <_vfiprintf_r+0x176>
 8006eb2:	9b04      	ldr	r3, [sp, #16]
 8006eb4:	eba0 000a 	sub.w	r0, r0, sl
 8006eb8:	2240      	movs	r2, #64	@ 0x40
 8006eba:	4082      	lsls	r2, r0
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	3401      	adds	r4, #1
 8006ec0:	9304      	str	r3, [sp, #16]
 8006ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec6:	4829      	ldr	r0, [pc, #164]	@ (8006f6c <_vfiprintf_r+0x220>)
 8006ec8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ecc:	2206      	movs	r2, #6
 8006ece:	f7f9 f99f 	bl	8000210 <memchr>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d03f      	beq.n	8006f56 <_vfiprintf_r+0x20a>
 8006ed6:	4b26      	ldr	r3, [pc, #152]	@ (8006f70 <_vfiprintf_r+0x224>)
 8006ed8:	bb1b      	cbnz	r3, 8006f22 <_vfiprintf_r+0x1d6>
 8006eda:	9b03      	ldr	r3, [sp, #12]
 8006edc:	3307      	adds	r3, #7
 8006ede:	f023 0307 	bic.w	r3, r3, #7
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	9303      	str	r3, [sp, #12]
 8006ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee8:	443b      	add	r3, r7
 8006eea:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eec:	e76a      	b.n	8006dc4 <_vfiprintf_r+0x78>
 8006eee:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	2001      	movs	r0, #1
 8006ef6:	e7a8      	b.n	8006e4a <_vfiprintf_r+0xfe>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	3401      	adds	r4, #1
 8006efc:	9305      	str	r3, [sp, #20]
 8006efe:	4619      	mov	r1, r3
 8006f00:	f04f 0c0a 	mov.w	ip, #10
 8006f04:	4620      	mov	r0, r4
 8006f06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f0a:	3a30      	subs	r2, #48	@ 0x30
 8006f0c:	2a09      	cmp	r2, #9
 8006f0e:	d903      	bls.n	8006f18 <_vfiprintf_r+0x1cc>
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d0c6      	beq.n	8006ea2 <_vfiprintf_r+0x156>
 8006f14:	9105      	str	r1, [sp, #20]
 8006f16:	e7c4      	b.n	8006ea2 <_vfiprintf_r+0x156>
 8006f18:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e7f0      	b.n	8006f04 <_vfiprintf_r+0x1b8>
 8006f22:	ab03      	add	r3, sp, #12
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	462a      	mov	r2, r5
 8006f28:	4b12      	ldr	r3, [pc, #72]	@ (8006f74 <_vfiprintf_r+0x228>)
 8006f2a:	a904      	add	r1, sp, #16
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f3af 8000 	nop.w
 8006f32:	4607      	mov	r7, r0
 8006f34:	1c78      	adds	r0, r7, #1
 8006f36:	d1d6      	bne.n	8006ee6 <_vfiprintf_r+0x19a>
 8006f38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f3a:	07d9      	lsls	r1, r3, #31
 8006f3c:	d405      	bmi.n	8006f4a <_vfiprintf_r+0x1fe>
 8006f3e:	89ab      	ldrh	r3, [r5, #12]
 8006f40:	059a      	lsls	r2, r3, #22
 8006f42:	d402      	bmi.n	8006f4a <_vfiprintf_r+0x1fe>
 8006f44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f46:	f7ff fddd 	bl	8006b04 <__retarget_lock_release_recursive>
 8006f4a:	89ab      	ldrh	r3, [r5, #12]
 8006f4c:	065b      	lsls	r3, r3, #25
 8006f4e:	f53f af1f 	bmi.w	8006d90 <_vfiprintf_r+0x44>
 8006f52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f54:	e71e      	b.n	8006d94 <_vfiprintf_r+0x48>
 8006f56:	ab03      	add	r3, sp, #12
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	462a      	mov	r2, r5
 8006f5c:	4b05      	ldr	r3, [pc, #20]	@ (8006f74 <_vfiprintf_r+0x228>)
 8006f5e:	a904      	add	r1, sp, #16
 8006f60:	4630      	mov	r0, r6
 8006f62:	f000 f879 	bl	8007058 <_printf_i>
 8006f66:	e7e4      	b.n	8006f32 <_vfiprintf_r+0x1e6>
 8006f68:	080075d0 	.word	0x080075d0
 8006f6c:	080075da 	.word	0x080075da
 8006f70:	00000000 	.word	0x00000000
 8006f74:	08006d27 	.word	0x08006d27
 8006f78:	080075d6 	.word	0x080075d6

08006f7c <_printf_common>:
 8006f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f80:	4616      	mov	r6, r2
 8006f82:	4698      	mov	r8, r3
 8006f84:	688a      	ldr	r2, [r1, #8]
 8006f86:	690b      	ldr	r3, [r1, #16]
 8006f88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	bfb8      	it	lt
 8006f90:	4613      	movlt	r3, r2
 8006f92:	6033      	str	r3, [r6, #0]
 8006f94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f98:	4607      	mov	r7, r0
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	b10a      	cbz	r2, 8006fa2 <_printf_common+0x26>
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	6033      	str	r3, [r6, #0]
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	0699      	lsls	r1, r3, #26
 8006fa6:	bf42      	ittt	mi
 8006fa8:	6833      	ldrmi	r3, [r6, #0]
 8006faa:	3302      	addmi	r3, #2
 8006fac:	6033      	strmi	r3, [r6, #0]
 8006fae:	6825      	ldr	r5, [r4, #0]
 8006fb0:	f015 0506 	ands.w	r5, r5, #6
 8006fb4:	d106      	bne.n	8006fc4 <_printf_common+0x48>
 8006fb6:	f104 0a19 	add.w	sl, r4, #25
 8006fba:	68e3      	ldr	r3, [r4, #12]
 8006fbc:	6832      	ldr	r2, [r6, #0]
 8006fbe:	1a9b      	subs	r3, r3, r2
 8006fc0:	42ab      	cmp	r3, r5
 8006fc2:	dc26      	bgt.n	8007012 <_printf_common+0x96>
 8006fc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006fc8:	6822      	ldr	r2, [r4, #0]
 8006fca:	3b00      	subs	r3, #0
 8006fcc:	bf18      	it	ne
 8006fce:	2301      	movne	r3, #1
 8006fd0:	0692      	lsls	r2, r2, #26
 8006fd2:	d42b      	bmi.n	800702c <_printf_common+0xb0>
 8006fd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006fd8:	4641      	mov	r1, r8
 8006fda:	4638      	mov	r0, r7
 8006fdc:	47c8      	blx	r9
 8006fde:	3001      	adds	r0, #1
 8006fe0:	d01e      	beq.n	8007020 <_printf_common+0xa4>
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	6922      	ldr	r2, [r4, #16]
 8006fe6:	f003 0306 	and.w	r3, r3, #6
 8006fea:	2b04      	cmp	r3, #4
 8006fec:	bf02      	ittt	eq
 8006fee:	68e5      	ldreq	r5, [r4, #12]
 8006ff0:	6833      	ldreq	r3, [r6, #0]
 8006ff2:	1aed      	subeq	r5, r5, r3
 8006ff4:	68a3      	ldr	r3, [r4, #8]
 8006ff6:	bf0c      	ite	eq
 8006ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ffc:	2500      	movne	r5, #0
 8006ffe:	4293      	cmp	r3, r2
 8007000:	bfc4      	itt	gt
 8007002:	1a9b      	subgt	r3, r3, r2
 8007004:	18ed      	addgt	r5, r5, r3
 8007006:	2600      	movs	r6, #0
 8007008:	341a      	adds	r4, #26
 800700a:	42b5      	cmp	r5, r6
 800700c:	d11a      	bne.n	8007044 <_printf_common+0xc8>
 800700e:	2000      	movs	r0, #0
 8007010:	e008      	b.n	8007024 <_printf_common+0xa8>
 8007012:	2301      	movs	r3, #1
 8007014:	4652      	mov	r2, sl
 8007016:	4641      	mov	r1, r8
 8007018:	4638      	mov	r0, r7
 800701a:	47c8      	blx	r9
 800701c:	3001      	adds	r0, #1
 800701e:	d103      	bne.n	8007028 <_printf_common+0xac>
 8007020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007028:	3501      	adds	r5, #1
 800702a:	e7c6      	b.n	8006fba <_printf_common+0x3e>
 800702c:	18e1      	adds	r1, r4, r3
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	2030      	movs	r0, #48	@ 0x30
 8007032:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007036:	4422      	add	r2, r4
 8007038:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800703c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007040:	3302      	adds	r3, #2
 8007042:	e7c7      	b.n	8006fd4 <_printf_common+0x58>
 8007044:	2301      	movs	r3, #1
 8007046:	4622      	mov	r2, r4
 8007048:	4641      	mov	r1, r8
 800704a:	4638      	mov	r0, r7
 800704c:	47c8      	blx	r9
 800704e:	3001      	adds	r0, #1
 8007050:	d0e6      	beq.n	8007020 <_printf_common+0xa4>
 8007052:	3601      	adds	r6, #1
 8007054:	e7d9      	b.n	800700a <_printf_common+0x8e>
	...

08007058 <_printf_i>:
 8007058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800705c:	7e0f      	ldrb	r7, [r1, #24]
 800705e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007060:	2f78      	cmp	r7, #120	@ 0x78
 8007062:	4691      	mov	r9, r2
 8007064:	4680      	mov	r8, r0
 8007066:	460c      	mov	r4, r1
 8007068:	469a      	mov	sl, r3
 800706a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800706e:	d807      	bhi.n	8007080 <_printf_i+0x28>
 8007070:	2f62      	cmp	r7, #98	@ 0x62
 8007072:	d80a      	bhi.n	800708a <_printf_i+0x32>
 8007074:	2f00      	cmp	r7, #0
 8007076:	f000 80d2 	beq.w	800721e <_printf_i+0x1c6>
 800707a:	2f58      	cmp	r7, #88	@ 0x58
 800707c:	f000 80b9 	beq.w	80071f2 <_printf_i+0x19a>
 8007080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007084:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007088:	e03a      	b.n	8007100 <_printf_i+0xa8>
 800708a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800708e:	2b15      	cmp	r3, #21
 8007090:	d8f6      	bhi.n	8007080 <_printf_i+0x28>
 8007092:	a101      	add	r1, pc, #4	@ (adr r1, 8007098 <_printf_i+0x40>)
 8007094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007098:	080070f1 	.word	0x080070f1
 800709c:	08007105 	.word	0x08007105
 80070a0:	08007081 	.word	0x08007081
 80070a4:	08007081 	.word	0x08007081
 80070a8:	08007081 	.word	0x08007081
 80070ac:	08007081 	.word	0x08007081
 80070b0:	08007105 	.word	0x08007105
 80070b4:	08007081 	.word	0x08007081
 80070b8:	08007081 	.word	0x08007081
 80070bc:	08007081 	.word	0x08007081
 80070c0:	08007081 	.word	0x08007081
 80070c4:	08007205 	.word	0x08007205
 80070c8:	0800712f 	.word	0x0800712f
 80070cc:	080071bf 	.word	0x080071bf
 80070d0:	08007081 	.word	0x08007081
 80070d4:	08007081 	.word	0x08007081
 80070d8:	08007227 	.word	0x08007227
 80070dc:	08007081 	.word	0x08007081
 80070e0:	0800712f 	.word	0x0800712f
 80070e4:	08007081 	.word	0x08007081
 80070e8:	08007081 	.word	0x08007081
 80070ec:	080071c7 	.word	0x080071c7
 80070f0:	6833      	ldr	r3, [r6, #0]
 80070f2:	1d1a      	adds	r2, r3, #4
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6032      	str	r2, [r6, #0]
 80070f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007100:	2301      	movs	r3, #1
 8007102:	e09d      	b.n	8007240 <_printf_i+0x1e8>
 8007104:	6833      	ldr	r3, [r6, #0]
 8007106:	6820      	ldr	r0, [r4, #0]
 8007108:	1d19      	adds	r1, r3, #4
 800710a:	6031      	str	r1, [r6, #0]
 800710c:	0606      	lsls	r6, r0, #24
 800710e:	d501      	bpl.n	8007114 <_printf_i+0xbc>
 8007110:	681d      	ldr	r5, [r3, #0]
 8007112:	e003      	b.n	800711c <_printf_i+0xc4>
 8007114:	0645      	lsls	r5, r0, #25
 8007116:	d5fb      	bpl.n	8007110 <_printf_i+0xb8>
 8007118:	f9b3 5000 	ldrsh.w	r5, [r3]
 800711c:	2d00      	cmp	r5, #0
 800711e:	da03      	bge.n	8007128 <_printf_i+0xd0>
 8007120:	232d      	movs	r3, #45	@ 0x2d
 8007122:	426d      	negs	r5, r5
 8007124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007128:	4859      	ldr	r0, [pc, #356]	@ (8007290 <_printf_i+0x238>)
 800712a:	230a      	movs	r3, #10
 800712c:	e011      	b.n	8007152 <_printf_i+0xfa>
 800712e:	6821      	ldr	r1, [r4, #0]
 8007130:	6833      	ldr	r3, [r6, #0]
 8007132:	0608      	lsls	r0, r1, #24
 8007134:	f853 5b04 	ldr.w	r5, [r3], #4
 8007138:	d402      	bmi.n	8007140 <_printf_i+0xe8>
 800713a:	0649      	lsls	r1, r1, #25
 800713c:	bf48      	it	mi
 800713e:	b2ad      	uxthmi	r5, r5
 8007140:	2f6f      	cmp	r7, #111	@ 0x6f
 8007142:	4853      	ldr	r0, [pc, #332]	@ (8007290 <_printf_i+0x238>)
 8007144:	6033      	str	r3, [r6, #0]
 8007146:	bf14      	ite	ne
 8007148:	230a      	movne	r3, #10
 800714a:	2308      	moveq	r3, #8
 800714c:	2100      	movs	r1, #0
 800714e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007152:	6866      	ldr	r6, [r4, #4]
 8007154:	60a6      	str	r6, [r4, #8]
 8007156:	2e00      	cmp	r6, #0
 8007158:	bfa2      	ittt	ge
 800715a:	6821      	ldrge	r1, [r4, #0]
 800715c:	f021 0104 	bicge.w	r1, r1, #4
 8007160:	6021      	strge	r1, [r4, #0]
 8007162:	b90d      	cbnz	r5, 8007168 <_printf_i+0x110>
 8007164:	2e00      	cmp	r6, #0
 8007166:	d04b      	beq.n	8007200 <_printf_i+0x1a8>
 8007168:	4616      	mov	r6, r2
 800716a:	fbb5 f1f3 	udiv	r1, r5, r3
 800716e:	fb03 5711 	mls	r7, r3, r1, r5
 8007172:	5dc7      	ldrb	r7, [r0, r7]
 8007174:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007178:	462f      	mov	r7, r5
 800717a:	42bb      	cmp	r3, r7
 800717c:	460d      	mov	r5, r1
 800717e:	d9f4      	bls.n	800716a <_printf_i+0x112>
 8007180:	2b08      	cmp	r3, #8
 8007182:	d10b      	bne.n	800719c <_printf_i+0x144>
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	07df      	lsls	r7, r3, #31
 8007188:	d508      	bpl.n	800719c <_printf_i+0x144>
 800718a:	6923      	ldr	r3, [r4, #16]
 800718c:	6861      	ldr	r1, [r4, #4]
 800718e:	4299      	cmp	r1, r3
 8007190:	bfde      	ittt	le
 8007192:	2330      	movle	r3, #48	@ 0x30
 8007194:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007198:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800719c:	1b92      	subs	r2, r2, r6
 800719e:	6122      	str	r2, [r4, #16]
 80071a0:	f8cd a000 	str.w	sl, [sp]
 80071a4:	464b      	mov	r3, r9
 80071a6:	aa03      	add	r2, sp, #12
 80071a8:	4621      	mov	r1, r4
 80071aa:	4640      	mov	r0, r8
 80071ac:	f7ff fee6 	bl	8006f7c <_printf_common>
 80071b0:	3001      	adds	r0, #1
 80071b2:	d14a      	bne.n	800724a <_printf_i+0x1f2>
 80071b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071b8:	b004      	add	sp, #16
 80071ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	f043 0320 	orr.w	r3, r3, #32
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	4833      	ldr	r0, [pc, #204]	@ (8007294 <_printf_i+0x23c>)
 80071c8:	2778      	movs	r7, #120	@ 0x78
 80071ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071ce:	6823      	ldr	r3, [r4, #0]
 80071d0:	6831      	ldr	r1, [r6, #0]
 80071d2:	061f      	lsls	r7, r3, #24
 80071d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80071d8:	d402      	bmi.n	80071e0 <_printf_i+0x188>
 80071da:	065f      	lsls	r7, r3, #25
 80071dc:	bf48      	it	mi
 80071de:	b2ad      	uxthmi	r5, r5
 80071e0:	6031      	str	r1, [r6, #0]
 80071e2:	07d9      	lsls	r1, r3, #31
 80071e4:	bf44      	itt	mi
 80071e6:	f043 0320 	orrmi.w	r3, r3, #32
 80071ea:	6023      	strmi	r3, [r4, #0]
 80071ec:	b11d      	cbz	r5, 80071f6 <_printf_i+0x19e>
 80071ee:	2310      	movs	r3, #16
 80071f0:	e7ac      	b.n	800714c <_printf_i+0xf4>
 80071f2:	4827      	ldr	r0, [pc, #156]	@ (8007290 <_printf_i+0x238>)
 80071f4:	e7e9      	b.n	80071ca <_printf_i+0x172>
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	f023 0320 	bic.w	r3, r3, #32
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	e7f6      	b.n	80071ee <_printf_i+0x196>
 8007200:	4616      	mov	r6, r2
 8007202:	e7bd      	b.n	8007180 <_printf_i+0x128>
 8007204:	6833      	ldr	r3, [r6, #0]
 8007206:	6825      	ldr	r5, [r4, #0]
 8007208:	6961      	ldr	r1, [r4, #20]
 800720a:	1d18      	adds	r0, r3, #4
 800720c:	6030      	str	r0, [r6, #0]
 800720e:	062e      	lsls	r6, r5, #24
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	d501      	bpl.n	8007218 <_printf_i+0x1c0>
 8007214:	6019      	str	r1, [r3, #0]
 8007216:	e002      	b.n	800721e <_printf_i+0x1c6>
 8007218:	0668      	lsls	r0, r5, #25
 800721a:	d5fb      	bpl.n	8007214 <_printf_i+0x1bc>
 800721c:	8019      	strh	r1, [r3, #0]
 800721e:	2300      	movs	r3, #0
 8007220:	6123      	str	r3, [r4, #16]
 8007222:	4616      	mov	r6, r2
 8007224:	e7bc      	b.n	80071a0 <_printf_i+0x148>
 8007226:	6833      	ldr	r3, [r6, #0]
 8007228:	1d1a      	adds	r2, r3, #4
 800722a:	6032      	str	r2, [r6, #0]
 800722c:	681e      	ldr	r6, [r3, #0]
 800722e:	6862      	ldr	r2, [r4, #4]
 8007230:	2100      	movs	r1, #0
 8007232:	4630      	mov	r0, r6
 8007234:	f7f8 ffec 	bl	8000210 <memchr>
 8007238:	b108      	cbz	r0, 800723e <_printf_i+0x1e6>
 800723a:	1b80      	subs	r0, r0, r6
 800723c:	6060      	str	r0, [r4, #4]
 800723e:	6863      	ldr	r3, [r4, #4]
 8007240:	6123      	str	r3, [r4, #16]
 8007242:	2300      	movs	r3, #0
 8007244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007248:	e7aa      	b.n	80071a0 <_printf_i+0x148>
 800724a:	6923      	ldr	r3, [r4, #16]
 800724c:	4632      	mov	r2, r6
 800724e:	4649      	mov	r1, r9
 8007250:	4640      	mov	r0, r8
 8007252:	47d0      	blx	sl
 8007254:	3001      	adds	r0, #1
 8007256:	d0ad      	beq.n	80071b4 <_printf_i+0x15c>
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	079b      	lsls	r3, r3, #30
 800725c:	d413      	bmi.n	8007286 <_printf_i+0x22e>
 800725e:	68e0      	ldr	r0, [r4, #12]
 8007260:	9b03      	ldr	r3, [sp, #12]
 8007262:	4298      	cmp	r0, r3
 8007264:	bfb8      	it	lt
 8007266:	4618      	movlt	r0, r3
 8007268:	e7a6      	b.n	80071b8 <_printf_i+0x160>
 800726a:	2301      	movs	r3, #1
 800726c:	4632      	mov	r2, r6
 800726e:	4649      	mov	r1, r9
 8007270:	4640      	mov	r0, r8
 8007272:	47d0      	blx	sl
 8007274:	3001      	adds	r0, #1
 8007276:	d09d      	beq.n	80071b4 <_printf_i+0x15c>
 8007278:	3501      	adds	r5, #1
 800727a:	68e3      	ldr	r3, [r4, #12]
 800727c:	9903      	ldr	r1, [sp, #12]
 800727e:	1a5b      	subs	r3, r3, r1
 8007280:	42ab      	cmp	r3, r5
 8007282:	dcf2      	bgt.n	800726a <_printf_i+0x212>
 8007284:	e7eb      	b.n	800725e <_printf_i+0x206>
 8007286:	2500      	movs	r5, #0
 8007288:	f104 0619 	add.w	r6, r4, #25
 800728c:	e7f5      	b.n	800727a <_printf_i+0x222>
 800728e:	bf00      	nop
 8007290:	080075e1 	.word	0x080075e1
 8007294:	080075f2 	.word	0x080075f2

08007298 <__sflush_r>:
 8007298:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800729c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a0:	0716      	lsls	r6, r2, #28
 80072a2:	4605      	mov	r5, r0
 80072a4:	460c      	mov	r4, r1
 80072a6:	d454      	bmi.n	8007352 <__sflush_r+0xba>
 80072a8:	684b      	ldr	r3, [r1, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	dc02      	bgt.n	80072b4 <__sflush_r+0x1c>
 80072ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	dd48      	ble.n	8007346 <__sflush_r+0xae>
 80072b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072b6:	2e00      	cmp	r6, #0
 80072b8:	d045      	beq.n	8007346 <__sflush_r+0xae>
 80072ba:	2300      	movs	r3, #0
 80072bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80072c0:	682f      	ldr	r7, [r5, #0]
 80072c2:	6a21      	ldr	r1, [r4, #32]
 80072c4:	602b      	str	r3, [r5, #0]
 80072c6:	d030      	beq.n	800732a <__sflush_r+0x92>
 80072c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	0759      	lsls	r1, r3, #29
 80072ce:	d505      	bpl.n	80072dc <__sflush_r+0x44>
 80072d0:	6863      	ldr	r3, [r4, #4]
 80072d2:	1ad2      	subs	r2, r2, r3
 80072d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80072d6:	b10b      	cbz	r3, 80072dc <__sflush_r+0x44>
 80072d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80072da:	1ad2      	subs	r2, r2, r3
 80072dc:	2300      	movs	r3, #0
 80072de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072e0:	6a21      	ldr	r1, [r4, #32]
 80072e2:	4628      	mov	r0, r5
 80072e4:	47b0      	blx	r6
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	89a3      	ldrh	r3, [r4, #12]
 80072ea:	d106      	bne.n	80072fa <__sflush_r+0x62>
 80072ec:	6829      	ldr	r1, [r5, #0]
 80072ee:	291d      	cmp	r1, #29
 80072f0:	d82b      	bhi.n	800734a <__sflush_r+0xb2>
 80072f2:	4a2a      	ldr	r2, [pc, #168]	@ (800739c <__sflush_r+0x104>)
 80072f4:	410a      	asrs	r2, r1
 80072f6:	07d6      	lsls	r6, r2, #31
 80072f8:	d427      	bmi.n	800734a <__sflush_r+0xb2>
 80072fa:	2200      	movs	r2, #0
 80072fc:	6062      	str	r2, [r4, #4]
 80072fe:	04d9      	lsls	r1, r3, #19
 8007300:	6922      	ldr	r2, [r4, #16]
 8007302:	6022      	str	r2, [r4, #0]
 8007304:	d504      	bpl.n	8007310 <__sflush_r+0x78>
 8007306:	1c42      	adds	r2, r0, #1
 8007308:	d101      	bne.n	800730e <__sflush_r+0x76>
 800730a:	682b      	ldr	r3, [r5, #0]
 800730c:	b903      	cbnz	r3, 8007310 <__sflush_r+0x78>
 800730e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007310:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007312:	602f      	str	r7, [r5, #0]
 8007314:	b1b9      	cbz	r1, 8007346 <__sflush_r+0xae>
 8007316:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800731a:	4299      	cmp	r1, r3
 800731c:	d002      	beq.n	8007324 <__sflush_r+0x8c>
 800731e:	4628      	mov	r0, r5
 8007320:	f7ff fbf2 	bl	8006b08 <_free_r>
 8007324:	2300      	movs	r3, #0
 8007326:	6363      	str	r3, [r4, #52]	@ 0x34
 8007328:	e00d      	b.n	8007346 <__sflush_r+0xae>
 800732a:	2301      	movs	r3, #1
 800732c:	4628      	mov	r0, r5
 800732e:	47b0      	blx	r6
 8007330:	4602      	mov	r2, r0
 8007332:	1c50      	adds	r0, r2, #1
 8007334:	d1c9      	bne.n	80072ca <__sflush_r+0x32>
 8007336:	682b      	ldr	r3, [r5, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0c6      	beq.n	80072ca <__sflush_r+0x32>
 800733c:	2b1d      	cmp	r3, #29
 800733e:	d001      	beq.n	8007344 <__sflush_r+0xac>
 8007340:	2b16      	cmp	r3, #22
 8007342:	d11e      	bne.n	8007382 <__sflush_r+0xea>
 8007344:	602f      	str	r7, [r5, #0]
 8007346:	2000      	movs	r0, #0
 8007348:	e022      	b.n	8007390 <__sflush_r+0xf8>
 800734a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800734e:	b21b      	sxth	r3, r3
 8007350:	e01b      	b.n	800738a <__sflush_r+0xf2>
 8007352:	690f      	ldr	r7, [r1, #16]
 8007354:	2f00      	cmp	r7, #0
 8007356:	d0f6      	beq.n	8007346 <__sflush_r+0xae>
 8007358:	0793      	lsls	r3, r2, #30
 800735a:	680e      	ldr	r6, [r1, #0]
 800735c:	bf08      	it	eq
 800735e:	694b      	ldreq	r3, [r1, #20]
 8007360:	600f      	str	r7, [r1, #0]
 8007362:	bf18      	it	ne
 8007364:	2300      	movne	r3, #0
 8007366:	eba6 0807 	sub.w	r8, r6, r7
 800736a:	608b      	str	r3, [r1, #8]
 800736c:	f1b8 0f00 	cmp.w	r8, #0
 8007370:	dde9      	ble.n	8007346 <__sflush_r+0xae>
 8007372:	6a21      	ldr	r1, [r4, #32]
 8007374:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007376:	4643      	mov	r3, r8
 8007378:	463a      	mov	r2, r7
 800737a:	4628      	mov	r0, r5
 800737c:	47b0      	blx	r6
 800737e:	2800      	cmp	r0, #0
 8007380:	dc08      	bgt.n	8007394 <__sflush_r+0xfc>
 8007382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800738a:	81a3      	strh	r3, [r4, #12]
 800738c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007394:	4407      	add	r7, r0
 8007396:	eba8 0800 	sub.w	r8, r8, r0
 800739a:	e7e7      	b.n	800736c <__sflush_r+0xd4>
 800739c:	dfbffffe 	.word	0xdfbffffe

080073a0 <_fflush_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	690b      	ldr	r3, [r1, #16]
 80073a4:	4605      	mov	r5, r0
 80073a6:	460c      	mov	r4, r1
 80073a8:	b913      	cbnz	r3, 80073b0 <_fflush_r+0x10>
 80073aa:	2500      	movs	r5, #0
 80073ac:	4628      	mov	r0, r5
 80073ae:	bd38      	pop	{r3, r4, r5, pc}
 80073b0:	b118      	cbz	r0, 80073ba <_fflush_r+0x1a>
 80073b2:	6a03      	ldr	r3, [r0, #32]
 80073b4:	b90b      	cbnz	r3, 80073ba <_fflush_r+0x1a>
 80073b6:	f7ff fa03 	bl	80067c0 <__sinit>
 80073ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d0f3      	beq.n	80073aa <_fflush_r+0xa>
 80073c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80073c4:	07d0      	lsls	r0, r2, #31
 80073c6:	d404      	bmi.n	80073d2 <_fflush_r+0x32>
 80073c8:	0599      	lsls	r1, r3, #22
 80073ca:	d402      	bmi.n	80073d2 <_fflush_r+0x32>
 80073cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073ce:	f7ff fb98 	bl	8006b02 <__retarget_lock_acquire_recursive>
 80073d2:	4628      	mov	r0, r5
 80073d4:	4621      	mov	r1, r4
 80073d6:	f7ff ff5f 	bl	8007298 <__sflush_r>
 80073da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073dc:	07da      	lsls	r2, r3, #31
 80073de:	4605      	mov	r5, r0
 80073e0:	d4e4      	bmi.n	80073ac <_fflush_r+0xc>
 80073e2:	89a3      	ldrh	r3, [r4, #12]
 80073e4:	059b      	lsls	r3, r3, #22
 80073e6:	d4e1      	bmi.n	80073ac <_fflush_r+0xc>
 80073e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073ea:	f7ff fb8b 	bl	8006b04 <__retarget_lock_release_recursive>
 80073ee:	e7dd      	b.n	80073ac <_fflush_r+0xc>

080073f0 <__swhatbuf_r>:
 80073f0:	b570      	push	{r4, r5, r6, lr}
 80073f2:	460c      	mov	r4, r1
 80073f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f8:	2900      	cmp	r1, #0
 80073fa:	b096      	sub	sp, #88	@ 0x58
 80073fc:	4615      	mov	r5, r2
 80073fe:	461e      	mov	r6, r3
 8007400:	da0d      	bge.n	800741e <__swhatbuf_r+0x2e>
 8007402:	89a3      	ldrh	r3, [r4, #12]
 8007404:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007408:	f04f 0100 	mov.w	r1, #0
 800740c:	bf14      	ite	ne
 800740e:	2340      	movne	r3, #64	@ 0x40
 8007410:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007414:	2000      	movs	r0, #0
 8007416:	6031      	str	r1, [r6, #0]
 8007418:	602b      	str	r3, [r5, #0]
 800741a:	b016      	add	sp, #88	@ 0x58
 800741c:	bd70      	pop	{r4, r5, r6, pc}
 800741e:	466a      	mov	r2, sp
 8007420:	f000 f87c 	bl	800751c <_fstat_r>
 8007424:	2800      	cmp	r0, #0
 8007426:	dbec      	blt.n	8007402 <__swhatbuf_r+0x12>
 8007428:	9901      	ldr	r1, [sp, #4]
 800742a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800742e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007432:	4259      	negs	r1, r3
 8007434:	4159      	adcs	r1, r3
 8007436:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800743a:	e7eb      	b.n	8007414 <__swhatbuf_r+0x24>

0800743c <__smakebuf_r>:
 800743c:	898b      	ldrh	r3, [r1, #12]
 800743e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007440:	079d      	lsls	r5, r3, #30
 8007442:	4606      	mov	r6, r0
 8007444:	460c      	mov	r4, r1
 8007446:	d507      	bpl.n	8007458 <__smakebuf_r+0x1c>
 8007448:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	6123      	str	r3, [r4, #16]
 8007450:	2301      	movs	r3, #1
 8007452:	6163      	str	r3, [r4, #20]
 8007454:	b003      	add	sp, #12
 8007456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007458:	ab01      	add	r3, sp, #4
 800745a:	466a      	mov	r2, sp
 800745c:	f7ff ffc8 	bl	80073f0 <__swhatbuf_r>
 8007460:	9f00      	ldr	r7, [sp, #0]
 8007462:	4605      	mov	r5, r0
 8007464:	4639      	mov	r1, r7
 8007466:	4630      	mov	r0, r6
 8007468:	f7ff fbba 	bl	8006be0 <_malloc_r>
 800746c:	b948      	cbnz	r0, 8007482 <__smakebuf_r+0x46>
 800746e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007472:	059a      	lsls	r2, r3, #22
 8007474:	d4ee      	bmi.n	8007454 <__smakebuf_r+0x18>
 8007476:	f023 0303 	bic.w	r3, r3, #3
 800747a:	f043 0302 	orr.w	r3, r3, #2
 800747e:	81a3      	strh	r3, [r4, #12]
 8007480:	e7e2      	b.n	8007448 <__smakebuf_r+0xc>
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	6020      	str	r0, [r4, #0]
 8007486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800748a:	81a3      	strh	r3, [r4, #12]
 800748c:	9b01      	ldr	r3, [sp, #4]
 800748e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007492:	b15b      	cbz	r3, 80074ac <__smakebuf_r+0x70>
 8007494:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007498:	4630      	mov	r0, r6
 800749a:	f000 f851 	bl	8007540 <_isatty_r>
 800749e:	b128      	cbz	r0, 80074ac <__smakebuf_r+0x70>
 80074a0:	89a3      	ldrh	r3, [r4, #12]
 80074a2:	f023 0303 	bic.w	r3, r3, #3
 80074a6:	f043 0301 	orr.w	r3, r3, #1
 80074aa:	81a3      	strh	r3, [r4, #12]
 80074ac:	89a3      	ldrh	r3, [r4, #12]
 80074ae:	431d      	orrs	r5, r3
 80074b0:	81a5      	strh	r5, [r4, #12]
 80074b2:	e7cf      	b.n	8007454 <__smakebuf_r+0x18>

080074b4 <_putc_r>:
 80074b4:	b570      	push	{r4, r5, r6, lr}
 80074b6:	460d      	mov	r5, r1
 80074b8:	4614      	mov	r4, r2
 80074ba:	4606      	mov	r6, r0
 80074bc:	b118      	cbz	r0, 80074c6 <_putc_r+0x12>
 80074be:	6a03      	ldr	r3, [r0, #32]
 80074c0:	b90b      	cbnz	r3, 80074c6 <_putc_r+0x12>
 80074c2:	f7ff f97d 	bl	80067c0 <__sinit>
 80074c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074c8:	07d8      	lsls	r0, r3, #31
 80074ca:	d405      	bmi.n	80074d8 <_putc_r+0x24>
 80074cc:	89a3      	ldrh	r3, [r4, #12]
 80074ce:	0599      	lsls	r1, r3, #22
 80074d0:	d402      	bmi.n	80074d8 <_putc_r+0x24>
 80074d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074d4:	f7ff fb15 	bl	8006b02 <__retarget_lock_acquire_recursive>
 80074d8:	68a3      	ldr	r3, [r4, #8]
 80074da:	3b01      	subs	r3, #1
 80074dc:	2b00      	cmp	r3, #0
 80074de:	60a3      	str	r3, [r4, #8]
 80074e0:	da05      	bge.n	80074ee <_putc_r+0x3a>
 80074e2:	69a2      	ldr	r2, [r4, #24]
 80074e4:	4293      	cmp	r3, r2
 80074e6:	db12      	blt.n	800750e <_putc_r+0x5a>
 80074e8:	b2eb      	uxtb	r3, r5
 80074ea:	2b0a      	cmp	r3, #10
 80074ec:	d00f      	beq.n	800750e <_putc_r+0x5a>
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	6022      	str	r2, [r4, #0]
 80074f4:	701d      	strb	r5, [r3, #0]
 80074f6:	b2ed      	uxtb	r5, r5
 80074f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074fa:	07da      	lsls	r2, r3, #31
 80074fc:	d405      	bmi.n	800750a <_putc_r+0x56>
 80074fe:	89a3      	ldrh	r3, [r4, #12]
 8007500:	059b      	lsls	r3, r3, #22
 8007502:	d402      	bmi.n	800750a <_putc_r+0x56>
 8007504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007506:	f7ff fafd 	bl	8006b04 <__retarget_lock_release_recursive>
 800750a:	4628      	mov	r0, r5
 800750c:	bd70      	pop	{r4, r5, r6, pc}
 800750e:	4629      	mov	r1, r5
 8007510:	4622      	mov	r2, r4
 8007512:	4630      	mov	r0, r6
 8007514:	f7ff f9e7 	bl	80068e6 <__swbuf_r>
 8007518:	4605      	mov	r5, r0
 800751a:	e7ed      	b.n	80074f8 <_putc_r+0x44>

0800751c <_fstat_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	4d07      	ldr	r5, [pc, #28]	@ (800753c <_fstat_r+0x20>)
 8007520:	2300      	movs	r3, #0
 8007522:	4604      	mov	r4, r0
 8007524:	4608      	mov	r0, r1
 8007526:	4611      	mov	r1, r2
 8007528:	602b      	str	r3, [r5, #0]
 800752a:	f7fa f9b6 	bl	800189a <_fstat>
 800752e:	1c43      	adds	r3, r0, #1
 8007530:	d102      	bne.n	8007538 <_fstat_r+0x1c>
 8007532:	682b      	ldr	r3, [r5, #0]
 8007534:	b103      	cbz	r3, 8007538 <_fstat_r+0x1c>
 8007536:	6023      	str	r3, [r4, #0]
 8007538:	bd38      	pop	{r3, r4, r5, pc}
 800753a:	bf00      	nop
 800753c:	200008cc 	.word	0x200008cc

08007540 <_isatty_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	4d06      	ldr	r5, [pc, #24]	@ (800755c <_isatty_r+0x1c>)
 8007544:	2300      	movs	r3, #0
 8007546:	4604      	mov	r4, r0
 8007548:	4608      	mov	r0, r1
 800754a:	602b      	str	r3, [r5, #0]
 800754c:	f7fa f9b5 	bl	80018ba <_isatty>
 8007550:	1c43      	adds	r3, r0, #1
 8007552:	d102      	bne.n	800755a <_isatty_r+0x1a>
 8007554:	682b      	ldr	r3, [r5, #0]
 8007556:	b103      	cbz	r3, 800755a <_isatty_r+0x1a>
 8007558:	6023      	str	r3, [r4, #0]
 800755a:	bd38      	pop	{r3, r4, r5, pc}
 800755c:	200008cc 	.word	0x200008cc

08007560 <_sbrk_r>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4d06      	ldr	r5, [pc, #24]	@ (800757c <_sbrk_r+0x1c>)
 8007564:	2300      	movs	r3, #0
 8007566:	4604      	mov	r4, r0
 8007568:	4608      	mov	r0, r1
 800756a:	602b      	str	r3, [r5, #0]
 800756c:	f7fa f9be 	bl	80018ec <_sbrk>
 8007570:	1c43      	adds	r3, r0, #1
 8007572:	d102      	bne.n	800757a <_sbrk_r+0x1a>
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	b103      	cbz	r3, 800757a <_sbrk_r+0x1a>
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	bd38      	pop	{r3, r4, r5, pc}
 800757c:	200008cc 	.word	0x200008cc

08007580 <_init>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	bf00      	nop
 8007584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007586:	bc08      	pop	{r3}
 8007588:	469e      	mov	lr, r3
 800758a:	4770      	bx	lr

0800758c <_fini>:
 800758c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758e:	bf00      	nop
 8007590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007592:	bc08      	pop	{r3}
 8007594:	469e      	mov	lr, r3
 8007596:	4770      	bx	lr
