
BMS_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050cc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005290  08005290  00006290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d0  080052d0  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080052d0  080052d0  000062d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052d8  080052d8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052d8  080052d8  000062d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052dc  080052dc  000062dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080052e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000068  08005348  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08005348  0000741c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001355c  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000305a  00000000  00000000  0001a5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  0001d650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f01  00000000  00000000  0001e9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023bb3  00000000  00000000  0001f8a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180da  00000000  00000000  0004345c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4e3d  00000000  00000000  0005b536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130373  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005730  00000000  00000000  001303b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00135ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005278 	.word	0x08005278

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08005278 	.word	0x08005278

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <CAN1_send_mess>:
uint8_t               RxData[8];

uint8_t RxDatacheck = 0; //Flag that indicates that a message has been received

int CAN1_send_mess(CAN_HandleTypeDef *hcan, uint8_t *TxData)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]

	while (HAL_CAN_IsTxMessagePending(hcan, TxMailbox));
 800053a:	bf00      	nop
 800053c:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <CAN1_send_mess+0x40>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f002 f94b 	bl	80027de <HAL_CAN_IsTxMessagePending>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1f6      	bne.n	800053c <CAN1_send_mess+0xc>
	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800054e:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <CAN1_send_mess+0x40>)
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	4908      	ldr	r1, [pc, #32]	@ (8000574 <CAN1_send_mess+0x44>)
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f002 f872 	bl	800263e <HAL_CAN_AddTxMessage>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <CAN1_send_mess+0x34>
	{
	   CAN_Error_Handler ();
 8000560:	f000 f83c 	bl	80005dc <CAN_Error_Handler>
	{
		// ✅ Set breakpoint here and inspect RxData[] in debugger
	}

*/
	return 0;
 8000564:	2300      	movs	r3, #0
}
 8000566:	4618      	mov	r0, r3
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	2000009c 	.word	0x2000009c
 8000574:	20000084 	.word	0x20000084

08000578 <CAN_set_std_header>:
	TxHeader.DLC = TxDLC;

}

void CAN_set_std_header(uint16_t std_tx_id, uint8_t dlc)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	460a      	mov	r2, r1
 8000582:	80fb      	strh	r3, [r7, #6]
 8000584:	4613      	mov	r3, r2
 8000586:	717b      	strb	r3, [r7, #5]

	TxHeader.IDE = CAN_ID_STD;
 8000588:	4b07      	ldr	r3, [pc, #28]	@ (80005a8 <CAN_set_std_header+0x30>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = std_tx_id;
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	4a05      	ldr	r2, [pc, #20]	@ (80005a8 <CAN_set_std_header+0x30>)
 8000592:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = dlc;
 8000594:	797b      	ldrb	r3, [r7, #5]
 8000596:	4a04      	ldr	r2, [pc, #16]	@ (80005a8 <CAN_set_std_header+0x30>)
 8000598:	6113      	str	r3, [r2, #16]

}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000084 	.word	0x20000084

080005ac <CAN_set_ext_header>:

void CAN_set_ext_header(uint32_t ext_tx_id, uint8_t dlc)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]

	TxHeader.IDE = CAN_ID_STD;
 80005b8:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <CAN_set_ext_header+0x2c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
	TxHeader.ExtId = ext_tx_id;
 80005be:	4a06      	ldr	r2, [pc, #24]	@ (80005d8 <CAN_set_ext_header+0x2c>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6053      	str	r3, [r2, #4]
	TxHeader.DLC = dlc;
 80005c4:	78fb      	ldrb	r3, [r7, #3]
 80005c6:	4a04      	ldr	r2, [pc, #16]	@ (80005d8 <CAN_set_ext_header+0x2c>)
 80005c8:	6113      	str	r3, [r2, #16]

}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000084 	.word	0x20000084

080005dc <CAN_Error_Handler>:



void CAN_Error_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e0:	b672      	cpsid	i
}
 80005e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <CAN_Error_Handler+0x8>

080005e8 <CAN_Filter_Config>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void CAN_Filter_Config(CAN_HandleTypeDef *hcan)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08c      	sub	sp, #48	@ 0x30
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]

    CAN_FilterTypeDef filterConfig;
    filterConfig.FilterBank = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]
    filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005f4:	2300      	movs	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
    filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005f8:	2301      	movs	r3, #1
 80005fa:	627b      	str	r3, [r7, #36]	@ 0x24
    filterConfig.FilterIdHigh = 0x0000;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
    filterConfig.FilterIdLow = 0x0000;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
    filterConfig.FilterMaskIdHigh = 0x0000;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
    filterConfig.FilterMaskIdLow = 0x0000;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
    filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
    filterConfig.FilterActivation = ENABLE;
 8000610:	2301      	movs	r3, #1
 8000612:	62bb      	str	r3, [r7, #40]	@ 0x28
    filterConfig.SlaveStartFilterBank = 14;
 8000614:	230e      	movs	r3, #14
 8000616:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	4619      	mov	r1, r3
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f001 fea0 	bl	8002364 <HAL_CAN_ConfigFilter>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <CAN_Filter_Config+0x46>
    {
        CAN_Error_Handler();
 800062a:	f7ff ffd7 	bl	80005dc <CAN_Error_Handler>
    }
}
 800062e:	bf00      	nop
 8000630:	3730      	adds	r7, #48	@ 0x30
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <CAN_Activate_Interrupts>:

void CAN_Activate_Interrupts(CAN_HandleTypeDef *hcan)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000640:	2102      	movs	r1, #2
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f002 f8ef 	bl	8002826 <HAL_CAN_ActivateNotification>

    CAN_Filter_Config(hcan);
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ffcd 	bl	80005e8 <CAN_Filter_Config>

    if (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV) ||
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0302 	and.w	r3, r3, #2
 8000658:	2b02      	cmp	r3, #2
 800065a:	d006      	beq.n	800066a <CAN_Activate_Interrupts+0x32>
        __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f003 0304 	and.w	r3, r3, #4
    if (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV) ||
 8000666:	2b04      	cmp	r3, #4
 8000668:	d108      	bne.n	800067c <CAN_Activate_Interrupts+0x44>
    {
        printf("CAN in error state, attempting reset\n");
 800066a:	480a      	ldr	r0, [pc, #40]	@ (8000694 <CAN_Activate_Interrupts+0x5c>)
 800066c:	f004 fa70 	bl	8004b50 <puts>
        HAL_CAN_Stop(hcan);
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f001 ff9b 	bl	80025ac <HAL_CAN_Stop>
        HAL_CAN_Init(hcan);
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f001 fd78 	bl	800216c <HAL_CAN_Init>
    }

    if (HAL_CAN_Start(hcan) != HAL_OK)
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f001 ff51 	bl	8002524 <HAL_CAN_Start>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <CAN_Activate_Interrupts+0x54>
    {
        CAN_Error_Handler();
 8000688:	f7ff ffa8 	bl	80005dc <CAN_Error_Handler>
    }
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	08005290 	.word	0x08005290

08000698 <charging_balancing_mode>:
extern volatile uint8_t  all_connection_states;

uint8_t charging_balancing_states = 0; //b0: all cells at target value, b1: balancing done, b2: balancing charge not present,


void charging_balancing_mode(){
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0

	uint8_t skip = 1; //Initialize quit to 1 so it runs skips charging on first iteration
 800069e:	2301      	movs	r3, #1
 80006a0:	71fb      	strb	r3, [r7, #7]

	ask_for_voltages();
 80006a2:	f001 f959 	bl	8001958 <ask_for_voltages>

	HAL_Delay(100);
 80006a6:	2064      	movs	r0, #100	@ 0x64
 80006a8:	f001 fada 	bl	8001c60 <HAL_Delay>

	if(all_cells_under_threshold()){
 80006ac:	f000 f910 	bl	80008d0 <all_cells_under_threshold>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <charging_balancing_mode+0x22>
		skip = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	71fb      	strb	r3, [r7, #7]
	}

	// 3 different exit possibilities : Charger disconnected, No balancing charge, Balancing done
	while(1){

		if(skip){
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d016      	beq.n	80006ee <charging_balancing_mode+0x56>
			start_charging_mode();
 80006c0:	f000 f848 	bl	8000754 <start_charging_mode>

			// While charger is connected
			while((all_connection_states & CHARGER_CONN_MASK) != 0){
 80006c4:	e007      	b.n	80006d6 <charging_balancing_mode+0x3e>

				//	adjust_charging();
				if(!all_cells_under_threshold())
 80006c6:	f000 f903 	bl	80008d0 <all_cells_under_threshold>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00a      	beq.n	80006e6 <charging_balancing_mode+0x4e>
					break;

				HAL_Delay(CHARGING_LOOP_DELAY);
 80006d0:	200a      	movs	r0, #10
 80006d2:	f001 fac5 	bl	8001c60 <HAL_Delay>
			while((all_connection_states & CHARGER_CONN_MASK) != 0){
 80006d6:	4b1d      	ldr	r3, [pc, #116]	@ (800074c <charging_balancing_mode+0xb4>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	f003 0302 	and.w	r3, r3, #2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d1f0      	bne.n	80006c6 <charging_balancing_mode+0x2e>
 80006e4:	e000      	b.n	80006e8 <charging_balancing_mode+0x50>
					break;
 80006e6:	bf00      	nop
			}

			stop_charging_mode();
 80006e8:	f000 f840 	bl	800076c <stop_charging_mode>
 80006ec:	e001      	b.n	80006f2 <charging_balancing_mode+0x5a>
		} else{

			skip = 0; // Once we skipped one time we run it normally
 80006ee:	2300      	movs	r3, #0
 80006f0:	71fb      	strb	r3, [r7, #7]
		}

		// If charger is disconnected, skip balancing to maintain battery level
		if((all_connection_states & CHARGER_CONN_MASK) == 0)
 80006f2:	4b16      	ldr	r3, [pc, #88]	@ (800074c <charging_balancing_mode+0xb4>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	f003 0302 	and.w	r3, r3, #2
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d01b      	beq.n	8000738 <charging_balancing_mode+0xa0>
			break;


		start_balancing_mode();
 8000700:	f000 f83e 	bl	8000780 <start_balancing_mode>

		while(1){

			// If all cells at target value or balancing done or balancing charge not present
			if(charging_balancing_states != 0)
 8000704:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <charging_balancing_mode+0xb8>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d103      	bne.n	8000714 <charging_balancing_mode+0x7c>
				break;

			HAL_Delay(BALANCING_LOOP_DELAY);
 800070c:	200a      	movs	r0, #10
 800070e:	f001 faa7 	bl	8001c60 <HAL_Delay>
			if(charging_balancing_states != 0)
 8000712:	e7f7      	b.n	8000704 <charging_balancing_mode+0x6c>
				break;
 8000714:	bf00      	nop

		}

		stop_balancing_mode();
 8000716:	f000 f83f 	bl	8000798 <stop_balancing_mode>


		check_total_battery_state();
 800071a:	f000 f8e1 	bl	80008e0 <check_total_battery_state>

		// If balancing done, quit charging/balancing mode
		if((charging_balancing_states & BALANCING_DONE_MASK) != 0)
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <charging_balancing_mode+0xb8>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	2b00      	cmp	r3, #0
 8000728:	d108      	bne.n	800073c <charging_balancing_mode+0xa4>
			break;

		// If balancing charge not present, quit charging/balancing mode
		if((charging_balancing_states & BALANCING_CHARGE_PRESENT_MASK) != 0)
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <charging_balancing_mode+0xb8>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	2b00      	cmp	r3, #0
 8000734:	d104      	bne.n	8000740 <charging_balancing_mode+0xa8>
	while(1){
 8000736:	e7c0      	b.n	80006ba <charging_balancing_mode+0x22>
			break;
 8000738:	bf00      	nop
 800073a:	e002      	b.n	8000742 <charging_balancing_mode+0xaa>
			break;
 800073c:	bf00      	nop
 800073e:	e000      	b.n	8000742 <charging_balancing_mode+0xaa>
			break;
 8000740:	bf00      	nop

	}

}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200002c6 	.word	0x200002c6
 8000750:	200000a0 	.word	0x200000a0

08000754 <start_charging_mode>:


void start_charging_mode()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	auto_ask_for_temperatures(CHARGING_TEMP_INFO_DELAY); // 10 ms delay between each measure
 8000758:	200a      	movs	r0, #10
 800075a:	f001 f94d 	bl	80019f8 <auto_ask_for_temperatures>
	auto_ask_for_voltages(CHARGING_VOLT_INFO_DELAY);   // 10 ms delay between each measure
 800075e:	200a      	movs	r0, #10
 8000760:	f001 f916 	bl	8001990 <auto_ask_for_voltages>
	start_charging();
 8000764:	f000 f828 	bl	80007b8 <start_charging>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <stop_charging_mode>:

void stop_charging_mode()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	stop_auto_ask_for_temperatures();
 8000770:	f001 f95e 	bl	8001a30 <stop_auto_ask_for_temperatures>
	stop_auto_ask_for_voltages();
 8000774:	f001 f928 	bl	80019c8 <stop_auto_ask_for_voltages>
	stop_charging();
 8000778:	f000 f864 	bl	8000844 <stop_charging>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <start_balancing_mode>:

void start_balancing_mode()
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	auto_ask_for_balancing_info(BALANCING_BAL_INFO_DELAY);
 8000784:	200a      	movs	r0, #10
 8000786:	f001 f96b 	bl	8001a60 <auto_ask_for_balancing_info>
	auto_ask_for_temperatures(BALANCING_TEMP_INFO_DELAY);
 800078a:	200a      	movs	r0, #10
 800078c:	f001 f934 	bl	80019f8 <auto_ask_for_temperatures>
	start_balancing();
 8000790:	f001 f99a 	bl	8001ac8 <start_balancing>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <stop_balancing_mode>:

void stop_balancing_mode()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	stop_auto_ask_for_balancing_info();
 800079c:	f001 f97c 	bl	8001a98 <stop_auto_ask_for_balancing_info>
	stop_auto_ask_for_temperatures();
 80007a0:	f001 f946 	bl	8001a30 <stop_auto_ask_for_temperatures>
	stop_balancing();
 80007a4:	f001 f9a8 	bl	8001af8 <stop_balancing>

//	Reset flags
	charging_balancing_states = 0;
 80007a8:	4b02      	ldr	r3, [pc, #8]	@ (80007b4 <stop_balancing_mode+0x1c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000a0 	.word	0x200000a0

080007b8 <start_charging>:

void start_charging()
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
	uint8_t message[8] = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]

	uint16_t max_voltage = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	81fb      	strh	r3, [r7, #14]
	uint16_t max_current = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	81bb      	strh	r3, [r7, #12]


	max_voltage = (uint16_t)(CHARGER_MAX_VOLTAGE * 10);
 80007ce:	f240 43ec 	movw	r3, #1260	@ 0x4ec
 80007d2:	81fb      	strh	r3, [r7, #14]
	max_current = (uint16_t)(CHARGER_MAX_CURRENT * 10);
 80007d4:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 80007d8:	81bb      	strh	r3, [r7, #12]

//	Max voltage value high byte then low byte
	message[0] = (uint8_t)(max_voltage && 0xFF00) >> 8;
 80007da:	89fb      	ldrh	r3, [r7, #14]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	bf14      	ite	ne
 80007e0:	2301      	movne	r3, #1
 80007e2:	2300      	moveq	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	121b      	asrs	r3, r3, #8
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	713b      	strb	r3, [r7, #4]
	message[1] = (uint8_t)(max_voltage && 0x00FF);
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf14      	ite	ne
 80007f4:	2301      	movne	r3, #1
 80007f6:	2300      	moveq	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	717b      	strb	r3, [r7, #5]

//	Max current value high byte then low byte
	message[2] = (uint8_t)(max_current && 0xFF00) >> 8;
 80007fe:	89bb      	ldrh	r3, [r7, #12]
 8000800:	2b00      	cmp	r3, #0
 8000802:	bf14      	ite	ne
 8000804:	2301      	movne	r3, #1
 8000806:	2300      	moveq	r3, #0
 8000808:	b2db      	uxtb	r3, r3
 800080a:	b2db      	uxtb	r3, r3
 800080c:	121b      	asrs	r3, r3, #8
 800080e:	b2db      	uxtb	r3, r3
 8000810:	71bb      	strb	r3, [r7, #6]
	message[3] = (uint8_t)(max_current && 0x00FF);
 8000812:	89bb      	ldrh	r3, [r7, #12]
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf14      	ite	ne
 8000818:	2301      	movne	r3, #1
 800081a:	2300      	moveq	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	b2db      	uxtb	r3, r3
 8000820:	71fb      	strb	r3, [r7, #7]

//	Start charging
	message[4] = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	723b      	strb	r3, [r7, #8]

	CAN_set_ext_header(CHARGER_TX_HEADER, CHARGER_MESS_BYTES_NUM);
 8000826:	2108      	movs	r1, #8
 8000828:	2000      	movs	r0, #0
 800082a:	f7ff febf 	bl	80005ac <CAN_set_ext_header>

	CAN1_send_mess(&hcan2, message);
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4619      	mov	r1, r3
 8000832:	4803      	ldr	r0, [pc, #12]	@ (8000840 <start_charging+0x88>)
 8000834:	f7ff fe7c 	bl	8000530 <CAN1_send_mess>

}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	200000ec 	.word	0x200000ec

08000844 <stop_charging>:

void stop_charging()
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
	uint8_t message[8] = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]

	uint16_t max_voltage = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	81fb      	strh	r3, [r7, #14]
	uint16_t max_current = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	81bb      	strh	r3, [r7, #12]


	max_voltage = (uint16_t)(CHARGER_MAX_VOLTAGE * 10);
 800085a:	f240 43ec 	movw	r3, #1260	@ 0x4ec
 800085e:	81fb      	strh	r3, [r7, #14]
	max_current = (uint16_t)(CHARGER_MAX_CURRENT * 10);
 8000860:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 8000864:	81bb      	strh	r3, [r7, #12]

//	Max voltage value high byte then low byte
	message[0] = (uint8_t)(max_voltage && 0xFF00) >> 8;
 8000866:	89fb      	ldrh	r3, [r7, #14]
 8000868:	2b00      	cmp	r3, #0
 800086a:	bf14      	ite	ne
 800086c:	2301      	movne	r3, #1
 800086e:	2300      	moveq	r3, #0
 8000870:	b2db      	uxtb	r3, r3
 8000872:	b2db      	uxtb	r3, r3
 8000874:	121b      	asrs	r3, r3, #8
 8000876:	b2db      	uxtb	r3, r3
 8000878:	713b      	strb	r3, [r7, #4]
	message[1] = (uint8_t)(max_voltage && 0x00FF);
 800087a:	89fb      	ldrh	r3, [r7, #14]
 800087c:	2b00      	cmp	r3, #0
 800087e:	bf14      	ite	ne
 8000880:	2301      	movne	r3, #1
 8000882:	2300      	moveq	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	b2db      	uxtb	r3, r3
 8000888:	717b      	strb	r3, [r7, #5]

//	Max current value high byte then low byte
	message[2] = (uint8_t)(max_current && 0xFF00) >> 8;
 800088a:	89bb      	ldrh	r3, [r7, #12]
 800088c:	2b00      	cmp	r3, #0
 800088e:	bf14      	ite	ne
 8000890:	2301      	movne	r3, #1
 8000892:	2300      	moveq	r3, #0
 8000894:	b2db      	uxtb	r3, r3
 8000896:	b2db      	uxtb	r3, r3
 8000898:	121b      	asrs	r3, r3, #8
 800089a:	b2db      	uxtb	r3, r3
 800089c:	71bb      	strb	r3, [r7, #6]
	message[3] = (uint8_t)(max_current && 0x00FF);
 800089e:	89bb      	ldrh	r3, [r7, #12]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	bf14      	ite	ne
 80008a4:	2301      	movne	r3, #1
 80008a6:	2300      	moveq	r3, #0
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	71fb      	strb	r3, [r7, #7]

//	Stop charging
	message[4] = 1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	723b      	strb	r3, [r7, #8]

	CAN_set_ext_header(CHARGER_TX_HEADER, CHARGER_MESS_BYTES_NUM);
 80008b2:	2108      	movs	r1, #8
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff fe79 	bl	80005ac <CAN_set_ext_header>
	CAN1_send_mess(&hcan2, message);
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	4619      	mov	r1, r3
 80008be:	4803      	ldr	r0, [pc, #12]	@ (80008cc <stop_charging+0x88>)
 80008c0:	f7ff fe36 	bl	8000530 <CAN1_send_mess>

}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200000ec 	.word	0x200000ec

080008d0 <all_cells_under_threshold>:


int all_cells_under_threshold()
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
	//Check that cells are all under max voltage and temperature
	return 0;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <check_total_battery_state>:

void check_total_battery_state()
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	ask_for_voltages();
 80008e4:	f001 f838 	bl	8001958 <ask_for_voltages>
	HAL_Delay(100);
 80008e8:	2064      	movs	r0, #100	@ 0x64
 80008ea:	f001 f9b9 	bl	8001c60 <HAL_Delay>

	//check if all cells are balanced and near total pack target voltage
	//update b2 of 'charging_balancing_states' if these two conditions are met

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <HAL_TIM_PeriodElapsedCallback>:
	//    	Start timer and turn ON Yellow LED
	    	HAL_TIM_Base_Start_IT(&htim3);
	        HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_SET); // Turn ON LED
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]


	if (htim->Instance == TIM2) {  // Check if it's the correct timer
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000904:	d161      	bne.n	80009ca <HAL_TIM_PeriodElapsedCallback+0xd6>

    	if((timer_count % HB_10MS_PERIODS) == 0){
 8000906:	4b3a      	ldr	r3, [pc, #232]	@ (80009f0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4a39      	ldr	r2, [pc, #228]	@ (80009f4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800090e:	fba2 1203 	umull	r1, r2, r2, r3
 8000912:	0912      	lsrs	r2, r2, #4
 8000914:	2132      	movs	r1, #50	@ 0x32
 8000916:	fb01 f202 	mul.w	r2, r1, r2
 800091a:	1a9b      	subs	r3, r3, r2
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d104      	bne.n	800092c <HAL_TIM_PeriodElapsedCallback+0x38>
    		HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin); // Toggle LED
 8000922:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000926:	4834      	ldr	r0, [pc, #208]	@ (80009f8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000928:	f002 fa63 	bl	8002df2 <HAL_GPIO_TogglePin>
    	}

    	if((timer_count % CHARGER_CONNECTION_10MS_PERIODS) == 0){
 800092c:	4b30      	ldr	r3, [pc, #192]	@ (80009f0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800092e:	781b      	ldrb	r3, [r3, #0]

    	}

    	if((timer_count % ASK_SLAVE_FOR_INFO_10MS_PERIODS) == 0){
 8000930:	4b2f      	ldr	r3, [pc, #188]	@ (80009f0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000932:	781b      	ldrb	r3, [r3, #0]

    	}


    	// High voltage light blinking and activating logic
    	if((timer_count % SLOW_BLINKING_HV_10MS_PERIODS) == 0)
 8000934:	4b2e      	ldr	r3, [pc, #184]	@ (80009f0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4a2e      	ldr	r2, [pc, #184]	@ (80009f4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800093c:	fba2 1203 	umull	r1, r2, r2, r3
 8000940:	0912      	lsrs	r2, r2, #4
 8000942:	2132      	movs	r1, #50	@ 0x32
 8000944:	fb01 f202 	mul.w	r2, r1, r2
 8000948:	1a9b      	subs	r3, r3, r2
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b00      	cmp	r3, #0
 800094e:	d108      	bne.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x6e>
    	{
    		//  If the precharge contactor is ON, blink the HV light
    		if(blinking_HV_led == 1)
 8000950:	4b2a      	ldr	r3, [pc, #168]	@ (80009fc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b01      	cmp	r3, #1
 8000958:	d103      	bne.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x6e>
    			HAL_GPIO_TogglePin(LIGHT_GPIO_Port, LIGHT_Pin);
 800095a:	2108      	movs	r1, #8
 800095c:	4828      	ldr	r0, [pc, #160]	@ (8000a00 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800095e:	f002 fa48 	bl	8002df2 <HAL_GPIO_TogglePin>
    	}
    	if((timer_count % FAST_BLINKING_HV_10MS_PERIODS) == 0)
 8000962:	4b23      	ldr	r3, [pc, #140]	@ (80009f0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b26      	ldr	r3, [pc, #152]	@ (8000a04 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800096a:	fba3 1302 	umull	r1, r3, r3, r2
 800096e:	08d9      	lsrs	r1, r3, #3
 8000970:	460b      	mov	r3, r1
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	440b      	add	r3, r1
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	b2db      	uxtb	r3, r3
 800097c:	2b00      	cmp	r3, #0
 800097e:	d108      	bne.n	8000992 <HAL_TIM_PeriodElapsedCallback+0x9e>
    	{
    		//  If the precharge contactor and the main contactor are ON, blink the HV light rapidly
    		if(blinking_HV_led == 2)
 8000980:	4b1e      	ldr	r3, [pc, #120]	@ (80009fc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b02      	cmp	r3, #2
 8000988:	d103      	bne.n	8000992 <HAL_TIM_PeriodElapsedCallback+0x9e>
    			HAL_GPIO_TogglePin(LIGHT_GPIO_Port, LIGHT_Pin);
 800098a:	2108      	movs	r1, #8
 800098c:	481c      	ldr	r0, [pc, #112]	@ (8000a00 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800098e:	f002 fa30 	bl	8002df2 <HAL_GPIO_TogglePin>
    	}

    	// If timer counter has not reached max value, increment
    	((timer_count + 1) % TIMER_MAX) ? timer_count = 0 : timer_count++;
 8000992:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	1c5a      	adds	r2, r3, #1
 800099a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800099c:	fb83 1302 	smull	r1, r3, r3, r2
 80009a0:	1199      	asrs	r1, r3, #6
 80009a2:	17d3      	asrs	r3, r2, #31
 80009a4:	1acb      	subs	r3, r1, r3
 80009a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009aa:	fb01 f303 	mul.w	r3, r1, r3
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d003      	beq.n	80009bc <HAL_TIM_PeriodElapsedCallback+0xc8>
 80009b4:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
 80009ba:	e006      	b.n	80009ca <HAL_TIM_PeriodElapsedCallback+0xd6>
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	3301      	adds	r3, #1
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80009c8:	701a      	strb	r2, [r3, #0]
    }


	// Timer that handles the activation time of yellow led on CAN package Rx/Tx
    if (htim->Instance == TIM3) {
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a0f      	ldr	r2, [pc, #60]	@ (8000a0c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d108      	bne.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0xf2>
        HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET); // Turn off LED
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009da:	4807      	ldr	r0, [pc, #28]	@ (80009f8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80009dc:	f002 f9f0 	bl	8002dc0 <HAL_GPIO_WritePin>
        HAL_TIM_Base_Stop_IT(&htim3);
 80009e0:	480b      	ldr	r0, [pc, #44]	@ (8000a10 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80009e2:	f003 fbb9 	bl	8004158 <HAL_TIM_Base_Stop_IT>
    }

}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200002c5 	.word	0x200002c5
 80009f4:	51eb851f 	.word	0x51eb851f
 80009f8:	40020400 	.word	0x40020400
 80009fc:	200002c7 	.word	0x200002c7
 8000a00:	40020000 	.word	0x40020000
 8000a04:	cccccccd 	.word	0xcccccccd
 8000a08:	10624dd3 	.word	0x10624dd3
 8000a0c:	40000400 	.word	0x40000400
 8000a10:	20000204 	.word	0x20000204

08000a14 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == IGNITION_Pin){ //Ignition interrupt triggered on both rising and falling edge.
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	2b20      	cmp	r3, #32
 8000a22:	d108      	bne.n	8000a36 <HAL_GPIO_EXTI_Callback+0x22>

		all_connection_states ^= IGNITION_MASK; //Ignition bit is toggled when edge is detected
 8000a24:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <HAL_GPIO_EXTI_Callback+0x60>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	f083 0301 	eor.w	r3, r3, #1
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <HAL_GPIO_EXTI_Callback+0x60>)
 8000a32:	701a      	strb	r2, [r3, #0]
		deactivate_precharge_contactor();

	}


}
 8000a34:	e01a      	b.n	8000a6c <HAL_GPIO_EXTI_Callback+0x58>
	}else if(GPIO_Pin == CHARGER_DETECT_Pin){ //Ignition interrupt triggered on both rising and falling edge.
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	2b08      	cmp	r3, #8
 8000a3a:	d108      	bne.n	8000a4e <HAL_GPIO_EXTI_Callback+0x3a>
		all_connection_states ^= IGNITION_MASK; //Charger bit is toggled when edge is detected
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <HAL_GPIO_EXTI_Callback+0x60>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	f083 0301 	eor.w	r3, r3, #1
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <HAL_GPIO_EXTI_Callback+0x60>)
 8000a4a:	701a      	strb	r2, [r3, #0]
}
 8000a4c:	e00e      	b.n	8000a6c <HAL_GPIO_EXTI_Callback+0x58>
	}else if(GPIO_Pin == EMERGENCY_STOP_Pin){
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	2b10      	cmp	r3, #16
 8000a52:	d10b      	bne.n	8000a6c <HAL_GPIO_EXTI_Callback+0x58>
		all_connection_states |= IGNITION_MASK;
 8000a54:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <HAL_GPIO_EXTI_Callback+0x60>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b04      	ldr	r3, [pc, #16]	@ (8000a74 <HAL_GPIO_EXTI_Callback+0x60>)
 8000a62:	701a      	strb	r2, [r3, #0]
		deactivate_main_contactor();
 8000a64:	f000 fbcc 	bl	8001200 <deactivate_main_contactor>
		deactivate_precharge_contactor();
 8000a68:	f000 fbe2 	bl	8001230 <deactivate_precharge_contactor>
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200002c6 	.word	0x200002c6

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7c:	f001 f87e 	bl	8001b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a80:	f000 f82a 	bl	8000ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a84:	f000 fa52 	bl	8000f2c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a88:	f000 f90c 	bl	8000ca4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000a8c:	f000 f938 	bl	8000d00 <MX_I2C3_Init>
  MX_USART6_IRDA_Init();
 8000a90:	f000 fa26 	bl	8000ee0 <MX_USART6_IRDA_Init>
  MX_ADC1_Init();
 8000a94:	f000 f87e 	bl	8000b94 <MX_ADC1_Init>
  MX_USART1_IRDA_Init();
 8000a98:	f000 f9fc 	bl	8000e94 <MX_USART1_IRDA_Init>
  MX_TIM2_Init();
 8000a9c:	f000 f95e 	bl	8000d5c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000aa0:	f000 f9aa 	bl	8000df8 <MX_TIM3_Init>
  MX_CAN2_Init();
 8000aa4:	f000 f8c8 	bl	8000c38 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
	ITM_Init(); // Init ITM to send data through ITM port 0
 8000aa8:	f000 fb8e 	bl	80011c8 <ITM_Init>

	HAL_TIM_Base_Start_IT(&htim2); //Start Main timer (10 ms)
 8000aac:	4807      	ldr	r0, [pc, #28]	@ (8000acc <main+0x54>)
 8000aae:	f003 fae3 	bl	8004078 <HAL_TIM_Base_Start_IT>

	CAN_Activate_Interrupts(&hcan2);
 8000ab2:	4807      	ldr	r0, [pc, #28]	@ (8000ad0 <main+0x58>)
 8000ab4:	f7ff fdc0 	bl	8000638 <CAN_Activate_Interrupts>
    /* USER CODE BEGIN 3 */


		//if((all_connection_states & CHARGER_CONN_MASK) != 0){

		charging_balancing_mode();
 8000ab8:	f7ff fdee 	bl	8000698 <charging_balancing_mode>


		//}


		master_mode = 0;
 8000abc:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <main+0x5c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
		HAL_Delay(MAIN_LOOP_DELAY_MS);
 8000ac2:	2014      	movs	r0, #20
 8000ac4:	f001 f8cc 	bl	8001c60 <HAL_Delay>
		charging_balancing_mode();
 8000ac8:	bf00      	nop
 8000aca:	e7f5      	b.n	8000ab8 <main+0x40>
 8000acc:	200001bc 	.word	0x200001bc
 8000ad0:	200000ec 	.word	0x200000ec
 8000ad4:	200002c4 	.word	0x200002c4

08000ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b094      	sub	sp, #80	@ 0x50
 8000adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	2234      	movs	r2, #52	@ 0x34
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f004 f912 	bl	8004d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	4b22      	ldr	r3, [pc, #136]	@ (8000b8c <SystemClock_Config+0xb4>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b04:	4a21      	ldr	r2, [pc, #132]	@ (8000b8c <SystemClock_Config+0xb4>)
 8000b06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b8c <SystemClock_Config+0xb4>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b18:	2300      	movs	r3, #0
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <SystemClock_Config+0xb8>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a1b      	ldr	r2, [pc, #108]	@ (8000b90 <SystemClock_Config+0xb8>)
 8000b22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b26:	6013      	str	r3, [r2, #0]
 8000b28:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <SystemClock_Config+0xb8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 ffc1 	bl	8003ad0 <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000b54:	f000 fb4e 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b58:	230f      	movs	r3, #15
 8000b5a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b6c:	f107 0308 	add.w	r3, r7, #8
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f002 fd8e 	bl	8003694 <HAL_RCC_ClockConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b7e:	f000 fb39 	bl	80011f4 <Error_Handler>
  }
}
 8000b82:	bf00      	nop
 8000b84:	3750      	adds	r7, #80	@ 0x50
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40007000 	.word	0x40007000

08000b94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ba6:	4b21      	ldr	r3, [pc, #132]	@ (8000c2c <MX_ADC1_Init+0x98>)
 8000ba8:	4a21      	ldr	r2, [pc, #132]	@ (8000c30 <MX_ADC1_Init+0x9c>)
 8000baa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000bac:	4b1f      	ldr	r3, [pc, #124]	@ (8000c2c <MX_ADC1_Init+0x98>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <MX_ADC1_Init+0x98>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <MX_ADC1_Init+0x98>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <MX_ADC1_Init+0x98>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bc4:	4b19      	ldr	r3, [pc, #100]	@ (8000c2c <MX_ADC1_Init+0x98>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bcc:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <MX_ADC1_Init+0x98>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd2:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <MX_ADC1_Init+0x98>)
 8000bd4:	4a17      	ldr	r2, [pc, #92]	@ (8000c34 <MX_ADC1_Init+0xa0>)
 8000bd6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <MX_ADC1_Init+0x98>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bde:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <MX_ADC1_Init+0x98>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <MX_ADC1_Init+0x98>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <MX_ADC1_Init+0x98>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bf2:	480e      	ldr	r0, [pc, #56]	@ (8000c2c <MX_ADC1_Init+0x98>)
 8000bf4:	f001 f858 	bl	8001ca8 <HAL_ADC_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bfe:	f000 faf9 	bl	80011f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000c02:	2309      	movs	r3, #9
 8000c04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c06:	2301      	movs	r3, #1
 8000c08:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c0e:	463b      	mov	r3, r7
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	@ (8000c2c <MX_ADC1_Init+0x98>)
 8000c14:	f001 f88c 	bl	8001d30 <HAL_ADC_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c1e:	f000 fae9 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200000a4 	.word	0x200000a4
 8000c30:	40012000 	.word	0x40012000
 8000c34:	0f000001 	.word	0x0f000001

08000c38 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN2_Init 1 */


  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	@ (8000c9c <MX_CAN2_Init+0x64>)
 8000c3e:	4a18      	ldr	r2, [pc, #96]	@ (8000ca0 <MX_CAN2_Init+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000c42:	4b16      	ldr	r3, [pc, #88]	@ (8000c9c <MX_CAN2_Init+0x64>)
 8000c44:	2210      	movs	r2, #16
 8000c46:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000c48:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <MX_CAN2_Init+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <MX_CAN2_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <MX_CAN2_Init+0x64>)
 8000c56:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c5a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <MX_CAN2_Init+0x64>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <MX_CAN2_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <MX_CAN2_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <MX_CAN2_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000c74:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <MX_CAN2_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <MX_CAN2_Init+0x64>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <MX_CAN2_Init+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	@ (8000c9c <MX_CAN2_Init+0x64>)
 8000c88:	f001 fa70 	bl	800216c <HAL_CAN_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8000c92:	f000 faaf 	bl	80011f4 <Error_Handler>
  CAN2->MCR &= ~CAN_MCR_INRQ;
  while ((CAN2->MSR & CAN_MSR_INAK) != 0);  // Wait to leave Init mode
*/
  /* USER CODE END CAN2_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000ec 	.word	0x200000ec
 8000ca0:	40006800 	.word	0x40006800

08000ca4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <MX_I2C1_Init+0x50>)
 8000caa:	4a13      	ldr	r2, [pc, #76]	@ (8000cf8 <MX_I2C1_Init+0x54>)
 8000cac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cae:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <MX_I2C1_Init+0x50>)
 8000cb0:	4a12      	ldr	r2, [pc, #72]	@ (8000cfc <MX_I2C1_Init+0x58>)
 8000cb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <MX_I2C1_Init+0x50>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <MX_I2C1_Init+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <MX_I2C1_Init+0x50>)
 8000cc2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <MX_I2C1_Init+0x50>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cce:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <MX_I2C1_Init+0x50>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd4:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <MX_I2C1_Init+0x50>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <MX_I2C1_Init+0x50>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ce0:	4804      	ldr	r0, [pc, #16]	@ (8000cf4 <MX_I2C1_Init+0x50>)
 8000ce2:	f002 f8b9 	bl	8002e58 <HAL_I2C_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cec:	f000 fa82 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000114 	.word	0x20000114
 8000cf8:	40005400 	.word	0x40005400
 8000cfc:	000186a0 	.word	0x000186a0

08000d00 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <MX_I2C3_Init+0x50>)
 8000d06:	4a13      	ldr	r2, [pc, #76]	@ (8000d54 <MX_I2C3_Init+0x54>)
 8000d08:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <MX_I2C3_Init+0x50>)
 8000d0c:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <MX_I2C3_Init+0x58>)
 8000d0e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <MX_I2C3_Init+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <MX_I2C3_Init+0x50>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <MX_I2C3_Init+0x50>)
 8000d1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d22:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d24:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <MX_I2C3_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000d2a:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <MX_I2C3_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <MX_I2C3_Init+0x50>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <MX_I2C3_Init+0x50>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d3c:	4804      	ldr	r0, [pc, #16]	@ (8000d50 <MX_I2C3_Init+0x50>)
 8000d3e:	f002 f88b 	bl	8002e58 <HAL_I2C_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000d48:	f000 fa54 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000168 	.word	0x20000168
 8000d54:	40005c00 	.word	0x40005c00
 8000d58:	000186a0 	.word	0x000186a0

08000d5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d70:	463b      	mov	r3, r7
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d78:	4b1e      	ldr	r3, [pc, #120]	@ (8000df4 <MX_TIM2_Init+0x98>)
 8000d7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = PSC_1000;
 8000d80:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <MX_TIM2_Init+0x98>)
 8000d82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <MX_TIM2_Init+0x98>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = COUNTER_50MS;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <MX_TIM2_Init+0x98>)
 8000d90:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8000d94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d96:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <MX_TIM2_Init+0x98>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <MX_TIM2_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000da2:	4814      	ldr	r0, [pc, #80]	@ (8000df4 <MX_TIM2_Init+0x98>)
 8000da4:	f003 f918 	bl	8003fd8 <HAL_TIM_Base_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000dae:	f000 fa21 	bl	80011f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000db6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <MX_TIM2_Init+0x98>)
 8000dc0:	f003 fae9 	bl	8004396 <HAL_TIM_ConfigClockSource>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dca:	f000 fa13 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <MX_TIM2_Init+0x98>)
 8000ddc:	f003 fd10 	bl	8004800 <HAL_TIMEx_MasterConfigSynchronization>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000de6:	f000 fa05 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200001bc 	.word	0x200001bc

08000df8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfe:	f107 0308 	add.w	r3, r7, #8
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e14:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <MX_TIM3_Init+0x94>)
 8000e16:	4a1e      	ldr	r2, [pc, #120]	@ (8000e90 <MX_TIM3_Init+0x98>)
 8000e18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = PSC_1000;
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <MX_TIM3_Init+0x94>)
 8000e1c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <MX_TIM3_Init+0x94>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = COUNTER_50MS;
 8000e28:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <MX_TIM3_Init+0x94>)
 8000e2a:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8000e2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e30:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <MX_TIM3_Init+0x94>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <MX_TIM3_Init+0x94>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e3c:	4813      	ldr	r0, [pc, #76]	@ (8000e8c <MX_TIM3_Init+0x94>)
 8000e3e:	f003 f8cb 	bl	8003fd8 <HAL_TIM_Base_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e48:	f000 f9d4 	bl	80011f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	4619      	mov	r1, r3
 8000e58:	480c      	ldr	r0, [pc, #48]	@ (8000e8c <MX_TIM3_Init+0x94>)
 8000e5a:	f003 fa9c 	bl	8004396 <HAL_TIM_ConfigClockSource>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e64:	f000 f9c6 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e70:	463b      	mov	r3, r7
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <MX_TIM3_Init+0x94>)
 8000e76:	f003 fcc3 	bl	8004800 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e80:	f000 f9b8 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000204 	.word	0x20000204
 8000e90:	40000400 	.word	0x40000400

08000e94 <MX_USART1_IRDA_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_IRDA_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  hirda1.Instance = USART1;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <MX_USART1_IRDA_Init+0x44>)
 8000e9a:	4a10      	ldr	r2, [pc, #64]	@ (8000edc <MX_USART1_IRDA_Init+0x48>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hirda1.Init.BaudRate = 115200;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <MX_USART1_IRDA_Init+0x44>)
 8000ea0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ea4:	605a      	str	r2, [r3, #4]
  hirda1.Init.WordLength = IRDA_WORDLENGTH_8B;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <MX_USART1_IRDA_Init+0x44>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  hirda1.Init.Parity = IRDA_PARITY_NONE;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <MX_USART1_IRDA_Init+0x44>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  hirda1.Init.Mode = IRDA_MODE_TX_RX;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <MX_USART1_IRDA_Init+0x44>)
 8000eb4:	220c      	movs	r2, #12
 8000eb6:	611a      	str	r2, [r3, #16]
  hirda1.Init.Prescaler = 1;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <MX_USART1_IRDA_Init+0x44>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	751a      	strb	r2, [r3, #20]
  hirda1.Init.IrDAMode = IRDA_POWERMODE_NORMAL;
 8000ebe:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <MX_USART1_IRDA_Init+0x44>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  if (HAL_IRDA_Init(&hirda1) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	@ (8000ed8 <MX_USART1_IRDA_Init+0x44>)
 8000ec6:	f002 f90b 	bl	80030e0 <HAL_IRDA_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_USART1_IRDA_Init+0x40>
  {
    Error_Handler();
 8000ed0:	f000 f990 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	2000024c 	.word	0x2000024c
 8000edc:	40011000 	.word	0x40011000

08000ee0 <MX_USART6_IRDA_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_IRDA_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  hirda6.Instance = USART6;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <MX_USART6_IRDA_Init+0x44>)
 8000ee6:	4a10      	ldr	r2, [pc, #64]	@ (8000f28 <MX_USART6_IRDA_Init+0x48>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hirda6.Init.BaudRate = 115200;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <MX_USART6_IRDA_Init+0x44>)
 8000eec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ef0:	605a      	str	r2, [r3, #4]
  hirda6.Init.WordLength = IRDA_WORDLENGTH_8B;
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <MX_USART6_IRDA_Init+0x44>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hirda6.Init.Parity = IRDA_PARITY_NONE;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <MX_USART6_IRDA_Init+0x44>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  hirda6.Init.Mode = IRDA_MODE_TX_RX;
 8000efe:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <MX_USART6_IRDA_Init+0x44>)
 8000f00:	220c      	movs	r2, #12
 8000f02:	611a      	str	r2, [r3, #16]
  hirda6.Init.Prescaler = 1;
 8000f04:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <MX_USART6_IRDA_Init+0x44>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	751a      	strb	r2, [r3, #20]
  hirda6.Init.IrDAMode = IRDA_POWERMODE_NORMAL;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <MX_USART6_IRDA_Init+0x44>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  if (HAL_IRDA_Init(&hirda6) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <MX_USART6_IRDA_Init+0x44>)
 8000f12:	f002 f8e5 	bl	80030e0 <HAL_IRDA_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_USART6_IRDA_Init+0x40>
  {
    Error_Handler();
 8000f1c:	f000 f96a 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000288 	.word	0x20000288
 8000f28:	40011400 	.word	0x40011400

08000f2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	@ 0x28
 8000f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b9b      	ldr	r3, [pc, #620]	@ (80011b4 <MX_GPIO_Init+0x288>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a9a      	ldr	r2, [pc, #616]	@ (80011b4 <MX_GPIO_Init+0x288>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b98      	ldr	r3, [pc, #608]	@ (80011b4 <MX_GPIO_Init+0x288>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b94      	ldr	r3, [pc, #592]	@ (80011b4 <MX_GPIO_Init+0x288>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a93      	ldr	r2, [pc, #588]	@ (80011b4 <MX_GPIO_Init+0x288>)
 8000f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b91      	ldr	r3, [pc, #580]	@ (80011b4 <MX_GPIO_Init+0x288>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b8d      	ldr	r3, [pc, #564]	@ (80011b4 <MX_GPIO_Init+0x288>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a8c      	ldr	r2, [pc, #560]	@ (80011b4 <MX_GPIO_Init+0x288>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b8a      	ldr	r3, [pc, #552]	@ (80011b4 <MX_GPIO_Init+0x288>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b86      	ldr	r3, [pc, #536]	@ (80011b4 <MX_GPIO_Init+0x288>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a85      	ldr	r2, [pc, #532]	@ (80011b4 <MX_GPIO_Init+0x288>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b83      	ldr	r3, [pc, #524]	@ (80011b4 <MX_GPIO_Init+0x288>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	4b7f      	ldr	r3, [pc, #508]	@ (80011b4 <MX_GPIO_Init+0x288>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a7e      	ldr	r2, [pc, #504]	@ (80011b4 <MX_GPIO_Init+0x288>)
 8000fbc:	f043 0308 	orr.w	r3, r3, #8
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b7c      	ldr	r3, [pc, #496]	@ (80011b4 <MX_GPIO_Init+0x288>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f003 0308 	and.w	r3, r3, #8
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PRECHARGE_CONTACTOR_Pin|MAIN_CONTACTOR_Pin|GPIO0_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2107      	movs	r1, #7
 8000fd2:	4879      	ldr	r0, [pc, #484]	@ (80011b8 <MX_GPIO_Init+0x28c>)
 8000fd4:	f001 fef4 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LIGHT_Pin|CHANNEL_STATUS_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2148      	movs	r1, #72	@ 0x48
 8000fdc:	4877      	ldr	r0, [pc, #476]	@ (80011bc <MX_GPIO_Init+0x290>)
 8000fde:	f001 feef 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO3_Pin|YELLOW_LED_Pin|RED_LED_Pin|GPIO2_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 4146 	mov.w	r1, #50688	@ 0xc600
 8000fe8:	4875      	ldr	r0, [pc, #468]	@ (80011c0 <MX_GPIO_Init+0x294>)
 8000fea:	f001 fee9 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ISOLATION_FAULT_DETECT_Pin */
  GPIO_InitStruct.Pin = ISOLATION_FAULT_DETECT_Pin;
 8000fee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ISOLATION_FAULT_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	486d      	ldr	r0, [pc, #436]	@ (80011b8 <MX_GPIO_Init+0x28c>)
 8001004:	f001 fd48 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PRECHARGE_CONTACTOR_Pin MAIN_CONTACTOR_Pin GPIO0_Pin */
  GPIO_InitStruct.Pin = PRECHARGE_CONTACTOR_Pin|MAIN_CONTACTOR_Pin|GPIO0_Pin;
 8001008:	2307      	movs	r3, #7
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	4866      	ldr	r0, [pc, #408]	@ (80011b8 <MX_GPIO_Init+0x28c>)
 8001020:	f001 fd3a 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGER_DETECT_Pin IGNITION_Pin */
  GPIO_InitStruct.Pin = CHARGER_DETECT_Pin|IGNITION_Pin;
 8001024:	2328      	movs	r3, #40	@ 0x28
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001028:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800102c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	485f      	ldr	r0, [pc, #380]	@ (80011b8 <MX_GPIO_Init+0x28c>)
 800103a:	f001 fd2d 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : CURRENT_Pin */
  GPIO_InitStruct.Pin = CURRENT_Pin;
 800103e:	2304      	movs	r3, #4
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CURRENT_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	485a      	ldr	r0, [pc, #360]	@ (80011bc <MX_GPIO_Init+0x290>)
 8001052:	f001 fd21 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHT_Pin CHANNEL_STATUS_Pin */
  GPIO_InitStruct.Pin = LIGHT_Pin|CHANNEL_STATUS_Pin;
 8001056:	2348      	movs	r3, #72	@ 0x48
 8001058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4853      	ldr	r0, [pc, #332]	@ (80011bc <MX_GPIO_Init+0x290>)
 800106e:	f001 fd13 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMERGENCY_STOP_Pin */
  GPIO_InitStruct.Pin = EMERGENCY_STOP_Pin;
 8001072:	2310      	movs	r3, #16
 8001074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001076:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMERGENCY_STOP_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	484c      	ldr	r0, [pc, #304]	@ (80011b8 <MX_GPIO_Init+0x28c>)
 8001088:	f001 fd06 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ISOLATION_FAULT_DETECTB0_Pin */
  GPIO_InitStruct.Pin = ISOLATION_FAULT_DETECTB0_Pin;
 800108c:	2301      	movs	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ISOLATION_FAULT_DETECTB0_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4619      	mov	r1, r3
 800109e:	4848      	ldr	r0, [pc, #288]	@ (80011c0 <MX_GPIO_Init+0x294>)
 80010a0:	f001 fcfa 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin YELLOW_LED_Pin RED_LED_Pin GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|YELLOW_LED_Pin|RED_LED_Pin|GPIO2_Pin;
 80010a4:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	4840      	ldr	r0, [pc, #256]	@ (80011c0 <MX_GPIO_Init+0x294>)
 80010be:	f001 fceb 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80010c2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80010c6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80010d4:	230c      	movs	r3, #12
 80010d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	4836      	ldr	r0, [pc, #216]	@ (80011b8 <MX_GPIO_Init+0x28c>)
 80010e0:	f001 fcda 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010e4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010f6:	230a      	movs	r3, #10
 80010f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	482e      	ldr	r0, [pc, #184]	@ (80011bc <MX_GPIO_Init+0x290>)
 8001102:	f001 fcc9 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001106:	2304      	movs	r3, #4
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001116:	230c      	movs	r3, #12
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	4828      	ldr	r0, [pc, #160]	@ (80011c4 <MX_GPIO_Init+0x298>)
 8001122:	f001 fcb9 	bl	8002a98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	2009      	movs	r0, #9
 800112c:	f001 fc7d 	bl	8002a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001130:	2009      	movs	r0, #9
 8001132:	f001 fc96 	bl	8002a62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	200a      	movs	r0, #10
 800113c:	f001 fc75 	bl	8002a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001140:	200a      	movs	r0, #10
 8001142:	f001 fc8e 	bl	8002a62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	2017      	movs	r0, #23
 800114c:	f001 fc6d 	bl	8002a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001150:	2017      	movs	r0, #23
 8001152:	f001 fc86 	bl	8002a62 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
	HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	2040      	movs	r0, #64	@ 0x40
 800115c:	f001 fc65 	bl	8002a2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001160:	2040      	movs	r0, #64	@ 0x40
 8001162:	f001 fc7e 	bl	8002a62 <HAL_NVIC_EnableIRQ>

	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800116a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001178:	2309      	movs	r3, #9
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	480f      	ldr	r0, [pc, #60]	@ (80011c0 <MX_GPIO_Init+0x294>)
 8001184:	f001 fc88 	bl	8002a98 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001188:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800118c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001192:	2301      	movs	r3, #1
 8001194:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800119a:	2309      	movs	r3, #9
 800119c:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	4806      	ldr	r0, [pc, #24]	@ (80011c0 <MX_GPIO_Init+0x294>)
 80011a6:	f001 fc77 	bl	8002a98 <HAL_GPIO_Init>

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	@ 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40020400 	.word	0x40020400
 80011c4:	40020c00 	.word	0x40020c00

080011c8 <ITM_Init>:
/* USER CODE BEGIN 4 */




void ITM_Init(void) {
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
	// Enable the ITM (Instrumentation Trace Macrocell)
	ITM->TCR = ITM_TCR_ITMENA_Msk;        // Enable ITM
 80011cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011d0:	2201      	movs	r2, #1
 80011d2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
	ITM->TPR = 0x0;                       // Set privilege level to 0 (default)
 80011d6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011da:	2200      	movs	r2, #0
 80011dc:	f8c3 2e40 	str.w	r2, [r3, #3648]	@ 0xe40
	ITM->TER = 0x01;                      // Enable stimulus 0 (SWO)
 80011e0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011e4:	2201      	movs	r2, #1
 80011e6:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <Error_Handler+0x8>

08001200 <deactivate_main_contactor>:

	return 0;
}

void deactivate_main_contactor(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	//	Deactivate main contactor
	HAL_GPIO_WritePin(MAIN_CONTACTOR_GPIO_Port, MAIN_CONTACTOR_Pin, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2102      	movs	r1, #2
 8001208:	4806      	ldr	r0, [pc, #24]	@ (8001224 <deactivate_main_contactor+0x24>)
 800120a:	f001 fdd9 	bl	8002dc0 <HAL_GPIO_WritePin>

	//  Turn OFF HV light
	HAL_GPIO_WritePin(LIGHT_GPIO_Port, LIGHT_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	2108      	movs	r1, #8
 8001212:	4805      	ldr	r0, [pc, #20]	@ (8001228 <deactivate_main_contactor+0x28>)
 8001214:	f001 fdd4 	bl	8002dc0 <HAL_GPIO_WritePin>
	blinking_HV_led = 0;
 8001218:	4b04      	ldr	r3, [pc, #16]	@ (800122c <deactivate_main_contactor+0x2c>)
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40020800 	.word	0x40020800
 8001228:	40020000 	.word	0x40020000
 800122c:	200002c7 	.word	0x200002c7

08001230 <deactivate_precharge_contactor>:


}

void deactivate_precharge_contactor(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	//	Deactivate main contactor
	HAL_GPIO_WritePin(PRECHARGE_PIN_GROUP, PRECHARGE_PIN, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	2101      	movs	r1, #1
 8001238:	4809      	ldr	r0, [pc, #36]	@ (8001260 <deactivate_precharge_contactor+0x30>)
 800123a:	f001 fdc1 	bl	8002dc0 <HAL_GPIO_WritePin>
	blinking_HV_led = 0;
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <deactivate_precharge_contactor+0x34>)
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]

	// If main contactor is ON, ensures that the HV light is ON
	if(HAL_GPIO_ReadPin(MAIN_CONTACTOR_GPIO_Port, MAIN_CONTACTOR_Pin) == GPIO_PIN_SET)
 8001244:	2102      	movs	r1, #2
 8001246:	4806      	ldr	r0, [pc, #24]	@ (8001260 <deactivate_precharge_contactor+0x30>)
 8001248:	f001 fda2 	bl	8002d90 <HAL_GPIO_ReadPin>
 800124c:	4603      	mov	r3, r0
 800124e:	2b01      	cmp	r3, #1
 8001250:	d104      	bne.n	800125c <deactivate_precharge_contactor+0x2c>
		HAL_GPIO_WritePin(LIGHT_GPIO_Port, LIGHT_Pin, GPIO_PIN_SET);
 8001252:	2201      	movs	r2, #1
 8001254:	2108      	movs	r1, #8
 8001256:	4804      	ldr	r0, [pc, #16]	@ (8001268 <deactivate_precharge_contactor+0x38>)
 8001258:	f001 fdb2 	bl	8002dc0 <HAL_GPIO_WritePin>

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40020800 	.word	0x40020800
 8001264:	200002c7 	.word	0x200002c7
 8001268:	40020000 	.word	0x40020000

0800126c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001274:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001278:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d013      	beq.n	80012ac <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001284:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001288:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800128c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00b      	beq.n	80012ac <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001294:	e000      	b.n	8001298 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001296:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001298:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f9      	beq.n	8001296 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80012a2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80012ac:	687b      	ldr	r3, [r7, #4]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <__io_putchar>:
#include "stdio.h"
#include "stdint.h"
#include "stm32f4xx.h"

int __io_putchar(int ch)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 // Write character to ITM ch.0
 ITM_SendChar(ch);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ffd1 	bl	800126c <ITM_SendChar>
 return(ch);
 80012ca:	687b      	ldr	r3, [r7, #4]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <HAL_MspInit+0x4c>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001320 <HAL_MspInit+0x4c>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <HAL_MspInit+0x4c>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <HAL_MspInit+0x4c>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	4a08      	ldr	r2, [pc, #32]	@ (8001320 <HAL_MspInit+0x4c>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001304:	6413      	str	r3, [r2, #64]	@ 0x40
 8001306:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_MspInit+0x4c>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800

08001324 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	@ 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a17      	ldr	r2, [pc, #92]	@ (80013a0 <HAL_ADC_MspInit+0x7c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d127      	bne.n	8001396 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <HAL_ADC_MspInit+0x80>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134e:	4a15      	ldr	r2, [pc, #84]	@ (80013a4 <HAL_ADC_MspInit+0x80>)
 8001350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001354:	6453      	str	r3, [r2, #68]	@ 0x44
 8001356:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <HAL_ADC_MspInit+0x80>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <HAL_ADC_MspInit+0x80>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a0e      	ldr	r2, [pc, #56]	@ (80013a4 <HAL_ADC_MspInit+0x80>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <HAL_ADC_MspInit+0x80>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LV_BATTERY_VOLTAGE_Pin;
 800137e:	2302      	movs	r3, #2
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001382:	2303      	movs	r3, #3
 8001384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LV_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <HAL_ADC_MspInit+0x84>)
 8001392:	f001 fb81 	bl	8002a98 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	@ 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40012000 	.word	0x40012000
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020400 	.word	0x40020400

080013ac <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	@ 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a29      	ldr	r2, [pc, #164]	@ (8001470 <HAL_CAN_MspInit+0xc4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d14b      	bne.n	8001466 <HAL_CAN_MspInit+0xba>
  {
    /* USER CODE BEGIN CAN2_MspInit 0 */

    /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b28      	ldr	r3, [pc, #160]	@ (8001474 <HAL_CAN_MspInit+0xc8>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	4a27      	ldr	r2, [pc, #156]	@ (8001474 <HAL_CAN_MspInit+0xc8>)
 80013d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013de:	4b25      	ldr	r3, [pc, #148]	@ (8001474 <HAL_CAN_MspInit+0xc8>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN2_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b21      	ldr	r3, [pc, #132]	@ (8001474 <HAL_CAN_MspInit+0xc8>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	4a20      	ldr	r2, [pc, #128]	@ (8001474 <HAL_CAN_MspInit+0xc8>)
 80013f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80013f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <HAL_CAN_MspInit+0xc8>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <HAL_CAN_MspInit+0xc8>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a19      	ldr	r2, [pc, #100]	@ (8001474 <HAL_CAN_MspInit+0xc8>)
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b17      	ldr	r3, [pc, #92]	@ (8001474 <HAL_CAN_MspInit+0xc8>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001422:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001434:	2309      	movs	r3, #9
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	480e      	ldr	r0, [pc, #56]	@ (8001478 <HAL_CAN_MspInit+0xcc>)
 8001440:	f001 fb2a 	bl	8002a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001444:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800144e:	2302      	movs	r3, #2
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001456:	2309      	movs	r3, #9
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	@ (8001478 <HAL_CAN_MspInit+0xcc>)
 8001462:	f001 fb19 	bl	8002a98 <HAL_GPIO_Init>

    /* USER CODE END CAN2_MspInit 1 */

  }

}
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	@ 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40006800 	.word	0x40006800
 8001474:	40023800 	.word	0x40023800
 8001478:	40020400 	.word	0x40020400

0800147c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	@ 0x30
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a42      	ldr	r2, [pc, #264]	@ (80015a4 <HAL_I2C_MspInit+0x128>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d12c      	bne.n	80014f8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	4b41      	ldr	r3, [pc, #260]	@ (80015a8 <HAL_I2C_MspInit+0x12c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a40      	ldr	r2, [pc, #256]	@ (80015a8 <HAL_I2C_MspInit+0x12c>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b3e      	ldr	r3, [pc, #248]	@ (80015a8 <HAL_I2C_MspInit+0x12c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	61bb      	str	r3, [r7, #24]
 80014b8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_I2C_SCL_Pin|EEPROM_I2C_SDA_Pin;
 80014ba:	23c0      	movs	r3, #192	@ 0xc0
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014be:	2312      	movs	r3, #18
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ca:	2304      	movs	r3, #4
 80014cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	4619      	mov	r1, r3
 80014d4:	4835      	ldr	r0, [pc, #212]	@ (80015ac <HAL_I2C_MspInit+0x130>)
 80014d6:	f001 fadf 	bl	8002a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	4b32      	ldr	r3, [pc, #200]	@ (80015a8 <HAL_I2C_MspInit+0x12c>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	4a31      	ldr	r2, [pc, #196]	@ (80015a8 <HAL_I2C_MspInit+0x12c>)
 80014e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ea:	4b2f      	ldr	r3, [pc, #188]	@ (80015a8 <HAL_I2C_MspInit+0x12c>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 80014f6:	e050      	b.n	800159a <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a2c      	ldr	r2, [pc, #176]	@ (80015b0 <HAL_I2C_MspInit+0x134>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d14b      	bne.n	800159a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	4b28      	ldr	r3, [pc, #160]	@ (80015a8 <HAL_I2C_MspInit+0x12c>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a27      	ldr	r2, [pc, #156]	@ (80015a8 <HAL_I2C_MspInit+0x12c>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b25      	ldr	r3, [pc, #148]	@ (80015a8 <HAL_I2C_MspInit+0x12c>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b21      	ldr	r3, [pc, #132]	@ (80015a8 <HAL_I2C_MspInit+0x12c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4a20      	ldr	r2, [pc, #128]	@ (80015a8 <HAL_I2C_MspInit+0x12c>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <HAL_I2C_MspInit+0x12c>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800153a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800153e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001540:	2312      	movs	r3, #18
 8001542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800154c:	2304      	movs	r3, #4
 800154e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	4817      	ldr	r0, [pc, #92]	@ (80015b4 <HAL_I2C_MspInit+0x138>)
 8001558:	f001 fa9e 	bl	8002a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800155c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001562:	2312      	movs	r3, #18
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 800156e:	2309      	movs	r3, #9
 8001570:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4619      	mov	r1, r3
 8001578:	480c      	ldr	r0, [pc, #48]	@ (80015ac <HAL_I2C_MspInit+0x130>)
 800157a:	f001 fa8d 	bl	8002a98 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <HAL_I2C_MspInit+0x12c>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	4a08      	ldr	r2, [pc, #32]	@ (80015a8 <HAL_I2C_MspInit+0x12c>)
 8001588:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800158c:	6413      	str	r3, [r2, #64]	@ 0x40
 800158e:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <HAL_I2C_MspInit+0x12c>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
}
 800159a:	bf00      	nop
 800159c:	3730      	adds	r7, #48	@ 0x30
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40005400 	.word	0x40005400
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020400 	.word	0x40020400
 80015b0:	40005c00 	.word	0x40005c00
 80015b4:	40020000 	.word	0x40020000

080015b8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015c8:	d116      	bne.n	80015f8 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <HAL_TIM_Base_MspInit+0x80>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	4a19      	ldr	r2, [pc, #100]	@ (8001638 <HAL_TIM_Base_MspInit+0x80>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015da:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <HAL_TIM_Base_MspInit+0x80>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	201c      	movs	r0, #28
 80015ec:	f001 fa1d 	bl	8002a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015f0:	201c      	movs	r0, #28
 80015f2:	f001 fa36 	bl	8002a62 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015f6:	e01a      	b.n	800162e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0f      	ldr	r2, [pc, #60]	@ (800163c <HAL_TIM_Base_MspInit+0x84>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d115      	bne.n	800162e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <HAL_TIM_Base_MspInit+0x80>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	4a0b      	ldr	r2, [pc, #44]	@ (8001638 <HAL_TIM_Base_MspInit+0x80>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6413      	str	r3, [r2, #64]	@ 0x40
 8001612:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <HAL_TIM_Base_MspInit+0x80>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	201d      	movs	r0, #29
 8001624:	f001 fa01 	bl	8002a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001628:	201d      	movs	r0, #29
 800162a:	f001 fa1a 	bl	8002a62 <HAL_NVIC_EnableIRQ>
}
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800
 800163c:	40000400 	.word	0x40000400

08001640 <HAL_IRDA_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hirda: IRDA handle pointer
  * @retval None
  */
void HAL_IRDA_MspInit(IRDA_HandleTypeDef* hirda)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08c      	sub	sp, #48	@ 0x30
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(hirda->Instance==USART1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a32      	ldr	r2, [pc, #200]	@ (8001728 <HAL_IRDA_MspInit+0xe8>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d12d      	bne.n	80016be <HAL_IRDA_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	4b31      	ldr	r3, [pc, #196]	@ (800172c <HAL_IRDA_MspInit+0xec>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	4a30      	ldr	r2, [pc, #192]	@ (800172c <HAL_IRDA_MspInit+0xec>)
 800166c:	f043 0310 	orr.w	r3, r3, #16
 8001670:	6453      	str	r3, [r2, #68]	@ 0x44
 8001672:	4b2e      	ldr	r3, [pc, #184]	@ (800172c <HAL_IRDA_MspInit+0xec>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	61bb      	str	r3, [r7, #24]
 800167c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	4b2a      	ldr	r3, [pc, #168]	@ (800172c <HAL_IRDA_MspInit+0xec>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a29      	ldr	r2, [pc, #164]	@ (800172c <HAL_IRDA_MspInit+0xec>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b27      	ldr	r3, [pc, #156]	@ (800172c <HAL_IRDA_MspInit+0xec>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = UART_MCU_TO_DEBUG_RX_Pin|UART_MCU_TO_DEBUG_TX_Pin;
 800169a:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 800169e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016ac:	2307      	movs	r3, #7
 80016ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 031c 	add.w	r3, r7, #28
 80016b4:	4619      	mov	r1, r3
 80016b6:	481e      	ldr	r0, [pc, #120]	@ (8001730 <HAL_IRDA_MspInit+0xf0>)
 80016b8:	f001 f9ee 	bl	8002a98 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80016bc:	e030      	b.n	8001720 <HAL_IRDA_MspInit+0xe0>
  else if(hirda->Instance==USART6)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001734 <HAL_IRDA_MspInit+0xf4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d12b      	bne.n	8001720 <HAL_IRDA_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	4b17      	ldr	r3, [pc, #92]	@ (800172c <HAL_IRDA_MspInit+0xec>)
 80016ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d0:	4a16      	ldr	r2, [pc, #88]	@ (800172c <HAL_IRDA_MspInit+0xec>)
 80016d2:	f043 0320 	orr.w	r3, r3, #32
 80016d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80016d8:	4b14      	ldr	r3, [pc, #80]	@ (800172c <HAL_IRDA_MspInit+0xec>)
 80016da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016dc:	f003 0320 	and.w	r3, r3, #32
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	4b10      	ldr	r3, [pc, #64]	@ (800172c <HAL_IRDA_MspInit+0xec>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ec:	4a0f      	ldr	r2, [pc, #60]	@ (800172c <HAL_IRDA_MspInit+0xec>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f4:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <HAL_IRDA_MspInit+0xec>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001700:	23c0      	movs	r3, #192	@ 0xc0
 8001702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001710:	2308      	movs	r3, #8
 8001712:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	4619      	mov	r1, r3
 800171a:	4807      	ldr	r0, [pc, #28]	@ (8001738 <HAL_IRDA_MspInit+0xf8>)
 800171c:	f001 f9bc 	bl	8002a98 <HAL_GPIO_Init>
}
 8001720:	bf00      	nop
 8001722:	3730      	adds	r7, #48	@ 0x30
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40011000 	.word	0x40011000
 800172c:	40023800 	.word	0x40023800
 8001730:	40020000 	.word	0x40020000
 8001734:	40011400 	.word	0x40011400
 8001738:	40020800 	.word	0x40020800

0800173c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <NMI_Handler+0x4>

08001744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <HardFault_Handler+0x4>

0800174c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <MemManage_Handler+0x4>

08001754 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <BusFault_Handler+0x4>

0800175c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <UsageFault_Handler+0x4>

08001764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001792:	f000 fa45 	bl	8001c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}

0800179a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CHARGER_DETECT_Pin);
 800179e:	2008      	movs	r0, #8
 80017a0:	f001 fb42 	bl	8002e28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMERGENCY_STOP_Pin);
 80017ac:	2010      	movs	r0, #16
 80017ae:	f001 fb3b 	bl	8002e28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IGNITION_Pin);
 80017ba:	2020      	movs	r0, #32
 80017bc:	f001 fb34 	bl	8002e28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <TIM2_IRQHandler+0x10>)
 80017ca:	f002 fcf4 	bl	80041b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200001bc 	.word	0x200001bc

080017d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017dc:	4802      	ldr	r0, [pc, #8]	@ (80017e8 <TIM3_IRQHandler+0x10>)
 80017de:	f002 fcea 	bl	80041b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000204 	.word	0x20000204

080017ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e00a      	b.n	8001814 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017fe:	f3af 8000 	nop.w
 8001802:	4601      	mov	r1, r0
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	60ba      	str	r2, [r7, #8]
 800180a:	b2ca      	uxtb	r2, r1
 800180c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	dbf0      	blt.n	80017fe <_read+0x12>
  }

  return len;
 800181c:	687b      	ldr	r3, [r7, #4]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e009      	b.n	800184c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	60ba      	str	r2, [r7, #8]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fd3a 	bl	80012ba <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	dbf1      	blt.n	8001838 <_write+0x12>
  }
  return len;
 8001854:	687b      	ldr	r3, [r7, #4]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_close>:

int _close(int file)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001886:	605a      	str	r2, [r3, #4]
  return 0;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <_isatty>:

int _isatty(int file)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d0:	4a14      	ldr	r2, [pc, #80]	@ (8001924 <_sbrk+0x5c>)
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <_sbrk+0x60>)
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018dc:	4b13      	ldr	r3, [pc, #76]	@ (800192c <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <_sbrk+0x64>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	@ (8001930 <_sbrk+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ea:	4b10      	ldr	r3, [pc, #64]	@ (800192c <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d207      	bcs.n	8001908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f8:	f003 fa58 	bl	8004dac <__errno>
 80018fc:	4603      	mov	r3, r0
 80018fe:	220c      	movs	r2, #12
 8001900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e009      	b.n	800191c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001908:	4b08      	ldr	r3, [pc, #32]	@ (800192c <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190e:	4b07      	ldr	r3, [pc, #28]	@ (800192c <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	4a05      	ldr	r2, [pc, #20]	@ (800192c <_sbrk+0x64>)
 8001918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20040000 	.word	0x20040000
 8001928:	00000400 	.word	0x00000400
 800192c:	200002c8 	.word	0x200002c8
 8001930:	20000420 	.word	0x20000420

08001934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001938:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <SystemInit+0x20>)
 800193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800193e:	4a05      	ldr	r2, [pc, #20]	@ (8001954 <SystemInit+0x20>)
 8001940:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001944:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <ask_for_voltages>:
#include "to_slave.h"

extern CAN_HandleTypeDef hcan2;

void ask_for_voltages()
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0

	uint8_t message[2] = {0};
 800195e:	2300      	movs	r3, #0
 8001960:	803b      	strh	r3, [r7, #0]

	message[0] = VOLTAGE_INFO;
 8001962:	23a1      	movs	r3, #161	@ 0xa1
 8001964:	703b      	strb	r3, [r7, #0]

	CAN_set_std_header(SLAVE_HEADER, SLAVE_BYTES_NUM);
 8001966:	2102      	movs	r1, #2
 8001968:	f240 1011 	movw	r0, #273	@ 0x111
 800196c:	f7fe fe04 	bl	8000578 <CAN_set_std_header>

	CAN1_send_mess(&hcan2, message);
 8001970:	463b      	mov	r3, r7
 8001972:	4619      	mov	r1, r3
 8001974:	4804      	ldr	r0, [pc, #16]	@ (8001988 <ask_for_voltages+0x30>)
 8001976:	f7fe fddb 	bl	8000530 <CAN1_send_mess>

	uint32_t default_btr = CAN2->BTR;
 800197a:	4b04      	ldr	r3, [pc, #16]	@ (800198c <ask_for_voltages+0x34>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	607b      	str	r3, [r7, #4]


}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200000ec 	.word	0x200000ec
 800198c:	40006800 	.word	0x40006800

08001990 <auto_ask_for_voltages>:

void auto_ask_for_voltages(uint8_t delay_10_ms)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]

	uint8_t message[2] = {0};
 800199a:	2300      	movs	r3, #0
 800199c:	81bb      	strh	r3, [r7, #12]

	message[0] = AUTO_VOLTAGE_INFO;
 800199e:	23aa      	movs	r3, #170	@ 0xaa
 80019a0:	733b      	strb	r3, [r7, #12]
	message[1] = delay_10_ms;
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	737b      	strb	r3, [r7, #13]

	CAN_set_std_header(SLAVE_HEADER, SLAVE_BYTES_NUM);
 80019a6:	2102      	movs	r1, #2
 80019a8:	f240 1011 	movw	r0, #273	@ 0x111
 80019ac:	f7fe fde4 	bl	8000578 <CAN_set_std_header>

	CAN1_send_mess(&hcan2, message);
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	4619      	mov	r1, r3
 80019b6:	4803      	ldr	r0, [pc, #12]	@ (80019c4 <auto_ask_for_voltages+0x34>)
 80019b8:	f7fe fdba 	bl	8000530 <CAN1_send_mess>

}
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200000ec 	.word	0x200000ec

080019c8 <stop_auto_ask_for_voltages>:

void stop_auto_ask_for_voltages()
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0

	uint8_t message[2] = {0};
 80019ce:	2300      	movs	r3, #0
 80019d0:	80bb      	strh	r3, [r7, #4]

	message[0] = STOP_VOLTAGE_INFO;
 80019d2:	23a0      	movs	r3, #160	@ 0xa0
 80019d4:	713b      	strb	r3, [r7, #4]

	CAN_set_std_header(SLAVE_HEADER, SLAVE_BYTES_NUM);
 80019d6:	2102      	movs	r1, #2
 80019d8:	f240 1011 	movw	r0, #273	@ 0x111
 80019dc:	f7fe fdcc 	bl	8000578 <CAN_set_std_header>

	CAN1_send_mess(&hcan2, message);
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	4619      	mov	r1, r3
 80019e4:	4803      	ldr	r0, [pc, #12]	@ (80019f4 <stop_auto_ask_for_voltages+0x2c>)
 80019e6:	f7fe fda3 	bl	8000530 <CAN1_send_mess>

}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200000ec 	.word	0x200000ec

080019f8 <auto_ask_for_temperatures>:
	CAN1_send_mess(&hcan2, message);

}

void auto_ask_for_temperatures(uint8_t delay_10_ms)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]

	uint8_t message[2] = {0};
 8001a02:	2300      	movs	r3, #0
 8001a04:	81bb      	strh	r3, [r7, #12]

	message[0] = AUTO_TEMP_INFO;
 8001a06:	2366      	movs	r3, #102	@ 0x66
 8001a08:	733b      	strb	r3, [r7, #12]
	message[1] = delay_10_ms;
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	737b      	strb	r3, [r7, #13]

	CAN_set_std_header(SLAVE_HEADER, SLAVE_BYTES_NUM);
 8001a0e:	2102      	movs	r1, #2
 8001a10:	f240 1011 	movw	r0, #273	@ 0x111
 8001a14:	f7fe fdb0 	bl	8000578 <CAN_set_std_header>

	CAN1_send_mess(&hcan2, message);
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4803      	ldr	r0, [pc, #12]	@ (8001a2c <auto_ask_for_temperatures+0x34>)
 8001a20:	f7fe fd86 	bl	8000530 <CAN1_send_mess>

}
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200000ec 	.word	0x200000ec

08001a30 <stop_auto_ask_for_temperatures>:

void stop_auto_ask_for_temperatures()
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0

	uint8_t message[2] = {0};
 8001a36:	2300      	movs	r3, #0
 8001a38:	80bb      	strh	r3, [r7, #4]

	message[0] = STOP_TEMP_INFO;
 8001a3a:	2360      	movs	r3, #96	@ 0x60
 8001a3c:	713b      	strb	r3, [r7, #4]

	CAN_set_std_header(SLAVE_HEADER, SLAVE_BYTES_NUM);
 8001a3e:	2102      	movs	r1, #2
 8001a40:	f240 1011 	movw	r0, #273	@ 0x111
 8001a44:	f7fe fd98 	bl	8000578 <CAN_set_std_header>

	CAN1_send_mess(&hcan2, message);
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4803      	ldr	r0, [pc, #12]	@ (8001a5c <stop_auto_ask_for_temperatures+0x2c>)
 8001a4e:	f7fe fd6f 	bl	8000530 <CAN1_send_mess>

}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200000ec 	.word	0x200000ec

08001a60 <auto_ask_for_balancing_info>:
	CAN1_send_mess(&hcan2, message);

}

void auto_ask_for_balancing_info(uint8_t delay_10_ms)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]

	uint8_t message[2] = {0};
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	81bb      	strh	r3, [r7, #12]

	message[0] = AUTO_BALANCING_INFO;
 8001a6e:	23bb      	movs	r3, #187	@ 0xbb
 8001a70:	733b      	strb	r3, [r7, #12]
	message[1] = delay_10_ms;
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	737b      	strb	r3, [r7, #13]

	CAN_set_std_header(SLAVE_HEADER, SLAVE_BYTES_NUM);
 8001a76:	2102      	movs	r1, #2
 8001a78:	f240 1011 	movw	r0, #273	@ 0x111
 8001a7c:	f7fe fd7c 	bl	8000578 <CAN_set_std_header>

	CAN1_send_mess(&hcan2, message);
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	4619      	mov	r1, r3
 8001a86:	4803      	ldr	r0, [pc, #12]	@ (8001a94 <auto_ask_for_balancing_info+0x34>)
 8001a88:	f7fe fd52 	bl	8000530 <CAN1_send_mess>

}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200000ec 	.word	0x200000ec

08001a98 <stop_auto_ask_for_balancing_info>:

void stop_auto_ask_for_balancing_info()
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0

	uint8_t message[2] = {0};
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	80bb      	strh	r3, [r7, #4]

	message[0] = STOP_BALANCING_INFO;
 8001aa2:	23b0      	movs	r3, #176	@ 0xb0
 8001aa4:	713b      	strb	r3, [r7, #4]

	CAN_set_std_header(SLAVE_HEADER, SLAVE_BYTES_NUM);
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	f240 1011 	movw	r0, #273	@ 0x111
 8001aac:	f7fe fd64 	bl	8000578 <CAN_set_std_header>

	CAN1_send_mess(&hcan2, message);
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4803      	ldr	r0, [pc, #12]	@ (8001ac4 <stop_auto_ask_for_balancing_info+0x2c>)
 8001ab6:	f7fe fd3b 	bl	8000530 <CAN1_send_mess>

}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200000ec 	.word	0x200000ec

08001ac8 <start_balancing>:

void start_balancing()

{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
	uint8_t message[2] = {0};
 8001ace:	2300      	movs	r3, #0
 8001ad0:	80bb      	strh	r3, [r7, #4]

	message[0] = START_BALANCING;
 8001ad2:	23bf      	movs	r3, #191	@ 0xbf
 8001ad4:	713b      	strb	r3, [r7, #4]

	CAN_set_std_header(SLAVE_HEADER, SLAVE_BYTES_NUM);
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	f240 1011 	movw	r0, #273	@ 0x111
 8001adc:	f7fe fd4c 	bl	8000578 <CAN_set_std_header>

	CAN1_send_mess(&hcan2, message);
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4803      	ldr	r0, [pc, #12]	@ (8001af4 <start_balancing+0x2c>)
 8001ae6:	f7fe fd23 	bl	8000530 <CAN1_send_mess>

}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200000ec 	.word	0x200000ec

08001af8 <stop_balancing>:

void stop_balancing()

{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
	uint8_t message[2] = {0};
 8001afe:	2300      	movs	r3, #0
 8001b00:	80bb      	strh	r3, [r7, #4]

	message[0] = STOP_BALANCING;
 8001b02:	23ba      	movs	r3, #186	@ 0xba
 8001b04:	713b      	strb	r3, [r7, #4]

	CAN_set_std_header(SLAVE_HEADER, SLAVE_BYTES_NUM);
 8001b06:	2102      	movs	r1, #2
 8001b08:	f240 1011 	movw	r0, #273	@ 0x111
 8001b0c:	f7fe fd34 	bl	8000578 <CAN_set_std_header>

	CAN1_send_mess(&hcan2, message);
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	4619      	mov	r1, r3
 8001b14:	4803      	ldr	r0, [pc, #12]	@ (8001b24 <stop_balancing+0x2c>)
 8001b16:	f7fe fd0b 	bl	8000530 <CAN1_send_mess>

}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200000ec 	.word	0x200000ec

08001b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001b28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b2c:	f7ff ff02 	bl	8001934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b30:	480c      	ldr	r0, [pc, #48]	@ (8001b64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b32:	490d      	ldr	r1, [pc, #52]	@ (8001b68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b34:	4a0d      	ldr	r2, [pc, #52]	@ (8001b6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b38:	e002      	b.n	8001b40 <LoopCopyDataInit>

08001b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3e:	3304      	adds	r3, #4

08001b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b44:	d3f9      	bcc.n	8001b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b46:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b48:	4c0a      	ldr	r4, [pc, #40]	@ (8001b74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b4c:	e001      	b.n	8001b52 <LoopFillZerobss>

08001b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b50:	3204      	adds	r2, #4

08001b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b54:	d3fb      	bcc.n	8001b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b56:	f003 f92f 	bl	8004db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b5a:	f7fe ff8d 	bl	8000a78 <main>
  bx  lr    
 8001b5e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b60:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b68:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b6c:	080052e0 	.word	0x080052e0
  ldr r2, =_sbss
 8001b70:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b74:	2000041c 	.word	0x2000041c

08001b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <ADC_IRQHandler>
	...

08001b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b80:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <HAL_Init+0x40>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0d      	ldr	r2, [pc, #52]	@ (8001bbc <HAL_Init+0x40>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <HAL_Init+0x40>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <HAL_Init+0x40>)
 8001b92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b98:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <HAL_Init+0x40>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a07      	ldr	r2, [pc, #28]	@ (8001bbc <HAL_Init+0x40>)
 8001b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	f000 ff35 	bl	8002a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001baa:	200f      	movs	r0, #15
 8001bac:	f000 f808 	bl	8001bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb0:	f7ff fb90 	bl	80012d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023c00 	.word	0x40023c00

08001bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc8:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <HAL_InitTick+0x54>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <HAL_InitTick+0x58>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 ff4d 	bl	8002a7e <HAL_SYSTICK_Config>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00e      	b.n	8001c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	d80a      	bhi.n	8001c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f000 ff15 	bl	8002a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c00:	4a06      	ldr	r2, [pc, #24]	@ (8001c1c <HAL_InitTick+0x5c>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e000      	b.n	8001c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000000 	.word	0x20000000
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_IncTick+0x20>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <HAL_IncTick+0x24>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <HAL_IncTick+0x24>)
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000008 	.word	0x20000008
 8001c44:	200002cc 	.word	0x200002cc

08001c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	@ (8001c5c <HAL_GetTick+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	200002cc 	.word	0x200002cc

08001c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c68:	f7ff ffee 	bl	8001c48 <HAL_GetTick>
 8001c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c78:	d005      	beq.n	8001c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca4 <HAL_Delay+0x44>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4413      	add	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c86:	bf00      	nop
 8001c88:	f7ff ffde 	bl	8001c48 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d8f7      	bhi.n	8001c88 <HAL_Delay+0x28>
  {
  }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000008 	.word	0x20000008

08001ca8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e033      	b.n	8001d26 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff fb2c 	bl	8001324 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d118      	bne.n	8001d18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001cee:	f023 0302 	bic.w	r3, r3, #2
 8001cf2:	f043 0202 	orr.w	r2, r3, #2
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f93a 	bl	8001f74 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	f023 0303 	bic.w	r3, r3, #3
 8001d0e:	f043 0201 	orr.w	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d16:	e001      	b.n	8001d1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x1c>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e105      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x228>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b09      	cmp	r3, #9
 8001d5a:	d925      	bls.n	8001da8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68d9      	ldr	r1, [r3, #12]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	3b1e      	subs	r3, #30
 8001d72:	2207      	movs	r2, #7
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43da      	mvns	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	400a      	ands	r2, r1
 8001d80:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68d9      	ldr	r1, [r3, #12]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	4603      	mov	r3, r0
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4403      	add	r3, r0
 8001d9a:	3b1e      	subs	r3, #30
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	e022      	b.n	8001dee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6919      	ldr	r1, [r3, #16]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	461a      	mov	r2, r3
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	400a      	ands	r2, r1
 8001dca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6919      	ldr	r1, [r3, #16]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	4603      	mov	r3, r0
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4403      	add	r3, r0
 8001de4:	409a      	lsls	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d824      	bhi.n	8001e40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	3b05      	subs	r3, #5
 8001e08:	221f      	movs	r2, #31
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	400a      	ands	r2, r1
 8001e16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	4618      	mov	r0, r3
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	3b05      	subs	r3, #5
 8001e32:	fa00 f203 	lsl.w	r2, r0, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e3e:	e04c      	b.n	8001eda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b0c      	cmp	r3, #12
 8001e46:	d824      	bhi.n	8001e92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	3b23      	subs	r3, #35	@ 0x23
 8001e5a:	221f      	movs	r2, #31
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43da      	mvns	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	400a      	ands	r2, r1
 8001e68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	4618      	mov	r0, r3
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	3b23      	subs	r3, #35	@ 0x23
 8001e84:	fa00 f203 	lsl.w	r2, r0, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e90:	e023      	b.n	8001eda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3b41      	subs	r3, #65	@ 0x41
 8001ea4:	221f      	movs	r2, #31
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b41      	subs	r3, #65	@ 0x41
 8001ece:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eda:	4b22      	ldr	r3, [pc, #136]	@ (8001f64 <HAL_ADC_ConfigChannel+0x234>)
 8001edc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a21      	ldr	r2, [pc, #132]	@ (8001f68 <HAL_ADC_ConfigChannel+0x238>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d109      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x1cc>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b12      	cmp	r3, #18
 8001eee:	d105      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a19      	ldr	r2, [pc, #100]	@ (8001f68 <HAL_ADC_ConfigChannel+0x238>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d123      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x21e>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b10      	cmp	r3, #16
 8001f0c:	d003      	beq.n	8001f16 <HAL_ADC_ConfigChannel+0x1e6>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b11      	cmp	r3, #17
 8001f14:	d11b      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b10      	cmp	r3, #16
 8001f28:	d111      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f2a:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <HAL_ADC_ConfigChannel+0x23c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a10      	ldr	r2, [pc, #64]	@ (8001f70 <HAL_ADC_ConfigChannel+0x240>)
 8001f30:	fba2 2303 	umull	r2, r3, r2, r3
 8001f34:	0c9a      	lsrs	r2, r3, #18
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f40:	e002      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f9      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	40012300 	.word	0x40012300
 8001f68:	40012000 	.word	0x40012000
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	431bde83 	.word	0x431bde83

08001f74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f7c:	4b79      	ldr	r3, [pc, #484]	@ (8002164 <ADC_Init+0x1f0>)
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	021a      	lsls	r2, r3, #8
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001fcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6859      	ldr	r1, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6899      	ldr	r1, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	4a58      	ldr	r2, [pc, #352]	@ (8002168 <ADC_Init+0x1f4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d022      	beq.n	8002052 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800201a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6899      	ldr	r1, [r3, #8]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800203c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6899      	ldr	r1, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	e00f      	b.n	8002072 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002060:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002070:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0202 	bic.w	r2, r2, #2
 8002080:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6899      	ldr	r1, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	7e1b      	ldrb	r3, [r3, #24]
 800208c:	005a      	lsls	r2, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d01b      	beq.n	80020d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020ae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80020be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6859      	ldr	r1, [r3, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ca:	3b01      	subs	r3, #1
 80020cc:	035a      	lsls	r2, r3, #13
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	e007      	b.n	80020e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020e6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80020f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	3b01      	subs	r3, #1
 8002104:	051a      	lsls	r2, r3, #20
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800211c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6899      	ldr	r1, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800212a:	025a      	lsls	r2, r3, #9
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002142:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6899      	ldr	r1, [r3, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	029a      	lsls	r2, r3, #10
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	609a      	str	r2, [r3, #8]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	40012300 	.word	0x40012300
 8002168:	0f000001 	.word	0x0f000001

0800216c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e0ed      	b.n	800235a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d102      	bne.n	8002190 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff f90e 	bl	80013ac <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021a0:	f7ff fd52 	bl	8001c48 <HAL_GetTick>
 80021a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021a6:	e012      	b.n	80021ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021a8:	f7ff fd4e 	bl	8001c48 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b0a      	cmp	r3, #10
 80021b4:	d90b      	bls.n	80021ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2205      	movs	r2, #5
 80021c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e0c5      	b.n	800235a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0e5      	beq.n	80021a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0202 	bic.w	r2, r2, #2
 80021ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021ec:	f7ff fd2c 	bl	8001c48 <HAL_GetTick>
 80021f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021f2:	e012      	b.n	800221a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021f4:	f7ff fd28 	bl	8001c48 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b0a      	cmp	r3, #10
 8002200:	d90b      	bls.n	800221a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002206:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2205      	movs	r2, #5
 8002212:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e09f      	b.n	800235a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1e5      	bne.n	80021f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	7e1b      	ldrb	r3, [r3, #24]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d108      	bne.n	8002242 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	e007      	b.n	8002252 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002250:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7e5b      	ldrb	r3, [r3, #25]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d108      	bne.n	800226c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	e007      	b.n	800227c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800227a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7e9b      	ldrb	r3, [r3, #26]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d108      	bne.n	8002296 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0220 	orr.w	r2, r2, #32
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	e007      	b.n	80022a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0220 	bic.w	r2, r2, #32
 80022a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7edb      	ldrb	r3, [r3, #27]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d108      	bne.n	80022c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0210 	bic.w	r2, r2, #16
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	e007      	b.n	80022d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0210 	orr.w	r2, r2, #16
 80022ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	7f1b      	ldrb	r3, [r3, #28]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d108      	bne.n	80022ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0208 	orr.w	r2, r2, #8
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	e007      	b.n	80022fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0208 	bic.w	r2, r2, #8
 80022f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7f5b      	ldrb	r3, [r3, #29]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d108      	bne.n	8002314 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0204 	orr.w	r2, r2, #4
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	e007      	b.n	8002324 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0204 	bic.w	r2, r2, #4
 8002322:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	ea42 0103 	orr.w	r1, r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	1e5a      	subs	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800237a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800237c:	7cfb      	ldrb	r3, [r7, #19]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d003      	beq.n	800238a <HAL_CAN_ConfigFilter+0x26>
 8002382:	7cfb      	ldrb	r3, [r7, #19]
 8002384:	2b02      	cmp	r3, #2
 8002386:	f040 80be 	bne.w	8002506 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800238a:	4b65      	ldr	r3, [pc, #404]	@ (8002520 <HAL_CAN_ConfigFilter+0x1bc>)
 800238c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002394:	f043 0201 	orr.w	r2, r3, #1
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80023a4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	431a      	orrs	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	2201      	movs	r2, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	43db      	mvns	r3, r3
 80023dc:	401a      	ands	r2, r3
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d123      	bne.n	8002434 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	401a      	ands	r2, r3
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800240e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3248      	adds	r2, #72	@ 0x48
 8002414:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002428:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800242a:	6979      	ldr	r1, [r7, #20]
 800242c:	3348      	adds	r3, #72	@ 0x48
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	440b      	add	r3, r1
 8002432:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d122      	bne.n	8002482 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	431a      	orrs	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800245c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3248      	adds	r2, #72	@ 0x48
 8002462:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002476:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002478:	6979      	ldr	r1, [r7, #20]
 800247a:	3348      	adds	r3, #72	@ 0x48
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	440b      	add	r3, r1
 8002480:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	43db      	mvns	r3, r3
 8002494:	401a      	ands	r2, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800249c:	e007      	b.n	80024ae <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	431a      	orrs	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d109      	bne.n	80024ca <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	43db      	mvns	r3, r3
 80024c0:	401a      	ands	r2, r3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80024c8:	e007      	b.n	80024da <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d107      	bne.n	80024f2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024f8:	f023 0201 	bic.w	r2, r3, #1
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e006      	b.n	8002514 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
  }
}
 8002514:	4618      	mov	r0, r3
 8002516:	371c      	adds	r7, #28
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	40006400 	.word	0x40006400

08002524 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d12e      	bne.n	8002596 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002550:	f7ff fb7a 	bl	8001c48 <HAL_GetTick>
 8002554:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002556:	e012      	b.n	800257e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002558:	f7ff fb76 	bl	8001c48 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b0a      	cmp	r3, #10
 8002564:	d90b      	bls.n	800257e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2205      	movs	r2, #5
 8002576:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e012      	b.n	80025a4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e5      	bne.n	8002558 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	e006      	b.n	80025a4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
  }
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d133      	bne.n	8002628 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025d0:	f7ff fb3a 	bl	8001c48 <HAL_GetTick>
 80025d4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025d6:	e012      	b.n	80025fe <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025d8:	f7ff fb36 	bl	8001c48 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b0a      	cmp	r3, #10
 80025e4:	d90b      	bls.n	80025fe <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2205      	movs	r2, #5
 80025f6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e01b      	b.n	8002636 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0e5      	beq.n	80025d8 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0202 	bic.w	r2, r2, #2
 800261a:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	e006      	b.n	8002636 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
  }
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800263e:	b480      	push	{r7}
 8002640:	b089      	sub	sp, #36	@ 0x24
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002652:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800265c:	7ffb      	ldrb	r3, [r7, #31]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d003      	beq.n	800266a <HAL_CAN_AddTxMessage+0x2c>
 8002662:	7ffb      	ldrb	r3, [r7, #31]
 8002664:	2b02      	cmp	r3, #2
 8002666:	f040 80ad 	bne.w	80027c4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10a      	bne.n	800268a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800267a:	2b00      	cmp	r3, #0
 800267c:	d105      	bne.n	800268a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8095 	beq.w	80027b4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	0e1b      	lsrs	r3, r3, #24
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002694:	2201      	movs	r2, #1
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	409a      	lsls	r2, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10d      	bne.n	80026c2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026b0:	68f9      	ldr	r1, [r7, #12]
 80026b2:	6809      	ldr	r1, [r1, #0]
 80026b4:	431a      	orrs	r2, r3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	3318      	adds	r3, #24
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	440b      	add	r3, r1
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e00f      	b.n	80026e2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026cc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026d2:	68f9      	ldr	r1, [r7, #12]
 80026d4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80026d6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	3318      	adds	r3, #24
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	440b      	add	r3, r1
 80026e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6819      	ldr	r1, [r3, #0]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	3318      	adds	r3, #24
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	440b      	add	r3, r1
 80026f2:	3304      	adds	r3, #4
 80026f4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	7d1b      	ldrb	r3, [r3, #20]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d111      	bne.n	8002722 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	3318      	adds	r3, #24
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	4413      	add	r3, r2
 800270a:	3304      	adds	r3, #4
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	6811      	ldr	r1, [r2, #0]
 8002712:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	3318      	adds	r3, #24
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	440b      	add	r3, r1
 800271e:	3304      	adds	r3, #4
 8002720:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3307      	adds	r3, #7
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	061a      	lsls	r2, r3, #24
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3306      	adds	r3, #6
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	041b      	lsls	r3, r3, #16
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3305      	adds	r3, #5
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	4313      	orrs	r3, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	3204      	adds	r2, #4
 8002742:	7812      	ldrb	r2, [r2, #0]
 8002744:	4610      	mov	r0, r2
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	6811      	ldr	r1, [r2, #0]
 800274a:	ea43 0200 	orr.w	r2, r3, r0
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	440b      	add	r3, r1
 8002754:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002758:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3303      	adds	r3, #3
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	061a      	lsls	r2, r3, #24
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3302      	adds	r3, #2
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	041b      	lsls	r3, r3, #16
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3301      	adds	r3, #1
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	021b      	lsls	r3, r3, #8
 8002774:	4313      	orrs	r3, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	7812      	ldrb	r2, [r2, #0]
 800277a:	4610      	mov	r0, r2
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	6811      	ldr	r1, [r2, #0]
 8002780:	ea43 0200 	orr.w	r2, r3, r0
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	440b      	add	r3, r1
 800278a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800278e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	3318      	adds	r3, #24
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	4413      	add	r3, r2
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	6811      	ldr	r1, [r2, #0]
 80027a2:	f043 0201 	orr.w	r2, r3, #1
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	3318      	adds	r3, #24
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	440b      	add	r3, r1
 80027ae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	e00e      	b.n	80027d2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e006      	b.n	80027d2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
  }
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3724      	adds	r7, #36	@ 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80027de:	b480      	push	{r7}
 80027e0:	b085      	sub	sp, #20
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80027f4:	7afb      	ldrb	r3, [r7, #11]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d002      	beq.n	8002800 <HAL_CAN_IsTxMessagePending+0x22>
 80027fa:	7afb      	ldrb	r3, [r7, #11]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d10b      	bne.n	8002818 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	069b      	lsls	r3, r3, #26
 800280a:	401a      	ands	r2, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	069b      	lsls	r3, r3, #26
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8002814:	2301      	movs	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8002818:	68fb      	ldr	r3, [r7, #12]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002826:	b480      	push	{r7}
 8002828:	b085      	sub	sp, #20
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002836:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d002      	beq.n	8002844 <HAL_CAN_ActivateNotification+0x1e>
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d109      	bne.n	8002858 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6959      	ldr	r1, [r3, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	e006      	b.n	8002866 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <__NVIC_SetPriorityGrouping>:
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002884:	4b0c      	ldr	r3, [pc, #48]	@ (80028b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002890:	4013      	ands	r3, r2
 8002892:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800289c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a6:	4a04      	ldr	r2, [pc, #16]	@ (80028b8 <__NVIC_SetPriorityGrouping+0x44>)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	60d3      	str	r3, [r2, #12]
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <__NVIC_GetPriorityGrouping>:
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c0:	4b04      	ldr	r3, [pc, #16]	@ (80028d4 <__NVIC_GetPriorityGrouping+0x18>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	0a1b      	lsrs	r3, r3, #8
 80028c6:	f003 0307 	and.w	r3, r3, #7
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_EnableIRQ>:
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	db0b      	blt.n	8002902 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	f003 021f 	and.w	r2, r3, #31
 80028f0:	4907      	ldr	r1, [pc, #28]	@ (8002910 <__NVIC_EnableIRQ+0x38>)
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	2001      	movs	r0, #1
 80028fa:	fa00 f202 	lsl.w	r2, r0, r2
 80028fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000e100 	.word	0xe000e100

08002914 <__NVIC_SetPriority>:
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	6039      	str	r1, [r7, #0]
 800291e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002924:	2b00      	cmp	r3, #0
 8002926:	db0a      	blt.n	800293e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	b2da      	uxtb	r2, r3
 800292c:	490c      	ldr	r1, [pc, #48]	@ (8002960 <__NVIC_SetPriority+0x4c>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	0112      	lsls	r2, r2, #4
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	440b      	add	r3, r1
 8002938:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800293c:	e00a      	b.n	8002954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4908      	ldr	r1, [pc, #32]	@ (8002964 <__NVIC_SetPriority+0x50>)
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	3b04      	subs	r3, #4
 800294c:	0112      	lsls	r2, r2, #4
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	440b      	add	r3, r1
 8002952:	761a      	strb	r2, [r3, #24]
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000e100 	.word	0xe000e100
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <NVIC_EncodePriority>:
{
 8002968:	b480      	push	{r7}
 800296a:	b089      	sub	sp, #36	@ 0x24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f1c3 0307 	rsb	r3, r3, #7
 8002982:	2b04      	cmp	r3, #4
 8002984:	bf28      	it	cs
 8002986:	2304      	movcs	r3, #4
 8002988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3304      	adds	r3, #4
 800298e:	2b06      	cmp	r3, #6
 8002990:	d902      	bls.n	8002998 <NVIC_EncodePriority+0x30>
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3b03      	subs	r3, #3
 8002996:	e000      	b.n	800299a <NVIC_EncodePriority+0x32>
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800299c:	f04f 32ff 	mov.w	r2, #4294967295
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43da      	mvns	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	401a      	ands	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b0:	f04f 31ff 	mov.w	r1, #4294967295
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ba:	43d9      	mvns	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c0:	4313      	orrs	r3, r2
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3724      	adds	r7, #36	@ 0x24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <SysTick_Config>:
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3b01      	subs	r3, #1
 80029dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029e0:	d301      	bcc.n	80029e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80029e2:	2301      	movs	r3, #1
 80029e4:	e00f      	b.n	8002a06 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002a10 <SysTick_Config+0x40>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ee:	210f      	movs	r1, #15
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	f7ff ff8e 	bl	8002914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f8:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <SysTick_Config+0x40>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029fe:	4b04      	ldr	r3, [pc, #16]	@ (8002a10 <SysTick_Config+0x40>)
 8002a00:	2207      	movs	r2, #7
 8002a02:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	e000e010 	.word	0xe000e010

08002a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff ff29 	bl	8002874 <__NVIC_SetPriorityGrouping>
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b086      	sub	sp, #24
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	4603      	mov	r3, r0
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a3c:	f7ff ff3e 	bl	80028bc <__NVIC_GetPriorityGrouping>
 8002a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	6978      	ldr	r0, [r7, #20]
 8002a48:	f7ff ff8e 	bl	8002968 <NVIC_EncodePriority>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff5d 	bl	8002914 <__NVIC_SetPriority>
}
 8002a5a:	bf00      	nop
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff31 	bl	80028d8 <__NVIC_EnableIRQ>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff ffa2 	bl	80029d0 <SysTick_Config>
 8002a8c:	4603      	mov	r3, r0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	@ 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	e153      	b.n	8002d5c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	f040 8142 	bne.w	8002d56 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d005      	beq.n	8002aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d130      	bne.n	8002b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	2203      	movs	r2, #3
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b20:	2201      	movs	r2, #1
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 0201 	and.w	r2, r3, #1
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d017      	beq.n	8002b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	2203      	movs	r2, #3
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d123      	bne.n	8002bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	08da      	lsrs	r2, r3, #3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3208      	adds	r2, #8
 8002b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	220f      	movs	r2, #15
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	08da      	lsrs	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3208      	adds	r2, #8
 8002bd6:	69b9      	ldr	r1, [r7, #24]
 8002bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	2203      	movs	r2, #3
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0203 	and.w	r2, r3, #3
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 809c 	beq.w	8002d56 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	4b54      	ldr	r3, [pc, #336]	@ (8002d74 <HAL_GPIO_Init+0x2dc>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c26:	4a53      	ldr	r2, [pc, #332]	@ (8002d74 <HAL_GPIO_Init+0x2dc>)
 8002c28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c2e:	4b51      	ldr	r3, [pc, #324]	@ (8002d74 <HAL_GPIO_Init+0x2dc>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c3a:	4a4f      	ldr	r2, [pc, #316]	@ (8002d78 <HAL_GPIO_Init+0x2e0>)
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	3302      	adds	r3, #2
 8002c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	220f      	movs	r2, #15
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a46      	ldr	r2, [pc, #280]	@ (8002d7c <HAL_GPIO_Init+0x2e4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_GPIO_Init+0x1f6>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a45      	ldr	r2, [pc, #276]	@ (8002d80 <HAL_GPIO_Init+0x2e8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00d      	beq.n	8002c8a <HAL_GPIO_Init+0x1f2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a44      	ldr	r2, [pc, #272]	@ (8002d84 <HAL_GPIO_Init+0x2ec>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <HAL_GPIO_Init+0x1ee>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a43      	ldr	r2, [pc, #268]	@ (8002d88 <HAL_GPIO_Init+0x2f0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d101      	bne.n	8002c82 <HAL_GPIO_Init+0x1ea>
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e006      	b.n	8002c90 <HAL_GPIO_Init+0x1f8>
 8002c82:	2307      	movs	r3, #7
 8002c84:	e004      	b.n	8002c90 <HAL_GPIO_Init+0x1f8>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e002      	b.n	8002c90 <HAL_GPIO_Init+0x1f8>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <HAL_GPIO_Init+0x1f8>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	f002 0203 	and.w	r2, r2, #3
 8002c96:	0092      	lsls	r2, r2, #2
 8002c98:	4093      	lsls	r3, r2
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ca0:	4935      	ldr	r1, [pc, #212]	@ (8002d78 <HAL_GPIO_Init+0x2e0>)
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	089b      	lsrs	r3, r3, #2
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cae:	4b37      	ldr	r3, [pc, #220]	@ (8002d8c <HAL_GPIO_Init+0x2f4>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cd2:	4a2e      	ldr	r2, [pc, #184]	@ (8002d8c <HAL_GPIO_Init+0x2f4>)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8002d8c <HAL_GPIO_Init+0x2f4>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cfc:	4a23      	ldr	r2, [pc, #140]	@ (8002d8c <HAL_GPIO_Init+0x2f4>)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d02:	4b22      	ldr	r3, [pc, #136]	@ (8002d8c <HAL_GPIO_Init+0x2f4>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d26:	4a19      	ldr	r2, [pc, #100]	@ (8002d8c <HAL_GPIO_Init+0x2f4>)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d2c:	4b17      	ldr	r3, [pc, #92]	@ (8002d8c <HAL_GPIO_Init+0x2f4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d50:	4a0e      	ldr	r2, [pc, #56]	@ (8002d8c <HAL_GPIO_Init+0x2f4>)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	61fb      	str	r3, [r7, #28]
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	2b0f      	cmp	r3, #15
 8002d60:	f67f aea8 	bls.w	8002ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d64:	bf00      	nop
 8002d66:	bf00      	nop
 8002d68:	3724      	adds	r7, #36	@ 0x24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40013800 	.word	0x40013800
 8002d7c:	40020000 	.word	0x40020000
 8002d80:	40020400 	.word	0x40020400
 8002d84:	40020800 	.word	0x40020800
 8002d88:	40020c00 	.word	0x40020c00
 8002d8c:	40013c00 	.word	0x40013c00

08002d90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	887b      	ldrh	r3, [r7, #2]
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
 8002dac:	e001      	b.n	8002db2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dae:	2300      	movs	r3, #0
 8002db0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd0:	787b      	ldrb	r3, [r7, #1]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ddc:	e003      	b.n	8002de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dde:	887b      	ldrh	r3, [r7, #2]
 8002de0:	041a      	lsls	r2, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	619a      	str	r2, [r3, #24]
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b085      	sub	sp, #20
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e04:	887a      	ldrh	r2, [r7, #2]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	041a      	lsls	r2, r3, #16
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	43d9      	mvns	r1, r3
 8002e10:	887b      	ldrh	r3, [r7, #2]
 8002e12:	400b      	ands	r3, r1
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	619a      	str	r2, [r3, #24]
}
 8002e1a:	bf00      	nop
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e32:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d006      	beq.n	8002e4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e3e:	4a05      	ldr	r2, [pc, #20]	@ (8002e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fd fde4 	bl	8000a14 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40013c00 	.word	0x40013c00

08002e58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e12b      	b.n	80030c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fe fafc 	bl	800147c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2224      	movs	r2, #36	@ 0x24
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eaa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002eba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ebc:	f000 fde0 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 8002ec0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	4a81      	ldr	r2, [pc, #516]	@ (80030cc <HAL_I2C_Init+0x274>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d807      	bhi.n	8002edc <HAL_I2C_Init+0x84>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a80      	ldr	r2, [pc, #512]	@ (80030d0 <HAL_I2C_Init+0x278>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	bf94      	ite	ls
 8002ed4:	2301      	movls	r3, #1
 8002ed6:	2300      	movhi	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	e006      	b.n	8002eea <HAL_I2C_Init+0x92>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4a7d      	ldr	r2, [pc, #500]	@ (80030d4 <HAL_I2C_Init+0x27c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	bf94      	ite	ls
 8002ee4:	2301      	movls	r3, #1
 8002ee6:	2300      	movhi	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e0e7      	b.n	80030c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a78      	ldr	r2, [pc, #480]	@ (80030d8 <HAL_I2C_Init+0x280>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	0c9b      	lsrs	r3, r3, #18
 8002efc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4a6a      	ldr	r2, [pc, #424]	@ (80030cc <HAL_I2C_Init+0x274>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d802      	bhi.n	8002f2c <HAL_I2C_Init+0xd4>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	e009      	b.n	8002f40 <HAL_I2C_Init+0xe8>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	4a69      	ldr	r2, [pc, #420]	@ (80030dc <HAL_I2C_Init+0x284>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	099b      	lsrs	r3, r3, #6
 8002f3e:	3301      	adds	r3, #1
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	430b      	orrs	r3, r1
 8002f46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f52:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	495c      	ldr	r1, [pc, #368]	@ (80030cc <HAL_I2C_Init+0x274>)
 8002f5c:	428b      	cmp	r3, r1
 8002f5e:	d819      	bhi.n	8002f94 <HAL_I2C_Init+0x13c>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1e59      	subs	r1, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f6e:	1c59      	adds	r1, r3, #1
 8002f70:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f74:	400b      	ands	r3, r1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <HAL_I2C_Init+0x138>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1e59      	subs	r1, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8e:	e051      	b.n	8003034 <HAL_I2C_Init+0x1dc>
 8002f90:	2304      	movs	r3, #4
 8002f92:	e04f      	b.n	8003034 <HAL_I2C_Init+0x1dc>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d111      	bne.n	8002fc0 <HAL_I2C_Init+0x168>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1e58      	subs	r0, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6859      	ldr	r1, [r3, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	440b      	add	r3, r1
 8002faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	bf0c      	ite	eq
 8002fb8:	2301      	moveq	r3, #1
 8002fba:	2300      	movne	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	e012      	b.n	8002fe6 <HAL_I2C_Init+0x18e>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1e58      	subs	r0, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6859      	ldr	r1, [r3, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	0099      	lsls	r1, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_I2C_Init+0x196>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e022      	b.n	8003034 <HAL_I2C_Init+0x1dc>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10e      	bne.n	8003014 <HAL_I2C_Init+0x1bc>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1e58      	subs	r0, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6859      	ldr	r1, [r3, #4]
 8002ffe:	460b      	mov	r3, r1
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	440b      	add	r3, r1
 8003004:	fbb0 f3f3 	udiv	r3, r0, r3
 8003008:	3301      	adds	r3, #1
 800300a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003012:	e00f      	b.n	8003034 <HAL_I2C_Init+0x1dc>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1e58      	subs	r0, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	0099      	lsls	r1, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	fbb0 f3f3 	udiv	r3, r0, r3
 800302a:	3301      	adds	r3, #1
 800302c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003030:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	6809      	ldr	r1, [r1, #0]
 8003038:	4313      	orrs	r3, r2
 800303a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003062:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6911      	ldr	r1, [r2, #16]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	68d2      	ldr	r2, [r2, #12]
 800306e:	4311      	orrs	r1, r2
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	430b      	orrs	r3, r1
 8003076:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	000186a0 	.word	0x000186a0
 80030d0:	001e847f 	.word	0x001e847f
 80030d4:	003d08ff 	.word	0x003d08ff
 80030d8:	431bde83 	.word	0x431bde83
 80030dc:	10624dd3 	.word	0x10624dd3

080030e0 <HAL_IRDA_Init>:
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IRDA_Init(IRDA_HandleTypeDef *hirda)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the IRDA handle allocation */
  if (hirda == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_IRDA_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e05e      	b.n	80031b0 <HAL_IRDA_Init+0xd0>
  /* Check the IRDA instance parameters */
  assert_param(IS_IRDA_INSTANCE(hirda->Instance));
  /* Check the IRDA mode parameter in the IRDA handle */
  assert_param(IS_IRDA_POWERMODE(hirda->Init.IrDAMode));

  if (hirda->gState == HAL_IRDA_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_IRDA_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hirda->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware */
    hirda->MspInitCallback(hirda);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_IRDA_MspInit(hirda);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fe fa9a 	bl	8001640 <HAL_IRDA_MspInit>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
  }

  hirda->gState = HAL_IRDA_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2224      	movs	r2, #36	@ 0x24
 8003110:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable the IRDA peripheral */
  __HAL_IRDA_DISABLE(hirda);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003122:	60da      	str	r2, [r3, #12]

  /* Set the IRDA communication parameters */
  IRDA_SetConfig(hirda);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f847 	bl	80031b8 <IRDA_SetConfig>

  /* In IrDA mode, the following bits must be kept cleared:
  - LINEN, STOP and CLKEN bits in the USART_CR2 register,
  - SCEN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(hirda->Instance->CR2, (USART_CR2_LINEN | USART_CR2_STOP | USART_CR2_CLKEN));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 42f0 	bic.w	r2, r2, #30720	@ 0x7800
 8003138:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695a      	ldr	r2, [r3, #20]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0228 	bic.w	r2, r2, #40	@ 0x28
 8003148:	615a      	str	r2, [r3, #20]

  /* Enable the IRDA peripheral */
  __HAL_IRDA_ENABLE(hirda);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003158:	60da      	str	r2, [r3, #12]

  /* Set the prescaler */
  MODIFY_REG(hirda->Instance->GTPR, USART_GTPR_PSC, hirda->Init.Prescaler);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	7d1b      	ldrb	r3, [r3, #20]
 8003168:	4619      	mov	r1, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	619a      	str	r2, [r3, #24]

  /* Configure the IrDA mode */
  MODIFY_REG(hirda->Instance->CR3, USART_CR3_IRLP, hirda->Init.IrDAMode);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	f023 0104 	bic.w	r1, r3, #4
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699a      	ldr	r2, [r3, #24]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	615a      	str	r2, [r3, #20]

  /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
  SET_BIT(hirda->Instance->CR3, USART_CR3_IREN);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0202 	orr.w	r2, r2, #2
 8003196:	615a      	str	r2, [r3, #20]

  /* Initialize the IRDA state*/
  hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	639a      	str	r2, [r3, #56]	@ 0x38
  hirda->gState = HAL_IRDA_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hirda->RxState = HAL_IRDA_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <IRDA_SetConfig>:
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_SetConfig(IRDA_HandleTypeDef *hirda)
{
 80031b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031bc:	b0bb      	sub	sp, #236	@ 0xec
 80031be:	af00      	add	r7, sp, #0
 80031c0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
  assert_param(IS_IRDA_MODE(hirda->Init.Mode));
  assert_param(IS_IRDA_POWERMODE(hirda->Init.IrDAMode));

  /*-------------------------- USART CR2 Configuration ------------------------*/
  /* Clear STOP[13:12] bits */
  CLEAR_BIT(hirda->Instance->CR2, USART_CR2_STOP);
 80031c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6919      	ldr	r1, [r3, #16]
 80031cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	f421 5340 	bic.w	r3, r1, #12288	@ 0x3000
 80031d6:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  /* Clear M, PCE, PS, TE and RE bits */
  CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 80031d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68d9      	ldr	r1, [r3, #12]
 80031e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	f421 53b0 	bic.w	r3, r1, #5632	@ 0x1600
 80031ea:	f023 030c 	bic.w	r3, r3, #12
 80031ee:	60d3      	str	r3, [r2, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to hirda->Init.WordLength value
     Set PCE and PS bits according to hirda->Init.Parity value
     Set TE and RE bits according to hirda->Init.Mode value */
  /* Write to USART CR1 */
  SET_BIT(hirda->Instance->CR1, (hirda->Init.WordLength | hirda->Init.Parity | hirda->Init.Mode));
 80031f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68d8      	ldr	r0, [r3, #12]
 80031f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	431a      	orrs	r2, r3
 8003206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	ea42 0103 	orr.w	r1, r2, r3
 8003210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	ea40 0301 	orr.w	r3, r0, r1
 800321a:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 800321c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6959      	ldr	r1, [r3, #20]
 8003224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
 800322e:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
   }
#elif defined(USART6)
  if((hirda->Instance == USART1) || (hirda->Instance == USART6))
 8003230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	4b90      	ldr	r3, [pc, #576]	@ (8003478 <IRDA_SetConfig+0x2c0>)
 8003238:	429a      	cmp	r2, r3
 800323a:	d006      	beq.n	800324a <IRDA_SetConfig+0x92>
 800323c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	4b8e      	ldr	r3, [pc, #568]	@ (800347c <IRDA_SetConfig+0x2c4>)
 8003244:	429a      	cmp	r2, r3
 8003246:	f040 811d 	bne.w	8003484 <IRDA_SetConfig+0x2cc>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800324a:	f000 fc2d 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 800324e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
    SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
 8003252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689d      	ldr	r5, [r3, #8]
 800325a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800325e:	2200      	movs	r2, #0
 8003260:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003264:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003268:	e9d7 ab34 	ldrd	sl, fp, [r7, #208]	@ 0xd0
 800326c:	4652      	mov	r2, sl
 800326e:	465b      	mov	r3, fp
 8003270:	1891      	adds	r1, r2, r2
 8003272:	6439      	str	r1, [r7, #64]	@ 0x40
 8003274:	415b      	adcs	r3, r3
 8003276:	647b      	str	r3, [r7, #68]	@ 0x44
 8003278:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800327c:	4651      	mov	r1, sl
 800327e:	eb12 0801 	adds.w	r8, r2, r1
 8003282:	4659      	mov	r1, fp
 8003284:	eb43 0901 	adc.w	r9, r3, r1
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003294:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003298:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800329c:	4690      	mov	r8, r2
 800329e:	4699      	mov	r9, r3
 80032a0:	4653      	mov	r3, sl
 80032a2:	eb18 0303 	adds.w	r3, r8, r3
 80032a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032aa:	465b      	mov	r3, fp
 80032ac:	eb49 0303 	adc.w	r3, r9, r3
 80032b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80032d0:	4649      	mov	r1, r9
 80032d2:	008b      	lsls	r3, r1, #2
 80032d4:	4641      	mov	r1, r8
 80032d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032da:	4641      	mov	r1, r8
 80032dc:	008a      	lsls	r2, r1, #2
 80032de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80032e2:	f7fc ff8f 	bl	8000204 <__aeabi_uldivmod>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4b65      	ldr	r3, [pc, #404]	@ (8003480 <IRDA_SetConfig+0x2c8>)
 80032ec:	fba3 2302 	umull	r2, r3, r3, r2
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	011c      	lsls	r4, r3, #4
 80032f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f8:	2200      	movs	r2, #0
 80032fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032fe:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003302:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003306:	4642      	mov	r2, r8
 8003308:	464b      	mov	r3, r9
 800330a:	1891      	adds	r1, r2, r2
 800330c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800330e:	415b      	adcs	r3, r3
 8003310:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003312:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003316:	4641      	mov	r1, r8
 8003318:	1851      	adds	r1, r2, r1
 800331a:	6339      	str	r1, [r7, #48]	@ 0x30
 800331c:	4649      	mov	r1, r9
 800331e:	414b      	adcs	r3, r1
 8003320:	637b      	str	r3, [r7, #52]	@ 0x34
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800332e:	4659      	mov	r1, fp
 8003330:	00cb      	lsls	r3, r1, #3
 8003332:	4651      	mov	r1, sl
 8003334:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003338:	4651      	mov	r1, sl
 800333a:	00ca      	lsls	r2, r1, #3
 800333c:	4610      	mov	r0, r2
 800333e:	4619      	mov	r1, r3
 8003340:	4603      	mov	r3, r0
 8003342:	4642      	mov	r2, r8
 8003344:	189b      	adds	r3, r3, r2
 8003346:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800334a:	464b      	mov	r3, r9
 800334c:	460a      	mov	r2, r1
 800334e:	eb42 0303 	adc.w	r3, r2, r3
 8003352:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003362:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8003372:	4649      	mov	r1, r9
 8003374:	008b      	lsls	r3, r1, #2
 8003376:	4641      	mov	r1, r8
 8003378:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800337c:	4641      	mov	r1, r8
 800337e:	008a      	lsls	r2, r1, #2
 8003380:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003384:	f7fc ff3e 	bl	8000204 <__aeabi_uldivmod>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4611      	mov	r1, r2
 800338e:	4b3c      	ldr	r3, [pc, #240]	@ (8003480 <IRDA_SetConfig+0x2c8>)
 8003390:	fba3 2301 	umull	r2, r3, r3, r1
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	2264      	movs	r2, #100	@ 0x64
 8003398:	fb02 f303 	mul.w	r3, r2, r3
 800339c:	1acb      	subs	r3, r1, r3
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	3332      	adds	r3, #50	@ 0x32
 80033a2:	4a37      	ldr	r2, [pc, #220]	@ (8003480 <IRDA_SetConfig+0x2c8>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033ae:	441c      	add	r4, r3
 80033b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033b4:	2200      	movs	r2, #0
 80033b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80033be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80033c2:	4642      	mov	r2, r8
 80033c4:	464b      	mov	r3, r9
 80033c6:	1891      	adds	r1, r2, r2
 80033c8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80033ca:	415b      	adcs	r3, r3
 80033cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033d2:	4641      	mov	r1, r8
 80033d4:	1851      	adds	r1, r2, r1
 80033d6:	6239      	str	r1, [r7, #32]
 80033d8:	4649      	mov	r1, r9
 80033da:	414b      	adcs	r3, r1
 80033dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 80033ea:	4659      	mov	r1, fp
 80033ec:	00cb      	lsls	r3, r1, #3
 80033ee:	4651      	mov	r1, sl
 80033f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033f4:	4651      	mov	r1, sl
 80033f6:	00ca      	lsls	r2, r1, #3
 80033f8:	4610      	mov	r0, r2
 80033fa:	4619      	mov	r1, r3
 80033fc:	4603      	mov	r3, r0
 80033fe:	4642      	mov	r2, r8
 8003400:	189b      	adds	r3, r3, r2
 8003402:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003406:	464b      	mov	r3, r9
 8003408:	460a      	mov	r2, r1
 800340a:	eb42 0303 	adc.w	r3, r2, r3
 800340e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800341e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800342e:	4649      	mov	r1, r9
 8003430:	008b      	lsls	r3, r1, #2
 8003432:	4641      	mov	r1, r8
 8003434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003438:	4641      	mov	r1, r8
 800343a:	008a      	lsls	r2, r1, #2
 800343c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003440:	f7fc fee0 	bl	8000204 <__aeabi_uldivmod>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4b0d      	ldr	r3, [pc, #52]	@ (8003480 <IRDA_SetConfig+0x2c8>)
 800344a:	fba3 1302 	umull	r1, r3, r3, r2
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	2164      	movs	r1, #100	@ 0x64
 8003452:	fb01 f303 	mul.w	r3, r1, r3
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	3332      	adds	r3, #50	@ 0x32
 800345c:	4a08      	ldr	r2, [pc, #32]	@ (8003480 <IRDA_SetConfig+0x2c8>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	18e2      	adds	r2, r4, r3
 800346a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	432a      	orrs	r2, r5
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	e106      	b.n	8003684 <IRDA_SetConfig+0x4cc>
 8003476:	bf00      	nop
 8003478:	40011000 	.word	0x40011000
 800347c:	40011400 	.word	0x40011400
 8003480:	51eb851f 	.word	0x51eb851f
    SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
  }
#endif /* USART6 */
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003484:	f000 fafc 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 8003488:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
    SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
 800348c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689e      	ldr	r6, [r3, #8]
 8003494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003498:	2200      	movs	r2, #0
 800349a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800349e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034a2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034a6:	4642      	mov	r2, r8
 80034a8:	464b      	mov	r3, r9
 80034aa:	1891      	adds	r1, r2, r2
 80034ac:	61b9      	str	r1, [r7, #24]
 80034ae:	415b      	adcs	r3, r3
 80034b0:	61fb      	str	r3, [r7, #28]
 80034b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034b6:	4641      	mov	r1, r8
 80034b8:	1854      	adds	r4, r2, r1
 80034ba:	4649      	mov	r1, r9
 80034bc:	eb43 0501 	adc.w	r5, r3, r1
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	00eb      	lsls	r3, r5, #3
 80034ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ce:	00e2      	lsls	r2, r4, #3
 80034d0:	4614      	mov	r4, r2
 80034d2:	461d      	mov	r5, r3
 80034d4:	4643      	mov	r3, r8
 80034d6:	18e3      	adds	r3, r4, r3
 80034d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034dc:	464b      	mov	r3, r9
 80034de:	eb45 0303 	adc.w	r3, r5, r3
 80034e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034f0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80034fe:	4629      	mov	r1, r5
 8003500:	008b      	lsls	r3, r1, #2
 8003502:	4621      	mov	r1, r4
 8003504:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003508:	4621      	mov	r1, r4
 800350a:	008a      	lsls	r2, r1, #2
 800350c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003510:	f7fc fe78 	bl	8000204 <__aeabi_uldivmod>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4b5d      	ldr	r3, [pc, #372]	@ (8003690 <IRDA_SetConfig+0x4d8>)
 800351a:	fba3 2302 	umull	r2, r3, r3, r2
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	011c      	lsls	r4, r3, #4
 8003522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003526:	2200      	movs	r2, #0
 8003528:	673b      	str	r3, [r7, #112]	@ 0x70
 800352a:	677a      	str	r2, [r7, #116]	@ 0x74
 800352c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003530:	4642      	mov	r2, r8
 8003532:	464b      	mov	r3, r9
 8003534:	1891      	adds	r1, r2, r2
 8003536:	6139      	str	r1, [r7, #16]
 8003538:	415b      	adcs	r3, r3
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003540:	4641      	mov	r1, r8
 8003542:	eb12 0a01 	adds.w	sl, r2, r1
 8003546:	4649      	mov	r1, r9
 8003548:	eb43 0b01 	adc.w	fp, r3, r1
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003558:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800355c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003560:	4692      	mov	sl, r2
 8003562:	469b      	mov	fp, r3
 8003564:	4643      	mov	r3, r8
 8003566:	eb1a 0303 	adds.w	r3, sl, r3
 800356a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800356c:	464b      	mov	r3, r9
 800356e:	eb4b 0303 	adc.w	r3, fp, r3
 8003572:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	663b      	str	r3, [r7, #96]	@ 0x60
 800357e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800358c:	4649      	mov	r1, r9
 800358e:	008b      	lsls	r3, r1, #2
 8003590:	4641      	mov	r1, r8
 8003592:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003596:	4641      	mov	r1, r8
 8003598:	008a      	lsls	r2, r1, #2
 800359a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800359e:	f7fc fe31 	bl	8000204 <__aeabi_uldivmod>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4611      	mov	r1, r2
 80035a8:	4b39      	ldr	r3, [pc, #228]	@ (8003690 <IRDA_SetConfig+0x4d8>)
 80035aa:	fba3 2301 	umull	r2, r3, r3, r1
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	2264      	movs	r2, #100	@ 0x64
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	1acb      	subs	r3, r1, r3
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	3332      	adds	r3, #50	@ 0x32
 80035bc:	4a34      	ldr	r2, [pc, #208]	@ (8003690 <IRDA_SetConfig+0x4d8>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035c8:	441c      	add	r4, r3
 80035ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ce:	2200      	movs	r2, #0
 80035d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035d2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80035d4:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 80035d8:	4642      	mov	r2, r8
 80035da:	464b      	mov	r3, r9
 80035dc:	1891      	adds	r1, r2, r2
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	415b      	adcs	r3, r3
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035e8:	4641      	mov	r1, r8
 80035ea:	1851      	adds	r1, r2, r1
 80035ec:	6039      	str	r1, [r7, #0]
 80035ee:	4649      	mov	r1, r9
 80035f0:	414b      	adcs	r3, r1
 80035f2:	607b      	str	r3, [r7, #4]
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003600:	4659      	mov	r1, fp
 8003602:	00cb      	lsls	r3, r1, #3
 8003604:	4651      	mov	r1, sl
 8003606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800360a:	4651      	mov	r1, sl
 800360c:	00ca      	lsls	r2, r1, #3
 800360e:	4610      	mov	r0, r2
 8003610:	4619      	mov	r1, r3
 8003612:	4603      	mov	r3, r0
 8003614:	4642      	mov	r2, r8
 8003616:	189b      	adds	r3, r3, r2
 8003618:	653b      	str	r3, [r7, #80]	@ 0x50
 800361a:	464b      	mov	r3, r9
 800361c:	460a      	mov	r2, r1
 800361e:	eb42 0303 	adc.w	r3, r2, r3
 8003622:	657b      	str	r3, [r7, #84]	@ 0x54
 8003624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800362e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 800363c:	4649      	mov	r1, r9
 800363e:	008b      	lsls	r3, r1, #2
 8003640:	4641      	mov	r1, r8
 8003642:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003646:	4641      	mov	r1, r8
 8003648:	008a      	lsls	r2, r1, #2
 800364a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800364e:	f7fc fdd9 	bl	8000204 <__aeabi_uldivmod>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	4b0e      	ldr	r3, [pc, #56]	@ (8003690 <IRDA_SetConfig+0x4d8>)
 8003658:	fba3 1302 	umull	r1, r3, r3, r2
 800365c:	095b      	lsrs	r3, r3, #5
 800365e:	2164      	movs	r1, #100	@ 0x64
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	3332      	adds	r3, #50	@ 0x32
 800366a:	4a09      	ldr	r2, [pc, #36]	@ (8003690 <IRDA_SetConfig+0x4d8>)
 800366c:	fba2 2303 	umull	r2, r3, r2, r3
 8003670:	095b      	lsrs	r3, r3, #5
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	18e2      	adds	r2, r4, r3
 8003678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4332      	orrs	r2, r6
 8003680:	609a      	str	r2, [r3, #8]
  }
}
 8003682:	bf00      	nop
 8003684:	bf00      	nop
 8003686:	37ec      	adds	r7, #236	@ 0xec
 8003688:	46bd      	mov	sp, r7
 800368a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800368e:	bf00      	nop
 8003690:	51eb851f 	.word	0x51eb851f

08003694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0cc      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a8:	4b68      	ldr	r3, [pc, #416]	@ (800384c <HAL_RCC_ClockConfig+0x1b8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d90c      	bls.n	80036d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	4b65      	ldr	r3, [pc, #404]	@ (800384c <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b63      	ldr	r3, [pc, #396]	@ (800384c <HAL_RCC_ClockConfig+0x1b8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0b8      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d020      	beq.n	800371e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e8:	4b59      	ldr	r3, [pc, #356]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4a58      	ldr	r2, [pc, #352]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003700:	4b53      	ldr	r3, [pc, #332]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4a52      	ldr	r2, [pc, #328]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800370a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800370c:	4b50      	ldr	r3, [pc, #320]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	494d      	ldr	r1, [pc, #308]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	4313      	orrs	r3, r2
 800371c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d044      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d107      	bne.n	8003742 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003732:	4b47      	ldr	r3, [pc, #284]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d119      	bne.n	8003772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e07f      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d003      	beq.n	8003752 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800374e:	2b03      	cmp	r3, #3
 8003750:	d107      	bne.n	8003762 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003752:	4b3f      	ldr	r3, [pc, #252]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e06f      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003762:	4b3b      	ldr	r3, [pc, #236]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e067      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003772:	4b37      	ldr	r3, [pc, #220]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f023 0203 	bic.w	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4934      	ldr	r1, [pc, #208]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	4313      	orrs	r3, r2
 8003782:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003784:	f7fe fa60 	bl	8001c48 <HAL_GetTick>
 8003788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800378c:	f7fe fa5c 	bl	8001c48 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e04f      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 020c 	and.w	r2, r3, #12
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d1eb      	bne.n	800378c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037b4:	4b25      	ldr	r3, [pc, #148]	@ (800384c <HAL_RCC_ClockConfig+0x1b8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d20c      	bcs.n	80037dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c2:	4b22      	ldr	r3, [pc, #136]	@ (800384c <HAL_RCC_ClockConfig+0x1b8>)
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ca:	4b20      	ldr	r3, [pc, #128]	@ (800384c <HAL_RCC_ClockConfig+0x1b8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d001      	beq.n	80037dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e032      	b.n	8003842 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e8:	4b19      	ldr	r3, [pc, #100]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4916      	ldr	r1, [pc, #88]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003806:	4b12      	ldr	r3, [pc, #72]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	490e      	ldr	r1, [pc, #56]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800381a:	f000 f821 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 800381e:	4602      	mov	r2, r0
 8003820:	4b0b      	ldr	r3, [pc, #44]	@ (8003850 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	490a      	ldr	r1, [pc, #40]	@ (8003854 <HAL_RCC_ClockConfig+0x1c0>)
 800382c:	5ccb      	ldrb	r3, [r1, r3]
 800382e:	fa22 f303 	lsr.w	r3, r2, r3
 8003832:	4a09      	ldr	r2, [pc, #36]	@ (8003858 <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003836:	4b09      	ldr	r3, [pc, #36]	@ (800385c <HAL_RCC_ClockConfig+0x1c8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7fe f9c0 	bl	8001bc0 <HAL_InitTick>

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40023c00 	.word	0x40023c00
 8003850:	40023800 	.word	0x40023800
 8003854:	080052b8 	.word	0x080052b8
 8003858:	20000000 	.word	0x20000000
 800385c:	20000004 	.word	0x20000004

08003860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003864:	b094      	sub	sp, #80	@ 0x50
 8003866:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003878:	4b79      	ldr	r3, [pc, #484]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x200>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 030c 	and.w	r3, r3, #12
 8003880:	2b08      	cmp	r3, #8
 8003882:	d00d      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003884:	2b08      	cmp	r3, #8
 8003886:	f200 80e1 	bhi.w	8003a4c <HAL_RCC_GetSysClockFreq+0x1ec>
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_RCC_GetSysClockFreq+0x34>
 800388e:	2b04      	cmp	r3, #4
 8003890:	d003      	beq.n	800389a <HAL_RCC_GetSysClockFreq+0x3a>
 8003892:	e0db      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003894:	4b73      	ldr	r3, [pc, #460]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003896:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003898:	e0db      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800389a:	4b72      	ldr	r3, [pc, #456]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x204>)
 800389c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800389e:	e0d8      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x200>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d063      	beq.n	800397e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	099b      	lsrs	r3, r3, #6
 80038bc:	2200      	movs	r2, #0
 80038be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80038ca:	2300      	movs	r3, #0
 80038cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80038d2:	4622      	mov	r2, r4
 80038d4:	462b      	mov	r3, r5
 80038d6:	f04f 0000 	mov.w	r0, #0
 80038da:	f04f 0100 	mov.w	r1, #0
 80038de:	0159      	lsls	r1, r3, #5
 80038e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038e4:	0150      	lsls	r0, r2, #5
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	4621      	mov	r1, r4
 80038ec:	1a51      	subs	r1, r2, r1
 80038ee:	6139      	str	r1, [r7, #16]
 80038f0:	4629      	mov	r1, r5
 80038f2:	eb63 0301 	sbc.w	r3, r3, r1
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003904:	4659      	mov	r1, fp
 8003906:	018b      	lsls	r3, r1, #6
 8003908:	4651      	mov	r1, sl
 800390a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800390e:	4651      	mov	r1, sl
 8003910:	018a      	lsls	r2, r1, #6
 8003912:	4651      	mov	r1, sl
 8003914:	ebb2 0801 	subs.w	r8, r2, r1
 8003918:	4659      	mov	r1, fp
 800391a:	eb63 0901 	sbc.w	r9, r3, r1
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800392a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800392e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003932:	4690      	mov	r8, r2
 8003934:	4699      	mov	r9, r3
 8003936:	4623      	mov	r3, r4
 8003938:	eb18 0303 	adds.w	r3, r8, r3
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	462b      	mov	r3, r5
 8003940:	eb49 0303 	adc.w	r3, r9, r3
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003952:	4629      	mov	r1, r5
 8003954:	028b      	lsls	r3, r1, #10
 8003956:	4621      	mov	r1, r4
 8003958:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800395c:	4621      	mov	r1, r4
 800395e:	028a      	lsls	r2, r1, #10
 8003960:	4610      	mov	r0, r2
 8003962:	4619      	mov	r1, r3
 8003964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003966:	2200      	movs	r2, #0
 8003968:	62bb      	str	r3, [r7, #40]	@ 0x28
 800396a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800396c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003970:	f7fc fc48 	bl	8000204 <__aeabi_uldivmod>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4613      	mov	r3, r2
 800397a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800397c:	e058      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800397e:	4b38      	ldr	r3, [pc, #224]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	099b      	lsrs	r3, r3, #6
 8003984:	2200      	movs	r2, #0
 8003986:	4618      	mov	r0, r3
 8003988:	4611      	mov	r1, r2
 800398a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800398e:	623b      	str	r3, [r7, #32]
 8003990:	2300      	movs	r3, #0
 8003992:	627b      	str	r3, [r7, #36]	@ 0x24
 8003994:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003998:	4642      	mov	r2, r8
 800399a:	464b      	mov	r3, r9
 800399c:	f04f 0000 	mov.w	r0, #0
 80039a0:	f04f 0100 	mov.w	r1, #0
 80039a4:	0159      	lsls	r1, r3, #5
 80039a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039aa:	0150      	lsls	r0, r2, #5
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4641      	mov	r1, r8
 80039b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80039b6:	4649      	mov	r1, r9
 80039b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039d0:	ebb2 040a 	subs.w	r4, r2, sl
 80039d4:	eb63 050b 	sbc.w	r5, r3, fp
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	f04f 0300 	mov.w	r3, #0
 80039e0:	00eb      	lsls	r3, r5, #3
 80039e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039e6:	00e2      	lsls	r2, r4, #3
 80039e8:	4614      	mov	r4, r2
 80039ea:	461d      	mov	r5, r3
 80039ec:	4643      	mov	r3, r8
 80039ee:	18e3      	adds	r3, r4, r3
 80039f0:	603b      	str	r3, [r7, #0]
 80039f2:	464b      	mov	r3, r9
 80039f4:	eb45 0303 	adc.w	r3, r5, r3
 80039f8:	607b      	str	r3, [r7, #4]
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a06:	4629      	mov	r1, r5
 8003a08:	028b      	lsls	r3, r1, #10
 8003a0a:	4621      	mov	r1, r4
 8003a0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a10:	4621      	mov	r1, r4
 8003a12:	028a      	lsls	r2, r1, #10
 8003a14:	4610      	mov	r0, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	61fa      	str	r2, [r7, #28]
 8003a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a24:	f7fc fbee 	bl	8000204 <__aeabi_uldivmod>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a30:	4b0b      	ldr	r3, [pc, #44]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	0c1b      	lsrs	r3, r3, #16
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003a40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a4a:	e002      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a4c:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3750      	adds	r7, #80	@ 0x50
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a5e:	bf00      	nop
 8003a60:	40023800 	.word	0x40023800
 8003a64:	00f42400 	.word	0x00f42400

08003a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a6c:	4b03      	ldr	r3, [pc, #12]	@ (8003a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20000000 	.word	0x20000000

08003a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a84:	f7ff fff0 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	4b05      	ldr	r3, [pc, #20]	@ (8003aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	0a9b      	lsrs	r3, r3, #10
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	4903      	ldr	r1, [pc, #12]	@ (8003aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a96:	5ccb      	ldrb	r3, [r1, r3]
 8003a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	080052c8 	.word	0x080052c8

08003aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003aac:	f7ff ffdc 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	4b05      	ldr	r3, [pc, #20]	@ (8003ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	0b5b      	lsrs	r3, r3, #13
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	4903      	ldr	r1, [pc, #12]	@ (8003acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003abe:	5ccb      	ldrb	r3, [r1, r3]
 8003ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	080052c8 	.word	0x080052c8

08003ad0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e273      	b.n	8003fca <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d075      	beq.n	8003bda <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003aee:	4b88      	ldr	r3, [pc, #544]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d00c      	beq.n	8003b14 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003afa:	4b85      	ldr	r3, [pc, #532]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
        || \
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d112      	bne.n	8003b2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b06:	4b82      	ldr	r3, [pc, #520]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b12:	d10b      	bne.n	8003b2c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b14:	4b7e      	ldr	r3, [pc, #504]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d05b      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x108>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d157      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e24e      	b.n	8003fca <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b34:	d106      	bne.n	8003b44 <HAL_RCC_OscConfig+0x74>
 8003b36:	4b76      	ldr	r3, [pc, #472]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a75      	ldr	r2, [pc, #468]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	e01d      	b.n	8003b80 <HAL_RCC_OscConfig+0xb0>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x98>
 8003b4e:	4b70      	ldr	r3, [pc, #448]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a6f      	ldr	r2, [pc, #444]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4b6d      	ldr	r3, [pc, #436]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a6c      	ldr	r2, [pc, #432]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e00b      	b.n	8003b80 <HAL_RCC_OscConfig+0xb0>
 8003b68:	4b69      	ldr	r3, [pc, #420]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a68      	ldr	r2, [pc, #416]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	4b66      	ldr	r3, [pc, #408]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a65      	ldr	r2, [pc, #404]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d013      	beq.n	8003bb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fe f85e 	bl	8001c48 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b90:	f7fe f85a 	bl	8001c48 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b64      	cmp	r3, #100	@ 0x64
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e213      	b.n	8003fca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba2:	4b5b      	ldr	r3, [pc, #364]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCC_OscConfig+0xc0>
 8003bae:	e014      	b.n	8003bda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fe f84a 	bl	8001c48 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb8:	f7fe f846 	bl	8001c48 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	@ 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e1ff      	b.n	8003fca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bca:	4b51      	ldr	r3, [pc, #324]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0xe8>
 8003bd6:	e000      	b.n	8003bda <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d063      	beq.n	8003cae <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003be6:	4b4a      	ldr	r3, [pc, #296]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00b      	beq.n	8003c0a <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bf2:	4b47      	ldr	r3, [pc, #284]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
        || \
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d11c      	bne.n	8003c38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bfe:	4b44      	ldr	r3, [pc, #272]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d116      	bne.n	8003c38 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0a:	4b41      	ldr	r3, [pc, #260]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <HAL_RCC_OscConfig+0x152>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d001      	beq.n	8003c22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e1d3      	b.n	8003fca <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c22:	4b3b      	ldr	r3, [pc, #236]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	4937      	ldr	r1, [pc, #220]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c36:	e03a      	b.n	8003cae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d020      	beq.n	8003c82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c40:	4b34      	ldr	r3, [pc, #208]	@ (8003d14 <HAL_RCC_OscConfig+0x244>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fd ffff 	bl	8001c48 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c4e:	f7fd fffb 	bl	8001c48 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e1b4      	b.n	8003fca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c60:	4b2b      	ldr	r3, [pc, #172]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6c:	4b28      	ldr	r3, [pc, #160]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	4925      	ldr	r1, [pc, #148]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	600b      	str	r3, [r1, #0]
 8003c80:	e015      	b.n	8003cae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c82:	4b24      	ldr	r3, [pc, #144]	@ (8003d14 <HAL_RCC_OscConfig+0x244>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fd ffde 	bl	8001c48 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c90:	f7fd ffda 	bl	8001c48 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e193      	b.n	8003fca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f0      	bne.n	8003c90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d036      	beq.n	8003d28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d016      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc2:	4b15      	ldr	r3, [pc, #84]	@ (8003d18 <HAL_RCC_OscConfig+0x248>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc8:	f7fd ffbe 	bl	8001c48 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd0:	f7fd ffba 	bl	8001c48 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e173      	b.n	8003fca <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x200>
 8003cee:	e01b      	b.n	8003d28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf0:	4b09      	ldr	r3, [pc, #36]	@ (8003d18 <HAL_RCC_OscConfig+0x248>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf6:	f7fd ffa7 	bl	8001c48 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cfc:	e00e      	b.n	8003d1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfe:	f7fd ffa3 	bl	8001c48 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d907      	bls.n	8003d1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e15c      	b.n	8003fca <HAL_RCC_OscConfig+0x4fa>
 8003d10:	40023800 	.word	0x40023800
 8003d14:	42470000 	.word	0x42470000
 8003d18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d1c:	4b8a      	ldr	r3, [pc, #552]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1ea      	bne.n	8003cfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8097 	beq.w	8003e64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d36:	2300      	movs	r3, #0
 8003d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d3a:	4b83      	ldr	r3, [pc, #524]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10f      	bne.n	8003d66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	4a7e      	ldr	r2, [pc, #504]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d56:	4b7c      	ldr	r3, [pc, #496]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d62:	2301      	movs	r3, #1
 8003d64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d66:	4b79      	ldr	r3, [pc, #484]	@ (8003f4c <HAL_RCC_OscConfig+0x47c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d118      	bne.n	8003da4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d72:	4b76      	ldr	r3, [pc, #472]	@ (8003f4c <HAL_RCC_OscConfig+0x47c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a75      	ldr	r2, [pc, #468]	@ (8003f4c <HAL_RCC_OscConfig+0x47c>)
 8003d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d7e:	f7fd ff63 	bl	8001c48 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d86:	f7fd ff5f 	bl	8001c48 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e118      	b.n	8003fca <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d98:	4b6c      	ldr	r3, [pc, #432]	@ (8003f4c <HAL_RCC_OscConfig+0x47c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f0      	beq.n	8003d86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d106      	bne.n	8003dba <HAL_RCC_OscConfig+0x2ea>
 8003dac:	4b66      	ldr	r3, [pc, #408]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db0:	4a65      	ldr	r2, [pc, #404]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db8:	e01c      	b.n	8003df4 <HAL_RCC_OscConfig+0x324>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b05      	cmp	r3, #5
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x30c>
 8003dc2:	4b61      	ldr	r3, [pc, #388]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc6:	4a60      	ldr	r2, [pc, #384]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003dc8:	f043 0304 	orr.w	r3, r3, #4
 8003dcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dce:	4b5e      	ldr	r3, [pc, #376]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd2:	4a5d      	ldr	r2, [pc, #372]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dda:	e00b      	b.n	8003df4 <HAL_RCC_OscConfig+0x324>
 8003ddc:	4b5a      	ldr	r3, [pc, #360]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de0:	4a59      	ldr	r2, [pc, #356]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003de2:	f023 0301 	bic.w	r3, r3, #1
 8003de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de8:	4b57      	ldr	r3, [pc, #348]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dec:	4a56      	ldr	r2, [pc, #344]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003dee:	f023 0304 	bic.w	r3, r3, #4
 8003df2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d015      	beq.n	8003e28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfc:	f7fd ff24 	bl	8001c48 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e02:	e00a      	b.n	8003e1a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e04:	f7fd ff20 	bl	8001c48 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e0d7      	b.n	8003fca <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1a:	4b4b      	ldr	r3, [pc, #300]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0ee      	beq.n	8003e04 <HAL_RCC_OscConfig+0x334>
 8003e26:	e014      	b.n	8003e52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fd ff0e 	bl	8001c48 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e30:	f7fd ff0a 	bl	8001c48 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e0c1      	b.n	8003fca <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e46:	4b40      	ldr	r3, [pc, #256]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1ee      	bne.n	8003e30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e52:	7dfb      	ldrb	r3, [r7, #23]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d105      	bne.n	8003e64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e58:	4b3b      	ldr	r3, [pc, #236]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5c:	4a3a      	ldr	r2, [pc, #232]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003e5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 80ad 	beq.w	8003fc8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e6e:	4b36      	ldr	r3, [pc, #216]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d060      	beq.n	8003f3c <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d145      	bne.n	8003f0e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e82:	4b33      	ldr	r3, [pc, #204]	@ (8003f50 <HAL_RCC_OscConfig+0x480>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fd fede 	bl	8001c48 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fd feda 	bl	8001c48 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e093      	b.n	8003fca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea2:	4b29      	ldr	r3, [pc, #164]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69da      	ldr	r2, [r3, #28]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	019b      	lsls	r3, r3, #6
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec4:	085b      	lsrs	r3, r3, #1
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	041b      	lsls	r3, r3, #16
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed0:	061b      	lsls	r3, r3, #24
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed8:	071b      	lsls	r3, r3, #28
 8003eda:	491b      	ldr	r1, [pc, #108]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f50 <HAL_RCC_OscConfig+0x480>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee6:	f7fd feaf 	bl	8001c48 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eee:	f7fd feab 	bl	8001c48 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e064      	b.n	8003fca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f00:	4b11      	ldr	r3, [pc, #68]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0f0      	beq.n	8003eee <HAL_RCC_OscConfig+0x41e>
 8003f0c:	e05c      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f0e:	4b10      	ldr	r3, [pc, #64]	@ (8003f50 <HAL_RCC_OscConfig+0x480>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fd fe98 	bl	8001c48 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1c:	f7fd fe94 	bl	8001c48 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e04d      	b.n	8003fca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2e:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1f0      	bne.n	8003f1c <HAL_RCC_OscConfig+0x44c>
 8003f3a:	e045      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d107      	bne.n	8003f54 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e040      	b.n	8003fca <HAL_RCC_OscConfig+0x4fa>
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40007000 	.word	0x40007000
 8003f50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f54:	4b1f      	ldr	r3, [pc, #124]	@ (8003fd4 <HAL_RCC_OscConfig+0x504>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d030      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d129      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d122      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f84:	4013      	ands	r3, r2
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d119      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f9a:	085b      	lsrs	r3, r3, #1
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d10f      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d107      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40023800 	.word	0x40023800

08003fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e041      	b.n	800406e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fd fada 	bl	80015b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f000 faac 	bl	8004574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d001      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e04e      	b.n	800412e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0201 	orr.w	r2, r2, #1
 80040a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a23      	ldr	r2, [pc, #140]	@ (800413c <HAL_TIM_Base_Start_IT+0xc4>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d022      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0x80>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ba:	d01d      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0x80>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004140 <HAL_TIM_Base_Start_IT+0xc8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d018      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0x80>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004144 <HAL_TIM_Base_Start_IT+0xcc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d013      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0x80>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004148 <HAL_TIM_Base_Start_IT+0xd0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00e      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0x80>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a1b      	ldr	r2, [pc, #108]	@ (800414c <HAL_TIM_Base_Start_IT+0xd4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d009      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0x80>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a19      	ldr	r2, [pc, #100]	@ (8004150 <HAL_TIM_Base_Start_IT+0xd8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d004      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0x80>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a18      	ldr	r2, [pc, #96]	@ (8004154 <HAL_TIM_Base_Start_IT+0xdc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d111      	bne.n	800411c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b06      	cmp	r3, #6
 8004108:	d010      	beq.n	800412c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0201 	orr.w	r2, r2, #1
 8004118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411a:	e007      	b.n	800412c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f042 0201 	orr.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40010000 	.word	0x40010000
 8004140:	40000400 	.word	0x40000400
 8004144:	40000800 	.word	0x40000800
 8004148:	40000c00 	.word	0x40000c00
 800414c:	40010400 	.word	0x40010400
 8004150:	40014000 	.word	0x40014000
 8004154:	40001800 	.word	0x40001800

08004158 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0201 	bic.w	r2, r2, #1
 800416e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6a1a      	ldr	r2, [r3, #32]
 8004176:	f241 1311 	movw	r3, #4369	@ 0x1111
 800417a:	4013      	ands	r3, r2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10f      	bne.n	80041a0 <HAL_TIM_Base_Stop_IT+0x48>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	f240 4344 	movw	r3, #1092	@ 0x444
 800418a:	4013      	ands	r3, r2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d107      	bne.n	80041a0 <HAL_TIM_Base_Stop_IT+0x48>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0201 	bic.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d020      	beq.n	800421a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d01b      	beq.n	800421a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f06f 0202 	mvn.w	r2, #2
 80041ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f999 	bl	8004538 <HAL_TIM_IC_CaptureCallback>
 8004206:	e005      	b.n	8004214 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f98b 	bl	8004524 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f99c 	bl	800454c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d020      	beq.n	8004266 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d01b      	beq.n	8004266 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f06f 0204 	mvn.w	r2, #4
 8004236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f973 	bl	8004538 <HAL_TIM_IC_CaptureCallback>
 8004252:	e005      	b.n	8004260 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f965 	bl	8004524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f976 	bl	800454c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b00      	cmp	r3, #0
 800426e:	d020      	beq.n	80042b2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01b      	beq.n	80042b2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f06f 0208 	mvn.w	r2, #8
 8004282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2204      	movs	r2, #4
 8004288:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f94d 	bl	8004538 <HAL_TIM_IC_CaptureCallback>
 800429e:	e005      	b.n	80042ac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f93f 	bl	8004524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f950 	bl	800454c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d020      	beq.n	80042fe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d01b      	beq.n	80042fe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f06f 0210 	mvn.w	r2, #16
 80042ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2208      	movs	r2, #8
 80042d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f927 	bl	8004538 <HAL_TIM_IC_CaptureCallback>
 80042ea:	e005      	b.n	80042f8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f919 	bl	8004524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f92a 	bl	800454c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00c      	beq.n	8004322 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d007      	beq.n	8004322 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f06f 0201 	mvn.w	r2, #1
 800431a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7fc fae9 	bl	80008f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00c      	beq.n	8004346 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004332:	2b00      	cmp	r3, #0
 8004334:	d007      	beq.n	8004346 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800433e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fae3 	bl	800490c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00c      	beq.n	800436a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d007      	beq.n	800436a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f8fb 	bl	8004560 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00c      	beq.n	800438e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	2b00      	cmp	r3, #0
 800437c:	d007      	beq.n	800438e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f06f 0220 	mvn.w	r2, #32
 8004386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 fab5 	bl	80048f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800438e:	bf00      	nop
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <HAL_TIM_ConfigClockSource+0x1c>
 80043ae:	2302      	movs	r3, #2
 80043b0:	e0b4      	b.n	800451c <HAL_TIM_ConfigClockSource+0x186>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2202      	movs	r2, #2
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80043d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043d8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043ea:	d03e      	beq.n	800446a <HAL_TIM_ConfigClockSource+0xd4>
 80043ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043f0:	f200 8087 	bhi.w	8004502 <HAL_TIM_ConfigClockSource+0x16c>
 80043f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043f8:	f000 8086 	beq.w	8004508 <HAL_TIM_ConfigClockSource+0x172>
 80043fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004400:	d87f      	bhi.n	8004502 <HAL_TIM_ConfigClockSource+0x16c>
 8004402:	2b70      	cmp	r3, #112	@ 0x70
 8004404:	d01a      	beq.n	800443c <HAL_TIM_ConfigClockSource+0xa6>
 8004406:	2b70      	cmp	r3, #112	@ 0x70
 8004408:	d87b      	bhi.n	8004502 <HAL_TIM_ConfigClockSource+0x16c>
 800440a:	2b60      	cmp	r3, #96	@ 0x60
 800440c:	d050      	beq.n	80044b0 <HAL_TIM_ConfigClockSource+0x11a>
 800440e:	2b60      	cmp	r3, #96	@ 0x60
 8004410:	d877      	bhi.n	8004502 <HAL_TIM_ConfigClockSource+0x16c>
 8004412:	2b50      	cmp	r3, #80	@ 0x50
 8004414:	d03c      	beq.n	8004490 <HAL_TIM_ConfigClockSource+0xfa>
 8004416:	2b50      	cmp	r3, #80	@ 0x50
 8004418:	d873      	bhi.n	8004502 <HAL_TIM_ConfigClockSource+0x16c>
 800441a:	2b40      	cmp	r3, #64	@ 0x40
 800441c:	d058      	beq.n	80044d0 <HAL_TIM_ConfigClockSource+0x13a>
 800441e:	2b40      	cmp	r3, #64	@ 0x40
 8004420:	d86f      	bhi.n	8004502 <HAL_TIM_ConfigClockSource+0x16c>
 8004422:	2b30      	cmp	r3, #48	@ 0x30
 8004424:	d064      	beq.n	80044f0 <HAL_TIM_ConfigClockSource+0x15a>
 8004426:	2b30      	cmp	r3, #48	@ 0x30
 8004428:	d86b      	bhi.n	8004502 <HAL_TIM_ConfigClockSource+0x16c>
 800442a:	2b20      	cmp	r3, #32
 800442c:	d060      	beq.n	80044f0 <HAL_TIM_ConfigClockSource+0x15a>
 800442e:	2b20      	cmp	r3, #32
 8004430:	d867      	bhi.n	8004502 <HAL_TIM_ConfigClockSource+0x16c>
 8004432:	2b00      	cmp	r3, #0
 8004434:	d05c      	beq.n	80044f0 <HAL_TIM_ConfigClockSource+0x15a>
 8004436:	2b10      	cmp	r3, #16
 8004438:	d05a      	beq.n	80044f0 <HAL_TIM_ConfigClockSource+0x15a>
 800443a:	e062      	b.n	8004502 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800444c:	f000 f9b8 	bl	80047c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800445e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	609a      	str	r2, [r3, #8]
      break;
 8004468:	e04f      	b.n	800450a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800447a:	f000 f9a1 	bl	80047c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800448c:	609a      	str	r2, [r3, #8]
      break;
 800448e:	e03c      	b.n	800450a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800449c:	461a      	mov	r2, r3
 800449e:	f000 f915 	bl	80046cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2150      	movs	r1, #80	@ 0x50
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 f96e 	bl	800478a <TIM_ITRx_SetConfig>
      break;
 80044ae:	e02c      	b.n	800450a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044bc:	461a      	mov	r2, r3
 80044be:	f000 f934 	bl	800472a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2160      	movs	r1, #96	@ 0x60
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 f95e 	bl	800478a <TIM_ITRx_SetConfig>
      break;
 80044ce:	e01c      	b.n	800450a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044dc:	461a      	mov	r2, r3
 80044de:	f000 f8f5 	bl	80046cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2140      	movs	r1, #64	@ 0x40
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 f94e 	bl	800478a <TIM_ITRx_SetConfig>
      break;
 80044ee:	e00c      	b.n	800450a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4619      	mov	r1, r3
 80044fa:	4610      	mov	r0, r2
 80044fc:	f000 f945 	bl	800478a <TIM_ITRx_SetConfig>
      break;
 8004500:	e003      	b.n	800450a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	73fb      	strb	r3, [r7, #15]
      break;
 8004506:	e000      	b.n	800450a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004508:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800451a:	7bfb      	ldrb	r3, [r7, #15]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a46      	ldr	r2, [pc, #280]	@ (80046a0 <TIM_Base_SetConfig+0x12c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d013      	beq.n	80045b4 <TIM_Base_SetConfig+0x40>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004592:	d00f      	beq.n	80045b4 <TIM_Base_SetConfig+0x40>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a43      	ldr	r2, [pc, #268]	@ (80046a4 <TIM_Base_SetConfig+0x130>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00b      	beq.n	80045b4 <TIM_Base_SetConfig+0x40>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a42      	ldr	r2, [pc, #264]	@ (80046a8 <TIM_Base_SetConfig+0x134>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d007      	beq.n	80045b4 <TIM_Base_SetConfig+0x40>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a41      	ldr	r2, [pc, #260]	@ (80046ac <TIM_Base_SetConfig+0x138>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d003      	beq.n	80045b4 <TIM_Base_SetConfig+0x40>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a40      	ldr	r2, [pc, #256]	@ (80046b0 <TIM_Base_SetConfig+0x13c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d108      	bne.n	80045c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a35      	ldr	r2, [pc, #212]	@ (80046a0 <TIM_Base_SetConfig+0x12c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d02b      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045d4:	d027      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a32      	ldr	r2, [pc, #200]	@ (80046a4 <TIM_Base_SetConfig+0x130>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d023      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a31      	ldr	r2, [pc, #196]	@ (80046a8 <TIM_Base_SetConfig+0x134>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d01f      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a30      	ldr	r2, [pc, #192]	@ (80046ac <TIM_Base_SetConfig+0x138>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d01b      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a2f      	ldr	r2, [pc, #188]	@ (80046b0 <TIM_Base_SetConfig+0x13c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d017      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a2e      	ldr	r2, [pc, #184]	@ (80046b4 <TIM_Base_SetConfig+0x140>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d013      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a2d      	ldr	r2, [pc, #180]	@ (80046b8 <TIM_Base_SetConfig+0x144>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00f      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a2c      	ldr	r2, [pc, #176]	@ (80046bc <TIM_Base_SetConfig+0x148>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00b      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a2b      	ldr	r2, [pc, #172]	@ (80046c0 <TIM_Base_SetConfig+0x14c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d007      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a2a      	ldr	r2, [pc, #168]	@ (80046c4 <TIM_Base_SetConfig+0x150>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d003      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a29      	ldr	r2, [pc, #164]	@ (80046c8 <TIM_Base_SetConfig+0x154>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d108      	bne.n	8004638 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800462c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a10      	ldr	r2, [pc, #64]	@ (80046a0 <TIM_Base_SetConfig+0x12c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d003      	beq.n	800466c <TIM_Base_SetConfig+0xf8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a12      	ldr	r2, [pc, #72]	@ (80046b0 <TIM_Base_SetConfig+0x13c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d103      	bne.n	8004674 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b01      	cmp	r3, #1
 8004684:	d105      	bne.n	8004692 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f023 0201 	bic.w	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	611a      	str	r2, [r3, #16]
  }
}
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40010000 	.word	0x40010000
 80046a4:	40000400 	.word	0x40000400
 80046a8:	40000800 	.word	0x40000800
 80046ac:	40000c00 	.word	0x40000c00
 80046b0:	40010400 	.word	0x40010400
 80046b4:	40014000 	.word	0x40014000
 80046b8:	40014400 	.word	0x40014400
 80046bc:	40014800 	.word	0x40014800
 80046c0:	40001800 	.word	0x40001800
 80046c4:	40001c00 	.word	0x40001c00
 80046c8:	40002000 	.word	0x40002000

080046cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	f023 0201 	bic.w	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f023 030a 	bic.w	r3, r3, #10
 8004708:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	621a      	str	r2, [r3, #32]
}
 800471e:	bf00      	nop
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800472a:	b480      	push	{r7}
 800472c:	b087      	sub	sp, #28
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	f023 0210 	bic.w	r2, r3, #16
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004754:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	031b      	lsls	r3, r3, #12
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004766:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	621a      	str	r2, [r3, #32]
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800478a:	b480      	push	{r7}
 800478c:	b085      	sub	sp, #20
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f043 0307 	orr.w	r3, r3, #7
 80047ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	609a      	str	r2, [r3, #8]
}
 80047b4:	bf00      	nop
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	021a      	lsls	r2, r3, #8
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	609a      	str	r2, [r3, #8]
}
 80047f4:	bf00      	nop
 80047f6:	371c      	adds	r7, #28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004814:	2302      	movs	r3, #2
 8004816:	e05a      	b.n	80048ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800483e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a21      	ldr	r2, [pc, #132]	@ (80048dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d022      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004864:	d01d      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d018      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1b      	ldr	r2, [pc, #108]	@ (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a1a      	ldr	r2, [pc, #104]	@ (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00e      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a18      	ldr	r2, [pc, #96]	@ (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d009      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a17      	ldr	r2, [pc, #92]	@ (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d004      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a15      	ldr	r2, [pc, #84]	@ (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d10c      	bne.n	80048bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40010000 	.word	0x40010000
 80048e0:	40000400 	.word	0x40000400
 80048e4:	40000800 	.word	0x40000800
 80048e8:	40000c00 	.word	0x40000c00
 80048ec:	40010400 	.word	0x40010400
 80048f0:	40014000 	.word	0x40014000
 80048f4:	40001800 	.word	0x40001800

080048f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <std>:
 8004920:	2300      	movs	r3, #0
 8004922:	b510      	push	{r4, lr}
 8004924:	4604      	mov	r4, r0
 8004926:	e9c0 3300 	strd	r3, r3, [r0]
 800492a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800492e:	6083      	str	r3, [r0, #8]
 8004930:	8181      	strh	r1, [r0, #12]
 8004932:	6643      	str	r3, [r0, #100]	@ 0x64
 8004934:	81c2      	strh	r2, [r0, #14]
 8004936:	6183      	str	r3, [r0, #24]
 8004938:	4619      	mov	r1, r3
 800493a:	2208      	movs	r2, #8
 800493c:	305c      	adds	r0, #92	@ 0x5c
 800493e:	f000 f9e7 	bl	8004d10 <memset>
 8004942:	4b0d      	ldr	r3, [pc, #52]	@ (8004978 <std+0x58>)
 8004944:	6263      	str	r3, [r4, #36]	@ 0x24
 8004946:	4b0d      	ldr	r3, [pc, #52]	@ (800497c <std+0x5c>)
 8004948:	62a3      	str	r3, [r4, #40]	@ 0x28
 800494a:	4b0d      	ldr	r3, [pc, #52]	@ (8004980 <std+0x60>)
 800494c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800494e:	4b0d      	ldr	r3, [pc, #52]	@ (8004984 <std+0x64>)
 8004950:	6323      	str	r3, [r4, #48]	@ 0x30
 8004952:	4b0d      	ldr	r3, [pc, #52]	@ (8004988 <std+0x68>)
 8004954:	6224      	str	r4, [r4, #32]
 8004956:	429c      	cmp	r4, r3
 8004958:	d006      	beq.n	8004968 <std+0x48>
 800495a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800495e:	4294      	cmp	r4, r2
 8004960:	d002      	beq.n	8004968 <std+0x48>
 8004962:	33d0      	adds	r3, #208	@ 0xd0
 8004964:	429c      	cmp	r4, r3
 8004966:	d105      	bne.n	8004974 <std+0x54>
 8004968:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800496c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004970:	f000 ba46 	b.w	8004e00 <__retarget_lock_init_recursive>
 8004974:	bd10      	pop	{r4, pc}
 8004976:	bf00      	nop
 8004978:	08004b61 	.word	0x08004b61
 800497c:	08004b83 	.word	0x08004b83
 8004980:	08004bbb 	.word	0x08004bbb
 8004984:	08004bdf 	.word	0x08004bdf
 8004988:	200002d0 	.word	0x200002d0

0800498c <stdio_exit_handler>:
 800498c:	4a02      	ldr	r2, [pc, #8]	@ (8004998 <stdio_exit_handler+0xc>)
 800498e:	4903      	ldr	r1, [pc, #12]	@ (800499c <stdio_exit_handler+0x10>)
 8004990:	4803      	ldr	r0, [pc, #12]	@ (80049a0 <stdio_exit_handler+0x14>)
 8004992:	f000 b869 	b.w	8004a68 <_fwalk_sglue>
 8004996:	bf00      	nop
 8004998:	2000000c 	.word	0x2000000c
 800499c:	08005101 	.word	0x08005101
 80049a0:	2000001c 	.word	0x2000001c

080049a4 <cleanup_stdio>:
 80049a4:	6841      	ldr	r1, [r0, #4]
 80049a6:	4b0c      	ldr	r3, [pc, #48]	@ (80049d8 <cleanup_stdio+0x34>)
 80049a8:	4299      	cmp	r1, r3
 80049aa:	b510      	push	{r4, lr}
 80049ac:	4604      	mov	r4, r0
 80049ae:	d001      	beq.n	80049b4 <cleanup_stdio+0x10>
 80049b0:	f000 fba6 	bl	8005100 <_fflush_r>
 80049b4:	68a1      	ldr	r1, [r4, #8]
 80049b6:	4b09      	ldr	r3, [pc, #36]	@ (80049dc <cleanup_stdio+0x38>)
 80049b8:	4299      	cmp	r1, r3
 80049ba:	d002      	beq.n	80049c2 <cleanup_stdio+0x1e>
 80049bc:	4620      	mov	r0, r4
 80049be:	f000 fb9f 	bl	8005100 <_fflush_r>
 80049c2:	68e1      	ldr	r1, [r4, #12]
 80049c4:	4b06      	ldr	r3, [pc, #24]	@ (80049e0 <cleanup_stdio+0x3c>)
 80049c6:	4299      	cmp	r1, r3
 80049c8:	d004      	beq.n	80049d4 <cleanup_stdio+0x30>
 80049ca:	4620      	mov	r0, r4
 80049cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d0:	f000 bb96 	b.w	8005100 <_fflush_r>
 80049d4:	bd10      	pop	{r4, pc}
 80049d6:	bf00      	nop
 80049d8:	200002d0 	.word	0x200002d0
 80049dc:	20000338 	.word	0x20000338
 80049e0:	200003a0 	.word	0x200003a0

080049e4 <global_stdio_init.part.0>:
 80049e4:	b510      	push	{r4, lr}
 80049e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a14 <global_stdio_init.part.0+0x30>)
 80049e8:	4c0b      	ldr	r4, [pc, #44]	@ (8004a18 <global_stdio_init.part.0+0x34>)
 80049ea:	4a0c      	ldr	r2, [pc, #48]	@ (8004a1c <global_stdio_init.part.0+0x38>)
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	4620      	mov	r0, r4
 80049f0:	2200      	movs	r2, #0
 80049f2:	2104      	movs	r1, #4
 80049f4:	f7ff ff94 	bl	8004920 <std>
 80049f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80049fc:	2201      	movs	r2, #1
 80049fe:	2109      	movs	r1, #9
 8004a00:	f7ff ff8e 	bl	8004920 <std>
 8004a04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004a08:	2202      	movs	r2, #2
 8004a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a0e:	2112      	movs	r1, #18
 8004a10:	f7ff bf86 	b.w	8004920 <std>
 8004a14:	20000408 	.word	0x20000408
 8004a18:	200002d0 	.word	0x200002d0
 8004a1c:	0800498d 	.word	0x0800498d

08004a20 <__sfp_lock_acquire>:
 8004a20:	4801      	ldr	r0, [pc, #4]	@ (8004a28 <__sfp_lock_acquire+0x8>)
 8004a22:	f000 b9ee 	b.w	8004e02 <__retarget_lock_acquire_recursive>
 8004a26:	bf00      	nop
 8004a28:	20000411 	.word	0x20000411

08004a2c <__sfp_lock_release>:
 8004a2c:	4801      	ldr	r0, [pc, #4]	@ (8004a34 <__sfp_lock_release+0x8>)
 8004a2e:	f000 b9e9 	b.w	8004e04 <__retarget_lock_release_recursive>
 8004a32:	bf00      	nop
 8004a34:	20000411 	.word	0x20000411

08004a38 <__sinit>:
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	f7ff fff0 	bl	8004a20 <__sfp_lock_acquire>
 8004a40:	6a23      	ldr	r3, [r4, #32]
 8004a42:	b11b      	cbz	r3, 8004a4c <__sinit+0x14>
 8004a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a48:	f7ff bff0 	b.w	8004a2c <__sfp_lock_release>
 8004a4c:	4b04      	ldr	r3, [pc, #16]	@ (8004a60 <__sinit+0x28>)
 8004a4e:	6223      	str	r3, [r4, #32]
 8004a50:	4b04      	ldr	r3, [pc, #16]	@ (8004a64 <__sinit+0x2c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1f5      	bne.n	8004a44 <__sinit+0xc>
 8004a58:	f7ff ffc4 	bl	80049e4 <global_stdio_init.part.0>
 8004a5c:	e7f2      	b.n	8004a44 <__sinit+0xc>
 8004a5e:	bf00      	nop
 8004a60:	080049a5 	.word	0x080049a5
 8004a64:	20000408 	.word	0x20000408

08004a68 <_fwalk_sglue>:
 8004a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a6c:	4607      	mov	r7, r0
 8004a6e:	4688      	mov	r8, r1
 8004a70:	4614      	mov	r4, r2
 8004a72:	2600      	movs	r6, #0
 8004a74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a78:	f1b9 0901 	subs.w	r9, r9, #1
 8004a7c:	d505      	bpl.n	8004a8a <_fwalk_sglue+0x22>
 8004a7e:	6824      	ldr	r4, [r4, #0]
 8004a80:	2c00      	cmp	r4, #0
 8004a82:	d1f7      	bne.n	8004a74 <_fwalk_sglue+0xc>
 8004a84:	4630      	mov	r0, r6
 8004a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a8a:	89ab      	ldrh	r3, [r5, #12]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d907      	bls.n	8004aa0 <_fwalk_sglue+0x38>
 8004a90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a94:	3301      	adds	r3, #1
 8004a96:	d003      	beq.n	8004aa0 <_fwalk_sglue+0x38>
 8004a98:	4629      	mov	r1, r5
 8004a9a:	4638      	mov	r0, r7
 8004a9c:	47c0      	blx	r8
 8004a9e:	4306      	orrs	r6, r0
 8004aa0:	3568      	adds	r5, #104	@ 0x68
 8004aa2:	e7e9      	b.n	8004a78 <_fwalk_sglue+0x10>

08004aa4 <_puts_r>:
 8004aa4:	6a03      	ldr	r3, [r0, #32]
 8004aa6:	b570      	push	{r4, r5, r6, lr}
 8004aa8:	6884      	ldr	r4, [r0, #8]
 8004aaa:	4605      	mov	r5, r0
 8004aac:	460e      	mov	r6, r1
 8004aae:	b90b      	cbnz	r3, 8004ab4 <_puts_r+0x10>
 8004ab0:	f7ff ffc2 	bl	8004a38 <__sinit>
 8004ab4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ab6:	07db      	lsls	r3, r3, #31
 8004ab8:	d405      	bmi.n	8004ac6 <_puts_r+0x22>
 8004aba:	89a3      	ldrh	r3, [r4, #12]
 8004abc:	0598      	lsls	r0, r3, #22
 8004abe:	d402      	bmi.n	8004ac6 <_puts_r+0x22>
 8004ac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ac2:	f000 f99e 	bl	8004e02 <__retarget_lock_acquire_recursive>
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	0719      	lsls	r1, r3, #28
 8004aca:	d502      	bpl.n	8004ad2 <_puts_r+0x2e>
 8004acc:	6923      	ldr	r3, [r4, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d135      	bne.n	8004b3e <_puts_r+0x9a>
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	f000 f8c5 	bl	8004c64 <__swsetup_r>
 8004ada:	b380      	cbz	r0, 8004b3e <_puts_r+0x9a>
 8004adc:	f04f 35ff 	mov.w	r5, #4294967295
 8004ae0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ae2:	07da      	lsls	r2, r3, #31
 8004ae4:	d405      	bmi.n	8004af2 <_puts_r+0x4e>
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	059b      	lsls	r3, r3, #22
 8004aea:	d402      	bmi.n	8004af2 <_puts_r+0x4e>
 8004aec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004aee:	f000 f989 	bl	8004e04 <__retarget_lock_release_recursive>
 8004af2:	4628      	mov	r0, r5
 8004af4:	bd70      	pop	{r4, r5, r6, pc}
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	da04      	bge.n	8004b04 <_puts_r+0x60>
 8004afa:	69a2      	ldr	r2, [r4, #24]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	dc17      	bgt.n	8004b30 <_puts_r+0x8c>
 8004b00:	290a      	cmp	r1, #10
 8004b02:	d015      	beq.n	8004b30 <_puts_r+0x8c>
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	6022      	str	r2, [r4, #0]
 8004b0a:	7019      	strb	r1, [r3, #0]
 8004b0c:	68a3      	ldr	r3, [r4, #8]
 8004b0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b12:	3b01      	subs	r3, #1
 8004b14:	60a3      	str	r3, [r4, #8]
 8004b16:	2900      	cmp	r1, #0
 8004b18:	d1ed      	bne.n	8004af6 <_puts_r+0x52>
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	da11      	bge.n	8004b42 <_puts_r+0x9e>
 8004b1e:	4622      	mov	r2, r4
 8004b20:	210a      	movs	r1, #10
 8004b22:	4628      	mov	r0, r5
 8004b24:	f000 f85f 	bl	8004be6 <__swbuf_r>
 8004b28:	3001      	adds	r0, #1
 8004b2a:	d0d7      	beq.n	8004adc <_puts_r+0x38>
 8004b2c:	250a      	movs	r5, #10
 8004b2e:	e7d7      	b.n	8004ae0 <_puts_r+0x3c>
 8004b30:	4622      	mov	r2, r4
 8004b32:	4628      	mov	r0, r5
 8004b34:	f000 f857 	bl	8004be6 <__swbuf_r>
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d1e7      	bne.n	8004b0c <_puts_r+0x68>
 8004b3c:	e7ce      	b.n	8004adc <_puts_r+0x38>
 8004b3e:	3e01      	subs	r6, #1
 8004b40:	e7e4      	b.n	8004b0c <_puts_r+0x68>
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	6022      	str	r2, [r4, #0]
 8004b48:	220a      	movs	r2, #10
 8004b4a:	701a      	strb	r2, [r3, #0]
 8004b4c:	e7ee      	b.n	8004b2c <_puts_r+0x88>
	...

08004b50 <puts>:
 8004b50:	4b02      	ldr	r3, [pc, #8]	@ (8004b5c <puts+0xc>)
 8004b52:	4601      	mov	r1, r0
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	f7ff bfa5 	b.w	8004aa4 <_puts_r>
 8004b5a:	bf00      	nop
 8004b5c:	20000018 	.word	0x20000018

08004b60 <__sread>:
 8004b60:	b510      	push	{r4, lr}
 8004b62:	460c      	mov	r4, r1
 8004b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b68:	f000 f8fc 	bl	8004d64 <_read_r>
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	bfab      	itete	ge
 8004b70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004b72:	89a3      	ldrhlt	r3, [r4, #12]
 8004b74:	181b      	addge	r3, r3, r0
 8004b76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b7a:	bfac      	ite	ge
 8004b7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b7e:	81a3      	strhlt	r3, [r4, #12]
 8004b80:	bd10      	pop	{r4, pc}

08004b82 <__swrite>:
 8004b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b86:	461f      	mov	r7, r3
 8004b88:	898b      	ldrh	r3, [r1, #12]
 8004b8a:	05db      	lsls	r3, r3, #23
 8004b8c:	4605      	mov	r5, r0
 8004b8e:	460c      	mov	r4, r1
 8004b90:	4616      	mov	r6, r2
 8004b92:	d505      	bpl.n	8004ba0 <__swrite+0x1e>
 8004b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b98:	2302      	movs	r3, #2
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f000 f8d0 	bl	8004d40 <_lseek_r>
 8004ba0:	89a3      	ldrh	r3, [r4, #12]
 8004ba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ba6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004baa:	81a3      	strh	r3, [r4, #12]
 8004bac:	4632      	mov	r2, r6
 8004bae:	463b      	mov	r3, r7
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb6:	f000 b8e7 	b.w	8004d88 <_write_r>

08004bba <__sseek>:
 8004bba:	b510      	push	{r4, lr}
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bc2:	f000 f8bd 	bl	8004d40 <_lseek_r>
 8004bc6:	1c43      	adds	r3, r0, #1
 8004bc8:	89a3      	ldrh	r3, [r4, #12]
 8004bca:	bf15      	itete	ne
 8004bcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004bce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004bd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004bd6:	81a3      	strheq	r3, [r4, #12]
 8004bd8:	bf18      	it	ne
 8004bda:	81a3      	strhne	r3, [r4, #12]
 8004bdc:	bd10      	pop	{r4, pc}

08004bde <__sclose>:
 8004bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be2:	f000 b89d 	b.w	8004d20 <_close_r>

08004be6 <__swbuf_r>:
 8004be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be8:	460e      	mov	r6, r1
 8004bea:	4614      	mov	r4, r2
 8004bec:	4605      	mov	r5, r0
 8004bee:	b118      	cbz	r0, 8004bf8 <__swbuf_r+0x12>
 8004bf0:	6a03      	ldr	r3, [r0, #32]
 8004bf2:	b90b      	cbnz	r3, 8004bf8 <__swbuf_r+0x12>
 8004bf4:	f7ff ff20 	bl	8004a38 <__sinit>
 8004bf8:	69a3      	ldr	r3, [r4, #24]
 8004bfa:	60a3      	str	r3, [r4, #8]
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	071a      	lsls	r2, r3, #28
 8004c00:	d501      	bpl.n	8004c06 <__swbuf_r+0x20>
 8004c02:	6923      	ldr	r3, [r4, #16]
 8004c04:	b943      	cbnz	r3, 8004c18 <__swbuf_r+0x32>
 8004c06:	4621      	mov	r1, r4
 8004c08:	4628      	mov	r0, r5
 8004c0a:	f000 f82b 	bl	8004c64 <__swsetup_r>
 8004c0e:	b118      	cbz	r0, 8004c18 <__swbuf_r+0x32>
 8004c10:	f04f 37ff 	mov.w	r7, #4294967295
 8004c14:	4638      	mov	r0, r7
 8004c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	6922      	ldr	r2, [r4, #16]
 8004c1c:	1a98      	subs	r0, r3, r2
 8004c1e:	6963      	ldr	r3, [r4, #20]
 8004c20:	b2f6      	uxtb	r6, r6
 8004c22:	4283      	cmp	r3, r0
 8004c24:	4637      	mov	r7, r6
 8004c26:	dc05      	bgt.n	8004c34 <__swbuf_r+0x4e>
 8004c28:	4621      	mov	r1, r4
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	f000 fa68 	bl	8005100 <_fflush_r>
 8004c30:	2800      	cmp	r0, #0
 8004c32:	d1ed      	bne.n	8004c10 <__swbuf_r+0x2a>
 8004c34:	68a3      	ldr	r3, [r4, #8]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	60a3      	str	r3, [r4, #8]
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	6022      	str	r2, [r4, #0]
 8004c40:	701e      	strb	r6, [r3, #0]
 8004c42:	6962      	ldr	r2, [r4, #20]
 8004c44:	1c43      	adds	r3, r0, #1
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d004      	beq.n	8004c54 <__swbuf_r+0x6e>
 8004c4a:	89a3      	ldrh	r3, [r4, #12]
 8004c4c:	07db      	lsls	r3, r3, #31
 8004c4e:	d5e1      	bpl.n	8004c14 <__swbuf_r+0x2e>
 8004c50:	2e0a      	cmp	r6, #10
 8004c52:	d1df      	bne.n	8004c14 <__swbuf_r+0x2e>
 8004c54:	4621      	mov	r1, r4
 8004c56:	4628      	mov	r0, r5
 8004c58:	f000 fa52 	bl	8005100 <_fflush_r>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d0d9      	beq.n	8004c14 <__swbuf_r+0x2e>
 8004c60:	e7d6      	b.n	8004c10 <__swbuf_r+0x2a>
	...

08004c64 <__swsetup_r>:
 8004c64:	b538      	push	{r3, r4, r5, lr}
 8004c66:	4b29      	ldr	r3, [pc, #164]	@ (8004d0c <__swsetup_r+0xa8>)
 8004c68:	4605      	mov	r5, r0
 8004c6a:	6818      	ldr	r0, [r3, #0]
 8004c6c:	460c      	mov	r4, r1
 8004c6e:	b118      	cbz	r0, 8004c78 <__swsetup_r+0x14>
 8004c70:	6a03      	ldr	r3, [r0, #32]
 8004c72:	b90b      	cbnz	r3, 8004c78 <__swsetup_r+0x14>
 8004c74:	f7ff fee0 	bl	8004a38 <__sinit>
 8004c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c7c:	0719      	lsls	r1, r3, #28
 8004c7e:	d422      	bmi.n	8004cc6 <__swsetup_r+0x62>
 8004c80:	06da      	lsls	r2, r3, #27
 8004c82:	d407      	bmi.n	8004c94 <__swsetup_r+0x30>
 8004c84:	2209      	movs	r2, #9
 8004c86:	602a      	str	r2, [r5, #0]
 8004c88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c8c:	81a3      	strh	r3, [r4, #12]
 8004c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c92:	e033      	b.n	8004cfc <__swsetup_r+0x98>
 8004c94:	0758      	lsls	r0, r3, #29
 8004c96:	d512      	bpl.n	8004cbe <__swsetup_r+0x5a>
 8004c98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c9a:	b141      	cbz	r1, 8004cae <__swsetup_r+0x4a>
 8004c9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ca0:	4299      	cmp	r1, r3
 8004ca2:	d002      	beq.n	8004caa <__swsetup_r+0x46>
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f000 f8af 	bl	8004e08 <_free_r>
 8004caa:	2300      	movs	r3, #0
 8004cac:	6363      	str	r3, [r4, #52]	@ 0x34
 8004cae:	89a3      	ldrh	r3, [r4, #12]
 8004cb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004cb4:	81a3      	strh	r3, [r4, #12]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	6063      	str	r3, [r4, #4]
 8004cba:	6923      	ldr	r3, [r4, #16]
 8004cbc:	6023      	str	r3, [r4, #0]
 8004cbe:	89a3      	ldrh	r3, [r4, #12]
 8004cc0:	f043 0308 	orr.w	r3, r3, #8
 8004cc4:	81a3      	strh	r3, [r4, #12]
 8004cc6:	6923      	ldr	r3, [r4, #16]
 8004cc8:	b94b      	cbnz	r3, 8004cde <__swsetup_r+0x7a>
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004cd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cd4:	d003      	beq.n	8004cde <__swsetup_r+0x7a>
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	4628      	mov	r0, r5
 8004cda:	f000 fa5f 	bl	800519c <__smakebuf_r>
 8004cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ce2:	f013 0201 	ands.w	r2, r3, #1
 8004ce6:	d00a      	beq.n	8004cfe <__swsetup_r+0x9a>
 8004ce8:	2200      	movs	r2, #0
 8004cea:	60a2      	str	r2, [r4, #8]
 8004cec:	6962      	ldr	r2, [r4, #20]
 8004cee:	4252      	negs	r2, r2
 8004cf0:	61a2      	str	r2, [r4, #24]
 8004cf2:	6922      	ldr	r2, [r4, #16]
 8004cf4:	b942      	cbnz	r2, 8004d08 <__swsetup_r+0xa4>
 8004cf6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004cfa:	d1c5      	bne.n	8004c88 <__swsetup_r+0x24>
 8004cfc:	bd38      	pop	{r3, r4, r5, pc}
 8004cfe:	0799      	lsls	r1, r3, #30
 8004d00:	bf58      	it	pl
 8004d02:	6962      	ldrpl	r2, [r4, #20]
 8004d04:	60a2      	str	r2, [r4, #8]
 8004d06:	e7f4      	b.n	8004cf2 <__swsetup_r+0x8e>
 8004d08:	2000      	movs	r0, #0
 8004d0a:	e7f7      	b.n	8004cfc <__swsetup_r+0x98>
 8004d0c:	20000018 	.word	0x20000018

08004d10 <memset>:
 8004d10:	4402      	add	r2, r0
 8004d12:	4603      	mov	r3, r0
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d100      	bne.n	8004d1a <memset+0xa>
 8004d18:	4770      	bx	lr
 8004d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d1e:	e7f9      	b.n	8004d14 <memset+0x4>

08004d20 <_close_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	4d06      	ldr	r5, [pc, #24]	@ (8004d3c <_close_r+0x1c>)
 8004d24:	2300      	movs	r3, #0
 8004d26:	4604      	mov	r4, r0
 8004d28:	4608      	mov	r0, r1
 8004d2a:	602b      	str	r3, [r5, #0]
 8004d2c:	f7fc fd97 	bl	800185e <_close>
 8004d30:	1c43      	adds	r3, r0, #1
 8004d32:	d102      	bne.n	8004d3a <_close_r+0x1a>
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	b103      	cbz	r3, 8004d3a <_close_r+0x1a>
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}
 8004d3c:	2000040c 	.word	0x2000040c

08004d40 <_lseek_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4d07      	ldr	r5, [pc, #28]	@ (8004d60 <_lseek_r+0x20>)
 8004d44:	4604      	mov	r4, r0
 8004d46:	4608      	mov	r0, r1
 8004d48:	4611      	mov	r1, r2
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	602a      	str	r2, [r5, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f7fc fdac 	bl	80018ac <_lseek>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d102      	bne.n	8004d5e <_lseek_r+0x1e>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	b103      	cbz	r3, 8004d5e <_lseek_r+0x1e>
 8004d5c:	6023      	str	r3, [r4, #0]
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	2000040c 	.word	0x2000040c

08004d64 <_read_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	4d07      	ldr	r5, [pc, #28]	@ (8004d84 <_read_r+0x20>)
 8004d68:	4604      	mov	r4, r0
 8004d6a:	4608      	mov	r0, r1
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	2200      	movs	r2, #0
 8004d70:	602a      	str	r2, [r5, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f7fc fd3a 	bl	80017ec <_read>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d102      	bne.n	8004d82 <_read_r+0x1e>
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	b103      	cbz	r3, 8004d82 <_read_r+0x1e>
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
 8004d84:	2000040c 	.word	0x2000040c

08004d88 <_write_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4d07      	ldr	r5, [pc, #28]	@ (8004da8 <_write_r+0x20>)
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	4608      	mov	r0, r1
 8004d90:	4611      	mov	r1, r2
 8004d92:	2200      	movs	r2, #0
 8004d94:	602a      	str	r2, [r5, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f7fc fd45 	bl	8001826 <_write>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	d102      	bne.n	8004da6 <_write_r+0x1e>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	b103      	cbz	r3, 8004da6 <_write_r+0x1e>
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	bd38      	pop	{r3, r4, r5, pc}
 8004da8:	2000040c 	.word	0x2000040c

08004dac <__errno>:
 8004dac:	4b01      	ldr	r3, [pc, #4]	@ (8004db4 <__errno+0x8>)
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	20000018 	.word	0x20000018

08004db8 <__libc_init_array>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	4d0d      	ldr	r5, [pc, #52]	@ (8004df0 <__libc_init_array+0x38>)
 8004dbc:	4c0d      	ldr	r4, [pc, #52]	@ (8004df4 <__libc_init_array+0x3c>)
 8004dbe:	1b64      	subs	r4, r4, r5
 8004dc0:	10a4      	asrs	r4, r4, #2
 8004dc2:	2600      	movs	r6, #0
 8004dc4:	42a6      	cmp	r6, r4
 8004dc6:	d109      	bne.n	8004ddc <__libc_init_array+0x24>
 8004dc8:	4d0b      	ldr	r5, [pc, #44]	@ (8004df8 <__libc_init_array+0x40>)
 8004dca:	4c0c      	ldr	r4, [pc, #48]	@ (8004dfc <__libc_init_array+0x44>)
 8004dcc:	f000 fa54 	bl	8005278 <_init>
 8004dd0:	1b64      	subs	r4, r4, r5
 8004dd2:	10a4      	asrs	r4, r4, #2
 8004dd4:	2600      	movs	r6, #0
 8004dd6:	42a6      	cmp	r6, r4
 8004dd8:	d105      	bne.n	8004de6 <__libc_init_array+0x2e>
 8004dda:	bd70      	pop	{r4, r5, r6, pc}
 8004ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de0:	4798      	blx	r3
 8004de2:	3601      	adds	r6, #1
 8004de4:	e7ee      	b.n	8004dc4 <__libc_init_array+0xc>
 8004de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dea:	4798      	blx	r3
 8004dec:	3601      	adds	r6, #1
 8004dee:	e7f2      	b.n	8004dd6 <__libc_init_array+0x1e>
 8004df0:	080052d8 	.word	0x080052d8
 8004df4:	080052d8 	.word	0x080052d8
 8004df8:	080052d8 	.word	0x080052d8
 8004dfc:	080052dc 	.word	0x080052dc

08004e00 <__retarget_lock_init_recursive>:
 8004e00:	4770      	bx	lr

08004e02 <__retarget_lock_acquire_recursive>:
 8004e02:	4770      	bx	lr

08004e04 <__retarget_lock_release_recursive>:
 8004e04:	4770      	bx	lr
	...

08004e08 <_free_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	4605      	mov	r5, r0
 8004e0c:	2900      	cmp	r1, #0
 8004e0e:	d041      	beq.n	8004e94 <_free_r+0x8c>
 8004e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e14:	1f0c      	subs	r4, r1, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	bfb8      	it	lt
 8004e1a:	18e4      	addlt	r4, r4, r3
 8004e1c:	f000 f8e0 	bl	8004fe0 <__malloc_lock>
 8004e20:	4a1d      	ldr	r2, [pc, #116]	@ (8004e98 <_free_r+0x90>)
 8004e22:	6813      	ldr	r3, [r2, #0]
 8004e24:	b933      	cbnz	r3, 8004e34 <_free_r+0x2c>
 8004e26:	6063      	str	r3, [r4, #4]
 8004e28:	6014      	str	r4, [r2, #0]
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e30:	f000 b8dc 	b.w	8004fec <__malloc_unlock>
 8004e34:	42a3      	cmp	r3, r4
 8004e36:	d908      	bls.n	8004e4a <_free_r+0x42>
 8004e38:	6820      	ldr	r0, [r4, #0]
 8004e3a:	1821      	adds	r1, r4, r0
 8004e3c:	428b      	cmp	r3, r1
 8004e3e:	bf01      	itttt	eq
 8004e40:	6819      	ldreq	r1, [r3, #0]
 8004e42:	685b      	ldreq	r3, [r3, #4]
 8004e44:	1809      	addeq	r1, r1, r0
 8004e46:	6021      	streq	r1, [r4, #0]
 8004e48:	e7ed      	b.n	8004e26 <_free_r+0x1e>
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	b10b      	cbz	r3, 8004e54 <_free_r+0x4c>
 8004e50:	42a3      	cmp	r3, r4
 8004e52:	d9fa      	bls.n	8004e4a <_free_r+0x42>
 8004e54:	6811      	ldr	r1, [r2, #0]
 8004e56:	1850      	adds	r0, r2, r1
 8004e58:	42a0      	cmp	r0, r4
 8004e5a:	d10b      	bne.n	8004e74 <_free_r+0x6c>
 8004e5c:	6820      	ldr	r0, [r4, #0]
 8004e5e:	4401      	add	r1, r0
 8004e60:	1850      	adds	r0, r2, r1
 8004e62:	4283      	cmp	r3, r0
 8004e64:	6011      	str	r1, [r2, #0]
 8004e66:	d1e0      	bne.n	8004e2a <_free_r+0x22>
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	6053      	str	r3, [r2, #4]
 8004e6e:	4408      	add	r0, r1
 8004e70:	6010      	str	r0, [r2, #0]
 8004e72:	e7da      	b.n	8004e2a <_free_r+0x22>
 8004e74:	d902      	bls.n	8004e7c <_free_r+0x74>
 8004e76:	230c      	movs	r3, #12
 8004e78:	602b      	str	r3, [r5, #0]
 8004e7a:	e7d6      	b.n	8004e2a <_free_r+0x22>
 8004e7c:	6820      	ldr	r0, [r4, #0]
 8004e7e:	1821      	adds	r1, r4, r0
 8004e80:	428b      	cmp	r3, r1
 8004e82:	bf04      	itt	eq
 8004e84:	6819      	ldreq	r1, [r3, #0]
 8004e86:	685b      	ldreq	r3, [r3, #4]
 8004e88:	6063      	str	r3, [r4, #4]
 8004e8a:	bf04      	itt	eq
 8004e8c:	1809      	addeq	r1, r1, r0
 8004e8e:	6021      	streq	r1, [r4, #0]
 8004e90:	6054      	str	r4, [r2, #4]
 8004e92:	e7ca      	b.n	8004e2a <_free_r+0x22>
 8004e94:	bd38      	pop	{r3, r4, r5, pc}
 8004e96:	bf00      	nop
 8004e98:	20000418 	.word	0x20000418

08004e9c <sbrk_aligned>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	4e0f      	ldr	r6, [pc, #60]	@ (8004edc <sbrk_aligned+0x40>)
 8004ea0:	460c      	mov	r4, r1
 8004ea2:	6831      	ldr	r1, [r6, #0]
 8004ea4:	4605      	mov	r5, r0
 8004ea6:	b911      	cbnz	r1, 8004eae <sbrk_aligned+0x12>
 8004ea8:	f000 f9d6 	bl	8005258 <_sbrk_r>
 8004eac:	6030      	str	r0, [r6, #0]
 8004eae:	4621      	mov	r1, r4
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	f000 f9d1 	bl	8005258 <_sbrk_r>
 8004eb6:	1c43      	adds	r3, r0, #1
 8004eb8:	d103      	bne.n	8004ec2 <sbrk_aligned+0x26>
 8004eba:	f04f 34ff 	mov.w	r4, #4294967295
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	bd70      	pop	{r4, r5, r6, pc}
 8004ec2:	1cc4      	adds	r4, r0, #3
 8004ec4:	f024 0403 	bic.w	r4, r4, #3
 8004ec8:	42a0      	cmp	r0, r4
 8004eca:	d0f8      	beq.n	8004ebe <sbrk_aligned+0x22>
 8004ecc:	1a21      	subs	r1, r4, r0
 8004ece:	4628      	mov	r0, r5
 8004ed0:	f000 f9c2 	bl	8005258 <_sbrk_r>
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d1f2      	bne.n	8004ebe <sbrk_aligned+0x22>
 8004ed8:	e7ef      	b.n	8004eba <sbrk_aligned+0x1e>
 8004eda:	bf00      	nop
 8004edc:	20000414 	.word	0x20000414

08004ee0 <_malloc_r>:
 8004ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ee4:	1ccd      	adds	r5, r1, #3
 8004ee6:	f025 0503 	bic.w	r5, r5, #3
 8004eea:	3508      	adds	r5, #8
 8004eec:	2d0c      	cmp	r5, #12
 8004eee:	bf38      	it	cc
 8004ef0:	250c      	movcc	r5, #12
 8004ef2:	2d00      	cmp	r5, #0
 8004ef4:	4606      	mov	r6, r0
 8004ef6:	db01      	blt.n	8004efc <_malloc_r+0x1c>
 8004ef8:	42a9      	cmp	r1, r5
 8004efa:	d904      	bls.n	8004f06 <_malloc_r+0x26>
 8004efc:	230c      	movs	r3, #12
 8004efe:	6033      	str	r3, [r6, #0]
 8004f00:	2000      	movs	r0, #0
 8004f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004fdc <_malloc_r+0xfc>
 8004f0a:	f000 f869 	bl	8004fe0 <__malloc_lock>
 8004f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f12:	461c      	mov	r4, r3
 8004f14:	bb44      	cbnz	r4, 8004f68 <_malloc_r+0x88>
 8004f16:	4629      	mov	r1, r5
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f7ff ffbf 	bl	8004e9c <sbrk_aligned>
 8004f1e:	1c43      	adds	r3, r0, #1
 8004f20:	4604      	mov	r4, r0
 8004f22:	d158      	bne.n	8004fd6 <_malloc_r+0xf6>
 8004f24:	f8d8 4000 	ldr.w	r4, [r8]
 8004f28:	4627      	mov	r7, r4
 8004f2a:	2f00      	cmp	r7, #0
 8004f2c:	d143      	bne.n	8004fb6 <_malloc_r+0xd6>
 8004f2e:	2c00      	cmp	r4, #0
 8004f30:	d04b      	beq.n	8004fca <_malloc_r+0xea>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	4639      	mov	r1, r7
 8004f36:	4630      	mov	r0, r6
 8004f38:	eb04 0903 	add.w	r9, r4, r3
 8004f3c:	f000 f98c 	bl	8005258 <_sbrk_r>
 8004f40:	4581      	cmp	r9, r0
 8004f42:	d142      	bne.n	8004fca <_malloc_r+0xea>
 8004f44:	6821      	ldr	r1, [r4, #0]
 8004f46:	1a6d      	subs	r5, r5, r1
 8004f48:	4629      	mov	r1, r5
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	f7ff ffa6 	bl	8004e9c <sbrk_aligned>
 8004f50:	3001      	adds	r0, #1
 8004f52:	d03a      	beq.n	8004fca <_malloc_r+0xea>
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	442b      	add	r3, r5
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	f8d8 3000 	ldr.w	r3, [r8]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	bb62      	cbnz	r2, 8004fbc <_malloc_r+0xdc>
 8004f62:	f8c8 7000 	str.w	r7, [r8]
 8004f66:	e00f      	b.n	8004f88 <_malloc_r+0xa8>
 8004f68:	6822      	ldr	r2, [r4, #0]
 8004f6a:	1b52      	subs	r2, r2, r5
 8004f6c:	d420      	bmi.n	8004fb0 <_malloc_r+0xd0>
 8004f6e:	2a0b      	cmp	r2, #11
 8004f70:	d917      	bls.n	8004fa2 <_malloc_r+0xc2>
 8004f72:	1961      	adds	r1, r4, r5
 8004f74:	42a3      	cmp	r3, r4
 8004f76:	6025      	str	r5, [r4, #0]
 8004f78:	bf18      	it	ne
 8004f7a:	6059      	strne	r1, [r3, #4]
 8004f7c:	6863      	ldr	r3, [r4, #4]
 8004f7e:	bf08      	it	eq
 8004f80:	f8c8 1000 	streq.w	r1, [r8]
 8004f84:	5162      	str	r2, [r4, r5]
 8004f86:	604b      	str	r3, [r1, #4]
 8004f88:	4630      	mov	r0, r6
 8004f8a:	f000 f82f 	bl	8004fec <__malloc_unlock>
 8004f8e:	f104 000b 	add.w	r0, r4, #11
 8004f92:	1d23      	adds	r3, r4, #4
 8004f94:	f020 0007 	bic.w	r0, r0, #7
 8004f98:	1ac2      	subs	r2, r0, r3
 8004f9a:	bf1c      	itt	ne
 8004f9c:	1a1b      	subne	r3, r3, r0
 8004f9e:	50a3      	strne	r3, [r4, r2]
 8004fa0:	e7af      	b.n	8004f02 <_malloc_r+0x22>
 8004fa2:	6862      	ldr	r2, [r4, #4]
 8004fa4:	42a3      	cmp	r3, r4
 8004fa6:	bf0c      	ite	eq
 8004fa8:	f8c8 2000 	streq.w	r2, [r8]
 8004fac:	605a      	strne	r2, [r3, #4]
 8004fae:	e7eb      	b.n	8004f88 <_malloc_r+0xa8>
 8004fb0:	4623      	mov	r3, r4
 8004fb2:	6864      	ldr	r4, [r4, #4]
 8004fb4:	e7ae      	b.n	8004f14 <_malloc_r+0x34>
 8004fb6:	463c      	mov	r4, r7
 8004fb8:	687f      	ldr	r7, [r7, #4]
 8004fba:	e7b6      	b.n	8004f2a <_malloc_r+0x4a>
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	42a3      	cmp	r3, r4
 8004fc2:	d1fb      	bne.n	8004fbc <_malloc_r+0xdc>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	6053      	str	r3, [r2, #4]
 8004fc8:	e7de      	b.n	8004f88 <_malloc_r+0xa8>
 8004fca:	230c      	movs	r3, #12
 8004fcc:	6033      	str	r3, [r6, #0]
 8004fce:	4630      	mov	r0, r6
 8004fd0:	f000 f80c 	bl	8004fec <__malloc_unlock>
 8004fd4:	e794      	b.n	8004f00 <_malloc_r+0x20>
 8004fd6:	6005      	str	r5, [r0, #0]
 8004fd8:	e7d6      	b.n	8004f88 <_malloc_r+0xa8>
 8004fda:	bf00      	nop
 8004fdc:	20000418 	.word	0x20000418

08004fe0 <__malloc_lock>:
 8004fe0:	4801      	ldr	r0, [pc, #4]	@ (8004fe8 <__malloc_lock+0x8>)
 8004fe2:	f7ff bf0e 	b.w	8004e02 <__retarget_lock_acquire_recursive>
 8004fe6:	bf00      	nop
 8004fe8:	20000410 	.word	0x20000410

08004fec <__malloc_unlock>:
 8004fec:	4801      	ldr	r0, [pc, #4]	@ (8004ff4 <__malloc_unlock+0x8>)
 8004fee:	f7ff bf09 	b.w	8004e04 <__retarget_lock_release_recursive>
 8004ff2:	bf00      	nop
 8004ff4:	20000410 	.word	0x20000410

08004ff8 <__sflush_r>:
 8004ff8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005000:	0716      	lsls	r6, r2, #28
 8005002:	4605      	mov	r5, r0
 8005004:	460c      	mov	r4, r1
 8005006:	d454      	bmi.n	80050b2 <__sflush_r+0xba>
 8005008:	684b      	ldr	r3, [r1, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	dc02      	bgt.n	8005014 <__sflush_r+0x1c>
 800500e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	dd48      	ble.n	80050a6 <__sflush_r+0xae>
 8005014:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005016:	2e00      	cmp	r6, #0
 8005018:	d045      	beq.n	80050a6 <__sflush_r+0xae>
 800501a:	2300      	movs	r3, #0
 800501c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005020:	682f      	ldr	r7, [r5, #0]
 8005022:	6a21      	ldr	r1, [r4, #32]
 8005024:	602b      	str	r3, [r5, #0]
 8005026:	d030      	beq.n	800508a <__sflush_r+0x92>
 8005028:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800502a:	89a3      	ldrh	r3, [r4, #12]
 800502c:	0759      	lsls	r1, r3, #29
 800502e:	d505      	bpl.n	800503c <__sflush_r+0x44>
 8005030:	6863      	ldr	r3, [r4, #4]
 8005032:	1ad2      	subs	r2, r2, r3
 8005034:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005036:	b10b      	cbz	r3, 800503c <__sflush_r+0x44>
 8005038:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800503a:	1ad2      	subs	r2, r2, r3
 800503c:	2300      	movs	r3, #0
 800503e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005040:	6a21      	ldr	r1, [r4, #32]
 8005042:	4628      	mov	r0, r5
 8005044:	47b0      	blx	r6
 8005046:	1c43      	adds	r3, r0, #1
 8005048:	89a3      	ldrh	r3, [r4, #12]
 800504a:	d106      	bne.n	800505a <__sflush_r+0x62>
 800504c:	6829      	ldr	r1, [r5, #0]
 800504e:	291d      	cmp	r1, #29
 8005050:	d82b      	bhi.n	80050aa <__sflush_r+0xb2>
 8005052:	4a2a      	ldr	r2, [pc, #168]	@ (80050fc <__sflush_r+0x104>)
 8005054:	40ca      	lsrs	r2, r1
 8005056:	07d6      	lsls	r6, r2, #31
 8005058:	d527      	bpl.n	80050aa <__sflush_r+0xb2>
 800505a:	2200      	movs	r2, #0
 800505c:	6062      	str	r2, [r4, #4]
 800505e:	04d9      	lsls	r1, r3, #19
 8005060:	6922      	ldr	r2, [r4, #16]
 8005062:	6022      	str	r2, [r4, #0]
 8005064:	d504      	bpl.n	8005070 <__sflush_r+0x78>
 8005066:	1c42      	adds	r2, r0, #1
 8005068:	d101      	bne.n	800506e <__sflush_r+0x76>
 800506a:	682b      	ldr	r3, [r5, #0]
 800506c:	b903      	cbnz	r3, 8005070 <__sflush_r+0x78>
 800506e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005072:	602f      	str	r7, [r5, #0]
 8005074:	b1b9      	cbz	r1, 80050a6 <__sflush_r+0xae>
 8005076:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800507a:	4299      	cmp	r1, r3
 800507c:	d002      	beq.n	8005084 <__sflush_r+0x8c>
 800507e:	4628      	mov	r0, r5
 8005080:	f7ff fec2 	bl	8004e08 <_free_r>
 8005084:	2300      	movs	r3, #0
 8005086:	6363      	str	r3, [r4, #52]	@ 0x34
 8005088:	e00d      	b.n	80050a6 <__sflush_r+0xae>
 800508a:	2301      	movs	r3, #1
 800508c:	4628      	mov	r0, r5
 800508e:	47b0      	blx	r6
 8005090:	4602      	mov	r2, r0
 8005092:	1c50      	adds	r0, r2, #1
 8005094:	d1c9      	bne.n	800502a <__sflush_r+0x32>
 8005096:	682b      	ldr	r3, [r5, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0c6      	beq.n	800502a <__sflush_r+0x32>
 800509c:	2b1d      	cmp	r3, #29
 800509e:	d001      	beq.n	80050a4 <__sflush_r+0xac>
 80050a0:	2b16      	cmp	r3, #22
 80050a2:	d11e      	bne.n	80050e2 <__sflush_r+0xea>
 80050a4:	602f      	str	r7, [r5, #0]
 80050a6:	2000      	movs	r0, #0
 80050a8:	e022      	b.n	80050f0 <__sflush_r+0xf8>
 80050aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050ae:	b21b      	sxth	r3, r3
 80050b0:	e01b      	b.n	80050ea <__sflush_r+0xf2>
 80050b2:	690f      	ldr	r7, [r1, #16]
 80050b4:	2f00      	cmp	r7, #0
 80050b6:	d0f6      	beq.n	80050a6 <__sflush_r+0xae>
 80050b8:	0793      	lsls	r3, r2, #30
 80050ba:	680e      	ldr	r6, [r1, #0]
 80050bc:	bf08      	it	eq
 80050be:	694b      	ldreq	r3, [r1, #20]
 80050c0:	600f      	str	r7, [r1, #0]
 80050c2:	bf18      	it	ne
 80050c4:	2300      	movne	r3, #0
 80050c6:	eba6 0807 	sub.w	r8, r6, r7
 80050ca:	608b      	str	r3, [r1, #8]
 80050cc:	f1b8 0f00 	cmp.w	r8, #0
 80050d0:	dde9      	ble.n	80050a6 <__sflush_r+0xae>
 80050d2:	6a21      	ldr	r1, [r4, #32]
 80050d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80050d6:	4643      	mov	r3, r8
 80050d8:	463a      	mov	r2, r7
 80050da:	4628      	mov	r0, r5
 80050dc:	47b0      	blx	r6
 80050de:	2800      	cmp	r0, #0
 80050e0:	dc08      	bgt.n	80050f4 <__sflush_r+0xfc>
 80050e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050ea:	81a3      	strh	r3, [r4, #12]
 80050ec:	f04f 30ff 	mov.w	r0, #4294967295
 80050f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050f4:	4407      	add	r7, r0
 80050f6:	eba8 0800 	sub.w	r8, r8, r0
 80050fa:	e7e7      	b.n	80050cc <__sflush_r+0xd4>
 80050fc:	20400001 	.word	0x20400001

08005100 <_fflush_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	690b      	ldr	r3, [r1, #16]
 8005104:	4605      	mov	r5, r0
 8005106:	460c      	mov	r4, r1
 8005108:	b913      	cbnz	r3, 8005110 <_fflush_r+0x10>
 800510a:	2500      	movs	r5, #0
 800510c:	4628      	mov	r0, r5
 800510e:	bd38      	pop	{r3, r4, r5, pc}
 8005110:	b118      	cbz	r0, 800511a <_fflush_r+0x1a>
 8005112:	6a03      	ldr	r3, [r0, #32]
 8005114:	b90b      	cbnz	r3, 800511a <_fflush_r+0x1a>
 8005116:	f7ff fc8f 	bl	8004a38 <__sinit>
 800511a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0f3      	beq.n	800510a <_fflush_r+0xa>
 8005122:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005124:	07d0      	lsls	r0, r2, #31
 8005126:	d404      	bmi.n	8005132 <_fflush_r+0x32>
 8005128:	0599      	lsls	r1, r3, #22
 800512a:	d402      	bmi.n	8005132 <_fflush_r+0x32>
 800512c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800512e:	f7ff fe68 	bl	8004e02 <__retarget_lock_acquire_recursive>
 8005132:	4628      	mov	r0, r5
 8005134:	4621      	mov	r1, r4
 8005136:	f7ff ff5f 	bl	8004ff8 <__sflush_r>
 800513a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800513c:	07da      	lsls	r2, r3, #31
 800513e:	4605      	mov	r5, r0
 8005140:	d4e4      	bmi.n	800510c <_fflush_r+0xc>
 8005142:	89a3      	ldrh	r3, [r4, #12]
 8005144:	059b      	lsls	r3, r3, #22
 8005146:	d4e1      	bmi.n	800510c <_fflush_r+0xc>
 8005148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800514a:	f7ff fe5b 	bl	8004e04 <__retarget_lock_release_recursive>
 800514e:	e7dd      	b.n	800510c <_fflush_r+0xc>

08005150 <__swhatbuf_r>:
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	460c      	mov	r4, r1
 8005154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005158:	2900      	cmp	r1, #0
 800515a:	b096      	sub	sp, #88	@ 0x58
 800515c:	4615      	mov	r5, r2
 800515e:	461e      	mov	r6, r3
 8005160:	da0d      	bge.n	800517e <__swhatbuf_r+0x2e>
 8005162:	89a3      	ldrh	r3, [r4, #12]
 8005164:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005168:	f04f 0100 	mov.w	r1, #0
 800516c:	bf14      	ite	ne
 800516e:	2340      	movne	r3, #64	@ 0x40
 8005170:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005174:	2000      	movs	r0, #0
 8005176:	6031      	str	r1, [r6, #0]
 8005178:	602b      	str	r3, [r5, #0]
 800517a:	b016      	add	sp, #88	@ 0x58
 800517c:	bd70      	pop	{r4, r5, r6, pc}
 800517e:	466a      	mov	r2, sp
 8005180:	f000 f848 	bl	8005214 <_fstat_r>
 8005184:	2800      	cmp	r0, #0
 8005186:	dbec      	blt.n	8005162 <__swhatbuf_r+0x12>
 8005188:	9901      	ldr	r1, [sp, #4]
 800518a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800518e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005192:	4259      	negs	r1, r3
 8005194:	4159      	adcs	r1, r3
 8005196:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800519a:	e7eb      	b.n	8005174 <__swhatbuf_r+0x24>

0800519c <__smakebuf_r>:
 800519c:	898b      	ldrh	r3, [r1, #12]
 800519e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051a0:	079d      	lsls	r5, r3, #30
 80051a2:	4606      	mov	r6, r0
 80051a4:	460c      	mov	r4, r1
 80051a6:	d507      	bpl.n	80051b8 <__smakebuf_r+0x1c>
 80051a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	6123      	str	r3, [r4, #16]
 80051b0:	2301      	movs	r3, #1
 80051b2:	6163      	str	r3, [r4, #20]
 80051b4:	b003      	add	sp, #12
 80051b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051b8:	ab01      	add	r3, sp, #4
 80051ba:	466a      	mov	r2, sp
 80051bc:	f7ff ffc8 	bl	8005150 <__swhatbuf_r>
 80051c0:	9f00      	ldr	r7, [sp, #0]
 80051c2:	4605      	mov	r5, r0
 80051c4:	4639      	mov	r1, r7
 80051c6:	4630      	mov	r0, r6
 80051c8:	f7ff fe8a 	bl	8004ee0 <_malloc_r>
 80051cc:	b948      	cbnz	r0, 80051e2 <__smakebuf_r+0x46>
 80051ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051d2:	059a      	lsls	r2, r3, #22
 80051d4:	d4ee      	bmi.n	80051b4 <__smakebuf_r+0x18>
 80051d6:	f023 0303 	bic.w	r3, r3, #3
 80051da:	f043 0302 	orr.w	r3, r3, #2
 80051de:	81a3      	strh	r3, [r4, #12]
 80051e0:	e7e2      	b.n	80051a8 <__smakebuf_r+0xc>
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	6020      	str	r0, [r4, #0]
 80051e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051ea:	81a3      	strh	r3, [r4, #12]
 80051ec:	9b01      	ldr	r3, [sp, #4]
 80051ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80051f2:	b15b      	cbz	r3, 800520c <__smakebuf_r+0x70>
 80051f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051f8:	4630      	mov	r0, r6
 80051fa:	f000 f81d 	bl	8005238 <_isatty_r>
 80051fe:	b128      	cbz	r0, 800520c <__smakebuf_r+0x70>
 8005200:	89a3      	ldrh	r3, [r4, #12]
 8005202:	f023 0303 	bic.w	r3, r3, #3
 8005206:	f043 0301 	orr.w	r3, r3, #1
 800520a:	81a3      	strh	r3, [r4, #12]
 800520c:	89a3      	ldrh	r3, [r4, #12]
 800520e:	431d      	orrs	r5, r3
 8005210:	81a5      	strh	r5, [r4, #12]
 8005212:	e7cf      	b.n	80051b4 <__smakebuf_r+0x18>

08005214 <_fstat_r>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4d07      	ldr	r5, [pc, #28]	@ (8005234 <_fstat_r+0x20>)
 8005218:	2300      	movs	r3, #0
 800521a:	4604      	mov	r4, r0
 800521c:	4608      	mov	r0, r1
 800521e:	4611      	mov	r1, r2
 8005220:	602b      	str	r3, [r5, #0]
 8005222:	f7fc fb28 	bl	8001876 <_fstat>
 8005226:	1c43      	adds	r3, r0, #1
 8005228:	d102      	bne.n	8005230 <_fstat_r+0x1c>
 800522a:	682b      	ldr	r3, [r5, #0]
 800522c:	b103      	cbz	r3, 8005230 <_fstat_r+0x1c>
 800522e:	6023      	str	r3, [r4, #0]
 8005230:	bd38      	pop	{r3, r4, r5, pc}
 8005232:	bf00      	nop
 8005234:	2000040c 	.word	0x2000040c

08005238 <_isatty_r>:
 8005238:	b538      	push	{r3, r4, r5, lr}
 800523a:	4d06      	ldr	r5, [pc, #24]	@ (8005254 <_isatty_r+0x1c>)
 800523c:	2300      	movs	r3, #0
 800523e:	4604      	mov	r4, r0
 8005240:	4608      	mov	r0, r1
 8005242:	602b      	str	r3, [r5, #0]
 8005244:	f7fc fb27 	bl	8001896 <_isatty>
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	d102      	bne.n	8005252 <_isatty_r+0x1a>
 800524c:	682b      	ldr	r3, [r5, #0]
 800524e:	b103      	cbz	r3, 8005252 <_isatty_r+0x1a>
 8005250:	6023      	str	r3, [r4, #0]
 8005252:	bd38      	pop	{r3, r4, r5, pc}
 8005254:	2000040c 	.word	0x2000040c

08005258 <_sbrk_r>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	4d06      	ldr	r5, [pc, #24]	@ (8005274 <_sbrk_r+0x1c>)
 800525c:	2300      	movs	r3, #0
 800525e:	4604      	mov	r4, r0
 8005260:	4608      	mov	r0, r1
 8005262:	602b      	str	r3, [r5, #0]
 8005264:	f7fc fb30 	bl	80018c8 <_sbrk>
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d102      	bne.n	8005272 <_sbrk_r+0x1a>
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	b103      	cbz	r3, 8005272 <_sbrk_r+0x1a>
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	bd38      	pop	{r3, r4, r5, pc}
 8005274:	2000040c 	.word	0x2000040c

08005278 <_init>:
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527a:	bf00      	nop
 800527c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527e:	bc08      	pop	{r3}
 8005280:	469e      	mov	lr, r3
 8005282:	4770      	bx	lr

08005284 <_fini>:
 8005284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005286:	bf00      	nop
 8005288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528a:	bc08      	pop	{r3}
 800528c:	469e      	mov	lr, r3
 800528e:	4770      	bx	lr
