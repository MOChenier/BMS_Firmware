
BMS_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006034  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006204  08006204  00007204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006298  08006298  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006298  08006298  00007298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062a0  080062a0  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062a0  080062a0  000072a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062a4  080062a4  000072a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080062a8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  20000068  08006310  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08006310  00008498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153c2  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003331  00000000  00000000  0001d45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  00020790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001089  00000000  00000000  00021cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000240e2  00000000  00000000  00022d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a09b  00000000  00000000  00046e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6a3a  00000000  00000000  00060ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137918  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061b8  00000000  00000000  0013795c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013db14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080061ec 	.word	0x080061ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080061ec 	.word	0x080061ec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <CAN1_send_mess>:
uint8_t               RxData[8];

uint8_t RxDatacheck = 0; //Flag that indicates that a message has been received

int CAN1_send_mess(CAN_HandleTypeDef *hcan, uint8_t *TxData)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]

	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80005e6:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <CAN1_send_mess+0x2c>)
 80005e8:	683a      	ldr	r2, [r7, #0]
 80005ea:	4908      	ldr	r1, [pc, #32]	@ (800060c <CAN1_send_mess+0x30>)
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f002 f910 	bl	8002812 <HAL_CAN_AddTxMessage>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <CAN1_send_mess+0x20>
	{
	   CAN_Error_Handler ();
 80005f8:	f000 f83c 	bl	8000674 <CAN_Error_Handler>
	}


	return 0;
 80005fc:	2300      	movs	r3, #0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	2000009c 	.word	0x2000009c
 800060c:	20000084 	.word	0x20000084

08000610 <CAN_set_std_header>:


}

void CAN_set_std_header(uint16_t std_tx_id, uint8_t dlc)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	460a      	mov	r2, r1
 800061a:	80fb      	strh	r3, [r7, #6]
 800061c:	4613      	mov	r3, r2
 800061e:	717b      	strb	r3, [r7, #5]

	TxHeader.IDE = CAN_ID_STD;
 8000620:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <CAN_set_std_header+0x30>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = std_tx_id;
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	4a05      	ldr	r2, [pc, #20]	@ (8000640 <CAN_set_std_header+0x30>)
 800062a:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = dlc;
 800062c:	797b      	ldrb	r3, [r7, #5]
 800062e:	4a04      	ldr	r2, [pc, #16]	@ (8000640 <CAN_set_std_header+0x30>)
 8000630:	6113      	str	r3, [r2, #16]

}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000084 	.word	0x20000084

08000644 <CAN_set_ext_header>:

void CAN_set_ext_header(uint32_t ext_tx_id, uint8_t dlc)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	70fb      	strb	r3, [r7, #3]

	TxHeader.IDE = CAN_ID_STD;
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <CAN_set_ext_header+0x2c>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
	TxHeader.ExtId = ext_tx_id;
 8000656:	4a06      	ldr	r2, [pc, #24]	@ (8000670 <CAN_set_ext_header+0x2c>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6053      	str	r3, [r2, #4]
	TxHeader.DLC = dlc;
 800065c:	78fb      	ldrb	r3, [r7, #3]
 800065e:	4a04      	ldr	r2, [pc, #16]	@ (8000670 <CAN_set_ext_header+0x2c>)
 8000660:	6113      	str	r3, [r2, #16]

}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000084 	.word	0x20000084

08000674 <CAN_Error_Handler>:



void CAN_Error_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
}
 800067a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <CAN_Error_Handler+0x8>

08000680 <CAN_Filter_Config>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void CAN_Filter_Config(CAN_HandleTypeDef *hcan)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08c      	sub	sp, #48	@ 0x30
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

    CAN_FilterTypeDef filterConfig;
    filterConfig.FilterBank = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
    filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800068c:	2300      	movs	r3, #0
 800068e:	623b      	str	r3, [r7, #32]
    filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000690:	2301      	movs	r3, #1
 8000692:	627b      	str	r3, [r7, #36]	@ 0x24
    filterConfig.FilterIdHigh = 0x0000;
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
    filterConfig.FilterIdLow = 0x0000;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
    filterConfig.FilterMaskIdHigh = 0x0000;
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]
    filterConfig.FilterMaskIdLow = 0x0000;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
    filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
    filterConfig.FilterActivation = ENABLE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    filterConfig.SlaveStartFilterBank = 14;
 80006ac:	230e      	movs	r3, #14
 80006ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	4619      	mov	r1, r3
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f001 ff3e 	bl	8002538 <HAL_CAN_ConfigFilter>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <CAN_Filter_Config+0x46>
    {
        CAN_Error_Handler();
 80006c2:	f7ff ffd7 	bl	8000674 <CAN_Error_Handler>
    }
}
 80006c6:	bf00      	nop
 80006c8:	3730      	adds	r7, #48	@ 0x30
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <CAN_Activate_Interrupts>:

void CAN_Activate_Interrupts(CAN_HandleTypeDef *hcan)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80006d8:	2102      	movs	r1, #2
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f002 fa8b 	bl	8002bf6 <HAL_CAN_ActivateNotification>

    CAN_Filter_Config(hcan);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff ffcd 	bl	8000680 <CAN_Filter_Config>

    if (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV) ||
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f003 0302 	and.w	r3, r3, #2
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d006      	beq.n	8000702 <CAN_Activate_Interrupts+0x32>
        __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f003 0304 	and.w	r3, r3, #4
    if (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV) ||
 80006fe:	2b04      	cmp	r3, #4
 8000700:	d108      	bne.n	8000714 <CAN_Activate_Interrupts+0x44>
    {
        printf("CAN in error state, attempting reset\n");
 8000702:	480a      	ldr	r0, [pc, #40]	@ (800072c <CAN_Activate_Interrupts+0x5c>)
 8000704:	f004 fedc 	bl	80054c0 <puts>
        HAL_CAN_Stop(hcan);
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f002 f839 	bl	8002780 <HAL_CAN_Stop>
        HAL_CAN_Init(hcan);
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f001 fe16 	bl	8002340 <HAL_CAN_Init>
    }

    if (HAL_CAN_Start(hcan) != HAL_OK)
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f001 ffef 	bl	80026f8 <HAL_CAN_Start>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <CAN_Activate_Interrupts+0x54>
    {
        CAN_Error_Handler();
 8000720:	f7ff ffa8 	bl	8000674 <CAN_Error_Handler>
    }
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	08006204 	.word	0x08006204

08000730 <charging_balancing_mode>:
extern volatile uint8_t  all_connection_states;

uint8_t charging_balancing_states = 0; //b0: all cells at target value, b1: balancing done, b2: balancing charge not present,


void charging_balancing_mode(){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0

	uint8_t skip = 1; //Initialize quit to 1 so it runs skips charging on first iteration
 8000736:	2301      	movs	r3, #1
 8000738:	71fb      	strb	r3, [r7, #7]

	ask_for_voltages();
 800073a:	f001 f9fb 	bl	8001b34 <ask_for_voltages>

	HAL_Delay(100);
 800073e:	2064      	movs	r0, #100	@ 0x64
 8000740:	f001 fb78 	bl	8001e34 <HAL_Delay>

	if(all_cells_under_threshold()){
 8000744:	f000 f910 	bl	8000968 <all_cells_under_threshold>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <charging_balancing_mode+0x22>
		skip = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	71fb      	strb	r3, [r7, #7]
	}

	// 3 different exit possibilities : Charger disconnected, No balancing charge, Balancing done
	while(1){

		if(skip){
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d016      	beq.n	8000786 <charging_balancing_mode+0x56>
			start_charging_mode();
 8000758:	f000 f848 	bl	80007ec <start_charging_mode>

			// While charger is connected
			while((all_connection_states & CHARGER_CONN_MASK) != 0){
 800075c:	e007      	b.n	800076e <charging_balancing_mode+0x3e>

				//	adjust_charging();
				if(!all_cells_under_threshold())
 800075e:	f000 f903 	bl	8000968 <all_cells_under_threshold>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d00a      	beq.n	800077e <charging_balancing_mode+0x4e>
					break;

				HAL_Delay(CHARGING_LOOP_DELAY);
 8000768:	200a      	movs	r0, #10
 800076a:	f001 fb63 	bl	8001e34 <HAL_Delay>
			while((all_connection_states & CHARGER_CONN_MASK) != 0){
 800076e:	4b1d      	ldr	r3, [pc, #116]	@ (80007e4 <charging_balancing_mode+0xb4>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	f003 0302 	and.w	r3, r3, #2
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1f0      	bne.n	800075e <charging_balancing_mode+0x2e>
 800077c:	e000      	b.n	8000780 <charging_balancing_mode+0x50>
					break;
 800077e:	bf00      	nop
			}

			stop_charging_mode();
 8000780:	f000 f840 	bl	8000804 <stop_charging_mode>
 8000784:	e001      	b.n	800078a <charging_balancing_mode+0x5a>
		} else{

			skip = 0; // Once we skipped one time we run it normally
 8000786:	2300      	movs	r3, #0
 8000788:	71fb      	strb	r3, [r7, #7]
		}

		// If charger is disconnected, skip balancing to maintain battery level
		if((all_connection_states & CHARGER_CONN_MASK) == 0)
 800078a:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <charging_balancing_mode+0xb4>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	f003 0302 	and.w	r3, r3, #2
 8000794:	2b00      	cmp	r3, #0
 8000796:	d01b      	beq.n	80007d0 <charging_balancing_mode+0xa0>
			break;


		start_balancing_mode();
 8000798:	f000 f83e 	bl	8000818 <start_balancing_mode>

		while(1){

			// If all cells at target value or balancing done or balancing charge not present
			if(charging_balancing_states != 0)
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <charging_balancing_mode+0xb8>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d103      	bne.n	80007ac <charging_balancing_mode+0x7c>
				break;

			HAL_Delay(BALANCING_LOOP_DELAY);
 80007a4:	200a      	movs	r0, #10
 80007a6:	f001 fb45 	bl	8001e34 <HAL_Delay>
			if(charging_balancing_states != 0)
 80007aa:	e7f7      	b.n	800079c <charging_balancing_mode+0x6c>
				break;
 80007ac:	bf00      	nop

		}

		stop_balancing_mode();
 80007ae:	f000 f83f 	bl	8000830 <stop_balancing_mode>


		check_total_battery_state();
 80007b2:	f000 f8e1 	bl	8000978 <check_total_battery_state>

		// If balancing done, quit charging/balancing mode
		if((charging_balancing_states & BALANCING_DONE_MASK) != 0)
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <charging_balancing_mode+0xb8>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d108      	bne.n	80007d4 <charging_balancing_mode+0xa4>
			break;

		// If balancing charge not present, quit charging/balancing mode
		if((charging_balancing_states & BALANCING_CHARGE_PRESENT_MASK) != 0)
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <charging_balancing_mode+0xb8>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d104      	bne.n	80007d8 <charging_balancing_mode+0xa8>
	while(1){
 80007ce:	e7c0      	b.n	8000752 <charging_balancing_mode+0x22>
			break;
 80007d0:	bf00      	nop
 80007d2:	e002      	b.n	80007da <charging_balancing_mode+0xaa>
			break;
 80007d4:	bf00      	nop
 80007d6:	e000      	b.n	80007da <charging_balancing_mode+0xaa>
			break;
 80007d8:	bf00      	nop

	}

}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000342 	.word	0x20000342
 80007e8:	200000c4 	.word	0x200000c4

080007ec <start_charging_mode>:


void start_charging_mode()
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	auto_ask_for_temperatures(CHARGING_TEMP_INFO_DELAY); // 10 ms delay between each measure
 80007f0:	200a      	movs	r0, #10
 80007f2:	f001 f9eb 	bl	8001bcc <auto_ask_for_temperatures>
	auto_ask_for_voltages(CHARGING_VOLT_INFO_DELAY);   // 10 ms delay between each measure
 80007f6:	200a      	movs	r0, #10
 80007f8:	f001 f9b4 	bl	8001b64 <auto_ask_for_voltages>
	start_charging();
 80007fc:	f000 f828 	bl	8000850 <start_charging>
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <stop_charging_mode>:

void stop_charging_mode()
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	stop_auto_ask_for_temperatures();
 8000808:	f001 f9fc 	bl	8001c04 <stop_auto_ask_for_temperatures>
	stop_auto_ask_for_voltages();
 800080c:	f001 f9c6 	bl	8001b9c <stop_auto_ask_for_voltages>
	stop_charging();
 8000810:	f000 f864 	bl	80008dc <stop_charging>
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}

08000818 <start_balancing_mode>:

void start_balancing_mode()
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	auto_ask_for_balancing_info(BALANCING_BAL_INFO_DELAY);
 800081c:	200a      	movs	r0, #10
 800081e:	f001 fa09 	bl	8001c34 <auto_ask_for_balancing_info>
	auto_ask_for_temperatures(BALANCING_TEMP_INFO_DELAY);
 8000822:	200a      	movs	r0, #10
 8000824:	f001 f9d2 	bl	8001bcc <auto_ask_for_temperatures>
	start_balancing();
 8000828:	f001 fa38 	bl	8001c9c <start_balancing>
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <stop_balancing_mode>:

void stop_balancing_mode()
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	stop_auto_ask_for_balancing_info();
 8000834:	f001 fa1a 	bl	8001c6c <stop_auto_ask_for_balancing_info>
	stop_auto_ask_for_temperatures();
 8000838:	f001 f9e4 	bl	8001c04 <stop_auto_ask_for_temperatures>
	stop_balancing();
 800083c:	f001 fa46 	bl	8001ccc <stop_balancing>

//	Reset flags
	charging_balancing_states = 0;
 8000840:	4b02      	ldr	r3, [pc, #8]	@ (800084c <stop_balancing_mode+0x1c>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000c4 	.word	0x200000c4

08000850 <start_charging>:

void start_charging()
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
	uint8_t message[8] = {0};
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]

	uint16_t max_voltage = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	81fb      	strh	r3, [r7, #14]
	uint16_t max_current = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	81bb      	strh	r3, [r7, #12]


	max_voltage = (uint16_t)(CHARGER_MAX_VOLTAGE * 10);
 8000866:	f240 43ec 	movw	r3, #1260	@ 0x4ec
 800086a:	81fb      	strh	r3, [r7, #14]
	max_current = (uint16_t)(CHARGER_MAX_CURRENT * 10);
 800086c:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 8000870:	81bb      	strh	r3, [r7, #12]

//	Max voltage value high byte then low byte
	message[0] = (uint8_t)(max_voltage && 0xFF00) >> 8;
 8000872:	89fb      	ldrh	r3, [r7, #14]
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf14      	ite	ne
 8000878:	2301      	movne	r3, #1
 800087a:	2300      	moveq	r3, #0
 800087c:	b2db      	uxtb	r3, r3
 800087e:	b2db      	uxtb	r3, r3
 8000880:	121b      	asrs	r3, r3, #8
 8000882:	b2db      	uxtb	r3, r3
 8000884:	713b      	strb	r3, [r7, #4]
	message[1] = (uint8_t)(max_voltage && 0x00FF);
 8000886:	89fb      	ldrh	r3, [r7, #14]
 8000888:	2b00      	cmp	r3, #0
 800088a:	bf14      	ite	ne
 800088c:	2301      	movne	r3, #1
 800088e:	2300      	moveq	r3, #0
 8000890:	b2db      	uxtb	r3, r3
 8000892:	b2db      	uxtb	r3, r3
 8000894:	717b      	strb	r3, [r7, #5]

//	Max current value high byte then low byte
	message[2] = (uint8_t)(max_current && 0xFF00) >> 8;
 8000896:	89bb      	ldrh	r3, [r7, #12]
 8000898:	2b00      	cmp	r3, #0
 800089a:	bf14      	ite	ne
 800089c:	2301      	movne	r3, #1
 800089e:	2300      	moveq	r3, #0
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	121b      	asrs	r3, r3, #8
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	71bb      	strb	r3, [r7, #6]
	message[3] = (uint8_t)(max_current && 0x00FF);
 80008aa:	89bb      	ldrh	r3, [r7, #12]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	bf14      	ite	ne
 80008b0:	2301      	movne	r3, #1
 80008b2:	2300      	moveq	r3, #0
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	71fb      	strb	r3, [r7, #7]

//	Start charging
	message[4] = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	723b      	strb	r3, [r7, #8]

	CAN_set_ext_header(CHARGER_TX_HEADER, CHARGER_MESS_BYTES_NUM);
 80008be:	2108      	movs	r1, #8
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff febf 	bl	8000644 <CAN_set_ext_header>

	CAN1_send_mess(&hcan2, message);
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	4803      	ldr	r0, [pc, #12]	@ (80008d8 <start_charging+0x88>)
 80008cc:	f7ff fe86 	bl	80005dc <CAN1_send_mess>

}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000110 	.word	0x20000110

080008dc <stop_charging>:

void stop_charging()
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
	uint8_t message[8] = {0};
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]

	uint16_t max_voltage = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	81fb      	strh	r3, [r7, #14]
	uint16_t max_current = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	81bb      	strh	r3, [r7, #12]


	max_voltage = (uint16_t)(CHARGER_MAX_VOLTAGE * 10);
 80008f2:	f240 43ec 	movw	r3, #1260	@ 0x4ec
 80008f6:	81fb      	strh	r3, [r7, #14]
	max_current = (uint16_t)(CHARGER_MAX_CURRENT * 10);
 80008f8:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 80008fc:	81bb      	strh	r3, [r7, #12]

//	Max voltage value high byte then low byte
	message[0] = (uint8_t)(max_voltage && 0xFF00) >> 8;
 80008fe:	89fb      	ldrh	r3, [r7, #14]
 8000900:	2b00      	cmp	r3, #0
 8000902:	bf14      	ite	ne
 8000904:	2301      	movne	r3, #1
 8000906:	2300      	moveq	r3, #0
 8000908:	b2db      	uxtb	r3, r3
 800090a:	b2db      	uxtb	r3, r3
 800090c:	121b      	asrs	r3, r3, #8
 800090e:	b2db      	uxtb	r3, r3
 8000910:	713b      	strb	r3, [r7, #4]
	message[1] = (uint8_t)(max_voltage && 0x00FF);
 8000912:	89fb      	ldrh	r3, [r7, #14]
 8000914:	2b00      	cmp	r3, #0
 8000916:	bf14      	ite	ne
 8000918:	2301      	movne	r3, #1
 800091a:	2300      	moveq	r3, #0
 800091c:	b2db      	uxtb	r3, r3
 800091e:	b2db      	uxtb	r3, r3
 8000920:	717b      	strb	r3, [r7, #5]

//	Max current value high byte then low byte
	message[2] = (uint8_t)(max_current && 0xFF00) >> 8;
 8000922:	89bb      	ldrh	r3, [r7, #12]
 8000924:	2b00      	cmp	r3, #0
 8000926:	bf14      	ite	ne
 8000928:	2301      	movne	r3, #1
 800092a:	2300      	moveq	r3, #0
 800092c:	b2db      	uxtb	r3, r3
 800092e:	b2db      	uxtb	r3, r3
 8000930:	121b      	asrs	r3, r3, #8
 8000932:	b2db      	uxtb	r3, r3
 8000934:	71bb      	strb	r3, [r7, #6]
	message[3] = (uint8_t)(max_current && 0x00FF);
 8000936:	89bb      	ldrh	r3, [r7, #12]
 8000938:	2b00      	cmp	r3, #0
 800093a:	bf14      	ite	ne
 800093c:	2301      	movne	r3, #1
 800093e:	2300      	moveq	r3, #0
 8000940:	b2db      	uxtb	r3, r3
 8000942:	b2db      	uxtb	r3, r3
 8000944:	71fb      	strb	r3, [r7, #7]

//	Stop charging
	message[4] = 1;
 8000946:	2301      	movs	r3, #1
 8000948:	723b      	strb	r3, [r7, #8]

	CAN_set_ext_header(CHARGER_TX_HEADER, CHARGER_MESS_BYTES_NUM);
 800094a:	2108      	movs	r1, #8
 800094c:	2000      	movs	r0, #0
 800094e:	f7ff fe79 	bl	8000644 <CAN_set_ext_header>
	CAN1_send_mess(&hcan2, message);
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4619      	mov	r1, r3
 8000956:	4803      	ldr	r0, [pc, #12]	@ (8000964 <stop_charging+0x88>)
 8000958:	f7ff fe40 	bl	80005dc <CAN1_send_mess>

}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000110 	.word	0x20000110

08000968 <all_cells_under_threshold>:


int all_cells_under_threshold()
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
	//Check that cells are all under max voltage and temperature
	return 0;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <check_total_battery_state>:

void check_total_battery_state()
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	ask_for_voltages();
 800097c:	f001 f8da 	bl	8001b34 <ask_for_voltages>
	HAL_Delay(100);
 8000980:	2064      	movs	r0, #100	@ 0x64
 8000982:	f001 fa57 	bl	8001e34 <HAL_Delay>

	//check if all cells are balanced and near total pack target voltage
	//update b2 of 'charging_balancing_states' if these two conditions are met

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <HAL_CAN_RxFifo0MsgPendingCallback>:
extern TIM_HandleTypeDef htim3;



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
//	slave_return_t return_message;

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000994:	4b17      	ldr	r3, [pc, #92]	@ (80009f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000996:	4a18      	ldr	r2, [pc, #96]	@ (80009f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000998:	2100      	movs	r1, #0
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f002 f809 	bl	80029b2 <HAL_CAN_GetRxMessage>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d121      	bne.n	80009ea <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
    {
//    	Start timer and turn ON Yellow LED
    	HAL_TIM_Base_Start_IT(&htim3);
 80009a6:	4815      	ldr	r0, [pc, #84]	@ (80009fc <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80009a8:	f004 f804 	bl	80049b4 <HAL_TIM_Base_Start_IT>
        HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_SET); // Turn ON LED
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009b2:	4813      	ldr	r0, [pc, #76]	@ (8000a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80009b4:	f002 fe1a 	bl	80035ec <HAL_GPIO_WritePin>

        // Print or process the received message
        printf("Received CAN Message: ");
 80009b8:	4812      	ldr	r0, [pc, #72]	@ (8000a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80009ba:	f004 fd11 	bl	80053e0 <iprintf>
        for (int i = 0; i < RxHeader.DLC; i++)
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	e00a      	b.n	80009da <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
        {
            printf("%02X ", RxData[i]);
 80009c4:	4a0b      	ldr	r2, [pc, #44]	@ (80009f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	4413      	add	r3, r2
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4619      	mov	r1, r3
 80009ce:	480e      	ldr	r0, [pc, #56]	@ (8000a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80009d0:	f004 fd06 	bl	80053e0 <iprintf>
        for (int i = 0; i < RxHeader.DLC; i++)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	3301      	adds	r3, #1
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b07      	ldr	r3, [pc, #28]	@ (80009f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80009dc:	691a      	ldr	r2, [r3, #16]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d8ef      	bhi.n	80009c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
        }
//        return_message = convert_to_struct(RxData);

        printf("\n");
 80009e4:	200a      	movs	r0, #10
 80009e6:	f004 fd0d 	bl	8005404 <putchar>
    }
}
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200000bc 	.word	0x200000bc
 80009f8:	200000a0 	.word	0x200000a0
 80009fc:	20000280 	.word	0x20000280
 8000a00:	40020400 	.word	0x40020400
 8000a04:	0800622c 	.word	0x0800622c
 8000a08:	08006244 	.word	0x08006244

08000a0c <HAL_TIM_PeriodElapsedCallback>:
	//    	Start timer and turn ON Yellow LED
	    	HAL_TIM_Base_Start_IT(&htim3);
	        HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_SET); // Turn ON LED
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]


	if (htim->Instance == TIM2) {  // Check if it's the correct timer
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a1c:	d161      	bne.n	8000ae2 <HAL_TIM_PeriodElapsedCallback+0xd6>

    	if((timer_count % HB_10MS_PERIODS) == 0){
 8000a1e:	4b3a      	ldr	r3, [pc, #232]	@ (8000b08 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4a39      	ldr	r2, [pc, #228]	@ (8000b0c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000a26:	fba2 1203 	umull	r1, r2, r2, r3
 8000a2a:	0912      	lsrs	r2, r2, #4
 8000a2c:	2132      	movs	r1, #50	@ 0x32
 8000a2e:	fb01 f202 	mul.w	r2, r1, r2
 8000a32:	1a9b      	subs	r3, r3, r2
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d104      	bne.n	8000a44 <HAL_TIM_PeriodElapsedCallback+0x38>
    		HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin); // Toggle LED
 8000a3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a3e:	4834      	ldr	r0, [pc, #208]	@ (8000b10 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000a40:	f002 fded 	bl	800361e <HAL_GPIO_TogglePin>
    	}

    	if((timer_count % CHARGER_CONNECTION_10MS_PERIODS) == 0){
 8000a44:	4b30      	ldr	r3, [pc, #192]	@ (8000b08 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000a46:	781b      	ldrb	r3, [r3, #0]

    	}

    	if((timer_count % ASK_SLAVE_FOR_INFO_10MS_PERIODS) == 0){
 8000a48:	4b2f      	ldr	r3, [pc, #188]	@ (8000b08 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]

    	}


    	// High voltage light blinking and activating logic
    	if((timer_count % SLOW_BLINKING_HV_10MS_PERIODS) == 0)
 8000a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b08 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	4a2e      	ldr	r2, [pc, #184]	@ (8000b0c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000a54:	fba2 1203 	umull	r1, r2, r2, r3
 8000a58:	0912      	lsrs	r2, r2, #4
 8000a5a:	2132      	movs	r1, #50	@ 0x32
 8000a5c:	fb01 f202 	mul.w	r2, r1, r2
 8000a60:	1a9b      	subs	r3, r3, r2
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d108      	bne.n	8000a7a <HAL_TIM_PeriodElapsedCallback+0x6e>
    	{
    		//  If the precharge contactor is ON, blink the HV light
    		if(blinking_HV_led == 1)
 8000a68:	4b2a      	ldr	r3, [pc, #168]	@ (8000b14 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d103      	bne.n	8000a7a <HAL_TIM_PeriodElapsedCallback+0x6e>
    			HAL_GPIO_TogglePin(LIGHT_GPIO_Port, LIGHT_Pin);
 8000a72:	2108      	movs	r1, #8
 8000a74:	4828      	ldr	r0, [pc, #160]	@ (8000b18 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000a76:	f002 fdd2 	bl	800361e <HAL_GPIO_TogglePin>
    	}
    	if((timer_count % FAST_BLINKING_HV_10MS_PERIODS) == 0)
 8000a7a:	4b23      	ldr	r3, [pc, #140]	@ (8000b08 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b26      	ldr	r3, [pc, #152]	@ (8000b1c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a82:	fba3 1302 	umull	r1, r3, r3, r2
 8000a86:	08d9      	lsrs	r1, r3, #3
 8000a88:	460b      	mov	r3, r1
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d108      	bne.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x9e>
    	{
    		//  If the precharge contactor and the main contactor are ON, blink the HV light rapidly
    		if(blinking_HV_led == 2)
 8000a98:	4b1e      	ldr	r3, [pc, #120]	@ (8000b14 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d103      	bne.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x9e>
    			HAL_GPIO_TogglePin(LIGHT_GPIO_Port, LIGHT_Pin);
 8000aa2:	2108      	movs	r1, #8
 8000aa4:	481c      	ldr	r0, [pc, #112]	@ (8000b18 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000aa6:	f002 fdba 	bl	800361e <HAL_GPIO_TogglePin>
    	}

    	// If timer counter has not reached max value, increment
    	((timer_count + 1) % TIMER_MAX) ? timer_count = 0 : timer_count++;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	@ (8000b08 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	1c5a      	adds	r2, r3, #1
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000ab4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ab8:	1199      	asrs	r1, r3, #6
 8000aba:	17d3      	asrs	r3, r2, #31
 8000abc:	1acb      	subs	r3, r1, r3
 8000abe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ac2:	fb01 f303 	mul.w	r3, r1, r3
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d003      	beq.n	8000ad4 <HAL_TIM_PeriodElapsedCallback+0xc8>
 8000acc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
 8000ad2:	e006      	b.n	8000ae2 <HAL_TIM_PeriodElapsedCallback+0xd6>
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	3301      	adds	r3, #1
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4b0a      	ldr	r3, [pc, #40]	@ (8000b08 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000ae0:	701a      	strb	r2, [r3, #0]
    }


	// Timer that handles the activation time of yellow led on CAN package Rx/Tx
    if (htim->Instance == TIM3) {
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b24 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d108      	bne.n	8000afe <HAL_TIM_PeriodElapsedCallback+0xf2>
        HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET); // Turn off LED
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000af2:	4807      	ldr	r0, [pc, #28]	@ (8000b10 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000af4:	f002 fd7a 	bl	80035ec <HAL_GPIO_WritePin>
        HAL_TIM_Base_Stop_IT(&htim3);
 8000af8:	480b      	ldr	r0, [pc, #44]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000afa:	f003 ffcb 	bl	8004a94 <HAL_TIM_Base_Stop_IT>
    }

}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000341 	.word	0x20000341
 8000b0c:	51eb851f 	.word	0x51eb851f
 8000b10:	40020400 	.word	0x40020400
 8000b14:	20000343 	.word	0x20000343
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	cccccccd 	.word	0xcccccccd
 8000b20:	10624dd3 	.word	0x10624dd3
 8000b24:	40000400 	.word	0x40000400
 8000b28:	20000280 	.word	0x20000280

08000b2c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == IGNITION_Pin){ //Ignition interrupt triggered on both rising and falling edge.
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	2b20      	cmp	r3, #32
 8000b3a:	d108      	bne.n	8000b4e <HAL_GPIO_EXTI_Callback+0x22>

		all_connection_states ^= IGNITION_MASK; //Ignition bit is toggled when edge is detected
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <HAL_GPIO_EXTI_Callback+0x60>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	f083 0301 	eor.w	r3, r3, #1
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <HAL_GPIO_EXTI_Callback+0x60>)
 8000b4a:	701a      	strb	r2, [r3, #0]
		deactivate_precharge_contactor();

	}


}
 8000b4c:	e01a      	b.n	8000b84 <HAL_GPIO_EXTI_Callback+0x58>
	}else if(GPIO_Pin == CHARGER_DETECT_Pin){ //Ignition interrupt triggered on both rising and falling edge.
 8000b4e:	88fb      	ldrh	r3, [r7, #6]
 8000b50:	2b08      	cmp	r3, #8
 8000b52:	d108      	bne.n	8000b66 <HAL_GPIO_EXTI_Callback+0x3a>
		all_connection_states ^= IGNITION_MASK; //Charger bit is toggled when edge is detected
 8000b54:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <HAL_GPIO_EXTI_Callback+0x60>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	f083 0301 	eor.w	r3, r3, #1
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <HAL_GPIO_EXTI_Callback+0x60>)
 8000b62:	701a      	strb	r2, [r3, #0]
}
 8000b64:	e00e      	b.n	8000b84 <HAL_GPIO_EXTI_Callback+0x58>
	}else if(GPIO_Pin == EMERGENCY_STOP_Pin){
 8000b66:	88fb      	ldrh	r3, [r7, #6]
 8000b68:	2b10      	cmp	r3, #16
 8000b6a:	d10b      	bne.n	8000b84 <HAL_GPIO_EXTI_Callback+0x58>
		all_connection_states |= IGNITION_MASK;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <HAL_GPIO_EXTI_Callback+0x60>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <HAL_GPIO_EXTI_Callback+0x60>)
 8000b7a:	701a      	strb	r2, [r3, #0]
		deactivate_main_contactor();
 8000b7c:	f000 fbe6 	bl	800134c <deactivate_main_contactor>
		deactivate_precharge_contactor();
 8000b80:	f000 fbfc 	bl	800137c <deactivate_precharge_contactor>
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000342 	.word	0x20000342

08000b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b94:	f001 f8dc 	bl	8001d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b98:	f000 f838 	bl	8000c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9c:	f000 fa96 	bl	80010cc <MX_GPIO_Init>
  MX_CAN2_Init();
 8000ba0:	f000 f8e4 	bl	8000d6c <MX_CAN2_Init>
  MX_I2C1_Init();
 8000ba4:	f000 f918 	bl	8000dd8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000ba8:	f000 f944 	bl	8000e34 <MX_I2C3_Init>
  MX_SPI3_Init();
 8000bac:	f000 f970 	bl	8000e90 <MX_SPI3_Init>
  MX_USART6_IRDA_Init();
 8000bb0:	f000 fa66 	bl	8001080 <MX_USART6_IRDA_Init>
  MX_ADC1_Init();
 8000bb4:	f000 f888 	bl	8000cc8 <MX_ADC1_Init>
  MX_USART1_IRDA_Init();
 8000bb8:	f000 fa3c 	bl	8001034 <MX_USART1_IRDA_Init>
  MX_TIM2_Init();
 8000bbc:	f000 f99e 	bl	8000efc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bc0:	f000 f9ea 	bl	8000f98 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ITM_Init(); // Init ITM to send data through ITM port 0
 8000bc4:	f000 fba6 	bl	8001314 <ITM_Init>

  HAL_TIM_Base_Start_IT(&htim2); //Start Main timer (10 ms)
 8000bc8:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <main+0x6c>)
 8000bca:	f003 fef3 	bl	80049b4 <HAL_TIM_Base_Start_IT>

  CAN_Activate_Interrupts(&hcan2);
 8000bce:	480c      	ldr	r0, [pc, #48]	@ (8000c00 <main+0x70>)
 8000bd0:	f7ff fd7e 	bl	80006d0 <CAN_Activate_Interrupts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if((all_connection_states & CHARGER_CONN_MASK) != 0){
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <main+0x74>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d002      	beq.n	8000be8 <main+0x58>

		  charging_balancing_mode();
 8000be2:	f7ff fda5 	bl	8000730 <charging_balancing_mode>
 8000be6:	e001      	b.n	8000bec <main+0x5c>


	  }else if((all_connection_states & IGNITION_MASK) != 0){
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <main+0x74>)
 8000bea:	781b      	ldrb	r3, [r3, #0]


	  }


	  master_mode = 0;
 8000bec:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <main+0x78>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(MAIN_LOOP_DELAY_MS);
 8000bf2:	2014      	movs	r0, #20
 8000bf4:	f001 f91e 	bl	8001e34 <HAL_Delay>
	  if((all_connection_states & CHARGER_CONN_MASK) != 0){
 8000bf8:	e7ec      	b.n	8000bd4 <main+0x44>
 8000bfa:	bf00      	nop
 8000bfc:	20000238 	.word	0x20000238
 8000c00:	20000110 	.word	0x20000110
 8000c04:	20000342 	.word	0x20000342
 8000c08:	20000340 	.word	0x20000340

08000c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b094      	sub	sp, #80	@ 0x50
 8000c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	2234      	movs	r2, #52	@ 0x34
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f004 fd30 	bl	8005680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	4b22      	ldr	r3, [pc, #136]	@ (8000cc0 <SystemClock_Config+0xb4>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c38:	4a21      	ldr	r2, [pc, #132]	@ (8000cc0 <SystemClock_Config+0xb4>)
 8000c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c40:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <SystemClock_Config+0xb4>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <SystemClock_Config+0xb8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc4 <SystemClock_Config+0xb8>)
 8000c56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <SystemClock_Config+0xb8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c70:	2310      	movs	r3, #16
 8000c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f003 fb3d 	bl	80042fc <HAL_RCC_OscConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000c88:	f000 fb5a 	bl	8001340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f003 f90a 	bl	8003ec0 <HAL_RCC_ClockConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000cb2:	f000 fb45 	bl	8001340 <Error_Handler>
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	3750      	adds	r7, #80	@ 0x50
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40007000 	.word	0x40007000

08000cc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cce:	463b      	mov	r3, r7
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cda:	4b21      	ldr	r3, [pc, #132]	@ (8000d60 <MX_ADC1_Init+0x98>)
 8000cdc:	4a21      	ldr	r2, [pc, #132]	@ (8000d64 <MX_ADC1_Init+0x9c>)
 8000cde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d60 <MX_ADC1_Init+0x98>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d60 <MX_ADC1_Init+0x98>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000cec:	4b1c      	ldr	r3, [pc, #112]	@ (8000d60 <MX_ADC1_Init+0x98>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <MX_ADC1_Init+0x98>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cf8:	4b19      	ldr	r3, [pc, #100]	@ (8000d60 <MX_ADC1_Init+0x98>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d00:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <MX_ADC1_Init+0x98>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d06:	4b16      	ldr	r3, [pc, #88]	@ (8000d60 <MX_ADC1_Init+0x98>)
 8000d08:	4a17      	ldr	r2, [pc, #92]	@ (8000d68 <MX_ADC1_Init+0xa0>)
 8000d0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <MX_ADC1_Init+0x98>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d12:	4b13      	ldr	r3, [pc, #76]	@ (8000d60 <MX_ADC1_Init+0x98>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d18:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <MX_ADC1_Init+0x98>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_ADC1_Init+0x98>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d26:	480e      	ldr	r0, [pc, #56]	@ (8000d60 <MX_ADC1_Init+0x98>)
 8000d28:	f001 f8a8 	bl	8001e7c <HAL_ADC_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d32:	f000 fb05 	bl	8001340 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d36:	2309      	movs	r3, #9
 8000d38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d42:	463b      	mov	r3, r7
 8000d44:	4619      	mov	r1, r3
 8000d46:	4806      	ldr	r0, [pc, #24]	@ (8000d60 <MX_ADC1_Init+0x98>)
 8000d48:	f001 f8dc 	bl	8001f04 <HAL_ADC_ConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d52:	f000 faf5 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200000c8 	.word	0x200000c8
 8000d64:	40012000 	.word	0x40012000
 8000d68:	0f000001 	.word	0x0f000001

08000d6c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000d70:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <MX_CAN2_Init+0x64>)
 8000d72:	4a18      	ldr	r2, [pc, #96]	@ (8000dd4 <MX_CAN2_Init+0x68>)
 8000d74:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000d76:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <MX_CAN2_Init+0x64>)
 8000d78:	2210      	movs	r2, #16
 8000d7a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <MX_CAN2_Init+0x64>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d82:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <MX_CAN2_Init+0x64>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <MX_CAN2_Init+0x64>)
 8000d8a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d8e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <MX_CAN2_Init+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <MX_CAN2_Init+0x64>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <MX_CAN2_Init+0x64>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <MX_CAN2_Init+0x64>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8000da8:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <MX_CAN2_Init+0x64>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <MX_CAN2_Init+0x64>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <MX_CAN2_Init+0x64>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000dba:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <MX_CAN2_Init+0x64>)
 8000dbc:	f001 fac0 	bl	8002340 <HAL_CAN_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8000dc6:	f000 fabb 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000110 	.word	0x20000110
 8000dd4:	40006800 	.word	0x40006800

08000dd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <MX_I2C1_Init+0x50>)
 8000dde:	4a13      	ldr	r2, [pc, #76]	@ (8000e2c <MX_I2C1_Init+0x54>)
 8000de0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000de2:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <MX_I2C1_Init+0x50>)
 8000de4:	4a12      	ldr	r2, [pc, #72]	@ (8000e30 <MX_I2C1_Init+0x58>)
 8000de6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e28 <MX_I2C1_Init+0x50>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <MX_I2C1_Init+0x50>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <MX_I2C1_Init+0x50>)
 8000df6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dfa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000e28 <MX_I2C1_Init+0x50>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e02:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <MX_I2C1_Init+0x50>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e08:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <MX_I2C1_Init+0x50>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e0e:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <MX_I2C1_Init+0x50>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e14:	4804      	ldr	r0, [pc, #16]	@ (8000e28 <MX_I2C1_Init+0x50>)
 8000e16:	f002 fc35 	bl	8003684 <HAL_I2C_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e20:	f000 fa8e 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000138 	.word	0x20000138
 8000e2c:	40005400 	.word	0x40005400
 8000e30:	000186a0 	.word	0x000186a0

08000e34 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e38:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <MX_I2C3_Init+0x50>)
 8000e3a:	4a13      	ldr	r2, [pc, #76]	@ (8000e88 <MX_I2C3_Init+0x54>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <MX_I2C3_Init+0x50>)
 8000e40:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <MX_I2C3_Init+0x58>)
 8000e42:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <MX_I2C3_Init+0x50>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <MX_I2C3_Init+0x50>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <MX_I2C3_Init+0x50>)
 8000e52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e56:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e58:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <MX_I2C3_Init+0x50>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <MX_I2C3_Init+0x50>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e64:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <MX_I2C3_Init+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <MX_I2C3_Init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e70:	4804      	ldr	r0, [pc, #16]	@ (8000e84 <MX_I2C3_Init+0x50>)
 8000e72:	f002 fc07 	bl	8003684 <HAL_I2C_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e7c:	f000 fa60 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000018c 	.word	0x2000018c
 8000e88:	40005c00 	.word	0x40005c00
 8000e8c:	000186a0 	.word	0x000186a0

08000e90 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e94:	4b17      	ldr	r3, [pc, #92]	@ (8000ef4 <MX_SPI3_Init+0x64>)
 8000e96:	4a18      	ldr	r2, [pc, #96]	@ (8000ef8 <MX_SPI3_Init+0x68>)
 8000e98:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e9a:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <MX_SPI3_Init+0x64>)
 8000e9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ea0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	@ (8000ef4 <MX_SPI3_Init+0x64>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <MX_SPI3_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eae:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <MX_SPI3_Init+0x64>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <MX_SPI3_Init+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <MX_SPI3_Init+0x64>)
 8000ebc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ec0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <MX_SPI3_Init+0x64>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <MX_SPI3_Init+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <MX_SPI3_Init+0x64>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <MX_SPI3_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <MX_SPI3_Init+0x64>)
 8000edc:	220a      	movs	r2, #10
 8000ede:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ee0:	4804      	ldr	r0, [pc, #16]	@ (8000ef4 <MX_SPI3_Init+0x64>)
 8000ee2:	f003 fc8f 	bl	8004804 <HAL_SPI_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000eec:	f000 fa28 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200001e0 	.word	0x200001e0
 8000ef8:	40003c00 	.word	0x40003c00

08000efc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f10:	463b      	mov	r3, r7
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f18:	4b1e      	ldr	r3, [pc, #120]	@ (8000f94 <MX_TIM2_Init+0x98>)
 8000f1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = PSC_1000;
 8000f20:	4b1c      	ldr	r3, [pc, #112]	@ (8000f94 <MX_TIM2_Init+0x98>)
 8000f22:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f28:	4b1a      	ldr	r3, [pc, #104]	@ (8000f94 <MX_TIM2_Init+0x98>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = COUNTER_50MS;
 8000f2e:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <MX_TIM2_Init+0x98>)
 8000f30:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8000f34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f36:	4b17      	ldr	r3, [pc, #92]	@ (8000f94 <MX_TIM2_Init+0x98>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <MX_TIM2_Init+0x98>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f42:	4814      	ldr	r0, [pc, #80]	@ (8000f94 <MX_TIM2_Init+0x98>)
 8000f44:	f003 fce7 	bl	8004916 <HAL_TIM_Base_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f4e:	f000 f9f7 	bl	8001340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480d      	ldr	r0, [pc, #52]	@ (8000f94 <MX_TIM2_Init+0x98>)
 8000f60:	f003 feb7 	bl	8004cd2 <HAL_TIM_ConfigClockSource>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f6a:	f000 f9e9 	bl	8001340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f76:	463b      	mov	r3, r7
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4806      	ldr	r0, [pc, #24]	@ (8000f94 <MX_TIM2_Init+0x98>)
 8000f7c:	f004 f8de 	bl	800513c <HAL_TIMEx_MasterConfigSynchronization>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f86:	f000 f9db 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000238 	.word	0x20000238

08000f98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9e:	f107 0308 	add.w	r3, r7, #8
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fac:	463b      	mov	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800102c <MX_TIM3_Init+0x94>)
 8000fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8001030 <MX_TIM3_Init+0x98>)
 8000fb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = PSC_1000;
 8000fba:	4b1c      	ldr	r3, [pc, #112]	@ (800102c <MX_TIM3_Init+0x94>)
 8000fbc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fc0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800102c <MX_TIM3_Init+0x94>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = COUNTER_50MS;
 8000fc8:	4b18      	ldr	r3, [pc, #96]	@ (800102c <MX_TIM3_Init+0x94>)
 8000fca:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8000fce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd0:	4b16      	ldr	r3, [pc, #88]	@ (800102c <MX_TIM3_Init+0x94>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <MX_TIM3_Init+0x94>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fdc:	4813      	ldr	r0, [pc, #76]	@ (800102c <MX_TIM3_Init+0x94>)
 8000fde:	f003 fc9a 	bl	8004916 <HAL_TIM_Base_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000fe8:	f000 f9aa 	bl	8001340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480c      	ldr	r0, [pc, #48]	@ (800102c <MX_TIM3_Init+0x94>)
 8000ffa:	f003 fe6a 	bl	8004cd2 <HAL_TIM_ConfigClockSource>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001004:	f000 f99c 	bl	8001340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001010:	463b      	mov	r3, r7
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	@ (800102c <MX_TIM3_Init+0x94>)
 8001016:	f004 f891 	bl	800513c <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001020:	f000 f98e 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000280 	.word	0x20000280
 8001030:	40000400 	.word	0x40000400

08001034 <MX_USART1_IRDA_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_IRDA_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  hirda1.Instance = USART1;
 8001038:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <MX_USART1_IRDA_Init+0x44>)
 800103a:	4a10      	ldr	r2, [pc, #64]	@ (800107c <MX_USART1_IRDA_Init+0x48>)
 800103c:	601a      	str	r2, [r3, #0]
  hirda1.Init.BaudRate = 115200;
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <MX_USART1_IRDA_Init+0x44>)
 8001040:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001044:	605a      	str	r2, [r3, #4]
  hirda1.Init.WordLength = IRDA_WORDLENGTH_8B;
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <MX_USART1_IRDA_Init+0x44>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  hirda1.Init.Parity = IRDA_PARITY_NONE;
 800104c:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <MX_USART1_IRDA_Init+0x44>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  hirda1.Init.Mode = IRDA_MODE_TX_RX;
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <MX_USART1_IRDA_Init+0x44>)
 8001054:	220c      	movs	r2, #12
 8001056:	611a      	str	r2, [r3, #16]
  hirda1.Init.Prescaler = 1;
 8001058:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <MX_USART1_IRDA_Init+0x44>)
 800105a:	2201      	movs	r2, #1
 800105c:	751a      	strb	r2, [r3, #20]
  hirda1.Init.IrDAMode = IRDA_POWERMODE_NORMAL;
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <MX_USART1_IRDA_Init+0x44>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  if (HAL_IRDA_Init(&hirda1) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	@ (8001078 <MX_USART1_IRDA_Init+0x44>)
 8001066:	f002 fc51 	bl	800390c <HAL_IRDA_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_USART1_IRDA_Init+0x40>
  {
    Error_Handler();
 8001070:	f000 f966 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200002c8 	.word	0x200002c8
 800107c:	40011000 	.word	0x40011000

08001080 <MX_USART6_IRDA_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_IRDA_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  hirda6.Instance = USART6;
 8001084:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <MX_USART6_IRDA_Init+0x44>)
 8001086:	4a10      	ldr	r2, [pc, #64]	@ (80010c8 <MX_USART6_IRDA_Init+0x48>)
 8001088:	601a      	str	r2, [r3, #0]
  hirda6.Init.BaudRate = 115200;
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <MX_USART6_IRDA_Init+0x44>)
 800108c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001090:	605a      	str	r2, [r3, #4]
  hirda6.Init.WordLength = IRDA_WORDLENGTH_8B;
 8001092:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <MX_USART6_IRDA_Init+0x44>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  hirda6.Init.Parity = IRDA_PARITY_NONE;
 8001098:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <MX_USART6_IRDA_Init+0x44>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  hirda6.Init.Mode = IRDA_MODE_TX_RX;
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <MX_USART6_IRDA_Init+0x44>)
 80010a0:	220c      	movs	r2, #12
 80010a2:	611a      	str	r2, [r3, #16]
  hirda6.Init.Prescaler = 1;
 80010a4:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <MX_USART6_IRDA_Init+0x44>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	751a      	strb	r2, [r3, #20]
  hirda6.Init.IrDAMode = IRDA_POWERMODE_NORMAL;
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <MX_USART6_IRDA_Init+0x44>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  if (HAL_IRDA_Init(&hirda6) != HAL_OK)
 80010b0:	4804      	ldr	r0, [pc, #16]	@ (80010c4 <MX_USART6_IRDA_Init+0x44>)
 80010b2:	f002 fc2b 	bl	800390c <HAL_IRDA_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_USART6_IRDA_Init+0x40>
  {
    Error_Handler();
 80010bc:	f000 f940 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000304 	.word	0x20000304
 80010c8:	40011400 	.word	0x40011400

080010cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	4b86      	ldr	r3, [pc, #536]	@ (8001300 <MX_GPIO_Init+0x234>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a85      	ldr	r2, [pc, #532]	@ (8001300 <MX_GPIO_Init+0x234>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b83      	ldr	r3, [pc, #524]	@ (8001300 <MX_GPIO_Init+0x234>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b7f      	ldr	r3, [pc, #508]	@ (8001300 <MX_GPIO_Init+0x234>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a7e      	ldr	r2, [pc, #504]	@ (8001300 <MX_GPIO_Init+0x234>)
 8001108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b7c      	ldr	r3, [pc, #496]	@ (8001300 <MX_GPIO_Init+0x234>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	4b78      	ldr	r3, [pc, #480]	@ (8001300 <MX_GPIO_Init+0x234>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a77      	ldr	r2, [pc, #476]	@ (8001300 <MX_GPIO_Init+0x234>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b75      	ldr	r3, [pc, #468]	@ (8001300 <MX_GPIO_Init+0x234>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	4b71      	ldr	r3, [pc, #452]	@ (8001300 <MX_GPIO_Init+0x234>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a70      	ldr	r2, [pc, #448]	@ (8001300 <MX_GPIO_Init+0x234>)
 8001140:	f043 0302 	orr.w	r3, r3, #2
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b6e      	ldr	r3, [pc, #440]	@ (8001300 <MX_GPIO_Init+0x234>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	4b6a      	ldr	r3, [pc, #424]	@ (8001300 <MX_GPIO_Init+0x234>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a69      	ldr	r2, [pc, #420]	@ (8001300 <MX_GPIO_Init+0x234>)
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b67      	ldr	r3, [pc, #412]	@ (8001300 <MX_GPIO_Init+0x234>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PRECHARGE_CONTACTOR_Pin|MAIN_CONTACTOR_Pin|GPIO0_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	2107      	movs	r1, #7
 8001172:	4864      	ldr	r0, [pc, #400]	@ (8001304 <MX_GPIO_Init+0x238>)
 8001174:	f002 fa3a 	bl	80035ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LIGHT_Pin|CHANNEL_STATUS_Pin, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	2148      	movs	r1, #72	@ 0x48
 800117c:	4862      	ldr	r0, [pc, #392]	@ (8001308 <MX_GPIO_Init+0x23c>)
 800117e:	f002 fa35 	bl	80035ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO3_Pin|YELLOW_LED_Pin|RED_LED_Pin|GPIO2_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 4146 	mov.w	r1, #50688	@ 0xc600
 8001188:	4860      	ldr	r0, [pc, #384]	@ (800130c <MX_GPIO_Init+0x240>)
 800118a:	f002 fa2f 	bl	80035ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ISOLATION_FAULT_DETECT_Pin */
  GPIO_InitStruct.Pin = ISOLATION_FAULT_DETECT_Pin;
 800118e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ISOLATION_FAULT_DETECT_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	4858      	ldr	r0, [pc, #352]	@ (8001304 <MX_GPIO_Init+0x238>)
 80011a4:	f002 f88e 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PRECHARGE_CONTACTOR_Pin MAIN_CONTACTOR_Pin GPIO0_Pin */
  GPIO_InitStruct.Pin = PRECHARGE_CONTACTOR_Pin|MAIN_CONTACTOR_Pin|GPIO0_Pin;
 80011a8:	2307      	movs	r3, #7
 80011aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	4851      	ldr	r0, [pc, #324]	@ (8001304 <MX_GPIO_Init+0x238>)
 80011c0:	f002 f880 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGER_DETECT_Pin IGNITION_Pin */
  GPIO_InitStruct.Pin = CHARGER_DETECT_Pin|IGNITION_Pin;
 80011c4:	2328      	movs	r3, #40	@ 0x28
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80011c8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	484a      	ldr	r0, [pc, #296]	@ (8001304 <MX_GPIO_Init+0x238>)
 80011da:	f002 f873 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CURRENT_Pin */
  GPIO_InitStruct.Pin = CURRENT_Pin;
 80011de:	2304      	movs	r3, #4
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CURRENT_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	4845      	ldr	r0, [pc, #276]	@ (8001308 <MX_GPIO_Init+0x23c>)
 80011f2:	f002 f867 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHT_Pin CHANNEL_STATUS_Pin */
  GPIO_InitStruct.Pin = LIGHT_Pin|CHANNEL_STATUS_Pin;
 80011f6:	2348      	movs	r3, #72	@ 0x48
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	483e      	ldr	r0, [pc, #248]	@ (8001308 <MX_GPIO_Init+0x23c>)
 800120e:	f002 f859 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMERGENCY_STOP_Pin */
  GPIO_InitStruct.Pin = EMERGENCY_STOP_Pin;
 8001212:	2310      	movs	r3, #16
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001216:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMERGENCY_STOP_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	4837      	ldr	r0, [pc, #220]	@ (8001304 <MX_GPIO_Init+0x238>)
 8001228:	f002 f84c 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ISOLATION_FAULT_DETECTB0_Pin */
  GPIO_InitStruct.Pin = ISOLATION_FAULT_DETECTB0_Pin;
 800122c:	2301      	movs	r3, #1
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001230:	2300      	movs	r3, #0
 8001232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ISOLATION_FAULT_DETECTB0_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4833      	ldr	r0, [pc, #204]	@ (800130c <MX_GPIO_Init+0x240>)
 8001240:	f002 f840 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin YELLOW_LED_Pin RED_LED_Pin GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|YELLOW_LED_Pin|RED_LED_Pin|GPIO2_Pin;
 8001244:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124a:	2301      	movs	r3, #1
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	482b      	ldr	r0, [pc, #172]	@ (800130c <MX_GPIO_Init+0x240>)
 800125e:	f002 f831 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001262:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001266:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001274:	230c      	movs	r3, #12
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	4821      	ldr	r0, [pc, #132]	@ (8001304 <MX_GPIO_Init+0x238>)
 8001280:	f002 f820 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001284:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001296:	230a      	movs	r3, #10
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	4819      	ldr	r0, [pc, #100]	@ (8001308 <MX_GPIO_Init+0x23c>)
 80012a2:	f002 f80f 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012a6:	2304      	movs	r3, #4
 80012a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80012b6:	230c      	movs	r3, #12
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4813      	ldr	r0, [pc, #76]	@ (8001310 <MX_GPIO_Init+0x244>)
 80012c2:	f001 ffff 	bl	80032c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2009      	movs	r0, #9
 80012cc:	f001 ffc3 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80012d0:	2009      	movs	r0, #9
 80012d2:	f001 ffdc 	bl	800328e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	200a      	movs	r0, #10
 80012dc:	f001 ffbb 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80012e0:	200a      	movs	r0, #10
 80012e2:	f001 ffd4 	bl	800328e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	2017      	movs	r0, #23
 80012ec:	f001 ffb3 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012f0:	2017      	movs	r0, #23
 80012f2:	f001 ffcc 	bl	800328e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80012f6:	bf00      	nop
 80012f8:	3728      	adds	r7, #40	@ 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40020800 	.word	0x40020800
 8001308:	40020000 	.word	0x40020000
 800130c:	40020400 	.word	0x40020400
 8001310:	40020c00 	.word	0x40020c00

08001314 <ITM_Init>:
/* USER CODE BEGIN 4 */




void ITM_Init(void) {
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
    // Enable the ITM (Instrumentation Trace Macrocell)
    ITM->TCR = ITM_TCR_ITMENA_Msk;        // Enable ITM
 8001318:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800131c:	2201      	movs	r2, #1
 800131e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
    ITM->TPR = 0x0;                       // Set privilege level to 0 (default)
 8001322:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001326:	2200      	movs	r2, #0
 8001328:	f8c3 2e40 	str.w	r2, [r3, #3648]	@ 0xe40
    ITM->TER = 0x01;                      // Enable stimulus 0 (SWO)
 800132c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001330:	2201      	movs	r2, #1
 8001332:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <Error_Handler+0x8>

0800134c <deactivate_main_contactor>:

	return 0;
}

void deactivate_main_contactor(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	//	Deactivate main contactor
	HAL_GPIO_WritePin(MAIN_CONTACTOR_GPIO_Port, MAIN_CONTACTOR_Pin, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	2102      	movs	r1, #2
 8001354:	4806      	ldr	r0, [pc, #24]	@ (8001370 <deactivate_main_contactor+0x24>)
 8001356:	f002 f949 	bl	80035ec <HAL_GPIO_WritePin>

	//  Turn OFF HV light
	HAL_GPIO_WritePin(LIGHT_GPIO_Port, LIGHT_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	2108      	movs	r1, #8
 800135e:	4805      	ldr	r0, [pc, #20]	@ (8001374 <deactivate_main_contactor+0x28>)
 8001360:	f002 f944 	bl	80035ec <HAL_GPIO_WritePin>
	blinking_HV_led = 0;
 8001364:	4b04      	ldr	r3, [pc, #16]	@ (8001378 <deactivate_main_contactor+0x2c>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40020800 	.word	0x40020800
 8001374:	40020000 	.word	0x40020000
 8001378:	20000343 	.word	0x20000343

0800137c <deactivate_precharge_contactor>:


}

void deactivate_precharge_contactor(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	//	Deactivate main contactor
	HAL_GPIO_WritePin(PRECHARGE_PIN_GROUP, PRECHARGE_PIN, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2101      	movs	r1, #1
 8001384:	4809      	ldr	r0, [pc, #36]	@ (80013ac <deactivate_precharge_contactor+0x30>)
 8001386:	f002 f931 	bl	80035ec <HAL_GPIO_WritePin>
	blinking_HV_led = 0;
 800138a:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <deactivate_precharge_contactor+0x34>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]

	// If main contactor is ON, ensures that the HV light is ON
	if(HAL_GPIO_ReadPin(MAIN_CONTACTOR_GPIO_Port, MAIN_CONTACTOR_Pin) == GPIO_PIN_SET)
 8001390:	2102      	movs	r1, #2
 8001392:	4806      	ldr	r0, [pc, #24]	@ (80013ac <deactivate_precharge_contactor+0x30>)
 8001394:	f002 f912 	bl	80035bc <HAL_GPIO_ReadPin>
 8001398:	4603      	mov	r3, r0
 800139a:	2b01      	cmp	r3, #1
 800139c:	d104      	bne.n	80013a8 <deactivate_precharge_contactor+0x2c>
		HAL_GPIO_WritePin(LIGHT_GPIO_Port, LIGHT_Pin, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	2108      	movs	r1, #8
 80013a2:	4804      	ldr	r0, [pc, #16]	@ (80013b4 <deactivate_precharge_contactor+0x38>)
 80013a4:	f002 f922 	bl	80035ec <HAL_GPIO_WritePin>

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40020800 	.word	0x40020800
 80013b0:	20000343 	.word	0x20000343
 80013b4:	40020000 	.word	0x40020000

080013b8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013c0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d013      	beq.n	80013f8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80013d0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013d4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80013d8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00b      	beq.n	80013f8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80013e0:	e000      	b.n	80013e4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80013e2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80013e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f9      	beq.n	80013e2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80013ee:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80013f8:	687b      	ldr	r3, [r7, #4]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <__io_putchar>:
#include "stdio.h"
#include "stdint.h"
#include "stm32f4xx.h"

int __io_putchar(int ch)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 // Write character to ITM ch.0
 ITM_SendChar(ch);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ffd1 	bl	80013b8 <ITM_SendChar>
 return(ch);
 8001416:	687b      	ldr	r3, [r7, #4]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <HAL_MspInit+0x4c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	4a0f      	ldr	r2, [pc, #60]	@ (800146c <HAL_MspInit+0x4c>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001434:	6453      	str	r3, [r2, #68]	@ 0x44
 8001436:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <HAL_MspInit+0x4c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <HAL_MspInit+0x4c>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144a:	4a08      	ldr	r2, [pc, #32]	@ (800146c <HAL_MspInit+0x4c>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001450:	6413      	str	r3, [r2, #64]	@ 0x40
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <HAL_MspInit+0x4c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800

08001470 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	@ 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a17      	ldr	r2, [pc, #92]	@ (80014ec <HAL_ADC_MspInit+0x7c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d127      	bne.n	80014e2 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <HAL_ADC_MspInit+0x80>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	4a15      	ldr	r2, [pc, #84]	@ (80014f0 <HAL_ADC_MspInit+0x80>)
 800149c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014a2:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <HAL_ADC_MspInit+0x80>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <HAL_ADC_MspInit+0x80>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a0e      	ldr	r2, [pc, #56]	@ (80014f0 <HAL_ADC_MspInit+0x80>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <HAL_ADC_MspInit+0x80>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LV_BATTERY_VOLTAGE_Pin;
 80014ca:	2302      	movs	r3, #2
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ce:	2303      	movs	r3, #3
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LV_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <HAL_ADC_MspInit+0x84>)
 80014de:	f001 fef1 	bl	80032c4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	@ 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40012000 	.word	0x40012000
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020400 	.word	0x40020400

080014f8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	@ 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a24      	ldr	r2, [pc, #144]	@ (80015a8 <HAL_CAN_MspInit+0xb0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d142      	bne.n	80015a0 <HAL_CAN_MspInit+0xa8>
  {
    /* USER CODE BEGIN CAN2_MspInit 0 */

    /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	4b23      	ldr	r3, [pc, #140]	@ (80015ac <HAL_CAN_MspInit+0xb4>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	4a22      	ldr	r2, [pc, #136]	@ (80015ac <HAL_CAN_MspInit+0xb4>)
 8001524:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001528:	6413      	str	r3, [r2, #64]	@ 0x40
 800152a:	4b20      	ldr	r3, [pc, #128]	@ (80015ac <HAL_CAN_MspInit+0xb4>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	4b1c      	ldr	r3, [pc, #112]	@ (80015ac <HAL_CAN_MspInit+0xb4>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	4a1b      	ldr	r2, [pc, #108]	@ (80015ac <HAL_CAN_MspInit+0xb4>)
 8001540:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001544:	6413      	str	r3, [r2, #64]	@ 0x40
 8001546:	4b19      	ldr	r3, [pc, #100]	@ (80015ac <HAL_CAN_MspInit+0xb4>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <HAL_CAN_MspInit+0xb4>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4a14      	ldr	r2, [pc, #80]	@ (80015ac <HAL_CAN_MspInit+0xb4>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6313      	str	r3, [r2, #48]	@ 0x30
 8001562:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <HAL_CAN_MspInit+0xb4>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800156e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001578:	2302      	movs	r3, #2
 800157a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001580:	2309      	movs	r3, #9
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4809      	ldr	r0, [pc, #36]	@ (80015b0 <HAL_CAN_MspInit+0xb8>)
 800158c:	f001 fe9a 	bl	80032c4 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2100      	movs	r1, #0
 8001594:	2040      	movs	r0, #64	@ 0x40
 8001596:	f001 fe5e 	bl	8003256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800159a:	2040      	movs	r0, #64	@ 0x40
 800159c:	f001 fe77 	bl	800328e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN2_MspInit 1 */

  }

}
 80015a0:	bf00      	nop
 80015a2:	3728      	adds	r7, #40	@ 0x28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40006800 	.word	0x40006800
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020400 	.word	0x40020400

080015b4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08c      	sub	sp, #48	@ 0x30
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a42      	ldr	r2, [pc, #264]	@ (80016dc <HAL_I2C_MspInit+0x128>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d12c      	bne.n	8001630 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	4b41      	ldr	r3, [pc, #260]	@ (80016e0 <HAL_I2C_MspInit+0x12c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	4a40      	ldr	r2, [pc, #256]	@ (80016e0 <HAL_I2C_MspInit+0x12c>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e6:	4b3e      	ldr	r3, [pc, #248]	@ (80016e0 <HAL_I2C_MspInit+0x12c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	61bb      	str	r3, [r7, #24]
 80015f0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_I2C_SCL_Pin|EEPROM_I2C_SDA_Pin;
 80015f2:	23c0      	movs	r3, #192	@ 0xc0
 80015f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f6:	2312      	movs	r3, #18
 80015f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001602:	2304      	movs	r3, #4
 8001604:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	4835      	ldr	r0, [pc, #212]	@ (80016e4 <HAL_I2C_MspInit+0x130>)
 800160e:	f001 fe59 	bl	80032c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	4b32      	ldr	r3, [pc, #200]	@ (80016e0 <HAL_I2C_MspInit+0x12c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	4a31      	ldr	r2, [pc, #196]	@ (80016e0 <HAL_I2C_MspInit+0x12c>)
 800161c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001620:	6413      	str	r3, [r2, #64]	@ 0x40
 8001622:	4b2f      	ldr	r3, [pc, #188]	@ (80016e0 <HAL_I2C_MspInit+0x12c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800162e:	e050      	b.n	80016d2 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a2c      	ldr	r2, [pc, #176]	@ (80016e8 <HAL_I2C_MspInit+0x134>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d14b      	bne.n	80016d2 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b28      	ldr	r3, [pc, #160]	@ (80016e0 <HAL_I2C_MspInit+0x12c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a27      	ldr	r2, [pc, #156]	@ (80016e0 <HAL_I2C_MspInit+0x12c>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b25      	ldr	r3, [pc, #148]	@ (80016e0 <HAL_I2C_MspInit+0x12c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b21      	ldr	r3, [pc, #132]	@ (80016e0 <HAL_I2C_MspInit+0x12c>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a20      	ldr	r2, [pc, #128]	@ (80016e0 <HAL_I2C_MspInit+0x12c>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b1e      	ldr	r3, [pc, #120]	@ (80016e0 <HAL_I2C_MspInit+0x12c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001672:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001678:	2312      	movs	r3, #18
 800167a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001680:	2303      	movs	r3, #3
 8001682:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001684:	2304      	movs	r3, #4
 8001686:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	4619      	mov	r1, r3
 800168e:	4817      	ldr	r0, [pc, #92]	@ (80016ec <HAL_I2C_MspInit+0x138>)
 8001690:	f001 fe18 	bl	80032c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001694:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800169a:	2312      	movs	r3, #18
 800169c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80016a6:	2309      	movs	r3, #9
 80016a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4619      	mov	r1, r3
 80016b0:	480c      	ldr	r0, [pc, #48]	@ (80016e4 <HAL_I2C_MspInit+0x130>)
 80016b2:	f001 fe07 	bl	80032c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <HAL_I2C_MspInit+0x12c>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	4a08      	ldr	r2, [pc, #32]	@ (80016e0 <HAL_I2C_MspInit+0x12c>)
 80016c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_I2C_MspInit+0x12c>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
}
 80016d2:	bf00      	nop
 80016d4:	3730      	adds	r7, #48	@ 0x30
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40005400 	.word	0x40005400
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020400 	.word	0x40020400
 80016e8:	40005c00 	.word	0x40005c00
 80016ec:	40020000 	.word	0x40020000

080016f0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	@ 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a19      	ldr	r2, [pc, #100]	@ (8001774 <HAL_SPI_MspInit+0x84>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d12b      	bne.n	800176a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	4b18      	ldr	r3, [pc, #96]	@ (8001778 <HAL_SPI_MspInit+0x88>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	4a17      	ldr	r2, [pc, #92]	@ (8001778 <HAL_SPI_MspInit+0x88>)
 800171c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001720:	6413      	str	r3, [r2, #64]	@ 0x40
 8001722:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <HAL_SPI_MspInit+0x88>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001726:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <HAL_SPI_MspInit+0x88>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a10      	ldr	r2, [pc, #64]	@ (8001778 <HAL_SPI_MspInit+0x88>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <HAL_SPI_MspInit+0x88>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800174a:	2338      	movs	r3, #56	@ 0x38
 800174c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800175a:	2306      	movs	r3, #6
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	4805      	ldr	r0, [pc, #20]	@ (800177c <HAL_SPI_MspInit+0x8c>)
 8001766:	f001 fdad 	bl	80032c4 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 800176a:	bf00      	nop
 800176c:	3728      	adds	r7, #40	@ 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40003c00 	.word	0x40003c00
 8001778:	40023800 	.word	0x40023800
 800177c:	40020400 	.word	0x40020400

08001780 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001790:	d116      	bne.n	80017c0 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b1a      	ldr	r3, [pc, #104]	@ (8001800 <HAL_TIM_Base_MspInit+0x80>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	4a19      	ldr	r2, [pc, #100]	@ (8001800 <HAL_TIM_Base_MspInit+0x80>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a2:	4b17      	ldr	r3, [pc, #92]	@ (8001800 <HAL_TIM_Base_MspInit+0x80>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2100      	movs	r1, #0
 80017b2:	201c      	movs	r0, #28
 80017b4:	f001 fd4f 	bl	8003256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017b8:	201c      	movs	r0, #28
 80017ba:	f001 fd68 	bl	800328e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017be:	e01a      	b.n	80017f6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001804 <HAL_TIM_Base_MspInit+0x84>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d115      	bne.n	80017f6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <HAL_TIM_Base_MspInit+0x80>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001800 <HAL_TIM_Base_MspInit+0x80>)
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <HAL_TIM_Base_MspInit+0x80>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2100      	movs	r1, #0
 80017ea:	201d      	movs	r0, #29
 80017ec:	f001 fd33 	bl	8003256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017f0:	201d      	movs	r0, #29
 80017f2:	f001 fd4c 	bl	800328e <HAL_NVIC_EnableIRQ>
}
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	40000400 	.word	0x40000400

08001808 <HAL_IRDA_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hirda: IRDA handle pointer
  * @retval None
  */
void HAL_IRDA_MspInit(IRDA_HandleTypeDef* hirda)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08c      	sub	sp, #48	@ 0x30
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  if(hirda->Instance==USART1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a32      	ldr	r2, [pc, #200]	@ (80018f0 <HAL_IRDA_MspInit+0xe8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d12d      	bne.n	8001886 <HAL_IRDA_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
 800182e:	4b31      	ldr	r3, [pc, #196]	@ (80018f4 <HAL_IRDA_MspInit+0xec>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	4a30      	ldr	r2, [pc, #192]	@ (80018f4 <HAL_IRDA_MspInit+0xec>)
 8001834:	f043 0310 	orr.w	r3, r3, #16
 8001838:	6453      	str	r3, [r2, #68]	@ 0x44
 800183a:	4b2e      	ldr	r3, [pc, #184]	@ (80018f4 <HAL_IRDA_MspInit+0xec>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	61bb      	str	r3, [r7, #24]
 8001844:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	4b2a      	ldr	r3, [pc, #168]	@ (80018f4 <HAL_IRDA_MspInit+0xec>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	4a29      	ldr	r2, [pc, #164]	@ (80018f4 <HAL_IRDA_MspInit+0xec>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6313      	str	r3, [r2, #48]	@ 0x30
 8001856:	4b27      	ldr	r3, [pc, #156]	@ (80018f4 <HAL_IRDA_MspInit+0xec>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = UART_MCU_TO_DEBUG_RX_Pin|UART_MCU_TO_DEBUG_TX_Pin;
 8001862:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8001866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001870:	2303      	movs	r3, #3
 8001872:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001874:	2307      	movs	r3, #7
 8001876:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	4619      	mov	r1, r3
 800187e:	481e      	ldr	r0, [pc, #120]	@ (80018f8 <HAL_IRDA_MspInit+0xf0>)
 8001880:	f001 fd20 	bl	80032c4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001884:	e030      	b.n	80018e8 <HAL_IRDA_MspInit+0xe0>
  else if(hirda->Instance==USART6)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a1c      	ldr	r2, [pc, #112]	@ (80018fc <HAL_IRDA_MspInit+0xf4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d12b      	bne.n	80018e8 <HAL_IRDA_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001890:	2300      	movs	r3, #0
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	4b17      	ldr	r3, [pc, #92]	@ (80018f4 <HAL_IRDA_MspInit+0xec>)
 8001896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001898:	4a16      	ldr	r2, [pc, #88]	@ (80018f4 <HAL_IRDA_MspInit+0xec>)
 800189a:	f043 0320 	orr.w	r3, r3, #32
 800189e:	6453      	str	r3, [r2, #68]	@ 0x44
 80018a0:	4b14      	ldr	r3, [pc, #80]	@ (80018f4 <HAL_IRDA_MspInit+0xec>)
 80018a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a4:	f003 0320 	and.w	r3, r3, #32
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <HAL_IRDA_MspInit+0xec>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b4:	4a0f      	ldr	r2, [pc, #60]	@ (80018f4 <HAL_IRDA_MspInit+0xec>)
 80018b6:	f043 0304 	orr.w	r3, r3, #4
 80018ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80018bc:	4b0d      	ldr	r3, [pc, #52]	@ (80018f4 <HAL_IRDA_MspInit+0xec>)
 80018be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018c8:	23c0      	movs	r3, #192	@ 0xc0
 80018ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80018d8:	2308      	movs	r3, #8
 80018da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	4619      	mov	r1, r3
 80018e2:	4807      	ldr	r0, [pc, #28]	@ (8001900 <HAL_IRDA_MspInit+0xf8>)
 80018e4:	f001 fcee 	bl	80032c4 <HAL_GPIO_Init>
}
 80018e8:	bf00      	nop
 80018ea:	3730      	adds	r7, #48	@ 0x30
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40011000 	.word	0x40011000
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020000 	.word	0x40020000
 80018fc:	40011400 	.word	0x40011400
 8001900:	40020800 	.word	0x40020800

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <NMI_Handler+0x4>

0800190c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <HardFault_Handler+0x4>

08001914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <MemManage_Handler+0x4>

0800191c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <BusFault_Handler+0x4>

08001924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <UsageFault_Handler+0x4>

0800192c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195a:	f000 fa4b 	bl	8001df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}

08001962 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CHARGER_DETECT_Pin);
 8001966:	2008      	movs	r0, #8
 8001968:	f001 fe74 	bl	8003654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMERGENCY_STOP_Pin);
 8001974:	2010      	movs	r0, #16
 8001976:	f001 fe6d 	bl	8003654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}

0800197e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IGNITION_Pin);
 8001982:	2020      	movs	r0, #32
 8001984:	f001 fe66 	bl	8003654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001990:	4802      	ldr	r0, [pc, #8]	@ (800199c <TIM2_IRQHandler+0x10>)
 8001992:	f003 f8ae 	bl	8004af2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000238 	.word	0x20000238

080019a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019a4:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <TIM3_IRQHandler+0x10>)
 80019a6:	f003 f8a4 	bl	8004af2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000280 	.word	0x20000280

080019b4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <CAN2_RX0_IRQHandler+0x10>)
 80019ba:	f001 f942 	bl	8002c42 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000110 	.word	0x20000110

080019c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	e00a      	b.n	80019f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019da:	f3af 8000 	nop.w
 80019de:	4601      	mov	r1, r0
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	60ba      	str	r2, [r7, #8]
 80019e6:	b2ca      	uxtb	r2, r1
 80019e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	dbf0      	blt.n	80019da <_read+0x12>
  }

  return len;
 80019f8:	687b      	ldr	r3, [r7, #4]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	e009      	b.n	8001a28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	60ba      	str	r2, [r7, #8]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fcf2 	bl	8001406 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dbf1      	blt.n	8001a14 <_write+0x12>
  }
  return len;
 8001a30:	687b      	ldr	r3, [r7, #4]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_close>:

int _close(int file)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a62:	605a      	str	r2, [r3, #4]
  return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <_isatty>:

int _isatty(int file)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aac:	4a14      	ldr	r2, [pc, #80]	@ (8001b00 <_sbrk+0x5c>)
 8001aae:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <_sbrk+0x60>)
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab8:	4b13      	ldr	r3, [pc, #76]	@ (8001b08 <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d102      	bne.n	8001ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <_sbrk+0x64>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	@ (8001b0c <_sbrk+0x68>)
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac6:	4b10      	ldr	r3, [pc, #64]	@ (8001b08 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d207      	bcs.n	8001ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad4:	f003 fe22 	bl	800571c <__errno>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	220c      	movs	r2, #12
 8001adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	e009      	b.n	8001af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	@ (8001b08 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aea:	4b07      	ldr	r3, [pc, #28]	@ (8001b08 <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	4a05      	ldr	r2, [pc, #20]	@ (8001b08 <_sbrk+0x64>)
 8001af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af6:	68fb      	ldr	r3, [r7, #12]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20040000 	.word	0x20040000
 8001b04:	00000400 	.word	0x00000400
 8001b08:	20000344 	.word	0x20000344
 8001b0c:	20000498 	.word	0x20000498

08001b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <SystemInit+0x20>)
 8001b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b1a:	4a05      	ldr	r2, [pc, #20]	@ (8001b30 <SystemInit+0x20>)
 8001b1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <ask_for_voltages>:
#include "to_slave.h"

extern CAN_HandleTypeDef hcan2;

void ask_for_voltages()
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0

	uint8_t message[2] = {0};
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	80bb      	strh	r3, [r7, #4]

	message[0] = VOLTAGE_INFO;
 8001b3e:	23a1      	movs	r3, #161	@ 0xa1
 8001b40:	713b      	strb	r3, [r7, #4]

	CAN_set_std_header(SLAVE_HEADER, SLAVE_BYTES_NUM);
 8001b42:	2102      	movs	r1, #2
 8001b44:	f240 1011 	movw	r0, #273	@ 0x111
 8001b48:	f7fe fd62 	bl	8000610 <CAN_set_std_header>

	CAN1_send_mess(&hcan2, message);
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4803      	ldr	r0, [pc, #12]	@ (8001b60 <ask_for_voltages+0x2c>)
 8001b52:	f7fe fd43 	bl	80005dc <CAN1_send_mess>

}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000110 	.word	0x20000110

08001b64 <auto_ask_for_voltages>:

void auto_ask_for_voltages(uint8_t delay_10_ms)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]

	uint8_t message[2] = {0};
 8001b6e:	2300      	movs	r3, #0
 8001b70:	81bb      	strh	r3, [r7, #12]

	message[0] = AUTO_VOLTAGE_INFO;
 8001b72:	23aa      	movs	r3, #170	@ 0xaa
 8001b74:	733b      	strb	r3, [r7, #12]
	message[1] = delay_10_ms;
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	737b      	strb	r3, [r7, #13]

	CAN_set_std_header(SLAVE_HEADER, SLAVE_BYTES_NUM);
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	f240 1011 	movw	r0, #273	@ 0x111
 8001b80:	f7fe fd46 	bl	8000610 <CAN_set_std_header>

	CAN1_send_mess(&hcan2, message);
 8001b84:	f107 030c 	add.w	r3, r7, #12
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4803      	ldr	r0, [pc, #12]	@ (8001b98 <auto_ask_for_voltages+0x34>)
 8001b8c:	f7fe fd26 	bl	80005dc <CAN1_send_mess>

}
 8001b90:	bf00      	nop
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000110 	.word	0x20000110

08001b9c <stop_auto_ask_for_voltages>:

void stop_auto_ask_for_voltages()
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0

	uint8_t message[2] = {0};
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	80bb      	strh	r3, [r7, #4]

	message[0] = STOP_VOLTAGE_INFO;
 8001ba6:	23a0      	movs	r3, #160	@ 0xa0
 8001ba8:	713b      	strb	r3, [r7, #4]

	CAN_set_std_header(SLAVE_HEADER, SLAVE_BYTES_NUM);
 8001baa:	2102      	movs	r1, #2
 8001bac:	f240 1011 	movw	r0, #273	@ 0x111
 8001bb0:	f7fe fd2e 	bl	8000610 <CAN_set_std_header>

	CAN1_send_mess(&hcan2, message);
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4803      	ldr	r0, [pc, #12]	@ (8001bc8 <stop_auto_ask_for_voltages+0x2c>)
 8001bba:	f7fe fd0f 	bl	80005dc <CAN1_send_mess>

}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000110 	.word	0x20000110

08001bcc <auto_ask_for_temperatures>:
	CAN1_send_mess(&hcan2, message);

}

void auto_ask_for_temperatures(uint8_t delay_10_ms)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]

	uint8_t message[2] = {0};
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	81bb      	strh	r3, [r7, #12]

	message[0] = AUTO_TEMP_INFO;
 8001bda:	2366      	movs	r3, #102	@ 0x66
 8001bdc:	733b      	strb	r3, [r7, #12]
	message[1] = delay_10_ms;
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	737b      	strb	r3, [r7, #13]

	CAN_set_std_header(SLAVE_HEADER, SLAVE_BYTES_NUM);
 8001be2:	2102      	movs	r1, #2
 8001be4:	f240 1011 	movw	r0, #273	@ 0x111
 8001be8:	f7fe fd12 	bl	8000610 <CAN_set_std_header>

	CAN1_send_mess(&hcan2, message);
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4803      	ldr	r0, [pc, #12]	@ (8001c00 <auto_ask_for_temperatures+0x34>)
 8001bf4:	f7fe fcf2 	bl	80005dc <CAN1_send_mess>

}
 8001bf8:	bf00      	nop
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000110 	.word	0x20000110

08001c04 <stop_auto_ask_for_temperatures>:

void stop_auto_ask_for_temperatures()
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0

	uint8_t message[2] = {0};
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	80bb      	strh	r3, [r7, #4]

	message[0] = STOP_TEMP_INFO;
 8001c0e:	2360      	movs	r3, #96	@ 0x60
 8001c10:	713b      	strb	r3, [r7, #4]

	CAN_set_std_header(SLAVE_HEADER, SLAVE_BYTES_NUM);
 8001c12:	2102      	movs	r1, #2
 8001c14:	f240 1011 	movw	r0, #273	@ 0x111
 8001c18:	f7fe fcfa 	bl	8000610 <CAN_set_std_header>

	CAN1_send_mess(&hcan2, message);
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4803      	ldr	r0, [pc, #12]	@ (8001c30 <stop_auto_ask_for_temperatures+0x2c>)
 8001c22:	f7fe fcdb 	bl	80005dc <CAN1_send_mess>

}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000110 	.word	0x20000110

08001c34 <auto_ask_for_balancing_info>:
	CAN1_send_mess(&hcan2, message);

}

void auto_ask_for_balancing_info(uint8_t delay_10_ms)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]

	uint8_t message[2] = {0};
 8001c3e:	2300      	movs	r3, #0
 8001c40:	81bb      	strh	r3, [r7, #12]

	message[0] = AUTO_BALANCING_INFO;
 8001c42:	23bb      	movs	r3, #187	@ 0xbb
 8001c44:	733b      	strb	r3, [r7, #12]
	message[1] = delay_10_ms;
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	737b      	strb	r3, [r7, #13]

	CAN_set_std_header(SLAVE_HEADER, SLAVE_BYTES_NUM);
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	f240 1011 	movw	r0, #273	@ 0x111
 8001c50:	f7fe fcde 	bl	8000610 <CAN_set_std_header>

	CAN1_send_mess(&hcan2, message);
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4803      	ldr	r0, [pc, #12]	@ (8001c68 <auto_ask_for_balancing_info+0x34>)
 8001c5c:	f7fe fcbe 	bl	80005dc <CAN1_send_mess>

}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000110 	.word	0x20000110

08001c6c <stop_auto_ask_for_balancing_info>:

void stop_auto_ask_for_balancing_info()
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0

	uint8_t message[2] = {0};
 8001c72:	2300      	movs	r3, #0
 8001c74:	80bb      	strh	r3, [r7, #4]

	message[0] = STOP_BALANCING_INFO;
 8001c76:	23b0      	movs	r3, #176	@ 0xb0
 8001c78:	713b      	strb	r3, [r7, #4]

	CAN_set_std_header(SLAVE_HEADER, SLAVE_BYTES_NUM);
 8001c7a:	2102      	movs	r1, #2
 8001c7c:	f240 1011 	movw	r0, #273	@ 0x111
 8001c80:	f7fe fcc6 	bl	8000610 <CAN_set_std_header>

	CAN1_send_mess(&hcan2, message);
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	4619      	mov	r1, r3
 8001c88:	4803      	ldr	r0, [pc, #12]	@ (8001c98 <stop_auto_ask_for_balancing_info+0x2c>)
 8001c8a:	f7fe fca7 	bl	80005dc <CAN1_send_mess>

}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000110 	.word	0x20000110

08001c9c <start_balancing>:

void start_balancing()

{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
	uint8_t message[2] = {0};
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	80bb      	strh	r3, [r7, #4]

	message[0] = START_BALANCING;
 8001ca6:	23bf      	movs	r3, #191	@ 0xbf
 8001ca8:	713b      	strb	r3, [r7, #4]

	CAN_set_std_header(SLAVE_HEADER, SLAVE_BYTES_NUM);
 8001caa:	2102      	movs	r1, #2
 8001cac:	f240 1011 	movw	r0, #273	@ 0x111
 8001cb0:	f7fe fcae 	bl	8000610 <CAN_set_std_header>

	CAN1_send_mess(&hcan2, message);
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4803      	ldr	r0, [pc, #12]	@ (8001cc8 <start_balancing+0x2c>)
 8001cba:	f7fe fc8f 	bl	80005dc <CAN1_send_mess>

}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000110 	.word	0x20000110

08001ccc <stop_balancing>:

void stop_balancing()

{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
	uint8_t message[2] = {0};
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	80bb      	strh	r3, [r7, #4]

	message[0] = STOP_BALANCING;
 8001cd6:	23ba      	movs	r3, #186	@ 0xba
 8001cd8:	713b      	strb	r3, [r7, #4]

	CAN_set_std_header(SLAVE_HEADER, SLAVE_BYTES_NUM);
 8001cda:	2102      	movs	r1, #2
 8001cdc:	f240 1011 	movw	r0, #273	@ 0x111
 8001ce0:	f7fe fc96 	bl	8000610 <CAN_set_std_header>

	CAN1_send_mess(&hcan2, message);
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4803      	ldr	r0, [pc, #12]	@ (8001cf8 <stop_balancing+0x2c>)
 8001cea:	f7fe fc77 	bl	80005dc <CAN1_send_mess>

}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000110 	.word	0x20000110

08001cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001cfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d00:	f7ff ff06 	bl	8001b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d04:	480c      	ldr	r0, [pc, #48]	@ (8001d38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d06:	490d      	ldr	r1, [pc, #52]	@ (8001d3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d08:	4a0d      	ldr	r2, [pc, #52]	@ (8001d40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d0c:	e002      	b.n	8001d14 <LoopCopyDataInit>

08001d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d12:	3304      	adds	r3, #4

08001d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d18:	d3f9      	bcc.n	8001d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d20:	e001      	b.n	8001d26 <LoopFillZerobss>

08001d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d24:	3204      	adds	r2, #4

08001d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d28:	d3fb      	bcc.n	8001d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d2a:	f003 fcfd 	bl	8005728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d2e:	f7fe ff2f 	bl	8000b90 <main>
  bx  lr    
 8001d32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d34:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d3c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001d40:	080062a8 	.word	0x080062a8
  ldr r2, =_sbss
 8001d44:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001d48:	20000498 	.word	0x20000498

08001d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d4c:	e7fe      	b.n	8001d4c <ADC_IRQHandler>
	...

08001d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d54:	4b0e      	ldr	r3, [pc, #56]	@ (8001d90 <HAL_Init+0x40>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0d      	ldr	r2, [pc, #52]	@ (8001d90 <HAL_Init+0x40>)
 8001d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d60:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <HAL_Init+0x40>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0a      	ldr	r2, [pc, #40]	@ (8001d90 <HAL_Init+0x40>)
 8001d66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d6c:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <HAL_Init+0x40>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a07      	ldr	r2, [pc, #28]	@ (8001d90 <HAL_Init+0x40>)
 8001d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d78:	2003      	movs	r0, #3
 8001d7a:	f001 fa61 	bl	8003240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7e:	200f      	movs	r0, #15
 8001d80:	f000 f808 	bl	8001d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d84:	f7ff fb4c 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023c00 	.word	0x40023c00

08001d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d9c:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <HAL_InitTick+0x54>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b12      	ldr	r3, [pc, #72]	@ (8001dec <HAL_InitTick+0x58>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f001 fa79 	bl	80032aa <HAL_SYSTICK_Config>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00e      	b.n	8001de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b0f      	cmp	r3, #15
 8001dc6:	d80a      	bhi.n	8001dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f001 fa41 	bl	8003256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd4:	4a06      	ldr	r2, [pc, #24]	@ (8001df0 <HAL_InitTick+0x5c>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e000      	b.n	8001de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000000 	.word	0x20000000
 8001dec:	20000008 	.word	0x20000008
 8001df0:	20000004 	.word	0x20000004

08001df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df8:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_IncTick+0x20>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <HAL_IncTick+0x24>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <HAL_IncTick+0x24>)
 8001e06:	6013      	str	r3, [r2, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000008 	.word	0x20000008
 8001e18:	20000348 	.word	0x20000348

08001e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e20:	4b03      	ldr	r3, [pc, #12]	@ (8001e30 <HAL_GetTick+0x14>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000348 	.word	0x20000348

08001e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e3c:	f7ff ffee 	bl	8001e1c <HAL_GetTick>
 8001e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4c:	d005      	beq.n	8001e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <HAL_Delay+0x44>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e5a:	bf00      	nop
 8001e5c:	f7ff ffde 	bl	8001e1c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d8f7      	bhi.n	8001e5c <HAL_Delay+0x28>
  {
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000008 	.word	0x20000008

08001e7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e033      	b.n	8001efa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d109      	bne.n	8001eae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fae8 	bl	8001470 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d118      	bne.n	8001eec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ec2:	f023 0302 	bic.w	r3, r3, #2
 8001ec6:	f043 0202 	orr.w	r2, r3, #2
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f93a 	bl	8002148 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	f023 0303 	bic.w	r3, r3, #3
 8001ee2:	f043 0201 	orr.w	r2, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001eea:	e001      	b.n	8001ef0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x1c>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e105      	b.n	800212c <HAL_ADC_ConfigChannel+0x228>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b09      	cmp	r3, #9
 8001f2e:	d925      	bls.n	8001f7c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68d9      	ldr	r1, [r3, #12]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	3b1e      	subs	r3, #30
 8001f46:	2207      	movs	r2, #7
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43da      	mvns	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	400a      	ands	r2, r1
 8001f54:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68d9      	ldr	r1, [r3, #12]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	4618      	mov	r0, r3
 8001f68:	4603      	mov	r3, r0
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4403      	add	r3, r0
 8001f6e:	3b1e      	subs	r3, #30
 8001f70:	409a      	lsls	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	e022      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6919      	ldr	r1, [r3, #16]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	2207      	movs	r2, #7
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43da      	mvns	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	400a      	ands	r2, r1
 8001f9e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6919      	ldr	r1, [r3, #16]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4403      	add	r3, r0
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d824      	bhi.n	8002014 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b05      	subs	r3, #5
 8001fdc:	221f      	movs	r2, #31
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	400a      	ands	r2, r1
 8001fea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	3b05      	subs	r3, #5
 8002006:	fa00 f203 	lsl.w	r2, r0, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	635a      	str	r2, [r3, #52]	@ 0x34
 8002012:	e04c      	b.n	80020ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b0c      	cmp	r3, #12
 800201a:	d824      	bhi.n	8002066 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	3b23      	subs	r3, #35	@ 0x23
 800202e:	221f      	movs	r2, #31
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43da      	mvns	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	400a      	ands	r2, r1
 800203c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	b29b      	uxth	r3, r3
 800204a:	4618      	mov	r0, r3
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	3b23      	subs	r3, #35	@ 0x23
 8002058:	fa00 f203 	lsl.w	r2, r0, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	631a      	str	r2, [r3, #48]	@ 0x30
 8002064:	e023      	b.n	80020ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	3b41      	subs	r3, #65	@ 0x41
 8002078:	221f      	movs	r2, #31
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43da      	mvns	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	400a      	ands	r2, r1
 8002086:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	4618      	mov	r0, r3
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	3b41      	subs	r3, #65	@ 0x41
 80020a2:	fa00 f203 	lsl.w	r2, r0, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ae:	4b22      	ldr	r3, [pc, #136]	@ (8002138 <HAL_ADC_ConfigChannel+0x234>)
 80020b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a21      	ldr	r2, [pc, #132]	@ (800213c <HAL_ADC_ConfigChannel+0x238>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d109      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x1cc>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b12      	cmp	r3, #18
 80020c2:	d105      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a19      	ldr	r2, [pc, #100]	@ (800213c <HAL_ADC_ConfigChannel+0x238>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d123      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x21e>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b10      	cmp	r3, #16
 80020e0:	d003      	beq.n	80020ea <HAL_ADC_ConfigChannel+0x1e6>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b11      	cmp	r3, #17
 80020e8:	d11b      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b10      	cmp	r3, #16
 80020fc:	d111      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020fe:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <HAL_ADC_ConfigChannel+0x23c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a10      	ldr	r2, [pc, #64]	@ (8002144 <HAL_ADC_ConfigChannel+0x240>)
 8002104:	fba2 2303 	umull	r2, r3, r2, r3
 8002108:	0c9a      	lsrs	r2, r3, #18
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002114:	e002      	b.n	800211c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	3b01      	subs	r3, #1
 800211a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f9      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	40012300 	.word	0x40012300
 800213c:	40012000 	.word	0x40012000
 8002140:	20000000 	.word	0x20000000
 8002144:	431bde83 	.word	0x431bde83

08002148 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002150:	4b79      	ldr	r3, [pc, #484]	@ (8002338 <ADC_Init+0x1f0>)
 8002152:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	431a      	orrs	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800217c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6859      	ldr	r1, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	021a      	lsls	r2, r3, #8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80021a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6859      	ldr	r1, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6899      	ldr	r1, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021da:	4a58      	ldr	r2, [pc, #352]	@ (800233c <ADC_Init+0x1f4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d022      	beq.n	8002226 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6899      	ldr	r1, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002210:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6899      	ldr	r1, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	e00f      	b.n	8002246 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002234:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002244:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0202 	bic.w	r2, r2, #2
 8002254:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6899      	ldr	r1, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7e1b      	ldrb	r3, [r3, #24]
 8002260:	005a      	lsls	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d01b      	beq.n	80022ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002282:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002292:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6859      	ldr	r1, [r3, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229e:	3b01      	subs	r3, #1
 80022a0:	035a      	lsls	r2, r3, #13
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	e007      	b.n	80022bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80022ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	051a      	lsls	r2, r3, #20
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80022f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6899      	ldr	r1, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022fe:	025a      	lsls	r2, r3, #9
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002316:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6899      	ldr	r1, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	029a      	lsls	r2, r3, #10
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	609a      	str	r2, [r3, #8]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	40012300 	.word	0x40012300
 800233c:	0f000001 	.word	0x0f000001

08002340 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e0ed      	b.n	800252e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d102      	bne.n	8002364 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff f8ca 	bl	80014f8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002374:	f7ff fd52 	bl	8001e1c <HAL_GetTick>
 8002378:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800237a:	e012      	b.n	80023a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800237c:	f7ff fd4e 	bl	8001e1c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b0a      	cmp	r3, #10
 8002388:	d90b      	bls.n	80023a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2205      	movs	r2, #5
 800239a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e0c5      	b.n	800252e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0e5      	beq.n	800237c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0202 	bic.w	r2, r2, #2
 80023be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c0:	f7ff fd2c 	bl	8001e1c <HAL_GetTick>
 80023c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023c6:	e012      	b.n	80023ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023c8:	f7ff fd28 	bl	8001e1c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b0a      	cmp	r3, #10
 80023d4:	d90b      	bls.n	80023ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2205      	movs	r2, #5
 80023e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e09f      	b.n	800252e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1e5      	bne.n	80023c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7e1b      	ldrb	r3, [r3, #24]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d108      	bne.n	8002416 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	e007      	b.n	8002426 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002424:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7e5b      	ldrb	r3, [r3, #25]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d108      	bne.n	8002440 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e007      	b.n	8002450 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800244e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7e9b      	ldrb	r3, [r3, #26]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d108      	bne.n	800246a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0220 	orr.w	r2, r2, #32
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e007      	b.n	800247a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0220 	bic.w	r2, r2, #32
 8002478:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	7edb      	ldrb	r3, [r3, #27]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d108      	bne.n	8002494 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0210 	bic.w	r2, r2, #16
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e007      	b.n	80024a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0210 	orr.w	r2, r2, #16
 80024a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	7f1b      	ldrb	r3, [r3, #28]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d108      	bne.n	80024be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0208 	orr.w	r2, r2, #8
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e007      	b.n	80024ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0208 	bic.w	r2, r2, #8
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	7f5b      	ldrb	r3, [r3, #29]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d108      	bne.n	80024e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0204 	orr.w	r2, r2, #4
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	e007      	b.n	80024f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0204 	bic.w	r2, r2, #4
 80024f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	ea42 0103 	orr.w	r1, r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	1e5a      	subs	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800254e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002550:	7cfb      	ldrb	r3, [r7, #19]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d003      	beq.n	800255e <HAL_CAN_ConfigFilter+0x26>
 8002556:	7cfb      	ldrb	r3, [r7, #19]
 8002558:	2b02      	cmp	r3, #2
 800255a:	f040 80be 	bne.w	80026da <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800255e:	4b65      	ldr	r3, [pc, #404]	@ (80026f4 <HAL_CAN_ConfigFilter+0x1bc>)
 8002560:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002568:	f043 0201 	orr.w	r2, r3, #1
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002578:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258c:	021b      	lsls	r3, r3, #8
 800258e:	431a      	orrs	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f003 031f 	and.w	r3, r3, #31
 800259e:	2201      	movs	r2, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	401a      	ands	r2, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d123      	bne.n	8002608 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	401a      	ands	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025e2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	3248      	adds	r2, #72	@ 0x48
 80025e8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025fe:	6979      	ldr	r1, [r7, #20]
 8002600:	3348      	adds	r3, #72	@ 0x48
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	440b      	add	r3, r1
 8002606:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d122      	bne.n	8002656 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	431a      	orrs	r2, r3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002630:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	3248      	adds	r2, #72	@ 0x48
 8002636:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800264a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800264c:	6979      	ldr	r1, [r7, #20]
 800264e:	3348      	adds	r3, #72	@ 0x48
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	440b      	add	r3, r1
 8002654:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	43db      	mvns	r3, r3
 8002668:	401a      	ands	r2, r3
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002670:	e007      	b.n	8002682 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	431a      	orrs	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	43db      	mvns	r3, r3
 8002694:	401a      	ands	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800269c:	e007      	b.n	80026ae <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d107      	bne.n	80026c6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	431a      	orrs	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80026cc:	f023 0201 	bic.w	r2, r3, #1
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e006      	b.n	80026e8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026de:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
  }
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	371c      	adds	r7, #28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	40006400 	.word	0x40006400

080026f8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	d12e      	bne.n	800276a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0201 	bic.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002724:	f7ff fb7a 	bl	8001e1c <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800272a:	e012      	b.n	8002752 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800272c:	f7ff fb76 	bl	8001e1c <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b0a      	cmp	r3, #10
 8002738:	d90b      	bls.n	8002752 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2205      	movs	r2, #5
 800274a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e012      	b.n	8002778 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1e5      	bne.n	800272c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	e006      	b.n	8002778 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
  }
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d133      	bne.n	80027fc <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027a4:	f7ff fb3a 	bl	8001e1c <HAL_GetTick>
 80027a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027aa:	e012      	b.n	80027d2 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027ac:	f7ff fb36 	bl	8001e1c <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b0a      	cmp	r3, #10
 80027b8:	d90b      	bls.n	80027d2 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2205      	movs	r2, #5
 80027ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e01b      	b.n	800280a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0e5      	beq.n	80027ac <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0202 	bic.w	r2, r2, #2
 80027ee:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	e006      	b.n	800280a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
  }
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002812:	b480      	push	{r7}
 8002814:	b089      	sub	sp, #36	@ 0x24
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002826:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002830:	7ffb      	ldrb	r3, [r7, #31]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d003      	beq.n	800283e <HAL_CAN_AddTxMessage+0x2c>
 8002836:	7ffb      	ldrb	r3, [r7, #31]
 8002838:	2b02      	cmp	r3, #2
 800283a:	f040 80ad 	bne.w	8002998 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10a      	bne.n	800285e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800284e:	2b00      	cmp	r3, #0
 8002850:	d105      	bne.n	800285e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8095 	beq.w	8002988 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	0e1b      	lsrs	r3, r3, #24
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002868:	2201      	movs	r2, #1
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	409a      	lsls	r2, r3
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10d      	bne.n	8002896 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002884:	68f9      	ldr	r1, [r7, #12]
 8002886:	6809      	ldr	r1, [r1, #0]
 8002888:	431a      	orrs	r2, r3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	3318      	adds	r3, #24
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	440b      	add	r3, r1
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	e00f      	b.n	80028b6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028a0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028a6:	68f9      	ldr	r1, [r7, #12]
 80028a8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80028aa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	3318      	adds	r3, #24
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	440b      	add	r3, r1
 80028b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6819      	ldr	r1, [r3, #0]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	691a      	ldr	r2, [r3, #16]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	3318      	adds	r3, #24
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	440b      	add	r3, r1
 80028c6:	3304      	adds	r3, #4
 80028c8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	7d1b      	ldrb	r3, [r3, #20]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d111      	bne.n	80028f6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	3318      	adds	r3, #24
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	4413      	add	r3, r2
 80028de:	3304      	adds	r3, #4
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	6811      	ldr	r1, [r2, #0]
 80028e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	3318      	adds	r3, #24
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	440b      	add	r3, r1
 80028f2:	3304      	adds	r3, #4
 80028f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3307      	adds	r3, #7
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	061a      	lsls	r2, r3, #24
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3306      	adds	r3, #6
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	041b      	lsls	r3, r3, #16
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3305      	adds	r3, #5
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	4313      	orrs	r3, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	3204      	adds	r2, #4
 8002916:	7812      	ldrb	r2, [r2, #0]
 8002918:	4610      	mov	r0, r2
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	6811      	ldr	r1, [r2, #0]
 800291e:	ea43 0200 	orr.w	r2, r3, r0
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	440b      	add	r3, r1
 8002928:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800292c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3303      	adds	r3, #3
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	061a      	lsls	r2, r3, #24
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3302      	adds	r3, #2
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	041b      	lsls	r3, r3, #16
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3301      	adds	r3, #1
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	4313      	orrs	r3, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	7812      	ldrb	r2, [r2, #0]
 800294e:	4610      	mov	r0, r2
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	6811      	ldr	r1, [r2, #0]
 8002954:	ea43 0200 	orr.w	r2, r3, r0
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	440b      	add	r3, r1
 800295e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002962:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	3318      	adds	r3, #24
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	4413      	add	r3, r2
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	6811      	ldr	r1, [r2, #0]
 8002976:	f043 0201 	orr.w	r2, r3, #1
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	3318      	adds	r3, #24
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	440b      	add	r3, r1
 8002982:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	e00e      	b.n	80029a6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e006      	b.n	80029a6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
  }
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3724      	adds	r7, #36	@ 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80029b2:	b480      	push	{r7}
 80029b4:	b087      	sub	sp, #28
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80029c8:	7dfb      	ldrb	r3, [r7, #23]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d003      	beq.n	80029d6 <HAL_CAN_GetRxMessage+0x24>
 80029ce:	7dfb      	ldrb	r3, [r7, #23]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	f040 8103 	bne.w	8002bdc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10e      	bne.n	80029fa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d116      	bne.n	8002a18 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e0f7      	b.n	8002bea <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d107      	bne.n	8002a18 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0e8      	b.n	8002bea <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	331b      	adds	r3, #27
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	4413      	add	r3, r2
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0204 	and.w	r2, r3, #4
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10c      	bne.n	8002a50 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	331b      	adds	r3, #27
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	4413      	add	r3, r2
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	0d5b      	lsrs	r3, r3, #21
 8002a46:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	e00b      	b.n	8002a68 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	331b      	adds	r3, #27
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	4413      	add	r3, r2
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	08db      	lsrs	r3, r3, #3
 8002a60:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	331b      	adds	r3, #27
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	4413      	add	r3, r2
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0202 	and.w	r2, r3, #2
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	331b      	adds	r3, #27
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	4413      	add	r3, r2
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2208      	movs	r2, #8
 8002a9a:	611a      	str	r2, [r3, #16]
 8002a9c:	e00b      	b.n	8002ab6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	331b      	adds	r3, #27
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3304      	adds	r3, #4
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 020f 	and.w	r2, r3, #15
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	331b      	adds	r3, #27
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	331b      	adds	r3, #27
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	4413      	add	r3, r2
 8002ada:	3304      	adds	r3, #4
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	0c1b      	lsrs	r3, r3, #16
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	4413      	add	r3, r2
 8002b06:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0a1a      	lsrs	r2, r3, #8
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	3301      	adds	r3, #1
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	0c1a      	lsrs	r2, r3, #16
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	3302      	adds	r3, #2
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	0e1a      	lsrs	r2, r3, #24
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	3303      	adds	r3, #3
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	0a1a      	lsrs	r2, r3, #8
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	3305      	adds	r3, #5
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	0c1a      	lsrs	r2, r3, #16
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	3306      	adds	r3, #6
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	0e1a      	lsrs	r2, r3, #24
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	3307      	adds	r3, #7
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d108      	bne.n	8002bc8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0220 	orr.w	r2, r2, #32
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	e007      	b.n	8002bd8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0220 	orr.w	r2, r2, #32
 8002bd6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e006      	b.n	8002bea <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
  }
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	371c      	adds	r7, #28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c06:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d002      	beq.n	8002c14 <HAL_CAN_ActivateNotification+0x1e>
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d109      	bne.n	8002c28 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6959      	ldr	r1, [r3, #20]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e006      	b.n	8002c36 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
  }
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b08a      	sub	sp, #40	@ 0x28
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d07c      	beq.n	8002d82 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d023      	beq.n	8002cda <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2201      	movs	r2, #1
 8002c98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f983 	bl	8002fb0 <HAL_CAN_TxMailbox0CompleteCallback>
 8002caa:	e016      	b.n	8002cda <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d004      	beq.n	8002cc0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cbe:	e00c      	b.n	8002cda <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd2:	e002      	b.n	8002cda <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f989 	bl	8002fec <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d024      	beq.n	8002d2e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f963 	bl	8002fc4 <HAL_CAN_TxMailbox1CompleteCallback>
 8002cfe:	e016      	b.n	8002d2e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d004      	beq.n	8002d14 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d12:	e00c      	b.n	8002d2e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d004      	beq.n	8002d28 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d26:	e002      	b.n	8002d2e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f969 	bl	8003000 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d024      	beq.n	8002d82 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002d40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f943 	bl	8002fd8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002d52:	e016      	b.n	8002d82 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d004      	beq.n	8002d68 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d66:	e00c      	b.n	8002d82 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d7a:	e002      	b.n	8002d82 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f949 	bl	8003014 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00c      	beq.n	8002da6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d007      	beq.n	8002da6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d9c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2210      	movs	r2, #16
 8002da4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00b      	beq.n	8002dc8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d006      	beq.n	8002dc8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2208      	movs	r2, #8
 8002dc0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f930 	bl	8003028 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f003 0303 	and.w	r3, r3, #3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7fd fdd3 	bl	800098c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00c      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e00:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2210      	movs	r2, #16
 8002e08:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00b      	beq.n	8002e2c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d006      	beq.n	8002e2c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2208      	movs	r2, #8
 8002e24:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f912 	bl	8003050 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d009      	beq.n	8002e4a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f8f9 	bl	800303c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00b      	beq.n	8002e6c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d006      	beq.n	8002e6c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2210      	movs	r2, #16
 8002e64:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f8fc 	bl	8003064 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00b      	beq.n	8002e8e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d006      	beq.n	8002e8e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2208      	movs	r2, #8
 8002e86:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f8f5 	bl	8003078 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d07b      	beq.n	8002f90 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d072      	beq.n	8002f88 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	f043 0302 	orr.w	r3, r3, #2
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	f043 0304 	orr.w	r3, r3, #4
 8002ef4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d043      	beq.n	8002f88 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d03e      	beq.n	8002f88 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f10:	2b60      	cmp	r3, #96	@ 0x60
 8002f12:	d02b      	beq.n	8002f6c <HAL_CAN_IRQHandler+0x32a>
 8002f14:	2b60      	cmp	r3, #96	@ 0x60
 8002f16:	d82e      	bhi.n	8002f76 <HAL_CAN_IRQHandler+0x334>
 8002f18:	2b50      	cmp	r3, #80	@ 0x50
 8002f1a:	d022      	beq.n	8002f62 <HAL_CAN_IRQHandler+0x320>
 8002f1c:	2b50      	cmp	r3, #80	@ 0x50
 8002f1e:	d82a      	bhi.n	8002f76 <HAL_CAN_IRQHandler+0x334>
 8002f20:	2b40      	cmp	r3, #64	@ 0x40
 8002f22:	d019      	beq.n	8002f58 <HAL_CAN_IRQHandler+0x316>
 8002f24:	2b40      	cmp	r3, #64	@ 0x40
 8002f26:	d826      	bhi.n	8002f76 <HAL_CAN_IRQHandler+0x334>
 8002f28:	2b30      	cmp	r3, #48	@ 0x30
 8002f2a:	d010      	beq.n	8002f4e <HAL_CAN_IRQHandler+0x30c>
 8002f2c:	2b30      	cmp	r3, #48	@ 0x30
 8002f2e:	d822      	bhi.n	8002f76 <HAL_CAN_IRQHandler+0x334>
 8002f30:	2b10      	cmp	r3, #16
 8002f32:	d002      	beq.n	8002f3a <HAL_CAN_IRQHandler+0x2f8>
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d005      	beq.n	8002f44 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002f38:	e01d      	b.n	8002f76 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	f043 0308 	orr.w	r3, r3, #8
 8002f40:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f42:	e019      	b.n	8002f78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f46:	f043 0310 	orr.w	r3, r3, #16
 8002f4a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f4c:	e014      	b.n	8002f78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	f043 0320 	orr.w	r3, r3, #32
 8002f54:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f56:	e00f      	b.n	8002f78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f5e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f60:	e00a      	b.n	8002f78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f6a:	e005      	b.n	8002f78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f74:	e000      	b.n	8002f78 <HAL_CAN_IRQHandler+0x336>
            break;
 8002f76:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699a      	ldr	r2, [r3, #24]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002f86:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d008      	beq.n	8002fa8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f872 	bl	800308c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002fa8:	bf00      	nop
 8002faa:	3728      	adds	r7, #40	@ 0x28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <__NVIC_SetPriorityGrouping>:
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b0:	4b0c      	ldr	r3, [pc, #48]	@ (80030e4 <__NVIC_SetPriorityGrouping+0x44>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030bc:	4013      	ands	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030d2:	4a04      	ldr	r2, [pc, #16]	@ (80030e4 <__NVIC_SetPriorityGrouping+0x44>)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	60d3      	str	r3, [r2, #12]
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <__NVIC_GetPriorityGrouping>:
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030ec:	4b04      	ldr	r3, [pc, #16]	@ (8003100 <__NVIC_GetPriorityGrouping+0x18>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	f003 0307 	and.w	r3, r3, #7
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <__NVIC_EnableIRQ>:
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	2b00      	cmp	r3, #0
 8003114:	db0b      	blt.n	800312e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	f003 021f 	and.w	r2, r3, #31
 800311c:	4907      	ldr	r1, [pc, #28]	@ (800313c <__NVIC_EnableIRQ+0x38>)
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	2001      	movs	r0, #1
 8003126:	fa00 f202 	lsl.w	r2, r0, r2
 800312a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	e000e100 	.word	0xe000e100

08003140 <__NVIC_SetPriority>:
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	6039      	str	r1, [r7, #0]
 800314a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003150:	2b00      	cmp	r3, #0
 8003152:	db0a      	blt.n	800316a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	490c      	ldr	r1, [pc, #48]	@ (800318c <__NVIC_SetPriority+0x4c>)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	0112      	lsls	r2, r2, #4
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	440b      	add	r3, r1
 8003164:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003168:	e00a      	b.n	8003180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	4908      	ldr	r1, [pc, #32]	@ (8003190 <__NVIC_SetPriority+0x50>)
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	3b04      	subs	r3, #4
 8003178:	0112      	lsls	r2, r2, #4
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	440b      	add	r3, r1
 800317e:	761a      	strb	r2, [r3, #24]
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	e000e100 	.word	0xe000e100
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <NVIC_EncodePriority>:
{
 8003194:	b480      	push	{r7}
 8003196:	b089      	sub	sp, #36	@ 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f1c3 0307 	rsb	r3, r3, #7
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	bf28      	it	cs
 80031b2:	2304      	movcs	r3, #4
 80031b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d902      	bls.n	80031c4 <NVIC_EncodePriority+0x30>
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3b03      	subs	r3, #3
 80031c2:	e000      	b.n	80031c6 <NVIC_EncodePriority+0x32>
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	f04f 32ff 	mov.w	r2, #4294967295
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43da      	mvns	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	401a      	ands	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031dc:	f04f 31ff 	mov.w	r1, #4294967295
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	43d9      	mvns	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	4313      	orrs	r3, r2
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3724      	adds	r7, #36	@ 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
	...

080031fc <SysTick_Config>:
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3b01      	subs	r3, #1
 8003208:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800320c:	d301      	bcc.n	8003212 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800320e:	2301      	movs	r3, #1
 8003210:	e00f      	b.n	8003232 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003212:	4a0a      	ldr	r2, [pc, #40]	@ (800323c <SysTick_Config+0x40>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3b01      	subs	r3, #1
 8003218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800321a:	210f      	movs	r1, #15
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
 8003220:	f7ff ff8e 	bl	8003140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003224:	4b05      	ldr	r3, [pc, #20]	@ (800323c <SysTick_Config+0x40>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800322a:	4b04      	ldr	r3, [pc, #16]	@ (800323c <SysTick_Config+0x40>)
 800322c:	2207      	movs	r2, #7
 800322e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	e000e010 	.word	0xe000e010

08003240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff ff29 	bl	80030a0 <__NVIC_SetPriorityGrouping>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003256:	b580      	push	{r7, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003268:	f7ff ff3e 	bl	80030e8 <__NVIC_GetPriorityGrouping>
 800326c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	6978      	ldr	r0, [r7, #20]
 8003274:	f7ff ff8e 	bl	8003194 <NVIC_EncodePriority>
 8003278:	4602      	mov	r2, r0
 800327a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff5d 	bl	8003140 <__NVIC_SetPriority>
}
 8003286:	bf00      	nop
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ff31 	bl	8003104 <__NVIC_EnableIRQ>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ffa2 	bl	80031fc <SysTick_Config>
 80032b8:	4603      	mov	r3, r0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b089      	sub	sp, #36	@ 0x24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	e153      	b.n	8003588 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032e0:	2201      	movs	r2, #1
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	f040 8142 	bne.w	8003582 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b01      	cmp	r3, #1
 8003308:	d005      	beq.n	8003316 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003312:	2b02      	cmp	r3, #2
 8003314:	d130      	bne.n	8003378 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	2203      	movs	r2, #3
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800334c:	2201      	movs	r2, #1
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 0201 	and.w	r2, r3, #1
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	2b03      	cmp	r3, #3
 8003382:	d017      	beq.n	80033b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	2203      	movs	r2, #3
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d123      	bne.n	8003408 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	08da      	lsrs	r2, r3, #3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3208      	adds	r2, #8
 80033c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	220f      	movs	r2, #15
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	08da      	lsrs	r2, r3, #3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3208      	adds	r2, #8
 8003402:	69b9      	ldr	r1, [r7, #24]
 8003404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	2203      	movs	r2, #3
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0203 	and.w	r2, r3, #3
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 809c 	beq.w	8003582 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	4b54      	ldr	r3, [pc, #336]	@ (80035a0 <HAL_GPIO_Init+0x2dc>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003452:	4a53      	ldr	r2, [pc, #332]	@ (80035a0 <HAL_GPIO_Init+0x2dc>)
 8003454:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003458:	6453      	str	r3, [r2, #68]	@ 0x44
 800345a:	4b51      	ldr	r3, [pc, #324]	@ (80035a0 <HAL_GPIO_Init+0x2dc>)
 800345c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003466:	4a4f      	ldr	r2, [pc, #316]	@ (80035a4 <HAL_GPIO_Init+0x2e0>)
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	089b      	lsrs	r3, r3, #2
 800346c:	3302      	adds	r3, #2
 800346e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	220f      	movs	r2, #15
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4013      	ands	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a46      	ldr	r2, [pc, #280]	@ (80035a8 <HAL_GPIO_Init+0x2e4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <HAL_GPIO_Init+0x1f6>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a45      	ldr	r2, [pc, #276]	@ (80035ac <HAL_GPIO_Init+0x2e8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00d      	beq.n	80034b6 <HAL_GPIO_Init+0x1f2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a44      	ldr	r2, [pc, #272]	@ (80035b0 <HAL_GPIO_Init+0x2ec>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d007      	beq.n	80034b2 <HAL_GPIO_Init+0x1ee>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a43      	ldr	r2, [pc, #268]	@ (80035b4 <HAL_GPIO_Init+0x2f0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <HAL_GPIO_Init+0x1ea>
 80034aa:	2303      	movs	r3, #3
 80034ac:	e006      	b.n	80034bc <HAL_GPIO_Init+0x1f8>
 80034ae:	2307      	movs	r3, #7
 80034b0:	e004      	b.n	80034bc <HAL_GPIO_Init+0x1f8>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e002      	b.n	80034bc <HAL_GPIO_Init+0x1f8>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_GPIO_Init+0x1f8>
 80034ba:	2300      	movs	r3, #0
 80034bc:	69fa      	ldr	r2, [r7, #28]
 80034be:	f002 0203 	and.w	r2, r2, #3
 80034c2:	0092      	lsls	r2, r2, #2
 80034c4:	4093      	lsls	r3, r2
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034cc:	4935      	ldr	r1, [pc, #212]	@ (80035a4 <HAL_GPIO_Init+0x2e0>)
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	089b      	lsrs	r3, r3, #2
 80034d2:	3302      	adds	r3, #2
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034da:	4b37      	ldr	r3, [pc, #220]	@ (80035b8 <HAL_GPIO_Init+0x2f4>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	43db      	mvns	r3, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4013      	ands	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034fe:	4a2e      	ldr	r2, [pc, #184]	@ (80035b8 <HAL_GPIO_Init+0x2f4>)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003504:	4b2c      	ldr	r3, [pc, #176]	@ (80035b8 <HAL_GPIO_Init+0x2f4>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003528:	4a23      	ldr	r2, [pc, #140]	@ (80035b8 <HAL_GPIO_Init+0x2f4>)
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800352e:	4b22      	ldr	r3, [pc, #136]	@ (80035b8 <HAL_GPIO_Init+0x2f4>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003552:	4a19      	ldr	r2, [pc, #100]	@ (80035b8 <HAL_GPIO_Init+0x2f4>)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003558:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <HAL_GPIO_Init+0x2f4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800357c:	4a0e      	ldr	r2, [pc, #56]	@ (80035b8 <HAL_GPIO_Init+0x2f4>)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	3301      	adds	r3, #1
 8003586:	61fb      	str	r3, [r7, #28]
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	2b0f      	cmp	r3, #15
 800358c:	f67f aea8 	bls.w	80032e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	3724      	adds	r7, #36	@ 0x24
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800
 80035a4:	40013800 	.word	0x40013800
 80035a8:	40020000 	.word	0x40020000
 80035ac:	40020400 	.word	0x40020400
 80035b0:	40020800 	.word	0x40020800
 80035b4:	40020c00 	.word	0x40020c00
 80035b8:	40013c00 	.word	0x40013c00

080035bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	887b      	ldrh	r3, [r7, #2]
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	e001      	b.n	80035de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035de:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	807b      	strh	r3, [r7, #2]
 80035f8:	4613      	mov	r3, r2
 80035fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035fc:	787b      	ldrb	r3, [r7, #1]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003602:	887a      	ldrh	r2, [r7, #2]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003608:	e003      	b.n	8003612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800360a:	887b      	ldrh	r3, [r7, #2]
 800360c:	041a      	lsls	r2, r3, #16
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	619a      	str	r2, [r3, #24]
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800361e:	b480      	push	{r7}
 8003620:	b085      	sub	sp, #20
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	460b      	mov	r3, r1
 8003628:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003630:	887a      	ldrh	r2, [r7, #2]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4013      	ands	r3, r2
 8003636:	041a      	lsls	r2, r3, #16
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	43d9      	mvns	r1, r3
 800363c:	887b      	ldrh	r3, [r7, #2]
 800363e:	400b      	ands	r3, r1
 8003640:	431a      	orrs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	619a      	str	r2, [r3, #24]
}
 8003646:	bf00      	nop
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800365e:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	4013      	ands	r3, r2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d006      	beq.n	8003678 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800366a:	4a05      	ldr	r2, [pc, #20]	@ (8003680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fd fa5a 	bl	8000b2c <HAL_GPIO_EXTI_Callback>
  }
}
 8003678:	bf00      	nop
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40013c00 	.word	0x40013c00

08003684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e12b      	b.n	80038ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fd ff82 	bl	80015b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2224      	movs	r2, #36	@ 0x24
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0201 	bic.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036e8:	f000 fde0 	bl	80042ac <HAL_RCC_GetPCLK1Freq>
 80036ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4a81      	ldr	r2, [pc, #516]	@ (80038f8 <HAL_I2C_Init+0x274>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d807      	bhi.n	8003708 <HAL_I2C_Init+0x84>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4a80      	ldr	r2, [pc, #512]	@ (80038fc <HAL_I2C_Init+0x278>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	bf94      	ite	ls
 8003700:	2301      	movls	r3, #1
 8003702:	2300      	movhi	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	e006      	b.n	8003716 <HAL_I2C_Init+0x92>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a7d      	ldr	r2, [pc, #500]	@ (8003900 <HAL_I2C_Init+0x27c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	bf94      	ite	ls
 8003710:	2301      	movls	r3, #1
 8003712:	2300      	movhi	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e0e7      	b.n	80038ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4a78      	ldr	r2, [pc, #480]	@ (8003904 <HAL_I2C_Init+0x280>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	0c9b      	lsrs	r3, r3, #18
 8003728:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4a6a      	ldr	r2, [pc, #424]	@ (80038f8 <HAL_I2C_Init+0x274>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d802      	bhi.n	8003758 <HAL_I2C_Init+0xd4>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	3301      	adds	r3, #1
 8003756:	e009      	b.n	800376c <HAL_I2C_Init+0xe8>
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	4a69      	ldr	r2, [pc, #420]	@ (8003908 <HAL_I2C_Init+0x284>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	099b      	lsrs	r3, r3, #6
 800376a:	3301      	adds	r3, #1
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	430b      	orrs	r3, r1
 8003772:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800377e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	495c      	ldr	r1, [pc, #368]	@ (80038f8 <HAL_I2C_Init+0x274>)
 8003788:	428b      	cmp	r3, r1
 800378a:	d819      	bhi.n	80037c0 <HAL_I2C_Init+0x13c>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1e59      	subs	r1, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	fbb1 f3f3 	udiv	r3, r1, r3
 800379a:	1c59      	adds	r1, r3, #1
 800379c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037a0:	400b      	ands	r3, r1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <HAL_I2C_Init+0x138>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1e59      	subs	r1, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80037b4:	3301      	adds	r3, #1
 80037b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ba:	e051      	b.n	8003860 <HAL_I2C_Init+0x1dc>
 80037bc:	2304      	movs	r3, #4
 80037be:	e04f      	b.n	8003860 <HAL_I2C_Init+0x1dc>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d111      	bne.n	80037ec <HAL_I2C_Init+0x168>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1e58      	subs	r0, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6859      	ldr	r1, [r3, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	440b      	add	r3, r1
 80037d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037da:	3301      	adds	r3, #1
 80037dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	e012      	b.n	8003812 <HAL_I2C_Init+0x18e>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1e58      	subs	r0, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6859      	ldr	r1, [r3, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	0099      	lsls	r1, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003802:	3301      	adds	r3, #1
 8003804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003808:	2b00      	cmp	r3, #0
 800380a:	bf0c      	ite	eq
 800380c:	2301      	moveq	r3, #1
 800380e:	2300      	movne	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_Init+0x196>
 8003816:	2301      	movs	r3, #1
 8003818:	e022      	b.n	8003860 <HAL_I2C_Init+0x1dc>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10e      	bne.n	8003840 <HAL_I2C_Init+0x1bc>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1e58      	subs	r0, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6859      	ldr	r1, [r3, #4]
 800382a:	460b      	mov	r3, r1
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	440b      	add	r3, r1
 8003830:	fbb0 f3f3 	udiv	r3, r0, r3
 8003834:	3301      	adds	r3, #1
 8003836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800383a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800383e:	e00f      	b.n	8003860 <HAL_I2C_Init+0x1dc>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1e58      	subs	r0, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6859      	ldr	r1, [r3, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	0099      	lsls	r1, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	fbb0 f3f3 	udiv	r3, r0, r3
 8003856:	3301      	adds	r3, #1
 8003858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800385c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	6809      	ldr	r1, [r1, #0]
 8003864:	4313      	orrs	r3, r2
 8003866:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69da      	ldr	r2, [r3, #28]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800388e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6911      	ldr	r1, [r2, #16]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68d2      	ldr	r2, [r2, #12]
 800389a:	4311      	orrs	r1, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	430b      	orrs	r3, r1
 80038a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	000186a0 	.word	0x000186a0
 80038fc:	001e847f 	.word	0x001e847f
 8003900:	003d08ff 	.word	0x003d08ff
 8003904:	431bde83 	.word	0x431bde83
 8003908:	10624dd3 	.word	0x10624dd3

0800390c <HAL_IRDA_Init>:
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IRDA_Init(IRDA_HandleTypeDef *hirda)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the IRDA handle allocation */
  if (hirda == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_IRDA_Init+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e05e      	b.n	80039dc <HAL_IRDA_Init+0xd0>
  /* Check the IRDA instance parameters */
  assert_param(IS_IRDA_INSTANCE(hirda->Instance));
  /* Check the IRDA mode parameter in the IRDA handle */
  assert_param(IS_IRDA_POWERMODE(hirda->Init.IrDAMode));

  if (hirda->gState == HAL_IRDA_STATE_RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <HAL_IRDA_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hirda->Lock = HAL_UNLOCKED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware */
    hirda->MspInitCallback(hirda);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_IRDA_MspInit(hirda);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fd ff68 	bl	8001808 <HAL_IRDA_MspInit>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
  }

  hirda->gState = HAL_IRDA_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2224      	movs	r2, #36	@ 0x24
 800393c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable the IRDA peripheral */
  __HAL_IRDA_DISABLE(hirda);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800394e:	60da      	str	r2, [r3, #12]

  /* Set the IRDA communication parameters */
  IRDA_SetConfig(hirda);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f847 	bl	80039e4 <IRDA_SetConfig>

  /* In IrDA mode, the following bits must be kept cleared:
  - LINEN, STOP and CLKEN bits in the USART_CR2 register,
  - SCEN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(hirda->Instance->CR2, (USART_CR2_LINEN | USART_CR2_STOP | USART_CR2_CLKEN));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 42f0 	bic.w	r2, r2, #30720	@ 0x7800
 8003964:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695a      	ldr	r2, [r3, #20]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0228 	bic.w	r2, r2, #40	@ 0x28
 8003974:	615a      	str	r2, [r3, #20]

  /* Enable the IRDA peripheral */
  __HAL_IRDA_ENABLE(hirda);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003984:	60da      	str	r2, [r3, #12]

  /* Set the prescaler */
  MODIFY_REG(hirda->Instance->GTPR, USART_GTPR_PSC, hirda->Init.Prescaler);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	7d1b      	ldrb	r3, [r3, #20]
 8003994:	4619      	mov	r1, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	619a      	str	r2, [r3, #24]

  /* Configure the IrDA mode */
  MODIFY_REG(hirda->Instance->CR3, USART_CR3_IRLP, hirda->Init.IrDAMode);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f023 0104 	bic.w	r1, r3, #4
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699a      	ldr	r2, [r3, #24]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	615a      	str	r2, [r3, #20]

  /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
  SET_BIT(hirda->Instance->CR3, USART_CR3_IREN);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0202 	orr.w	r2, r2, #2
 80039c2:	615a      	str	r2, [r3, #20]

  /* Initialize the IRDA state*/
  hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hirda->gState = HAL_IRDA_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hirda->RxState = HAL_IRDA_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <IRDA_SetConfig>:
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_SetConfig(IRDA_HandleTypeDef *hirda)
{
 80039e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039e8:	b0bb      	sub	sp, #236	@ 0xec
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
  assert_param(IS_IRDA_MODE(hirda->Init.Mode));
  assert_param(IS_IRDA_POWERMODE(hirda->Init.IrDAMode));

  /*-------------------------- USART CR2 Configuration ------------------------*/
  /* Clear STOP[13:12] bits */
  CLEAR_BIT(hirda->Instance->CR2, USART_CR2_STOP);
 80039f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6919      	ldr	r1, [r3, #16]
 80039f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	f421 5340 	bic.w	r3, r1, #12288	@ 0x3000
 8003a02:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  /* Clear M, PCE, PS, TE and RE bits */
  CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 8003a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68d9      	ldr	r1, [r3, #12]
 8003a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	f421 53b0 	bic.w	r3, r1, #5632	@ 0x1600
 8003a16:	f023 030c 	bic.w	r3, r3, #12
 8003a1a:	60d3      	str	r3, [r2, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to hirda->Init.WordLength value
     Set PCE and PS bits according to hirda->Init.Parity value
     Set TE and RE bits according to hirda->Init.Mode value */
  /* Write to USART CR1 */
  SET_BIT(hirda->Instance->CR1, (hirda->Init.WordLength | hirda->Init.Parity | hirda->Init.Mode));
 8003a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68d8      	ldr	r0, [r3, #12]
 8003a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	431a      	orrs	r2, r3
 8003a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	ea42 0103 	orr.w	r1, r2, r3
 8003a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	ea40 0301 	orr.w	r3, r0, r1
 8003a46:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8003a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6959      	ldr	r1, [r3, #20]
 8003a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
 8003a5a:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
   }
#elif defined(USART6)
  if((hirda->Instance == USART1) || (hirda->Instance == USART6))
 8003a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	4b90      	ldr	r3, [pc, #576]	@ (8003ca4 <IRDA_SetConfig+0x2c0>)
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d006      	beq.n	8003a76 <IRDA_SetConfig+0x92>
 8003a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	4b8e      	ldr	r3, [pc, #568]	@ (8003ca8 <IRDA_SetConfig+0x2c4>)
 8003a70:	429a      	cmp	r2, r3
 8003a72:	f040 811d 	bne.w	8003cb0 <IRDA_SetConfig+0x2cc>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a76:	f000 fc2d 	bl	80042d4 <HAL_RCC_GetPCLK2Freq>
 8003a7a:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
    SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
 8003a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689d      	ldr	r5, [r3, #8]
 8003a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a90:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a94:	e9d7 ab34 	ldrd	sl, fp, [r7, #208]	@ 0xd0
 8003a98:	4652      	mov	r2, sl
 8003a9a:	465b      	mov	r3, fp
 8003a9c:	1891      	adds	r1, r2, r2
 8003a9e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003aa0:	415b      	adcs	r3, r3
 8003aa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aa4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003aa8:	4651      	mov	r1, sl
 8003aaa:	eb12 0801 	adds.w	r8, r2, r1
 8003aae:	4659      	mov	r1, fp
 8003ab0:	eb43 0901 	adc.w	r9, r3, r1
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ac0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ac4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ac8:	4690      	mov	r8, r2
 8003aca:	4699      	mov	r9, r3
 8003acc:	4653      	mov	r3, sl
 8003ace:	eb18 0303 	adds.w	r3, r8, r3
 8003ad2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ad6:	465b      	mov	r3, fp
 8003ad8:	eb49 0303 	adc.w	r3, r9, r3
 8003adc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8003afc:	4649      	mov	r1, r9
 8003afe:	008b      	lsls	r3, r1, #2
 8003b00:	4641      	mov	r1, r8
 8003b02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b06:	4641      	mov	r1, r8
 8003b08:	008a      	lsls	r2, r1, #2
 8003b0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b0e:	f7fc fbcf 	bl	80002b0 <__aeabi_uldivmod>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4b65      	ldr	r3, [pc, #404]	@ (8003cac <IRDA_SetConfig+0x2c8>)
 8003b18:	fba3 2302 	umull	r2, r3, r3, r2
 8003b1c:	095b      	lsrs	r3, r3, #5
 8003b1e:	011c      	lsls	r4, r3, #4
 8003b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b24:	2200      	movs	r2, #0
 8003b26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b2a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b2e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b32:	4642      	mov	r2, r8
 8003b34:	464b      	mov	r3, r9
 8003b36:	1891      	adds	r1, r2, r2
 8003b38:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b3a:	415b      	adcs	r3, r3
 8003b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b3e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b42:	4641      	mov	r1, r8
 8003b44:	1851      	adds	r1, r2, r1
 8003b46:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b48:	4649      	mov	r1, r9
 8003b4a:	414b      	adcs	r3, r1
 8003b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b5a:	4659      	mov	r1, fp
 8003b5c:	00cb      	lsls	r3, r1, #3
 8003b5e:	4651      	mov	r1, sl
 8003b60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b64:	4651      	mov	r1, sl
 8003b66:	00ca      	lsls	r2, r1, #3
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	4642      	mov	r2, r8
 8003b70:	189b      	adds	r3, r3, r2
 8003b72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b76:	464b      	mov	r3, r9
 8003b78:	460a      	mov	r2, r1
 8003b7a:	eb42 0303 	adc.w	r3, r2, r3
 8003b7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b8e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	008b      	lsls	r3, r1, #2
 8003ba2:	4641      	mov	r1, r8
 8003ba4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ba8:	4641      	mov	r1, r8
 8003baa:	008a      	lsls	r2, r1, #2
 8003bac:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003bb0:	f7fc fb7e 	bl	80002b0 <__aeabi_uldivmod>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4611      	mov	r1, r2
 8003bba:	4b3c      	ldr	r3, [pc, #240]	@ (8003cac <IRDA_SetConfig+0x2c8>)
 8003bbc:	fba3 2301 	umull	r2, r3, r3, r1
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	2264      	movs	r2, #100	@ 0x64
 8003bc4:	fb02 f303 	mul.w	r3, r2, r3
 8003bc8:	1acb      	subs	r3, r1, r3
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	3332      	adds	r3, #50	@ 0x32
 8003bce:	4a37      	ldr	r2, [pc, #220]	@ (8003cac <IRDA_SetConfig+0x2c8>)
 8003bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bda:	441c      	add	r4, r3
 8003bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be0:	2200      	movs	r2, #0
 8003be2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003be6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003bea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003bee:	4642      	mov	r2, r8
 8003bf0:	464b      	mov	r3, r9
 8003bf2:	1891      	adds	r1, r2, r2
 8003bf4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003bf6:	415b      	adcs	r3, r3
 8003bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bfe:	4641      	mov	r1, r8
 8003c00:	1851      	adds	r1, r2, r1
 8003c02:	6239      	str	r1, [r7, #32]
 8003c04:	4649      	mov	r1, r9
 8003c06:	414b      	adcs	r3, r1
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8003c16:	4659      	mov	r1, fp
 8003c18:	00cb      	lsls	r3, r1, #3
 8003c1a:	4651      	mov	r1, sl
 8003c1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c20:	4651      	mov	r1, sl
 8003c22:	00ca      	lsls	r2, r1, #3
 8003c24:	4610      	mov	r0, r2
 8003c26:	4619      	mov	r1, r3
 8003c28:	4603      	mov	r3, r0
 8003c2a:	4642      	mov	r2, r8
 8003c2c:	189b      	adds	r3, r3, r2
 8003c2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c32:	464b      	mov	r3, r9
 8003c34:	460a      	mov	r2, r1
 8003c36:	eb42 0303 	adc.w	r3, r2, r3
 8003c3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	008b      	lsls	r3, r1, #2
 8003c5e:	4641      	mov	r1, r8
 8003c60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c64:	4641      	mov	r1, r8
 8003c66:	008a      	lsls	r2, r1, #2
 8003c68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c6c:	f7fc fb20 	bl	80002b0 <__aeabi_uldivmod>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4b0d      	ldr	r3, [pc, #52]	@ (8003cac <IRDA_SetConfig+0x2c8>)
 8003c76:	fba3 1302 	umull	r1, r3, r3, r2
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	2164      	movs	r1, #100	@ 0x64
 8003c7e:	fb01 f303 	mul.w	r3, r1, r3
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	3332      	adds	r3, #50	@ 0x32
 8003c88:	4a08      	ldr	r2, [pc, #32]	@ (8003cac <IRDA_SetConfig+0x2c8>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	f003 030f 	and.w	r3, r3, #15
 8003c94:	18e2      	adds	r2, r4, r3
 8003c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	432a      	orrs	r2, r5
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	e106      	b.n	8003eb0 <IRDA_SetConfig+0x4cc>
 8003ca2:	bf00      	nop
 8003ca4:	40011000 	.word	0x40011000
 8003ca8:	40011400 	.word	0x40011400
 8003cac:	51eb851f 	.word	0x51eb851f
    SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
  }
#endif /* USART6 */
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cb0:	f000 fafc 	bl	80042ac <HAL_RCC_GetPCLK1Freq>
 8003cb4:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
    SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
 8003cb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689e      	ldr	r6, [r3, #8]
 8003cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cca:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003cce:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003cd2:	4642      	mov	r2, r8
 8003cd4:	464b      	mov	r3, r9
 8003cd6:	1891      	adds	r1, r2, r2
 8003cd8:	61b9      	str	r1, [r7, #24]
 8003cda:	415b      	adcs	r3, r3
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ce2:	4641      	mov	r1, r8
 8003ce4:	1854      	adds	r4, r2, r1
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	eb43 0501 	adc.w	r5, r3, r1
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	00eb      	lsls	r3, r5, #3
 8003cf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cfa:	00e2      	lsls	r2, r4, #3
 8003cfc:	4614      	mov	r4, r2
 8003cfe:	461d      	mov	r5, r3
 8003d00:	4643      	mov	r3, r8
 8003d02:	18e3      	adds	r3, r4, r3
 8003d04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d08:	464b      	mov	r3, r9
 8003d0a:	eb45 0303 	adc.w	r3, r5, r3
 8003d0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d1c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003d2a:	4629      	mov	r1, r5
 8003d2c:	008b      	lsls	r3, r1, #2
 8003d2e:	4621      	mov	r1, r4
 8003d30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d34:	4621      	mov	r1, r4
 8003d36:	008a      	lsls	r2, r1, #2
 8003d38:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d3c:	f7fc fab8 	bl	80002b0 <__aeabi_uldivmod>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4b5d      	ldr	r3, [pc, #372]	@ (8003ebc <IRDA_SetConfig+0x4d8>)
 8003d46:	fba3 2302 	umull	r2, r3, r3, r2
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	011c      	lsls	r4, r3, #4
 8003d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d52:	2200      	movs	r2, #0
 8003d54:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d56:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d5c:	4642      	mov	r2, r8
 8003d5e:	464b      	mov	r3, r9
 8003d60:	1891      	adds	r1, r2, r2
 8003d62:	6139      	str	r1, [r7, #16]
 8003d64:	415b      	adcs	r3, r3
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d6c:	4641      	mov	r1, r8
 8003d6e:	eb12 0a01 	adds.w	sl, r2, r1
 8003d72:	4649      	mov	r1, r9
 8003d74:	eb43 0b01 	adc.w	fp, r3, r1
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d8c:	4692      	mov	sl, r2
 8003d8e:	469b      	mov	fp, r3
 8003d90:	4643      	mov	r3, r8
 8003d92:	eb1a 0303 	adds.w	r3, sl, r3
 8003d96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d98:	464b      	mov	r3, r9
 8003d9a:	eb4b 0303 	adc.w	r3, fp, r3
 8003d9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003daa:	667a      	str	r2, [r7, #100]	@ 0x64
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003db8:	4649      	mov	r1, r9
 8003dba:	008b      	lsls	r3, r1, #2
 8003dbc:	4641      	mov	r1, r8
 8003dbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dc2:	4641      	mov	r1, r8
 8003dc4:	008a      	lsls	r2, r1, #2
 8003dc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003dca:	f7fc fa71 	bl	80002b0 <__aeabi_uldivmod>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4611      	mov	r1, r2
 8003dd4:	4b39      	ldr	r3, [pc, #228]	@ (8003ebc <IRDA_SetConfig+0x4d8>)
 8003dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	2264      	movs	r2, #100	@ 0x64
 8003dde:	fb02 f303 	mul.w	r3, r2, r3
 8003de2:	1acb      	subs	r3, r1, r3
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	3332      	adds	r3, #50	@ 0x32
 8003de8:	4a34      	ldr	r2, [pc, #208]	@ (8003ebc <IRDA_SetConfig+0x4d8>)
 8003dea:	fba2 2303 	umull	r2, r3, r2, r3
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003df4:	441c      	add	r4, r3
 8003df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003dfe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003e00:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8003e04:	4642      	mov	r2, r8
 8003e06:	464b      	mov	r3, r9
 8003e08:	1891      	adds	r1, r2, r2
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	415b      	adcs	r3, r3
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e14:	4641      	mov	r1, r8
 8003e16:	1851      	adds	r1, r2, r1
 8003e18:	6039      	str	r1, [r7, #0]
 8003e1a:	4649      	mov	r1, r9
 8003e1c:	414b      	adcs	r3, r1
 8003e1e:	607b      	str	r3, [r7, #4]
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e2c:	4659      	mov	r1, fp
 8003e2e:	00cb      	lsls	r3, r1, #3
 8003e30:	4651      	mov	r1, sl
 8003e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e36:	4651      	mov	r1, sl
 8003e38:	00ca      	lsls	r2, r1, #3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4642      	mov	r2, r8
 8003e42:	189b      	adds	r3, r3, r2
 8003e44:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e46:	464b      	mov	r3, r9
 8003e48:	460a      	mov	r2, r1
 8003e4a:	eb42 0303 	adc.w	r3, r2, r3
 8003e4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e5a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8003e68:	4649      	mov	r1, r9
 8003e6a:	008b      	lsls	r3, r1, #2
 8003e6c:	4641      	mov	r1, r8
 8003e6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e72:	4641      	mov	r1, r8
 8003e74:	008a      	lsls	r2, r1, #2
 8003e76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8003e7a:	f7fc fa19 	bl	80002b0 <__aeabi_uldivmod>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4b0e      	ldr	r3, [pc, #56]	@ (8003ebc <IRDA_SetConfig+0x4d8>)
 8003e84:	fba3 1302 	umull	r1, r3, r3, r2
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	2164      	movs	r1, #100	@ 0x64
 8003e8c:	fb01 f303 	mul.w	r3, r1, r3
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	3332      	adds	r3, #50	@ 0x32
 8003e96:	4a09      	ldr	r2, [pc, #36]	@ (8003ebc <IRDA_SetConfig+0x4d8>)
 8003e98:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	18e2      	adds	r2, r4, r3
 8003ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4332      	orrs	r2, r6
 8003eac:	609a      	str	r2, [r3, #8]
  }
}
 8003eae:	bf00      	nop
 8003eb0:	bf00      	nop
 8003eb2:	37ec      	adds	r7, #236	@ 0xec
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eba:	bf00      	nop
 8003ebc:	51eb851f 	.word	0x51eb851f

08003ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0cc      	b.n	800406e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed4:	4b68      	ldr	r3, [pc, #416]	@ (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d90c      	bls.n	8003efc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee2:	4b65      	ldr	r3, [pc, #404]	@ (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eea:	4b63      	ldr	r3, [pc, #396]	@ (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0b8      	b.n	800406e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d020      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f14:	4b59      	ldr	r3, [pc, #356]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a58      	ldr	r2, [pc, #352]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f2c:	4b53      	ldr	r3, [pc, #332]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	4a52      	ldr	r2, [pc, #328]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f38:	4b50      	ldr	r3, [pc, #320]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	494d      	ldr	r1, [pc, #308]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d044      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d107      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5e:	4b47      	ldr	r3, [pc, #284]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d119      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e07f      	b.n	800406e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d003      	beq.n	8003f7e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d107      	bne.n	8003f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e06f      	b.n	800406e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e067      	b.n	800406e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f9e:	4b37      	ldr	r3, [pc, #220]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f023 0203 	bic.w	r2, r3, #3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	4934      	ldr	r1, [pc, #208]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb0:	f7fd ff34 	bl	8001e1c <HAL_GetTick>
 8003fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb8:	f7fd ff30 	bl	8001e1c <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e04f      	b.n	800406e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fce:	4b2b      	ldr	r3, [pc, #172]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 020c 	and.w	r2, r3, #12
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d1eb      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe0:	4b25      	ldr	r3, [pc, #148]	@ (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d20c      	bcs.n	8004008 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fee:	4b22      	ldr	r3, [pc, #136]	@ (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff6:	4b20      	ldr	r3, [pc, #128]	@ (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d001      	beq.n	8004008 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e032      	b.n	800406e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004014:	4b19      	ldr	r3, [pc, #100]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4916      	ldr	r1, [pc, #88]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	4313      	orrs	r3, r2
 8004024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d009      	beq.n	8004046 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004032:	4b12      	ldr	r3, [pc, #72]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	490e      	ldr	r1, [pc, #56]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	4313      	orrs	r3, r2
 8004044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004046:	f000 f821 	bl	800408c <HAL_RCC_GetSysClockFreq>
 800404a:	4602      	mov	r2, r0
 800404c:	4b0b      	ldr	r3, [pc, #44]	@ (800407c <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	490a      	ldr	r1, [pc, #40]	@ (8004080 <HAL_RCC_ClockConfig+0x1c0>)
 8004058:	5ccb      	ldrb	r3, [r1, r3]
 800405a:	fa22 f303 	lsr.w	r3, r2, r3
 800405e:	4a09      	ldr	r2, [pc, #36]	@ (8004084 <HAL_RCC_ClockConfig+0x1c4>)
 8004060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004062:	4b09      	ldr	r3, [pc, #36]	@ (8004088 <HAL_RCC_ClockConfig+0x1c8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f7fd fe94 	bl	8001d94 <HAL_InitTick>

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40023c00 	.word	0x40023c00
 800407c:	40023800 	.word	0x40023800
 8004080:	0800624c 	.word	0x0800624c
 8004084:	20000000 	.word	0x20000000
 8004088:	20000004 	.word	0x20000004

0800408c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800408c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004090:	b094      	sub	sp, #80	@ 0x50
 8004092:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a4:	4b79      	ldr	r3, [pc, #484]	@ (800428c <HAL_RCC_GetSysClockFreq+0x200>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 030c 	and.w	r3, r3, #12
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d00d      	beq.n	80040cc <HAL_RCC_GetSysClockFreq+0x40>
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	f200 80e1 	bhi.w	8004278 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_RCC_GetSysClockFreq+0x34>
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d003      	beq.n	80040c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80040be:	e0db      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040c0:	4b73      	ldr	r3, [pc, #460]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x204>)
 80040c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040c4:	e0db      	b.n	800427e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040c6:	4b72      	ldr	r3, [pc, #456]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x204>)
 80040c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040ca:	e0d8      	b.n	800427e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040cc:	4b6f      	ldr	r3, [pc, #444]	@ (800428c <HAL_RCC_GetSysClockFreq+0x200>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040d6:	4b6d      	ldr	r3, [pc, #436]	@ (800428c <HAL_RCC_GetSysClockFreq+0x200>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d063      	beq.n	80041aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e2:	4b6a      	ldr	r3, [pc, #424]	@ (800428c <HAL_RCC_GetSysClockFreq+0x200>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	099b      	lsrs	r3, r3, #6
 80040e8:	2200      	movs	r2, #0
 80040ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80040ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80040f6:	2300      	movs	r3, #0
 80040f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80040fe:	4622      	mov	r2, r4
 8004100:	462b      	mov	r3, r5
 8004102:	f04f 0000 	mov.w	r0, #0
 8004106:	f04f 0100 	mov.w	r1, #0
 800410a:	0159      	lsls	r1, r3, #5
 800410c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004110:	0150      	lsls	r0, r2, #5
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4621      	mov	r1, r4
 8004118:	1a51      	subs	r1, r2, r1
 800411a:	6139      	str	r1, [r7, #16]
 800411c:	4629      	mov	r1, r5
 800411e:	eb63 0301 	sbc.w	r3, r3, r1
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004130:	4659      	mov	r1, fp
 8004132:	018b      	lsls	r3, r1, #6
 8004134:	4651      	mov	r1, sl
 8004136:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800413a:	4651      	mov	r1, sl
 800413c:	018a      	lsls	r2, r1, #6
 800413e:	4651      	mov	r1, sl
 8004140:	ebb2 0801 	subs.w	r8, r2, r1
 8004144:	4659      	mov	r1, fp
 8004146:	eb63 0901 	sbc.w	r9, r3, r1
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004156:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800415a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800415e:	4690      	mov	r8, r2
 8004160:	4699      	mov	r9, r3
 8004162:	4623      	mov	r3, r4
 8004164:	eb18 0303 	adds.w	r3, r8, r3
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	462b      	mov	r3, r5
 800416c:	eb49 0303 	adc.w	r3, r9, r3
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	f04f 0300 	mov.w	r3, #0
 800417a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800417e:	4629      	mov	r1, r5
 8004180:	028b      	lsls	r3, r1, #10
 8004182:	4621      	mov	r1, r4
 8004184:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004188:	4621      	mov	r1, r4
 800418a:	028a      	lsls	r2, r1, #10
 800418c:	4610      	mov	r0, r2
 800418e:	4619      	mov	r1, r3
 8004190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004192:	2200      	movs	r2, #0
 8004194:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004196:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004198:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800419c:	f7fc f888 	bl	80002b0 <__aeabi_uldivmod>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4613      	mov	r3, r2
 80041a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041a8:	e058      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041aa:	4b38      	ldr	r3, [pc, #224]	@ (800428c <HAL_RCC_GetSysClockFreq+0x200>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	099b      	lsrs	r3, r3, #6
 80041b0:	2200      	movs	r2, #0
 80041b2:	4618      	mov	r0, r3
 80041b4:	4611      	mov	r1, r2
 80041b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041ba:	623b      	str	r3, [r7, #32]
 80041bc:	2300      	movs	r3, #0
 80041be:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041c4:	4642      	mov	r2, r8
 80041c6:	464b      	mov	r3, r9
 80041c8:	f04f 0000 	mov.w	r0, #0
 80041cc:	f04f 0100 	mov.w	r1, #0
 80041d0:	0159      	lsls	r1, r3, #5
 80041d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041d6:	0150      	lsls	r0, r2, #5
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4641      	mov	r1, r8
 80041de:	ebb2 0a01 	subs.w	sl, r2, r1
 80041e2:	4649      	mov	r1, r9
 80041e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004200:	eb63 050b 	sbc.w	r5, r3, fp
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	00eb      	lsls	r3, r5, #3
 800420e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004212:	00e2      	lsls	r2, r4, #3
 8004214:	4614      	mov	r4, r2
 8004216:	461d      	mov	r5, r3
 8004218:	4643      	mov	r3, r8
 800421a:	18e3      	adds	r3, r4, r3
 800421c:	603b      	str	r3, [r7, #0]
 800421e:	464b      	mov	r3, r9
 8004220:	eb45 0303 	adc.w	r3, r5, r3
 8004224:	607b      	str	r3, [r7, #4]
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004232:	4629      	mov	r1, r5
 8004234:	028b      	lsls	r3, r1, #10
 8004236:	4621      	mov	r1, r4
 8004238:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800423c:	4621      	mov	r1, r4
 800423e:	028a      	lsls	r2, r1, #10
 8004240:	4610      	mov	r0, r2
 8004242:	4619      	mov	r1, r3
 8004244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004246:	2200      	movs	r2, #0
 8004248:	61bb      	str	r3, [r7, #24]
 800424a:	61fa      	str	r2, [r7, #28]
 800424c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004250:	f7fc f82e 	bl	80002b0 <__aeabi_uldivmod>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4613      	mov	r3, r2
 800425a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800425c:	4b0b      	ldr	r3, [pc, #44]	@ (800428c <HAL_RCC_GetSysClockFreq+0x200>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	0c1b      	lsrs	r3, r3, #16
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	3301      	adds	r3, #1
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800426c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800426e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004270:	fbb2 f3f3 	udiv	r3, r2, r3
 8004274:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004276:	e002      	b.n	800427e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004278:	4b05      	ldr	r3, [pc, #20]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x204>)
 800427a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800427c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800427e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004280:	4618      	mov	r0, r3
 8004282:	3750      	adds	r7, #80	@ 0x50
 8004284:	46bd      	mov	sp, r7
 8004286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800428a:	bf00      	nop
 800428c:	40023800 	.word	0x40023800
 8004290:	00f42400 	.word	0x00f42400

08004294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004298:	4b03      	ldr	r3, [pc, #12]	@ (80042a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800429a:	681b      	ldr	r3, [r3, #0]
}
 800429c:	4618      	mov	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	20000000 	.word	0x20000000

080042ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042b0:	f7ff fff0 	bl	8004294 <HAL_RCC_GetHCLKFreq>
 80042b4:	4602      	mov	r2, r0
 80042b6:	4b05      	ldr	r3, [pc, #20]	@ (80042cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	0a9b      	lsrs	r3, r3, #10
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	4903      	ldr	r1, [pc, #12]	@ (80042d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042c2:	5ccb      	ldrb	r3, [r1, r3]
 80042c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40023800 	.word	0x40023800
 80042d0:	0800625c 	.word	0x0800625c

080042d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042d8:	f7ff ffdc 	bl	8004294 <HAL_RCC_GetHCLKFreq>
 80042dc:	4602      	mov	r2, r0
 80042de:	4b05      	ldr	r3, [pc, #20]	@ (80042f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	0b5b      	lsrs	r3, r3, #13
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	4903      	ldr	r1, [pc, #12]	@ (80042f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ea:	5ccb      	ldrb	r3, [r1, r3]
 80042ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40023800 	.word	0x40023800
 80042f8:	0800625c 	.word	0x0800625c

080042fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e273      	b.n	80047f6 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d075      	beq.n	8004406 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800431a:	4b88      	ldr	r3, [pc, #544]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 030c 	and.w	r3, r3, #12
 8004322:	2b04      	cmp	r3, #4
 8004324:	d00c      	beq.n	8004340 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004326:	4b85      	ldr	r3, [pc, #532]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
        || \
 800432e:	2b08      	cmp	r3, #8
 8004330:	d112      	bne.n	8004358 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004332:	4b82      	ldr	r3, [pc, #520]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800433a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800433e:	d10b      	bne.n	8004358 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004340:	4b7e      	ldr	r3, [pc, #504]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d05b      	beq.n	8004404 <HAL_RCC_OscConfig+0x108>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d157      	bne.n	8004404 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e24e      	b.n	80047f6 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004360:	d106      	bne.n	8004370 <HAL_RCC_OscConfig+0x74>
 8004362:	4b76      	ldr	r3, [pc, #472]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a75      	ldr	r2, [pc, #468]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e01d      	b.n	80043ac <HAL_RCC_OscConfig+0xb0>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004378:	d10c      	bne.n	8004394 <HAL_RCC_OscConfig+0x98>
 800437a:	4b70      	ldr	r3, [pc, #448]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a6f      	ldr	r2, [pc, #444]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004380:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	4b6d      	ldr	r3, [pc, #436]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a6c      	ldr	r2, [pc, #432]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e00b      	b.n	80043ac <HAL_RCC_OscConfig+0xb0>
 8004394:	4b69      	ldr	r3, [pc, #420]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a68      	ldr	r2, [pc, #416]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 800439a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	4b66      	ldr	r3, [pc, #408]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a65      	ldr	r2, [pc, #404]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 80043a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d013      	beq.n	80043dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7fd fd32 	bl	8001e1c <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043bc:	f7fd fd2e 	bl	8001e1c <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b64      	cmp	r3, #100	@ 0x64
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e213      	b.n	80047f6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ce:	4b5b      	ldr	r3, [pc, #364]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0xc0>
 80043da:	e014      	b.n	8004406 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043dc:	f7fd fd1e 	bl	8001e1c <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e4:	f7fd fd1a 	bl	8001e1c <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b64      	cmp	r3, #100	@ 0x64
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e1ff      	b.n	80047f6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043f6:	4b51      	ldr	r3, [pc, #324]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0xe8>
 8004402:	e000      	b.n	8004406 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d063      	beq.n	80044da <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004412:	4b4a      	ldr	r3, [pc, #296]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 030c 	and.w	r3, r3, #12
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00b      	beq.n	8004436 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800441e:	4b47      	ldr	r3, [pc, #284]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
        || \
 8004426:	2b08      	cmp	r3, #8
 8004428:	d11c      	bne.n	8004464 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800442a:	4b44      	ldr	r3, [pc, #272]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d116      	bne.n	8004464 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004436:	4b41      	ldr	r3, [pc, #260]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d005      	beq.n	800444e <HAL_RCC_OscConfig+0x152>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d001      	beq.n	800444e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e1d3      	b.n	80047f6 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444e:	4b3b      	ldr	r3, [pc, #236]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	4937      	ldr	r1, [pc, #220]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 800445e:	4313      	orrs	r3, r2
 8004460:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004462:	e03a      	b.n	80044da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d020      	beq.n	80044ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800446c:	4b34      	ldr	r3, [pc, #208]	@ (8004540 <HAL_RCC_OscConfig+0x244>)
 800446e:	2201      	movs	r2, #1
 8004470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004472:	f7fd fcd3 	bl	8001e1c <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800447a:	f7fd fccf 	bl	8001e1c <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e1b4      	b.n	80047f6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800448c:	4b2b      	ldr	r3, [pc, #172]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f0      	beq.n	800447a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004498:	4b28      	ldr	r3, [pc, #160]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	4925      	ldr	r1, [pc, #148]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	600b      	str	r3, [r1, #0]
 80044ac:	e015      	b.n	80044da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ae:	4b24      	ldr	r3, [pc, #144]	@ (8004540 <HAL_RCC_OscConfig+0x244>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b4:	f7fd fcb2 	bl	8001e1c <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044bc:	f7fd fcae 	bl	8001e1c <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e193      	b.n	80047f6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ce:	4b1b      	ldr	r3, [pc, #108]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d036      	beq.n	8004554 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d016      	beq.n	800451c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ee:	4b15      	ldr	r3, [pc, #84]	@ (8004544 <HAL_RCC_OscConfig+0x248>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f4:	f7fd fc92 	bl	8001e1c <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044fc:	f7fd fc8e 	bl	8001e1c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e173      	b.n	80047f6 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800450e:	4b0b      	ldr	r3, [pc, #44]	@ (800453c <HAL_RCC_OscConfig+0x240>)
 8004510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0x200>
 800451a:	e01b      	b.n	8004554 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800451c:	4b09      	ldr	r3, [pc, #36]	@ (8004544 <HAL_RCC_OscConfig+0x248>)
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004522:	f7fd fc7b 	bl	8001e1c <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004528:	e00e      	b.n	8004548 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800452a:	f7fd fc77 	bl	8001e1c <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d907      	bls.n	8004548 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e15c      	b.n	80047f6 <HAL_RCC_OscConfig+0x4fa>
 800453c:	40023800 	.word	0x40023800
 8004540:	42470000 	.word	0x42470000
 8004544:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004548:	4b8a      	ldr	r3, [pc, #552]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 800454a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1ea      	bne.n	800452a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 8097 	beq.w	8004690 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004562:	2300      	movs	r3, #0
 8004564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004566:	4b83      	ldr	r3, [pc, #524]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10f      	bne.n	8004592 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004572:	2300      	movs	r3, #0
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	4b7f      	ldr	r3, [pc, #508]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 8004578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457a:	4a7e      	ldr	r2, [pc, #504]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 800457c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004580:	6413      	str	r3, [r2, #64]	@ 0x40
 8004582:	4b7c      	ldr	r3, [pc, #496]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 8004584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800458a:	60bb      	str	r3, [r7, #8]
 800458c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800458e:	2301      	movs	r3, #1
 8004590:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004592:	4b79      	ldr	r3, [pc, #484]	@ (8004778 <HAL_RCC_OscConfig+0x47c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d118      	bne.n	80045d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800459e:	4b76      	ldr	r3, [pc, #472]	@ (8004778 <HAL_RCC_OscConfig+0x47c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a75      	ldr	r2, [pc, #468]	@ (8004778 <HAL_RCC_OscConfig+0x47c>)
 80045a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045aa:	f7fd fc37 	bl	8001e1c <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b2:	f7fd fc33 	bl	8001e1c <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e118      	b.n	80047f6 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004778 <HAL_RCC_OscConfig+0x47c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d106      	bne.n	80045e6 <HAL_RCC_OscConfig+0x2ea>
 80045d8:	4b66      	ldr	r3, [pc, #408]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045dc:	4a65      	ldr	r2, [pc, #404]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 80045de:	f043 0301 	orr.w	r3, r3, #1
 80045e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045e4:	e01c      	b.n	8004620 <HAL_RCC_OscConfig+0x324>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b05      	cmp	r3, #5
 80045ec:	d10c      	bne.n	8004608 <HAL_RCC_OscConfig+0x30c>
 80045ee:	4b61      	ldr	r3, [pc, #388]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f2:	4a60      	ldr	r2, [pc, #384]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 80045f4:	f043 0304 	orr.w	r3, r3, #4
 80045f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80045fa:	4b5e      	ldr	r3, [pc, #376]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fe:	4a5d      	ldr	r2, [pc, #372]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 8004600:	f043 0301 	orr.w	r3, r3, #1
 8004604:	6713      	str	r3, [r2, #112]	@ 0x70
 8004606:	e00b      	b.n	8004620 <HAL_RCC_OscConfig+0x324>
 8004608:	4b5a      	ldr	r3, [pc, #360]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 800460a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460c:	4a59      	ldr	r2, [pc, #356]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 800460e:	f023 0301 	bic.w	r3, r3, #1
 8004612:	6713      	str	r3, [r2, #112]	@ 0x70
 8004614:	4b57      	ldr	r3, [pc, #348]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004618:	4a56      	ldr	r2, [pc, #344]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 800461a:	f023 0304 	bic.w	r3, r3, #4
 800461e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d015      	beq.n	8004654 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004628:	f7fd fbf8 	bl	8001e1c <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462e:	e00a      	b.n	8004646 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004630:	f7fd fbf4 	bl	8001e1c <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e0d7      	b.n	80047f6 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004646:	4b4b      	ldr	r3, [pc, #300]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 8004648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0ee      	beq.n	8004630 <HAL_RCC_OscConfig+0x334>
 8004652:	e014      	b.n	800467e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004654:	f7fd fbe2 	bl	8001e1c <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800465a:	e00a      	b.n	8004672 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800465c:	f7fd fbde 	bl	8001e1c <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e0c1      	b.n	80047f6 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004672:	4b40      	ldr	r3, [pc, #256]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1ee      	bne.n	800465c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800467e:	7dfb      	ldrb	r3, [r7, #23]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d105      	bne.n	8004690 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004684:	4b3b      	ldr	r3, [pc, #236]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 8004686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004688:	4a3a      	ldr	r2, [pc, #232]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 800468a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800468e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 80ad 	beq.w	80047f4 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800469a:	4b36      	ldr	r3, [pc, #216]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d060      	beq.n	8004768 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d145      	bne.n	800473a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ae:	4b33      	ldr	r3, [pc, #204]	@ (800477c <HAL_RCC_OscConfig+0x480>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b4:	f7fd fbb2 	bl	8001e1c <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046bc:	f7fd fbae 	bl	8001e1c <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e093      	b.n	80047f6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ce:	4b29      	ldr	r3, [pc, #164]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f0      	bne.n	80046bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69da      	ldr	r2, [r3, #28]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	019b      	lsls	r3, r3, #6
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f0:	085b      	lsrs	r3, r3, #1
 80046f2:	3b01      	subs	r3, #1
 80046f4:	041b      	lsls	r3, r3, #16
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fc:	061b      	lsls	r3, r3, #24
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004704:	071b      	lsls	r3, r3, #28
 8004706:	491b      	ldr	r1, [pc, #108]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 8004708:	4313      	orrs	r3, r2
 800470a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800470c:	4b1b      	ldr	r3, [pc, #108]	@ (800477c <HAL_RCC_OscConfig+0x480>)
 800470e:	2201      	movs	r2, #1
 8004710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004712:	f7fd fb83 	bl	8001e1c <HAL_GetTick>
 8004716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004718:	e008      	b.n	800472c <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800471a:	f7fd fb7f 	bl	8001e1c <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e064      	b.n	80047f6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800472c:	4b11      	ldr	r3, [pc, #68]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0f0      	beq.n	800471a <HAL_RCC_OscConfig+0x41e>
 8004738:	e05c      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473a:	4b10      	ldr	r3, [pc, #64]	@ (800477c <HAL_RCC_OscConfig+0x480>)
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7fd fb6c 	bl	8001e1c <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004748:	f7fd fb68 	bl	8001e1c <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e04d      	b.n	80047f6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475a:	4b06      	ldr	r3, [pc, #24]	@ (8004774 <HAL_RCC_OscConfig+0x478>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f0      	bne.n	8004748 <HAL_RCC_OscConfig+0x44c>
 8004766:	e045      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d107      	bne.n	8004780 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e040      	b.n	80047f6 <HAL_RCC_OscConfig+0x4fa>
 8004774:	40023800 	.word	0x40023800
 8004778:	40007000 	.word	0x40007000
 800477c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004780:	4b1f      	ldr	r3, [pc, #124]	@ (8004800 <HAL_RCC_OscConfig+0x504>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d030      	beq.n	80047f0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004798:	429a      	cmp	r2, r3
 800479a:	d129      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d122      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047b0:	4013      	ands	r3, r2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d119      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c6:	085b      	lsrs	r3, r3, #1
 80047c8:	3b01      	subs	r3, #1
 80047ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d10f      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047dc:	429a      	cmp	r2, r3
 80047de:	d107      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d001      	beq.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e000      	b.n	80047f6 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40023800 	.word	0x40023800

08004804 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e07b      	b.n	800490e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481a:	2b00      	cmp	r3, #0
 800481c:	d108      	bne.n	8004830 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004826:	d009      	beq.n	800483c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	61da      	str	r2, [r3, #28]
 800482e:	e005      	b.n	800483c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7fc ff4a 	bl	80016f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004872:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c0:	ea42 0103 	orr.w	r1, r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	0c1b      	lsrs	r3, r3, #16
 80048da:	f003 0104 	and.w	r1, r3, #4
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e2:	f003 0210 	and.w	r2, r3, #16
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	69da      	ldr	r2, [r3, #28]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b082      	sub	sp, #8
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e041      	b.n	80049ac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d106      	bne.n	8004942 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7fc ff1f 	bl	8001780 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3304      	adds	r3, #4
 8004952:	4619      	mov	r1, r3
 8004954:	4610      	mov	r0, r2
 8004956:	f000 faab 	bl	8004eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d001      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e04e      	b.n	8004a6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a23      	ldr	r2, [pc, #140]	@ (8004a78 <HAL_TIM_Base_Start_IT+0xc4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d022      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f6:	d01d      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1f      	ldr	r2, [pc, #124]	@ (8004a7c <HAL_TIM_Base_Start_IT+0xc8>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d018      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a1e      	ldr	r2, [pc, #120]	@ (8004a80 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d013      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a1c      	ldr	r2, [pc, #112]	@ (8004a84 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00e      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004a88 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d009      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a19      	ldr	r2, [pc, #100]	@ (8004a8c <HAL_TIM_Base_Start_IT+0xd8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d004      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x80>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a18      	ldr	r2, [pc, #96]	@ (8004a90 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d111      	bne.n	8004a58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b06      	cmp	r3, #6
 8004a44:	d010      	beq.n	8004a68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0201 	orr.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a56:	e007      	b.n	8004a68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	40000400 	.word	0x40000400
 8004a80:	40000800 	.word	0x40000800
 8004a84:	40000c00 	.word	0x40000c00
 8004a88:	40010400 	.word	0x40010400
 8004a8c:	40014000 	.word	0x40014000
 8004a90:	40001800 	.word	0x40001800

08004a94 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0201 	bic.w	r2, r2, #1
 8004aaa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6a1a      	ldr	r2, [r3, #32]
 8004ab2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10f      	bne.n	8004adc <HAL_TIM_Base_Stop_IT+0x48>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6a1a      	ldr	r2, [r3, #32]
 8004ac2:	f240 4344 	movw	r3, #1092	@ 0x444
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d107      	bne.n	8004adc <HAL_TIM_Base_Stop_IT+0x48>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0201 	bic.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d020      	beq.n	8004b56 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d01b      	beq.n	8004b56 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f06f 0202 	mvn.w	r2, #2
 8004b26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f999 	bl	8004e74 <HAL_TIM_IC_CaptureCallback>
 8004b42:	e005      	b.n	8004b50 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f98b 	bl	8004e60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f99c 	bl	8004e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d020      	beq.n	8004ba2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d01b      	beq.n	8004ba2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f06f 0204 	mvn.w	r2, #4
 8004b72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f973 	bl	8004e74 <HAL_TIM_IC_CaptureCallback>
 8004b8e:	e005      	b.n	8004b9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f965 	bl	8004e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f976 	bl	8004e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d020      	beq.n	8004bee <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d01b      	beq.n	8004bee <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f06f 0208 	mvn.w	r2, #8
 8004bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2204      	movs	r2, #4
 8004bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f94d 	bl	8004e74 <HAL_TIM_IC_CaptureCallback>
 8004bda:	e005      	b.n	8004be8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f93f 	bl	8004e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f950 	bl	8004e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d020      	beq.n	8004c3a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d01b      	beq.n	8004c3a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f06f 0210 	mvn.w	r2, #16
 8004c0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2208      	movs	r2, #8
 8004c10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f927 	bl	8004e74 <HAL_TIM_IC_CaptureCallback>
 8004c26:	e005      	b.n	8004c34 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f919 	bl	8004e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f92a 	bl	8004e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00c      	beq.n	8004c5e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d007      	beq.n	8004c5e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f06f 0201 	mvn.w	r2, #1
 8004c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7fb fed7 	bl	8000a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00c      	beq.n	8004c82 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d007      	beq.n	8004c82 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fae3 	bl	8005248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00c      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d007      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f8fb 	bl	8004e9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f003 0320 	and.w	r3, r3, #32
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00c      	beq.n	8004cca <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f06f 0220 	mvn.w	r2, #32
 8004cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fab5 	bl	8005234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_TIM_ConfigClockSource+0x1c>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e0b4      	b.n	8004e58 <HAL_TIM_ConfigClockSource+0x186>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d0c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d14:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d26:	d03e      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0xd4>
 8004d28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d2c:	f200 8087 	bhi.w	8004e3e <HAL_TIM_ConfigClockSource+0x16c>
 8004d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d34:	f000 8086 	beq.w	8004e44 <HAL_TIM_ConfigClockSource+0x172>
 8004d38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d3c:	d87f      	bhi.n	8004e3e <HAL_TIM_ConfigClockSource+0x16c>
 8004d3e:	2b70      	cmp	r3, #112	@ 0x70
 8004d40:	d01a      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0xa6>
 8004d42:	2b70      	cmp	r3, #112	@ 0x70
 8004d44:	d87b      	bhi.n	8004e3e <HAL_TIM_ConfigClockSource+0x16c>
 8004d46:	2b60      	cmp	r3, #96	@ 0x60
 8004d48:	d050      	beq.n	8004dec <HAL_TIM_ConfigClockSource+0x11a>
 8004d4a:	2b60      	cmp	r3, #96	@ 0x60
 8004d4c:	d877      	bhi.n	8004e3e <HAL_TIM_ConfigClockSource+0x16c>
 8004d4e:	2b50      	cmp	r3, #80	@ 0x50
 8004d50:	d03c      	beq.n	8004dcc <HAL_TIM_ConfigClockSource+0xfa>
 8004d52:	2b50      	cmp	r3, #80	@ 0x50
 8004d54:	d873      	bhi.n	8004e3e <HAL_TIM_ConfigClockSource+0x16c>
 8004d56:	2b40      	cmp	r3, #64	@ 0x40
 8004d58:	d058      	beq.n	8004e0c <HAL_TIM_ConfigClockSource+0x13a>
 8004d5a:	2b40      	cmp	r3, #64	@ 0x40
 8004d5c:	d86f      	bhi.n	8004e3e <HAL_TIM_ConfigClockSource+0x16c>
 8004d5e:	2b30      	cmp	r3, #48	@ 0x30
 8004d60:	d064      	beq.n	8004e2c <HAL_TIM_ConfigClockSource+0x15a>
 8004d62:	2b30      	cmp	r3, #48	@ 0x30
 8004d64:	d86b      	bhi.n	8004e3e <HAL_TIM_ConfigClockSource+0x16c>
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	d060      	beq.n	8004e2c <HAL_TIM_ConfigClockSource+0x15a>
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	d867      	bhi.n	8004e3e <HAL_TIM_ConfigClockSource+0x16c>
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d05c      	beq.n	8004e2c <HAL_TIM_ConfigClockSource+0x15a>
 8004d72:	2b10      	cmp	r3, #16
 8004d74:	d05a      	beq.n	8004e2c <HAL_TIM_ConfigClockSource+0x15a>
 8004d76:	e062      	b.n	8004e3e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d88:	f000 f9b8 	bl	80050fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d9a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	609a      	str	r2, [r3, #8]
      break;
 8004da4:	e04f      	b.n	8004e46 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004db6:	f000 f9a1 	bl	80050fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dc8:	609a      	str	r2, [r3, #8]
      break;
 8004dca:	e03c      	b.n	8004e46 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dd8:	461a      	mov	r2, r3
 8004dda:	f000 f915 	bl	8005008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2150      	movs	r1, #80	@ 0x50
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 f96e 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 8004dea:	e02c      	b.n	8004e46 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004df8:	461a      	mov	r2, r3
 8004dfa:	f000 f934 	bl	8005066 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2160      	movs	r1, #96	@ 0x60
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 f95e 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 8004e0a:	e01c      	b.n	8004e46 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e18:	461a      	mov	r2, r3
 8004e1a:	f000 f8f5 	bl	8005008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2140      	movs	r1, #64	@ 0x40
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 f94e 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 8004e2a:	e00c      	b.n	8004e46 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4619      	mov	r1, r3
 8004e36:	4610      	mov	r0, r2
 8004e38:	f000 f945 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 8004e3c:	e003      	b.n	8004e46 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	73fb      	strb	r3, [r7, #15]
      break;
 8004e42:	e000      	b.n	8004e46 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a46      	ldr	r2, [pc, #280]	@ (8004fdc <TIM_Base_SetConfig+0x12c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d013      	beq.n	8004ef0 <TIM_Base_SetConfig+0x40>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ece:	d00f      	beq.n	8004ef0 <TIM_Base_SetConfig+0x40>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a43      	ldr	r2, [pc, #268]	@ (8004fe0 <TIM_Base_SetConfig+0x130>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00b      	beq.n	8004ef0 <TIM_Base_SetConfig+0x40>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a42      	ldr	r2, [pc, #264]	@ (8004fe4 <TIM_Base_SetConfig+0x134>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d007      	beq.n	8004ef0 <TIM_Base_SetConfig+0x40>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a41      	ldr	r2, [pc, #260]	@ (8004fe8 <TIM_Base_SetConfig+0x138>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d003      	beq.n	8004ef0 <TIM_Base_SetConfig+0x40>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a40      	ldr	r2, [pc, #256]	@ (8004fec <TIM_Base_SetConfig+0x13c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d108      	bne.n	8004f02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a35      	ldr	r2, [pc, #212]	@ (8004fdc <TIM_Base_SetConfig+0x12c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d02b      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f10:	d027      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a32      	ldr	r2, [pc, #200]	@ (8004fe0 <TIM_Base_SetConfig+0x130>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d023      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a31      	ldr	r2, [pc, #196]	@ (8004fe4 <TIM_Base_SetConfig+0x134>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01f      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a30      	ldr	r2, [pc, #192]	@ (8004fe8 <TIM_Base_SetConfig+0x138>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d01b      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a2f      	ldr	r2, [pc, #188]	@ (8004fec <TIM_Base_SetConfig+0x13c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d017      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a2e      	ldr	r2, [pc, #184]	@ (8004ff0 <TIM_Base_SetConfig+0x140>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d013      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ff4 <TIM_Base_SetConfig+0x144>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00f      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a2c      	ldr	r2, [pc, #176]	@ (8004ff8 <TIM_Base_SetConfig+0x148>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d00b      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8004ffc <TIM_Base_SetConfig+0x14c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d007      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a2a      	ldr	r2, [pc, #168]	@ (8005000 <TIM_Base_SetConfig+0x150>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d003      	beq.n	8004f62 <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a29      	ldr	r2, [pc, #164]	@ (8005004 <TIM_Base_SetConfig+0x154>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d108      	bne.n	8004f74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a10      	ldr	r2, [pc, #64]	@ (8004fdc <TIM_Base_SetConfig+0x12c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d003      	beq.n	8004fa8 <TIM_Base_SetConfig+0xf8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a12      	ldr	r2, [pc, #72]	@ (8004fec <TIM_Base_SetConfig+0x13c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d103      	bne.n	8004fb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d105      	bne.n	8004fce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f023 0201 	bic.w	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	611a      	str	r2, [r3, #16]
  }
}
 8004fce:	bf00      	nop
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40010000 	.word	0x40010000
 8004fe0:	40000400 	.word	0x40000400
 8004fe4:	40000800 	.word	0x40000800
 8004fe8:	40000c00 	.word	0x40000c00
 8004fec:	40010400 	.word	0x40010400
 8004ff0:	40014000 	.word	0x40014000
 8004ff4:	40014400 	.word	0x40014400
 8004ff8:	40014800 	.word	0x40014800
 8004ffc:	40001800 	.word	0x40001800
 8005000:	40001c00 	.word	0x40001c00
 8005004:	40002000 	.word	0x40002000

08005008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f023 0201 	bic.w	r2, r3, #1
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f023 030a 	bic.w	r3, r3, #10
 8005044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	621a      	str	r2, [r3, #32]
}
 800505a:	bf00      	nop
 800505c:	371c      	adds	r7, #28
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005066:	b480      	push	{r7}
 8005068:	b087      	sub	sp, #28
 800506a:	af00      	add	r7, sp, #0
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	f023 0210 	bic.w	r2, r3, #16
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005090:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	031b      	lsls	r3, r3, #12
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	621a      	str	r2, [r3, #32]
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b085      	sub	sp, #20
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f043 0307 	orr.w	r3, r3, #7
 80050e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	609a      	str	r2, [r3, #8]
}
 80050f0:	bf00      	nop
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005116:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	021a      	lsls	r2, r3, #8
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	431a      	orrs	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4313      	orrs	r3, r2
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	609a      	str	r2, [r3, #8]
}
 8005130:	bf00      	nop
 8005132:	371c      	adds	r7, #28
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005150:	2302      	movs	r3, #2
 8005152:	e05a      	b.n	800520a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800517a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a21      	ldr	r2, [pc, #132]	@ (8005218 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d022      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051a0:	d01d      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1d      	ldr	r2, [pc, #116]	@ (800521c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d018      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1b      	ldr	r2, [pc, #108]	@ (8005220 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005224 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00e      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a18      	ldr	r2, [pc, #96]	@ (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d009      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a17      	ldr	r2, [pc, #92]	@ (800522c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d004      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a15      	ldr	r2, [pc, #84]	@ (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d10c      	bne.n	80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40010000 	.word	0x40010000
 800521c:	40000400 	.word	0x40000400
 8005220:	40000800 	.word	0x40000800
 8005224:	40000c00 	.word	0x40000c00
 8005228:	40010400 	.word	0x40010400
 800522c:	40014000 	.word	0x40014000
 8005230:	40001800 	.word	0x40001800

08005234 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <std>:
 800525c:	2300      	movs	r3, #0
 800525e:	b510      	push	{r4, lr}
 8005260:	4604      	mov	r4, r0
 8005262:	e9c0 3300 	strd	r3, r3, [r0]
 8005266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800526a:	6083      	str	r3, [r0, #8]
 800526c:	8181      	strh	r1, [r0, #12]
 800526e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005270:	81c2      	strh	r2, [r0, #14]
 8005272:	6183      	str	r3, [r0, #24]
 8005274:	4619      	mov	r1, r3
 8005276:	2208      	movs	r2, #8
 8005278:	305c      	adds	r0, #92	@ 0x5c
 800527a:	f000 fa01 	bl	8005680 <memset>
 800527e:	4b0d      	ldr	r3, [pc, #52]	@ (80052b4 <std+0x58>)
 8005280:	6263      	str	r3, [r4, #36]	@ 0x24
 8005282:	4b0d      	ldr	r3, [pc, #52]	@ (80052b8 <std+0x5c>)
 8005284:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005286:	4b0d      	ldr	r3, [pc, #52]	@ (80052bc <std+0x60>)
 8005288:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800528a:	4b0d      	ldr	r3, [pc, #52]	@ (80052c0 <std+0x64>)
 800528c:	6323      	str	r3, [r4, #48]	@ 0x30
 800528e:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <std+0x68>)
 8005290:	6224      	str	r4, [r4, #32]
 8005292:	429c      	cmp	r4, r3
 8005294:	d006      	beq.n	80052a4 <std+0x48>
 8005296:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800529a:	4294      	cmp	r4, r2
 800529c:	d002      	beq.n	80052a4 <std+0x48>
 800529e:	33d0      	adds	r3, #208	@ 0xd0
 80052a0:	429c      	cmp	r4, r3
 80052a2:	d105      	bne.n	80052b0 <std+0x54>
 80052a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80052a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052ac:	f000 ba60 	b.w	8005770 <__retarget_lock_init_recursive>
 80052b0:	bd10      	pop	{r4, pc}
 80052b2:	bf00      	nop
 80052b4:	080054d1 	.word	0x080054d1
 80052b8:	080054f3 	.word	0x080054f3
 80052bc:	0800552b 	.word	0x0800552b
 80052c0:	0800554f 	.word	0x0800554f
 80052c4:	2000034c 	.word	0x2000034c

080052c8 <stdio_exit_handler>:
 80052c8:	4a02      	ldr	r2, [pc, #8]	@ (80052d4 <stdio_exit_handler+0xc>)
 80052ca:	4903      	ldr	r1, [pc, #12]	@ (80052d8 <stdio_exit_handler+0x10>)
 80052cc:	4803      	ldr	r0, [pc, #12]	@ (80052dc <stdio_exit_handler+0x14>)
 80052ce:	f000 b869 	b.w	80053a4 <_fwalk_sglue>
 80052d2:	bf00      	nop
 80052d4:	2000000c 	.word	0x2000000c
 80052d8:	0800600d 	.word	0x0800600d
 80052dc:	2000001c 	.word	0x2000001c

080052e0 <cleanup_stdio>:
 80052e0:	6841      	ldr	r1, [r0, #4]
 80052e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <cleanup_stdio+0x34>)
 80052e4:	4299      	cmp	r1, r3
 80052e6:	b510      	push	{r4, lr}
 80052e8:	4604      	mov	r4, r0
 80052ea:	d001      	beq.n	80052f0 <cleanup_stdio+0x10>
 80052ec:	f000 fe8e 	bl	800600c <_fflush_r>
 80052f0:	68a1      	ldr	r1, [r4, #8]
 80052f2:	4b09      	ldr	r3, [pc, #36]	@ (8005318 <cleanup_stdio+0x38>)
 80052f4:	4299      	cmp	r1, r3
 80052f6:	d002      	beq.n	80052fe <cleanup_stdio+0x1e>
 80052f8:	4620      	mov	r0, r4
 80052fa:	f000 fe87 	bl	800600c <_fflush_r>
 80052fe:	68e1      	ldr	r1, [r4, #12]
 8005300:	4b06      	ldr	r3, [pc, #24]	@ (800531c <cleanup_stdio+0x3c>)
 8005302:	4299      	cmp	r1, r3
 8005304:	d004      	beq.n	8005310 <cleanup_stdio+0x30>
 8005306:	4620      	mov	r0, r4
 8005308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800530c:	f000 be7e 	b.w	800600c <_fflush_r>
 8005310:	bd10      	pop	{r4, pc}
 8005312:	bf00      	nop
 8005314:	2000034c 	.word	0x2000034c
 8005318:	200003b4 	.word	0x200003b4
 800531c:	2000041c 	.word	0x2000041c

08005320 <global_stdio_init.part.0>:
 8005320:	b510      	push	{r4, lr}
 8005322:	4b0b      	ldr	r3, [pc, #44]	@ (8005350 <global_stdio_init.part.0+0x30>)
 8005324:	4c0b      	ldr	r4, [pc, #44]	@ (8005354 <global_stdio_init.part.0+0x34>)
 8005326:	4a0c      	ldr	r2, [pc, #48]	@ (8005358 <global_stdio_init.part.0+0x38>)
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	4620      	mov	r0, r4
 800532c:	2200      	movs	r2, #0
 800532e:	2104      	movs	r1, #4
 8005330:	f7ff ff94 	bl	800525c <std>
 8005334:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005338:	2201      	movs	r2, #1
 800533a:	2109      	movs	r1, #9
 800533c:	f7ff ff8e 	bl	800525c <std>
 8005340:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005344:	2202      	movs	r2, #2
 8005346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800534a:	2112      	movs	r1, #18
 800534c:	f7ff bf86 	b.w	800525c <std>
 8005350:	20000484 	.word	0x20000484
 8005354:	2000034c 	.word	0x2000034c
 8005358:	080052c9 	.word	0x080052c9

0800535c <__sfp_lock_acquire>:
 800535c:	4801      	ldr	r0, [pc, #4]	@ (8005364 <__sfp_lock_acquire+0x8>)
 800535e:	f000 ba08 	b.w	8005772 <__retarget_lock_acquire_recursive>
 8005362:	bf00      	nop
 8005364:	2000048d 	.word	0x2000048d

08005368 <__sfp_lock_release>:
 8005368:	4801      	ldr	r0, [pc, #4]	@ (8005370 <__sfp_lock_release+0x8>)
 800536a:	f000 ba03 	b.w	8005774 <__retarget_lock_release_recursive>
 800536e:	bf00      	nop
 8005370:	2000048d 	.word	0x2000048d

08005374 <__sinit>:
 8005374:	b510      	push	{r4, lr}
 8005376:	4604      	mov	r4, r0
 8005378:	f7ff fff0 	bl	800535c <__sfp_lock_acquire>
 800537c:	6a23      	ldr	r3, [r4, #32]
 800537e:	b11b      	cbz	r3, 8005388 <__sinit+0x14>
 8005380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005384:	f7ff bff0 	b.w	8005368 <__sfp_lock_release>
 8005388:	4b04      	ldr	r3, [pc, #16]	@ (800539c <__sinit+0x28>)
 800538a:	6223      	str	r3, [r4, #32]
 800538c:	4b04      	ldr	r3, [pc, #16]	@ (80053a0 <__sinit+0x2c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1f5      	bne.n	8005380 <__sinit+0xc>
 8005394:	f7ff ffc4 	bl	8005320 <global_stdio_init.part.0>
 8005398:	e7f2      	b.n	8005380 <__sinit+0xc>
 800539a:	bf00      	nop
 800539c:	080052e1 	.word	0x080052e1
 80053a0:	20000484 	.word	0x20000484

080053a4 <_fwalk_sglue>:
 80053a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053a8:	4607      	mov	r7, r0
 80053aa:	4688      	mov	r8, r1
 80053ac:	4614      	mov	r4, r2
 80053ae:	2600      	movs	r6, #0
 80053b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053b4:	f1b9 0901 	subs.w	r9, r9, #1
 80053b8:	d505      	bpl.n	80053c6 <_fwalk_sglue+0x22>
 80053ba:	6824      	ldr	r4, [r4, #0]
 80053bc:	2c00      	cmp	r4, #0
 80053be:	d1f7      	bne.n	80053b0 <_fwalk_sglue+0xc>
 80053c0:	4630      	mov	r0, r6
 80053c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053c6:	89ab      	ldrh	r3, [r5, #12]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d907      	bls.n	80053dc <_fwalk_sglue+0x38>
 80053cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053d0:	3301      	adds	r3, #1
 80053d2:	d003      	beq.n	80053dc <_fwalk_sglue+0x38>
 80053d4:	4629      	mov	r1, r5
 80053d6:	4638      	mov	r0, r7
 80053d8:	47c0      	blx	r8
 80053da:	4306      	orrs	r6, r0
 80053dc:	3568      	adds	r5, #104	@ 0x68
 80053de:	e7e9      	b.n	80053b4 <_fwalk_sglue+0x10>

080053e0 <iprintf>:
 80053e0:	b40f      	push	{r0, r1, r2, r3}
 80053e2:	b507      	push	{r0, r1, r2, lr}
 80053e4:	4906      	ldr	r1, [pc, #24]	@ (8005400 <iprintf+0x20>)
 80053e6:	ab04      	add	r3, sp, #16
 80053e8:	6808      	ldr	r0, [r1, #0]
 80053ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80053ee:	6881      	ldr	r1, [r0, #8]
 80053f0:	9301      	str	r3, [sp, #4]
 80053f2:	f000 fae3 	bl	80059bc <_vfiprintf_r>
 80053f6:	b003      	add	sp, #12
 80053f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80053fc:	b004      	add	sp, #16
 80053fe:	4770      	bx	lr
 8005400:	20000018 	.word	0x20000018

08005404 <putchar>:
 8005404:	4b02      	ldr	r3, [pc, #8]	@ (8005410 <putchar+0xc>)
 8005406:	4601      	mov	r1, r0
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	6882      	ldr	r2, [r0, #8]
 800540c:	f000 be88 	b.w	8006120 <_putc_r>
 8005410:	20000018 	.word	0x20000018

08005414 <_puts_r>:
 8005414:	6a03      	ldr	r3, [r0, #32]
 8005416:	b570      	push	{r4, r5, r6, lr}
 8005418:	6884      	ldr	r4, [r0, #8]
 800541a:	4605      	mov	r5, r0
 800541c:	460e      	mov	r6, r1
 800541e:	b90b      	cbnz	r3, 8005424 <_puts_r+0x10>
 8005420:	f7ff ffa8 	bl	8005374 <__sinit>
 8005424:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005426:	07db      	lsls	r3, r3, #31
 8005428:	d405      	bmi.n	8005436 <_puts_r+0x22>
 800542a:	89a3      	ldrh	r3, [r4, #12]
 800542c:	0598      	lsls	r0, r3, #22
 800542e:	d402      	bmi.n	8005436 <_puts_r+0x22>
 8005430:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005432:	f000 f99e 	bl	8005772 <__retarget_lock_acquire_recursive>
 8005436:	89a3      	ldrh	r3, [r4, #12]
 8005438:	0719      	lsls	r1, r3, #28
 800543a:	d502      	bpl.n	8005442 <_puts_r+0x2e>
 800543c:	6923      	ldr	r3, [r4, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d135      	bne.n	80054ae <_puts_r+0x9a>
 8005442:	4621      	mov	r1, r4
 8005444:	4628      	mov	r0, r5
 8005446:	f000 f8c5 	bl	80055d4 <__swsetup_r>
 800544a:	b380      	cbz	r0, 80054ae <_puts_r+0x9a>
 800544c:	f04f 35ff 	mov.w	r5, #4294967295
 8005450:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005452:	07da      	lsls	r2, r3, #31
 8005454:	d405      	bmi.n	8005462 <_puts_r+0x4e>
 8005456:	89a3      	ldrh	r3, [r4, #12]
 8005458:	059b      	lsls	r3, r3, #22
 800545a:	d402      	bmi.n	8005462 <_puts_r+0x4e>
 800545c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800545e:	f000 f989 	bl	8005774 <__retarget_lock_release_recursive>
 8005462:	4628      	mov	r0, r5
 8005464:	bd70      	pop	{r4, r5, r6, pc}
 8005466:	2b00      	cmp	r3, #0
 8005468:	da04      	bge.n	8005474 <_puts_r+0x60>
 800546a:	69a2      	ldr	r2, [r4, #24]
 800546c:	429a      	cmp	r2, r3
 800546e:	dc17      	bgt.n	80054a0 <_puts_r+0x8c>
 8005470:	290a      	cmp	r1, #10
 8005472:	d015      	beq.n	80054a0 <_puts_r+0x8c>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	6022      	str	r2, [r4, #0]
 800547a:	7019      	strb	r1, [r3, #0]
 800547c:	68a3      	ldr	r3, [r4, #8]
 800547e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005482:	3b01      	subs	r3, #1
 8005484:	60a3      	str	r3, [r4, #8]
 8005486:	2900      	cmp	r1, #0
 8005488:	d1ed      	bne.n	8005466 <_puts_r+0x52>
 800548a:	2b00      	cmp	r3, #0
 800548c:	da11      	bge.n	80054b2 <_puts_r+0x9e>
 800548e:	4622      	mov	r2, r4
 8005490:	210a      	movs	r1, #10
 8005492:	4628      	mov	r0, r5
 8005494:	f000 f85f 	bl	8005556 <__swbuf_r>
 8005498:	3001      	adds	r0, #1
 800549a:	d0d7      	beq.n	800544c <_puts_r+0x38>
 800549c:	250a      	movs	r5, #10
 800549e:	e7d7      	b.n	8005450 <_puts_r+0x3c>
 80054a0:	4622      	mov	r2, r4
 80054a2:	4628      	mov	r0, r5
 80054a4:	f000 f857 	bl	8005556 <__swbuf_r>
 80054a8:	3001      	adds	r0, #1
 80054aa:	d1e7      	bne.n	800547c <_puts_r+0x68>
 80054ac:	e7ce      	b.n	800544c <_puts_r+0x38>
 80054ae:	3e01      	subs	r6, #1
 80054b0:	e7e4      	b.n	800547c <_puts_r+0x68>
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	1c5a      	adds	r2, r3, #1
 80054b6:	6022      	str	r2, [r4, #0]
 80054b8:	220a      	movs	r2, #10
 80054ba:	701a      	strb	r2, [r3, #0]
 80054bc:	e7ee      	b.n	800549c <_puts_r+0x88>
	...

080054c0 <puts>:
 80054c0:	4b02      	ldr	r3, [pc, #8]	@ (80054cc <puts+0xc>)
 80054c2:	4601      	mov	r1, r0
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	f7ff bfa5 	b.w	8005414 <_puts_r>
 80054ca:	bf00      	nop
 80054cc:	20000018 	.word	0x20000018

080054d0 <__sread>:
 80054d0:	b510      	push	{r4, lr}
 80054d2:	460c      	mov	r4, r1
 80054d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d8:	f000 f8fc 	bl	80056d4 <_read_r>
 80054dc:	2800      	cmp	r0, #0
 80054de:	bfab      	itete	ge
 80054e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80054e2:	89a3      	ldrhlt	r3, [r4, #12]
 80054e4:	181b      	addge	r3, r3, r0
 80054e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80054ea:	bfac      	ite	ge
 80054ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80054ee:	81a3      	strhlt	r3, [r4, #12]
 80054f0:	bd10      	pop	{r4, pc}

080054f2 <__swrite>:
 80054f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f6:	461f      	mov	r7, r3
 80054f8:	898b      	ldrh	r3, [r1, #12]
 80054fa:	05db      	lsls	r3, r3, #23
 80054fc:	4605      	mov	r5, r0
 80054fe:	460c      	mov	r4, r1
 8005500:	4616      	mov	r6, r2
 8005502:	d505      	bpl.n	8005510 <__swrite+0x1e>
 8005504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005508:	2302      	movs	r3, #2
 800550a:	2200      	movs	r2, #0
 800550c:	f000 f8d0 	bl	80056b0 <_lseek_r>
 8005510:	89a3      	ldrh	r3, [r4, #12]
 8005512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005516:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800551a:	81a3      	strh	r3, [r4, #12]
 800551c:	4632      	mov	r2, r6
 800551e:	463b      	mov	r3, r7
 8005520:	4628      	mov	r0, r5
 8005522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005526:	f000 b8e7 	b.w	80056f8 <_write_r>

0800552a <__sseek>:
 800552a:	b510      	push	{r4, lr}
 800552c:	460c      	mov	r4, r1
 800552e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005532:	f000 f8bd 	bl	80056b0 <_lseek_r>
 8005536:	1c43      	adds	r3, r0, #1
 8005538:	89a3      	ldrh	r3, [r4, #12]
 800553a:	bf15      	itete	ne
 800553c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800553e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005542:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005546:	81a3      	strheq	r3, [r4, #12]
 8005548:	bf18      	it	ne
 800554a:	81a3      	strhne	r3, [r4, #12]
 800554c:	bd10      	pop	{r4, pc}

0800554e <__sclose>:
 800554e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005552:	f000 b89d 	b.w	8005690 <_close_r>

08005556 <__swbuf_r>:
 8005556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005558:	460e      	mov	r6, r1
 800555a:	4614      	mov	r4, r2
 800555c:	4605      	mov	r5, r0
 800555e:	b118      	cbz	r0, 8005568 <__swbuf_r+0x12>
 8005560:	6a03      	ldr	r3, [r0, #32]
 8005562:	b90b      	cbnz	r3, 8005568 <__swbuf_r+0x12>
 8005564:	f7ff ff06 	bl	8005374 <__sinit>
 8005568:	69a3      	ldr	r3, [r4, #24]
 800556a:	60a3      	str	r3, [r4, #8]
 800556c:	89a3      	ldrh	r3, [r4, #12]
 800556e:	071a      	lsls	r2, r3, #28
 8005570:	d501      	bpl.n	8005576 <__swbuf_r+0x20>
 8005572:	6923      	ldr	r3, [r4, #16]
 8005574:	b943      	cbnz	r3, 8005588 <__swbuf_r+0x32>
 8005576:	4621      	mov	r1, r4
 8005578:	4628      	mov	r0, r5
 800557a:	f000 f82b 	bl	80055d4 <__swsetup_r>
 800557e:	b118      	cbz	r0, 8005588 <__swbuf_r+0x32>
 8005580:	f04f 37ff 	mov.w	r7, #4294967295
 8005584:	4638      	mov	r0, r7
 8005586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	6922      	ldr	r2, [r4, #16]
 800558c:	1a98      	subs	r0, r3, r2
 800558e:	6963      	ldr	r3, [r4, #20]
 8005590:	b2f6      	uxtb	r6, r6
 8005592:	4283      	cmp	r3, r0
 8005594:	4637      	mov	r7, r6
 8005596:	dc05      	bgt.n	80055a4 <__swbuf_r+0x4e>
 8005598:	4621      	mov	r1, r4
 800559a:	4628      	mov	r0, r5
 800559c:	f000 fd36 	bl	800600c <_fflush_r>
 80055a0:	2800      	cmp	r0, #0
 80055a2:	d1ed      	bne.n	8005580 <__swbuf_r+0x2a>
 80055a4:	68a3      	ldr	r3, [r4, #8]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	60a3      	str	r3, [r4, #8]
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	6022      	str	r2, [r4, #0]
 80055b0:	701e      	strb	r6, [r3, #0]
 80055b2:	6962      	ldr	r2, [r4, #20]
 80055b4:	1c43      	adds	r3, r0, #1
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d004      	beq.n	80055c4 <__swbuf_r+0x6e>
 80055ba:	89a3      	ldrh	r3, [r4, #12]
 80055bc:	07db      	lsls	r3, r3, #31
 80055be:	d5e1      	bpl.n	8005584 <__swbuf_r+0x2e>
 80055c0:	2e0a      	cmp	r6, #10
 80055c2:	d1df      	bne.n	8005584 <__swbuf_r+0x2e>
 80055c4:	4621      	mov	r1, r4
 80055c6:	4628      	mov	r0, r5
 80055c8:	f000 fd20 	bl	800600c <_fflush_r>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d0d9      	beq.n	8005584 <__swbuf_r+0x2e>
 80055d0:	e7d6      	b.n	8005580 <__swbuf_r+0x2a>
	...

080055d4 <__swsetup_r>:
 80055d4:	b538      	push	{r3, r4, r5, lr}
 80055d6:	4b29      	ldr	r3, [pc, #164]	@ (800567c <__swsetup_r+0xa8>)
 80055d8:	4605      	mov	r5, r0
 80055da:	6818      	ldr	r0, [r3, #0]
 80055dc:	460c      	mov	r4, r1
 80055de:	b118      	cbz	r0, 80055e8 <__swsetup_r+0x14>
 80055e0:	6a03      	ldr	r3, [r0, #32]
 80055e2:	b90b      	cbnz	r3, 80055e8 <__swsetup_r+0x14>
 80055e4:	f7ff fec6 	bl	8005374 <__sinit>
 80055e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055ec:	0719      	lsls	r1, r3, #28
 80055ee:	d422      	bmi.n	8005636 <__swsetup_r+0x62>
 80055f0:	06da      	lsls	r2, r3, #27
 80055f2:	d407      	bmi.n	8005604 <__swsetup_r+0x30>
 80055f4:	2209      	movs	r2, #9
 80055f6:	602a      	str	r2, [r5, #0]
 80055f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055fc:	81a3      	strh	r3, [r4, #12]
 80055fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005602:	e033      	b.n	800566c <__swsetup_r+0x98>
 8005604:	0758      	lsls	r0, r3, #29
 8005606:	d512      	bpl.n	800562e <__swsetup_r+0x5a>
 8005608:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800560a:	b141      	cbz	r1, 800561e <__swsetup_r+0x4a>
 800560c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005610:	4299      	cmp	r1, r3
 8005612:	d002      	beq.n	800561a <__swsetup_r+0x46>
 8005614:	4628      	mov	r0, r5
 8005616:	f000 f8af 	bl	8005778 <_free_r>
 800561a:	2300      	movs	r3, #0
 800561c:	6363      	str	r3, [r4, #52]	@ 0x34
 800561e:	89a3      	ldrh	r3, [r4, #12]
 8005620:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005624:	81a3      	strh	r3, [r4, #12]
 8005626:	2300      	movs	r3, #0
 8005628:	6063      	str	r3, [r4, #4]
 800562a:	6923      	ldr	r3, [r4, #16]
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	89a3      	ldrh	r3, [r4, #12]
 8005630:	f043 0308 	orr.w	r3, r3, #8
 8005634:	81a3      	strh	r3, [r4, #12]
 8005636:	6923      	ldr	r3, [r4, #16]
 8005638:	b94b      	cbnz	r3, 800564e <__swsetup_r+0x7a>
 800563a:	89a3      	ldrh	r3, [r4, #12]
 800563c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005644:	d003      	beq.n	800564e <__swsetup_r+0x7a>
 8005646:	4621      	mov	r1, r4
 8005648:	4628      	mov	r0, r5
 800564a:	f000 fd2d 	bl	80060a8 <__smakebuf_r>
 800564e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005652:	f013 0201 	ands.w	r2, r3, #1
 8005656:	d00a      	beq.n	800566e <__swsetup_r+0x9a>
 8005658:	2200      	movs	r2, #0
 800565a:	60a2      	str	r2, [r4, #8]
 800565c:	6962      	ldr	r2, [r4, #20]
 800565e:	4252      	negs	r2, r2
 8005660:	61a2      	str	r2, [r4, #24]
 8005662:	6922      	ldr	r2, [r4, #16]
 8005664:	b942      	cbnz	r2, 8005678 <__swsetup_r+0xa4>
 8005666:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800566a:	d1c5      	bne.n	80055f8 <__swsetup_r+0x24>
 800566c:	bd38      	pop	{r3, r4, r5, pc}
 800566e:	0799      	lsls	r1, r3, #30
 8005670:	bf58      	it	pl
 8005672:	6962      	ldrpl	r2, [r4, #20]
 8005674:	60a2      	str	r2, [r4, #8]
 8005676:	e7f4      	b.n	8005662 <__swsetup_r+0x8e>
 8005678:	2000      	movs	r0, #0
 800567a:	e7f7      	b.n	800566c <__swsetup_r+0x98>
 800567c:	20000018 	.word	0x20000018

08005680 <memset>:
 8005680:	4402      	add	r2, r0
 8005682:	4603      	mov	r3, r0
 8005684:	4293      	cmp	r3, r2
 8005686:	d100      	bne.n	800568a <memset+0xa>
 8005688:	4770      	bx	lr
 800568a:	f803 1b01 	strb.w	r1, [r3], #1
 800568e:	e7f9      	b.n	8005684 <memset+0x4>

08005690 <_close_r>:
 8005690:	b538      	push	{r3, r4, r5, lr}
 8005692:	4d06      	ldr	r5, [pc, #24]	@ (80056ac <_close_r+0x1c>)
 8005694:	2300      	movs	r3, #0
 8005696:	4604      	mov	r4, r0
 8005698:	4608      	mov	r0, r1
 800569a:	602b      	str	r3, [r5, #0]
 800569c:	f7fc f9cd 	bl	8001a3a <_close>
 80056a0:	1c43      	adds	r3, r0, #1
 80056a2:	d102      	bne.n	80056aa <_close_r+0x1a>
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	b103      	cbz	r3, 80056aa <_close_r+0x1a>
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
 80056ac:	20000488 	.word	0x20000488

080056b0 <_lseek_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	4d07      	ldr	r5, [pc, #28]	@ (80056d0 <_lseek_r+0x20>)
 80056b4:	4604      	mov	r4, r0
 80056b6:	4608      	mov	r0, r1
 80056b8:	4611      	mov	r1, r2
 80056ba:	2200      	movs	r2, #0
 80056bc:	602a      	str	r2, [r5, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	f7fc f9e2 	bl	8001a88 <_lseek>
 80056c4:	1c43      	adds	r3, r0, #1
 80056c6:	d102      	bne.n	80056ce <_lseek_r+0x1e>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	b103      	cbz	r3, 80056ce <_lseek_r+0x1e>
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	bd38      	pop	{r3, r4, r5, pc}
 80056d0:	20000488 	.word	0x20000488

080056d4 <_read_r>:
 80056d4:	b538      	push	{r3, r4, r5, lr}
 80056d6:	4d07      	ldr	r5, [pc, #28]	@ (80056f4 <_read_r+0x20>)
 80056d8:	4604      	mov	r4, r0
 80056da:	4608      	mov	r0, r1
 80056dc:	4611      	mov	r1, r2
 80056de:	2200      	movs	r2, #0
 80056e0:	602a      	str	r2, [r5, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	f7fc f970 	bl	80019c8 <_read>
 80056e8:	1c43      	adds	r3, r0, #1
 80056ea:	d102      	bne.n	80056f2 <_read_r+0x1e>
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	b103      	cbz	r3, 80056f2 <_read_r+0x1e>
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	bd38      	pop	{r3, r4, r5, pc}
 80056f4:	20000488 	.word	0x20000488

080056f8 <_write_r>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	4d07      	ldr	r5, [pc, #28]	@ (8005718 <_write_r+0x20>)
 80056fc:	4604      	mov	r4, r0
 80056fe:	4608      	mov	r0, r1
 8005700:	4611      	mov	r1, r2
 8005702:	2200      	movs	r2, #0
 8005704:	602a      	str	r2, [r5, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	f7fc f97b 	bl	8001a02 <_write>
 800570c:	1c43      	adds	r3, r0, #1
 800570e:	d102      	bne.n	8005716 <_write_r+0x1e>
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	b103      	cbz	r3, 8005716 <_write_r+0x1e>
 8005714:	6023      	str	r3, [r4, #0]
 8005716:	bd38      	pop	{r3, r4, r5, pc}
 8005718:	20000488 	.word	0x20000488

0800571c <__errno>:
 800571c:	4b01      	ldr	r3, [pc, #4]	@ (8005724 <__errno+0x8>)
 800571e:	6818      	ldr	r0, [r3, #0]
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	20000018 	.word	0x20000018

08005728 <__libc_init_array>:
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	4d0d      	ldr	r5, [pc, #52]	@ (8005760 <__libc_init_array+0x38>)
 800572c:	4c0d      	ldr	r4, [pc, #52]	@ (8005764 <__libc_init_array+0x3c>)
 800572e:	1b64      	subs	r4, r4, r5
 8005730:	10a4      	asrs	r4, r4, #2
 8005732:	2600      	movs	r6, #0
 8005734:	42a6      	cmp	r6, r4
 8005736:	d109      	bne.n	800574c <__libc_init_array+0x24>
 8005738:	4d0b      	ldr	r5, [pc, #44]	@ (8005768 <__libc_init_array+0x40>)
 800573a:	4c0c      	ldr	r4, [pc, #48]	@ (800576c <__libc_init_array+0x44>)
 800573c:	f000 fd56 	bl	80061ec <_init>
 8005740:	1b64      	subs	r4, r4, r5
 8005742:	10a4      	asrs	r4, r4, #2
 8005744:	2600      	movs	r6, #0
 8005746:	42a6      	cmp	r6, r4
 8005748:	d105      	bne.n	8005756 <__libc_init_array+0x2e>
 800574a:	bd70      	pop	{r4, r5, r6, pc}
 800574c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005750:	4798      	blx	r3
 8005752:	3601      	adds	r6, #1
 8005754:	e7ee      	b.n	8005734 <__libc_init_array+0xc>
 8005756:	f855 3b04 	ldr.w	r3, [r5], #4
 800575a:	4798      	blx	r3
 800575c:	3601      	adds	r6, #1
 800575e:	e7f2      	b.n	8005746 <__libc_init_array+0x1e>
 8005760:	080062a0 	.word	0x080062a0
 8005764:	080062a0 	.word	0x080062a0
 8005768:	080062a0 	.word	0x080062a0
 800576c:	080062a4 	.word	0x080062a4

08005770 <__retarget_lock_init_recursive>:
 8005770:	4770      	bx	lr

08005772 <__retarget_lock_acquire_recursive>:
 8005772:	4770      	bx	lr

08005774 <__retarget_lock_release_recursive>:
 8005774:	4770      	bx	lr
	...

08005778 <_free_r>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	4605      	mov	r5, r0
 800577c:	2900      	cmp	r1, #0
 800577e:	d041      	beq.n	8005804 <_free_r+0x8c>
 8005780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005784:	1f0c      	subs	r4, r1, #4
 8005786:	2b00      	cmp	r3, #0
 8005788:	bfb8      	it	lt
 800578a:	18e4      	addlt	r4, r4, r3
 800578c:	f000 f8e0 	bl	8005950 <__malloc_lock>
 8005790:	4a1d      	ldr	r2, [pc, #116]	@ (8005808 <_free_r+0x90>)
 8005792:	6813      	ldr	r3, [r2, #0]
 8005794:	b933      	cbnz	r3, 80057a4 <_free_r+0x2c>
 8005796:	6063      	str	r3, [r4, #4]
 8005798:	6014      	str	r4, [r2, #0]
 800579a:	4628      	mov	r0, r5
 800579c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057a0:	f000 b8dc 	b.w	800595c <__malloc_unlock>
 80057a4:	42a3      	cmp	r3, r4
 80057a6:	d908      	bls.n	80057ba <_free_r+0x42>
 80057a8:	6820      	ldr	r0, [r4, #0]
 80057aa:	1821      	adds	r1, r4, r0
 80057ac:	428b      	cmp	r3, r1
 80057ae:	bf01      	itttt	eq
 80057b0:	6819      	ldreq	r1, [r3, #0]
 80057b2:	685b      	ldreq	r3, [r3, #4]
 80057b4:	1809      	addeq	r1, r1, r0
 80057b6:	6021      	streq	r1, [r4, #0]
 80057b8:	e7ed      	b.n	8005796 <_free_r+0x1e>
 80057ba:	461a      	mov	r2, r3
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	b10b      	cbz	r3, 80057c4 <_free_r+0x4c>
 80057c0:	42a3      	cmp	r3, r4
 80057c2:	d9fa      	bls.n	80057ba <_free_r+0x42>
 80057c4:	6811      	ldr	r1, [r2, #0]
 80057c6:	1850      	adds	r0, r2, r1
 80057c8:	42a0      	cmp	r0, r4
 80057ca:	d10b      	bne.n	80057e4 <_free_r+0x6c>
 80057cc:	6820      	ldr	r0, [r4, #0]
 80057ce:	4401      	add	r1, r0
 80057d0:	1850      	adds	r0, r2, r1
 80057d2:	4283      	cmp	r3, r0
 80057d4:	6011      	str	r1, [r2, #0]
 80057d6:	d1e0      	bne.n	800579a <_free_r+0x22>
 80057d8:	6818      	ldr	r0, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	6053      	str	r3, [r2, #4]
 80057de:	4408      	add	r0, r1
 80057e0:	6010      	str	r0, [r2, #0]
 80057e2:	e7da      	b.n	800579a <_free_r+0x22>
 80057e4:	d902      	bls.n	80057ec <_free_r+0x74>
 80057e6:	230c      	movs	r3, #12
 80057e8:	602b      	str	r3, [r5, #0]
 80057ea:	e7d6      	b.n	800579a <_free_r+0x22>
 80057ec:	6820      	ldr	r0, [r4, #0]
 80057ee:	1821      	adds	r1, r4, r0
 80057f0:	428b      	cmp	r3, r1
 80057f2:	bf04      	itt	eq
 80057f4:	6819      	ldreq	r1, [r3, #0]
 80057f6:	685b      	ldreq	r3, [r3, #4]
 80057f8:	6063      	str	r3, [r4, #4]
 80057fa:	bf04      	itt	eq
 80057fc:	1809      	addeq	r1, r1, r0
 80057fe:	6021      	streq	r1, [r4, #0]
 8005800:	6054      	str	r4, [r2, #4]
 8005802:	e7ca      	b.n	800579a <_free_r+0x22>
 8005804:	bd38      	pop	{r3, r4, r5, pc}
 8005806:	bf00      	nop
 8005808:	20000494 	.word	0x20000494

0800580c <sbrk_aligned>:
 800580c:	b570      	push	{r4, r5, r6, lr}
 800580e:	4e0f      	ldr	r6, [pc, #60]	@ (800584c <sbrk_aligned+0x40>)
 8005810:	460c      	mov	r4, r1
 8005812:	6831      	ldr	r1, [r6, #0]
 8005814:	4605      	mov	r5, r0
 8005816:	b911      	cbnz	r1, 800581e <sbrk_aligned+0x12>
 8005818:	f000 fcd8 	bl	80061cc <_sbrk_r>
 800581c:	6030      	str	r0, [r6, #0]
 800581e:	4621      	mov	r1, r4
 8005820:	4628      	mov	r0, r5
 8005822:	f000 fcd3 	bl	80061cc <_sbrk_r>
 8005826:	1c43      	adds	r3, r0, #1
 8005828:	d103      	bne.n	8005832 <sbrk_aligned+0x26>
 800582a:	f04f 34ff 	mov.w	r4, #4294967295
 800582e:	4620      	mov	r0, r4
 8005830:	bd70      	pop	{r4, r5, r6, pc}
 8005832:	1cc4      	adds	r4, r0, #3
 8005834:	f024 0403 	bic.w	r4, r4, #3
 8005838:	42a0      	cmp	r0, r4
 800583a:	d0f8      	beq.n	800582e <sbrk_aligned+0x22>
 800583c:	1a21      	subs	r1, r4, r0
 800583e:	4628      	mov	r0, r5
 8005840:	f000 fcc4 	bl	80061cc <_sbrk_r>
 8005844:	3001      	adds	r0, #1
 8005846:	d1f2      	bne.n	800582e <sbrk_aligned+0x22>
 8005848:	e7ef      	b.n	800582a <sbrk_aligned+0x1e>
 800584a:	bf00      	nop
 800584c:	20000490 	.word	0x20000490

08005850 <_malloc_r>:
 8005850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005854:	1ccd      	adds	r5, r1, #3
 8005856:	f025 0503 	bic.w	r5, r5, #3
 800585a:	3508      	adds	r5, #8
 800585c:	2d0c      	cmp	r5, #12
 800585e:	bf38      	it	cc
 8005860:	250c      	movcc	r5, #12
 8005862:	2d00      	cmp	r5, #0
 8005864:	4606      	mov	r6, r0
 8005866:	db01      	blt.n	800586c <_malloc_r+0x1c>
 8005868:	42a9      	cmp	r1, r5
 800586a:	d904      	bls.n	8005876 <_malloc_r+0x26>
 800586c:	230c      	movs	r3, #12
 800586e:	6033      	str	r3, [r6, #0]
 8005870:	2000      	movs	r0, #0
 8005872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005876:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800594c <_malloc_r+0xfc>
 800587a:	f000 f869 	bl	8005950 <__malloc_lock>
 800587e:	f8d8 3000 	ldr.w	r3, [r8]
 8005882:	461c      	mov	r4, r3
 8005884:	bb44      	cbnz	r4, 80058d8 <_malloc_r+0x88>
 8005886:	4629      	mov	r1, r5
 8005888:	4630      	mov	r0, r6
 800588a:	f7ff ffbf 	bl	800580c <sbrk_aligned>
 800588e:	1c43      	adds	r3, r0, #1
 8005890:	4604      	mov	r4, r0
 8005892:	d158      	bne.n	8005946 <_malloc_r+0xf6>
 8005894:	f8d8 4000 	ldr.w	r4, [r8]
 8005898:	4627      	mov	r7, r4
 800589a:	2f00      	cmp	r7, #0
 800589c:	d143      	bne.n	8005926 <_malloc_r+0xd6>
 800589e:	2c00      	cmp	r4, #0
 80058a0:	d04b      	beq.n	800593a <_malloc_r+0xea>
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	4639      	mov	r1, r7
 80058a6:	4630      	mov	r0, r6
 80058a8:	eb04 0903 	add.w	r9, r4, r3
 80058ac:	f000 fc8e 	bl	80061cc <_sbrk_r>
 80058b0:	4581      	cmp	r9, r0
 80058b2:	d142      	bne.n	800593a <_malloc_r+0xea>
 80058b4:	6821      	ldr	r1, [r4, #0]
 80058b6:	1a6d      	subs	r5, r5, r1
 80058b8:	4629      	mov	r1, r5
 80058ba:	4630      	mov	r0, r6
 80058bc:	f7ff ffa6 	bl	800580c <sbrk_aligned>
 80058c0:	3001      	adds	r0, #1
 80058c2:	d03a      	beq.n	800593a <_malloc_r+0xea>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	442b      	add	r3, r5
 80058c8:	6023      	str	r3, [r4, #0]
 80058ca:	f8d8 3000 	ldr.w	r3, [r8]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	bb62      	cbnz	r2, 800592c <_malloc_r+0xdc>
 80058d2:	f8c8 7000 	str.w	r7, [r8]
 80058d6:	e00f      	b.n	80058f8 <_malloc_r+0xa8>
 80058d8:	6822      	ldr	r2, [r4, #0]
 80058da:	1b52      	subs	r2, r2, r5
 80058dc:	d420      	bmi.n	8005920 <_malloc_r+0xd0>
 80058de:	2a0b      	cmp	r2, #11
 80058e0:	d917      	bls.n	8005912 <_malloc_r+0xc2>
 80058e2:	1961      	adds	r1, r4, r5
 80058e4:	42a3      	cmp	r3, r4
 80058e6:	6025      	str	r5, [r4, #0]
 80058e8:	bf18      	it	ne
 80058ea:	6059      	strne	r1, [r3, #4]
 80058ec:	6863      	ldr	r3, [r4, #4]
 80058ee:	bf08      	it	eq
 80058f0:	f8c8 1000 	streq.w	r1, [r8]
 80058f4:	5162      	str	r2, [r4, r5]
 80058f6:	604b      	str	r3, [r1, #4]
 80058f8:	4630      	mov	r0, r6
 80058fa:	f000 f82f 	bl	800595c <__malloc_unlock>
 80058fe:	f104 000b 	add.w	r0, r4, #11
 8005902:	1d23      	adds	r3, r4, #4
 8005904:	f020 0007 	bic.w	r0, r0, #7
 8005908:	1ac2      	subs	r2, r0, r3
 800590a:	bf1c      	itt	ne
 800590c:	1a1b      	subne	r3, r3, r0
 800590e:	50a3      	strne	r3, [r4, r2]
 8005910:	e7af      	b.n	8005872 <_malloc_r+0x22>
 8005912:	6862      	ldr	r2, [r4, #4]
 8005914:	42a3      	cmp	r3, r4
 8005916:	bf0c      	ite	eq
 8005918:	f8c8 2000 	streq.w	r2, [r8]
 800591c:	605a      	strne	r2, [r3, #4]
 800591e:	e7eb      	b.n	80058f8 <_malloc_r+0xa8>
 8005920:	4623      	mov	r3, r4
 8005922:	6864      	ldr	r4, [r4, #4]
 8005924:	e7ae      	b.n	8005884 <_malloc_r+0x34>
 8005926:	463c      	mov	r4, r7
 8005928:	687f      	ldr	r7, [r7, #4]
 800592a:	e7b6      	b.n	800589a <_malloc_r+0x4a>
 800592c:	461a      	mov	r2, r3
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	42a3      	cmp	r3, r4
 8005932:	d1fb      	bne.n	800592c <_malloc_r+0xdc>
 8005934:	2300      	movs	r3, #0
 8005936:	6053      	str	r3, [r2, #4]
 8005938:	e7de      	b.n	80058f8 <_malloc_r+0xa8>
 800593a:	230c      	movs	r3, #12
 800593c:	6033      	str	r3, [r6, #0]
 800593e:	4630      	mov	r0, r6
 8005940:	f000 f80c 	bl	800595c <__malloc_unlock>
 8005944:	e794      	b.n	8005870 <_malloc_r+0x20>
 8005946:	6005      	str	r5, [r0, #0]
 8005948:	e7d6      	b.n	80058f8 <_malloc_r+0xa8>
 800594a:	bf00      	nop
 800594c:	20000494 	.word	0x20000494

08005950 <__malloc_lock>:
 8005950:	4801      	ldr	r0, [pc, #4]	@ (8005958 <__malloc_lock+0x8>)
 8005952:	f7ff bf0e 	b.w	8005772 <__retarget_lock_acquire_recursive>
 8005956:	bf00      	nop
 8005958:	2000048c 	.word	0x2000048c

0800595c <__malloc_unlock>:
 800595c:	4801      	ldr	r0, [pc, #4]	@ (8005964 <__malloc_unlock+0x8>)
 800595e:	f7ff bf09 	b.w	8005774 <__retarget_lock_release_recursive>
 8005962:	bf00      	nop
 8005964:	2000048c 	.word	0x2000048c

08005968 <__sfputc_r>:
 8005968:	6893      	ldr	r3, [r2, #8]
 800596a:	3b01      	subs	r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	b410      	push	{r4}
 8005970:	6093      	str	r3, [r2, #8]
 8005972:	da08      	bge.n	8005986 <__sfputc_r+0x1e>
 8005974:	6994      	ldr	r4, [r2, #24]
 8005976:	42a3      	cmp	r3, r4
 8005978:	db01      	blt.n	800597e <__sfputc_r+0x16>
 800597a:	290a      	cmp	r1, #10
 800597c:	d103      	bne.n	8005986 <__sfputc_r+0x1e>
 800597e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005982:	f7ff bde8 	b.w	8005556 <__swbuf_r>
 8005986:	6813      	ldr	r3, [r2, #0]
 8005988:	1c58      	adds	r0, r3, #1
 800598a:	6010      	str	r0, [r2, #0]
 800598c:	7019      	strb	r1, [r3, #0]
 800598e:	4608      	mov	r0, r1
 8005990:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005994:	4770      	bx	lr

08005996 <__sfputs_r>:
 8005996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005998:	4606      	mov	r6, r0
 800599a:	460f      	mov	r7, r1
 800599c:	4614      	mov	r4, r2
 800599e:	18d5      	adds	r5, r2, r3
 80059a0:	42ac      	cmp	r4, r5
 80059a2:	d101      	bne.n	80059a8 <__sfputs_r+0x12>
 80059a4:	2000      	movs	r0, #0
 80059a6:	e007      	b.n	80059b8 <__sfputs_r+0x22>
 80059a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ac:	463a      	mov	r2, r7
 80059ae:	4630      	mov	r0, r6
 80059b0:	f7ff ffda 	bl	8005968 <__sfputc_r>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	d1f3      	bne.n	80059a0 <__sfputs_r+0xa>
 80059b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059bc <_vfiprintf_r>:
 80059bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c0:	460d      	mov	r5, r1
 80059c2:	b09d      	sub	sp, #116	@ 0x74
 80059c4:	4614      	mov	r4, r2
 80059c6:	4698      	mov	r8, r3
 80059c8:	4606      	mov	r6, r0
 80059ca:	b118      	cbz	r0, 80059d4 <_vfiprintf_r+0x18>
 80059cc:	6a03      	ldr	r3, [r0, #32]
 80059ce:	b90b      	cbnz	r3, 80059d4 <_vfiprintf_r+0x18>
 80059d0:	f7ff fcd0 	bl	8005374 <__sinit>
 80059d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059d6:	07d9      	lsls	r1, r3, #31
 80059d8:	d405      	bmi.n	80059e6 <_vfiprintf_r+0x2a>
 80059da:	89ab      	ldrh	r3, [r5, #12]
 80059dc:	059a      	lsls	r2, r3, #22
 80059de:	d402      	bmi.n	80059e6 <_vfiprintf_r+0x2a>
 80059e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059e2:	f7ff fec6 	bl	8005772 <__retarget_lock_acquire_recursive>
 80059e6:	89ab      	ldrh	r3, [r5, #12]
 80059e8:	071b      	lsls	r3, r3, #28
 80059ea:	d501      	bpl.n	80059f0 <_vfiprintf_r+0x34>
 80059ec:	692b      	ldr	r3, [r5, #16]
 80059ee:	b99b      	cbnz	r3, 8005a18 <_vfiprintf_r+0x5c>
 80059f0:	4629      	mov	r1, r5
 80059f2:	4630      	mov	r0, r6
 80059f4:	f7ff fdee 	bl	80055d4 <__swsetup_r>
 80059f8:	b170      	cbz	r0, 8005a18 <_vfiprintf_r+0x5c>
 80059fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059fc:	07dc      	lsls	r4, r3, #31
 80059fe:	d504      	bpl.n	8005a0a <_vfiprintf_r+0x4e>
 8005a00:	f04f 30ff 	mov.w	r0, #4294967295
 8005a04:	b01d      	add	sp, #116	@ 0x74
 8005a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a0a:	89ab      	ldrh	r3, [r5, #12]
 8005a0c:	0598      	lsls	r0, r3, #22
 8005a0e:	d4f7      	bmi.n	8005a00 <_vfiprintf_r+0x44>
 8005a10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a12:	f7ff feaf 	bl	8005774 <__retarget_lock_release_recursive>
 8005a16:	e7f3      	b.n	8005a00 <_vfiprintf_r+0x44>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a1c:	2320      	movs	r3, #32
 8005a1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a22:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a26:	2330      	movs	r3, #48	@ 0x30
 8005a28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005bd8 <_vfiprintf_r+0x21c>
 8005a2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a30:	f04f 0901 	mov.w	r9, #1
 8005a34:	4623      	mov	r3, r4
 8005a36:	469a      	mov	sl, r3
 8005a38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a3c:	b10a      	cbz	r2, 8005a42 <_vfiprintf_r+0x86>
 8005a3e:	2a25      	cmp	r2, #37	@ 0x25
 8005a40:	d1f9      	bne.n	8005a36 <_vfiprintf_r+0x7a>
 8005a42:	ebba 0b04 	subs.w	fp, sl, r4
 8005a46:	d00b      	beq.n	8005a60 <_vfiprintf_r+0xa4>
 8005a48:	465b      	mov	r3, fp
 8005a4a:	4622      	mov	r2, r4
 8005a4c:	4629      	mov	r1, r5
 8005a4e:	4630      	mov	r0, r6
 8005a50:	f7ff ffa1 	bl	8005996 <__sfputs_r>
 8005a54:	3001      	adds	r0, #1
 8005a56:	f000 80a7 	beq.w	8005ba8 <_vfiprintf_r+0x1ec>
 8005a5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a5c:	445a      	add	r2, fp
 8005a5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a60:	f89a 3000 	ldrb.w	r3, [sl]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 809f 	beq.w	8005ba8 <_vfiprintf_r+0x1ec>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a74:	f10a 0a01 	add.w	sl, sl, #1
 8005a78:	9304      	str	r3, [sp, #16]
 8005a7a:	9307      	str	r3, [sp, #28]
 8005a7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a80:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a82:	4654      	mov	r4, sl
 8005a84:	2205      	movs	r2, #5
 8005a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a8a:	4853      	ldr	r0, [pc, #332]	@ (8005bd8 <_vfiprintf_r+0x21c>)
 8005a8c:	f7fa fbc0 	bl	8000210 <memchr>
 8005a90:	9a04      	ldr	r2, [sp, #16]
 8005a92:	b9d8      	cbnz	r0, 8005acc <_vfiprintf_r+0x110>
 8005a94:	06d1      	lsls	r1, r2, #27
 8005a96:	bf44      	itt	mi
 8005a98:	2320      	movmi	r3, #32
 8005a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a9e:	0713      	lsls	r3, r2, #28
 8005aa0:	bf44      	itt	mi
 8005aa2:	232b      	movmi	r3, #43	@ 0x2b
 8005aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8005aac:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aae:	d015      	beq.n	8005adc <_vfiprintf_r+0x120>
 8005ab0:	9a07      	ldr	r2, [sp, #28]
 8005ab2:	4654      	mov	r4, sl
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	f04f 0c0a 	mov.w	ip, #10
 8005aba:	4621      	mov	r1, r4
 8005abc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ac0:	3b30      	subs	r3, #48	@ 0x30
 8005ac2:	2b09      	cmp	r3, #9
 8005ac4:	d94b      	bls.n	8005b5e <_vfiprintf_r+0x1a2>
 8005ac6:	b1b0      	cbz	r0, 8005af6 <_vfiprintf_r+0x13a>
 8005ac8:	9207      	str	r2, [sp, #28]
 8005aca:	e014      	b.n	8005af6 <_vfiprintf_r+0x13a>
 8005acc:	eba0 0308 	sub.w	r3, r0, r8
 8005ad0:	fa09 f303 	lsl.w	r3, r9, r3
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	9304      	str	r3, [sp, #16]
 8005ad8:	46a2      	mov	sl, r4
 8005ada:	e7d2      	b.n	8005a82 <_vfiprintf_r+0xc6>
 8005adc:	9b03      	ldr	r3, [sp, #12]
 8005ade:	1d19      	adds	r1, r3, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	9103      	str	r1, [sp, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	bfbb      	ittet	lt
 8005ae8:	425b      	neglt	r3, r3
 8005aea:	f042 0202 	orrlt.w	r2, r2, #2
 8005aee:	9307      	strge	r3, [sp, #28]
 8005af0:	9307      	strlt	r3, [sp, #28]
 8005af2:	bfb8      	it	lt
 8005af4:	9204      	strlt	r2, [sp, #16]
 8005af6:	7823      	ldrb	r3, [r4, #0]
 8005af8:	2b2e      	cmp	r3, #46	@ 0x2e
 8005afa:	d10a      	bne.n	8005b12 <_vfiprintf_r+0x156>
 8005afc:	7863      	ldrb	r3, [r4, #1]
 8005afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b00:	d132      	bne.n	8005b68 <_vfiprintf_r+0x1ac>
 8005b02:	9b03      	ldr	r3, [sp, #12]
 8005b04:	1d1a      	adds	r2, r3, #4
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	9203      	str	r2, [sp, #12]
 8005b0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b0e:	3402      	adds	r4, #2
 8005b10:	9305      	str	r3, [sp, #20]
 8005b12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005be8 <_vfiprintf_r+0x22c>
 8005b16:	7821      	ldrb	r1, [r4, #0]
 8005b18:	2203      	movs	r2, #3
 8005b1a:	4650      	mov	r0, sl
 8005b1c:	f7fa fb78 	bl	8000210 <memchr>
 8005b20:	b138      	cbz	r0, 8005b32 <_vfiprintf_r+0x176>
 8005b22:	9b04      	ldr	r3, [sp, #16]
 8005b24:	eba0 000a 	sub.w	r0, r0, sl
 8005b28:	2240      	movs	r2, #64	@ 0x40
 8005b2a:	4082      	lsls	r2, r0
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	3401      	adds	r4, #1
 8005b30:	9304      	str	r3, [sp, #16]
 8005b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b36:	4829      	ldr	r0, [pc, #164]	@ (8005bdc <_vfiprintf_r+0x220>)
 8005b38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b3c:	2206      	movs	r2, #6
 8005b3e:	f7fa fb67 	bl	8000210 <memchr>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d03f      	beq.n	8005bc6 <_vfiprintf_r+0x20a>
 8005b46:	4b26      	ldr	r3, [pc, #152]	@ (8005be0 <_vfiprintf_r+0x224>)
 8005b48:	bb1b      	cbnz	r3, 8005b92 <_vfiprintf_r+0x1d6>
 8005b4a:	9b03      	ldr	r3, [sp, #12]
 8005b4c:	3307      	adds	r3, #7
 8005b4e:	f023 0307 	bic.w	r3, r3, #7
 8005b52:	3308      	adds	r3, #8
 8005b54:	9303      	str	r3, [sp, #12]
 8005b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b58:	443b      	add	r3, r7
 8005b5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b5c:	e76a      	b.n	8005a34 <_vfiprintf_r+0x78>
 8005b5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b62:	460c      	mov	r4, r1
 8005b64:	2001      	movs	r0, #1
 8005b66:	e7a8      	b.n	8005aba <_vfiprintf_r+0xfe>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	3401      	adds	r4, #1
 8005b6c:	9305      	str	r3, [sp, #20]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	f04f 0c0a 	mov.w	ip, #10
 8005b74:	4620      	mov	r0, r4
 8005b76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b7a:	3a30      	subs	r2, #48	@ 0x30
 8005b7c:	2a09      	cmp	r2, #9
 8005b7e:	d903      	bls.n	8005b88 <_vfiprintf_r+0x1cc>
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0c6      	beq.n	8005b12 <_vfiprintf_r+0x156>
 8005b84:	9105      	str	r1, [sp, #20]
 8005b86:	e7c4      	b.n	8005b12 <_vfiprintf_r+0x156>
 8005b88:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b8c:	4604      	mov	r4, r0
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e7f0      	b.n	8005b74 <_vfiprintf_r+0x1b8>
 8005b92:	ab03      	add	r3, sp, #12
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	462a      	mov	r2, r5
 8005b98:	4b12      	ldr	r3, [pc, #72]	@ (8005be4 <_vfiprintf_r+0x228>)
 8005b9a:	a904      	add	r1, sp, #16
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	f3af 8000 	nop.w
 8005ba2:	4607      	mov	r7, r0
 8005ba4:	1c78      	adds	r0, r7, #1
 8005ba6:	d1d6      	bne.n	8005b56 <_vfiprintf_r+0x19a>
 8005ba8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005baa:	07d9      	lsls	r1, r3, #31
 8005bac:	d405      	bmi.n	8005bba <_vfiprintf_r+0x1fe>
 8005bae:	89ab      	ldrh	r3, [r5, #12]
 8005bb0:	059a      	lsls	r2, r3, #22
 8005bb2:	d402      	bmi.n	8005bba <_vfiprintf_r+0x1fe>
 8005bb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bb6:	f7ff fddd 	bl	8005774 <__retarget_lock_release_recursive>
 8005bba:	89ab      	ldrh	r3, [r5, #12]
 8005bbc:	065b      	lsls	r3, r3, #25
 8005bbe:	f53f af1f 	bmi.w	8005a00 <_vfiprintf_r+0x44>
 8005bc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bc4:	e71e      	b.n	8005a04 <_vfiprintf_r+0x48>
 8005bc6:	ab03      	add	r3, sp, #12
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	462a      	mov	r2, r5
 8005bcc:	4b05      	ldr	r3, [pc, #20]	@ (8005be4 <_vfiprintf_r+0x228>)
 8005bce:	a904      	add	r1, sp, #16
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	f000 f879 	bl	8005cc8 <_printf_i>
 8005bd6:	e7e4      	b.n	8005ba2 <_vfiprintf_r+0x1e6>
 8005bd8:	08006264 	.word	0x08006264
 8005bdc:	0800626e 	.word	0x0800626e
 8005be0:	00000000 	.word	0x00000000
 8005be4:	08005997 	.word	0x08005997
 8005be8:	0800626a 	.word	0x0800626a

08005bec <_printf_common>:
 8005bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf0:	4616      	mov	r6, r2
 8005bf2:	4698      	mov	r8, r3
 8005bf4:	688a      	ldr	r2, [r1, #8]
 8005bf6:	690b      	ldr	r3, [r1, #16]
 8005bf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	bfb8      	it	lt
 8005c00:	4613      	movlt	r3, r2
 8005c02:	6033      	str	r3, [r6, #0]
 8005c04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c08:	4607      	mov	r7, r0
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	b10a      	cbz	r2, 8005c12 <_printf_common+0x26>
 8005c0e:	3301      	adds	r3, #1
 8005c10:	6033      	str	r3, [r6, #0]
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	0699      	lsls	r1, r3, #26
 8005c16:	bf42      	ittt	mi
 8005c18:	6833      	ldrmi	r3, [r6, #0]
 8005c1a:	3302      	addmi	r3, #2
 8005c1c:	6033      	strmi	r3, [r6, #0]
 8005c1e:	6825      	ldr	r5, [r4, #0]
 8005c20:	f015 0506 	ands.w	r5, r5, #6
 8005c24:	d106      	bne.n	8005c34 <_printf_common+0x48>
 8005c26:	f104 0a19 	add.w	sl, r4, #25
 8005c2a:	68e3      	ldr	r3, [r4, #12]
 8005c2c:	6832      	ldr	r2, [r6, #0]
 8005c2e:	1a9b      	subs	r3, r3, r2
 8005c30:	42ab      	cmp	r3, r5
 8005c32:	dc26      	bgt.n	8005c82 <_printf_common+0x96>
 8005c34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c38:	6822      	ldr	r2, [r4, #0]
 8005c3a:	3b00      	subs	r3, #0
 8005c3c:	bf18      	it	ne
 8005c3e:	2301      	movne	r3, #1
 8005c40:	0692      	lsls	r2, r2, #26
 8005c42:	d42b      	bmi.n	8005c9c <_printf_common+0xb0>
 8005c44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c48:	4641      	mov	r1, r8
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	47c8      	blx	r9
 8005c4e:	3001      	adds	r0, #1
 8005c50:	d01e      	beq.n	8005c90 <_printf_common+0xa4>
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	6922      	ldr	r2, [r4, #16]
 8005c56:	f003 0306 	and.w	r3, r3, #6
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	bf02      	ittt	eq
 8005c5e:	68e5      	ldreq	r5, [r4, #12]
 8005c60:	6833      	ldreq	r3, [r6, #0]
 8005c62:	1aed      	subeq	r5, r5, r3
 8005c64:	68a3      	ldr	r3, [r4, #8]
 8005c66:	bf0c      	ite	eq
 8005c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c6c:	2500      	movne	r5, #0
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	bfc4      	itt	gt
 8005c72:	1a9b      	subgt	r3, r3, r2
 8005c74:	18ed      	addgt	r5, r5, r3
 8005c76:	2600      	movs	r6, #0
 8005c78:	341a      	adds	r4, #26
 8005c7a:	42b5      	cmp	r5, r6
 8005c7c:	d11a      	bne.n	8005cb4 <_printf_common+0xc8>
 8005c7e:	2000      	movs	r0, #0
 8005c80:	e008      	b.n	8005c94 <_printf_common+0xa8>
 8005c82:	2301      	movs	r3, #1
 8005c84:	4652      	mov	r2, sl
 8005c86:	4641      	mov	r1, r8
 8005c88:	4638      	mov	r0, r7
 8005c8a:	47c8      	blx	r9
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	d103      	bne.n	8005c98 <_printf_common+0xac>
 8005c90:	f04f 30ff 	mov.w	r0, #4294967295
 8005c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c98:	3501      	adds	r5, #1
 8005c9a:	e7c6      	b.n	8005c2a <_printf_common+0x3e>
 8005c9c:	18e1      	adds	r1, r4, r3
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	2030      	movs	r0, #48	@ 0x30
 8005ca2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ca6:	4422      	add	r2, r4
 8005ca8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005cac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005cb0:	3302      	adds	r3, #2
 8005cb2:	e7c7      	b.n	8005c44 <_printf_common+0x58>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	4622      	mov	r2, r4
 8005cb8:	4641      	mov	r1, r8
 8005cba:	4638      	mov	r0, r7
 8005cbc:	47c8      	blx	r9
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d0e6      	beq.n	8005c90 <_printf_common+0xa4>
 8005cc2:	3601      	adds	r6, #1
 8005cc4:	e7d9      	b.n	8005c7a <_printf_common+0x8e>
	...

08005cc8 <_printf_i>:
 8005cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ccc:	7e0f      	ldrb	r7, [r1, #24]
 8005cce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005cd0:	2f78      	cmp	r7, #120	@ 0x78
 8005cd2:	4691      	mov	r9, r2
 8005cd4:	4680      	mov	r8, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	469a      	mov	sl, r3
 8005cda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005cde:	d807      	bhi.n	8005cf0 <_printf_i+0x28>
 8005ce0:	2f62      	cmp	r7, #98	@ 0x62
 8005ce2:	d80a      	bhi.n	8005cfa <_printf_i+0x32>
 8005ce4:	2f00      	cmp	r7, #0
 8005ce6:	f000 80d1 	beq.w	8005e8c <_printf_i+0x1c4>
 8005cea:	2f58      	cmp	r7, #88	@ 0x58
 8005cec:	f000 80b8 	beq.w	8005e60 <_printf_i+0x198>
 8005cf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005cf8:	e03a      	b.n	8005d70 <_printf_i+0xa8>
 8005cfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005cfe:	2b15      	cmp	r3, #21
 8005d00:	d8f6      	bhi.n	8005cf0 <_printf_i+0x28>
 8005d02:	a101      	add	r1, pc, #4	@ (adr r1, 8005d08 <_printf_i+0x40>)
 8005d04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d08:	08005d61 	.word	0x08005d61
 8005d0c:	08005d75 	.word	0x08005d75
 8005d10:	08005cf1 	.word	0x08005cf1
 8005d14:	08005cf1 	.word	0x08005cf1
 8005d18:	08005cf1 	.word	0x08005cf1
 8005d1c:	08005cf1 	.word	0x08005cf1
 8005d20:	08005d75 	.word	0x08005d75
 8005d24:	08005cf1 	.word	0x08005cf1
 8005d28:	08005cf1 	.word	0x08005cf1
 8005d2c:	08005cf1 	.word	0x08005cf1
 8005d30:	08005cf1 	.word	0x08005cf1
 8005d34:	08005e73 	.word	0x08005e73
 8005d38:	08005d9f 	.word	0x08005d9f
 8005d3c:	08005e2d 	.word	0x08005e2d
 8005d40:	08005cf1 	.word	0x08005cf1
 8005d44:	08005cf1 	.word	0x08005cf1
 8005d48:	08005e95 	.word	0x08005e95
 8005d4c:	08005cf1 	.word	0x08005cf1
 8005d50:	08005d9f 	.word	0x08005d9f
 8005d54:	08005cf1 	.word	0x08005cf1
 8005d58:	08005cf1 	.word	0x08005cf1
 8005d5c:	08005e35 	.word	0x08005e35
 8005d60:	6833      	ldr	r3, [r6, #0]
 8005d62:	1d1a      	adds	r2, r3, #4
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6032      	str	r2, [r6, #0]
 8005d68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d70:	2301      	movs	r3, #1
 8005d72:	e09c      	b.n	8005eae <_printf_i+0x1e6>
 8005d74:	6833      	ldr	r3, [r6, #0]
 8005d76:	6820      	ldr	r0, [r4, #0]
 8005d78:	1d19      	adds	r1, r3, #4
 8005d7a:	6031      	str	r1, [r6, #0]
 8005d7c:	0606      	lsls	r6, r0, #24
 8005d7e:	d501      	bpl.n	8005d84 <_printf_i+0xbc>
 8005d80:	681d      	ldr	r5, [r3, #0]
 8005d82:	e003      	b.n	8005d8c <_printf_i+0xc4>
 8005d84:	0645      	lsls	r5, r0, #25
 8005d86:	d5fb      	bpl.n	8005d80 <_printf_i+0xb8>
 8005d88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d8c:	2d00      	cmp	r5, #0
 8005d8e:	da03      	bge.n	8005d98 <_printf_i+0xd0>
 8005d90:	232d      	movs	r3, #45	@ 0x2d
 8005d92:	426d      	negs	r5, r5
 8005d94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d98:	4858      	ldr	r0, [pc, #352]	@ (8005efc <_printf_i+0x234>)
 8005d9a:	230a      	movs	r3, #10
 8005d9c:	e011      	b.n	8005dc2 <_printf_i+0xfa>
 8005d9e:	6821      	ldr	r1, [r4, #0]
 8005da0:	6833      	ldr	r3, [r6, #0]
 8005da2:	0608      	lsls	r0, r1, #24
 8005da4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005da8:	d402      	bmi.n	8005db0 <_printf_i+0xe8>
 8005daa:	0649      	lsls	r1, r1, #25
 8005dac:	bf48      	it	mi
 8005dae:	b2ad      	uxthmi	r5, r5
 8005db0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005db2:	4852      	ldr	r0, [pc, #328]	@ (8005efc <_printf_i+0x234>)
 8005db4:	6033      	str	r3, [r6, #0]
 8005db6:	bf14      	ite	ne
 8005db8:	230a      	movne	r3, #10
 8005dba:	2308      	moveq	r3, #8
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005dc2:	6866      	ldr	r6, [r4, #4]
 8005dc4:	60a6      	str	r6, [r4, #8]
 8005dc6:	2e00      	cmp	r6, #0
 8005dc8:	db05      	blt.n	8005dd6 <_printf_i+0x10e>
 8005dca:	6821      	ldr	r1, [r4, #0]
 8005dcc:	432e      	orrs	r6, r5
 8005dce:	f021 0104 	bic.w	r1, r1, #4
 8005dd2:	6021      	str	r1, [r4, #0]
 8005dd4:	d04b      	beq.n	8005e6e <_printf_i+0x1a6>
 8005dd6:	4616      	mov	r6, r2
 8005dd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ddc:	fb03 5711 	mls	r7, r3, r1, r5
 8005de0:	5dc7      	ldrb	r7, [r0, r7]
 8005de2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005de6:	462f      	mov	r7, r5
 8005de8:	42bb      	cmp	r3, r7
 8005dea:	460d      	mov	r5, r1
 8005dec:	d9f4      	bls.n	8005dd8 <_printf_i+0x110>
 8005dee:	2b08      	cmp	r3, #8
 8005df0:	d10b      	bne.n	8005e0a <_printf_i+0x142>
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	07df      	lsls	r7, r3, #31
 8005df6:	d508      	bpl.n	8005e0a <_printf_i+0x142>
 8005df8:	6923      	ldr	r3, [r4, #16]
 8005dfa:	6861      	ldr	r1, [r4, #4]
 8005dfc:	4299      	cmp	r1, r3
 8005dfe:	bfde      	ittt	le
 8005e00:	2330      	movle	r3, #48	@ 0x30
 8005e02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e0a:	1b92      	subs	r2, r2, r6
 8005e0c:	6122      	str	r2, [r4, #16]
 8005e0e:	f8cd a000 	str.w	sl, [sp]
 8005e12:	464b      	mov	r3, r9
 8005e14:	aa03      	add	r2, sp, #12
 8005e16:	4621      	mov	r1, r4
 8005e18:	4640      	mov	r0, r8
 8005e1a:	f7ff fee7 	bl	8005bec <_printf_common>
 8005e1e:	3001      	adds	r0, #1
 8005e20:	d14a      	bne.n	8005eb8 <_printf_i+0x1f0>
 8005e22:	f04f 30ff 	mov.w	r0, #4294967295
 8005e26:	b004      	add	sp, #16
 8005e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	f043 0320 	orr.w	r3, r3, #32
 8005e32:	6023      	str	r3, [r4, #0]
 8005e34:	4832      	ldr	r0, [pc, #200]	@ (8005f00 <_printf_i+0x238>)
 8005e36:	2778      	movs	r7, #120	@ 0x78
 8005e38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	6831      	ldr	r1, [r6, #0]
 8005e40:	061f      	lsls	r7, r3, #24
 8005e42:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e46:	d402      	bmi.n	8005e4e <_printf_i+0x186>
 8005e48:	065f      	lsls	r7, r3, #25
 8005e4a:	bf48      	it	mi
 8005e4c:	b2ad      	uxthmi	r5, r5
 8005e4e:	6031      	str	r1, [r6, #0]
 8005e50:	07d9      	lsls	r1, r3, #31
 8005e52:	bf44      	itt	mi
 8005e54:	f043 0320 	orrmi.w	r3, r3, #32
 8005e58:	6023      	strmi	r3, [r4, #0]
 8005e5a:	b11d      	cbz	r5, 8005e64 <_printf_i+0x19c>
 8005e5c:	2310      	movs	r3, #16
 8005e5e:	e7ad      	b.n	8005dbc <_printf_i+0xf4>
 8005e60:	4826      	ldr	r0, [pc, #152]	@ (8005efc <_printf_i+0x234>)
 8005e62:	e7e9      	b.n	8005e38 <_printf_i+0x170>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	f023 0320 	bic.w	r3, r3, #32
 8005e6a:	6023      	str	r3, [r4, #0]
 8005e6c:	e7f6      	b.n	8005e5c <_printf_i+0x194>
 8005e6e:	4616      	mov	r6, r2
 8005e70:	e7bd      	b.n	8005dee <_printf_i+0x126>
 8005e72:	6833      	ldr	r3, [r6, #0]
 8005e74:	6825      	ldr	r5, [r4, #0]
 8005e76:	6961      	ldr	r1, [r4, #20]
 8005e78:	1d18      	adds	r0, r3, #4
 8005e7a:	6030      	str	r0, [r6, #0]
 8005e7c:	062e      	lsls	r6, r5, #24
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	d501      	bpl.n	8005e86 <_printf_i+0x1be>
 8005e82:	6019      	str	r1, [r3, #0]
 8005e84:	e002      	b.n	8005e8c <_printf_i+0x1c4>
 8005e86:	0668      	lsls	r0, r5, #25
 8005e88:	d5fb      	bpl.n	8005e82 <_printf_i+0x1ba>
 8005e8a:	8019      	strh	r1, [r3, #0]
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	6123      	str	r3, [r4, #16]
 8005e90:	4616      	mov	r6, r2
 8005e92:	e7bc      	b.n	8005e0e <_printf_i+0x146>
 8005e94:	6833      	ldr	r3, [r6, #0]
 8005e96:	1d1a      	adds	r2, r3, #4
 8005e98:	6032      	str	r2, [r6, #0]
 8005e9a:	681e      	ldr	r6, [r3, #0]
 8005e9c:	6862      	ldr	r2, [r4, #4]
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	f7fa f9b5 	bl	8000210 <memchr>
 8005ea6:	b108      	cbz	r0, 8005eac <_printf_i+0x1e4>
 8005ea8:	1b80      	subs	r0, r0, r6
 8005eaa:	6060      	str	r0, [r4, #4]
 8005eac:	6863      	ldr	r3, [r4, #4]
 8005eae:	6123      	str	r3, [r4, #16]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005eb6:	e7aa      	b.n	8005e0e <_printf_i+0x146>
 8005eb8:	6923      	ldr	r3, [r4, #16]
 8005eba:	4632      	mov	r2, r6
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	47d0      	blx	sl
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d0ad      	beq.n	8005e22 <_printf_i+0x15a>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	079b      	lsls	r3, r3, #30
 8005eca:	d413      	bmi.n	8005ef4 <_printf_i+0x22c>
 8005ecc:	68e0      	ldr	r0, [r4, #12]
 8005ece:	9b03      	ldr	r3, [sp, #12]
 8005ed0:	4298      	cmp	r0, r3
 8005ed2:	bfb8      	it	lt
 8005ed4:	4618      	movlt	r0, r3
 8005ed6:	e7a6      	b.n	8005e26 <_printf_i+0x15e>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	4632      	mov	r2, r6
 8005edc:	4649      	mov	r1, r9
 8005ede:	4640      	mov	r0, r8
 8005ee0:	47d0      	blx	sl
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	d09d      	beq.n	8005e22 <_printf_i+0x15a>
 8005ee6:	3501      	adds	r5, #1
 8005ee8:	68e3      	ldr	r3, [r4, #12]
 8005eea:	9903      	ldr	r1, [sp, #12]
 8005eec:	1a5b      	subs	r3, r3, r1
 8005eee:	42ab      	cmp	r3, r5
 8005ef0:	dcf2      	bgt.n	8005ed8 <_printf_i+0x210>
 8005ef2:	e7eb      	b.n	8005ecc <_printf_i+0x204>
 8005ef4:	2500      	movs	r5, #0
 8005ef6:	f104 0619 	add.w	r6, r4, #25
 8005efa:	e7f5      	b.n	8005ee8 <_printf_i+0x220>
 8005efc:	08006275 	.word	0x08006275
 8005f00:	08006286 	.word	0x08006286

08005f04 <__sflush_r>:
 8005f04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0c:	0716      	lsls	r6, r2, #28
 8005f0e:	4605      	mov	r5, r0
 8005f10:	460c      	mov	r4, r1
 8005f12:	d454      	bmi.n	8005fbe <__sflush_r+0xba>
 8005f14:	684b      	ldr	r3, [r1, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	dc02      	bgt.n	8005f20 <__sflush_r+0x1c>
 8005f1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	dd48      	ble.n	8005fb2 <__sflush_r+0xae>
 8005f20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f22:	2e00      	cmp	r6, #0
 8005f24:	d045      	beq.n	8005fb2 <__sflush_r+0xae>
 8005f26:	2300      	movs	r3, #0
 8005f28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005f2c:	682f      	ldr	r7, [r5, #0]
 8005f2e:	6a21      	ldr	r1, [r4, #32]
 8005f30:	602b      	str	r3, [r5, #0]
 8005f32:	d030      	beq.n	8005f96 <__sflush_r+0x92>
 8005f34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f36:	89a3      	ldrh	r3, [r4, #12]
 8005f38:	0759      	lsls	r1, r3, #29
 8005f3a:	d505      	bpl.n	8005f48 <__sflush_r+0x44>
 8005f3c:	6863      	ldr	r3, [r4, #4]
 8005f3e:	1ad2      	subs	r2, r2, r3
 8005f40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f42:	b10b      	cbz	r3, 8005f48 <__sflush_r+0x44>
 8005f44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f46:	1ad2      	subs	r2, r2, r3
 8005f48:	2300      	movs	r3, #0
 8005f4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f4c:	6a21      	ldr	r1, [r4, #32]
 8005f4e:	4628      	mov	r0, r5
 8005f50:	47b0      	blx	r6
 8005f52:	1c43      	adds	r3, r0, #1
 8005f54:	89a3      	ldrh	r3, [r4, #12]
 8005f56:	d106      	bne.n	8005f66 <__sflush_r+0x62>
 8005f58:	6829      	ldr	r1, [r5, #0]
 8005f5a:	291d      	cmp	r1, #29
 8005f5c:	d82b      	bhi.n	8005fb6 <__sflush_r+0xb2>
 8005f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8006008 <__sflush_r+0x104>)
 8005f60:	40ca      	lsrs	r2, r1
 8005f62:	07d6      	lsls	r6, r2, #31
 8005f64:	d527      	bpl.n	8005fb6 <__sflush_r+0xb2>
 8005f66:	2200      	movs	r2, #0
 8005f68:	6062      	str	r2, [r4, #4]
 8005f6a:	04d9      	lsls	r1, r3, #19
 8005f6c:	6922      	ldr	r2, [r4, #16]
 8005f6e:	6022      	str	r2, [r4, #0]
 8005f70:	d504      	bpl.n	8005f7c <__sflush_r+0x78>
 8005f72:	1c42      	adds	r2, r0, #1
 8005f74:	d101      	bne.n	8005f7a <__sflush_r+0x76>
 8005f76:	682b      	ldr	r3, [r5, #0]
 8005f78:	b903      	cbnz	r3, 8005f7c <__sflush_r+0x78>
 8005f7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f7e:	602f      	str	r7, [r5, #0]
 8005f80:	b1b9      	cbz	r1, 8005fb2 <__sflush_r+0xae>
 8005f82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f86:	4299      	cmp	r1, r3
 8005f88:	d002      	beq.n	8005f90 <__sflush_r+0x8c>
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	f7ff fbf4 	bl	8005778 <_free_r>
 8005f90:	2300      	movs	r3, #0
 8005f92:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f94:	e00d      	b.n	8005fb2 <__sflush_r+0xae>
 8005f96:	2301      	movs	r3, #1
 8005f98:	4628      	mov	r0, r5
 8005f9a:	47b0      	blx	r6
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	1c50      	adds	r0, r2, #1
 8005fa0:	d1c9      	bne.n	8005f36 <__sflush_r+0x32>
 8005fa2:	682b      	ldr	r3, [r5, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0c6      	beq.n	8005f36 <__sflush_r+0x32>
 8005fa8:	2b1d      	cmp	r3, #29
 8005faa:	d001      	beq.n	8005fb0 <__sflush_r+0xac>
 8005fac:	2b16      	cmp	r3, #22
 8005fae:	d11e      	bne.n	8005fee <__sflush_r+0xea>
 8005fb0:	602f      	str	r7, [r5, #0]
 8005fb2:	2000      	movs	r0, #0
 8005fb4:	e022      	b.n	8005ffc <__sflush_r+0xf8>
 8005fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fba:	b21b      	sxth	r3, r3
 8005fbc:	e01b      	b.n	8005ff6 <__sflush_r+0xf2>
 8005fbe:	690f      	ldr	r7, [r1, #16]
 8005fc0:	2f00      	cmp	r7, #0
 8005fc2:	d0f6      	beq.n	8005fb2 <__sflush_r+0xae>
 8005fc4:	0793      	lsls	r3, r2, #30
 8005fc6:	680e      	ldr	r6, [r1, #0]
 8005fc8:	bf08      	it	eq
 8005fca:	694b      	ldreq	r3, [r1, #20]
 8005fcc:	600f      	str	r7, [r1, #0]
 8005fce:	bf18      	it	ne
 8005fd0:	2300      	movne	r3, #0
 8005fd2:	eba6 0807 	sub.w	r8, r6, r7
 8005fd6:	608b      	str	r3, [r1, #8]
 8005fd8:	f1b8 0f00 	cmp.w	r8, #0
 8005fdc:	dde9      	ble.n	8005fb2 <__sflush_r+0xae>
 8005fde:	6a21      	ldr	r1, [r4, #32]
 8005fe0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005fe2:	4643      	mov	r3, r8
 8005fe4:	463a      	mov	r2, r7
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	47b0      	blx	r6
 8005fea:	2800      	cmp	r0, #0
 8005fec:	dc08      	bgt.n	8006000 <__sflush_r+0xfc>
 8005fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ff6:	81a3      	strh	r3, [r4, #12]
 8005ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006000:	4407      	add	r7, r0
 8006002:	eba8 0800 	sub.w	r8, r8, r0
 8006006:	e7e7      	b.n	8005fd8 <__sflush_r+0xd4>
 8006008:	20400001 	.word	0x20400001

0800600c <_fflush_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	690b      	ldr	r3, [r1, #16]
 8006010:	4605      	mov	r5, r0
 8006012:	460c      	mov	r4, r1
 8006014:	b913      	cbnz	r3, 800601c <_fflush_r+0x10>
 8006016:	2500      	movs	r5, #0
 8006018:	4628      	mov	r0, r5
 800601a:	bd38      	pop	{r3, r4, r5, pc}
 800601c:	b118      	cbz	r0, 8006026 <_fflush_r+0x1a>
 800601e:	6a03      	ldr	r3, [r0, #32]
 8006020:	b90b      	cbnz	r3, 8006026 <_fflush_r+0x1a>
 8006022:	f7ff f9a7 	bl	8005374 <__sinit>
 8006026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0f3      	beq.n	8006016 <_fflush_r+0xa>
 800602e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006030:	07d0      	lsls	r0, r2, #31
 8006032:	d404      	bmi.n	800603e <_fflush_r+0x32>
 8006034:	0599      	lsls	r1, r3, #22
 8006036:	d402      	bmi.n	800603e <_fflush_r+0x32>
 8006038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800603a:	f7ff fb9a 	bl	8005772 <__retarget_lock_acquire_recursive>
 800603e:	4628      	mov	r0, r5
 8006040:	4621      	mov	r1, r4
 8006042:	f7ff ff5f 	bl	8005f04 <__sflush_r>
 8006046:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006048:	07da      	lsls	r2, r3, #31
 800604a:	4605      	mov	r5, r0
 800604c:	d4e4      	bmi.n	8006018 <_fflush_r+0xc>
 800604e:	89a3      	ldrh	r3, [r4, #12]
 8006050:	059b      	lsls	r3, r3, #22
 8006052:	d4e1      	bmi.n	8006018 <_fflush_r+0xc>
 8006054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006056:	f7ff fb8d 	bl	8005774 <__retarget_lock_release_recursive>
 800605a:	e7dd      	b.n	8006018 <_fflush_r+0xc>

0800605c <__swhatbuf_r>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	460c      	mov	r4, r1
 8006060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006064:	2900      	cmp	r1, #0
 8006066:	b096      	sub	sp, #88	@ 0x58
 8006068:	4615      	mov	r5, r2
 800606a:	461e      	mov	r6, r3
 800606c:	da0d      	bge.n	800608a <__swhatbuf_r+0x2e>
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006074:	f04f 0100 	mov.w	r1, #0
 8006078:	bf14      	ite	ne
 800607a:	2340      	movne	r3, #64	@ 0x40
 800607c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006080:	2000      	movs	r0, #0
 8006082:	6031      	str	r1, [r6, #0]
 8006084:	602b      	str	r3, [r5, #0]
 8006086:	b016      	add	sp, #88	@ 0x58
 8006088:	bd70      	pop	{r4, r5, r6, pc}
 800608a:	466a      	mov	r2, sp
 800608c:	f000 f87c 	bl	8006188 <_fstat_r>
 8006090:	2800      	cmp	r0, #0
 8006092:	dbec      	blt.n	800606e <__swhatbuf_r+0x12>
 8006094:	9901      	ldr	r1, [sp, #4]
 8006096:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800609a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800609e:	4259      	negs	r1, r3
 80060a0:	4159      	adcs	r1, r3
 80060a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060a6:	e7eb      	b.n	8006080 <__swhatbuf_r+0x24>

080060a8 <__smakebuf_r>:
 80060a8:	898b      	ldrh	r3, [r1, #12]
 80060aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060ac:	079d      	lsls	r5, r3, #30
 80060ae:	4606      	mov	r6, r0
 80060b0:	460c      	mov	r4, r1
 80060b2:	d507      	bpl.n	80060c4 <__smakebuf_r+0x1c>
 80060b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	6123      	str	r3, [r4, #16]
 80060bc:	2301      	movs	r3, #1
 80060be:	6163      	str	r3, [r4, #20]
 80060c0:	b003      	add	sp, #12
 80060c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060c4:	ab01      	add	r3, sp, #4
 80060c6:	466a      	mov	r2, sp
 80060c8:	f7ff ffc8 	bl	800605c <__swhatbuf_r>
 80060cc:	9f00      	ldr	r7, [sp, #0]
 80060ce:	4605      	mov	r5, r0
 80060d0:	4639      	mov	r1, r7
 80060d2:	4630      	mov	r0, r6
 80060d4:	f7ff fbbc 	bl	8005850 <_malloc_r>
 80060d8:	b948      	cbnz	r0, 80060ee <__smakebuf_r+0x46>
 80060da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060de:	059a      	lsls	r2, r3, #22
 80060e0:	d4ee      	bmi.n	80060c0 <__smakebuf_r+0x18>
 80060e2:	f023 0303 	bic.w	r3, r3, #3
 80060e6:	f043 0302 	orr.w	r3, r3, #2
 80060ea:	81a3      	strh	r3, [r4, #12]
 80060ec:	e7e2      	b.n	80060b4 <__smakebuf_r+0xc>
 80060ee:	89a3      	ldrh	r3, [r4, #12]
 80060f0:	6020      	str	r0, [r4, #0]
 80060f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060f6:	81a3      	strh	r3, [r4, #12]
 80060f8:	9b01      	ldr	r3, [sp, #4]
 80060fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80060fe:	b15b      	cbz	r3, 8006118 <__smakebuf_r+0x70>
 8006100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006104:	4630      	mov	r0, r6
 8006106:	f000 f851 	bl	80061ac <_isatty_r>
 800610a:	b128      	cbz	r0, 8006118 <__smakebuf_r+0x70>
 800610c:	89a3      	ldrh	r3, [r4, #12]
 800610e:	f023 0303 	bic.w	r3, r3, #3
 8006112:	f043 0301 	orr.w	r3, r3, #1
 8006116:	81a3      	strh	r3, [r4, #12]
 8006118:	89a3      	ldrh	r3, [r4, #12]
 800611a:	431d      	orrs	r5, r3
 800611c:	81a5      	strh	r5, [r4, #12]
 800611e:	e7cf      	b.n	80060c0 <__smakebuf_r+0x18>

08006120 <_putc_r>:
 8006120:	b570      	push	{r4, r5, r6, lr}
 8006122:	460d      	mov	r5, r1
 8006124:	4614      	mov	r4, r2
 8006126:	4606      	mov	r6, r0
 8006128:	b118      	cbz	r0, 8006132 <_putc_r+0x12>
 800612a:	6a03      	ldr	r3, [r0, #32]
 800612c:	b90b      	cbnz	r3, 8006132 <_putc_r+0x12>
 800612e:	f7ff f921 	bl	8005374 <__sinit>
 8006132:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006134:	07d8      	lsls	r0, r3, #31
 8006136:	d405      	bmi.n	8006144 <_putc_r+0x24>
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	0599      	lsls	r1, r3, #22
 800613c:	d402      	bmi.n	8006144 <_putc_r+0x24>
 800613e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006140:	f7ff fb17 	bl	8005772 <__retarget_lock_acquire_recursive>
 8006144:	68a3      	ldr	r3, [r4, #8]
 8006146:	3b01      	subs	r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	60a3      	str	r3, [r4, #8]
 800614c:	da05      	bge.n	800615a <_putc_r+0x3a>
 800614e:	69a2      	ldr	r2, [r4, #24]
 8006150:	4293      	cmp	r3, r2
 8006152:	db12      	blt.n	800617a <_putc_r+0x5a>
 8006154:	b2eb      	uxtb	r3, r5
 8006156:	2b0a      	cmp	r3, #10
 8006158:	d00f      	beq.n	800617a <_putc_r+0x5a>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	6022      	str	r2, [r4, #0]
 8006160:	701d      	strb	r5, [r3, #0]
 8006162:	b2ed      	uxtb	r5, r5
 8006164:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006166:	07da      	lsls	r2, r3, #31
 8006168:	d405      	bmi.n	8006176 <_putc_r+0x56>
 800616a:	89a3      	ldrh	r3, [r4, #12]
 800616c:	059b      	lsls	r3, r3, #22
 800616e:	d402      	bmi.n	8006176 <_putc_r+0x56>
 8006170:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006172:	f7ff faff 	bl	8005774 <__retarget_lock_release_recursive>
 8006176:	4628      	mov	r0, r5
 8006178:	bd70      	pop	{r4, r5, r6, pc}
 800617a:	4629      	mov	r1, r5
 800617c:	4622      	mov	r2, r4
 800617e:	4630      	mov	r0, r6
 8006180:	f7ff f9e9 	bl	8005556 <__swbuf_r>
 8006184:	4605      	mov	r5, r0
 8006186:	e7ed      	b.n	8006164 <_putc_r+0x44>

08006188 <_fstat_r>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	4d07      	ldr	r5, [pc, #28]	@ (80061a8 <_fstat_r+0x20>)
 800618c:	2300      	movs	r3, #0
 800618e:	4604      	mov	r4, r0
 8006190:	4608      	mov	r0, r1
 8006192:	4611      	mov	r1, r2
 8006194:	602b      	str	r3, [r5, #0]
 8006196:	f7fb fc5c 	bl	8001a52 <_fstat>
 800619a:	1c43      	adds	r3, r0, #1
 800619c:	d102      	bne.n	80061a4 <_fstat_r+0x1c>
 800619e:	682b      	ldr	r3, [r5, #0]
 80061a0:	b103      	cbz	r3, 80061a4 <_fstat_r+0x1c>
 80061a2:	6023      	str	r3, [r4, #0]
 80061a4:	bd38      	pop	{r3, r4, r5, pc}
 80061a6:	bf00      	nop
 80061a8:	20000488 	.word	0x20000488

080061ac <_isatty_r>:
 80061ac:	b538      	push	{r3, r4, r5, lr}
 80061ae:	4d06      	ldr	r5, [pc, #24]	@ (80061c8 <_isatty_r+0x1c>)
 80061b0:	2300      	movs	r3, #0
 80061b2:	4604      	mov	r4, r0
 80061b4:	4608      	mov	r0, r1
 80061b6:	602b      	str	r3, [r5, #0]
 80061b8:	f7fb fc5b 	bl	8001a72 <_isatty>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d102      	bne.n	80061c6 <_isatty_r+0x1a>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	b103      	cbz	r3, 80061c6 <_isatty_r+0x1a>
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
 80061c8:	20000488 	.word	0x20000488

080061cc <_sbrk_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4d06      	ldr	r5, [pc, #24]	@ (80061e8 <_sbrk_r+0x1c>)
 80061d0:	2300      	movs	r3, #0
 80061d2:	4604      	mov	r4, r0
 80061d4:	4608      	mov	r0, r1
 80061d6:	602b      	str	r3, [r5, #0]
 80061d8:	f7fb fc64 	bl	8001aa4 <_sbrk>
 80061dc:	1c43      	adds	r3, r0, #1
 80061de:	d102      	bne.n	80061e6 <_sbrk_r+0x1a>
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	b103      	cbz	r3, 80061e6 <_sbrk_r+0x1a>
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	bd38      	pop	{r3, r4, r5, pc}
 80061e8:	20000488 	.word	0x20000488

080061ec <_init>:
 80061ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ee:	bf00      	nop
 80061f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061f2:	bc08      	pop	{r3}
 80061f4:	469e      	mov	lr, r3
 80061f6:	4770      	bx	lr

080061f8 <_fini>:
 80061f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fa:	bf00      	nop
 80061fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061fe:	bc08      	pop	{r3}
 8006200:	469e      	mov	lr, r3
 8006202:	4770      	bx	lr
