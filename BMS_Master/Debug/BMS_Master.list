
BMS_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006560  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08006724  08006724  00007724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006774  08006774  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006774  08006774  00007774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800677c  0800677c  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800677c  0800677c  0000777c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006780  08006780  00007780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006784  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  20000068  080067ec  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  080067ec  000084ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001782c  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d5  00000000  00000000  0001f8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  00022da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001125  00000000  00000000  00024390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023fe8  00000000  00000000  000254b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001afc7  00000000  00000000  0004949d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d783b  00000000  00000000  00064464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013bc9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000636c  00000000  00000000  0013bce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00142050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800670c 	.word	0x0800670c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	0800670c 	.word	0x0800670c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <CAN_send_mess>:

}


int CAN_send_mess(CAN_HandleTypeDef *hcan, uint8_t *TxData)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]

	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800053a:	4b08      	ldr	r3, [pc, #32]	@ (800055c <CAN_send_mess+0x2c>)
 800053c:	683a      	ldr	r2, [r7, #0]
 800053e:	4908      	ldr	r1, [pc, #32]	@ (8000560 <CAN_send_mess+0x30>)
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f001 ff44 	bl	80023ce <HAL_CAN_AddTxMessage>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <CAN_send_mess+0x20>
	{
	   CAN_Error_Handler ();
 800054c:	f000 f80a 	bl	8000564 <CAN_Error_Handler>
	}


	return 0;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	2000009c 	.word	0x2000009c
 8000560:	20000084 	.word	0x20000084

08000564 <CAN_Error_Handler>:
}



void CAN_Error_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000568:	b672      	cpsid	i
}
 800056a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <CAN_Error_Handler+0x8>

08000570 <CAN_Filter_Config>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void CAN_Filter_Config(CAN_HandleTypeDef *hcan)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08c      	sub	sp, #48	@ 0x30
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
    CAN_FilterTypeDef filter;
    filter.FilterActivation = ENABLE;
 8000578:	2301      	movs	r3, #1
 800057a:	62bb      	str	r3, [r7, #40]	@ 0x28
    filter.FilterBank = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000580:	2300      	movs	r3, #0
 8000582:	61bb      	str	r3, [r7, #24]
    filter.FilterIdHigh = 0x0000;
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
    filter.FilterIdLow = 0x0000;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
    filter.FilterMaskIdHigh = 0x0000;
 800058c:	2300      	movs	r3, #0
 800058e:	613b      	str	r3, [r7, #16]
    filter.FilterMaskIdLow = 0x0000;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000594:	2300      	movs	r3, #0
 8000596:	623b      	str	r3, [r7, #32]
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000598:	2301      	movs	r3, #1
 800059a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_CAN_ConfigFilter(hcan, &filter) != HAL_OK)
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	4619      	mov	r1, r3
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f001 fda6 	bl	80020f4 <HAL_CAN_ConfigFilter>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <CAN_Filter_Config+0x42>
    {
        CAN_Error_Handler();
 80005ae:	f7ff ffd9 	bl	8000564 <CAN_Error_Handler>
    }
}
 80005b2:	bf00      	nop
 80005b4:	3730      	adds	r7, #48	@ 0x30
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <CAN_Activate_Interrupts>:

void CAN_Activate_Interrupts(CAN_HandleTypeDef *hcan)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY);
 80005c4:	2103      	movs	r1, #3
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f002 f8f3 	bl	80027b2 <HAL_CAN_ActivateNotification>
//    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);

    if (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV) ||
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	f003 0302 	and.w	r3, r3, #2
 80005d6:	2b02      	cmp	r3, #2
 80005d8:	d006      	beq.n	80005e8 <CAN_Activate_Interrupts+0x2c>
        __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0304 	and.w	r3, r3, #4
    if (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV) ||
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	d108      	bne.n	80005fa <CAN_Activate_Interrupts+0x3e>
    {
        printf("CAN in error state, attempting reset\n");
 80005e8:	480a      	ldr	r0, [pc, #40]	@ (8000614 <CAN_Activate_Interrupts+0x58>)
 80005ea:	f005 fcfb 	bl	8005fe4 <puts>
        HAL_CAN_Stop(hcan);
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f001 fea4 	bl	800233c <HAL_CAN_Stop>
        HAL_CAN_Init(hcan);
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f001 fc81 	bl	8001efc <HAL_CAN_Init>
    }

    if (HAL_CAN_Start(hcan) != HAL_OK)
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f001 fe5a 	bl	80022b4 <HAL_CAN_Start>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <CAN_Activate_Interrupts+0x4e>
    {
        CAN_Error_Handler();
 8000606:	f7ff ffad 	bl	8000564 <CAN_Error_Handler>
    }
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	08006724 	.word	0x08006724

08000618 <HAL_CAN_RxFifo0MsgPendingCallback>:

extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
//	slave_return_t return_message;

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000620:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000622:	4a0f      	ldr	r2, [pc, #60]	@ (8000660 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000624:	2100      	movs	r1, #0
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f001 ffa1 	bl	800256e <HAL_CAN_GetRxMessage>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d110      	bne.n	8000654 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
    {
//    	Start timer and turn ON Yellow LED
    	HAL_TIM_Base_Start_IT(&htim3);
 8000632:	480c      	ldr	r0, [pc, #48]	@ (8000664 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000634:	f003 ff68 	bl	8004508 <HAL_TIM_Base_Start_IT>
        HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_SET); // Turn ON LED
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800063e:	480a      	ldr	r0, [pc, #40]	@ (8000668 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000640:	f002 fe44 	bl	80032cc <HAL_GPIO_WritePin>

//      Parse and store message according to type
//      If the header is of standard length (like for slave reception message)
        if(RxHeader.IDE == CAN_ID_STD){
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d103      	bne.n	8000654 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
        	store_received_info(&RxHeader, RxData);
 800064c:	4903      	ldr	r1, [pc, #12]	@ (800065c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800064e:	4804      	ldr	r0, [pc, #16]	@ (8000660 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000650:	f000 fd3e 	bl	80010d0 <store_received_info>
        if(RxHeader.IDE == CAN_ID_EXT){

        }

    }
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200000bc 	.word	0x200000bc
 8000660:	200000a0 	.word	0x200000a0
 8000664:	20000224 	.word	0x20000224
 8000668:	40020400 	.word	0x40020400

0800066c <HAL_TIM_PeriodElapsedCallback>:
	//    	Start timer and turn ON Yellow LED
	    	HAL_TIM_Base_Start_IT(&htim3);
	        HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_SET); // Turn ON LED
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]


	if (htim->Instance == TIM2) {  // Check if it's the correct timer
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800067c:	d165      	bne.n	800074a <HAL_TIM_PeriodElapsedCallback+0xde>



    	if((timer_count % HB_10MS_PERIODS) == 0){
 800067e:	4b3c      	ldr	r3, [pc, #240]	@ (8000770 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	b29b      	uxth	r3, r3
 8000684:	4a3b      	ldr	r2, [pc, #236]	@ (8000774 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000686:	fba2 1203 	umull	r1, r2, r2, r3
 800068a:	0912      	lsrs	r2, r2, #4
 800068c:	2132      	movs	r1, #50	@ 0x32
 800068e:	fb01 f202 	mul.w	r2, r1, r2
 8000692:	1a9b      	subs	r3, r3, r2
 8000694:	b29b      	uxth	r3, r3
 8000696:	2b00      	cmp	r3, #0
 8000698:	d104      	bne.n	80006a4 <HAL_TIM_PeriodElapsedCallback+0x38>
    		HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin); // Toggle LED
 800069a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800069e:	4836      	ldr	r0, [pc, #216]	@ (8000778 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80006a0:	f002 fe2d 	bl	80032fe <HAL_GPIO_TogglePin>
    	}

    	if((timer_count % CHARGER_CONNECTION_10MS_PERIODS) == 0){
 80006a4:	4b32      	ldr	r3, [pc, #200]	@ (8000770 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80006a6:	881b      	ldrh	r3, [r3, #0]

    	}

    	if((timer_count % ASK_SLAVE_FOR_INFO_10MS_PERIODS) == 0){
 80006a8:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80006aa:	881b      	ldrh	r3, [r3, #0]

    	}


    	// High voltage light blinking and activating logic
    	if((timer_count % SLOW_BLINKING_HV_10MS_PERIODS) == 0)
 80006ac:	4b30      	ldr	r3, [pc, #192]	@ (8000770 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	4b30      	ldr	r3, [pc, #192]	@ (8000774 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80006b4:	fba3 1302 	umull	r1, r3, r3, r2
 80006b8:	08d9      	lsrs	r1, r3, #3
 80006ba:	460b      	mov	r3, r1
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	440b      	add	r3, r1
 80006c0:	0099      	lsls	r1, r3, #2
 80006c2:	440b      	add	r3, r1
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d109      	bne.n	80006e0 <HAL_TIM_PeriodElapsedCallback+0x74>
    	{
    		//  If the precharge contactor is ON, blink the HV light
    		if(blinking_HV_led == 1)
 80006cc:	4b2b      	ldr	r3, [pc, #172]	@ (800077c <HAL_TIM_PeriodElapsedCallback+0x110>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d104      	bne.n	80006e0 <HAL_TIM_PeriodElapsedCallback+0x74>
//    			HAL_GPIO_TogglePin(LIGHT_GPIO_Port, LIGHT_Pin);
    			HAL_GPIO_TogglePin(YELLOW_LED_GPIO_Port, YELLOW_LED_PIN);
 80006d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006da:	4827      	ldr	r0, [pc, #156]	@ (8000778 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80006dc:	f002 fe0f 	bl	80032fe <HAL_GPIO_TogglePin>
    	}
    	if((timer_count % FAST_BLINKING_HV_10MS_PERIODS) == 0)
 80006e0:	4b23      	ldr	r3, [pc, #140]	@ (8000770 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80006e8:	fba3 1302 	umull	r1, r3, r3, r2
 80006ec:	08d9      	lsrs	r1, r3, #3
 80006ee:	460b      	mov	r3, r1
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	440b      	add	r3, r1
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d109      	bne.n	8000712 <HAL_TIM_PeriodElapsedCallback+0xa6>
    	{
    		//  If the precharge contactor and the main contactor are ON, blink the HV light rapidly
    		if(blinking_HV_led == 2)
 80006fe:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	2b02      	cmp	r3, #2
 8000706:	d104      	bne.n	8000712 <HAL_TIM_PeriodElapsedCallback+0xa6>
    			HAL_GPIO_TogglePin(YELLOW_LED_GPIO_Port, YELLOW_LED_PIN);
 8000708:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800070c:	481a      	ldr	r0, [pc, #104]	@ (8000778 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800070e:	f002 fdf6 	bl	80032fe <HAL_GPIO_TogglePin>

//    			HAL_GPIO_TogglePin(LIGHT_GPIO_Port, LIGHT_Pin);
    	}

    	// If timer counter has not reached max value, increment
    	!((timer_count + 1) % TIMER_MAX) ? timer_count = 0 : timer_count++;
 8000712:	4b17      	ldr	r3, [pc, #92]	@ (8000770 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	b29b      	uxth	r3, r3
 8000718:	1c5a      	adds	r2, r3, #1
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800071c:	fb83 1302 	smull	r1, r3, r3, r2
 8000720:	1199      	asrs	r1, r3, #6
 8000722:	17d3      	asrs	r3, r2, #31
 8000724:	1acb      	subs	r3, r1, r3
 8000726:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800072a:	fb01 f303 	mul.w	r3, r1, r3
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	d103      	bne.n	800073c <HAL_TIM_PeriodElapsedCallback+0xd0>
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	801a      	strh	r2, [r3, #0]
 800073a:	e006      	b.n	800074a <HAL_TIM_PeriodElapsedCallback+0xde>
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	b29b      	uxth	r3, r3
 8000742:	3301      	adds	r3, #1
 8000744:	b29a      	uxth	r2, r3
 8000746:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000748:	801a      	strh	r2, [r3, #0]
    }


	// Timer that handles the activation time of yellow led on CAN package Rx/Tx
    if (htim->Instance == TIM3) {
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a0e      	ldr	r2, [pc, #56]	@ (8000788 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d108      	bne.n	8000766 <HAL_TIM_PeriodElapsedCallback+0xfa>
        HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET); // Turn off LED
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800075a:	4807      	ldr	r0, [pc, #28]	@ (8000778 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800075c:	f002 fdb6 	bl	80032cc <HAL_GPIO_WritePin>
        HAL_TIM_Base_Stop_IT(&htim3);
 8000760:	480a      	ldr	r0, [pc, #40]	@ (800078c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000762:	f003 ff41 	bl	80045e8 <HAL_TIM_Base_Stop_IT>
    }

}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000352 	.word	0x20000352
 8000774:	51eb851f 	.word	0x51eb851f
 8000778:	40020400 	.word	0x40020400
 800077c:	20000355 	.word	0x20000355
 8000780:	cccccccd 	.word	0xcccccccd
 8000784:	10624dd3 	.word	0x10624dd3
 8000788:	40000400 	.word	0x40000400
 800078c:	20000224 	.word	0x20000224

08000790 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == IGNITION_Pin){ //Ignition interrupt triggered on both rising and falling edge.
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	2b20      	cmp	r3, #32
 800079e:	d108      	bne.n	80007b2 <HAL_GPIO_EXTI_Callback+0x22>

		all_connection_states ^= IGNITION_MASK; //Ignition bit is toggled when edge is detected
 80007a0:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <HAL_GPIO_EXTI_Callback+0x60>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	f083 0301 	eor.w	r3, r3, #1
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <HAL_GPIO_EXTI_Callback+0x60>)
 80007ae:	701a      	strb	r2, [r3, #0]
		deactivate_precharge_contactor();

	}


}
 80007b0:	e01a      	b.n	80007e8 <HAL_GPIO_EXTI_Callback+0x58>
	}else if(GPIO_Pin == CHARGER_DETECT_Pin){ //Ignition interrupt triggered on both rising and falling edge.
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	2b08      	cmp	r3, #8
 80007b6:	d108      	bne.n	80007ca <HAL_GPIO_EXTI_Callback+0x3a>
		all_connection_states ^= CHARGER_CONN_MASK; //Charger bit is toggled when edge is detected
 80007b8:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <HAL_GPIO_EXTI_Callback+0x60>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	f083 0302 	eor.w	r3, r3, #2
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <HAL_GPIO_EXTI_Callback+0x60>)
 80007c6:	701a      	strb	r2, [r3, #0]
}
 80007c8:	e00e      	b.n	80007e8 <HAL_GPIO_EXTI_Callback+0x58>
	}else if(GPIO_Pin == EMERGENCY_STOP_Pin){
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	2b10      	cmp	r3, #16
 80007ce:	d10b      	bne.n	80007e8 <HAL_GPIO_EXTI_Callback+0x58>
		all_connection_states |= EMERGENCY_STOP_MASK;
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <HAL_GPIO_EXTI_Callback+0x60>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	f043 0304 	orr.w	r3, r3, #4
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	4b04      	ldr	r3, [pc, #16]	@ (80007f0 <HAL_GPIO_EXTI_Callback+0x60>)
 80007de:	701a      	strb	r2, [r3, #0]
		deactivate_main_contactor();
 80007e0:	f000 fbe4 	bl	8000fac <deactivate_main_contactor>
		deactivate_precharge_contactor();
 80007e4:	f000 fbfa 	bl	8000fdc <deactivate_precharge_contactor>
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000354 	.word	0x20000354

080007f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007fa:	f001 f887 	bl	800190c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007fe:	f000 f82f 	bl	8000860 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000802:	f000 fa73 	bl	8000cec <MX_GPIO_Init>
	MX_CAN2_Init();
 8000806:	f000 f8db 	bl	80009c0 <MX_CAN2_Init>
	MX_I2C1_Init();
 800080a:	f000 f929 	bl	8000a60 <MX_I2C1_Init>
	MX_I2C3_Init();
 800080e:	f000 f955 	bl	8000abc <MX_I2C3_Init>
	MX_USART6_IRDA_Init();
 8000812:	f000 fa45 	bl	8000ca0 <MX_USART6_IRDA_Init>
	MX_ADC1_Init();
 8000816:	f000 f881 	bl	800091c <MX_ADC1_Init>
	MX_USART1_UART_Init();
 800081a:	f000 fa17 	bl	8000c4c <MX_USART1_UART_Init>
	MX_TIM2_Init();
 800081e:	f000 f97b 	bl	8000b18 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000822:	f000 f9c5 	bl	8000bb0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim2); //Start Main timer (10 ms)
 8000826:	480b      	ldr	r0, [pc, #44]	@ (8000854 <main+0x60>)
 8000828:	f003 fe6e 	bl	8004508 <HAL_TIM_Base_Start_IT>

	init_slave_info_lists(); //Initialize all fields that will retain messages coming from slaves
 800082c:	f000 fc08 	bl	8001040 <init_slave_info_lists>

	ITM_Init(); // Init ITM to send data through ITM port 0
 8000830:	f000 fba0 	bl	8000f74 <ITM_Init>

		uint8_t TxData[2] = {1,2};
 8000834:	f240 2301 	movw	r3, #513	@ 0x201
 8000838:	80bb      	strh	r3, [r7, #4]
//
//			in_operation_mode();
//
//		}

		CAN_send_mess(&hcan2, TxData);
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	4619      	mov	r1, r3
 800083e:	4806      	ldr	r0, [pc, #24]	@ (8000858 <main+0x64>)
 8000840:	f7ff fe76 	bl	8000530 <CAN_send_mess>

		master_mode = STANDBY_MODE;
 8000844:	4b05      	ldr	r3, [pc, #20]	@ (800085c <main+0x68>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
		HAL_Delay(MAIN_LOOP_DELAY_MS);
 800084a:	2064      	movs	r0, #100	@ 0x64
 800084c:	f001 f8d0 	bl	80019f0 <HAL_Delay>
		CAN_send_mess(&hcan2, TxData);
 8000850:	bf00      	nop
 8000852:	e7f2      	b.n	800083a <main+0x46>
 8000854:	200001dc 	.word	0x200001dc
 8000858:	2000010c 	.word	0x2000010c
 800085c:	20000350 	.word	0x20000350

08000860 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b094      	sub	sp, #80	@ 0x50
 8000864:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	2234      	movs	r2, #52	@ 0x34
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f005 fc98 	bl	80061a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	4b22      	ldr	r3, [pc, #136]	@ (8000914 <SystemClock_Config+0xb4>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088c:	4a21      	ldr	r2, [pc, #132]	@ (8000914 <SystemClock_Config+0xb4>)
 800088e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000892:	6413      	str	r3, [r2, #64]	@ 0x40
 8000894:	4b1f      	ldr	r3, [pc, #124]	@ (8000914 <SystemClock_Config+0xb4>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a0:	2300      	movs	r3, #0
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <SystemClock_Config+0xb8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000918 <SystemClock_Config+0xb8>)
 80008aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <SystemClock_Config+0xb8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008bc:	2302      	movs	r3, #2
 80008be:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c0:	2301      	movs	r3, #1
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c4:	2310      	movs	r3, #16
 80008c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 fb45 	bl	8003f60 <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x80>
	{
		Error_Handler();
 80008dc:	f000 fb60 	bl	8000fa0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e0:	230f      	movs	r3, #15
 80008e2:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 f950 	bl	8003ba0 <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xaa>
	{
		Error_Handler();
 8000906:	f000 fb4b 	bl	8000fa0 <Error_Handler>
	}
}
 800090a:	bf00      	nop
 800090c:	3750      	adds	r7, #80	@ 0x50
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40007000 	.word	0x40007000

0800091c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000922:	463b      	mov	r3, r7
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800092e:	4b21      	ldr	r3, [pc, #132]	@ (80009b4 <MX_ADC1_Init+0x98>)
 8000930:	4a21      	ldr	r2, [pc, #132]	@ (80009b8 <MX_ADC1_Init+0x9c>)
 8000932:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000934:	4b1f      	ldr	r3, [pc, #124]	@ (80009b4 <MX_ADC1_Init+0x98>)
 8000936:	2200      	movs	r2, #0
 8000938:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800093a:	4b1e      	ldr	r3, [pc, #120]	@ (80009b4 <MX_ADC1_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000940:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <MX_ADC1_Init+0x98>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000946:	4b1b      	ldr	r3, [pc, #108]	@ (80009b4 <MX_ADC1_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800094c:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <MX_ADC1_Init+0x98>)
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000954:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <MX_ADC1_Init+0x98>)
 8000956:	2200      	movs	r2, #0
 8000958:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800095a:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <MX_ADC1_Init+0x98>)
 800095c:	4a17      	ldr	r2, [pc, #92]	@ (80009bc <MX_ADC1_Init+0xa0>)
 800095e:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000960:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <MX_ADC1_Init+0x98>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000966:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <MX_ADC1_Init+0x98>)
 8000968:	2201      	movs	r2, #1
 800096a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_ADC1_Init+0x98>)
 800096e:	2200      	movs	r2, #0
 8000970:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000974:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <MX_ADC1_Init+0x98>)
 8000976:	2201      	movs	r2, #1
 8000978:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800097a:	480e      	ldr	r0, [pc, #56]	@ (80009b4 <MX_ADC1_Init+0x98>)
 800097c:	f001 f85c 	bl	8001a38 <HAL_ADC_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 8000986:	f000 fb0b 	bl	8000fa0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800098a:	2309      	movs	r3, #9
 800098c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800098e:	2301      	movs	r3, #1
 8000990:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000996:	463b      	mov	r3, r7
 8000998:	4619      	mov	r1, r3
 800099a:	4806      	ldr	r0, [pc, #24]	@ (80009b4 <MX_ADC1_Init+0x98>)
 800099c:	f001 f890 	bl	8001ac0 <HAL_ADC_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 80009a6:	f000 fafb 	bl	8000fa0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200000c4 	.word	0x200000c4
 80009b8:	40012000 	.word	0x40012000
 80009bc:	0f000001 	.word	0x0f000001

080009c0 <MX_CAN2_Init>:
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CAN2_Init 0 */
	__HAL_RCC_CAN1_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b22      	ldr	r3, [pc, #136]	@ (8000a54 <MX_CAN2_Init+0x94>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ce:	4a21      	ldr	r2, [pc, #132]	@ (8000a54 <MX_CAN2_Init+0x94>)
 80009d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <MX_CAN2_Init+0x94>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 80009e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <MX_CAN2_Init+0x98>)
 80009e4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a5c <MX_CAN2_Init+0x9c>)
 80009e6:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 4;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_CAN2_Init+0x98>)
 80009ea:	2204      	movs	r2, #4
 80009ec:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_CAN2_Init+0x98>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_CAN2_Init+0x98>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <MX_CAN2_Init+0x98>)
 80009fc:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000a00:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <MX_CAN2_Init+0x98>)
 8000a04:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000a08:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <MX_CAN2_Init+0x98>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8000a10:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_CAN2_Init+0x98>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <MX_CAN2_Init+0x98>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <MX_CAN2_Init+0x98>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000a22:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <MX_CAN2_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = ENABLE;
 8000a28:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <MX_CAN2_Init+0x98>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000a2e:	480a      	ldr	r0, [pc, #40]	@ (8000a58 <MX_CAN2_Init+0x98>)
 8000a30:	f001 fa64 	bl	8001efc <HAL_CAN_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_CAN2_Init+0x7e>
	{
		Error_Handler();
 8000a3a:	f000 fab1 	bl	8000fa0 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	CAN_Filter_Config(&hcan2);
 8000a3e:	4806      	ldr	r0, [pc, #24]	@ (8000a58 <MX_CAN2_Init+0x98>)
 8000a40:	f7ff fd96 	bl	8000570 <CAN_Filter_Config>
	CAN_Activate_Interrupts(&hcan2);
 8000a44:	4804      	ldr	r0, [pc, #16]	@ (8000a58 <MX_CAN2_Init+0x98>)
 8000a46:	f7ff fdb9 	bl	80005bc <CAN_Activate_Interrupts>

	/* USER CODE END CAN2_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800
 8000a58:	2000010c 	.word	0x2000010c
 8000a5c:	40006800 	.word	0x40006800

08000a60 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a66:	4a13      	ldr	r2, [pc, #76]	@ (8000ab4 <MX_I2C1_Init+0x54>)
 8000a68:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a6c:	4a12      	ldr	r2, [pc, #72]	@ (8000ab8 <MX_I2C1_Init+0x58>)
 8000a6e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a82:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a90:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a9e:	f002 fc61 	bl	8003364 <HAL_I2C_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8000aa8:	f000 fa7a 	bl	8000fa0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000134 	.word	0x20000134
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	000186a0 	.word	0x000186a0

08000abc <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <MX_I2C3_Init+0x50>)
 8000ac2:	4a13      	ldr	r2, [pc, #76]	@ (8000b10 <MX_I2C3_Init+0x54>)
 8000ac4:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <MX_I2C3_Init+0x50>)
 8000ac8:	4a12      	ldr	r2, [pc, #72]	@ (8000b14 <MX_I2C3_Init+0x58>)
 8000aca:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <MX_I2C3_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <MX_I2C3_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_I2C3_Init+0x50>)
 8000ada:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ade:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <MX_I2C3_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <MX_I2C3_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aec:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <MX_I2C3_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <MX_I2C3_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <MX_I2C3_Init+0x50>)
 8000afa:	f002 fc33 	bl	8003364 <HAL_I2C_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C3_Init+0x4c>
	{
		Error_Handler();
 8000b04:	f000 fa4c 	bl	8000fa0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000188 	.word	0x20000188
 8000b10:	40005c00 	.word	0x40005c00
 8000b14:	000186a0 	.word	0x000186a0

08000b18 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b1e:	f107 0308 	add.w	r3, r7, #8
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_TIM2_Init+0x94>)
 8000b36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b3a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 999;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <MX_TIM2_Init+0x94>)
 8000b3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b42:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b44:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <MX_TIM2_Init+0x94>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 160;
 8000b4a:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <MX_TIM2_Init+0x94>)
 8000b4c:	22a0      	movs	r2, #160	@ 0xa0
 8000b4e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b50:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <MX_TIM2_Init+0x94>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <MX_TIM2_Init+0x94>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b5c:	4813      	ldr	r0, [pc, #76]	@ (8000bac <MX_TIM2_Init+0x94>)
 8000b5e:	f003 fc83 	bl	8004468 <HAL_TIM_Base_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 8000b68:	f000 fa1a 	bl	8000fa0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b70:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	4619      	mov	r1, r3
 8000b78:	480c      	ldr	r0, [pc, #48]	@ (8000bac <MX_TIM2_Init+0x94>)
 8000b7a:	f003 fe54 	bl	8004826 <HAL_TIM_ConfigClockSource>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 8000b84:	f000 fa0c 	bl	8000fa0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b90:	463b      	mov	r3, r7
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_TIM2_Init+0x94>)
 8000b96:	f004 f87b 	bl	8004c90 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 8000ba0:	f000 f9fe 	bl	8000fa0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200001dc 	.word	0x200001dc

08000bb0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c44 <MX_TIM3_Init+0x94>)
 8000bce:	4a1e      	ldr	r2, [pc, #120]	@ (8000c48 <MX_TIM3_Init+0x98>)
 8000bd0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = PSC_1000;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <MX_TIM3_Init+0x94>)
 8000bd4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bd8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	@ (8000c44 <MX_TIM3_Init+0x94>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = COUNTER_50MS;
 8000be0:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <MX_TIM3_Init+0x94>)
 8000be2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000be6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be8:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <MX_TIM3_Init+0x94>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bee:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <MX_TIM3_Init+0x94>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bf4:	4813      	ldr	r0, [pc, #76]	@ (8000c44 <MX_TIM3_Init+0x94>)
 8000bf6:	f003 fc37 	bl	8004468 <HAL_TIM_Base_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 8000c00:	f000 f9ce 	bl	8000fa0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c08:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c0a:	f107 0308 	add.w	r3, r7, #8
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <MX_TIM3_Init+0x94>)
 8000c12:	f003 fe08 	bl	8004826 <HAL_TIM_ConfigClockSource>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 8000c1c:	f000 f9c0 	bl	8000fa0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c20:	2300      	movs	r3, #0
 8000c22:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c28:	463b      	mov	r3, r7
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <MX_TIM3_Init+0x94>)
 8000c2e:	f004 f82f 	bl	8004c90 <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 8000c38:	f000 f9b2 	bl	8000fa0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000224 	.word	0x20000224
 8000c48:	40000400 	.word	0x40000400

08000c4c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000c50:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c52:	4a12      	ldr	r2, [pc, #72]	@ (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c54:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c84:	f004 f894 	bl	8004db0 <HAL_UART_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000c8e:	f000 f987 	bl	8000fa0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000026c 	.word	0x2000026c
 8000c9c:	40011000 	.word	0x40011000

08000ca0 <MX_USART6_IRDA_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_IRDA_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	hirda6.Instance = USART6;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <MX_USART6_IRDA_Init+0x44>)
 8000ca6:	4a10      	ldr	r2, [pc, #64]	@ (8000ce8 <MX_USART6_IRDA_Init+0x48>)
 8000ca8:	601a      	str	r2, [r3, #0]
	hirda6.Init.BaudRate = 115200;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <MX_USART6_IRDA_Init+0x44>)
 8000cac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cb0:	605a      	str	r2, [r3, #4]
	hirda6.Init.WordLength = IRDA_WORDLENGTH_8B;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <MX_USART6_IRDA_Init+0x44>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
	hirda6.Init.Parity = IRDA_PARITY_NONE;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <MX_USART6_IRDA_Init+0x44>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
	hirda6.Init.Mode = IRDA_MODE_TX_RX;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <MX_USART6_IRDA_Init+0x44>)
 8000cc0:	220c      	movs	r2, #12
 8000cc2:	611a      	str	r2, [r3, #16]
	hirda6.Init.Prescaler = 1;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <MX_USART6_IRDA_Init+0x44>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	751a      	strb	r2, [r3, #20]
	hirda6.Init.IrDAMode = IRDA_POWERMODE_NORMAL;
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <MX_USART6_IRDA_Init+0x44>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
	if (HAL_IRDA_Init(&hirda6) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	@ (8000ce4 <MX_USART6_IRDA_Init+0x44>)
 8000cd2:	f002 fc8b 	bl	80035ec <HAL_IRDA_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_USART6_IRDA_Init+0x40>
	{
		Error_Handler();
 8000cdc:	f000 f960 	bl	8000fa0 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200002b4 	.word	0x200002b4
 8000ce8:	40011400 	.word	0x40011400

08000cec <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28
 8000cf0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b96      	ldr	r3, [pc, #600]	@ (8000f60 <MX_GPIO_Init+0x274>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	4a95      	ldr	r2, [pc, #596]	@ (8000f60 <MX_GPIO_Init+0x274>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d12:	4b93      	ldr	r3, [pc, #588]	@ (8000f60 <MX_GPIO_Init+0x274>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b8f      	ldr	r3, [pc, #572]	@ (8000f60 <MX_GPIO_Init+0x274>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a8e      	ldr	r2, [pc, #568]	@ (8000f60 <MX_GPIO_Init+0x274>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b8c      	ldr	r3, [pc, #560]	@ (8000f60 <MX_GPIO_Init+0x274>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	4b88      	ldr	r3, [pc, #544]	@ (8000f60 <MX_GPIO_Init+0x274>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	4a87      	ldr	r2, [pc, #540]	@ (8000f60 <MX_GPIO_Init+0x274>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4a:	4b85      	ldr	r3, [pc, #532]	@ (8000f60 <MX_GPIO_Init+0x274>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4b81      	ldr	r3, [pc, #516]	@ (8000f60 <MX_GPIO_Init+0x274>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a80      	ldr	r2, [pc, #512]	@ (8000f60 <MX_GPIO_Init+0x274>)
 8000d60:	f043 0308 	orr.w	r3, r3, #8
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b7e      	ldr	r3, [pc, #504]	@ (8000f60 <MX_GPIO_Init+0x274>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0308 	and.w	r3, r3, #8
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, PRECHARGE_CONTACTOR_Pin|MAIN_CONTACTOR_Pin|GPIO0_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2107      	movs	r1, #7
 8000d76:	487b      	ldr	r0, [pc, #492]	@ (8000f64 <MX_GPIO_Init+0x278>)
 8000d78:	f002 faa8 	bl	80032cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LIGHT_Pin|CHANNEL_STATUS_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2148      	movs	r1, #72	@ 0x48
 8000d80:	4879      	ldr	r0, [pc, #484]	@ (8000f68 <MX_GPIO_Init+0x27c>)
 8000d82:	f002 faa3 	bl	80032cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO3_Pin|YELLOW_LED_Pin|RED_LED_Pin|GPIO2_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 4146 	mov.w	r1, #50688	@ 0xc600
 8000d8c:	4877      	ldr	r0, [pc, #476]	@ (8000f6c <MX_GPIO_Init+0x280>)
 8000d8e:	f002 fa9d 	bl	80032cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : ISOLATION_FAULT_DETECT_Pin */
	GPIO_InitStruct.Pin = ISOLATION_FAULT_DETECT_Pin;
 8000d92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d96:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ISOLATION_FAULT_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	486f      	ldr	r0, [pc, #444]	@ (8000f64 <MX_GPIO_Init+0x278>)
 8000da8:	f002 f8fc 	bl	8002fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PRECHARGE_CONTACTOR_Pin MAIN_CONTACTOR_Pin GPIO0_Pin */
	GPIO_InitStruct.Pin = PRECHARGE_CONTACTOR_Pin|MAIN_CONTACTOR_Pin|GPIO0_Pin;
 8000dac:	2307      	movs	r3, #7
 8000dae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4868      	ldr	r0, [pc, #416]	@ (8000f64 <MX_GPIO_Init+0x278>)
 8000dc4:	f002 f8ee 	bl	8002fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : CHARGER_DETECT_Pin */
	GPIO_InitStruct.Pin = CHARGER_DETECT_Pin;
 8000dc8:	2308      	movs	r3, #8
 8000dca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000dcc:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000dd0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CHARGER_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4861      	ldr	r0, [pc, #388]	@ (8000f64 <MX_GPIO_Init+0x278>)
 8000dde:	f002 f8e1 	bl	8002fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : CURRENT_Pin */
	GPIO_InitStruct.Pin = CURRENT_Pin;
 8000de2:	2304      	movs	r3, #4
 8000de4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CURRENT_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	485c      	ldr	r0, [pc, #368]	@ (8000f68 <MX_GPIO_Init+0x27c>)
 8000df6:	f002 f8d5 	bl	8002fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LIGHT_Pin CHANNEL_STATUS_Pin */
	GPIO_InitStruct.Pin = LIGHT_Pin|CHANNEL_STATUS_Pin;
 8000dfa:	2348      	movs	r3, #72	@ 0x48
 8000dfc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4855      	ldr	r0, [pc, #340]	@ (8000f68 <MX_GPIO_Init+0x27c>)
 8000e12:	f002 f8c7 	bl	8002fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : EMERGENCY_STOP_Pin */
	GPIO_InitStruct.Pin = EMERGENCY_STOP_Pin;
 8000e16:	2310      	movs	r3, #16
 8000e18:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e1a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e1e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(EMERGENCY_STOP_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	484e      	ldr	r0, [pc, #312]	@ (8000f64 <MX_GPIO_Init+0x278>)
 8000e2c:	f002 f8ba 	bl	8002fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : IGNITION_Pin */
	GPIO_InitStruct.Pin = IGNITION_Pin;
 8000e30:	2320      	movs	r3, #32
 8000e32:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e34:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000e38:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(IGNITION_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	4847      	ldr	r0, [pc, #284]	@ (8000f64 <MX_GPIO_Init+0x278>)
 8000e46:	f002 f8ad 	bl	8002fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : ISOLATION_FAULT_DETECTB0_Pin */
	GPIO_InitStruct.Pin = ISOLATION_FAULT_DETECTB0_Pin;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ISOLATION_FAULT_DETECTB0_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4843      	ldr	r0, [pc, #268]	@ (8000f6c <MX_GPIO_Init+0x280>)
 8000e5e:	f002 f8a1 	bl	8002fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIO3_Pin YELLOW_LED_Pin RED_LED_Pin GPIO2_Pin */
	GPIO_InitStruct.Pin = GPIO3_Pin|YELLOW_LED_Pin|RED_LED_Pin|GPIO2_Pin;
 8000e62:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000e66:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	483c      	ldr	r0, [pc, #240]	@ (8000f6c <MX_GPIO_Init+0x280>)
 8000e7c:	f002 f892 	bl	8002fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e80:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000e84:	617b      	str	r3, [r7, #20]
			|GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e92:	230c      	movs	r3, #12
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4831      	ldr	r0, [pc, #196]	@ (8000f64 <MX_GPIO_Init+0x278>)
 8000e9e:	f002 f881 	bl	8002fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA11 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ea2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ea6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000eb4:	230a      	movs	r3, #10
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	482a      	ldr	r0, [pc, #168]	@ (8000f68 <MX_GPIO_Init+0x27c>)
 8000ec0:	f002 f870 	bl	8002fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	4824      	ldr	r0, [pc, #144]	@ (8000f70 <MX_GPIO_Init+0x284>)
 8000ee0:	f002 f860 	bl	8002fa4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2009      	movs	r0, #9
 8000eea:	f001 ff92 	bl	8002e12 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000eee:	2009      	movs	r0, #9
 8000ef0:	f001 ffab 	bl	8002e4a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	200a      	movs	r0, #10
 8000efa:	f001 ff8a 	bl	8002e12 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000efe:	200a      	movs	r0, #10
 8000f00:	f001 ffa3 	bl	8002e4a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	2017      	movs	r0, #23
 8000f0a:	f001 ff82 	bl	8002e12 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f0e:	2017      	movs	r0, #23
 8000f10:	f001 ff9b 	bl	8002e4a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	GPIO_InitStruct.Pin = CAN2_RX_Pin;
 8000f14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f18:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_AF9_CAN2;
 8000f1a:	2309      	movs	r3, #9
 8000f1c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CAN2_RX_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4810      	ldr	r0, [pc, #64]	@ (8000f6c <MX_GPIO_Init+0x280>)
 8000f2a:	f002 f83b 	bl	8002fa4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = CAN2_TX_Pin;
 8000f2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f32:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_AF9_CAN2;
 8000f34:	2309      	movs	r3, #9
 8000f36:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CAN2_TX_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	480a      	ldr	r0, [pc, #40]	@ (8000f6c <MX_GPIO_Init+0x280>)
 8000f44:	f002 f82e 	bl	8002fa4 <HAL_GPIO_Init>


	HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2040      	movs	r0, #64	@ 0x40
 8000f4e:	f001 ff60 	bl	8002e12 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000f52:	2040      	movs	r0, #64	@ 0x40
 8000f54:	f001 ff79 	bl	8002e4a <HAL_NVIC_EnableIRQ>
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000f58:	bf00      	nop
 8000f5a:	3728      	adds	r7, #40	@ 0x28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020800 	.word	0x40020800
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	40020400 	.word	0x40020400
 8000f70:	40020c00 	.word	0x40020c00

08000f74 <ITM_Init>:
/* USER CODE BEGIN 4 */




void ITM_Init(void) {
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
	// Enable the ITM (Instrumentation Trace Macrocell)
	ITM->TCR = ITM_TCR_ITMENA_Msk;        // Enable ITM
 8000f78:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
	ITM->TPR = 0x0;                       // Set privilege level to 0 (default)
 8000f82:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f86:	2200      	movs	r2, #0
 8000f88:	f8c3 2e40 	str.w	r2, [r3, #3648]	@ 0xe40
	ITM->TER = 0x01;                      // Enable stimulus 0 (SWO)
 8000f8c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f90:	2201      	movs	r2, #1
 8000f92:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <Error_Handler+0x8>

08000fac <deactivate_main_contactor>:


}

void deactivate_main_contactor(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	//	Deactivate main contactor
	HAL_GPIO_WritePin(MAIN_CONTACTOR_GPIO_Port, MAIN_CONTACTOR_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	4806      	ldr	r0, [pc, #24]	@ (8000fd0 <deactivate_main_contactor+0x24>)
 8000fb6:	f002 f989 	bl	80032cc <HAL_GPIO_WritePin>

	//  Turn OFF HV light
	HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_PIN, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fc0:	4804      	ldr	r0, [pc, #16]	@ (8000fd4 <deactivate_main_contactor+0x28>)
 8000fc2:	f002 f983 	bl	80032cc <HAL_GPIO_WritePin>

	//	HAL_GPIO_WritePin(LIGHT_GPIO_Port, LIGHT_Pin, GPIO_PIN_RESET);
	blinking_HV_led = 0;
 8000fc6:	4b04      	ldr	r3, [pc, #16]	@ (8000fd8 <deactivate_main_contactor+0x2c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]

}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	20000355 	.word	0x20000355

08000fdc <deactivate_precharge_contactor>:
	blinking_HV_led = 1; // Set HV light to blinking mode (handled in timer interrupts)

}

void deactivate_precharge_contactor(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	//	Deactivate precharge contactor
	HAL_GPIO_WritePin(PRECHARGE_PIN_GROUP, PRECHARGE_PIN, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	480a      	ldr	r0, [pc, #40]	@ (8001010 <deactivate_precharge_contactor+0x34>)
 8000fe6:	f002 f971 	bl	80032cc <HAL_GPIO_WritePin>
	blinking_HV_led = 0;
 8000fea:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <deactivate_precharge_contactor+0x38>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]

	// If main contactor is ON, ensures that the HV light is ON
	if(HAL_GPIO_ReadPin(MAIN_CONTACTOR_GPIO_Port, MAIN_CONTACTOR_Pin) == GPIO_PIN_SET)
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	4807      	ldr	r0, [pc, #28]	@ (8001010 <deactivate_precharge_contactor+0x34>)
 8000ff4:	f002 f952 	bl	800329c <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d105      	bne.n	800100a <deactivate_precharge_contactor+0x2e>
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_PIN, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001004:	4804      	ldr	r0, [pc, #16]	@ (8001018 <deactivate_precharge_contactor+0x3c>)
 8001006:	f002 f961 	bl	80032cc <HAL_GPIO_WritePin>

	//		HAL_GPIO_WritePin(LIGHT_GPIO_Port, LIGHT_Pin, GPIO_PIN_SET);

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40020800 	.word	0x40020800
 8001014:	20000355 	.word	0x20000355
 8001018:	40020400 	.word	0x40020400

0800101c <__io_putchar>:

extern UART_HandleTypeDef huart1;


int __io_putchar(int ch)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
//	CDC_Transmit_FS(&temp_ch, 1);


	// Write character to ITM ch.0
	// ITM_SendChar(ch);
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10);
 8001024:	1d39      	adds	r1, r7, #4
 8001026:	230a      	movs	r3, #10
 8001028:	2201      	movs	r2, #1
 800102a:	4804      	ldr	r0, [pc, #16]	@ (800103c <__io_putchar+0x20>)
 800102c:	f003 ff10 	bl	8004e50 <HAL_UART_Transmit>
	return(ch);
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2000026c 	.word	0x2000026c

08001040 <init_slave_info_lists>:
extern return_mess_t temperature_info_list[];
extern return_mess_t balancing_info_list[];


void init_slave_info_lists()
{
 8001040:	b490      	push	{r4, r7}
 8001042:	b08e      	sub	sp, #56	@ 0x38
 8001044:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_OF_SLAVES; i++){
 8001046:	2300      	movs	r3, #0
 8001048:	637b      	str	r3, [r7, #52]	@ 0x34
 800104a:	e030      	b.n	80010ae <init_slave_info_lists+0x6e>
		return_mess_t last_voltage_info = {{0}, 0, 0};
 800104c:	4b1c      	ldr	r3, [pc, #112]	@ (80010c0 <init_slave_info_lists+0x80>)
 800104e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001052:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001054:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return_mess_t last_temp_info = {{0}, 0, 0};
 8001058:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <init_slave_info_lists+0x80>)
 800105a:	f107 0414 	add.w	r4, r7, #20
 800105e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001060:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return_mess_t last_balanc_info = {{0}, 0, 0};
 8001064:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <init_slave_info_lists+0x80>)
 8001066:	1d3c      	adds	r4, r7, #4
 8001068:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800106a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		voltage_info_list[i] = last_voltage_info;
 800106e:	4a15      	ldr	r2, [pc, #84]	@ (80010c4 <init_slave_info_lists+0x84>)
 8001070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	4413      	add	r3, r2
 8001076:	461c      	mov	r4, r3
 8001078:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800107e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		temperature_info_list[i] = last_temp_info;
 8001082:	4a11      	ldr	r2, [pc, #68]	@ (80010c8 <init_slave_info_lists+0x88>)
 8001084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	4413      	add	r3, r2
 800108a:	461c      	mov	r4, r3
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001092:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		balancing_info_list[i] = last_balanc_info;
 8001096:	4a0d      	ldr	r2, [pc, #52]	@ (80010cc <init_slave_info_lists+0x8c>)
 8001098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	4413      	add	r3, r2
 800109e:	461c      	mov	r4, r3
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(int i = 0; i < NUM_OF_SLAVES; i++){
 80010a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010aa:	3301      	adds	r3, #1
 80010ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80010ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	ddcb      	ble.n	800104c <init_slave_info_lists+0xc>
	}
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3738      	adds	r7, #56	@ 0x38
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc90      	pop	{r4, r7}
 80010be:	4770      	bx	lr
 80010c0:	0800674c 	.word	0x0800674c
 80010c4:	200002f0 	.word	0x200002f0
 80010c8:	20000310 	.word	0x20000310
 80010cc:	20000330 	.word	0x20000330

080010d0 <store_received_info>:


int store_received_info(CAN_RxHeaderTypeDef* RxHeader, uint8_t RxData[8]){
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]

	if((RxHeader->StdId & INFO_ID_MASK ) == RET_VOLTAGE_INFO_STDID){
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	f640 730f 	movw	r3, #3855	@ 0xf0f
 80010e2:	4013      	ands	r3, r2
 80010e4:	f240 220a 	movw	r2, #522	@ 0x20a
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d119      	bne.n	8001120 <store_received_info+0x50>


		for(int i = 0; i < 8; i++){
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	e011      	b.n	8001116 <store_received_info+0x46>

			voltage_info_list[RxHeader->StdId & SLAVE_ID_MASK].RxData[i] = RxData[i];
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	441a      	add	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001100:	7811      	ldrb	r1, [r2, #0]
 8001102:	4a2e      	ldr	r2, [pc, #184]	@ (80011bc <store_received_info+0xec>)
 8001104:	011b      	lsls	r3, r3, #4
 8001106:	441a      	add	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	4413      	add	r3, r2
 800110c:	460a      	mov	r2, r1
 800110e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3301      	adds	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	2b07      	cmp	r3, #7
 800111a:	ddea      	ble.n	80010f2 <store_received_info+0x22>

		}
		return 1;
 800111c:	2301      	movs	r3, #1
 800111e:	e046      	b.n	80011ae <store_received_info+0xde>
	}else if((RxHeader->StdId & INFO_ID_MASK ) == RET_TEMP_INFO_STDID){
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8001128:	4013      	ands	r3, r2
 800112a:	f240 2206 	movw	r2, #518	@ 0x206
 800112e:	4293      	cmp	r3, r2
 8001130:	d119      	bne.n	8001166 <store_received_info+0x96>

		for(int i = 0; i < 8; i++){
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	e011      	b.n	800115c <store_received_info+0x8c>

			temperature_info_list[RxHeader->StdId & SLAVE_ID_MASK].RxData[i] = RxData[i];
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	441a      	add	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001146:	7811      	ldrb	r1, [r2, #0]
 8001148:	4a1d      	ldr	r2, [pc, #116]	@ (80011c0 <store_received_info+0xf0>)
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	441a      	add	r2, r3
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4413      	add	r3, r2
 8001152:	460a      	mov	r2, r1
 8001154:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	3301      	adds	r3, #1
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	2b07      	cmp	r3, #7
 8001160:	ddea      	ble.n	8001138 <store_received_info+0x68>

		}
		return 2;
 8001162:	2302      	movs	r3, #2
 8001164:	e023      	b.n	80011ae <store_received_info+0xde>

	}else if((RxHeader->StdId & INFO_ID_MASK ) == RET_BALANC_INFO_STDID){
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	f640 730f 	movw	r3, #3855	@ 0xf0f
 800116e:	4013      	ands	r3, r2
 8001170:	f240 220b 	movw	r2, #523	@ 0x20b
 8001174:	4293      	cmp	r3, r2
 8001176:	d119      	bne.n	80011ac <store_received_info+0xdc>

		for(int i = 0; i < 8; i++){
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	e011      	b.n	80011a2 <store_received_info+0xd2>

			balancing_info_list[RxHeader->StdId & SLAVE_ID_MASK].RxData[i] = RxData[i];
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	441a      	add	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800118c:	7811      	ldrb	r1, [r2, #0]
 800118e:	4a0d      	ldr	r2, [pc, #52]	@ (80011c4 <store_received_info+0xf4>)
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	441a      	add	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	460a      	mov	r2, r1
 800119a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3301      	adds	r3, #1
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2b07      	cmp	r3, #7
 80011a6:	ddea      	ble.n	800117e <store_received_info+0xae>

		}
		return 3;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e000      	b.n	80011ae <store_received_info+0xde>
	}


	return 0;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	371c      	adds	r7, #28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	200002f0 	.word	0x200002f0
 80011c0:	20000310 	.word	0x20000310
 80011c4:	20000330 	.word	0x20000330

080011c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001214 <HAL_MspInit+0x4c>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011de:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <HAL_MspInit+0x4c>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	4a08      	ldr	r2, [pc, #32]	@ (8001214 <HAL_MspInit+0x4c>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_MspInit+0x4c>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800

08001218 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	@ 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a17      	ldr	r2, [pc, #92]	@ (8001294 <HAL_ADC_MspInit+0x7c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d127      	bne.n	800128a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <HAL_ADC_MspInit+0x80>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	4a15      	ldr	r2, [pc, #84]	@ (8001298 <HAL_ADC_MspInit+0x80>)
 8001244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001248:	6453      	str	r3, [r2, #68]	@ 0x44
 800124a:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <HAL_ADC_MspInit+0x80>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <HAL_ADC_MspInit+0x80>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a0e      	ldr	r2, [pc, #56]	@ (8001298 <HAL_ADC_MspInit+0x80>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <HAL_ADC_MspInit+0x80>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LV_BATTERY_VOLTAGE_Pin;
 8001272:	2302      	movs	r3, #2
 8001274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001276:	2303      	movs	r3, #3
 8001278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LV_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	@ (800129c <HAL_ADC_MspInit+0x84>)
 8001286:	f001 fe8d 	bl	8002fa4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800128a:	bf00      	nop
 800128c:	3728      	adds	r7, #40	@ 0x28
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40012000 	.word	0x40012000
 8001298:	40023800 	.word	0x40023800
 800129c:	40020400 	.word	0x40020400

080012a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	@ 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a28      	ldr	r2, [pc, #160]	@ (8001360 <HAL_CAN_MspInit+0xc0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d14a      	bne.n	8001358 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b27      	ldr	r3, [pc, #156]	@ (8001364 <HAL_CAN_MspInit+0xc4>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	4a26      	ldr	r2, [pc, #152]	@ (8001364 <HAL_CAN_MspInit+0xc4>)
 80012cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d2:	4b24      	ldr	r3, [pc, #144]	@ (8001364 <HAL_CAN_MspInit+0xc4>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN2_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b20      	ldr	r3, [pc, #128]	@ (8001364 <HAL_CAN_MspInit+0xc4>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001364 <HAL_CAN_MspInit+0xc4>)
 80012e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80012ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001364 <HAL_CAN_MspInit+0xc4>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <HAL_CAN_MspInit+0xc4>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a18      	ldr	r2, [pc, #96]	@ (8001364 <HAL_CAN_MspInit+0xc4>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <HAL_CAN_MspInit+0xc4>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 8001316:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001320:	2301      	movs	r3, #1
 8001322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001328:	2309      	movs	r3, #9
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	480d      	ldr	r0, [pc, #52]	@ (8001368 <HAL_CAN_MspInit+0xc8>)
 8001334:	f001 fe36 	bl	8002fa4 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	203f      	movs	r0, #63	@ 0x3f
 800133e:	f001 fd68 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8001342:	203f      	movs	r0, #63	@ 0x3f
 8001344:	f001 fd81 	bl	8002e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001348:	2200      	movs	r2, #0
 800134a:	2100      	movs	r1, #0
 800134c:	2040      	movs	r0, #64	@ 0x40
 800134e:	f001 fd60 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001352:	2040      	movs	r0, #64	@ 0x40
 8001354:	f001 fd79 	bl	8002e4a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN2_MspInit 1 */

  }

}
 8001358:	bf00      	nop
 800135a:	3728      	adds	r7, #40	@ 0x28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40006800 	.word	0x40006800
 8001364:	40023800 	.word	0x40023800
 8001368:	40020400 	.word	0x40020400

0800136c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08c      	sub	sp, #48	@ 0x30
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a42      	ldr	r2, [pc, #264]	@ (8001494 <HAL_I2C_MspInit+0x128>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d12c      	bne.n	80013e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
 8001392:	4b41      	ldr	r3, [pc, #260]	@ (8001498 <HAL_I2C_MspInit+0x12c>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a40      	ldr	r2, [pc, #256]	@ (8001498 <HAL_I2C_MspInit+0x12c>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b3e      	ldr	r3, [pc, #248]	@ (8001498 <HAL_I2C_MspInit+0x12c>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_I2C_SCL_Pin|EEPROM_I2C_SDA_Pin;
 80013aa:	23c0      	movs	r3, #192	@ 0xc0
 80013ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ae:	2312      	movs	r3, #18
 80013b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ba:	2304      	movs	r3, #4
 80013bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	4835      	ldr	r0, [pc, #212]	@ (800149c <HAL_I2C_MspInit+0x130>)
 80013c6:	f001 fded 	bl	8002fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	4b32      	ldr	r3, [pc, #200]	@ (8001498 <HAL_I2C_MspInit+0x12c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	4a31      	ldr	r2, [pc, #196]	@ (8001498 <HAL_I2C_MspInit+0x12c>)
 80013d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013da:	4b2f      	ldr	r3, [pc, #188]	@ (8001498 <HAL_I2C_MspInit+0x12c>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80013e6:	e050      	b.n	800148a <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a2c      	ldr	r2, [pc, #176]	@ (80014a0 <HAL_I2C_MspInit+0x134>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d14b      	bne.n	800148a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b28      	ldr	r3, [pc, #160]	@ (8001498 <HAL_I2C_MspInit+0x12c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a27      	ldr	r2, [pc, #156]	@ (8001498 <HAL_I2C_MspInit+0x12c>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b25      	ldr	r3, [pc, #148]	@ (8001498 <HAL_I2C_MspInit+0x12c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b21      	ldr	r3, [pc, #132]	@ (8001498 <HAL_I2C_MspInit+0x12c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a20      	ldr	r2, [pc, #128]	@ (8001498 <HAL_I2C_MspInit+0x12c>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <HAL_I2C_MspInit+0x12c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800142a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001430:	2312      	movs	r3, #18
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800143c:	2304      	movs	r3, #4
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	4817      	ldr	r0, [pc, #92]	@ (80014a4 <HAL_I2C_MspInit+0x138>)
 8001448:	f001 fdac 	bl	8002fa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800144c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001452:	2312      	movs	r3, #18
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 800145e:	2309      	movs	r3, #9
 8001460:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	480c      	ldr	r0, [pc, #48]	@ (800149c <HAL_I2C_MspInit+0x130>)
 800146a:	f001 fd9b 	bl	8002fa4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <HAL_I2C_MspInit+0x12c>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	4a08      	ldr	r2, [pc, #32]	@ (8001498 <HAL_I2C_MspInit+0x12c>)
 8001478:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800147c:	6413      	str	r3, [r2, #64]	@ 0x40
 800147e:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <HAL_I2C_MspInit+0x12c>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
}
 800148a:	bf00      	nop
 800148c:	3730      	adds	r7, #48	@ 0x30
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40005400 	.word	0x40005400
 8001498:	40023800 	.word	0x40023800
 800149c:	40020400 	.word	0x40020400
 80014a0:	40005c00 	.word	0x40005c00
 80014a4:	40020000 	.word	0x40020000

080014a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014b8:	d116      	bne.n	80014e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b1a      	ldr	r3, [pc, #104]	@ (8001528 <HAL_TIM_Base_MspInit+0x80>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	4a19      	ldr	r2, [pc, #100]	@ (8001528 <HAL_TIM_Base_MspInit+0x80>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ca:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <HAL_TIM_Base_MspInit+0x80>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	201c      	movs	r0, #28
 80014dc:	f001 fc99 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014e0:	201c      	movs	r0, #28
 80014e2:	f001 fcb2 	bl	8002e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014e6:	e01a      	b.n	800151e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0f      	ldr	r2, [pc, #60]	@ (800152c <HAL_TIM_Base_MspInit+0x84>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d115      	bne.n	800151e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <HAL_TIM_Base_MspInit+0x80>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001528 <HAL_TIM_Base_MspInit+0x80>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6413      	str	r3, [r2, #64]	@ 0x40
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_TIM_Base_MspInit+0x80>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	201d      	movs	r0, #29
 8001514:	f001 fc7d 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001518:	201d      	movs	r0, #29
 800151a:	f001 fc96 	bl	8002e4a <HAL_NVIC_EnableIRQ>
}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40000400 	.word	0x40000400

08001530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	@ 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a1d      	ldr	r2, [pc, #116]	@ (80015c4 <HAL_UART_MspInit+0x94>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d134      	bne.n	80015bc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b1c      	ldr	r3, [pc, #112]	@ (80015c8 <HAL_UART_MspInit+0x98>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155a:	4a1b      	ldr	r2, [pc, #108]	@ (80015c8 <HAL_UART_MspInit+0x98>)
 800155c:	f043 0310 	orr.w	r3, r3, #16
 8001560:	6453      	str	r3, [r2, #68]	@ 0x44
 8001562:	4b19      	ldr	r3, [pc, #100]	@ (80015c8 <HAL_UART_MspInit+0x98>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <HAL_UART_MspInit+0x98>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a14      	ldr	r2, [pc, #80]	@ (80015c8 <HAL_UART_MspInit+0x98>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <HAL_UART_MspInit+0x98>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = UART_MCU_TO_DEBUG_RX_Pin|UART_MCU_TO_DEBUG_TX_Pin;
 800158a:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800159c:	2307      	movs	r3, #7
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4809      	ldr	r0, [pc, #36]	@ (80015cc <HAL_UART_MspInit+0x9c>)
 80015a8:	f001 fcfc 	bl	8002fa4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	2025      	movs	r0, #37	@ 0x25
 80015b2:	f001 fc2e 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015b6:	2025      	movs	r0, #37	@ 0x25
 80015b8:	f001 fc47 	bl	8002e4a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80015bc:	bf00      	nop
 80015be:	3728      	adds	r7, #40	@ 0x28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40011000 	.word	0x40011000
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020000 	.word	0x40020000

080015d0 <HAL_IRDA_MspInit>:
* This function configures the hardware resources used in this example
* @param hirda: IRDA handle pointer
* @retval None
*/
void HAL_IRDA_MspInit(IRDA_HandleTypeDef* hirda)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	@ 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(hirda->Instance==USART6)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a19      	ldr	r2, [pc, #100]	@ (8001654 <HAL_IRDA_MspInit+0x84>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d12b      	bne.n	800164a <HAL_IRDA_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <HAL_IRDA_MspInit+0x88>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fa:	4a17      	ldr	r2, [pc, #92]	@ (8001658 <HAL_IRDA_MspInit+0x88>)
 80015fc:	f043 0320 	orr.w	r3, r3, #32
 8001600:	6453      	str	r3, [r2, #68]	@ 0x44
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <HAL_IRDA_MspInit+0x88>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <HAL_IRDA_MspInit+0x88>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a10      	ldr	r2, [pc, #64]	@ (8001658 <HAL_IRDA_MspInit+0x88>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <HAL_IRDA_MspInit+0x88>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800162a:	23c0      	movs	r3, #192	@ 0xc0
 800162c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800163a:	2308      	movs	r3, #8
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	@ (800165c <HAL_IRDA_MspInit+0x8c>)
 8001646:	f001 fcad 	bl	8002fa4 <HAL_GPIO_Init>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 800164a:	bf00      	nop
 800164c:	3728      	adds	r7, #40	@ 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40011400 	.word	0x40011400
 8001658:	40023800 	.word	0x40023800
 800165c:	40020800 	.word	0x40020800

08001660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <NMI_Handler+0x4>

08001668 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <HardFault_Handler+0x4>

08001670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <MemManage_Handler+0x4>

08001678 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <BusFault_Handler+0x4>

08001680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <UsageFault_Handler+0x4>

08001688 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b6:	f000 f97b 	bl	80019b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}

080016be <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CHARGER_DETECT_Pin);
 80016c2:	2008      	movs	r0, #8
 80016c4:	f001 fe36 	bl	8003334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}

080016cc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMERGENCY_STOP_Pin);
 80016d0:	2010      	movs	r0, #16
 80016d2:	f001 fe2f 	bl	8003334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}

080016da <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IGNITION_Pin);
 80016de:	2020      	movs	r0, #32
 80016e0:	f001 fe28 	bl	8003334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <TIM2_IRQHandler+0x10>)
 80016ee:	f002 ffaa 	bl	8004646 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200001dc 	.word	0x200001dc

080016fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001700:	4802      	ldr	r0, [pc, #8]	@ (800170c <TIM3_IRQHandler+0x10>)
 8001702:	f002 ffa0 	bl	8004646 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000224 	.word	0x20000224

08001710 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <USART1_IRQHandler+0x10>)
 8001716:	f003 fc27 	bl	8004f68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000026c 	.word	0x2000026c

08001724 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <CAN2_TX_IRQHandler+0x10>)
 800172a:	f001 f868 	bl	80027fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000010c 	.word	0x2000010c

08001738 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <CAN2_RX0_IRQHandler+0x10>)
 800173e:	f001 f85e 	bl	80027fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	2000010c 	.word	0x2000010c

0800174c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	e00a      	b.n	8001774 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800175e:	f3af 8000 	nop.w
 8001762:	4601      	mov	r1, r0
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	60ba      	str	r2, [r7, #8]
 800176a:	b2ca      	uxtb	r2, r1
 800176c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	3301      	adds	r3, #1
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	429a      	cmp	r2, r3
 800177a:	dbf0      	blt.n	800175e <_read+0x12>
  }

  return len;
 800177c:	687b      	ldr	r3, [r7, #4]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	e009      	b.n	80017ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	60ba      	str	r2, [r7, #8]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fc3b 	bl	800101c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbf1      	blt.n	8001798 <_write+0x12>
  }
  return len;
 80017b4:	687b      	ldr	r3, [r7, #4]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_close>:

int _close(int file)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017e6:	605a      	str	r2, [r3, #4]
  return 0;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <_isatty>:

int _isatty(int file)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001830:	4a14      	ldr	r2, [pc, #80]	@ (8001884 <_sbrk+0x5c>)
 8001832:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <_sbrk+0x60>)
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800183c:	4b13      	ldr	r3, [pc, #76]	@ (800188c <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d102      	bne.n	800184a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001844:	4b11      	ldr	r3, [pc, #68]	@ (800188c <_sbrk+0x64>)
 8001846:	4a12      	ldr	r2, [pc, #72]	@ (8001890 <_sbrk+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184a:	4b10      	ldr	r3, [pc, #64]	@ (800188c <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	429a      	cmp	r2, r3
 8001856:	d207      	bcs.n	8001868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001858:	f004 fcf2 	bl	8006240 <__errno>
 800185c:	4603      	mov	r3, r0
 800185e:	220c      	movs	r2, #12
 8001860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	e009      	b.n	800187c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186e:	4b07      	ldr	r3, [pc, #28]	@ (800188c <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	4a05      	ldr	r2, [pc, #20]	@ (800188c <_sbrk+0x64>)
 8001878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20040000 	.word	0x20040000
 8001888:	00000400 	.word	0x00000400
 800188c:	20000358 	.word	0x20000358
 8001890:	200004b0 	.word	0x200004b0

08001894 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001898:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <SystemInit+0x20>)
 800189a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800189e:	4a05      	ldr	r2, [pc, #20]	@ (80018b4 <SystemInit+0x20>)
 80018a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80018b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018bc:	f7ff ffea 	bl	8001894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c0:	480c      	ldr	r0, [pc, #48]	@ (80018f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018c2:	490d      	ldr	r1, [pc, #52]	@ (80018f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018c4:	4a0d      	ldr	r2, [pc, #52]	@ (80018fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c8:	e002      	b.n	80018d0 <LoopCopyDataInit>

080018ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ce:	3304      	adds	r3, #4

080018d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d4:	d3f9      	bcc.n	80018ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001900 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001904 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018dc:	e001      	b.n	80018e2 <LoopFillZerobss>

080018de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e0:	3204      	adds	r2, #4

080018e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e4:	d3fb      	bcc.n	80018de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018e6:	f004 fcb1 	bl	800624c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ea:	f7fe ff83 	bl	80007f4 <main>
  bx  lr    
 80018ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018f0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80018f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80018fc:	08006784 	.word	0x08006784
  ldr r2, =_sbss
 8001900:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001904:	200004ac 	.word	0x200004ac

08001908 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001908:	e7fe      	b.n	8001908 <ADC_IRQHandler>
	...

0800190c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001910:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0d      	ldr	r2, [pc, #52]	@ (800194c <HAL_Init+0x40>)
 8001916:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800191a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800191c:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <HAL_Init+0x40>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <HAL_Init+0x40>)
 8001922:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001926:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001928:	4b08      	ldr	r3, [pc, #32]	@ (800194c <HAL_Init+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a07      	ldr	r2, [pc, #28]	@ (800194c <HAL_Init+0x40>)
 800192e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001932:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001934:	2003      	movs	r0, #3
 8001936:	f001 fa61 	bl	8002dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800193a:	200f      	movs	r0, #15
 800193c:	f000 f808 	bl	8001950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001940:	f7ff fc42 	bl	80011c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023c00 	.word	0x40023c00

08001950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001958:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <HAL_InitTick+0x54>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <HAL_InitTick+0x58>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4619      	mov	r1, r3
 8001962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001966:	fbb3 f3f1 	udiv	r3, r3, r1
 800196a:	fbb2 f3f3 	udiv	r3, r2, r3
 800196e:	4618      	mov	r0, r3
 8001970:	f001 fa79 	bl	8002e66 <HAL_SYSTICK_Config>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e00e      	b.n	800199c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b0f      	cmp	r3, #15
 8001982:	d80a      	bhi.n	800199a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001984:	2200      	movs	r2, #0
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	f04f 30ff 	mov.w	r0, #4294967295
 800198c:	f001 fa41 	bl	8002e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001990:	4a06      	ldr	r2, [pc, #24]	@ (80019ac <HAL_InitTick+0x5c>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	e000      	b.n	800199c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000000 	.word	0x20000000
 80019a8:	20000008 	.word	0x20000008
 80019ac:	20000004 	.word	0x20000004

080019b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <HAL_IncTick+0x20>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <HAL_IncTick+0x24>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4413      	add	r3, r2
 80019c0:	4a04      	ldr	r2, [pc, #16]	@ (80019d4 <HAL_IncTick+0x24>)
 80019c2:	6013      	str	r3, [r2, #0]
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000008 	.word	0x20000008
 80019d4:	2000035c 	.word	0x2000035c

080019d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return uwTick;
 80019dc:	4b03      	ldr	r3, [pc, #12]	@ (80019ec <HAL_GetTick+0x14>)
 80019de:	681b      	ldr	r3, [r3, #0]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	2000035c 	.word	0x2000035c

080019f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f8:	f7ff ffee 	bl	80019d8 <HAL_GetTick>
 80019fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a08:	d005      	beq.n	8001a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a34 <HAL_Delay+0x44>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a16:	bf00      	nop
 8001a18:	f7ff ffde 	bl	80019d8 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d8f7      	bhi.n	8001a18 <HAL_Delay+0x28>
  {
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000008 	.word	0x20000008

08001a38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e033      	b.n	8001ab6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d109      	bne.n	8001a6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff fbde 	bl	8001218 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d118      	bne.n	8001aa8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a7e:	f023 0302 	bic.w	r3, r3, #2
 8001a82:	f043 0202 	orr.w	r2, r3, #2
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f93a 	bl	8001d04 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	f023 0303 	bic.w	r3, r3, #3
 8001a9e:	f043 0201 	orr.w	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001aa6:	e001      	b.n	8001aac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x1c>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e105      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x228>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b09      	cmp	r3, #9
 8001aea:	d925      	bls.n	8001b38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68d9      	ldr	r1, [r3, #12]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	3b1e      	subs	r3, #30
 8001b02:	2207      	movs	r2, #7
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43da      	mvns	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	400a      	ands	r2, r1
 8001b10:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68d9      	ldr	r1, [r3, #12]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	4603      	mov	r3, r0
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4403      	add	r3, r0
 8001b2a:	3b1e      	subs	r3, #30
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	e022      	b.n	8001b7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6919      	ldr	r1, [r3, #16]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	461a      	mov	r2, r3
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	400a      	ands	r2, r1
 8001b5a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6919      	ldr	r1, [r3, #16]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	4603      	mov	r3, r0
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4403      	add	r3, r0
 8001b74:	409a      	lsls	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d824      	bhi.n	8001bd0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	3b05      	subs	r3, #5
 8001b98:	221f      	movs	r2, #31
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3b05      	subs	r3, #5
 8001bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bce:	e04c      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b0c      	cmp	r3, #12
 8001bd6:	d824      	bhi.n	8001c22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	3b23      	subs	r3, #35	@ 0x23
 8001bea:	221f      	movs	r2, #31
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	3b23      	subs	r3, #35	@ 0x23
 8001c14:	fa00 f203 	lsl.w	r2, r0, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c20:	e023      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	3b41      	subs	r3, #65	@ 0x41
 8001c34:	221f      	movs	r2, #31
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	400a      	ands	r2, r1
 8001c42:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	4618      	mov	r0, r3
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3b41      	subs	r3, #65	@ 0x41
 8001c5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c6a:	4b22      	ldr	r3, [pc, #136]	@ (8001cf4 <HAL_ADC_ConfigChannel+0x234>)
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a21      	ldr	r2, [pc, #132]	@ (8001cf8 <HAL_ADC_ConfigChannel+0x238>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d109      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1cc>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b12      	cmp	r3, #18
 8001c7e:	d105      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a19      	ldr	r2, [pc, #100]	@ (8001cf8 <HAL_ADC_ConfigChannel+0x238>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d123      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x21e>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b10      	cmp	r3, #16
 8001c9c:	d003      	beq.n	8001ca6 <HAL_ADC_ConfigChannel+0x1e6>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b11      	cmp	r3, #17
 8001ca4:	d11b      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d111      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <HAL_ADC_ConfigChannel+0x23c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a10      	ldr	r2, [pc, #64]	@ (8001d00 <HAL_ADC_ConfigChannel+0x240>)
 8001cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc4:	0c9a      	lsrs	r2, r3, #18
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001cd0:	e002      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f9      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	40012300 	.word	0x40012300
 8001cf8:	40012000 	.word	0x40012000
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	431bde83 	.word	0x431bde83

08001d04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d0c:	4b79      	ldr	r3, [pc, #484]	@ (8001ef4 <ADC_Init+0x1f0>)
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	021a      	lsls	r2, r3, #8
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6899      	ldr	r1, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d96:	4a58      	ldr	r2, [pc, #352]	@ (8001ef8 <ADC_Init+0x1f4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d022      	beq.n	8001de2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001daa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6899      	ldr	r1, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001dcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6899      	ldr	r1, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	e00f      	b.n	8001e02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001df0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e00:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0202 	bic.w	r2, r2, #2
 8001e10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6899      	ldr	r1, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7e1b      	ldrb	r3, [r3, #24]
 8001e1c:	005a      	lsls	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d01b      	beq.n	8001e68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e3e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6859      	ldr	r1, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	035a      	lsls	r2, r3, #13
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	e007      	b.n	8001e78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e76:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	051a      	lsls	r2, r3, #20
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001eac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6899      	ldr	r1, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001eba:	025a      	lsls	r2, r3, #9
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ed2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6899      	ldr	r1, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	029a      	lsls	r2, r3, #10
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	609a      	str	r2, [r3, #8]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	40012300 	.word	0x40012300
 8001ef8:	0f000001 	.word	0x0f000001

08001efc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e0ed      	b.n	80020ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d102      	bne.n	8001f20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff f9c0 	bl	80012a0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f30:	f7ff fd52 	bl	80019d8 <HAL_GetTick>
 8001f34:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f36:	e012      	b.n	8001f5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f38:	f7ff fd4e 	bl	80019d8 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b0a      	cmp	r3, #10
 8001f44:	d90b      	bls.n	8001f5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2205      	movs	r2, #5
 8001f56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e0c5      	b.n	80020ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0e5      	beq.n	8001f38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0202 	bic.w	r2, r2, #2
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f7c:	f7ff fd2c 	bl	80019d8 <HAL_GetTick>
 8001f80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f82:	e012      	b.n	8001faa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f84:	f7ff fd28 	bl	80019d8 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b0a      	cmp	r3, #10
 8001f90:	d90b      	bls.n	8001faa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f96:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2205      	movs	r2, #5
 8001fa2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e09f      	b.n	80020ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1e5      	bne.n	8001f84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7e1b      	ldrb	r3, [r3, #24]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d108      	bne.n	8001fd2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	e007      	b.n	8001fe2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fe0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	7e5b      	ldrb	r3, [r3, #25]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d108      	bne.n	8001ffc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	e007      	b.n	800200c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800200a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	7e9b      	ldrb	r3, [r3, #26]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d108      	bne.n	8002026 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0220 	orr.w	r2, r2, #32
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	e007      	b.n	8002036 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0220 	bic.w	r2, r2, #32
 8002034:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	7edb      	ldrb	r3, [r3, #27]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d108      	bne.n	8002050 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0210 	bic.w	r2, r2, #16
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	e007      	b.n	8002060 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0210 	orr.w	r2, r2, #16
 800205e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	7f1b      	ldrb	r3, [r3, #28]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d108      	bne.n	800207a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0208 	orr.w	r2, r2, #8
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	e007      	b.n	800208a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0208 	bic.w	r2, r2, #8
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7f5b      	ldrb	r3, [r3, #29]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d108      	bne.n	80020a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0204 	orr.w	r2, r2, #4
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	e007      	b.n	80020b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0204 	bic.w	r2, r2, #4
 80020b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	ea42 0103 	orr.w	r1, r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	1e5a      	subs	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3020 	ldrb.w	r3, [r3, #32]
 800210a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800210c:	7cfb      	ldrb	r3, [r7, #19]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d003      	beq.n	800211a <HAL_CAN_ConfigFilter+0x26>
 8002112:	7cfb      	ldrb	r3, [r7, #19]
 8002114:	2b02      	cmp	r3, #2
 8002116:	f040 80be 	bne.w	8002296 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800211a:	4b65      	ldr	r3, [pc, #404]	@ (80022b0 <HAL_CAN_ConfigFilter+0x1bc>)
 800211c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002124:	f043 0201 	orr.w	r2, r3, #1
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002134:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	431a      	orrs	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	2201      	movs	r2, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	43db      	mvns	r3, r3
 800216c:	401a      	ands	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d123      	bne.n	80021c4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	43db      	mvns	r3, r3
 8002186:	401a      	ands	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800219e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	3248      	adds	r2, #72	@ 0x48
 80021a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021ba:	6979      	ldr	r1, [r7, #20]
 80021bc:	3348      	adds	r3, #72	@ 0x48
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	440b      	add	r3, r1
 80021c2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d122      	bne.n	8002212 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80021ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	3248      	adds	r2, #72	@ 0x48
 80021f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002206:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002208:	6979      	ldr	r1, [r7, #20]
 800220a:	3348      	adds	r3, #72	@ 0x48
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	440b      	add	r3, r1
 8002210:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d109      	bne.n	800222e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	43db      	mvns	r3, r3
 8002224:	401a      	ands	r2, r3
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800222c:	e007      	b.n	800223e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	431a      	orrs	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	43db      	mvns	r3, r3
 8002250:	401a      	ands	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002258:	e007      	b.n	800226a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	431a      	orrs	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d107      	bne.n	8002282 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	431a      	orrs	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002288:	f023 0201 	bic.w	r2, r3, #1
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	e006      	b.n	80022a4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
  }
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	371c      	adds	r7, #28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	40006400 	.word	0x40006400

080022b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d12e      	bne.n	8002326 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80022e0:	f7ff fb7a 	bl	80019d8 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80022e6:	e012      	b.n	800230e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022e8:	f7ff fb76 	bl	80019d8 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b0a      	cmp	r3, #10
 80022f4:	d90b      	bls.n	800230e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2205      	movs	r2, #5
 8002306:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e012      	b.n	8002334 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1e5      	bne.n	80022e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	e006      	b.n	8002334 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
  }
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d133      	bne.n	80023b8 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002360:	f7ff fb3a 	bl	80019d8 <HAL_GetTick>
 8002364:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002366:	e012      	b.n	800238e <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002368:	f7ff fb36 	bl	80019d8 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b0a      	cmp	r3, #10
 8002374:	d90b      	bls.n	800238e <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2205      	movs	r2, #5
 8002386:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e01b      	b.n	80023c6 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0e5      	beq.n	8002368 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0202 	bic.w	r2, r2, #2
 80023aa:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e006      	b.n	80023c6 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
  }
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b089      	sub	sp, #36	@ 0x24
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80023ec:	7ffb      	ldrb	r3, [r7, #31]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d003      	beq.n	80023fa <HAL_CAN_AddTxMessage+0x2c>
 80023f2:	7ffb      	ldrb	r3, [r7, #31]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	f040 80ad 	bne.w	8002554 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10a      	bne.n	800241a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 8095 	beq.w	8002544 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	0e1b      	lsrs	r3, r3, #24
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002424:	2201      	movs	r2, #1
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	409a      	lsls	r2, r3
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10d      	bne.n	8002452 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002440:	68f9      	ldr	r1, [r7, #12]
 8002442:	6809      	ldr	r1, [r1, #0]
 8002444:	431a      	orrs	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	3318      	adds	r3, #24
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	440b      	add	r3, r1
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	e00f      	b.n	8002472 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800245c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002462:	68f9      	ldr	r1, [r7, #12]
 8002464:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002466:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3318      	adds	r3, #24
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	440b      	add	r3, r1
 8002470:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6819      	ldr	r1, [r3, #0]
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	3318      	adds	r3, #24
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	440b      	add	r3, r1
 8002482:	3304      	adds	r3, #4
 8002484:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	7d1b      	ldrb	r3, [r3, #20]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d111      	bne.n	80024b2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	3318      	adds	r3, #24
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	4413      	add	r3, r2
 800249a:	3304      	adds	r3, #4
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	6811      	ldr	r1, [r2, #0]
 80024a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	3318      	adds	r3, #24
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	440b      	add	r3, r1
 80024ae:	3304      	adds	r3, #4
 80024b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3307      	adds	r3, #7
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	061a      	lsls	r2, r3, #24
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3306      	adds	r3, #6
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3305      	adds	r3, #5
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	4313      	orrs	r3, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	3204      	adds	r2, #4
 80024d2:	7812      	ldrb	r2, [r2, #0]
 80024d4:	4610      	mov	r0, r2
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	6811      	ldr	r1, [r2, #0]
 80024da:	ea43 0200 	orr.w	r2, r3, r0
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	440b      	add	r3, r1
 80024e4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80024e8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3303      	adds	r3, #3
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	061a      	lsls	r2, r3, #24
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3302      	adds	r3, #2
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	041b      	lsls	r3, r3, #16
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3301      	adds	r3, #1
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	021b      	lsls	r3, r3, #8
 8002504:	4313      	orrs	r3, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	7812      	ldrb	r2, [r2, #0]
 800250a:	4610      	mov	r0, r2
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	6811      	ldr	r1, [r2, #0]
 8002510:	ea43 0200 	orr.w	r2, r3, r0
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	440b      	add	r3, r1
 800251a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800251e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	3318      	adds	r3, #24
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	4413      	add	r3, r2
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	6811      	ldr	r1, [r2, #0]
 8002532:	f043 0201 	orr.w	r2, r3, #1
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	3318      	adds	r3, #24
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	440b      	add	r3, r1
 800253e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	e00e      	b.n	8002562 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002548:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e006      	b.n	8002562 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002558:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
  }
}
 8002562:	4618      	mov	r0, r3
 8002564:	3724      	adds	r7, #36	@ 0x24
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800256e:	b480      	push	{r7}
 8002570:	b087      	sub	sp, #28
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002582:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d003      	beq.n	8002592 <HAL_CAN_GetRxMessage+0x24>
 800258a:	7dfb      	ldrb	r3, [r7, #23]
 800258c:	2b02      	cmp	r3, #2
 800258e:	f040 8103 	bne.w	8002798 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10e      	bne.n	80025b6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d116      	bne.n	80025d4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025aa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e0f7      	b.n	80027a6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d107      	bne.n	80025d4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0e8      	b.n	80027a6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	331b      	adds	r3, #27
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	4413      	add	r3, r2
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0204 	and.w	r2, r3, #4
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10c      	bne.n	800260c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	331b      	adds	r3, #27
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	4413      	add	r3, r2
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0d5b      	lsrs	r3, r3, #21
 8002602:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e00b      	b.n	8002624 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	331b      	adds	r3, #27
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	4413      	add	r3, r2
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	08db      	lsrs	r3, r3, #3
 800261c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	331b      	adds	r3, #27
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	4413      	add	r3, r2
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0202 	and.w	r2, r3, #2
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	331b      	adds	r3, #27
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	4413      	add	r3, r2
 8002646:	3304      	adds	r3, #4
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2208      	movs	r2, #8
 8002656:	611a      	str	r2, [r3, #16]
 8002658:	e00b      	b.n	8002672 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	331b      	adds	r3, #27
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	4413      	add	r3, r2
 8002666:	3304      	adds	r3, #4
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 020f 	and.w	r2, r3, #15
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	331b      	adds	r3, #27
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	4413      	add	r3, r2
 800267e:	3304      	adds	r3, #4
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	0a1b      	lsrs	r3, r3, #8
 8002684:	b2da      	uxtb	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	331b      	adds	r3, #27
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	4413      	add	r3, r2
 8002696:	3304      	adds	r3, #4
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	0c1b      	lsrs	r3, r3, #16
 800269c:	b29a      	uxth	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0a1a      	lsrs	r2, r3, #8
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	3301      	adds	r3, #1
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	4413      	add	r3, r2
 80026dc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	0c1a      	lsrs	r2, r3, #16
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	3302      	adds	r3, #2
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	0e1a      	lsrs	r2, r3, #24
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	3303      	adds	r3, #3
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	4413      	add	r3, r2
 8002710:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	3304      	adds	r3, #4
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	4413      	add	r3, r2
 8002728:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0a1a      	lsrs	r2, r3, #8
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	3305      	adds	r3, #5
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	4413      	add	r3, r2
 8002742:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	0c1a      	lsrs	r2, r3, #16
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	3306      	adds	r3, #6
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	4413      	add	r3, r2
 800275c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	0e1a      	lsrs	r2, r3, #24
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	3307      	adds	r3, #7
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d108      	bne.n	8002784 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0220 	orr.w	r2, r2, #32
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	e007      	b.n	8002794 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0220 	orr.w	r2, r2, #32
 8002792:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	e006      	b.n	80027a6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
  }
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b085      	sub	sp, #20
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d002      	beq.n	80027d0 <HAL_CAN_ActivateNotification+0x1e>
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d109      	bne.n	80027e4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6959      	ldr	r1, [r3, #20]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	e006      	b.n	80027f2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
  }
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b08a      	sub	sp, #40	@ 0x28
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002806:	2300      	movs	r3, #0
 8002808:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d07c      	beq.n	800293e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d023      	beq.n	8002896 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2201      	movs	r2, #1
 8002854:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f983 	bl	8002b6c <HAL_CAN_TxMailbox0CompleteCallback>
 8002866:	e016      	b.n	8002896 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	d004      	beq.n	800287c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
 800287a:	e00c      	b.n	8002896 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d004      	beq.n	8002890 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
 800288e:	e002      	b.n	8002896 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f989 	bl	8002ba8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d024      	beq.n	80028ea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f963 	bl	8002b80 <HAL_CAN_TxMailbox1CompleteCallback>
 80028ba:	e016      	b.n	80028ea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d004      	beq.n	80028d0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ce:	e00c      	b.n	80028ea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d004      	beq.n	80028e4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028e2:	e002      	b.n	80028ea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f969 	bl	8002bbc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d024      	beq.n	800293e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80028fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f943 	bl	8002b94 <HAL_CAN_TxMailbox2CompleteCallback>
 800290e:	e016      	b.n	800293e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d004      	beq.n	8002924 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
 8002922:	e00c      	b.n	800293e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d004      	beq.n	8002938 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
 8002936:	e002      	b.n	800293e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f949 	bl	8002bd0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00c      	beq.n	8002962 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	2b00      	cmp	r3, #0
 8002950:	d007      	beq.n	8002962 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002958:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2210      	movs	r2, #16
 8002960:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00b      	beq.n	8002984 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d006      	beq.n	8002984 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2208      	movs	r2, #8
 800297c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f930 	bl	8002be4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7fd fe3b 	bl	8000618 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00c      	beq.n	80029c6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d007      	beq.n	80029c6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2210      	movs	r2, #16
 80029c4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00b      	beq.n	80029e8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d006      	beq.n	80029e8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2208      	movs	r2, #8
 80029e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f912 	bl	8002c0c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d009      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f8f9 	bl	8002bf8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00b      	beq.n	8002a28 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d006      	beq.n	8002a28 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2210      	movs	r2, #16
 8002a20:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f8fc 	bl	8002c20 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00b      	beq.n	8002a4a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d006      	beq.n	8002a4a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2208      	movs	r2, #8
 8002a42:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f8f5 	bl	8002c34 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d07b      	beq.n	8002b4c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d072      	beq.n	8002b44 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	f043 0302 	orr.w	r3, r3, #2
 8002a94:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d043      	beq.n	8002b44 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d03e      	beq.n	8002b44 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002acc:	2b60      	cmp	r3, #96	@ 0x60
 8002ace:	d02b      	beq.n	8002b28 <HAL_CAN_IRQHandler+0x32a>
 8002ad0:	2b60      	cmp	r3, #96	@ 0x60
 8002ad2:	d82e      	bhi.n	8002b32 <HAL_CAN_IRQHandler+0x334>
 8002ad4:	2b50      	cmp	r3, #80	@ 0x50
 8002ad6:	d022      	beq.n	8002b1e <HAL_CAN_IRQHandler+0x320>
 8002ad8:	2b50      	cmp	r3, #80	@ 0x50
 8002ada:	d82a      	bhi.n	8002b32 <HAL_CAN_IRQHandler+0x334>
 8002adc:	2b40      	cmp	r3, #64	@ 0x40
 8002ade:	d019      	beq.n	8002b14 <HAL_CAN_IRQHandler+0x316>
 8002ae0:	2b40      	cmp	r3, #64	@ 0x40
 8002ae2:	d826      	bhi.n	8002b32 <HAL_CAN_IRQHandler+0x334>
 8002ae4:	2b30      	cmp	r3, #48	@ 0x30
 8002ae6:	d010      	beq.n	8002b0a <HAL_CAN_IRQHandler+0x30c>
 8002ae8:	2b30      	cmp	r3, #48	@ 0x30
 8002aea:	d822      	bhi.n	8002b32 <HAL_CAN_IRQHandler+0x334>
 8002aec:	2b10      	cmp	r3, #16
 8002aee:	d002      	beq.n	8002af6 <HAL_CAN_IRQHandler+0x2f8>
 8002af0:	2b20      	cmp	r3, #32
 8002af2:	d005      	beq.n	8002b00 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002af4:	e01d      	b.n	8002b32 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	f043 0308 	orr.w	r3, r3, #8
 8002afc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002afe:	e019      	b.n	8002b34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b02:	f043 0310 	orr.w	r3, r3, #16
 8002b06:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b08:	e014      	b.n	8002b34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0c:	f043 0320 	orr.w	r3, r3, #32
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b12:	e00f      	b.n	8002b34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b1a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b1c:	e00a      	b.n	8002b34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b24:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b26:	e005      	b.n	8002b34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b2e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b30:	e000      	b.n	8002b34 <HAL_CAN_IRQHandler+0x336>
            break;
 8002b32:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699a      	ldr	r2, [r3, #24]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002b42:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f872 	bl	8002c48 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b64:	bf00      	nop
 8002b66:	3728      	adds	r7, #40	@ 0x28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c8e:	4a04      	ldr	r2, [pc, #16]	@ (8002ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	60d3      	str	r3, [r2, #12]
}
 8002c94:	bf00      	nop
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca8:	4b04      	ldr	r3, [pc, #16]	@ (8002cbc <__NVIC_GetPriorityGrouping+0x18>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	0a1b      	lsrs	r3, r3, #8
 8002cae:	f003 0307 	and.w	r3, r3, #7
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	db0b      	blt.n	8002cea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	f003 021f 	and.w	r2, r3, #31
 8002cd8:	4907      	ldr	r1, [pc, #28]	@ (8002cf8 <__NVIC_EnableIRQ+0x38>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000e100 	.word	0xe000e100

08002cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	6039      	str	r1, [r7, #0]
 8002d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	db0a      	blt.n	8002d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	490c      	ldr	r1, [pc, #48]	@ (8002d48 <__NVIC_SetPriority+0x4c>)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	0112      	lsls	r2, r2, #4
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	440b      	add	r3, r1
 8002d20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d24:	e00a      	b.n	8002d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	4908      	ldr	r1, [pc, #32]	@ (8002d4c <__NVIC_SetPriority+0x50>)
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	3b04      	subs	r3, #4
 8002d34:	0112      	lsls	r2, r2, #4
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	440b      	add	r3, r1
 8002d3a:	761a      	strb	r2, [r3, #24]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000e100 	.word	0xe000e100
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b089      	sub	sp, #36	@ 0x24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f1c3 0307 	rsb	r3, r3, #7
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	bf28      	it	cs
 8002d6e:	2304      	movcs	r3, #4
 8002d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3304      	adds	r3, #4
 8002d76:	2b06      	cmp	r3, #6
 8002d78:	d902      	bls.n	8002d80 <NVIC_EncodePriority+0x30>
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3b03      	subs	r3, #3
 8002d7e:	e000      	b.n	8002d82 <NVIC_EncodePriority+0x32>
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	f04f 32ff 	mov.w	r2, #4294967295
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43da      	mvns	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	401a      	ands	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d98:	f04f 31ff 	mov.w	r1, #4294967295
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002da2:	43d9      	mvns	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da8:	4313      	orrs	r3, r2
         );
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3724      	adds	r7, #36	@ 0x24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dc8:	d301      	bcc.n	8002dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e00f      	b.n	8002dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dce:	4a0a      	ldr	r2, [pc, #40]	@ (8002df8 <SysTick_Config+0x40>)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd6:	210f      	movs	r1, #15
 8002dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ddc:	f7ff ff8e 	bl	8002cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de0:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <SysTick_Config+0x40>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de6:	4b04      	ldr	r3, [pc, #16]	@ (8002df8 <SysTick_Config+0x40>)
 8002de8:	2207      	movs	r2, #7
 8002dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	e000e010 	.word	0xe000e010

08002dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff ff29 	bl	8002c5c <__NVIC_SetPriorityGrouping>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	4603      	mov	r3, r0
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e24:	f7ff ff3e 	bl	8002ca4 <__NVIC_GetPriorityGrouping>
 8002e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	6978      	ldr	r0, [r7, #20]
 8002e30:	f7ff ff8e 	bl	8002d50 <NVIC_EncodePriority>
 8002e34:	4602      	mov	r2, r0
 8002e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff5d 	bl	8002cfc <__NVIC_SetPriority>
}
 8002e42:	bf00      	nop
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff31 	bl	8002cc0 <__NVIC_EnableIRQ>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff ffa2 	bl	8002db8 <SysTick_Config>
 8002e74:	4603      	mov	r3, r0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e8a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e8c:	f7fe fda4 	bl	80019d8 <HAL_GetTick>
 8002e90:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d008      	beq.n	8002eb0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2280      	movs	r2, #128	@ 0x80
 8002ea2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e052      	b.n	8002f56 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0216 	bic.w	r2, r2, #22
 8002ebe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ece:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d103      	bne.n	8002ee0 <HAL_DMA_Abort+0x62>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d007      	beq.n	8002ef0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0208 	bic.w	r2, r2, #8
 8002eee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f00:	e013      	b.n	8002f2a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f02:	f7fe fd69 	bl	80019d8 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b05      	cmp	r3, #5
 8002f0e:	d90c      	bls.n	8002f2a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2203      	movs	r2, #3
 8002f1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e015      	b.n	8002f56 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e4      	bne.n	8002f02 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3c:	223f      	movs	r2, #63	@ 0x3f
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d004      	beq.n	8002f7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2280      	movs	r2, #128	@ 0x80
 8002f76:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e00c      	b.n	8002f96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2205      	movs	r2, #5
 8002f80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0201 	bic.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	@ 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	e153      	b.n	8003268 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	f040 8142 	bne.w	8003262 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d005      	beq.n	8002ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d130      	bne.n	8003058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	2203      	movs	r2, #3
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800302c:	2201      	movs	r2, #1
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 0201 	and.w	r2, r3, #1
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	2b03      	cmp	r3, #3
 8003062:	d017      	beq.n	8003094 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	2203      	movs	r2, #3
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d123      	bne.n	80030e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	08da      	lsrs	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3208      	adds	r2, #8
 80030a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	220f      	movs	r2, #15
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	08da      	lsrs	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3208      	adds	r2, #8
 80030e2:	69b9      	ldr	r1, [r7, #24]
 80030e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	2203      	movs	r2, #3
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0203 	and.w	r2, r3, #3
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 809c 	beq.w	8003262 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	4b54      	ldr	r3, [pc, #336]	@ (8003280 <HAL_GPIO_Init+0x2dc>)
 8003130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003132:	4a53      	ldr	r2, [pc, #332]	@ (8003280 <HAL_GPIO_Init+0x2dc>)
 8003134:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003138:	6453      	str	r3, [r2, #68]	@ 0x44
 800313a:	4b51      	ldr	r3, [pc, #324]	@ (8003280 <HAL_GPIO_Init+0x2dc>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003146:	4a4f      	ldr	r2, [pc, #316]	@ (8003284 <HAL_GPIO_Init+0x2e0>)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	089b      	lsrs	r3, r3, #2
 800314c:	3302      	adds	r3, #2
 800314e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	220f      	movs	r2, #15
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a46      	ldr	r2, [pc, #280]	@ (8003288 <HAL_GPIO_Init+0x2e4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d013      	beq.n	800319a <HAL_GPIO_Init+0x1f6>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a45      	ldr	r2, [pc, #276]	@ (800328c <HAL_GPIO_Init+0x2e8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00d      	beq.n	8003196 <HAL_GPIO_Init+0x1f2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a44      	ldr	r2, [pc, #272]	@ (8003290 <HAL_GPIO_Init+0x2ec>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d007      	beq.n	8003192 <HAL_GPIO_Init+0x1ee>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a43      	ldr	r2, [pc, #268]	@ (8003294 <HAL_GPIO_Init+0x2f0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d101      	bne.n	800318e <HAL_GPIO_Init+0x1ea>
 800318a:	2303      	movs	r3, #3
 800318c:	e006      	b.n	800319c <HAL_GPIO_Init+0x1f8>
 800318e:	2307      	movs	r3, #7
 8003190:	e004      	b.n	800319c <HAL_GPIO_Init+0x1f8>
 8003192:	2302      	movs	r3, #2
 8003194:	e002      	b.n	800319c <HAL_GPIO_Init+0x1f8>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_GPIO_Init+0x1f8>
 800319a:	2300      	movs	r3, #0
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	f002 0203 	and.w	r2, r2, #3
 80031a2:	0092      	lsls	r2, r2, #2
 80031a4:	4093      	lsls	r3, r2
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031ac:	4935      	ldr	r1, [pc, #212]	@ (8003284 <HAL_GPIO_Init+0x2e0>)
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	089b      	lsrs	r3, r3, #2
 80031b2:	3302      	adds	r3, #2
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ba:	4b37      	ldr	r3, [pc, #220]	@ (8003298 <HAL_GPIO_Init+0x2f4>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031de:	4a2e      	ldr	r2, [pc, #184]	@ (8003298 <HAL_GPIO_Init+0x2f4>)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003298 <HAL_GPIO_Init+0x2f4>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003208:	4a23      	ldr	r2, [pc, #140]	@ (8003298 <HAL_GPIO_Init+0x2f4>)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800320e:	4b22      	ldr	r3, [pc, #136]	@ (8003298 <HAL_GPIO_Init+0x2f4>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	43db      	mvns	r3, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4013      	ands	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003232:	4a19      	ldr	r2, [pc, #100]	@ (8003298 <HAL_GPIO_Init+0x2f4>)
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003238:	4b17      	ldr	r3, [pc, #92]	@ (8003298 <HAL_GPIO_Init+0x2f4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800325c:	4a0e      	ldr	r2, [pc, #56]	@ (8003298 <HAL_GPIO_Init+0x2f4>)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3301      	adds	r3, #1
 8003266:	61fb      	str	r3, [r7, #28]
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	2b0f      	cmp	r3, #15
 800326c:	f67f aea8 	bls.w	8002fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	3724      	adds	r7, #36	@ 0x24
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800
 8003284:	40013800 	.word	0x40013800
 8003288:	40020000 	.word	0x40020000
 800328c:	40020400 	.word	0x40020400
 8003290:	40020800 	.word	0x40020800
 8003294:	40020c00 	.word	0x40020c00
 8003298:	40013c00 	.word	0x40013c00

0800329c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	887b      	ldrh	r3, [r7, #2]
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
 80032b8:	e001      	b.n	80032be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032ba:	2300      	movs	r3, #0
 80032bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032be:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	807b      	strh	r3, [r7, #2]
 80032d8:	4613      	mov	r3, r2
 80032da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032dc:	787b      	ldrb	r3, [r7, #1]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032e2:	887a      	ldrh	r2, [r7, #2]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032e8:	e003      	b.n	80032f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ea:	887b      	ldrh	r3, [r7, #2]
 80032ec:	041a      	lsls	r2, r3, #16
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	619a      	str	r2, [r3, #24]
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032fe:	b480      	push	{r7}
 8003300:	b085      	sub	sp, #20
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003310:	887a      	ldrh	r2, [r7, #2]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4013      	ands	r3, r2
 8003316:	041a      	lsls	r2, r3, #16
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	43d9      	mvns	r1, r3
 800331c:	887b      	ldrh	r3, [r7, #2]
 800331e:	400b      	ands	r3, r1
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	619a      	str	r2, [r3, #24]
}
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
	...

08003334 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800333e:	4b08      	ldr	r3, [pc, #32]	@ (8003360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	4013      	ands	r3, r2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d006      	beq.n	8003358 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800334a:	4a05      	ldr	r2, [pc, #20]	@ (8003360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd fa1c 	bl	8000790 <HAL_GPIO_EXTI_Callback>
  }
}
 8003358:	bf00      	nop
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40013c00 	.word	0x40013c00

08003364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e12b      	b.n	80035ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fd ffee 	bl	800136c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2224      	movs	r2, #36	@ 0x24
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033c8:	f000 fda2 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
 80033cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4a81      	ldr	r2, [pc, #516]	@ (80035d8 <HAL_I2C_Init+0x274>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d807      	bhi.n	80033e8 <HAL_I2C_Init+0x84>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4a80      	ldr	r2, [pc, #512]	@ (80035dc <HAL_I2C_Init+0x278>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	bf94      	ite	ls
 80033e0:	2301      	movls	r3, #1
 80033e2:	2300      	movhi	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	e006      	b.n	80033f6 <HAL_I2C_Init+0x92>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a7d      	ldr	r2, [pc, #500]	@ (80035e0 <HAL_I2C_Init+0x27c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	bf94      	ite	ls
 80033f0:	2301      	movls	r3, #1
 80033f2:	2300      	movhi	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e0e7      	b.n	80035ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a78      	ldr	r2, [pc, #480]	@ (80035e4 <HAL_I2C_Init+0x280>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	0c9b      	lsrs	r3, r3, #18
 8003408:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4a6a      	ldr	r2, [pc, #424]	@ (80035d8 <HAL_I2C_Init+0x274>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d802      	bhi.n	8003438 <HAL_I2C_Init+0xd4>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	3301      	adds	r3, #1
 8003436:	e009      	b.n	800344c <HAL_I2C_Init+0xe8>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800343e:	fb02 f303 	mul.w	r3, r2, r3
 8003442:	4a69      	ldr	r2, [pc, #420]	@ (80035e8 <HAL_I2C_Init+0x284>)
 8003444:	fba2 2303 	umull	r2, r3, r2, r3
 8003448:	099b      	lsrs	r3, r3, #6
 800344a:	3301      	adds	r3, #1
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	430b      	orrs	r3, r1
 8003452:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800345e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	495c      	ldr	r1, [pc, #368]	@ (80035d8 <HAL_I2C_Init+0x274>)
 8003468:	428b      	cmp	r3, r1
 800346a:	d819      	bhi.n	80034a0 <HAL_I2C_Init+0x13c>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1e59      	subs	r1, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	fbb1 f3f3 	udiv	r3, r1, r3
 800347a:	1c59      	adds	r1, r3, #1
 800347c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003480:	400b      	ands	r3, r1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_I2C_Init+0x138>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1e59      	subs	r1, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	fbb1 f3f3 	udiv	r3, r1, r3
 8003494:	3301      	adds	r3, #1
 8003496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800349a:	e051      	b.n	8003540 <HAL_I2C_Init+0x1dc>
 800349c:	2304      	movs	r3, #4
 800349e:	e04f      	b.n	8003540 <HAL_I2C_Init+0x1dc>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d111      	bne.n	80034cc <HAL_I2C_Init+0x168>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1e58      	subs	r0, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	440b      	add	r3, r1
 80034b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ba:	3301      	adds	r3, #1
 80034bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	e012      	b.n	80034f2 <HAL_I2C_Init+0x18e>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1e58      	subs	r0, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6859      	ldr	r1, [r3, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	0099      	lsls	r1, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	fbb0 f3f3 	udiv	r3, r0, r3
 80034e2:	3301      	adds	r3, #1
 80034e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	bf0c      	ite	eq
 80034ec:	2301      	moveq	r3, #1
 80034ee:	2300      	movne	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Init+0x196>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e022      	b.n	8003540 <HAL_I2C_Init+0x1dc>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10e      	bne.n	8003520 <HAL_I2C_Init+0x1bc>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1e58      	subs	r0, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6859      	ldr	r1, [r3, #4]
 800350a:	460b      	mov	r3, r1
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	440b      	add	r3, r1
 8003510:	fbb0 f3f3 	udiv	r3, r0, r3
 8003514:	3301      	adds	r3, #1
 8003516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800351e:	e00f      	b.n	8003540 <HAL_I2C_Init+0x1dc>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1e58      	subs	r0, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6859      	ldr	r1, [r3, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	0099      	lsls	r1, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	fbb0 f3f3 	udiv	r3, r0, r3
 8003536:	3301      	adds	r3, #1
 8003538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	6809      	ldr	r1, [r1, #0]
 8003544:	4313      	orrs	r3, r2
 8003546:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69da      	ldr	r2, [r3, #28]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800356e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6911      	ldr	r1, [r2, #16]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68d2      	ldr	r2, [r2, #12]
 800357a:	4311      	orrs	r1, r2
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	430b      	orrs	r3, r1
 8003582:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	000186a0 	.word	0x000186a0
 80035dc:	001e847f 	.word	0x001e847f
 80035e0:	003d08ff 	.word	0x003d08ff
 80035e4:	431bde83 	.word	0x431bde83
 80035e8:	10624dd3 	.word	0x10624dd3

080035ec <HAL_IRDA_Init>:
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IRDA_Init(IRDA_HandleTypeDef *hirda)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check the IRDA handle allocation */
  if (hirda == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_IRDA_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e05e      	b.n	80036bc <HAL_IRDA_Init+0xd0>
  /* Check the IRDA instance parameters */
  assert_param(IS_IRDA_INSTANCE(hirda->Instance));
  /* Check the IRDA mode parameter in the IRDA handle */
  assert_param(IS_IRDA_POWERMODE(hirda->Init.IrDAMode));

  if (hirda->gState == HAL_IRDA_STATE_RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <HAL_IRDA_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hirda->Lock = HAL_UNLOCKED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware */
    hirda->MspInitCallback(hirda);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_IRDA_MspInit(hirda);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fd ffdc 	bl	80015d0 <HAL_IRDA_MspInit>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
  }

  hirda->gState = HAL_IRDA_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2224      	movs	r2, #36	@ 0x24
 800361c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable the IRDA peripheral */
  __HAL_IRDA_DISABLE(hirda);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800362e:	60da      	str	r2, [r3, #12]

  /* Set the IRDA communication parameters */
  IRDA_SetConfig(hirda);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f847 	bl	80036c4 <IRDA_SetConfig>

  /* In IrDA mode, the following bits must be kept cleared:
  - LINEN, STOP and CLKEN bits in the USART_CR2 register,
  - SCEN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(hirda->Instance->CR2, (USART_CR2_LINEN | USART_CR2_STOP | USART_CR2_CLKEN));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 42f0 	bic.w	r2, r2, #30720	@ 0x7800
 8003644:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0228 	bic.w	r2, r2, #40	@ 0x28
 8003654:	615a      	str	r2, [r3, #20]

  /* Enable the IRDA peripheral */
  __HAL_IRDA_ENABLE(hirda);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003664:	60da      	str	r2, [r3, #12]

  /* Set the prescaler */
  MODIFY_REG(hirda->Instance->GTPR, USART_GTPR_PSC, hirda->Init.Prescaler);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	7d1b      	ldrb	r3, [r3, #20]
 8003674:	4619      	mov	r1, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	619a      	str	r2, [r3, #24]

  /* Configure the IrDA mode */
  MODIFY_REG(hirda->Instance->CR3, USART_CR3_IRLP, hirda->Init.IrDAMode);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	f023 0104 	bic.w	r1, r3, #4
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699a      	ldr	r2, [r3, #24]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	615a      	str	r2, [r3, #20]

  /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
  SET_BIT(hirda->Instance->CR3, USART_CR3_IREN);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0202 	orr.w	r2, r2, #2
 80036a2:	615a      	str	r2, [r3, #20]

  /* Initialize the IRDA state*/
  hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hirda->gState = HAL_IRDA_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hirda->RxState = HAL_IRDA_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <IRDA_SetConfig>:
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_SetConfig(IRDA_HandleTypeDef *hirda)
{
 80036c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036c8:	b0bb      	sub	sp, #236	@ 0xec
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
  assert_param(IS_IRDA_MODE(hirda->Init.Mode));
  assert_param(IS_IRDA_POWERMODE(hirda->Init.IrDAMode));

  /*-------------------------- USART CR2 Configuration ------------------------*/
  /* Clear STOP[13:12] bits */
  CLEAR_BIT(hirda->Instance->CR2, USART_CR2_STOP);
 80036d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6919      	ldr	r1, [r3, #16]
 80036d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	f421 5340 	bic.w	r3, r1, #12288	@ 0x3000
 80036e2:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  /* Clear M, PCE, PS, TE and RE bits */
  CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 80036e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68d9      	ldr	r1, [r3, #12]
 80036ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	f421 53b0 	bic.w	r3, r1, #5632	@ 0x1600
 80036f6:	f023 030c 	bic.w	r3, r3, #12
 80036fa:	60d3      	str	r3, [r2, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to hirda->Init.WordLength value
     Set PCE and PS bits according to hirda->Init.Parity value
     Set TE and RE bits according to hirda->Init.Mode value */
  /* Write to USART CR1 */
  SET_BIT(hirda->Instance->CR1, (hirda->Init.WordLength | hirda->Init.Parity | hirda->Init.Mode));
 80036fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68d8      	ldr	r0, [r3, #12]
 8003704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	431a      	orrs	r2, r3
 8003712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	ea42 0103 	orr.w	r1, r2, r3
 800371c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	ea40 0301 	orr.w	r3, r0, r1
 8003726:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8003728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6959      	ldr	r1, [r3, #20]
 8003730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
 800373a:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
   }
#elif defined(USART6)
  if((hirda->Instance == USART1) || (hirda->Instance == USART6))
 800373c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4b90      	ldr	r3, [pc, #576]	@ (8003984 <IRDA_SetConfig+0x2c0>)
 8003744:	429a      	cmp	r2, r3
 8003746:	d006      	beq.n	8003756 <IRDA_SetConfig+0x92>
 8003748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4b8e      	ldr	r3, [pc, #568]	@ (8003988 <IRDA_SetConfig+0x2c4>)
 8003750:	429a      	cmp	r2, r3
 8003752:	f040 811d 	bne.w	8003990 <IRDA_SetConfig+0x2cc>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003756:	f000 fbef 	bl	8003f38 <HAL_RCC_GetPCLK2Freq>
 800375a:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
    SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
 800375e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689d      	ldr	r5, [r3, #8]
 8003766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800376a:	2200      	movs	r2, #0
 800376c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003770:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003774:	e9d7 ab34 	ldrd	sl, fp, [r7, #208]	@ 0xd0
 8003778:	4652      	mov	r2, sl
 800377a:	465b      	mov	r3, fp
 800377c:	1891      	adds	r1, r2, r2
 800377e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003780:	415b      	adcs	r3, r3
 8003782:	647b      	str	r3, [r7, #68]	@ 0x44
 8003784:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003788:	4651      	mov	r1, sl
 800378a:	eb12 0801 	adds.w	r8, r2, r1
 800378e:	4659      	mov	r1, fp
 8003790:	eb43 0901 	adc.w	r9, r3, r1
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037a8:	4690      	mov	r8, r2
 80037aa:	4699      	mov	r9, r3
 80037ac:	4653      	mov	r3, sl
 80037ae:	eb18 0303 	adds.w	r3, r8, r3
 80037b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037b6:	465b      	mov	r3, fp
 80037b8:	eb49 0303 	adc.w	r3, r9, r3
 80037bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80037dc:	4649      	mov	r1, r9
 80037de:	008b      	lsls	r3, r1, #2
 80037e0:	4641      	mov	r1, r8
 80037e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037e6:	4641      	mov	r1, r8
 80037e8:	008a      	lsls	r2, r1, #2
 80037ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80037ee:	f7fc fd09 	bl	8000204 <__aeabi_uldivmod>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4b65      	ldr	r3, [pc, #404]	@ (800398c <IRDA_SetConfig+0x2c8>)
 80037f8:	fba3 2302 	umull	r2, r3, r3, r2
 80037fc:	095b      	lsrs	r3, r3, #5
 80037fe:	011c      	lsls	r4, r3, #4
 8003800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003804:	2200      	movs	r2, #0
 8003806:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800380a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800380e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003812:	4642      	mov	r2, r8
 8003814:	464b      	mov	r3, r9
 8003816:	1891      	adds	r1, r2, r2
 8003818:	63b9      	str	r1, [r7, #56]	@ 0x38
 800381a:	415b      	adcs	r3, r3
 800381c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800381e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003822:	4641      	mov	r1, r8
 8003824:	1851      	adds	r1, r2, r1
 8003826:	6339      	str	r1, [r7, #48]	@ 0x30
 8003828:	4649      	mov	r1, r9
 800382a:	414b      	adcs	r3, r1
 800382c:	637b      	str	r3, [r7, #52]	@ 0x34
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800383a:	4659      	mov	r1, fp
 800383c:	00cb      	lsls	r3, r1, #3
 800383e:	4651      	mov	r1, sl
 8003840:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003844:	4651      	mov	r1, sl
 8003846:	00ca      	lsls	r2, r1, #3
 8003848:	4610      	mov	r0, r2
 800384a:	4619      	mov	r1, r3
 800384c:	4603      	mov	r3, r0
 800384e:	4642      	mov	r2, r8
 8003850:	189b      	adds	r3, r3, r2
 8003852:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003856:	464b      	mov	r3, r9
 8003858:	460a      	mov	r2, r1
 800385a:	eb42 0303 	adc.w	r3, r2, r3
 800385e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800386e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800387e:	4649      	mov	r1, r9
 8003880:	008b      	lsls	r3, r1, #2
 8003882:	4641      	mov	r1, r8
 8003884:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003888:	4641      	mov	r1, r8
 800388a:	008a      	lsls	r2, r1, #2
 800388c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003890:	f7fc fcb8 	bl	8000204 <__aeabi_uldivmod>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4611      	mov	r1, r2
 800389a:	4b3c      	ldr	r3, [pc, #240]	@ (800398c <IRDA_SetConfig+0x2c8>)
 800389c:	fba3 2301 	umull	r2, r3, r3, r1
 80038a0:	095b      	lsrs	r3, r3, #5
 80038a2:	2264      	movs	r2, #100	@ 0x64
 80038a4:	fb02 f303 	mul.w	r3, r2, r3
 80038a8:	1acb      	subs	r3, r1, r3
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	3332      	adds	r3, #50	@ 0x32
 80038ae:	4a37      	ldr	r2, [pc, #220]	@ (800398c <IRDA_SetConfig+0x2c8>)
 80038b0:	fba2 2303 	umull	r2, r3, r2, r3
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038ba:	441c      	add	r4, r3
 80038bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c0:	2200      	movs	r2, #0
 80038c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80038c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80038ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80038ce:	4642      	mov	r2, r8
 80038d0:	464b      	mov	r3, r9
 80038d2:	1891      	adds	r1, r2, r2
 80038d4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80038d6:	415b      	adcs	r3, r3
 80038d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038de:	4641      	mov	r1, r8
 80038e0:	1851      	adds	r1, r2, r1
 80038e2:	6239      	str	r1, [r7, #32]
 80038e4:	4649      	mov	r1, r9
 80038e6:	414b      	adcs	r3, r1
 80038e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 80038f6:	4659      	mov	r1, fp
 80038f8:	00cb      	lsls	r3, r1, #3
 80038fa:	4651      	mov	r1, sl
 80038fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003900:	4651      	mov	r1, sl
 8003902:	00ca      	lsls	r2, r1, #3
 8003904:	4610      	mov	r0, r2
 8003906:	4619      	mov	r1, r3
 8003908:	4603      	mov	r3, r0
 800390a:	4642      	mov	r2, r8
 800390c:	189b      	adds	r3, r3, r2
 800390e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003912:	464b      	mov	r3, r9
 8003914:	460a      	mov	r2, r1
 8003916:	eb42 0303 	adc.w	r3, r2, r3
 800391a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800391e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800392a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800393a:	4649      	mov	r1, r9
 800393c:	008b      	lsls	r3, r1, #2
 800393e:	4641      	mov	r1, r8
 8003940:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003944:	4641      	mov	r1, r8
 8003946:	008a      	lsls	r2, r1, #2
 8003948:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800394c:	f7fc fc5a 	bl	8000204 <__aeabi_uldivmod>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4b0d      	ldr	r3, [pc, #52]	@ (800398c <IRDA_SetConfig+0x2c8>)
 8003956:	fba3 1302 	umull	r1, r3, r3, r2
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	2164      	movs	r1, #100	@ 0x64
 800395e:	fb01 f303 	mul.w	r3, r1, r3
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	3332      	adds	r3, #50	@ 0x32
 8003968:	4a08      	ldr	r2, [pc, #32]	@ (800398c <IRDA_SetConfig+0x2c8>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	18e2      	adds	r2, r4, r3
 8003976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	432a      	orrs	r2, r5
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	e106      	b.n	8003b90 <IRDA_SetConfig+0x4cc>
 8003982:	bf00      	nop
 8003984:	40011000 	.word	0x40011000
 8003988:	40011400 	.word	0x40011400
 800398c:	51eb851f 	.word	0x51eb851f
    SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
  }
#endif /* USART6 */
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003990:	f000 fabe 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
 8003994:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
    SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
 8003998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689e      	ldr	r6, [r3, #8]
 80039a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039a4:	2200      	movs	r2, #0
 80039a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039aa:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039ae:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80039b2:	4642      	mov	r2, r8
 80039b4:	464b      	mov	r3, r9
 80039b6:	1891      	adds	r1, r2, r2
 80039b8:	61b9      	str	r1, [r7, #24]
 80039ba:	415b      	adcs	r3, r3
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039c2:	4641      	mov	r1, r8
 80039c4:	1854      	adds	r4, r2, r1
 80039c6:	4649      	mov	r1, r9
 80039c8:	eb43 0501 	adc.w	r5, r3, r1
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	00eb      	lsls	r3, r5, #3
 80039d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039da:	00e2      	lsls	r2, r4, #3
 80039dc:	4614      	mov	r4, r2
 80039de:	461d      	mov	r5, r3
 80039e0:	4643      	mov	r3, r8
 80039e2:	18e3      	adds	r3, r4, r3
 80039e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039e8:	464b      	mov	r3, r9
 80039ea:	eb45 0303 	adc.w	r3, r5, r3
 80039ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039fc:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	008b      	lsls	r3, r1, #2
 8003a0e:	4621      	mov	r1, r4
 8003a10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a14:	4621      	mov	r1, r4
 8003a16:	008a      	lsls	r2, r1, #2
 8003a18:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a1c:	f7fc fbf2 	bl	8000204 <__aeabi_uldivmod>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4b5d      	ldr	r3, [pc, #372]	@ (8003b9c <IRDA_SetConfig+0x4d8>)
 8003a26:	fba3 2302 	umull	r2, r3, r3, r2
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	011c      	lsls	r4, r3, #4
 8003a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a32:	2200      	movs	r2, #0
 8003a34:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a36:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a3c:	4642      	mov	r2, r8
 8003a3e:	464b      	mov	r3, r9
 8003a40:	1891      	adds	r1, r2, r2
 8003a42:	6139      	str	r1, [r7, #16]
 8003a44:	415b      	adcs	r3, r3
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	eb12 0a01 	adds.w	sl, r2, r1
 8003a52:	4649      	mov	r1, r9
 8003a54:	eb43 0b01 	adc.w	fp, r3, r1
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a6c:	4692      	mov	sl, r2
 8003a6e:	469b      	mov	fp, r3
 8003a70:	4643      	mov	r3, r8
 8003a72:	eb1a 0303 	adds.w	r3, sl, r3
 8003a76:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a78:	464b      	mov	r3, r9
 8003a7a:	eb4b 0303 	adc.w	r3, fp, r3
 8003a7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003a98:	4649      	mov	r1, r9
 8003a9a:	008b      	lsls	r3, r1, #2
 8003a9c:	4641      	mov	r1, r8
 8003a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa2:	4641      	mov	r1, r8
 8003aa4:	008a      	lsls	r2, r1, #2
 8003aa6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003aaa:	f7fc fbab 	bl	8000204 <__aeabi_uldivmod>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4b39      	ldr	r3, [pc, #228]	@ (8003b9c <IRDA_SetConfig+0x4d8>)
 8003ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	2264      	movs	r2, #100	@ 0x64
 8003abe:	fb02 f303 	mul.w	r3, r2, r3
 8003ac2:	1acb      	subs	r3, r1, r3
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	3332      	adds	r3, #50	@ 0x32
 8003ac8:	4a34      	ldr	r2, [pc, #208]	@ (8003b9c <IRDA_SetConfig+0x4d8>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ad4:	441c      	add	r4, r3
 8003ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ada:	2200      	movs	r2, #0
 8003adc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ade:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003ae0:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8003ae4:	4642      	mov	r2, r8
 8003ae6:	464b      	mov	r3, r9
 8003ae8:	1891      	adds	r1, r2, r2
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	415b      	adcs	r3, r3
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003af4:	4641      	mov	r1, r8
 8003af6:	1851      	adds	r1, r2, r1
 8003af8:	6039      	str	r1, [r7, #0]
 8003afa:	4649      	mov	r1, r9
 8003afc:	414b      	adcs	r3, r1
 8003afe:	607b      	str	r3, [r7, #4]
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b0c:	4659      	mov	r1, fp
 8003b0e:	00cb      	lsls	r3, r1, #3
 8003b10:	4651      	mov	r1, sl
 8003b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b16:	4651      	mov	r1, sl
 8003b18:	00ca      	lsls	r2, r1, #3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4642      	mov	r2, r8
 8003b22:	189b      	adds	r3, r3, r2
 8003b24:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b26:	464b      	mov	r3, r9
 8003b28:	460a      	mov	r2, r1
 8003b2a:	eb42 0303 	adc.w	r3, r2, r3
 8003b2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b3a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8003b48:	4649      	mov	r1, r9
 8003b4a:	008b      	lsls	r3, r1, #2
 8003b4c:	4641      	mov	r1, r8
 8003b4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b52:	4641      	mov	r1, r8
 8003b54:	008a      	lsls	r2, r1, #2
 8003b56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8003b5a:	f7fc fb53 	bl	8000204 <__aeabi_uldivmod>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4b0e      	ldr	r3, [pc, #56]	@ (8003b9c <IRDA_SetConfig+0x4d8>)
 8003b64:	fba3 1302 	umull	r1, r3, r3, r2
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	2164      	movs	r1, #100	@ 0x64
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	3332      	adds	r3, #50	@ 0x32
 8003b76:	4a09      	ldr	r2, [pc, #36]	@ (8003b9c <IRDA_SetConfig+0x4d8>)
 8003b78:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	18e2      	adds	r2, r4, r3
 8003b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4332      	orrs	r2, r6
 8003b8c:	609a      	str	r2, [r3, #8]
  }
}
 8003b8e:	bf00      	nop
 8003b90:	bf00      	nop
 8003b92:	37ec      	adds	r7, #236	@ 0xec
 8003b94:	46bd      	mov	sp, r7
 8003b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b9a:	bf00      	nop
 8003b9c:	51eb851f 	.word	0x51eb851f

08003ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0cc      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb4:	4b68      	ldr	r3, [pc, #416]	@ (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d90c      	bls.n	8003bdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc2:	4b65      	ldr	r3, [pc, #404]	@ (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b63      	ldr	r3, [pc, #396]	@ (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0b8      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d020      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bf4:	4b59      	ldr	r3, [pc, #356]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4a58      	ldr	r2, [pc, #352]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bfe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c0c:	4b53      	ldr	r3, [pc, #332]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	4a52      	ldr	r2, [pc, #328]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c18:	4b50      	ldr	r3, [pc, #320]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	494d      	ldr	r1, [pc, #308]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d044      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d107      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3e:	4b47      	ldr	r3, [pc, #284]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d119      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e07f      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d003      	beq.n	8003c5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d107      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e06f      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e067      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c7e:	4b37      	ldr	r3, [pc, #220]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f023 0203 	bic.w	r2, r3, #3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4934      	ldr	r1, [pc, #208]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c90:	f7fd fea2 	bl	80019d8 <HAL_GetTick>
 8003c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	e00a      	b.n	8003cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c98:	f7fd fe9e 	bl	80019d8 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e04f      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cae:	4b2b      	ldr	r3, [pc, #172]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 020c 	and.w	r2, r3, #12
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d1eb      	bne.n	8003c98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc0:	4b25      	ldr	r3, [pc, #148]	@ (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d20c      	bcs.n	8003ce8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cce:	4b22      	ldr	r3, [pc, #136]	@ (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd6:	4b20      	ldr	r3, [pc, #128]	@ (8003d58 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e032      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf4:	4b19      	ldr	r3, [pc, #100]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	4916      	ldr	r1, [pc, #88]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d12:	4b12      	ldr	r3, [pc, #72]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	490e      	ldr	r1, [pc, #56]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d26:	f000 f821 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	490a      	ldr	r1, [pc, #40]	@ (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003d38:	5ccb      	ldrb	r3, [r1, r3]
 8003d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3e:	4a09      	ldr	r2, [pc, #36]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d42:	4b09      	ldr	r3, [pc, #36]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fd fe02 	bl	8001950 <HAL_InitTick>

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40023c00 	.word	0x40023c00
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	0800675c 	.word	0x0800675c
 8003d64:	20000000 	.word	0x20000000
 8003d68:	20000004 	.word	0x20000004

08003d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d70:	b090      	sub	sp, #64	@ 0x40
 8003d72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d84:	4b59      	ldr	r3, [pc, #356]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x180>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 030c 	and.w	r3, r3, #12
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d00d      	beq.n	8003dac <HAL_RCC_GetSysClockFreq+0x40>
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	f200 80a1 	bhi.w	8003ed8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <HAL_RCC_GetSysClockFreq+0x34>
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d003      	beq.n	8003da6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d9e:	e09b      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003da0:	4b53      	ldr	r3, [pc, #332]	@ (8003ef0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003da2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003da4:	e09b      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003da6:	4b53      	ldr	r3, [pc, #332]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003da8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003daa:	e098      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dac:	4b4f      	ldr	r3, [pc, #316]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x180>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003db4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003db6:	4b4d      	ldr	r3, [pc, #308]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x180>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d028      	beq.n	8003e14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dc2:	4b4a      	ldr	r3, [pc, #296]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x180>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	099b      	lsrs	r3, r3, #6
 8003dc8:	2200      	movs	r2, #0
 8003dca:	623b      	str	r3, [r7, #32]
 8003dcc:	627a      	str	r2, [r7, #36]	@ 0x24
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4b47      	ldr	r3, [pc, #284]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dd8:	fb03 f201 	mul.w	r2, r3, r1
 8003ddc:	2300      	movs	r3, #0
 8003dde:	fb00 f303 	mul.w	r3, r0, r3
 8003de2:	4413      	add	r3, r2
 8003de4:	4a43      	ldr	r2, [pc, #268]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003de6:	fba0 1202 	umull	r1, r2, r0, r2
 8003dea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dec:	460a      	mov	r2, r1
 8003dee:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003df0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003df2:	4413      	add	r3, r2
 8003df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df8:	2200      	movs	r2, #0
 8003dfa:	61bb      	str	r3, [r7, #24]
 8003dfc:	61fa      	str	r2, [r7, #28]
 8003dfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003e06:	f7fc f9fd 	bl	8000204 <__aeabi_uldivmod>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4613      	mov	r3, r2
 8003e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e12:	e053      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e14:	4b35      	ldr	r3, [pc, #212]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x180>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	099b      	lsrs	r3, r3, #6
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	617a      	str	r2, [r7, #20]
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e26:	f04f 0b00 	mov.w	fp, #0
 8003e2a:	4652      	mov	r2, sl
 8003e2c:	465b      	mov	r3, fp
 8003e2e:	f04f 0000 	mov.w	r0, #0
 8003e32:	f04f 0100 	mov.w	r1, #0
 8003e36:	0159      	lsls	r1, r3, #5
 8003e38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e3c:	0150      	lsls	r0, r2, #5
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	ebb2 080a 	subs.w	r8, r2, sl
 8003e46:	eb63 090b 	sbc.w	r9, r3, fp
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e5e:	ebb2 0408 	subs.w	r4, r2, r8
 8003e62:	eb63 0509 	sbc.w	r5, r3, r9
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	00eb      	lsls	r3, r5, #3
 8003e70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e74:	00e2      	lsls	r2, r4, #3
 8003e76:	4614      	mov	r4, r2
 8003e78:	461d      	mov	r5, r3
 8003e7a:	eb14 030a 	adds.w	r3, r4, sl
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	eb45 030b 	adc.w	r3, r5, fp
 8003e84:	607b      	str	r3, [r7, #4]
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e92:	4629      	mov	r1, r5
 8003e94:	028b      	lsls	r3, r1, #10
 8003e96:	4621      	mov	r1, r4
 8003e98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	028a      	lsls	r2, r1, #10
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	60fa      	str	r2, [r7, #12]
 8003eac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eb0:	f7fc f9a8 	bl	8000204 <__aeabi_uldivmod>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4613      	mov	r3, r2
 8003eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x180>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	0c1b      	lsrs	r3, r3, #16
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003ecc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ed6:	e002      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ed8:	4b05      	ldr	r3, [pc, #20]	@ (8003ef0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003eda:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3740      	adds	r7, #64	@ 0x40
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eea:	bf00      	nop
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	00f42400 	.word	0x00f42400
 8003ef4:	017d7840 	.word	0x017d7840

08003ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003efc:	4b03      	ldr	r3, [pc, #12]	@ (8003f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003efe:	681b      	ldr	r3, [r3, #0]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	20000000 	.word	0x20000000

08003f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f14:	f7ff fff0 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4b05      	ldr	r3, [pc, #20]	@ (8003f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	0a9b      	lsrs	r3, r3, #10
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	4903      	ldr	r1, [pc, #12]	@ (8003f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f26:	5ccb      	ldrb	r3, [r1, r3]
 8003f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40023800 	.word	0x40023800
 8003f34:	0800676c 	.word	0x0800676c

08003f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f3c:	f7ff ffdc 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8003f40:	4602      	mov	r2, r0
 8003f42:	4b05      	ldr	r3, [pc, #20]	@ (8003f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	0b5b      	lsrs	r3, r3, #13
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	4903      	ldr	r1, [pc, #12]	@ (8003f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f4e:	5ccb      	ldrb	r3, [r1, r3]
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	0800676c 	.word	0x0800676c

08003f60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e273      	b.n	800445a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d075      	beq.n	800406a <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f7e:	4b88      	ldr	r3, [pc, #544]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d00c      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8a:	4b85      	ldr	r3, [pc, #532]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d112      	bne.n	8003fbc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f96:	4b82      	ldr	r3, [pc, #520]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fa2:	d10b      	bne.n	8003fbc <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa4:	4b7e      	ldr	r3, [pc, #504]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d05b      	beq.n	8004068 <HAL_RCC_OscConfig+0x108>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d157      	bne.n	8004068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e24e      	b.n	800445a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fc4:	d106      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x74>
 8003fc6:	4b76      	ldr	r3, [pc, #472]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a75      	ldr	r2, [pc, #468]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	e01d      	b.n	8004010 <HAL_RCC_OscConfig+0xb0>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x98>
 8003fde:	4b70      	ldr	r3, [pc, #448]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a6f      	ldr	r2, [pc, #444]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	4b6d      	ldr	r3, [pc, #436]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a6c      	ldr	r2, [pc, #432]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e00b      	b.n	8004010 <HAL_RCC_OscConfig+0xb0>
 8003ff8:	4b69      	ldr	r3, [pc, #420]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a68      	ldr	r2, [pc, #416]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	4b66      	ldr	r3, [pc, #408]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a65      	ldr	r2, [pc, #404]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 800400a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800400e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d013      	beq.n	8004040 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fd fcde 	bl	80019d8 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004020:	f7fd fcda 	bl	80019d8 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b64      	cmp	r3, #100	@ 0x64
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e213      	b.n	800445a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	4b5b      	ldr	r3, [pc, #364]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0xc0>
 800403e:	e014      	b.n	800406a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fd fcca 	bl	80019d8 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004048:	f7fd fcc6 	bl	80019d8 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b64      	cmp	r3, #100	@ 0x64
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e1ff      	b.n	800445a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405a:	4b51      	ldr	r3, [pc, #324]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0xe8>
 8004066:	e000      	b.n	800406a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d063      	beq.n	800413e <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004076:	4b4a      	ldr	r3, [pc, #296]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004082:	4b47      	ldr	r3, [pc, #284]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
        || \
 800408a:	2b08      	cmp	r3, #8
 800408c:	d11c      	bne.n	80040c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800408e:	4b44      	ldr	r3, [pc, #272]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d116      	bne.n	80040c8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409a:	4b41      	ldr	r3, [pc, #260]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_RCC_OscConfig+0x152>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d001      	beq.n	80040b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e1d3      	b.n	800445a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b2:	4b3b      	ldr	r3, [pc, #236]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4937      	ldr	r1, [pc, #220]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040c6:	e03a      	b.n	800413e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d020      	beq.n	8004112 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d0:	4b34      	ldr	r3, [pc, #208]	@ (80041a4 <HAL_RCC_OscConfig+0x244>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d6:	f7fd fc7f 	bl	80019d8 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040de:	f7fd fc7b 	bl	80019d8 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e1b4      	b.n	800445a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f0:	4b2b      	ldr	r3, [pc, #172]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0f0      	beq.n	80040de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fc:	4b28      	ldr	r3, [pc, #160]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	4925      	ldr	r1, [pc, #148]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 800410c:	4313      	orrs	r3, r2
 800410e:	600b      	str	r3, [r1, #0]
 8004110:	e015      	b.n	800413e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004112:	4b24      	ldr	r3, [pc, #144]	@ (80041a4 <HAL_RCC_OscConfig+0x244>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004118:	f7fd fc5e 	bl	80019d8 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004120:	f7fd fc5a 	bl	80019d8 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e193      	b.n	800445a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004132:	4b1b      	ldr	r3, [pc, #108]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d036      	beq.n	80041b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d016      	beq.n	8004180 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004152:	4b15      	ldr	r3, [pc, #84]	@ (80041a8 <HAL_RCC_OscConfig+0x248>)
 8004154:	2201      	movs	r2, #1
 8004156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004158:	f7fd fc3e 	bl	80019d8 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004160:	f7fd fc3a 	bl	80019d8 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e173      	b.n	800445a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004172:	4b0b      	ldr	r3, [pc, #44]	@ (80041a0 <HAL_RCC_OscConfig+0x240>)
 8004174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0x200>
 800417e:	e01b      	b.n	80041b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004180:	4b09      	ldr	r3, [pc, #36]	@ (80041a8 <HAL_RCC_OscConfig+0x248>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004186:	f7fd fc27 	bl	80019d8 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800418c:	e00e      	b.n	80041ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800418e:	f7fd fc23 	bl	80019d8 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d907      	bls.n	80041ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e15c      	b.n	800445a <HAL_RCC_OscConfig+0x4fa>
 80041a0:	40023800 	.word	0x40023800
 80041a4:	42470000 	.word	0x42470000
 80041a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ac:	4b8a      	ldr	r3, [pc, #552]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 80041ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1ea      	bne.n	800418e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 8097 	beq.w	80042f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041c6:	2300      	movs	r3, #0
 80041c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ca:	4b83      	ldr	r3, [pc, #524]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10f      	bne.n	80041f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d6:	2300      	movs	r3, #0
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	4b7f      	ldr	r3, [pc, #508]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	4a7e      	ldr	r2, [pc, #504]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 80041e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80041e6:	4b7c      	ldr	r3, [pc, #496]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ee:	60bb      	str	r3, [r7, #8]
 80041f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f2:	2301      	movs	r3, #1
 80041f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f6:	4b79      	ldr	r3, [pc, #484]	@ (80043dc <HAL_RCC_OscConfig+0x47c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d118      	bne.n	8004234 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004202:	4b76      	ldr	r3, [pc, #472]	@ (80043dc <HAL_RCC_OscConfig+0x47c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a75      	ldr	r2, [pc, #468]	@ (80043dc <HAL_RCC_OscConfig+0x47c>)
 8004208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800420c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800420e:	f7fd fbe3 	bl	80019d8 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004216:	f7fd fbdf 	bl	80019d8 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e118      	b.n	800445a <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004228:	4b6c      	ldr	r3, [pc, #432]	@ (80043dc <HAL_RCC_OscConfig+0x47c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0f0      	beq.n	8004216 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d106      	bne.n	800424a <HAL_RCC_OscConfig+0x2ea>
 800423c:	4b66      	ldr	r3, [pc, #408]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004240:	4a65      	ldr	r2, [pc, #404]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 8004242:	f043 0301 	orr.w	r3, r3, #1
 8004246:	6713      	str	r3, [r2, #112]	@ 0x70
 8004248:	e01c      	b.n	8004284 <HAL_RCC_OscConfig+0x324>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b05      	cmp	r3, #5
 8004250:	d10c      	bne.n	800426c <HAL_RCC_OscConfig+0x30c>
 8004252:	4b61      	ldr	r3, [pc, #388]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004256:	4a60      	ldr	r2, [pc, #384]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 8004258:	f043 0304 	orr.w	r3, r3, #4
 800425c:	6713      	str	r3, [r2, #112]	@ 0x70
 800425e:	4b5e      	ldr	r3, [pc, #376]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 8004260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004262:	4a5d      	ldr	r2, [pc, #372]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 8004264:	f043 0301 	orr.w	r3, r3, #1
 8004268:	6713      	str	r3, [r2, #112]	@ 0x70
 800426a:	e00b      	b.n	8004284 <HAL_RCC_OscConfig+0x324>
 800426c:	4b5a      	ldr	r3, [pc, #360]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004270:	4a59      	ldr	r2, [pc, #356]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 8004272:	f023 0301 	bic.w	r3, r3, #1
 8004276:	6713      	str	r3, [r2, #112]	@ 0x70
 8004278:	4b57      	ldr	r3, [pc, #348]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800427c:	4a56      	ldr	r2, [pc, #344]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 800427e:	f023 0304 	bic.w	r3, r3, #4
 8004282:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d015      	beq.n	80042b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fd fba4 	bl	80019d8 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004292:	e00a      	b.n	80042aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004294:	f7fd fba0 	bl	80019d8 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e0d7      	b.n	800445a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042aa:	4b4b      	ldr	r3, [pc, #300]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0ee      	beq.n	8004294 <HAL_RCC_OscConfig+0x334>
 80042b6:	e014      	b.n	80042e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b8:	f7fd fb8e 	bl	80019d8 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042be:	e00a      	b.n	80042d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c0:	f7fd fb8a 	bl	80019d8 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e0c1      	b.n	800445a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d6:	4b40      	ldr	r3, [pc, #256]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1ee      	bne.n	80042c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042e2:	7dfb      	ldrb	r3, [r7, #23]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d105      	bne.n	80042f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e8:	4b3b      	ldr	r3, [pc, #236]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 80042ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ec:	4a3a      	ldr	r2, [pc, #232]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 80042ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80ad 	beq.w	8004458 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042fe:	4b36      	ldr	r3, [pc, #216]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	2b08      	cmp	r3, #8
 8004308:	d060      	beq.n	80043cc <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d145      	bne.n	800439e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004312:	4b33      	ldr	r3, [pc, #204]	@ (80043e0 <HAL_RCC_OscConfig+0x480>)
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004318:	f7fd fb5e 	bl	80019d8 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004320:	f7fd fb5a 	bl	80019d8 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e093      	b.n	800445a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004332:	4b29      	ldr	r3, [pc, #164]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69da      	ldr	r2, [r3, #28]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434c:	019b      	lsls	r3, r3, #6
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004354:	085b      	lsrs	r3, r3, #1
 8004356:	3b01      	subs	r3, #1
 8004358:	041b      	lsls	r3, r3, #16
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004360:	061b      	lsls	r3, r3, #24
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004368:	071b      	lsls	r3, r3, #28
 800436a:	491b      	ldr	r1, [pc, #108]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 800436c:	4313      	orrs	r3, r2
 800436e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004370:	4b1b      	ldr	r3, [pc, #108]	@ (80043e0 <HAL_RCC_OscConfig+0x480>)
 8004372:	2201      	movs	r2, #1
 8004374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004376:	f7fd fb2f 	bl	80019d8 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437e:	f7fd fb2b 	bl	80019d8 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e064      	b.n	800445a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004390:	4b11      	ldr	r3, [pc, #68]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f0      	beq.n	800437e <HAL_RCC_OscConfig+0x41e>
 800439c:	e05c      	b.n	8004458 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439e:	4b10      	ldr	r3, [pc, #64]	@ (80043e0 <HAL_RCC_OscConfig+0x480>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7fd fb18 	bl	80019d8 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ac:	f7fd fb14 	bl	80019d8 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e04d      	b.n	800445a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043be:	4b06      	ldr	r3, [pc, #24]	@ (80043d8 <HAL_RCC_OscConfig+0x478>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x44c>
 80043ca:	e045      	b.n	8004458 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d107      	bne.n	80043e4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e040      	b.n	800445a <HAL_RCC_OscConfig+0x4fa>
 80043d8:	40023800 	.word	0x40023800
 80043dc:	40007000 	.word	0x40007000
 80043e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004464 <HAL_RCC_OscConfig+0x504>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d030      	beq.n	8004454 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d129      	bne.n	8004454 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440a:	429a      	cmp	r2, r3
 800440c:	d122      	bne.n	8004454 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004414:	4013      	ands	r3, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800441a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800441c:	4293      	cmp	r3, r2
 800441e:	d119      	bne.n	8004454 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442a:	085b      	lsrs	r3, r3, #1
 800442c:	3b01      	subs	r3, #1
 800442e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004430:	429a      	cmp	r2, r3
 8004432:	d10f      	bne.n	8004454 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004440:	429a      	cmp	r2, r3
 8004442:	d107      	bne.n	8004454 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004450:	429a      	cmp	r2, r3
 8004452:	d001      	beq.n	8004458 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40023800 	.word	0x40023800

08004468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e041      	b.n	80044fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fd f80a 	bl	80014a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4619      	mov	r1, r3
 80044a6:	4610      	mov	r0, r2
 80044a8:	f000 faac 	bl	8004a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b01      	cmp	r3, #1
 800451a:	d001      	beq.n	8004520 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e04e      	b.n	80045be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a23      	ldr	r2, [pc, #140]	@ (80045cc <HAL_TIM_Base_Start_IT+0xc4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d022      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x80>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800454a:	d01d      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x80>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1f      	ldr	r2, [pc, #124]	@ (80045d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d018      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x80>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1e      	ldr	r2, [pc, #120]	@ (80045d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d013      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x80>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1c      	ldr	r2, [pc, #112]	@ (80045d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00e      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x80>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1b      	ldr	r2, [pc, #108]	@ (80045dc <HAL_TIM_Base_Start_IT+0xd4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d009      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x80>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a19      	ldr	r2, [pc, #100]	@ (80045e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x80>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a18      	ldr	r2, [pc, #96]	@ (80045e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d111      	bne.n	80045ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b06      	cmp	r3, #6
 8004598:	d010      	beq.n	80045bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 0201 	orr.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045aa:	e007      	b.n	80045bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0201 	orr.w	r2, r2, #1
 80045ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40010000 	.word	0x40010000
 80045d0:	40000400 	.word	0x40000400
 80045d4:	40000800 	.word	0x40000800
 80045d8:	40000c00 	.word	0x40000c00
 80045dc:	40010400 	.word	0x40010400
 80045e0:	40014000 	.word	0x40014000
 80045e4:	40001800 	.word	0x40001800

080045e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6a1a      	ldr	r2, [r3, #32]
 8004606:	f241 1311 	movw	r3, #4369	@ 0x1111
 800460a:	4013      	ands	r3, r2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10f      	bne.n	8004630 <HAL_TIM_Base_Stop_IT+0x48>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6a1a      	ldr	r2, [r3, #32]
 8004616:	f240 4344 	movw	r3, #1092	@ 0x444
 800461a:	4013      	ands	r3, r2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d107      	bne.n	8004630 <HAL_TIM_Base_Stop_IT+0x48>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0201 	bic.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b084      	sub	sp, #16
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d020      	beq.n	80046aa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d01b      	beq.n	80046aa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f06f 0202 	mvn.w	r2, #2
 800467a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f999 	bl	80049c8 <HAL_TIM_IC_CaptureCallback>
 8004696:	e005      	b.n	80046a4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f98b 	bl	80049b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f99c 	bl	80049dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d020      	beq.n	80046f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d01b      	beq.n	80046f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f06f 0204 	mvn.w	r2, #4
 80046c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f973 	bl	80049c8 <HAL_TIM_IC_CaptureCallback>
 80046e2:	e005      	b.n	80046f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f965 	bl	80049b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f976 	bl	80049dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d020      	beq.n	8004742 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	d01b      	beq.n	8004742 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f06f 0208 	mvn.w	r2, #8
 8004712:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2204      	movs	r2, #4
 8004718:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f94d 	bl	80049c8 <HAL_TIM_IC_CaptureCallback>
 800472e:	e005      	b.n	800473c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f93f 	bl	80049b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f950 	bl	80049dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f003 0310 	and.w	r3, r3, #16
 8004748:	2b00      	cmp	r3, #0
 800474a:	d020      	beq.n	800478e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	2b00      	cmp	r3, #0
 8004754:	d01b      	beq.n	800478e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f06f 0210 	mvn.w	r2, #16
 800475e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2208      	movs	r2, #8
 8004764:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f927 	bl	80049c8 <HAL_TIM_IC_CaptureCallback>
 800477a:	e005      	b.n	8004788 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f919 	bl	80049b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f92a 	bl	80049dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00c      	beq.n	80047b2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d007      	beq.n	80047b2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f06f 0201 	mvn.w	r2, #1
 80047aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7fb ff5d 	bl	800066c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00c      	beq.n	80047d6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80047ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fae3 	bl	8004d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00c      	beq.n	80047fa <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d007      	beq.n	80047fa <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f8fb 	bl	80049f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00c      	beq.n	800481e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b00      	cmp	r3, #0
 800480c:	d007      	beq.n	800481e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f06f 0220 	mvn.w	r2, #32
 8004816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fab5 	bl	8004d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800481e:	bf00      	nop
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b084      	sub	sp, #16
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_TIM_ConfigClockSource+0x1c>
 800483e:	2302      	movs	r3, #2
 8004840:	e0b4      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x186>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004860:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004868:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800487a:	d03e      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0xd4>
 800487c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004880:	f200 8087 	bhi.w	8004992 <HAL_TIM_ConfigClockSource+0x16c>
 8004884:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004888:	f000 8086 	beq.w	8004998 <HAL_TIM_ConfigClockSource+0x172>
 800488c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004890:	d87f      	bhi.n	8004992 <HAL_TIM_ConfigClockSource+0x16c>
 8004892:	2b70      	cmp	r3, #112	@ 0x70
 8004894:	d01a      	beq.n	80048cc <HAL_TIM_ConfigClockSource+0xa6>
 8004896:	2b70      	cmp	r3, #112	@ 0x70
 8004898:	d87b      	bhi.n	8004992 <HAL_TIM_ConfigClockSource+0x16c>
 800489a:	2b60      	cmp	r3, #96	@ 0x60
 800489c:	d050      	beq.n	8004940 <HAL_TIM_ConfigClockSource+0x11a>
 800489e:	2b60      	cmp	r3, #96	@ 0x60
 80048a0:	d877      	bhi.n	8004992 <HAL_TIM_ConfigClockSource+0x16c>
 80048a2:	2b50      	cmp	r3, #80	@ 0x50
 80048a4:	d03c      	beq.n	8004920 <HAL_TIM_ConfigClockSource+0xfa>
 80048a6:	2b50      	cmp	r3, #80	@ 0x50
 80048a8:	d873      	bhi.n	8004992 <HAL_TIM_ConfigClockSource+0x16c>
 80048aa:	2b40      	cmp	r3, #64	@ 0x40
 80048ac:	d058      	beq.n	8004960 <HAL_TIM_ConfigClockSource+0x13a>
 80048ae:	2b40      	cmp	r3, #64	@ 0x40
 80048b0:	d86f      	bhi.n	8004992 <HAL_TIM_ConfigClockSource+0x16c>
 80048b2:	2b30      	cmp	r3, #48	@ 0x30
 80048b4:	d064      	beq.n	8004980 <HAL_TIM_ConfigClockSource+0x15a>
 80048b6:	2b30      	cmp	r3, #48	@ 0x30
 80048b8:	d86b      	bhi.n	8004992 <HAL_TIM_ConfigClockSource+0x16c>
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d060      	beq.n	8004980 <HAL_TIM_ConfigClockSource+0x15a>
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d867      	bhi.n	8004992 <HAL_TIM_ConfigClockSource+0x16c>
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d05c      	beq.n	8004980 <HAL_TIM_ConfigClockSource+0x15a>
 80048c6:	2b10      	cmp	r3, #16
 80048c8:	d05a      	beq.n	8004980 <HAL_TIM_ConfigClockSource+0x15a>
 80048ca:	e062      	b.n	8004992 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048dc:	f000 f9b8 	bl	8004c50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	609a      	str	r2, [r3, #8]
      break;
 80048f8:	e04f      	b.n	800499a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800490a:	f000 f9a1 	bl	8004c50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800491c:	609a      	str	r2, [r3, #8]
      break;
 800491e:	e03c      	b.n	800499a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800492c:	461a      	mov	r2, r3
 800492e:	f000 f915 	bl	8004b5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2150      	movs	r1, #80	@ 0x50
 8004938:	4618      	mov	r0, r3
 800493a:	f000 f96e 	bl	8004c1a <TIM_ITRx_SetConfig>
      break;
 800493e:	e02c      	b.n	800499a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800494c:	461a      	mov	r2, r3
 800494e:	f000 f934 	bl	8004bba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2160      	movs	r1, #96	@ 0x60
 8004958:	4618      	mov	r0, r3
 800495a:	f000 f95e 	bl	8004c1a <TIM_ITRx_SetConfig>
      break;
 800495e:	e01c      	b.n	800499a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800496c:	461a      	mov	r2, r3
 800496e:	f000 f8f5 	bl	8004b5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2140      	movs	r1, #64	@ 0x40
 8004978:	4618      	mov	r0, r3
 800497a:	f000 f94e 	bl	8004c1a <TIM_ITRx_SetConfig>
      break;
 800497e:	e00c      	b.n	800499a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4619      	mov	r1, r3
 800498a:	4610      	mov	r0, r2
 800498c:	f000 f945 	bl	8004c1a <TIM_ITRx_SetConfig>
      break;
 8004990:	e003      	b.n	800499a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	73fb      	strb	r3, [r7, #15]
      break;
 8004996:	e000      	b.n	800499a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004998:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a46      	ldr	r2, [pc, #280]	@ (8004b30 <TIM_Base_SetConfig+0x12c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d013      	beq.n	8004a44 <TIM_Base_SetConfig+0x40>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a22:	d00f      	beq.n	8004a44 <TIM_Base_SetConfig+0x40>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a43      	ldr	r2, [pc, #268]	@ (8004b34 <TIM_Base_SetConfig+0x130>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d00b      	beq.n	8004a44 <TIM_Base_SetConfig+0x40>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a42      	ldr	r2, [pc, #264]	@ (8004b38 <TIM_Base_SetConfig+0x134>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d007      	beq.n	8004a44 <TIM_Base_SetConfig+0x40>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a41      	ldr	r2, [pc, #260]	@ (8004b3c <TIM_Base_SetConfig+0x138>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d003      	beq.n	8004a44 <TIM_Base_SetConfig+0x40>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a40      	ldr	r2, [pc, #256]	@ (8004b40 <TIM_Base_SetConfig+0x13c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d108      	bne.n	8004a56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a35      	ldr	r2, [pc, #212]	@ (8004b30 <TIM_Base_SetConfig+0x12c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d02b      	beq.n	8004ab6 <TIM_Base_SetConfig+0xb2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a64:	d027      	beq.n	8004ab6 <TIM_Base_SetConfig+0xb2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a32      	ldr	r2, [pc, #200]	@ (8004b34 <TIM_Base_SetConfig+0x130>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d023      	beq.n	8004ab6 <TIM_Base_SetConfig+0xb2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a31      	ldr	r2, [pc, #196]	@ (8004b38 <TIM_Base_SetConfig+0x134>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d01f      	beq.n	8004ab6 <TIM_Base_SetConfig+0xb2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a30      	ldr	r2, [pc, #192]	@ (8004b3c <TIM_Base_SetConfig+0x138>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d01b      	beq.n	8004ab6 <TIM_Base_SetConfig+0xb2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a2f      	ldr	r2, [pc, #188]	@ (8004b40 <TIM_Base_SetConfig+0x13c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d017      	beq.n	8004ab6 <TIM_Base_SetConfig+0xb2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a2e      	ldr	r2, [pc, #184]	@ (8004b44 <TIM_Base_SetConfig+0x140>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d013      	beq.n	8004ab6 <TIM_Base_SetConfig+0xb2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a2d      	ldr	r2, [pc, #180]	@ (8004b48 <TIM_Base_SetConfig+0x144>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00f      	beq.n	8004ab6 <TIM_Base_SetConfig+0xb2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a2c      	ldr	r2, [pc, #176]	@ (8004b4c <TIM_Base_SetConfig+0x148>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00b      	beq.n	8004ab6 <TIM_Base_SetConfig+0xb2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a2b      	ldr	r2, [pc, #172]	@ (8004b50 <TIM_Base_SetConfig+0x14c>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d007      	beq.n	8004ab6 <TIM_Base_SetConfig+0xb2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a2a      	ldr	r2, [pc, #168]	@ (8004b54 <TIM_Base_SetConfig+0x150>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d003      	beq.n	8004ab6 <TIM_Base_SetConfig+0xb2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a29      	ldr	r2, [pc, #164]	@ (8004b58 <TIM_Base_SetConfig+0x154>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d108      	bne.n	8004ac8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a10      	ldr	r2, [pc, #64]	@ (8004b30 <TIM_Base_SetConfig+0x12c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d003      	beq.n	8004afc <TIM_Base_SetConfig+0xf8>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a12      	ldr	r2, [pc, #72]	@ (8004b40 <TIM_Base_SetConfig+0x13c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d103      	bne.n	8004b04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d105      	bne.n	8004b22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f023 0201 	bic.w	r2, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	611a      	str	r2, [r3, #16]
  }
}
 8004b22:	bf00      	nop
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40010000 	.word	0x40010000
 8004b34:	40000400 	.word	0x40000400
 8004b38:	40000800 	.word	0x40000800
 8004b3c:	40000c00 	.word	0x40000c00
 8004b40:	40010400 	.word	0x40010400
 8004b44:	40014000 	.word	0x40014000
 8004b48:	40014400 	.word	0x40014400
 8004b4c:	40014800 	.word	0x40014800
 8004b50:	40001800 	.word	0x40001800
 8004b54:	40001c00 	.word	0x40001c00
 8004b58:	40002000 	.word	0x40002000

08004b5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	f023 0201 	bic.w	r2, r3, #1
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f023 030a 	bic.w	r3, r3, #10
 8004b98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	621a      	str	r2, [r3, #32]
}
 8004bae:	bf00      	nop
 8004bb0:	371c      	adds	r7, #28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b087      	sub	sp, #28
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	f023 0210 	bic.w	r2, r3, #16
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004be4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	031b      	lsls	r3, r3, #12
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004bf6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	621a      	str	r2, [r3, #32]
}
 8004c0e:	bf00      	nop
 8004c10:	371c      	adds	r7, #28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b085      	sub	sp, #20
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f043 0307 	orr.w	r3, r3, #7
 8004c3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	609a      	str	r2, [r3, #8]
}
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	021a      	lsls	r2, r3, #8
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	609a      	str	r2, [r3, #8]
}
 8004c84:	bf00      	nop
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e05a      	b.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a21      	ldr	r2, [pc, #132]	@ (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d022      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf4:	d01d      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1d      	ldr	r2, [pc, #116]	@ (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d018      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1b      	ldr	r2, [pc, #108]	@ (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d013      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00e      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a18      	ldr	r2, [pc, #96]	@ (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d009      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a17      	ldr	r2, [pc, #92]	@ (8004d80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d004      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a15      	ldr	r2, [pc, #84]	@ (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d10c      	bne.n	8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40010000 	.word	0x40010000
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800
 8004d78:	40000c00 	.word	0x40000c00
 8004d7c:	40010400 	.word	0x40010400
 8004d80:	40014000 	.word	0x40014000
 8004d84:	40001800 	.word	0x40001800

08004d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e042      	b.n	8004e48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fc fbaa 	bl	8001530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2224      	movs	r2, #36	@ 0x24
 8004de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 fd69 	bl	80058cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695a      	ldr	r2, [r3, #20]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08a      	sub	sp, #40	@ 0x28
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d175      	bne.n	8004f5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <HAL_UART_Transmit+0x2c>
 8004e76:	88fb      	ldrh	r3, [r7, #6]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e06e      	b.n	8004f5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2221      	movs	r2, #33	@ 0x21
 8004e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e8e:	f7fc fda3 	bl	80019d8 <HAL_GetTick>
 8004e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	88fa      	ldrh	r2, [r7, #6]
 8004e98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	88fa      	ldrh	r2, [r7, #6]
 8004e9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ea8:	d108      	bne.n	8004ebc <HAL_UART_Transmit+0x6c>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d104      	bne.n	8004ebc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	61bb      	str	r3, [r7, #24]
 8004eba:	e003      	b.n	8004ec4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ec4:	e02e      	b.n	8004f24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2180      	movs	r1, #128	@ 0x80
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 fb05 	bl	80054e0 <UART_WaitOnFlagUntilTimeout>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e03a      	b.n	8004f5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10b      	bne.n	8004f06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004efc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	3302      	adds	r3, #2
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	e007      	b.n	8004f16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	781a      	ldrb	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	3301      	adds	r3, #1
 8004f14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1cb      	bne.n	8004ec6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2200      	movs	r2, #0
 8004f36:	2140      	movs	r1, #64	@ 0x40
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 fad1 	bl	80054e0 <UART_WaitOnFlagUntilTimeout>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e006      	b.n	8004f5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	e000      	b.n	8004f5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f5c:	2302      	movs	r3, #2
  }
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3720      	adds	r7, #32
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b0ba      	sub	sp, #232	@ 0xe8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004fa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10f      	bne.n	8004fce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d009      	beq.n	8004fce <HAL_UART_IRQHandler+0x66>
 8004fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fbc2 	bl	8005750 <UART_Receive_IT>
      return;
 8004fcc:	e25b      	b.n	8005486 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 80de 	beq.w	8005194 <HAL_UART_IRQHandler+0x22c>
 8004fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d106      	bne.n	8004ff2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fe8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 80d1 	beq.w	8005194 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00b      	beq.n	8005016 <HAL_UART_IRQHandler+0xae>
 8004ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005006:	2b00      	cmp	r3, #0
 8005008:	d005      	beq.n	8005016 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500e:	f043 0201 	orr.w	r2, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800501a:	f003 0304 	and.w	r3, r3, #4
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00b      	beq.n	800503a <HAL_UART_IRQHandler+0xd2>
 8005022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005032:	f043 0202 	orr.w	r2, r3, #2
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800503a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00b      	beq.n	800505e <HAL_UART_IRQHandler+0xf6>
 8005046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005056:	f043 0204 	orr.w	r2, r3, #4
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800505e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d011      	beq.n	800508e <HAL_UART_IRQHandler+0x126>
 800506a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d105      	bne.n	8005082 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d005      	beq.n	800508e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005086:	f043 0208 	orr.w	r2, r3, #8
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 81f2 	beq.w	800547c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800509c:	f003 0320 	and.w	r3, r3, #32
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d008      	beq.n	80050b6 <HAL_UART_IRQHandler+0x14e>
 80050a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fb4d 	bl	8005750 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c0:	2b40      	cmp	r3, #64	@ 0x40
 80050c2:	bf0c      	ite	eq
 80050c4:	2301      	moveq	r3, #1
 80050c6:	2300      	movne	r3, #0
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d103      	bne.n	80050e2 <HAL_UART_IRQHandler+0x17a>
 80050da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d04f      	beq.n	8005182 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 fa55 	bl	8005592 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f2:	2b40      	cmp	r3, #64	@ 0x40
 80050f4:	d141      	bne.n	800517a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3314      	adds	r3, #20
 80050fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005100:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800510c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005110:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005114:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3314      	adds	r3, #20
 800511e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005122:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005126:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800512e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800513a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1d9      	bne.n	80050f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005146:	2b00      	cmp	r3, #0
 8005148:	d013      	beq.n	8005172 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514e:	4a7e      	ldr	r2, [pc, #504]	@ (8005348 <HAL_UART_IRQHandler+0x3e0>)
 8005150:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005156:	4618      	mov	r0, r3
 8005158:	f7fd ff01 	bl	8002f5e <HAL_DMA_Abort_IT>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d016      	beq.n	8005190 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800516c:	4610      	mov	r0, r2
 800516e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005170:	e00e      	b.n	8005190 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f99e 	bl	80054b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005178:	e00a      	b.n	8005190 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f99a 	bl	80054b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005180:	e006      	b.n	8005190 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f996 	bl	80054b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800518e:	e175      	b.n	800547c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005190:	bf00      	nop
    return;
 8005192:	e173      	b.n	800547c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005198:	2b01      	cmp	r3, #1
 800519a:	f040 814f 	bne.w	800543c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800519e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051a2:	f003 0310 	and.w	r3, r3, #16
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 8148 	beq.w	800543c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8141 	beq.w	800543c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051ba:	2300      	movs	r3, #0
 80051bc:	60bb      	str	r3, [r7, #8]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	60bb      	str	r3, [r7, #8]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	60bb      	str	r3, [r7, #8]
 80051ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051da:	2b40      	cmp	r3, #64	@ 0x40
 80051dc:	f040 80b6 	bne.w	800534c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 8145 	beq.w	8005480 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051fe:	429a      	cmp	r2, r3
 8005200:	f080 813e 	bcs.w	8005480 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800520a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005216:	f000 8088 	beq.w	800532a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	330c      	adds	r3, #12
 8005220:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005230:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005234:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005238:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	330c      	adds	r3, #12
 8005242:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005246:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800524a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005252:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005256:	e841 2300 	strex	r3, r2, [r1]
 800525a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800525e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1d9      	bne.n	800521a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3314      	adds	r3, #20
 800526c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005276:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005278:	f023 0301 	bic.w	r3, r3, #1
 800527c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3314      	adds	r3, #20
 8005286:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800528a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800528e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005292:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005296:	e841 2300 	strex	r3, r2, [r1]
 800529a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800529c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e1      	bne.n	8005266 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3314      	adds	r3, #20
 80052a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052ac:	e853 3f00 	ldrex	r3, [r3]
 80052b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3314      	adds	r3, #20
 80052c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e3      	bne.n	80052a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	330c      	adds	r3, #12
 80052ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052f2:	e853 3f00 	ldrex	r3, [r3]
 80052f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052fa:	f023 0310 	bic.w	r3, r3, #16
 80052fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	330c      	adds	r3, #12
 8005308:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800530c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800530e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005310:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005312:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005314:	e841 2300 	strex	r3, r2, [r1]
 8005318:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800531a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e3      	bne.n	80052e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005324:	4618      	mov	r0, r3
 8005326:	f7fd fdaa 	bl	8002e7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005338:	b29b      	uxth	r3, r3
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	b29b      	uxth	r3, r3
 800533e:	4619      	mov	r1, r3
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f8c1 	bl	80054c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005346:	e09b      	b.n	8005480 <HAL_UART_IRQHandler+0x518>
 8005348:	08005659 	.word	0x08005659
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005354:	b29b      	uxth	r3, r3
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005360:	b29b      	uxth	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 808e 	beq.w	8005484 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005368:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 8089 	beq.w	8005484 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	330c      	adds	r3, #12
 8005378:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005384:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005388:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	330c      	adds	r3, #12
 8005392:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005396:	647a      	str	r2, [r7, #68]	@ 0x44
 8005398:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800539c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e3      	bne.n	8005372 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3314      	adds	r3, #20
 80053b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	623b      	str	r3, [r7, #32]
   return(result);
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	f023 0301 	bic.w	r3, r3, #1
 80053c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3314      	adds	r3, #20
 80053ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80053d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1e3      	bne.n	80053aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	330c      	adds	r3, #12
 80053f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	e853 3f00 	ldrex	r3, [r3]
 80053fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0310 	bic.w	r3, r3, #16
 8005406:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	330c      	adds	r3, #12
 8005410:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005414:	61fa      	str	r2, [r7, #28]
 8005416:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	69b9      	ldr	r1, [r7, #24]
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	e841 2300 	strex	r3, r2, [r1]
 8005420:	617b      	str	r3, [r7, #20]
   return(result);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e3      	bne.n	80053f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800542e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f847 	bl	80054c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800543a:	e023      	b.n	8005484 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800543c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005444:	2b00      	cmp	r3, #0
 8005446:	d009      	beq.n	800545c <HAL_UART_IRQHandler+0x4f4>
 8005448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800544c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f913 	bl	8005680 <UART_Transmit_IT>
    return;
 800545a:	e014      	b.n	8005486 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800545c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00e      	beq.n	8005486 <HAL_UART_IRQHandler+0x51e>
 8005468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800546c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f953 	bl	8005720 <UART_EndTransmit_IT>
    return;
 800547a:	e004      	b.n	8005486 <HAL_UART_IRQHandler+0x51e>
    return;
 800547c:	bf00      	nop
 800547e:	e002      	b.n	8005486 <HAL_UART_IRQHandler+0x51e>
      return;
 8005480:	bf00      	nop
 8005482:	e000      	b.n	8005486 <HAL_UART_IRQHandler+0x51e>
      return;
 8005484:	bf00      	nop
  }
}
 8005486:	37e8      	adds	r7, #232	@ 0xe8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	603b      	str	r3, [r7, #0]
 80054ec:	4613      	mov	r3, r2
 80054ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054f0:	e03b      	b.n	800556a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f8:	d037      	beq.n	800556a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fa:	f7fc fa6d 	bl	80019d8 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	6a3a      	ldr	r2, [r7, #32]
 8005506:	429a      	cmp	r2, r3
 8005508:	d302      	bcc.n	8005510 <UART_WaitOnFlagUntilTimeout+0x30>
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e03a      	b.n	800558a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	2b00      	cmp	r3, #0
 8005520:	d023      	beq.n	800556a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b80      	cmp	r3, #128	@ 0x80
 8005526:	d020      	beq.n	800556a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b40      	cmp	r3, #64	@ 0x40
 800552c:	d01d      	beq.n	800556a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0308 	and.w	r3, r3, #8
 8005538:	2b08      	cmp	r3, #8
 800553a:	d116      	bne.n	800556a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 f81d 	bl	8005592 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2208      	movs	r2, #8
 800555c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e00f      	b.n	800558a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4013      	ands	r3, r2
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	429a      	cmp	r2, r3
 8005578:	bf0c      	ite	eq
 800557a:	2301      	moveq	r3, #1
 800557c:	2300      	movne	r3, #0
 800557e:	b2db      	uxtb	r3, r3
 8005580:	461a      	mov	r2, r3
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	429a      	cmp	r2, r3
 8005586:	d0b4      	beq.n	80054f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005592:	b480      	push	{r7}
 8005594:	b095      	sub	sp, #84	@ 0x54
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	330c      	adds	r3, #12
 80055a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	330c      	adds	r3, #12
 80055b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055ba:	643a      	str	r2, [r7, #64]	@ 0x40
 80055bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e5      	bne.n	800559a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3314      	adds	r3, #20
 80055d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	f023 0301 	bic.w	r3, r3, #1
 80055e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3314      	adds	r3, #20
 80055ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e5      	bne.n	80055ce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005606:	2b01      	cmp	r3, #1
 8005608:	d119      	bne.n	800563e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	330c      	adds	r3, #12
 8005610:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	e853 3f00 	ldrex	r3, [r3]
 8005618:	60bb      	str	r3, [r7, #8]
   return(result);
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f023 0310 	bic.w	r3, r3, #16
 8005620:	647b      	str	r3, [r7, #68]	@ 0x44
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	330c      	adds	r3, #12
 8005628:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800562a:	61ba      	str	r2, [r7, #24]
 800562c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	6979      	ldr	r1, [r7, #20]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	613b      	str	r3, [r7, #16]
   return(result);
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e5      	bne.n	800560a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800564c:	bf00      	nop
 800564e:	3754      	adds	r7, #84	@ 0x54
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005664:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f7ff ff1e 	bl	80054b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005678:	bf00      	nop
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b21      	cmp	r3, #33	@ 0x21
 8005692:	d13e      	bne.n	8005712 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800569c:	d114      	bne.n	80056c8 <UART_Transmit_IT+0x48>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d110      	bne.n	80056c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	1c9a      	adds	r2, r3, #2
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	621a      	str	r2, [r3, #32]
 80056c6:	e008      	b.n	80056da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	1c59      	adds	r1, r3, #1
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6211      	str	r1, [r2, #32]
 80056d2:	781a      	ldrb	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	4619      	mov	r1, r3
 80056e8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10f      	bne.n	800570e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800570c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	e000      	b.n	8005714 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005712:	2302      	movs	r3, #2
  }
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005736:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2220      	movs	r2, #32
 800573c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff fea3 	bl	800548c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08c      	sub	sp, #48	@ 0x30
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b22      	cmp	r3, #34	@ 0x22
 8005762:	f040 80ae 	bne.w	80058c2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800576e:	d117      	bne.n	80057a0 <UART_Receive_IT+0x50>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d113      	bne.n	80057a0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005778:	2300      	movs	r3, #0
 800577a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005780:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	b29b      	uxth	r3, r3
 800578a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578e:	b29a      	uxth	r2, r3
 8005790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005792:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005798:	1c9a      	adds	r2, r3, #2
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	629a      	str	r2, [r3, #40]	@ 0x28
 800579e:	e026      	b.n	80057ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80057a6:	2300      	movs	r3, #0
 80057a8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b2:	d007      	beq.n	80057c4 <UART_Receive_IT+0x74>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10a      	bne.n	80057d2 <UART_Receive_IT+0x82>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d106      	bne.n	80057d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ce:	701a      	strb	r2, [r3, #0]
 80057d0:	e008      	b.n	80057e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	4619      	mov	r1, r3
 80057fc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d15d      	bne.n	80058be <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0220 	bic.w	r2, r2, #32
 8005810:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005820:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695a      	ldr	r2, [r3, #20]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0201 	bic.w	r2, r2, #1
 8005830:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2220      	movs	r2, #32
 8005836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005844:	2b01      	cmp	r3, #1
 8005846:	d135      	bne.n	80058b4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	330c      	adds	r3, #12
 8005854:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	613b      	str	r3, [r7, #16]
   return(result);
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f023 0310 	bic.w	r3, r3, #16
 8005864:	627b      	str	r3, [r7, #36]	@ 0x24
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	330c      	adds	r3, #12
 800586c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800586e:	623a      	str	r2, [r7, #32]
 8005870:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	69f9      	ldr	r1, [r7, #28]
 8005874:	6a3a      	ldr	r2, [r7, #32]
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	61bb      	str	r3, [r7, #24]
   return(result);
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e5      	bne.n	800584e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0310 	and.w	r3, r3, #16
 800588c:	2b10      	cmp	r3, #16
 800588e:	d10a      	bne.n	80058a6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058aa:	4619      	mov	r1, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff fe0b 	bl	80054c8 <HAL_UARTEx_RxEventCallback>
 80058b2:	e002      	b.n	80058ba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff fdf3 	bl	80054a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	e002      	b.n	80058c4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	e000      	b.n	80058c4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80058c2:	2302      	movs	r3, #2
  }
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3730      	adds	r7, #48	@ 0x30
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d0:	b0c0      	sub	sp, #256	@ 0x100
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e8:	68d9      	ldr	r1, [r3, #12]
 80058ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	ea40 0301 	orr.w	r3, r0, r1
 80058f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	431a      	orrs	r2, r3
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	431a      	orrs	r2, r3
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005924:	f021 010c 	bic.w	r1, r1, #12
 8005928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005932:	430b      	orrs	r3, r1
 8005934:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005946:	6999      	ldr	r1, [r3, #24]
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	ea40 0301 	orr.w	r3, r0, r1
 8005952:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4b8f      	ldr	r3, [pc, #572]	@ (8005b98 <UART_SetConfig+0x2cc>)
 800595c:	429a      	cmp	r2, r3
 800595e:	d005      	beq.n	800596c <UART_SetConfig+0xa0>
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	4b8d      	ldr	r3, [pc, #564]	@ (8005b9c <UART_SetConfig+0x2d0>)
 8005968:	429a      	cmp	r2, r3
 800596a:	d104      	bne.n	8005976 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800596c:	f7fe fae4 	bl	8003f38 <HAL_RCC_GetPCLK2Freq>
 8005970:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005974:	e003      	b.n	800597e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005976:	f7fe facb 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
 800597a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800597e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005988:	f040 810c 	bne.w	8005ba4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800598c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005990:	2200      	movs	r2, #0
 8005992:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005996:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800599a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800599e:	4622      	mov	r2, r4
 80059a0:	462b      	mov	r3, r5
 80059a2:	1891      	adds	r1, r2, r2
 80059a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059a6:	415b      	adcs	r3, r3
 80059a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80059ae:	4621      	mov	r1, r4
 80059b0:	eb12 0801 	adds.w	r8, r2, r1
 80059b4:	4629      	mov	r1, r5
 80059b6:	eb43 0901 	adc.w	r9, r3, r1
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059ce:	4690      	mov	r8, r2
 80059d0:	4699      	mov	r9, r3
 80059d2:	4623      	mov	r3, r4
 80059d4:	eb18 0303 	adds.w	r3, r8, r3
 80059d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059dc:	462b      	mov	r3, r5
 80059de:	eb49 0303 	adc.w	r3, r9, r3
 80059e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80059f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059fa:	460b      	mov	r3, r1
 80059fc:	18db      	adds	r3, r3, r3
 80059fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a00:	4613      	mov	r3, r2
 8005a02:	eb42 0303 	adc.w	r3, r2, r3
 8005a06:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a10:	f7fa fbf8 	bl	8000204 <__aeabi_uldivmod>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4b61      	ldr	r3, [pc, #388]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	011c      	lsls	r4, r3, #4
 8005a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a34:	4642      	mov	r2, r8
 8005a36:	464b      	mov	r3, r9
 8005a38:	1891      	adds	r1, r2, r2
 8005a3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a3c:	415b      	adcs	r3, r3
 8005a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a44:	4641      	mov	r1, r8
 8005a46:	eb12 0a01 	adds.w	sl, r2, r1
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	eb43 0b01 	adc.w	fp, r3, r1
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a64:	4692      	mov	sl, r2
 8005a66:	469b      	mov	fp, r3
 8005a68:	4643      	mov	r3, r8
 8005a6a:	eb1a 0303 	adds.w	r3, sl, r3
 8005a6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a72:	464b      	mov	r3, r9
 8005a74:	eb4b 0303 	adc.w	r3, fp, r3
 8005a78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a90:	460b      	mov	r3, r1
 8005a92:	18db      	adds	r3, r3, r3
 8005a94:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a96:	4613      	mov	r3, r2
 8005a98:	eb42 0303 	adc.w	r3, r2, r3
 8005a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005aa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005aa6:	f7fa fbad 	bl	8000204 <__aeabi_uldivmod>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4611      	mov	r1, r2
 8005ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	2264      	movs	r2, #100	@ 0x64
 8005aba:	fb02 f303 	mul.w	r3, r2, r3
 8005abe:	1acb      	subs	r3, r1, r3
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005ac6:	4b36      	ldr	r3, [pc, #216]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005ac8:	fba3 2302 	umull	r2, r3, r3, r2
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ad4:	441c      	add	r4, r3
 8005ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ae0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ae4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ae8:	4642      	mov	r2, r8
 8005aea:	464b      	mov	r3, r9
 8005aec:	1891      	adds	r1, r2, r2
 8005aee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005af0:	415b      	adcs	r3, r3
 8005af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005af4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005af8:	4641      	mov	r1, r8
 8005afa:	1851      	adds	r1, r2, r1
 8005afc:	6339      	str	r1, [r7, #48]	@ 0x30
 8005afe:	4649      	mov	r1, r9
 8005b00:	414b      	adcs	r3, r1
 8005b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b10:	4659      	mov	r1, fp
 8005b12:	00cb      	lsls	r3, r1, #3
 8005b14:	4651      	mov	r1, sl
 8005b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b1a:	4651      	mov	r1, sl
 8005b1c:	00ca      	lsls	r2, r1, #3
 8005b1e:	4610      	mov	r0, r2
 8005b20:	4619      	mov	r1, r3
 8005b22:	4603      	mov	r3, r0
 8005b24:	4642      	mov	r2, r8
 8005b26:	189b      	adds	r3, r3, r2
 8005b28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b2c:	464b      	mov	r3, r9
 8005b2e:	460a      	mov	r2, r1
 8005b30:	eb42 0303 	adc.w	r3, r2, r3
 8005b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	18db      	adds	r3, r3, r3
 8005b50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b52:	4613      	mov	r3, r2
 8005b54:	eb42 0303 	adc.w	r3, r2, r3
 8005b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b62:	f7fa fb4f 	bl	8000204 <__aeabi_uldivmod>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	2164      	movs	r1, #100	@ 0x64
 8005b74:	fb01 f303 	mul.w	r3, r1, r3
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	3332      	adds	r3, #50	@ 0x32
 8005b7e:	4a08      	ldr	r2, [pc, #32]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005b80:	fba2 2303 	umull	r2, r3, r2, r3
 8005b84:	095b      	lsrs	r3, r3, #5
 8005b86:	f003 0207 	and.w	r2, r3, #7
 8005b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4422      	add	r2, r4
 8005b92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b94:	e106      	b.n	8005da4 <UART_SetConfig+0x4d8>
 8005b96:	bf00      	nop
 8005b98:	40011000 	.word	0x40011000
 8005b9c:	40011400 	.word	0x40011400
 8005ba0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005bae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005bb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005bb6:	4642      	mov	r2, r8
 8005bb8:	464b      	mov	r3, r9
 8005bba:	1891      	adds	r1, r2, r2
 8005bbc:	6239      	str	r1, [r7, #32]
 8005bbe:	415b      	adcs	r3, r3
 8005bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bc6:	4641      	mov	r1, r8
 8005bc8:	1854      	adds	r4, r2, r1
 8005bca:	4649      	mov	r1, r9
 8005bcc:	eb43 0501 	adc.w	r5, r3, r1
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	00eb      	lsls	r3, r5, #3
 8005bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bde:	00e2      	lsls	r2, r4, #3
 8005be0:	4614      	mov	r4, r2
 8005be2:	461d      	mov	r5, r3
 8005be4:	4643      	mov	r3, r8
 8005be6:	18e3      	adds	r3, r4, r3
 8005be8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005bec:	464b      	mov	r3, r9
 8005bee:	eb45 0303 	adc.w	r3, r5, r3
 8005bf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c12:	4629      	mov	r1, r5
 8005c14:	008b      	lsls	r3, r1, #2
 8005c16:	4621      	mov	r1, r4
 8005c18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	008a      	lsls	r2, r1, #2
 8005c20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c24:	f7fa faee 	bl	8000204 <__aeabi_uldivmod>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4b60      	ldr	r3, [pc, #384]	@ (8005db0 <UART_SetConfig+0x4e4>)
 8005c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c32:	095b      	lsrs	r3, r3, #5
 8005c34:	011c      	lsls	r4, r3, #4
 8005c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c48:	4642      	mov	r2, r8
 8005c4a:	464b      	mov	r3, r9
 8005c4c:	1891      	adds	r1, r2, r2
 8005c4e:	61b9      	str	r1, [r7, #24]
 8005c50:	415b      	adcs	r3, r3
 8005c52:	61fb      	str	r3, [r7, #28]
 8005c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c58:	4641      	mov	r1, r8
 8005c5a:	1851      	adds	r1, r2, r1
 8005c5c:	6139      	str	r1, [r7, #16]
 8005c5e:	4649      	mov	r1, r9
 8005c60:	414b      	adcs	r3, r1
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	f04f 0200 	mov.w	r2, #0
 8005c68:	f04f 0300 	mov.w	r3, #0
 8005c6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c70:	4659      	mov	r1, fp
 8005c72:	00cb      	lsls	r3, r1, #3
 8005c74:	4651      	mov	r1, sl
 8005c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c7a:	4651      	mov	r1, sl
 8005c7c:	00ca      	lsls	r2, r1, #3
 8005c7e:	4610      	mov	r0, r2
 8005c80:	4619      	mov	r1, r3
 8005c82:	4603      	mov	r3, r0
 8005c84:	4642      	mov	r2, r8
 8005c86:	189b      	adds	r3, r3, r2
 8005c88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c8c:	464b      	mov	r3, r9
 8005c8e:	460a      	mov	r2, r1
 8005c90:	eb42 0303 	adc.w	r3, r2, r3
 8005c94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ca2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	f04f 0300 	mov.w	r3, #0
 8005cac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005cb0:	4649      	mov	r1, r9
 8005cb2:	008b      	lsls	r3, r1, #2
 8005cb4:	4641      	mov	r1, r8
 8005cb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cba:	4641      	mov	r1, r8
 8005cbc:	008a      	lsls	r2, r1, #2
 8005cbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005cc2:	f7fa fa9f 	bl	8000204 <__aeabi_uldivmod>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4611      	mov	r1, r2
 8005ccc:	4b38      	ldr	r3, [pc, #224]	@ (8005db0 <UART_SetConfig+0x4e4>)
 8005cce:	fba3 2301 	umull	r2, r3, r3, r1
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	2264      	movs	r2, #100	@ 0x64
 8005cd6:	fb02 f303 	mul.w	r3, r2, r3
 8005cda:	1acb      	subs	r3, r1, r3
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	3332      	adds	r3, #50	@ 0x32
 8005ce0:	4a33      	ldr	r2, [pc, #204]	@ (8005db0 <UART_SetConfig+0x4e4>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cec:	441c      	add	r4, r3
 8005cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cf6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005cf8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005cfc:	4642      	mov	r2, r8
 8005cfe:	464b      	mov	r3, r9
 8005d00:	1891      	adds	r1, r2, r2
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	415b      	adcs	r3, r3
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d0c:	4641      	mov	r1, r8
 8005d0e:	1851      	adds	r1, r2, r1
 8005d10:	6039      	str	r1, [r7, #0]
 8005d12:	4649      	mov	r1, r9
 8005d14:	414b      	adcs	r3, r1
 8005d16:	607b      	str	r3, [r7, #4]
 8005d18:	f04f 0200 	mov.w	r2, #0
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d24:	4659      	mov	r1, fp
 8005d26:	00cb      	lsls	r3, r1, #3
 8005d28:	4651      	mov	r1, sl
 8005d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d2e:	4651      	mov	r1, sl
 8005d30:	00ca      	lsls	r2, r1, #3
 8005d32:	4610      	mov	r0, r2
 8005d34:	4619      	mov	r1, r3
 8005d36:	4603      	mov	r3, r0
 8005d38:	4642      	mov	r2, r8
 8005d3a:	189b      	adds	r3, r3, r2
 8005d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d3e:	464b      	mov	r3, r9
 8005d40:	460a      	mov	r2, r1
 8005d42:	eb42 0303 	adc.w	r3, r2, r3
 8005d46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d52:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d60:	4649      	mov	r1, r9
 8005d62:	008b      	lsls	r3, r1, #2
 8005d64:	4641      	mov	r1, r8
 8005d66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d6a:	4641      	mov	r1, r8
 8005d6c:	008a      	lsls	r2, r1, #2
 8005d6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d72:	f7fa fa47 	bl	8000204 <__aeabi_uldivmod>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005db0 <UART_SetConfig+0x4e4>)
 8005d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d80:	095b      	lsrs	r3, r3, #5
 8005d82:	2164      	movs	r1, #100	@ 0x64
 8005d84:	fb01 f303 	mul.w	r3, r1, r3
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	3332      	adds	r3, #50	@ 0x32
 8005d8e:	4a08      	ldr	r2, [pc, #32]	@ (8005db0 <UART_SetConfig+0x4e4>)
 8005d90:	fba2 2303 	umull	r2, r3, r2, r3
 8005d94:	095b      	lsrs	r3, r3, #5
 8005d96:	f003 020f 	and.w	r2, r3, #15
 8005d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4422      	add	r2, r4
 8005da2:	609a      	str	r2, [r3, #8]
}
 8005da4:	bf00      	nop
 8005da6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005daa:	46bd      	mov	sp, r7
 8005dac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005db0:	51eb851f 	.word	0x51eb851f

08005db4 <std>:
 8005db4:	2300      	movs	r3, #0
 8005db6:	b510      	push	{r4, lr}
 8005db8:	4604      	mov	r4, r0
 8005dba:	e9c0 3300 	strd	r3, r3, [r0]
 8005dbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005dc2:	6083      	str	r3, [r0, #8]
 8005dc4:	8181      	strh	r1, [r0, #12]
 8005dc6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005dc8:	81c2      	strh	r2, [r0, #14]
 8005dca:	6183      	str	r3, [r0, #24]
 8005dcc:	4619      	mov	r1, r3
 8005dce:	2208      	movs	r2, #8
 8005dd0:	305c      	adds	r0, #92	@ 0x5c
 8005dd2:	f000 f9e7 	bl	80061a4 <memset>
 8005dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005e0c <std+0x58>)
 8005dd8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005dda:	4b0d      	ldr	r3, [pc, #52]	@ (8005e10 <std+0x5c>)
 8005ddc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005dde:	4b0d      	ldr	r3, [pc, #52]	@ (8005e14 <std+0x60>)
 8005de0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005de2:	4b0d      	ldr	r3, [pc, #52]	@ (8005e18 <std+0x64>)
 8005de4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005de6:	4b0d      	ldr	r3, [pc, #52]	@ (8005e1c <std+0x68>)
 8005de8:	6224      	str	r4, [r4, #32]
 8005dea:	429c      	cmp	r4, r3
 8005dec:	d006      	beq.n	8005dfc <std+0x48>
 8005dee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005df2:	4294      	cmp	r4, r2
 8005df4:	d002      	beq.n	8005dfc <std+0x48>
 8005df6:	33d0      	adds	r3, #208	@ 0xd0
 8005df8:	429c      	cmp	r4, r3
 8005dfa:	d105      	bne.n	8005e08 <std+0x54>
 8005dfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e04:	f000 ba46 	b.w	8006294 <__retarget_lock_init_recursive>
 8005e08:	bd10      	pop	{r4, pc}
 8005e0a:	bf00      	nop
 8005e0c:	08005ff5 	.word	0x08005ff5
 8005e10:	08006017 	.word	0x08006017
 8005e14:	0800604f 	.word	0x0800604f
 8005e18:	08006073 	.word	0x08006073
 8005e1c:	20000360 	.word	0x20000360

08005e20 <stdio_exit_handler>:
 8005e20:	4a02      	ldr	r2, [pc, #8]	@ (8005e2c <stdio_exit_handler+0xc>)
 8005e22:	4903      	ldr	r1, [pc, #12]	@ (8005e30 <stdio_exit_handler+0x10>)
 8005e24:	4803      	ldr	r0, [pc, #12]	@ (8005e34 <stdio_exit_handler+0x14>)
 8005e26:	f000 b869 	b.w	8005efc <_fwalk_sglue>
 8005e2a:	bf00      	nop
 8005e2c:	2000000c 	.word	0x2000000c
 8005e30:	08006595 	.word	0x08006595
 8005e34:	2000001c 	.word	0x2000001c

08005e38 <cleanup_stdio>:
 8005e38:	6841      	ldr	r1, [r0, #4]
 8005e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e6c <cleanup_stdio+0x34>)
 8005e3c:	4299      	cmp	r1, r3
 8005e3e:	b510      	push	{r4, lr}
 8005e40:	4604      	mov	r4, r0
 8005e42:	d001      	beq.n	8005e48 <cleanup_stdio+0x10>
 8005e44:	f000 fba6 	bl	8006594 <_fflush_r>
 8005e48:	68a1      	ldr	r1, [r4, #8]
 8005e4a:	4b09      	ldr	r3, [pc, #36]	@ (8005e70 <cleanup_stdio+0x38>)
 8005e4c:	4299      	cmp	r1, r3
 8005e4e:	d002      	beq.n	8005e56 <cleanup_stdio+0x1e>
 8005e50:	4620      	mov	r0, r4
 8005e52:	f000 fb9f 	bl	8006594 <_fflush_r>
 8005e56:	68e1      	ldr	r1, [r4, #12]
 8005e58:	4b06      	ldr	r3, [pc, #24]	@ (8005e74 <cleanup_stdio+0x3c>)
 8005e5a:	4299      	cmp	r1, r3
 8005e5c:	d004      	beq.n	8005e68 <cleanup_stdio+0x30>
 8005e5e:	4620      	mov	r0, r4
 8005e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e64:	f000 bb96 	b.w	8006594 <_fflush_r>
 8005e68:	bd10      	pop	{r4, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000360 	.word	0x20000360
 8005e70:	200003c8 	.word	0x200003c8
 8005e74:	20000430 	.word	0x20000430

08005e78 <global_stdio_init.part.0>:
 8005e78:	b510      	push	{r4, lr}
 8005e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ea8 <global_stdio_init.part.0+0x30>)
 8005e7c:	4c0b      	ldr	r4, [pc, #44]	@ (8005eac <global_stdio_init.part.0+0x34>)
 8005e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8005eb0 <global_stdio_init.part.0+0x38>)
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	4620      	mov	r0, r4
 8005e84:	2200      	movs	r2, #0
 8005e86:	2104      	movs	r1, #4
 8005e88:	f7ff ff94 	bl	8005db4 <std>
 8005e8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e90:	2201      	movs	r2, #1
 8005e92:	2109      	movs	r1, #9
 8005e94:	f7ff ff8e 	bl	8005db4 <std>
 8005e98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ea2:	2112      	movs	r1, #18
 8005ea4:	f7ff bf86 	b.w	8005db4 <std>
 8005ea8:	20000498 	.word	0x20000498
 8005eac:	20000360 	.word	0x20000360
 8005eb0:	08005e21 	.word	0x08005e21

08005eb4 <__sfp_lock_acquire>:
 8005eb4:	4801      	ldr	r0, [pc, #4]	@ (8005ebc <__sfp_lock_acquire+0x8>)
 8005eb6:	f000 b9ee 	b.w	8006296 <__retarget_lock_acquire_recursive>
 8005eba:	bf00      	nop
 8005ebc:	200004a1 	.word	0x200004a1

08005ec0 <__sfp_lock_release>:
 8005ec0:	4801      	ldr	r0, [pc, #4]	@ (8005ec8 <__sfp_lock_release+0x8>)
 8005ec2:	f000 b9e9 	b.w	8006298 <__retarget_lock_release_recursive>
 8005ec6:	bf00      	nop
 8005ec8:	200004a1 	.word	0x200004a1

08005ecc <__sinit>:
 8005ecc:	b510      	push	{r4, lr}
 8005ece:	4604      	mov	r4, r0
 8005ed0:	f7ff fff0 	bl	8005eb4 <__sfp_lock_acquire>
 8005ed4:	6a23      	ldr	r3, [r4, #32]
 8005ed6:	b11b      	cbz	r3, 8005ee0 <__sinit+0x14>
 8005ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005edc:	f7ff bff0 	b.w	8005ec0 <__sfp_lock_release>
 8005ee0:	4b04      	ldr	r3, [pc, #16]	@ (8005ef4 <__sinit+0x28>)
 8005ee2:	6223      	str	r3, [r4, #32]
 8005ee4:	4b04      	ldr	r3, [pc, #16]	@ (8005ef8 <__sinit+0x2c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1f5      	bne.n	8005ed8 <__sinit+0xc>
 8005eec:	f7ff ffc4 	bl	8005e78 <global_stdio_init.part.0>
 8005ef0:	e7f2      	b.n	8005ed8 <__sinit+0xc>
 8005ef2:	bf00      	nop
 8005ef4:	08005e39 	.word	0x08005e39
 8005ef8:	20000498 	.word	0x20000498

08005efc <_fwalk_sglue>:
 8005efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f00:	4607      	mov	r7, r0
 8005f02:	4688      	mov	r8, r1
 8005f04:	4614      	mov	r4, r2
 8005f06:	2600      	movs	r6, #0
 8005f08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f0c:	f1b9 0901 	subs.w	r9, r9, #1
 8005f10:	d505      	bpl.n	8005f1e <_fwalk_sglue+0x22>
 8005f12:	6824      	ldr	r4, [r4, #0]
 8005f14:	2c00      	cmp	r4, #0
 8005f16:	d1f7      	bne.n	8005f08 <_fwalk_sglue+0xc>
 8005f18:	4630      	mov	r0, r6
 8005f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f1e:	89ab      	ldrh	r3, [r5, #12]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d907      	bls.n	8005f34 <_fwalk_sglue+0x38>
 8005f24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	d003      	beq.n	8005f34 <_fwalk_sglue+0x38>
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	4638      	mov	r0, r7
 8005f30:	47c0      	blx	r8
 8005f32:	4306      	orrs	r6, r0
 8005f34:	3568      	adds	r5, #104	@ 0x68
 8005f36:	e7e9      	b.n	8005f0c <_fwalk_sglue+0x10>

08005f38 <_puts_r>:
 8005f38:	6a03      	ldr	r3, [r0, #32]
 8005f3a:	b570      	push	{r4, r5, r6, lr}
 8005f3c:	6884      	ldr	r4, [r0, #8]
 8005f3e:	4605      	mov	r5, r0
 8005f40:	460e      	mov	r6, r1
 8005f42:	b90b      	cbnz	r3, 8005f48 <_puts_r+0x10>
 8005f44:	f7ff ffc2 	bl	8005ecc <__sinit>
 8005f48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f4a:	07db      	lsls	r3, r3, #31
 8005f4c:	d405      	bmi.n	8005f5a <_puts_r+0x22>
 8005f4e:	89a3      	ldrh	r3, [r4, #12]
 8005f50:	0598      	lsls	r0, r3, #22
 8005f52:	d402      	bmi.n	8005f5a <_puts_r+0x22>
 8005f54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f56:	f000 f99e 	bl	8006296 <__retarget_lock_acquire_recursive>
 8005f5a:	89a3      	ldrh	r3, [r4, #12]
 8005f5c:	0719      	lsls	r1, r3, #28
 8005f5e:	d502      	bpl.n	8005f66 <_puts_r+0x2e>
 8005f60:	6923      	ldr	r3, [r4, #16]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d135      	bne.n	8005fd2 <_puts_r+0x9a>
 8005f66:	4621      	mov	r1, r4
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f000 f8c5 	bl	80060f8 <__swsetup_r>
 8005f6e:	b380      	cbz	r0, 8005fd2 <_puts_r+0x9a>
 8005f70:	f04f 35ff 	mov.w	r5, #4294967295
 8005f74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f76:	07da      	lsls	r2, r3, #31
 8005f78:	d405      	bmi.n	8005f86 <_puts_r+0x4e>
 8005f7a:	89a3      	ldrh	r3, [r4, #12]
 8005f7c:	059b      	lsls	r3, r3, #22
 8005f7e:	d402      	bmi.n	8005f86 <_puts_r+0x4e>
 8005f80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f82:	f000 f989 	bl	8006298 <__retarget_lock_release_recursive>
 8005f86:	4628      	mov	r0, r5
 8005f88:	bd70      	pop	{r4, r5, r6, pc}
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	da04      	bge.n	8005f98 <_puts_r+0x60>
 8005f8e:	69a2      	ldr	r2, [r4, #24]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	dc17      	bgt.n	8005fc4 <_puts_r+0x8c>
 8005f94:	290a      	cmp	r1, #10
 8005f96:	d015      	beq.n	8005fc4 <_puts_r+0x8c>
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	6022      	str	r2, [r4, #0]
 8005f9e:	7019      	strb	r1, [r3, #0]
 8005fa0:	68a3      	ldr	r3, [r4, #8]
 8005fa2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	60a3      	str	r3, [r4, #8]
 8005faa:	2900      	cmp	r1, #0
 8005fac:	d1ed      	bne.n	8005f8a <_puts_r+0x52>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	da11      	bge.n	8005fd6 <_puts_r+0x9e>
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	210a      	movs	r1, #10
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f000 f85f 	bl	800607a <__swbuf_r>
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d0d7      	beq.n	8005f70 <_puts_r+0x38>
 8005fc0:	250a      	movs	r5, #10
 8005fc2:	e7d7      	b.n	8005f74 <_puts_r+0x3c>
 8005fc4:	4622      	mov	r2, r4
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	f000 f857 	bl	800607a <__swbuf_r>
 8005fcc:	3001      	adds	r0, #1
 8005fce:	d1e7      	bne.n	8005fa0 <_puts_r+0x68>
 8005fd0:	e7ce      	b.n	8005f70 <_puts_r+0x38>
 8005fd2:	3e01      	subs	r6, #1
 8005fd4:	e7e4      	b.n	8005fa0 <_puts_r+0x68>
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	6022      	str	r2, [r4, #0]
 8005fdc:	220a      	movs	r2, #10
 8005fde:	701a      	strb	r2, [r3, #0]
 8005fe0:	e7ee      	b.n	8005fc0 <_puts_r+0x88>
	...

08005fe4 <puts>:
 8005fe4:	4b02      	ldr	r3, [pc, #8]	@ (8005ff0 <puts+0xc>)
 8005fe6:	4601      	mov	r1, r0
 8005fe8:	6818      	ldr	r0, [r3, #0]
 8005fea:	f7ff bfa5 	b.w	8005f38 <_puts_r>
 8005fee:	bf00      	nop
 8005ff0:	20000018 	.word	0x20000018

08005ff4 <__sread>:
 8005ff4:	b510      	push	{r4, lr}
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ffc:	f000 f8fc 	bl	80061f8 <_read_r>
 8006000:	2800      	cmp	r0, #0
 8006002:	bfab      	itete	ge
 8006004:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006006:	89a3      	ldrhlt	r3, [r4, #12]
 8006008:	181b      	addge	r3, r3, r0
 800600a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800600e:	bfac      	ite	ge
 8006010:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006012:	81a3      	strhlt	r3, [r4, #12]
 8006014:	bd10      	pop	{r4, pc}

08006016 <__swrite>:
 8006016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800601a:	461f      	mov	r7, r3
 800601c:	898b      	ldrh	r3, [r1, #12]
 800601e:	05db      	lsls	r3, r3, #23
 8006020:	4605      	mov	r5, r0
 8006022:	460c      	mov	r4, r1
 8006024:	4616      	mov	r6, r2
 8006026:	d505      	bpl.n	8006034 <__swrite+0x1e>
 8006028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800602c:	2302      	movs	r3, #2
 800602e:	2200      	movs	r2, #0
 8006030:	f000 f8d0 	bl	80061d4 <_lseek_r>
 8006034:	89a3      	ldrh	r3, [r4, #12]
 8006036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800603a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800603e:	81a3      	strh	r3, [r4, #12]
 8006040:	4632      	mov	r2, r6
 8006042:	463b      	mov	r3, r7
 8006044:	4628      	mov	r0, r5
 8006046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800604a:	f000 b8e7 	b.w	800621c <_write_r>

0800604e <__sseek>:
 800604e:	b510      	push	{r4, lr}
 8006050:	460c      	mov	r4, r1
 8006052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006056:	f000 f8bd 	bl	80061d4 <_lseek_r>
 800605a:	1c43      	adds	r3, r0, #1
 800605c:	89a3      	ldrh	r3, [r4, #12]
 800605e:	bf15      	itete	ne
 8006060:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006062:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006066:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800606a:	81a3      	strheq	r3, [r4, #12]
 800606c:	bf18      	it	ne
 800606e:	81a3      	strhne	r3, [r4, #12]
 8006070:	bd10      	pop	{r4, pc}

08006072 <__sclose>:
 8006072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006076:	f000 b89d 	b.w	80061b4 <_close_r>

0800607a <__swbuf_r>:
 800607a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607c:	460e      	mov	r6, r1
 800607e:	4614      	mov	r4, r2
 8006080:	4605      	mov	r5, r0
 8006082:	b118      	cbz	r0, 800608c <__swbuf_r+0x12>
 8006084:	6a03      	ldr	r3, [r0, #32]
 8006086:	b90b      	cbnz	r3, 800608c <__swbuf_r+0x12>
 8006088:	f7ff ff20 	bl	8005ecc <__sinit>
 800608c:	69a3      	ldr	r3, [r4, #24]
 800608e:	60a3      	str	r3, [r4, #8]
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	071a      	lsls	r2, r3, #28
 8006094:	d501      	bpl.n	800609a <__swbuf_r+0x20>
 8006096:	6923      	ldr	r3, [r4, #16]
 8006098:	b943      	cbnz	r3, 80060ac <__swbuf_r+0x32>
 800609a:	4621      	mov	r1, r4
 800609c:	4628      	mov	r0, r5
 800609e:	f000 f82b 	bl	80060f8 <__swsetup_r>
 80060a2:	b118      	cbz	r0, 80060ac <__swbuf_r+0x32>
 80060a4:	f04f 37ff 	mov.w	r7, #4294967295
 80060a8:	4638      	mov	r0, r7
 80060aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	6922      	ldr	r2, [r4, #16]
 80060b0:	1a98      	subs	r0, r3, r2
 80060b2:	6963      	ldr	r3, [r4, #20]
 80060b4:	b2f6      	uxtb	r6, r6
 80060b6:	4283      	cmp	r3, r0
 80060b8:	4637      	mov	r7, r6
 80060ba:	dc05      	bgt.n	80060c8 <__swbuf_r+0x4e>
 80060bc:	4621      	mov	r1, r4
 80060be:	4628      	mov	r0, r5
 80060c0:	f000 fa68 	bl	8006594 <_fflush_r>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	d1ed      	bne.n	80060a4 <__swbuf_r+0x2a>
 80060c8:	68a3      	ldr	r3, [r4, #8]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	60a3      	str	r3, [r4, #8]
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	6022      	str	r2, [r4, #0]
 80060d4:	701e      	strb	r6, [r3, #0]
 80060d6:	6962      	ldr	r2, [r4, #20]
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	429a      	cmp	r2, r3
 80060dc:	d004      	beq.n	80060e8 <__swbuf_r+0x6e>
 80060de:	89a3      	ldrh	r3, [r4, #12]
 80060e0:	07db      	lsls	r3, r3, #31
 80060e2:	d5e1      	bpl.n	80060a8 <__swbuf_r+0x2e>
 80060e4:	2e0a      	cmp	r6, #10
 80060e6:	d1df      	bne.n	80060a8 <__swbuf_r+0x2e>
 80060e8:	4621      	mov	r1, r4
 80060ea:	4628      	mov	r0, r5
 80060ec:	f000 fa52 	bl	8006594 <_fflush_r>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d0d9      	beq.n	80060a8 <__swbuf_r+0x2e>
 80060f4:	e7d6      	b.n	80060a4 <__swbuf_r+0x2a>
	...

080060f8 <__swsetup_r>:
 80060f8:	b538      	push	{r3, r4, r5, lr}
 80060fa:	4b29      	ldr	r3, [pc, #164]	@ (80061a0 <__swsetup_r+0xa8>)
 80060fc:	4605      	mov	r5, r0
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	460c      	mov	r4, r1
 8006102:	b118      	cbz	r0, 800610c <__swsetup_r+0x14>
 8006104:	6a03      	ldr	r3, [r0, #32]
 8006106:	b90b      	cbnz	r3, 800610c <__swsetup_r+0x14>
 8006108:	f7ff fee0 	bl	8005ecc <__sinit>
 800610c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006110:	0719      	lsls	r1, r3, #28
 8006112:	d422      	bmi.n	800615a <__swsetup_r+0x62>
 8006114:	06da      	lsls	r2, r3, #27
 8006116:	d407      	bmi.n	8006128 <__swsetup_r+0x30>
 8006118:	2209      	movs	r2, #9
 800611a:	602a      	str	r2, [r5, #0]
 800611c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006120:	81a3      	strh	r3, [r4, #12]
 8006122:	f04f 30ff 	mov.w	r0, #4294967295
 8006126:	e033      	b.n	8006190 <__swsetup_r+0x98>
 8006128:	0758      	lsls	r0, r3, #29
 800612a:	d512      	bpl.n	8006152 <__swsetup_r+0x5a>
 800612c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800612e:	b141      	cbz	r1, 8006142 <__swsetup_r+0x4a>
 8006130:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006134:	4299      	cmp	r1, r3
 8006136:	d002      	beq.n	800613e <__swsetup_r+0x46>
 8006138:	4628      	mov	r0, r5
 800613a:	f000 f8af 	bl	800629c <_free_r>
 800613e:	2300      	movs	r3, #0
 8006140:	6363      	str	r3, [r4, #52]	@ 0x34
 8006142:	89a3      	ldrh	r3, [r4, #12]
 8006144:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006148:	81a3      	strh	r3, [r4, #12]
 800614a:	2300      	movs	r3, #0
 800614c:	6063      	str	r3, [r4, #4]
 800614e:	6923      	ldr	r3, [r4, #16]
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	89a3      	ldrh	r3, [r4, #12]
 8006154:	f043 0308 	orr.w	r3, r3, #8
 8006158:	81a3      	strh	r3, [r4, #12]
 800615a:	6923      	ldr	r3, [r4, #16]
 800615c:	b94b      	cbnz	r3, 8006172 <__swsetup_r+0x7a>
 800615e:	89a3      	ldrh	r3, [r4, #12]
 8006160:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006168:	d003      	beq.n	8006172 <__swsetup_r+0x7a>
 800616a:	4621      	mov	r1, r4
 800616c:	4628      	mov	r0, r5
 800616e:	f000 fa5f 	bl	8006630 <__smakebuf_r>
 8006172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006176:	f013 0201 	ands.w	r2, r3, #1
 800617a:	d00a      	beq.n	8006192 <__swsetup_r+0x9a>
 800617c:	2200      	movs	r2, #0
 800617e:	60a2      	str	r2, [r4, #8]
 8006180:	6962      	ldr	r2, [r4, #20]
 8006182:	4252      	negs	r2, r2
 8006184:	61a2      	str	r2, [r4, #24]
 8006186:	6922      	ldr	r2, [r4, #16]
 8006188:	b942      	cbnz	r2, 800619c <__swsetup_r+0xa4>
 800618a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800618e:	d1c5      	bne.n	800611c <__swsetup_r+0x24>
 8006190:	bd38      	pop	{r3, r4, r5, pc}
 8006192:	0799      	lsls	r1, r3, #30
 8006194:	bf58      	it	pl
 8006196:	6962      	ldrpl	r2, [r4, #20]
 8006198:	60a2      	str	r2, [r4, #8]
 800619a:	e7f4      	b.n	8006186 <__swsetup_r+0x8e>
 800619c:	2000      	movs	r0, #0
 800619e:	e7f7      	b.n	8006190 <__swsetup_r+0x98>
 80061a0:	20000018 	.word	0x20000018

080061a4 <memset>:
 80061a4:	4402      	add	r2, r0
 80061a6:	4603      	mov	r3, r0
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d100      	bne.n	80061ae <memset+0xa>
 80061ac:	4770      	bx	lr
 80061ae:	f803 1b01 	strb.w	r1, [r3], #1
 80061b2:	e7f9      	b.n	80061a8 <memset+0x4>

080061b4 <_close_r>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	4d06      	ldr	r5, [pc, #24]	@ (80061d0 <_close_r+0x1c>)
 80061b8:	2300      	movs	r3, #0
 80061ba:	4604      	mov	r4, r0
 80061bc:	4608      	mov	r0, r1
 80061be:	602b      	str	r3, [r5, #0]
 80061c0:	f7fb fafd 	bl	80017be <_close>
 80061c4:	1c43      	adds	r3, r0, #1
 80061c6:	d102      	bne.n	80061ce <_close_r+0x1a>
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	b103      	cbz	r3, 80061ce <_close_r+0x1a>
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	bd38      	pop	{r3, r4, r5, pc}
 80061d0:	2000049c 	.word	0x2000049c

080061d4 <_lseek_r>:
 80061d4:	b538      	push	{r3, r4, r5, lr}
 80061d6:	4d07      	ldr	r5, [pc, #28]	@ (80061f4 <_lseek_r+0x20>)
 80061d8:	4604      	mov	r4, r0
 80061da:	4608      	mov	r0, r1
 80061dc:	4611      	mov	r1, r2
 80061de:	2200      	movs	r2, #0
 80061e0:	602a      	str	r2, [r5, #0]
 80061e2:	461a      	mov	r2, r3
 80061e4:	f7fb fb12 	bl	800180c <_lseek>
 80061e8:	1c43      	adds	r3, r0, #1
 80061ea:	d102      	bne.n	80061f2 <_lseek_r+0x1e>
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	b103      	cbz	r3, 80061f2 <_lseek_r+0x1e>
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	bd38      	pop	{r3, r4, r5, pc}
 80061f4:	2000049c 	.word	0x2000049c

080061f8 <_read_r>:
 80061f8:	b538      	push	{r3, r4, r5, lr}
 80061fa:	4d07      	ldr	r5, [pc, #28]	@ (8006218 <_read_r+0x20>)
 80061fc:	4604      	mov	r4, r0
 80061fe:	4608      	mov	r0, r1
 8006200:	4611      	mov	r1, r2
 8006202:	2200      	movs	r2, #0
 8006204:	602a      	str	r2, [r5, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	f7fb faa0 	bl	800174c <_read>
 800620c:	1c43      	adds	r3, r0, #1
 800620e:	d102      	bne.n	8006216 <_read_r+0x1e>
 8006210:	682b      	ldr	r3, [r5, #0]
 8006212:	b103      	cbz	r3, 8006216 <_read_r+0x1e>
 8006214:	6023      	str	r3, [r4, #0]
 8006216:	bd38      	pop	{r3, r4, r5, pc}
 8006218:	2000049c 	.word	0x2000049c

0800621c <_write_r>:
 800621c:	b538      	push	{r3, r4, r5, lr}
 800621e:	4d07      	ldr	r5, [pc, #28]	@ (800623c <_write_r+0x20>)
 8006220:	4604      	mov	r4, r0
 8006222:	4608      	mov	r0, r1
 8006224:	4611      	mov	r1, r2
 8006226:	2200      	movs	r2, #0
 8006228:	602a      	str	r2, [r5, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	f7fb faab 	bl	8001786 <_write>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	d102      	bne.n	800623a <_write_r+0x1e>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	b103      	cbz	r3, 800623a <_write_r+0x1e>
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	bd38      	pop	{r3, r4, r5, pc}
 800623c:	2000049c 	.word	0x2000049c

08006240 <__errno>:
 8006240:	4b01      	ldr	r3, [pc, #4]	@ (8006248 <__errno+0x8>)
 8006242:	6818      	ldr	r0, [r3, #0]
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	20000018 	.word	0x20000018

0800624c <__libc_init_array>:
 800624c:	b570      	push	{r4, r5, r6, lr}
 800624e:	4d0d      	ldr	r5, [pc, #52]	@ (8006284 <__libc_init_array+0x38>)
 8006250:	4c0d      	ldr	r4, [pc, #52]	@ (8006288 <__libc_init_array+0x3c>)
 8006252:	1b64      	subs	r4, r4, r5
 8006254:	10a4      	asrs	r4, r4, #2
 8006256:	2600      	movs	r6, #0
 8006258:	42a6      	cmp	r6, r4
 800625a:	d109      	bne.n	8006270 <__libc_init_array+0x24>
 800625c:	4d0b      	ldr	r5, [pc, #44]	@ (800628c <__libc_init_array+0x40>)
 800625e:	4c0c      	ldr	r4, [pc, #48]	@ (8006290 <__libc_init_array+0x44>)
 8006260:	f000 fa54 	bl	800670c <_init>
 8006264:	1b64      	subs	r4, r4, r5
 8006266:	10a4      	asrs	r4, r4, #2
 8006268:	2600      	movs	r6, #0
 800626a:	42a6      	cmp	r6, r4
 800626c:	d105      	bne.n	800627a <__libc_init_array+0x2e>
 800626e:	bd70      	pop	{r4, r5, r6, pc}
 8006270:	f855 3b04 	ldr.w	r3, [r5], #4
 8006274:	4798      	blx	r3
 8006276:	3601      	adds	r6, #1
 8006278:	e7ee      	b.n	8006258 <__libc_init_array+0xc>
 800627a:	f855 3b04 	ldr.w	r3, [r5], #4
 800627e:	4798      	blx	r3
 8006280:	3601      	adds	r6, #1
 8006282:	e7f2      	b.n	800626a <__libc_init_array+0x1e>
 8006284:	0800677c 	.word	0x0800677c
 8006288:	0800677c 	.word	0x0800677c
 800628c:	0800677c 	.word	0x0800677c
 8006290:	08006780 	.word	0x08006780

08006294 <__retarget_lock_init_recursive>:
 8006294:	4770      	bx	lr

08006296 <__retarget_lock_acquire_recursive>:
 8006296:	4770      	bx	lr

08006298 <__retarget_lock_release_recursive>:
 8006298:	4770      	bx	lr
	...

0800629c <_free_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	4605      	mov	r5, r0
 80062a0:	2900      	cmp	r1, #0
 80062a2:	d041      	beq.n	8006328 <_free_r+0x8c>
 80062a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062a8:	1f0c      	subs	r4, r1, #4
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	bfb8      	it	lt
 80062ae:	18e4      	addlt	r4, r4, r3
 80062b0:	f000 f8e0 	bl	8006474 <__malloc_lock>
 80062b4:	4a1d      	ldr	r2, [pc, #116]	@ (800632c <_free_r+0x90>)
 80062b6:	6813      	ldr	r3, [r2, #0]
 80062b8:	b933      	cbnz	r3, 80062c8 <_free_r+0x2c>
 80062ba:	6063      	str	r3, [r4, #4]
 80062bc:	6014      	str	r4, [r2, #0]
 80062be:	4628      	mov	r0, r5
 80062c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062c4:	f000 b8dc 	b.w	8006480 <__malloc_unlock>
 80062c8:	42a3      	cmp	r3, r4
 80062ca:	d908      	bls.n	80062de <_free_r+0x42>
 80062cc:	6820      	ldr	r0, [r4, #0]
 80062ce:	1821      	adds	r1, r4, r0
 80062d0:	428b      	cmp	r3, r1
 80062d2:	bf01      	itttt	eq
 80062d4:	6819      	ldreq	r1, [r3, #0]
 80062d6:	685b      	ldreq	r3, [r3, #4]
 80062d8:	1809      	addeq	r1, r1, r0
 80062da:	6021      	streq	r1, [r4, #0]
 80062dc:	e7ed      	b.n	80062ba <_free_r+0x1e>
 80062de:	461a      	mov	r2, r3
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	b10b      	cbz	r3, 80062e8 <_free_r+0x4c>
 80062e4:	42a3      	cmp	r3, r4
 80062e6:	d9fa      	bls.n	80062de <_free_r+0x42>
 80062e8:	6811      	ldr	r1, [r2, #0]
 80062ea:	1850      	adds	r0, r2, r1
 80062ec:	42a0      	cmp	r0, r4
 80062ee:	d10b      	bne.n	8006308 <_free_r+0x6c>
 80062f0:	6820      	ldr	r0, [r4, #0]
 80062f2:	4401      	add	r1, r0
 80062f4:	1850      	adds	r0, r2, r1
 80062f6:	4283      	cmp	r3, r0
 80062f8:	6011      	str	r1, [r2, #0]
 80062fa:	d1e0      	bne.n	80062be <_free_r+0x22>
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	6053      	str	r3, [r2, #4]
 8006302:	4408      	add	r0, r1
 8006304:	6010      	str	r0, [r2, #0]
 8006306:	e7da      	b.n	80062be <_free_r+0x22>
 8006308:	d902      	bls.n	8006310 <_free_r+0x74>
 800630a:	230c      	movs	r3, #12
 800630c:	602b      	str	r3, [r5, #0]
 800630e:	e7d6      	b.n	80062be <_free_r+0x22>
 8006310:	6820      	ldr	r0, [r4, #0]
 8006312:	1821      	adds	r1, r4, r0
 8006314:	428b      	cmp	r3, r1
 8006316:	bf04      	itt	eq
 8006318:	6819      	ldreq	r1, [r3, #0]
 800631a:	685b      	ldreq	r3, [r3, #4]
 800631c:	6063      	str	r3, [r4, #4]
 800631e:	bf04      	itt	eq
 8006320:	1809      	addeq	r1, r1, r0
 8006322:	6021      	streq	r1, [r4, #0]
 8006324:	6054      	str	r4, [r2, #4]
 8006326:	e7ca      	b.n	80062be <_free_r+0x22>
 8006328:	bd38      	pop	{r3, r4, r5, pc}
 800632a:	bf00      	nop
 800632c:	200004a8 	.word	0x200004a8

08006330 <sbrk_aligned>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	4e0f      	ldr	r6, [pc, #60]	@ (8006370 <sbrk_aligned+0x40>)
 8006334:	460c      	mov	r4, r1
 8006336:	6831      	ldr	r1, [r6, #0]
 8006338:	4605      	mov	r5, r0
 800633a:	b911      	cbnz	r1, 8006342 <sbrk_aligned+0x12>
 800633c:	f000 f9d6 	bl	80066ec <_sbrk_r>
 8006340:	6030      	str	r0, [r6, #0]
 8006342:	4621      	mov	r1, r4
 8006344:	4628      	mov	r0, r5
 8006346:	f000 f9d1 	bl	80066ec <_sbrk_r>
 800634a:	1c43      	adds	r3, r0, #1
 800634c:	d103      	bne.n	8006356 <sbrk_aligned+0x26>
 800634e:	f04f 34ff 	mov.w	r4, #4294967295
 8006352:	4620      	mov	r0, r4
 8006354:	bd70      	pop	{r4, r5, r6, pc}
 8006356:	1cc4      	adds	r4, r0, #3
 8006358:	f024 0403 	bic.w	r4, r4, #3
 800635c:	42a0      	cmp	r0, r4
 800635e:	d0f8      	beq.n	8006352 <sbrk_aligned+0x22>
 8006360:	1a21      	subs	r1, r4, r0
 8006362:	4628      	mov	r0, r5
 8006364:	f000 f9c2 	bl	80066ec <_sbrk_r>
 8006368:	3001      	adds	r0, #1
 800636a:	d1f2      	bne.n	8006352 <sbrk_aligned+0x22>
 800636c:	e7ef      	b.n	800634e <sbrk_aligned+0x1e>
 800636e:	bf00      	nop
 8006370:	200004a4 	.word	0x200004a4

08006374 <_malloc_r>:
 8006374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006378:	1ccd      	adds	r5, r1, #3
 800637a:	f025 0503 	bic.w	r5, r5, #3
 800637e:	3508      	adds	r5, #8
 8006380:	2d0c      	cmp	r5, #12
 8006382:	bf38      	it	cc
 8006384:	250c      	movcc	r5, #12
 8006386:	2d00      	cmp	r5, #0
 8006388:	4606      	mov	r6, r0
 800638a:	db01      	blt.n	8006390 <_malloc_r+0x1c>
 800638c:	42a9      	cmp	r1, r5
 800638e:	d904      	bls.n	800639a <_malloc_r+0x26>
 8006390:	230c      	movs	r3, #12
 8006392:	6033      	str	r3, [r6, #0]
 8006394:	2000      	movs	r0, #0
 8006396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800639a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006470 <_malloc_r+0xfc>
 800639e:	f000 f869 	bl	8006474 <__malloc_lock>
 80063a2:	f8d8 3000 	ldr.w	r3, [r8]
 80063a6:	461c      	mov	r4, r3
 80063a8:	bb44      	cbnz	r4, 80063fc <_malloc_r+0x88>
 80063aa:	4629      	mov	r1, r5
 80063ac:	4630      	mov	r0, r6
 80063ae:	f7ff ffbf 	bl	8006330 <sbrk_aligned>
 80063b2:	1c43      	adds	r3, r0, #1
 80063b4:	4604      	mov	r4, r0
 80063b6:	d158      	bne.n	800646a <_malloc_r+0xf6>
 80063b8:	f8d8 4000 	ldr.w	r4, [r8]
 80063bc:	4627      	mov	r7, r4
 80063be:	2f00      	cmp	r7, #0
 80063c0:	d143      	bne.n	800644a <_malloc_r+0xd6>
 80063c2:	2c00      	cmp	r4, #0
 80063c4:	d04b      	beq.n	800645e <_malloc_r+0xea>
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	4639      	mov	r1, r7
 80063ca:	4630      	mov	r0, r6
 80063cc:	eb04 0903 	add.w	r9, r4, r3
 80063d0:	f000 f98c 	bl	80066ec <_sbrk_r>
 80063d4:	4581      	cmp	r9, r0
 80063d6:	d142      	bne.n	800645e <_malloc_r+0xea>
 80063d8:	6821      	ldr	r1, [r4, #0]
 80063da:	1a6d      	subs	r5, r5, r1
 80063dc:	4629      	mov	r1, r5
 80063de:	4630      	mov	r0, r6
 80063e0:	f7ff ffa6 	bl	8006330 <sbrk_aligned>
 80063e4:	3001      	adds	r0, #1
 80063e6:	d03a      	beq.n	800645e <_malloc_r+0xea>
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	442b      	add	r3, r5
 80063ec:	6023      	str	r3, [r4, #0]
 80063ee:	f8d8 3000 	ldr.w	r3, [r8]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	bb62      	cbnz	r2, 8006450 <_malloc_r+0xdc>
 80063f6:	f8c8 7000 	str.w	r7, [r8]
 80063fa:	e00f      	b.n	800641c <_malloc_r+0xa8>
 80063fc:	6822      	ldr	r2, [r4, #0]
 80063fe:	1b52      	subs	r2, r2, r5
 8006400:	d420      	bmi.n	8006444 <_malloc_r+0xd0>
 8006402:	2a0b      	cmp	r2, #11
 8006404:	d917      	bls.n	8006436 <_malloc_r+0xc2>
 8006406:	1961      	adds	r1, r4, r5
 8006408:	42a3      	cmp	r3, r4
 800640a:	6025      	str	r5, [r4, #0]
 800640c:	bf18      	it	ne
 800640e:	6059      	strne	r1, [r3, #4]
 8006410:	6863      	ldr	r3, [r4, #4]
 8006412:	bf08      	it	eq
 8006414:	f8c8 1000 	streq.w	r1, [r8]
 8006418:	5162      	str	r2, [r4, r5]
 800641a:	604b      	str	r3, [r1, #4]
 800641c:	4630      	mov	r0, r6
 800641e:	f000 f82f 	bl	8006480 <__malloc_unlock>
 8006422:	f104 000b 	add.w	r0, r4, #11
 8006426:	1d23      	adds	r3, r4, #4
 8006428:	f020 0007 	bic.w	r0, r0, #7
 800642c:	1ac2      	subs	r2, r0, r3
 800642e:	bf1c      	itt	ne
 8006430:	1a1b      	subne	r3, r3, r0
 8006432:	50a3      	strne	r3, [r4, r2]
 8006434:	e7af      	b.n	8006396 <_malloc_r+0x22>
 8006436:	6862      	ldr	r2, [r4, #4]
 8006438:	42a3      	cmp	r3, r4
 800643a:	bf0c      	ite	eq
 800643c:	f8c8 2000 	streq.w	r2, [r8]
 8006440:	605a      	strne	r2, [r3, #4]
 8006442:	e7eb      	b.n	800641c <_malloc_r+0xa8>
 8006444:	4623      	mov	r3, r4
 8006446:	6864      	ldr	r4, [r4, #4]
 8006448:	e7ae      	b.n	80063a8 <_malloc_r+0x34>
 800644a:	463c      	mov	r4, r7
 800644c:	687f      	ldr	r7, [r7, #4]
 800644e:	e7b6      	b.n	80063be <_malloc_r+0x4a>
 8006450:	461a      	mov	r2, r3
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	42a3      	cmp	r3, r4
 8006456:	d1fb      	bne.n	8006450 <_malloc_r+0xdc>
 8006458:	2300      	movs	r3, #0
 800645a:	6053      	str	r3, [r2, #4]
 800645c:	e7de      	b.n	800641c <_malloc_r+0xa8>
 800645e:	230c      	movs	r3, #12
 8006460:	6033      	str	r3, [r6, #0]
 8006462:	4630      	mov	r0, r6
 8006464:	f000 f80c 	bl	8006480 <__malloc_unlock>
 8006468:	e794      	b.n	8006394 <_malloc_r+0x20>
 800646a:	6005      	str	r5, [r0, #0]
 800646c:	e7d6      	b.n	800641c <_malloc_r+0xa8>
 800646e:	bf00      	nop
 8006470:	200004a8 	.word	0x200004a8

08006474 <__malloc_lock>:
 8006474:	4801      	ldr	r0, [pc, #4]	@ (800647c <__malloc_lock+0x8>)
 8006476:	f7ff bf0e 	b.w	8006296 <__retarget_lock_acquire_recursive>
 800647a:	bf00      	nop
 800647c:	200004a0 	.word	0x200004a0

08006480 <__malloc_unlock>:
 8006480:	4801      	ldr	r0, [pc, #4]	@ (8006488 <__malloc_unlock+0x8>)
 8006482:	f7ff bf09 	b.w	8006298 <__retarget_lock_release_recursive>
 8006486:	bf00      	nop
 8006488:	200004a0 	.word	0x200004a0

0800648c <__sflush_r>:
 800648c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006494:	0716      	lsls	r6, r2, #28
 8006496:	4605      	mov	r5, r0
 8006498:	460c      	mov	r4, r1
 800649a:	d454      	bmi.n	8006546 <__sflush_r+0xba>
 800649c:	684b      	ldr	r3, [r1, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	dc02      	bgt.n	80064a8 <__sflush_r+0x1c>
 80064a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	dd48      	ble.n	800653a <__sflush_r+0xae>
 80064a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064aa:	2e00      	cmp	r6, #0
 80064ac:	d045      	beq.n	800653a <__sflush_r+0xae>
 80064ae:	2300      	movs	r3, #0
 80064b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80064b4:	682f      	ldr	r7, [r5, #0]
 80064b6:	6a21      	ldr	r1, [r4, #32]
 80064b8:	602b      	str	r3, [r5, #0]
 80064ba:	d030      	beq.n	800651e <__sflush_r+0x92>
 80064bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064be:	89a3      	ldrh	r3, [r4, #12]
 80064c0:	0759      	lsls	r1, r3, #29
 80064c2:	d505      	bpl.n	80064d0 <__sflush_r+0x44>
 80064c4:	6863      	ldr	r3, [r4, #4]
 80064c6:	1ad2      	subs	r2, r2, r3
 80064c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80064ca:	b10b      	cbz	r3, 80064d0 <__sflush_r+0x44>
 80064cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064ce:	1ad2      	subs	r2, r2, r3
 80064d0:	2300      	movs	r3, #0
 80064d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064d4:	6a21      	ldr	r1, [r4, #32]
 80064d6:	4628      	mov	r0, r5
 80064d8:	47b0      	blx	r6
 80064da:	1c43      	adds	r3, r0, #1
 80064dc:	89a3      	ldrh	r3, [r4, #12]
 80064de:	d106      	bne.n	80064ee <__sflush_r+0x62>
 80064e0:	6829      	ldr	r1, [r5, #0]
 80064e2:	291d      	cmp	r1, #29
 80064e4:	d82b      	bhi.n	800653e <__sflush_r+0xb2>
 80064e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006590 <__sflush_r+0x104>)
 80064e8:	40ca      	lsrs	r2, r1
 80064ea:	07d6      	lsls	r6, r2, #31
 80064ec:	d527      	bpl.n	800653e <__sflush_r+0xb2>
 80064ee:	2200      	movs	r2, #0
 80064f0:	6062      	str	r2, [r4, #4]
 80064f2:	04d9      	lsls	r1, r3, #19
 80064f4:	6922      	ldr	r2, [r4, #16]
 80064f6:	6022      	str	r2, [r4, #0]
 80064f8:	d504      	bpl.n	8006504 <__sflush_r+0x78>
 80064fa:	1c42      	adds	r2, r0, #1
 80064fc:	d101      	bne.n	8006502 <__sflush_r+0x76>
 80064fe:	682b      	ldr	r3, [r5, #0]
 8006500:	b903      	cbnz	r3, 8006504 <__sflush_r+0x78>
 8006502:	6560      	str	r0, [r4, #84]	@ 0x54
 8006504:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006506:	602f      	str	r7, [r5, #0]
 8006508:	b1b9      	cbz	r1, 800653a <__sflush_r+0xae>
 800650a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800650e:	4299      	cmp	r1, r3
 8006510:	d002      	beq.n	8006518 <__sflush_r+0x8c>
 8006512:	4628      	mov	r0, r5
 8006514:	f7ff fec2 	bl	800629c <_free_r>
 8006518:	2300      	movs	r3, #0
 800651a:	6363      	str	r3, [r4, #52]	@ 0x34
 800651c:	e00d      	b.n	800653a <__sflush_r+0xae>
 800651e:	2301      	movs	r3, #1
 8006520:	4628      	mov	r0, r5
 8006522:	47b0      	blx	r6
 8006524:	4602      	mov	r2, r0
 8006526:	1c50      	adds	r0, r2, #1
 8006528:	d1c9      	bne.n	80064be <__sflush_r+0x32>
 800652a:	682b      	ldr	r3, [r5, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d0c6      	beq.n	80064be <__sflush_r+0x32>
 8006530:	2b1d      	cmp	r3, #29
 8006532:	d001      	beq.n	8006538 <__sflush_r+0xac>
 8006534:	2b16      	cmp	r3, #22
 8006536:	d11e      	bne.n	8006576 <__sflush_r+0xea>
 8006538:	602f      	str	r7, [r5, #0]
 800653a:	2000      	movs	r0, #0
 800653c:	e022      	b.n	8006584 <__sflush_r+0xf8>
 800653e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006542:	b21b      	sxth	r3, r3
 8006544:	e01b      	b.n	800657e <__sflush_r+0xf2>
 8006546:	690f      	ldr	r7, [r1, #16]
 8006548:	2f00      	cmp	r7, #0
 800654a:	d0f6      	beq.n	800653a <__sflush_r+0xae>
 800654c:	0793      	lsls	r3, r2, #30
 800654e:	680e      	ldr	r6, [r1, #0]
 8006550:	bf08      	it	eq
 8006552:	694b      	ldreq	r3, [r1, #20]
 8006554:	600f      	str	r7, [r1, #0]
 8006556:	bf18      	it	ne
 8006558:	2300      	movne	r3, #0
 800655a:	eba6 0807 	sub.w	r8, r6, r7
 800655e:	608b      	str	r3, [r1, #8]
 8006560:	f1b8 0f00 	cmp.w	r8, #0
 8006564:	dde9      	ble.n	800653a <__sflush_r+0xae>
 8006566:	6a21      	ldr	r1, [r4, #32]
 8006568:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800656a:	4643      	mov	r3, r8
 800656c:	463a      	mov	r2, r7
 800656e:	4628      	mov	r0, r5
 8006570:	47b0      	blx	r6
 8006572:	2800      	cmp	r0, #0
 8006574:	dc08      	bgt.n	8006588 <__sflush_r+0xfc>
 8006576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800657a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800657e:	81a3      	strh	r3, [r4, #12]
 8006580:	f04f 30ff 	mov.w	r0, #4294967295
 8006584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006588:	4407      	add	r7, r0
 800658a:	eba8 0800 	sub.w	r8, r8, r0
 800658e:	e7e7      	b.n	8006560 <__sflush_r+0xd4>
 8006590:	20400001 	.word	0x20400001

08006594 <_fflush_r>:
 8006594:	b538      	push	{r3, r4, r5, lr}
 8006596:	690b      	ldr	r3, [r1, #16]
 8006598:	4605      	mov	r5, r0
 800659a:	460c      	mov	r4, r1
 800659c:	b913      	cbnz	r3, 80065a4 <_fflush_r+0x10>
 800659e:	2500      	movs	r5, #0
 80065a0:	4628      	mov	r0, r5
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	b118      	cbz	r0, 80065ae <_fflush_r+0x1a>
 80065a6:	6a03      	ldr	r3, [r0, #32]
 80065a8:	b90b      	cbnz	r3, 80065ae <_fflush_r+0x1a>
 80065aa:	f7ff fc8f 	bl	8005ecc <__sinit>
 80065ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0f3      	beq.n	800659e <_fflush_r+0xa>
 80065b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80065b8:	07d0      	lsls	r0, r2, #31
 80065ba:	d404      	bmi.n	80065c6 <_fflush_r+0x32>
 80065bc:	0599      	lsls	r1, r3, #22
 80065be:	d402      	bmi.n	80065c6 <_fflush_r+0x32>
 80065c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065c2:	f7ff fe68 	bl	8006296 <__retarget_lock_acquire_recursive>
 80065c6:	4628      	mov	r0, r5
 80065c8:	4621      	mov	r1, r4
 80065ca:	f7ff ff5f 	bl	800648c <__sflush_r>
 80065ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065d0:	07da      	lsls	r2, r3, #31
 80065d2:	4605      	mov	r5, r0
 80065d4:	d4e4      	bmi.n	80065a0 <_fflush_r+0xc>
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	059b      	lsls	r3, r3, #22
 80065da:	d4e1      	bmi.n	80065a0 <_fflush_r+0xc>
 80065dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065de:	f7ff fe5b 	bl	8006298 <__retarget_lock_release_recursive>
 80065e2:	e7dd      	b.n	80065a0 <_fflush_r+0xc>

080065e4 <__swhatbuf_r>:
 80065e4:	b570      	push	{r4, r5, r6, lr}
 80065e6:	460c      	mov	r4, r1
 80065e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ec:	2900      	cmp	r1, #0
 80065ee:	b096      	sub	sp, #88	@ 0x58
 80065f0:	4615      	mov	r5, r2
 80065f2:	461e      	mov	r6, r3
 80065f4:	da0d      	bge.n	8006612 <__swhatbuf_r+0x2e>
 80065f6:	89a3      	ldrh	r3, [r4, #12]
 80065f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80065fc:	f04f 0100 	mov.w	r1, #0
 8006600:	bf14      	ite	ne
 8006602:	2340      	movne	r3, #64	@ 0x40
 8006604:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006608:	2000      	movs	r0, #0
 800660a:	6031      	str	r1, [r6, #0]
 800660c:	602b      	str	r3, [r5, #0]
 800660e:	b016      	add	sp, #88	@ 0x58
 8006610:	bd70      	pop	{r4, r5, r6, pc}
 8006612:	466a      	mov	r2, sp
 8006614:	f000 f848 	bl	80066a8 <_fstat_r>
 8006618:	2800      	cmp	r0, #0
 800661a:	dbec      	blt.n	80065f6 <__swhatbuf_r+0x12>
 800661c:	9901      	ldr	r1, [sp, #4]
 800661e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006622:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006626:	4259      	negs	r1, r3
 8006628:	4159      	adcs	r1, r3
 800662a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800662e:	e7eb      	b.n	8006608 <__swhatbuf_r+0x24>

08006630 <__smakebuf_r>:
 8006630:	898b      	ldrh	r3, [r1, #12]
 8006632:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006634:	079d      	lsls	r5, r3, #30
 8006636:	4606      	mov	r6, r0
 8006638:	460c      	mov	r4, r1
 800663a:	d507      	bpl.n	800664c <__smakebuf_r+0x1c>
 800663c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	6123      	str	r3, [r4, #16]
 8006644:	2301      	movs	r3, #1
 8006646:	6163      	str	r3, [r4, #20]
 8006648:	b003      	add	sp, #12
 800664a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800664c:	ab01      	add	r3, sp, #4
 800664e:	466a      	mov	r2, sp
 8006650:	f7ff ffc8 	bl	80065e4 <__swhatbuf_r>
 8006654:	9f00      	ldr	r7, [sp, #0]
 8006656:	4605      	mov	r5, r0
 8006658:	4639      	mov	r1, r7
 800665a:	4630      	mov	r0, r6
 800665c:	f7ff fe8a 	bl	8006374 <_malloc_r>
 8006660:	b948      	cbnz	r0, 8006676 <__smakebuf_r+0x46>
 8006662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006666:	059a      	lsls	r2, r3, #22
 8006668:	d4ee      	bmi.n	8006648 <__smakebuf_r+0x18>
 800666a:	f023 0303 	bic.w	r3, r3, #3
 800666e:	f043 0302 	orr.w	r3, r3, #2
 8006672:	81a3      	strh	r3, [r4, #12]
 8006674:	e7e2      	b.n	800663c <__smakebuf_r+0xc>
 8006676:	89a3      	ldrh	r3, [r4, #12]
 8006678:	6020      	str	r0, [r4, #0]
 800667a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800667e:	81a3      	strh	r3, [r4, #12]
 8006680:	9b01      	ldr	r3, [sp, #4]
 8006682:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006686:	b15b      	cbz	r3, 80066a0 <__smakebuf_r+0x70>
 8006688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800668c:	4630      	mov	r0, r6
 800668e:	f000 f81d 	bl	80066cc <_isatty_r>
 8006692:	b128      	cbz	r0, 80066a0 <__smakebuf_r+0x70>
 8006694:	89a3      	ldrh	r3, [r4, #12]
 8006696:	f023 0303 	bic.w	r3, r3, #3
 800669a:	f043 0301 	orr.w	r3, r3, #1
 800669e:	81a3      	strh	r3, [r4, #12]
 80066a0:	89a3      	ldrh	r3, [r4, #12]
 80066a2:	431d      	orrs	r5, r3
 80066a4:	81a5      	strh	r5, [r4, #12]
 80066a6:	e7cf      	b.n	8006648 <__smakebuf_r+0x18>

080066a8 <_fstat_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4d07      	ldr	r5, [pc, #28]	@ (80066c8 <_fstat_r+0x20>)
 80066ac:	2300      	movs	r3, #0
 80066ae:	4604      	mov	r4, r0
 80066b0:	4608      	mov	r0, r1
 80066b2:	4611      	mov	r1, r2
 80066b4:	602b      	str	r3, [r5, #0]
 80066b6:	f7fb f88e 	bl	80017d6 <_fstat>
 80066ba:	1c43      	adds	r3, r0, #1
 80066bc:	d102      	bne.n	80066c4 <_fstat_r+0x1c>
 80066be:	682b      	ldr	r3, [r5, #0]
 80066c0:	b103      	cbz	r3, 80066c4 <_fstat_r+0x1c>
 80066c2:	6023      	str	r3, [r4, #0]
 80066c4:	bd38      	pop	{r3, r4, r5, pc}
 80066c6:	bf00      	nop
 80066c8:	2000049c 	.word	0x2000049c

080066cc <_isatty_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	4d06      	ldr	r5, [pc, #24]	@ (80066e8 <_isatty_r+0x1c>)
 80066d0:	2300      	movs	r3, #0
 80066d2:	4604      	mov	r4, r0
 80066d4:	4608      	mov	r0, r1
 80066d6:	602b      	str	r3, [r5, #0]
 80066d8:	f7fb f88d 	bl	80017f6 <_isatty>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d102      	bne.n	80066e6 <_isatty_r+0x1a>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	b103      	cbz	r3, 80066e6 <_isatty_r+0x1a>
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
 80066e8:	2000049c 	.word	0x2000049c

080066ec <_sbrk_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	4d06      	ldr	r5, [pc, #24]	@ (8006708 <_sbrk_r+0x1c>)
 80066f0:	2300      	movs	r3, #0
 80066f2:	4604      	mov	r4, r0
 80066f4:	4608      	mov	r0, r1
 80066f6:	602b      	str	r3, [r5, #0]
 80066f8:	f7fb f896 	bl	8001828 <_sbrk>
 80066fc:	1c43      	adds	r3, r0, #1
 80066fe:	d102      	bne.n	8006706 <_sbrk_r+0x1a>
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	b103      	cbz	r3, 8006706 <_sbrk_r+0x1a>
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	bd38      	pop	{r3, r4, r5, pc}
 8006708:	2000049c 	.word	0x2000049c

0800670c <_init>:
 800670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670e:	bf00      	nop
 8006710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006712:	bc08      	pop	{r3}
 8006714:	469e      	mov	lr, r3
 8006716:	4770      	bx	lr

08006718 <_fini>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	bf00      	nop
 800671c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671e:	bc08      	pop	{r3}
 8006720:	469e      	mov	lr, r3
 8006722:	4770      	bx	lr
