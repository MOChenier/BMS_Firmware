
BMS_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058a4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005a74  08005a74  00006a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005af0  08005af0  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005af0  08005af0  00006af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005af8  08005af8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005af8  08005af8  00006af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005afc  08005afc  00006afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005b00  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  20000068  08005b68  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08005b68  00007450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136f3  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ed9  00000000  00000000  0001a78b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  0001d668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec2  00000000  00000000  0001e978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002376f  00000000  00000000  0001f83a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001767b  00000000  00000000  00042fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4e27  00000000  00000000  0005a624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012f44b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005810  00000000  00000000  0012f490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00134ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a5c 	.word	0x08005a5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08005a5c 	.word	0x08005a5c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <CAN_Error_Handler>:
}



void CAN_Error_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e0:	b672      	cpsid	i
}
 80005e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <CAN_Error_Handler+0x8>

080005e8 <HAL_CAN_RxFifo0MsgPendingCallback>:

extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
//	slave_return_t return_message;

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 80005f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000660 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80005f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000664 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80005f4:	2100      	movs	r1, #0
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f001 ff02 	bl	8002400 <HAL_CAN_GetRxMessage>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d129      	bne.n	8000656 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
    {
//    	Start timer and turn ON Yellow LED
    	HAL_TIM_Base_Start_IT(&htim3);
 8000602:	4819      	ldr	r0, [pc, #100]	@ (8000668 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000604:	f003 fe6c 	bl	80042e0 <HAL_TIM_Base_Start_IT>
        HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_SET); // Turn ON LED
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800060e:	4817      	ldr	r0, [pc, #92]	@ (800066c <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000610:	f002 fd48 	bl	80030a4 <HAL_GPIO_WritePin>

//      Parse and store message according to type
//      If the header is of standard length (like for slave reception message)
        if(RxHeader.IDE == 0){
 8000614:	4b13      	ldr	r3, [pc, #76]	@ (8000664 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d103      	bne.n	8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
        	store_received_info(&RxHeader, RxData);
 800061c:	4910      	ldr	r1, [pc, #64]	@ (8000660 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800061e:	4811      	ldr	r0, [pc, #68]	@ (8000664 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000620:	f000 fd2e 	bl	8001080 <store_received_info>
        }

        // Print or process the received message
        printf("Received CAN Message: ");
 8000624:	4812      	ldr	r0, [pc, #72]	@ (8000670 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000626:	f004 fb71 	bl	8004d0c <iprintf>
        for (int i = 0; i < RxHeader.DLC; i++)
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	e00a      	b.n	8000646 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
        {
            printf("%02X ", RxData[i]);
 8000630:	4a0b      	ldr	r2, [pc, #44]	@ (8000660 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	4413      	add	r3, r2
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	480e      	ldr	r0, [pc, #56]	@ (8000674 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 800063c:	f004 fb66 	bl	8004d0c <iprintf>
        for (int i = 0; i < RxHeader.DLC; i++)
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	3301      	adds	r3, #1
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000648:	691a      	ldr	r2, [r3, #16]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	429a      	cmp	r2, r3
 800064e:	d8ef      	bhi.n	8000630 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
        }
//        return_message = convert_to_struct(RxData);

        printf("\n");
 8000650:	200a      	movs	r0, #10
 8000652:	f004 fb6d 	bl	8004d30 <putchar>
    }
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200000a0 	.word	0x200000a0
 8000664:	20000084 	.word	0x20000084
 8000668:	20000208 	.word	0x20000208
 800066c:	40020400 	.word	0x40020400
 8000670:	08005a74 	.word	0x08005a74
 8000674:	08005a8c 	.word	0x08005a8c

08000678 <HAL_TIM_PeriodElapsedCallback>:
	//    	Start timer and turn ON Yellow LED
	    	HAL_TIM_Base_Start_IT(&htim3);
	        HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_SET); // Turn ON LED
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]


	if (htim->Instance == TIM2) {  // Check if it's the correct timer
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000688:	d164      	bne.n	8000754 <HAL_TIM_PeriodElapsedCallback+0xdc>

    	if((timer_count % HB_10MS_PERIODS) == 0){
 800068a:	4b3b      	ldr	r3, [pc, #236]	@ (8000778 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	4a3a      	ldr	r2, [pc, #232]	@ (800077c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000692:	fba2 1203 	umull	r1, r2, r2, r3
 8000696:	0912      	lsrs	r2, r2, #4
 8000698:	2132      	movs	r1, #50	@ 0x32
 800069a:	fb01 f202 	mul.w	r2, r1, r2
 800069e:	1a9b      	subs	r3, r3, r2
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d107      	bne.n	80006b6 <HAL_TIM_PeriodElapsedCallback+0x3e>
    		HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin); // Toggle LED
 80006a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006aa:	4835      	ldr	r0, [pc, #212]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80006ac:	f002 fd13 	bl	80030d6 <HAL_GPIO_TogglePin>
    		printf("Hilo");
 80006b0:	4834      	ldr	r0, [pc, #208]	@ (8000784 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80006b2:	f004 fb2b 	bl	8004d0c <iprintf>
    	}

    	if((timer_count % CHARGER_CONNECTION_10MS_PERIODS) == 0){
 80006b6:	4b30      	ldr	r3, [pc, #192]	@ (8000778 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80006b8:	781b      	ldrb	r3, [r3, #0]

    	}

    	if((timer_count % ASK_SLAVE_FOR_INFO_10MS_PERIODS) == 0){
 80006ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000778 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80006bc:	781b      	ldrb	r3, [r3, #0]

    	}


    	// High voltage light blinking and activating logic
    	if((timer_count % SLOW_BLINKING_HV_10MS_PERIODS) == 0)
 80006be:	4b2e      	ldr	r3, [pc, #184]	@ (8000778 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4a2d      	ldr	r2, [pc, #180]	@ (800077c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80006c6:	fba2 1203 	umull	r1, r2, r2, r3
 80006ca:	0912      	lsrs	r2, r2, #4
 80006cc:	2132      	movs	r1, #50	@ 0x32
 80006ce:	fb01 f202 	mul.w	r2, r1, r2
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d108      	bne.n	80006ec <HAL_TIM_PeriodElapsedCallback+0x74>
    	{
    		//  If the precharge contactor is ON, blink the HV light
    		if(blinking_HV_led == 1)
 80006da:	4b2b      	ldr	r3, [pc, #172]	@ (8000788 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d103      	bne.n	80006ec <HAL_TIM_PeriodElapsedCallback+0x74>
    			HAL_GPIO_TogglePin(LIGHT_GPIO_Port, LIGHT_Pin);
 80006e4:	2108      	movs	r1, #8
 80006e6:	4829      	ldr	r0, [pc, #164]	@ (800078c <HAL_TIM_PeriodElapsedCallback+0x114>)
 80006e8:	f002 fcf5 	bl	80030d6 <HAL_GPIO_TogglePin>
    	}
    	if((timer_count % FAST_BLINKING_HV_10MS_PERIODS) == 0)
 80006ec:	4b22      	ldr	r3, [pc, #136]	@ (8000778 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80006f4:	fba3 1302 	umull	r1, r3, r3, r2
 80006f8:	08d9      	lsrs	r1, r3, #3
 80006fa:	460b      	mov	r3, r1
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	440b      	add	r3, r1
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	b2db      	uxtb	r3, r3
 8000706:	2b00      	cmp	r3, #0
 8000708:	d108      	bne.n	800071c <HAL_TIM_PeriodElapsedCallback+0xa4>
    	{
    		//  If the precharge contactor and the main contactor are ON, blink the HV light rapidly
    		if(blinking_HV_led == 2)
 800070a:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b02      	cmp	r3, #2
 8000712:	d103      	bne.n	800071c <HAL_TIM_PeriodElapsedCallback+0xa4>
    			HAL_GPIO_TogglePin(LIGHT_GPIO_Port, LIGHT_Pin);
 8000714:	2108      	movs	r1, #8
 8000716:	481d      	ldr	r0, [pc, #116]	@ (800078c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000718:	f002 fcdd 	bl	80030d6 <HAL_GPIO_TogglePin>
    	}

    	// If timer counter has not reached max value, increment
    	((timer_count + 1) % TIMER_MAX) ? timer_count = 0 : timer_count++;
 800071c:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	1c5a      	adds	r2, r3, #1
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000726:	fb83 1302 	smull	r1, r3, r3, r2
 800072a:	1199      	asrs	r1, r3, #6
 800072c:	17d3      	asrs	r3, r2, #31
 800072e:	1acb      	subs	r3, r1, r3
 8000730:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000734:	fb01 f303 	mul.w	r3, r1, r3
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d003      	beq.n	8000746 <HAL_TIM_PeriodElapsedCallback+0xce>
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
 8000744:	e006      	b.n	8000754 <HAL_TIM_PeriodElapsedCallback+0xdc>
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	3301      	adds	r3, #1
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000752:	701a      	strb	r2, [r3, #0]
    }


	// Timer that handles the activation time of yellow led on CAN package Rx/Tx
    if (htim->Instance == TIM3) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0f      	ldr	r2, [pc, #60]	@ (8000798 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d108      	bne.n	8000770 <HAL_TIM_PeriodElapsedCallback+0xf8>
        HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET); // Turn off LED
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000764:	4806      	ldr	r0, [pc, #24]	@ (8000780 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000766:	f002 fc9d 	bl	80030a4 <HAL_GPIO_WritePin>
        HAL_TIM_Base_Stop_IT(&htim3);
 800076a:	480c      	ldr	r0, [pc, #48]	@ (800079c <HAL_TIM_PeriodElapsedCallback+0x124>)
 800076c:	f003 fe28 	bl	80043c0 <HAL_TIM_Base_Stop_IT>
    }

}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200002f8 	.word	0x200002f8
 800077c:	51eb851f 	.word	0x51eb851f
 8000780:	40020400 	.word	0x40020400
 8000784:	08005a94 	.word	0x08005a94
 8000788:	200002fa 	.word	0x200002fa
 800078c:	40020000 	.word	0x40020000
 8000790:	cccccccd 	.word	0xcccccccd
 8000794:	10624dd3 	.word	0x10624dd3
 8000798:	40000400 	.word	0x40000400
 800079c:	20000208 	.word	0x20000208

080007a0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == IGNITION_Pin){ //Ignition interrupt triggered on both rising and falling edge.
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	2b20      	cmp	r3, #32
 80007ae:	d108      	bne.n	80007c2 <HAL_GPIO_EXTI_Callback+0x22>

		all_connection_states ^= IGNITION_MASK; //Ignition bit is toggled when edge is detected
 80007b0:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <HAL_GPIO_EXTI_Callback+0x60>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	f083 0301 	eor.w	r3, r3, #1
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <HAL_GPIO_EXTI_Callback+0x60>)
 80007be:	701a      	strb	r2, [r3, #0]
		deactivate_precharge_contactor();

	}


}
 80007c0:	e01a      	b.n	80007f8 <HAL_GPIO_EXTI_Callback+0x58>
	}else if(GPIO_Pin == CHARGER_DETECT_Pin){ //Ignition interrupt triggered on both rising and falling edge.
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	2b08      	cmp	r3, #8
 80007c6:	d108      	bne.n	80007da <HAL_GPIO_EXTI_Callback+0x3a>
		all_connection_states ^= IGNITION_MASK; //Charger bit is toggled when edge is detected
 80007c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <HAL_GPIO_EXTI_Callback+0x60>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	f083 0301 	eor.w	r3, r3, #1
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <HAL_GPIO_EXTI_Callback+0x60>)
 80007d6:	701a      	strb	r2, [r3, #0]
}
 80007d8:	e00e      	b.n	80007f8 <HAL_GPIO_EXTI_Callback+0x58>
	}else if(GPIO_Pin == EMERGENCY_STOP_Pin){
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	2b10      	cmp	r3, #16
 80007de:	d10b      	bne.n	80007f8 <HAL_GPIO_EXTI_Callback+0x58>
		all_connection_states |= IGNITION_MASK;
 80007e0:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <HAL_GPIO_EXTI_Callback+0x60>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b04      	ldr	r3, [pc, #16]	@ (8000800 <HAL_GPIO_EXTI_Callback+0x60>)
 80007ee:	701a      	strb	r2, [r3, #0]
		deactivate_main_contactor();
 80007f0:	f000 fbdc 	bl	8000fac <deactivate_main_contactor>
		deactivate_precharge_contactor();
 80007f4:	f000 fbf2 	bl	8000fdc <deactivate_precharge_contactor>
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200002f9 	.word	0x200002f9

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b09c      	sub	sp, #112	@ 0x70
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080a:	f001 f811 	bl	8001830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080e:	f000 f887 	bl	8000920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000812:	f000 faaf 	bl	8000d74 <MX_GPIO_Init>
  MX_CAN2_Init();
 8000816:	f000 f933 	bl	8000a80 <MX_CAN2_Init>
  MX_I2C1_Init();
 800081a:	f000 f967 	bl	8000aec <MX_I2C1_Init>
  MX_I2C3_Init();
 800081e:	f000 f993 	bl	8000b48 <MX_I2C3_Init>
  MX_USART6_IRDA_Init();
 8000822:	f000 fa81 	bl	8000d28 <MX_USART6_IRDA_Init>
  MX_ADC1_Init();
 8000826:	f000 f8d9 	bl	80009dc <MX_ADC1_Init>
  MX_USART1_IRDA_Init();
 800082a:	f000 fa57 	bl	8000cdc <MX_USART1_IRDA_Init>
  MX_TIM2_Init();
 800082e:	f000 f9b9 	bl	8000ba4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000832:	f000 fa05 	bl	8000c40 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//  ITM_Init(); // Init ITM to send data through ITM port 0
//  HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  uint32_t can_err = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	66fb      	str	r3, [r7, #108]	@ 0x6c
  CAN_FilterTypeDef filter;
  filter.FilterActivation = ENABLE;
 800083a:	2301      	movs	r3, #1
 800083c:	667b      	str	r3, [r7, #100]	@ 0x64
  filter.FilterBank = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	65bb      	str	r3, [r7, #88]	@ 0x58
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000842:	2300      	movs	r3, #0
 8000844:	657b      	str	r3, [r7, #84]	@ 0x54
  filter.FilterIdHigh = 0x0000;
 8000846:	2300      	movs	r3, #0
 8000848:	647b      	str	r3, [r7, #68]	@ 0x44
  filter.FilterIdLow = 0x0000;
 800084a:	2300      	movs	r3, #0
 800084c:	64bb      	str	r3, [r7, #72]	@ 0x48
  filter.FilterMaskIdHigh = 0x0000;
 800084e:	2300      	movs	r3, #0
 8000850:	64fb      	str	r3, [r7, #76]	@ 0x4c
  filter.FilterMaskIdLow = 0x0000;
 8000852:	2300      	movs	r3, #0
 8000854:	653b      	str	r3, [r7, #80]	@ 0x50
  filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000856:	2300      	movs	r3, #0
 8000858:	65fb      	str	r3, [r7, #92]	@ 0x5c
  filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800085a:	2301      	movs	r3, #1
 800085c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_CAN_ConfigFilter(&hcan2, &filter) != HAL_OK)
 800085e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000862:	4619      	mov	r1, r3
 8000864:	482b      	ldr	r0, [pc, #172]	@ (8000914 <main+0x110>)
 8000866:	f001 fbd7 	bl	8002018 <HAL_CAN_ConfigFilter>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <main+0x70>
  {
      CAN_Error_Handler();
 8000870:	f7ff feb4 	bl	80005dc <CAN_Error_Handler>
  }

  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000874:	2102      	movs	r1, #2
 8000876:	4827      	ldr	r0, [pc, #156]	@ (8000914 <main+0x110>)
 8000878:	f001 ff0c 	bl	8002694 <HAL_CAN_ActivateNotification>


//  CAN_Activate_Interrupts(&hcan2);
  HAL_TIM_Base_Start_IT(&htim2); //Start Main timer (10 ms)
 800087c:	4826      	ldr	r0, [pc, #152]	@ (8000918 <main+0x114>)
 800087e:	f003 fd2f 	bl	80042e0 <HAL_TIM_Base_Start_IT>
  uint8_t TxData[1] = {1};
 8000882:	2301      	movs	r3, #1
 8000884:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

  HAL_CAN_Start(&hcan2);
 8000888:	4822      	ldr	r0, [pc, #136]	@ (8000914 <main+0x110>)
 800088a:	f001 fca5 	bl	80021d8 <HAL_CAN_Start>
  can_err = HAL_CAN_GetError(&hcan2);
 800088e:	4821      	ldr	r0, [pc, #132]	@ (8000914 <main+0x110>)
 8000890:	f002 f955 	bl	8002b3e <HAL_CAN_GetError>
 8000894:	66f8      	str	r0, [r7, #108]	@ 0x6c

//  CAN_init_header();
  CAN_TxHeaderTypeDef	TxHeader;
  uint32_t	TxMailbox;

	TxHeader.IDE = CAN_ID_STD;
 8000896:	2300      	movs	r3, #0
 8000898:	633b      	str	r3, [r7, #48]	@ 0x30
	TxHeader.StdId = TxID;
 800089a:	f240 1311 	movw	r3, #273	@ 0x111
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxHeader.RTR = CAN_RTR_DATA;
 80008a0:	2300      	movs	r3, #0
 80008a2:	637b      	str	r3, [r7, #52]	@ 0x34
	TxHeader.DLC = 1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	63bb      	str	r3, [r7, #56]	@ 0x38

	uint8_t RxData[1] = {0};
 80008a8:	2300      	movs	r3, #0
 80008aa:	f887 3020 	strb.w	r3, [r7, #32]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  printf("main loop");

	  if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80008ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80008b6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80008ba:	4816      	ldr	r0, [pc, #88]	@ (8000914 <main+0x110>)
 80008bc:	f001 fcd0 	bl	8002260 <HAL_CAN_AddTxMessage>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <main+0xc6>
	  {
	     CAN_Error_Handler ();
 80008c6:	f7ff fe89 	bl	80005dc <CAN_Error_Handler>
	  }
	  can_err = HAL_CAN_GetError(&hcan2);
 80008ca:	4812      	ldr	r0, [pc, #72]	@ (8000914 <main+0x110>)
 80008cc:	f002 f937 	bl	8002b3e <HAL_CAN_GetError>
 80008d0:	66f8      	str	r0, [r7, #108]	@ 0x6c


	  while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) < 1) {
 80008d2:	e006      	b.n	80008e2 <main+0xde>
//	      HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxHeader, RxData);
		  can_err = HAL_CAN_GetError(&hcan2);
 80008d4:	480f      	ldr	r0, [pc, #60]	@ (8000914 <main+0x110>)
 80008d6:	f002 f932 	bl	8002b3e <HAL_CAN_GetError>
 80008da:	66f8      	str	r0, [r7, #108]	@ 0x6c

		  printf("caca");
 80008dc:	480f      	ldr	r0, [pc, #60]	@ (800091c <main+0x118>)
 80008de:	f004 fa15 	bl	8004d0c <iprintf>
	  while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) < 1) {
 80008e2:	2100      	movs	r1, #0
 80008e4:	480b      	ldr	r0, [pc, #44]	@ (8000914 <main+0x110>)
 80008e6:	f001 fead 	bl	8002644 <HAL_CAN_GetRxFifoFillLevel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d0f1      	beq.n	80008d4 <main+0xd0>
	      // process RxData
	  }

	  HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxHeader, RxData);
 80008f0:	f107 0320 	add.w	r3, r7, #32
 80008f4:	1d3a      	adds	r2, r7, #4
 80008f6:	2100      	movs	r1, #0
 80008f8:	4806      	ldr	r0, [pc, #24]	@ (8000914 <main+0x110>)
 80008fa:	f001 fd81 	bl	8002400 <HAL_CAN_GetRxMessage>

	  TxData[0]++;
 80008fe:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000902:	3301      	adds	r3, #1
 8000904:	b2db      	uxtb	r3, r3
 8000906:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
//
//	  }


//	  master_mode = 0;
	  HAL_Delay(MAIN_LOOP_DELAY_MS);
 800090a:	2064      	movs	r0, #100	@ 0x64
 800090c:	f001 f802 	bl	8001914 <HAL_Delay>
	  if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000910:	e7cd      	b.n	80008ae <main+0xaa>
 8000912:	bf00      	nop
 8000914:	200000f0 	.word	0x200000f0
 8000918:	200001c0 	.word	0x200001c0
 800091c:	08005a9c 	.word	0x08005a9c

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b094      	sub	sp, #80	@ 0x50
 8000924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	2234      	movs	r2, #52	@ 0x34
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f004 fade 	bl	8004ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <SystemClock_Config+0xb4>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094c:	4a21      	ldr	r2, [pc, #132]	@ (80009d4 <SystemClock_Config+0xb4>)
 800094e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000952:	6413      	str	r3, [r2, #64]	@ 0x40
 8000954:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <SystemClock_Config+0xb4>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000960:	2300      	movs	r3, #0
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <SystemClock_Config+0xb8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a1b      	ldr	r2, [pc, #108]	@ (80009d8 <SystemClock_Config+0xb8>)
 800096a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <SystemClock_Config+0xb8>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800097c:	2302      	movs	r3, #2
 800097e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000980:	2301      	movs	r3, #1
 8000982:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000984:	2310      	movs	r3, #16
 8000986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000988:	2300      	movs	r3, #0
 800098a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4618      	mov	r0, r3
 8000992:	f003 f9d1 	bl	8003d38 <HAL_RCC_OscConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800099c:	f000 fb00 	bl	8000fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a0:	230f      	movs	r3, #15
 80009a2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 ffdc 	bl	8003978 <HAL_RCC_ClockConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009c6:	f000 faeb 	bl	8000fa0 <Error_Handler>
  }
}
 80009ca:	bf00      	nop
 80009cc:	3750      	adds	r7, #80	@ 0x50
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40007000 	.word	0x40007000

080009dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009e2:	463b      	mov	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ee:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <MX_ADC1_Init+0x98>)
 80009f0:	4a21      	ldr	r2, [pc, #132]	@ (8000a78 <MX_ADC1_Init+0x9c>)
 80009f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a74 <MX_ADC1_Init+0x98>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <MX_ADC1_Init+0x98>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a00:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <MX_ADC1_Init+0x98>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <MX_ADC1_Init+0x98>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <MX_ADC1_Init+0x98>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a14:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <MX_ADC1_Init+0x98>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <MX_ADC1_Init+0x98>)
 8000a1c:	4a17      	ldr	r2, [pc, #92]	@ (8000a7c <MX_ADC1_Init+0xa0>)
 8000a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a20:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <MX_ADC1_Init+0x98>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a26:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <MX_ADC1_Init+0x98>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_ADC1_Init+0x98>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_ADC1_Init+0x98>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a3a:	480e      	ldr	r0, [pc, #56]	@ (8000a74 <MX_ADC1_Init+0x98>)
 8000a3c:	f000 ff8e 	bl	800195c <HAL_ADC_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a46:	f000 faab 	bl	8000fa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a4a:	2309      	movs	r3, #9
 8000a4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a56:	463b      	mov	r3, r7
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4806      	ldr	r0, [pc, #24]	@ (8000a74 <MX_ADC1_Init+0x98>)
 8000a5c:	f000 ffc2 	bl	80019e4 <HAL_ADC_ConfigChannel>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a66:	f000 fa9b 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200000a8 	.word	0x200000a8
 8000a78:	40012000 	.word	0x40012000
 8000a7c:	0f000001 	.word	0x0f000001

08000a80 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000a84:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <MX_CAN2_Init+0x64>)
 8000a86:	4a18      	ldr	r2, [pc, #96]	@ (8000ae8 <MX_CAN2_Init+0x68>)
 8000a88:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ae4 <MX_CAN2_Init+0x64>)
 8000a8c:	2210      	movs	r2, #16
 8000a8e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_LOOPBACK;
 8000a90:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <MX_CAN2_Init+0x64>)
 8000a92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a96:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <MX_CAN2_Init+0x64>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <MX_CAN2_Init+0x64>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <MX_CAN2_Init+0x64>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <MX_CAN2_Init+0x64>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <MX_CAN2_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <MX_CAN2_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000abc:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <MX_CAN2_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <MX_CAN2_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <MX_CAN2_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_CAN2_Init+0x64>)
 8000ad0:	f001 f9a6 	bl	8001e20 <HAL_CAN_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8000ada:	f000 fa61 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000f0 	.word	0x200000f0
 8000ae8:	40006800 	.word	0x40006800

08000aec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000af0:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <MX_I2C1_Init+0x50>)
 8000af2:	4a13      	ldr	r2, [pc, #76]	@ (8000b40 <MX_I2C1_Init+0x54>)
 8000af4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000af6:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <MX_I2C1_Init+0x50>)
 8000af8:	4a12      	ldr	r2, [pc, #72]	@ (8000b44 <MX_I2C1_Init+0x58>)
 8000afa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <MX_I2C1_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <MX_I2C1_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <MX_I2C1_Init+0x50>)
 8000b0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b10:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <MX_I2C1_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <MX_I2C1_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <MX_I2C1_Init+0x50>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <MX_I2C1_Init+0x50>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	@ (8000b3c <MX_I2C1_Init+0x50>)
 8000b2a:	f002 fb07 	bl	800313c <HAL_I2C_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b34:	f000 fa34 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000118 	.word	0x20000118
 8000b40:	40005400 	.word	0x40005400
 8000b44:	000186a0 	.word	0x000186a0

08000b48 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <MX_I2C3_Init+0x50>)
 8000b4e:	4a13      	ldr	r2, [pc, #76]	@ (8000b9c <MX_I2C3_Init+0x54>)
 8000b50:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000b52:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <MX_I2C3_Init+0x50>)
 8000b54:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <MX_I2C3_Init+0x58>)
 8000b56:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <MX_I2C3_Init+0x50>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <MX_I2C3_Init+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <MX_I2C3_Init+0x50>)
 8000b66:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b6a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b98 <MX_I2C3_Init+0x50>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b72:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <MX_I2C3_Init+0x50>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b78:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <MX_I2C3_Init+0x50>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7e:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <MX_I2C3_Init+0x50>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b84:	4804      	ldr	r0, [pc, #16]	@ (8000b98 <MX_I2C3_Init+0x50>)
 8000b86:	f002 fad9 	bl	800313c <HAL_I2C_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b90:	f000 fa06 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	2000016c 	.word	0x2000016c
 8000b9c:	40005c00 	.word	0x40005c00
 8000ba0:	000186a0 	.word	0x000186a0

08000ba4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c3c <MX_TIM2_Init+0x98>)
 8000bc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = PSC_1000;
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c3c <MX_TIM2_Init+0x98>)
 8000bca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c3c <MX_TIM2_Init+0x98>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = COUNTER_50MS;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	@ (8000c3c <MX_TIM2_Init+0x98>)
 8000bd8:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8000bdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bde:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <MX_TIM2_Init+0x98>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be4:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <MX_TIM2_Init+0x98>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bea:	4814      	ldr	r0, [pc, #80]	@ (8000c3c <MX_TIM2_Init+0x98>)
 8000bec:	f003 fb28 	bl	8004240 <HAL_TIM_Base_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bf6:	f000 f9d3 	bl	8000fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	4619      	mov	r1, r3
 8000c06:	480d      	ldr	r0, [pc, #52]	@ (8000c3c <MX_TIM2_Init+0x98>)
 8000c08:	f003 fcf9 	bl	80045fe <HAL_TIM_ConfigClockSource>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c12:	f000 f9c5 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c1e:	463b      	mov	r3, r7
 8000c20:	4619      	mov	r1, r3
 8000c22:	4806      	ldr	r0, [pc, #24]	@ (8000c3c <MX_TIM2_Init+0x98>)
 8000c24:	f003 ff20 	bl	8004a68 <HAL_TIMEx_MasterConfigSynchronization>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c2e:	f000 f9b7 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200001c0 	.word	0x200001c0

08000c40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	463b      	mov	r3, r7
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd4 <MX_TIM3_Init+0x94>)
 8000c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000cd8 <MX_TIM3_Init+0x98>)
 8000c60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = PSC_1000;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd4 <MX_TIM3_Init+0x94>)
 8000c64:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd4 <MX_TIM3_Init+0x94>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = COUNTER_50MS;
 8000c70:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <MX_TIM3_Init+0x94>)
 8000c72:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8000c76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c78:	4b16      	ldr	r3, [pc, #88]	@ (8000cd4 <MX_TIM3_Init+0x94>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7e:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <MX_TIM3_Init+0x94>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c84:	4813      	ldr	r0, [pc, #76]	@ (8000cd4 <MX_TIM3_Init+0x94>)
 8000c86:	f003 fadb 	bl	8004240 <HAL_TIM_Base_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c90:	f000 f986 	bl	8000fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480c      	ldr	r0, [pc, #48]	@ (8000cd4 <MX_TIM3_Init+0x94>)
 8000ca2:	f003 fcac 	bl	80045fe <HAL_TIM_ConfigClockSource>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000cac:	f000 f978 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cb8:	463b      	mov	r3, r7
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	@ (8000cd4 <MX_TIM3_Init+0x94>)
 8000cbe:	f003 fed3 	bl	8004a68 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000cc8:	f000 f96a 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000208 	.word	0x20000208
 8000cd8:	40000400 	.word	0x40000400

08000cdc <MX_USART1_IRDA_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_IRDA_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  hirda1.Instance = USART1;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_USART1_IRDA_Init+0x44>)
 8000ce2:	4a10      	ldr	r2, [pc, #64]	@ (8000d24 <MX_USART1_IRDA_Init+0x48>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hirda1.Init.BaudRate = 115200;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <MX_USART1_IRDA_Init+0x44>)
 8000ce8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cec:	605a      	str	r2, [r3, #4]
  hirda1.Init.WordLength = IRDA_WORDLENGTH_8B;
 8000cee:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_USART1_IRDA_Init+0x44>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  hirda1.Init.Parity = IRDA_PARITY_NONE;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <MX_USART1_IRDA_Init+0x44>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  hirda1.Init.Mode = IRDA_MODE_TX_RX;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_USART1_IRDA_Init+0x44>)
 8000cfc:	220c      	movs	r2, #12
 8000cfe:	611a      	str	r2, [r3, #16]
  hirda1.Init.Prescaler = 1;
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <MX_USART1_IRDA_Init+0x44>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	751a      	strb	r2, [r3, #20]
  hirda1.Init.IrDAMode = IRDA_POWERMODE_NORMAL;
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_USART1_IRDA_Init+0x44>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  if (HAL_IRDA_Init(&hirda1) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <MX_USART1_IRDA_Init+0x44>)
 8000d0e:	f002 fb59 	bl	80033c4 <HAL_IRDA_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_USART1_IRDA_Init+0x40>
  {
    Error_Handler();
 8000d18:	f000 f942 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000250 	.word	0x20000250
 8000d24:	40011000 	.word	0x40011000

08000d28 <MX_USART6_IRDA_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_IRDA_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  hirda6.Instance = USART6;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <MX_USART6_IRDA_Init+0x44>)
 8000d2e:	4a10      	ldr	r2, [pc, #64]	@ (8000d70 <MX_USART6_IRDA_Init+0x48>)
 8000d30:	601a      	str	r2, [r3, #0]
  hirda6.Init.BaudRate = 115200;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <MX_USART6_IRDA_Init+0x44>)
 8000d34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d38:	605a      	str	r2, [r3, #4]
  hirda6.Init.WordLength = IRDA_WORDLENGTH_8B;
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <MX_USART6_IRDA_Init+0x44>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  hirda6.Init.Parity = IRDA_PARITY_NONE;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <MX_USART6_IRDA_Init+0x44>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  hirda6.Init.Mode = IRDA_MODE_TX_RX;
 8000d46:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_USART6_IRDA_Init+0x44>)
 8000d48:	220c      	movs	r2, #12
 8000d4a:	611a      	str	r2, [r3, #16]
  hirda6.Init.Prescaler = 1;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <MX_USART6_IRDA_Init+0x44>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	751a      	strb	r2, [r3, #20]
  hirda6.Init.IrDAMode = IRDA_POWERMODE_NORMAL;
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <MX_USART6_IRDA_Init+0x44>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  if (HAL_IRDA_Init(&hirda6) != HAL_OK)
 8000d58:	4804      	ldr	r0, [pc, #16]	@ (8000d6c <MX_USART6_IRDA_Init+0x44>)
 8000d5a:	f002 fb33 	bl	80033c4 <HAL_IRDA_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_USART6_IRDA_Init+0x40>
  {
    Error_Handler();
 8000d64:	f000 f91c 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2000028c 	.word	0x2000028c
 8000d70:	40011400 	.word	0x40011400

08000d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	@ 0x28
 8000d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b7f      	ldr	r3, [pc, #508]	@ (8000f8c <MX_GPIO_Init+0x218>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a7e      	ldr	r2, [pc, #504]	@ (8000f8c <MX_GPIO_Init+0x218>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b7c      	ldr	r3, [pc, #496]	@ (8000f8c <MX_GPIO_Init+0x218>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b78      	ldr	r3, [pc, #480]	@ (8000f8c <MX_GPIO_Init+0x218>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a77      	ldr	r2, [pc, #476]	@ (8000f8c <MX_GPIO_Init+0x218>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b75      	ldr	r3, [pc, #468]	@ (8000f8c <MX_GPIO_Init+0x218>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	4b71      	ldr	r3, [pc, #452]	@ (8000f8c <MX_GPIO_Init+0x218>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a70      	ldr	r2, [pc, #448]	@ (8000f8c <MX_GPIO_Init+0x218>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b6e      	ldr	r3, [pc, #440]	@ (8000f8c <MX_GPIO_Init+0x218>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b6a      	ldr	r3, [pc, #424]	@ (8000f8c <MX_GPIO_Init+0x218>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a69      	ldr	r2, [pc, #420]	@ (8000f8c <MX_GPIO_Init+0x218>)
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b67      	ldr	r3, [pc, #412]	@ (8000f8c <MX_GPIO_Init+0x218>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PRECHARGE_CONTACTOR_Pin|MAIN_CONTACTOR_Pin|GPIO0_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2107      	movs	r1, #7
 8000dfe:	4864      	ldr	r0, [pc, #400]	@ (8000f90 <MX_GPIO_Init+0x21c>)
 8000e00:	f002 f950 	bl	80030a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LIGHT_Pin|CHANNEL_STATUS_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2148      	movs	r1, #72	@ 0x48
 8000e08:	4862      	ldr	r0, [pc, #392]	@ (8000f94 <MX_GPIO_Init+0x220>)
 8000e0a:	f002 f94b 	bl	80030a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO3_Pin|YELLOW_LED_Pin|RED_LED_Pin|GPIO2_Pin, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f44f 4146 	mov.w	r1, #50688	@ 0xc600
 8000e14:	4860      	ldr	r0, [pc, #384]	@ (8000f98 <MX_GPIO_Init+0x224>)
 8000e16:	f002 f945 	bl	80030a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ISOLATION_FAULT_DETECT_Pin */
  GPIO_InitStruct.Pin = ISOLATION_FAULT_DETECT_Pin;
 8000e1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ISOLATION_FAULT_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4858      	ldr	r0, [pc, #352]	@ (8000f90 <MX_GPIO_Init+0x21c>)
 8000e30:	f001 ffa4 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PRECHARGE_CONTACTOR_Pin MAIN_CONTACTOR_Pin GPIO0_Pin */
  GPIO_InitStruct.Pin = PRECHARGE_CONTACTOR_Pin|MAIN_CONTACTOR_Pin|GPIO0_Pin;
 8000e34:	2307      	movs	r3, #7
 8000e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4851      	ldr	r0, [pc, #324]	@ (8000f90 <MX_GPIO_Init+0x21c>)
 8000e4c:	f001 ff96 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGER_DETECT_Pin IGNITION_Pin */
  GPIO_InitStruct.Pin = CHARGER_DETECT_Pin|IGNITION_Pin;
 8000e50:	2328      	movs	r3, #40	@ 0x28
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e54:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	484a      	ldr	r0, [pc, #296]	@ (8000f90 <MX_GPIO_Init+0x21c>)
 8000e66:	f001 ff89 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CURRENT_Pin */
  GPIO_InitStruct.Pin = CURRENT_Pin;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CURRENT_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4845      	ldr	r0, [pc, #276]	@ (8000f94 <MX_GPIO_Init+0x220>)
 8000e7e:	f001 ff7d 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHT_Pin CHANNEL_STATUS_Pin */
  GPIO_InitStruct.Pin = LIGHT_Pin|CHANNEL_STATUS_Pin;
 8000e82:	2348      	movs	r3, #72	@ 0x48
 8000e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	483e      	ldr	r0, [pc, #248]	@ (8000f94 <MX_GPIO_Init+0x220>)
 8000e9a:	f001 ff6f 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : EMERGENCY_STOP_Pin */
  GPIO_InitStruct.Pin = EMERGENCY_STOP_Pin;
 8000e9e:	2310      	movs	r3, #16
 8000ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ea2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMERGENCY_STOP_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4837      	ldr	r0, [pc, #220]	@ (8000f90 <MX_GPIO_Init+0x21c>)
 8000eb4:	f001 ff62 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ISOLATION_FAULT_DETECTB0_Pin */
  GPIO_InitStruct.Pin = ISOLATION_FAULT_DETECTB0_Pin;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ISOLATION_FAULT_DETECTB0_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4833      	ldr	r0, [pc, #204]	@ (8000f98 <MX_GPIO_Init+0x224>)
 8000ecc:	f001 ff56 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin YELLOW_LED_Pin RED_LED_Pin GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|YELLOW_LED_Pin|RED_LED_Pin|GPIO2_Pin;
 8000ed0:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	482b      	ldr	r0, [pc, #172]	@ (8000f98 <MX_GPIO_Init+0x224>)
 8000eea:	f001 ff47 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000eee:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000ef2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000f00:	230c      	movs	r3, #12
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4821      	ldr	r0, [pc, #132]	@ (8000f90 <MX_GPIO_Init+0x21c>)
 8000f0c:	f001 ff36 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f10:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f22:	230a      	movs	r3, #10
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4819      	ldr	r0, [pc, #100]	@ (8000f94 <MX_GPIO_Init+0x220>)
 8000f2e:	f001 ff25 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f32:	2304      	movs	r3, #4
 8000f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000f42:	230c      	movs	r3, #12
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4813      	ldr	r0, [pc, #76]	@ (8000f9c <MX_GPIO_Init+0x228>)
 8000f4e:	f001 ff15 	bl	8002d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	2009      	movs	r0, #9
 8000f58:	f001 fed9 	bl	8002d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f5c:	2009      	movs	r0, #9
 8000f5e:	f001 fef2 	bl	8002d46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	200a      	movs	r0, #10
 8000f68:	f001 fed1 	bl	8002d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f6c:	200a      	movs	r0, #10
 8000f6e:	f001 feea 	bl	8002d46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	2017      	movs	r0, #23
 8000f78:	f001 fec9 	bl	8002d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f7c:	2017      	movs	r0, #23
 8000f7e:	f001 fee2 	bl	8002d46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	@ 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	40020c00 	.word	0x40020c00

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <Error_Handler+0x8>

08000fac <deactivate_main_contactor>:

	return 0;
}

void deactivate_main_contactor(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	//	Deactivate main contactor
	HAL_GPIO_WritePin(MAIN_CONTACTOR_GPIO_Port, MAIN_CONTACTOR_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	4806      	ldr	r0, [pc, #24]	@ (8000fd0 <deactivate_main_contactor+0x24>)
 8000fb6:	f002 f875 	bl	80030a4 <HAL_GPIO_WritePin>

	//  Turn OFF HV light
	HAL_GPIO_WritePin(LIGHT_GPIO_Port, LIGHT_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2108      	movs	r1, #8
 8000fbe:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <deactivate_main_contactor+0x28>)
 8000fc0:	f002 f870 	bl	80030a4 <HAL_GPIO_WritePin>
	blinking_HV_led = 0;
 8000fc4:	4b04      	ldr	r3, [pc, #16]	@ (8000fd8 <deactivate_main_contactor+0x2c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	200002fa 	.word	0x200002fa

08000fdc <deactivate_precharge_contactor>:


}

void deactivate_precharge_contactor(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	//	Deactivate main contactor
	HAL_GPIO_WritePin(PRECHARGE_PIN_GROUP, PRECHARGE_PIN, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	4809      	ldr	r0, [pc, #36]	@ (800100c <deactivate_precharge_contactor+0x30>)
 8000fe6:	f002 f85d 	bl	80030a4 <HAL_GPIO_WritePin>
	blinking_HV_led = 0;
 8000fea:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <deactivate_precharge_contactor+0x34>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]

	// If main contactor is ON, ensures that the HV light is ON
	if(HAL_GPIO_ReadPin(MAIN_CONTACTOR_GPIO_Port, MAIN_CONTACTOR_Pin) == GPIO_PIN_SET)
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	4806      	ldr	r0, [pc, #24]	@ (800100c <deactivate_precharge_contactor+0x30>)
 8000ff4:	f002 f83e 	bl	8003074 <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d104      	bne.n	8001008 <deactivate_precharge_contactor+0x2c>
		HAL_GPIO_WritePin(LIGHT_GPIO_Port, LIGHT_Pin, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2108      	movs	r1, #8
 8001002:	4804      	ldr	r0, [pc, #16]	@ (8001014 <deactivate_precharge_contactor+0x38>)
 8001004:	f002 f84e 	bl	80030a4 <HAL_GPIO_WritePin>

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40020800 	.word	0x40020800
 8001010:	200002fa 	.word	0x200002fa
 8001014:	40020000 	.word	0x40020000

08001018 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001020:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001024:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	2b00      	cmp	r3, #0
 800102e:	d013      	beq.n	8001058 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001030:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001034:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001038:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00b      	beq.n	8001058 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001040:	e000      	b.n	8001044 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001042:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001044:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f9      	beq.n	8001042 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800104e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001058:	687b      	ldr	r3, [r7, #4]
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <__io_putchar>:
#include "stdio.h"
#include "stdint.h"
#include "stm32f4xx.h"

int __io_putchar(int ch)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 // Write character to ITM ch.0
 ITM_SendChar(ch);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ffd1 	bl	8001018 <ITM_SendChar>
 return(ch);
 8001076:	687b      	ldr	r3, [r7, #4]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <store_received_info>:
extern CAN_HandleTypeDef hcan2;
extern uint8_t last_voltage_info[8];
extern uint8_t last_temp_info[8];
extern uint8_t last_balanc_info[8];

int store_received_info(CAN_RxHeaderTypeDef* RxHeader, uint8_t RxData[8]){
 8001080:	b480      	push	{r7}
 8001082:	b087      	sub	sp, #28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]

	if(RxHeader->StdId == RET_VOLTAGE_INFO_STDID){
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2baa      	cmp	r3, #170	@ 0xaa
 8001090:	d113      	bne.n	80010ba <store_received_info+0x3a>

		for(int i = 0; i < 8; i++){
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	e00b      	b.n	80010b0 <store_received_info+0x30>

			last_voltage_info[i] = RxData[i];
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	4413      	add	r3, r2
 800109e:	7819      	ldrb	r1, [r3, #0]
 80010a0:	4a21      	ldr	r2, [pc, #132]	@ (8001128 <store_received_info+0xa8>)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	4413      	add	r3, r2
 80010a6:	460a      	mov	r2, r1
 80010a8:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3301      	adds	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	2b07      	cmp	r3, #7
 80010b4:	ddf0      	ble.n	8001098 <store_received_info+0x18>

		}
		return 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e030      	b.n	800111c <store_received_info+0x9c>
	}else if(RxHeader->StdId == RET_TEMP_INFO_STDID){
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b66      	cmp	r3, #102	@ 0x66
 80010c0:	d113      	bne.n	80010ea <store_received_info+0x6a>

		for(int i = 0; i < 8; i++){
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	e00b      	b.n	80010e0 <store_received_info+0x60>

			last_temp_info[i] = RxData[i];
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	4413      	add	r3, r2
 80010ce:	7819      	ldrb	r1, [r3, #0]
 80010d0:	4a16      	ldr	r2, [pc, #88]	@ (800112c <store_received_info+0xac>)
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4413      	add	r3, r2
 80010d6:	460a      	mov	r2, r1
 80010d8:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	3301      	adds	r3, #1
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	2b07      	cmp	r3, #7
 80010e4:	ddf0      	ble.n	80010c8 <store_received_info+0x48>

		}
		return 2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	e018      	b.n	800111c <store_received_info+0x9c>

	}else if(RxHeader->StdId == RET_BALANC_INFO_STDID){
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2bbb      	cmp	r3, #187	@ 0xbb
 80010f0:	d113      	bne.n	800111a <store_received_info+0x9a>

		for(int i = 0; i < 8; i++){
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	e00b      	b.n	8001110 <store_received_info+0x90>

			last_balanc_info[i] = RxData[i];
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	4413      	add	r3, r2
 80010fe:	7819      	ldrb	r1, [r3, #0]
 8001100:	4a0b      	ldr	r2, [pc, #44]	@ (8001130 <store_received_info+0xb0>)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4413      	add	r3, r2
 8001106:	460a      	mov	r2, r1
 8001108:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3301      	adds	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2b07      	cmp	r3, #7
 8001114:	ddf0      	ble.n	80010f8 <store_received_info+0x78>

		}
		return 3;
 8001116:	2303      	movs	r3, #3
 8001118:	e000      	b.n	800111c <store_received_info+0x9c>
	}


	return 0;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	371c      	adds	r7, #28
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	200002c8 	.word	0x200002c8
 800112c:	200002d8 	.word	0x200002d8
 8001130:	200002e8 	.word	0x200002e8

08001134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <HAL_MspInit+0x4c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	4a0f      	ldr	r2, [pc, #60]	@ (8001180 <HAL_MspInit+0x4c>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001148:	6453      	str	r3, [r2, #68]	@ 0x44
 800114a:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <HAL_MspInit+0x4c>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <HAL_MspInit+0x4c>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	4a08      	ldr	r2, [pc, #32]	@ (8001180 <HAL_MspInit+0x4c>)
 8001160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001164:	6413      	str	r3, [r2, #64]	@ 0x40
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_MspInit+0x4c>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800

08001184 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	@ 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a17      	ldr	r2, [pc, #92]	@ (8001200 <HAL_ADC_MspInit+0x7c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d127      	bne.n	80011f6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <HAL_ADC_MspInit+0x80>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	4a15      	ldr	r2, [pc, #84]	@ (8001204 <HAL_ADC_MspInit+0x80>)
 80011b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011b6:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <HAL_ADC_MspInit+0x80>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <HAL_ADC_MspInit+0x80>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001204 <HAL_ADC_MspInit+0x80>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <HAL_ADC_MspInit+0x80>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LV_BATTERY_VOLTAGE_Pin;
 80011de:	2302      	movs	r3, #2
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e2:	2303      	movs	r3, #3
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LV_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	@ (8001208 <HAL_ADC_MspInit+0x84>)
 80011f2:	f001 fdc3 	bl	8002d7c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	@ 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40012000 	.word	0x40012000
 8001204:	40023800 	.word	0x40023800
 8001208:	40020400 	.word	0x40020400

0800120c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	@ 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a28      	ldr	r2, [pc, #160]	@ (80012cc <HAL_CAN_MspInit+0xc0>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d14a      	bne.n	80012c4 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b27      	ldr	r3, [pc, #156]	@ (80012d0 <HAL_CAN_MspInit+0xc4>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	4a26      	ldr	r2, [pc, #152]	@ (80012d0 <HAL_CAN_MspInit+0xc4>)
 8001238:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800123c:	6413      	str	r3, [r2, #64]	@ 0x40
 800123e:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <HAL_CAN_MspInit+0xc4>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN2_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b20      	ldr	r3, [pc, #128]	@ (80012d0 <HAL_CAN_MspInit+0xc4>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	4a1f      	ldr	r2, [pc, #124]	@ (80012d0 <HAL_CAN_MspInit+0xc4>)
 8001254:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001258:	6413      	str	r3, [r2, #64]	@ 0x40
 800125a:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <HAL_CAN_MspInit+0xc4>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <HAL_CAN_MspInit+0xc4>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a18      	ldr	r2, [pc, #96]	@ (80012d0 <HAL_CAN_MspInit+0xc4>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <HAL_CAN_MspInit+0xc4>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001282:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800128c:	2301      	movs	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001294:	2309      	movs	r3, #9
 8001296:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	480d      	ldr	r0, [pc, #52]	@ (80012d4 <HAL_CAN_MspInit+0xc8>)
 80012a0:	f001 fd6c 	bl	8002d7c <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	203f      	movs	r0, #63	@ 0x3f
 80012aa:	f001 fd30 	bl	8002d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80012ae:	203f      	movs	r0, #63	@ 0x3f
 80012b0:	f001 fd49 	bl	8002d46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	2040      	movs	r0, #64	@ 0x40
 80012ba:	f001 fd28 	bl	8002d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80012be:	2040      	movs	r0, #64	@ 0x40
 80012c0:	f001 fd41 	bl	8002d46 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN2_MspInit 1 */

  }

}
 80012c4:	bf00      	nop
 80012c6:	3728      	adds	r7, #40	@ 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40006800 	.word	0x40006800
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020400 	.word	0x40020400

080012d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	@ 0x30
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a42      	ldr	r2, [pc, #264]	@ (8001400 <HAL_I2C_MspInit+0x128>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d12c      	bne.n	8001354 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	4b41      	ldr	r3, [pc, #260]	@ (8001404 <HAL_I2C_MspInit+0x12c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a40      	ldr	r2, [pc, #256]	@ (8001404 <HAL_I2C_MspInit+0x12c>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b3e      	ldr	r3, [pc, #248]	@ (8001404 <HAL_I2C_MspInit+0x12c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_I2C_SCL_Pin|EEPROM_I2C_SDA_Pin;
 8001316:	23c0      	movs	r3, #192	@ 0xc0
 8001318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800131a:	2312      	movs	r3, #18
 800131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001326:	2304      	movs	r3, #4
 8001328:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	4835      	ldr	r0, [pc, #212]	@ (8001408 <HAL_I2C_MspInit+0x130>)
 8001332:	f001 fd23 	bl	8002d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	4b32      	ldr	r3, [pc, #200]	@ (8001404 <HAL_I2C_MspInit+0x12c>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	4a31      	ldr	r2, [pc, #196]	@ (8001404 <HAL_I2C_MspInit+0x12c>)
 8001340:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001344:	6413      	str	r3, [r2, #64]	@ 0x40
 8001346:	4b2f      	ldr	r3, [pc, #188]	@ (8001404 <HAL_I2C_MspInit+0x12c>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001352:	e050      	b.n	80013f6 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a2c      	ldr	r2, [pc, #176]	@ (800140c <HAL_I2C_MspInit+0x134>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d14b      	bne.n	80013f6 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	4b28      	ldr	r3, [pc, #160]	@ (8001404 <HAL_I2C_MspInit+0x12c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a27      	ldr	r2, [pc, #156]	@ (8001404 <HAL_I2C_MspInit+0x12c>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <HAL_I2C_MspInit+0x12c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b21      	ldr	r3, [pc, #132]	@ (8001404 <HAL_I2C_MspInit+0x12c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a20      	ldr	r2, [pc, #128]	@ (8001404 <HAL_I2C_MspInit+0x12c>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b1e      	ldr	r3, [pc, #120]	@ (8001404 <HAL_I2C_MspInit+0x12c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001396:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800139a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139c:	2312      	movs	r3, #18
 800139e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013a8:	2304      	movs	r3, #4
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	4817      	ldr	r0, [pc, #92]	@ (8001410 <HAL_I2C_MspInit+0x138>)
 80013b4:	f001 fce2 	bl	8002d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013be:	2312      	movs	r3, #18
 80013c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80013ca:	2309      	movs	r3, #9
 80013cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4619      	mov	r1, r3
 80013d4:	480c      	ldr	r0, [pc, #48]	@ (8001408 <HAL_I2C_MspInit+0x130>)
 80013d6:	f001 fcd1 	bl	8002d7c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <HAL_I2C_MspInit+0x12c>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	4a08      	ldr	r2, [pc, #32]	@ (8001404 <HAL_I2C_MspInit+0x12c>)
 80013e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ea:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <HAL_I2C_MspInit+0x12c>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
}
 80013f6:	bf00      	nop
 80013f8:	3730      	adds	r7, #48	@ 0x30
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40005400 	.word	0x40005400
 8001404:	40023800 	.word	0x40023800
 8001408:	40020400 	.word	0x40020400
 800140c:	40005c00 	.word	0x40005c00
 8001410:	40020000 	.word	0x40020000

08001414 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001424:	d116      	bne.n	8001454 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <HAL_TIM_Base_MspInit+0x80>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	4a19      	ldr	r2, [pc, #100]	@ (8001494 <HAL_TIM_Base_MspInit+0x80>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6413      	str	r3, [r2, #64]	@ 0x40
 8001436:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <HAL_TIM_Base_MspInit+0x80>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	201c      	movs	r0, #28
 8001448:	f001 fc61 	bl	8002d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800144c:	201c      	movs	r0, #28
 800144e:	f001 fc7a 	bl	8002d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001452:	e01a      	b.n	800148a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0f      	ldr	r2, [pc, #60]	@ (8001498 <HAL_TIM_Base_MspInit+0x84>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d115      	bne.n	800148a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <HAL_TIM_Base_MspInit+0x80>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	4a0b      	ldr	r2, [pc, #44]	@ (8001494 <HAL_TIM_Base_MspInit+0x80>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	6413      	str	r3, [r2, #64]	@ 0x40
 800146e:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <HAL_TIM_Base_MspInit+0x80>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	201d      	movs	r0, #29
 8001480:	f001 fc45 	bl	8002d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001484:	201d      	movs	r0, #29
 8001486:	f001 fc5e 	bl	8002d46 <HAL_NVIC_EnableIRQ>
}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800
 8001498:	40000400 	.word	0x40000400

0800149c <HAL_IRDA_MspInit>:
* This function configures the hardware resources used in this example
* @param hirda: IRDA handle pointer
* @retval None
*/
void HAL_IRDA_MspInit(IRDA_HandleTypeDef* hirda)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08c      	sub	sp, #48	@ 0x30
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  if(hirda->Instance==USART1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a32      	ldr	r2, [pc, #200]	@ (8001584 <HAL_IRDA_MspInit+0xe8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d12d      	bne.n	800151a <HAL_IRDA_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
 80014c2:	4b31      	ldr	r3, [pc, #196]	@ (8001588 <HAL_IRDA_MspInit+0xec>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c6:	4a30      	ldr	r2, [pc, #192]	@ (8001588 <HAL_IRDA_MspInit+0xec>)
 80014c8:	f043 0310 	orr.w	r3, r3, #16
 80014cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001588 <HAL_IRDA_MspInit+0xec>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	61bb      	str	r3, [r7, #24]
 80014d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	4b2a      	ldr	r3, [pc, #168]	@ (8001588 <HAL_IRDA_MspInit+0xec>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	4a29      	ldr	r2, [pc, #164]	@ (8001588 <HAL_IRDA_MspInit+0xec>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ea:	4b27      	ldr	r3, [pc, #156]	@ (8001588 <HAL_IRDA_MspInit+0xec>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = UART_MCU_TO_DEBUG_RX_Pin|UART_MCU_TO_DEBUG_TX_Pin;
 80014f6:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 80014fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001508:	2307      	movs	r3, #7
 800150a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 031c 	add.w	r3, r7, #28
 8001510:	4619      	mov	r1, r3
 8001512:	481e      	ldr	r0, [pc, #120]	@ (800158c <HAL_IRDA_MspInit+0xf0>)
 8001514:	f001 fc32 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001518:	e030      	b.n	800157c <HAL_IRDA_MspInit+0xe0>
  else if(hirda->Instance==USART6)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a1c      	ldr	r2, [pc, #112]	@ (8001590 <HAL_IRDA_MspInit+0xf4>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d12b      	bne.n	800157c <HAL_IRDA_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <HAL_IRDA_MspInit+0xec>)
 800152a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152c:	4a16      	ldr	r2, [pc, #88]	@ (8001588 <HAL_IRDA_MspInit+0xec>)
 800152e:	f043 0320 	orr.w	r3, r3, #32
 8001532:	6453      	str	r3, [r2, #68]	@ 0x44
 8001534:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <HAL_IRDA_MspInit+0xec>)
 8001536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001538:	f003 0320 	and.w	r3, r3, #32
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <HAL_IRDA_MspInit+0xec>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001548:	4a0f      	ldr	r2, [pc, #60]	@ (8001588 <HAL_IRDA_MspInit+0xec>)
 800154a:	f043 0304 	orr.w	r3, r3, #4
 800154e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001550:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <HAL_IRDA_MspInit+0xec>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800155c:	23c0      	movs	r3, #192	@ 0xc0
 800155e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800156c:	2308      	movs	r3, #8
 800156e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4619      	mov	r1, r3
 8001576:	4807      	ldr	r0, [pc, #28]	@ (8001594 <HAL_IRDA_MspInit+0xf8>)
 8001578:	f001 fc00 	bl	8002d7c <HAL_GPIO_Init>
}
 800157c:	bf00      	nop
 800157e:	3730      	adds	r7, #48	@ 0x30
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40011000 	.word	0x40011000
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000
 8001590:	40011400 	.word	0x40011400
 8001594:	40020800 	.word	0x40020800

08001598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <NMI_Handler+0x4>

080015a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <HardFault_Handler+0x4>

080015a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <MemManage_Handler+0x4>

080015b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <UsageFault_Handler+0x4>

080015c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ee:	f000 f971 	bl	80018d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CHARGER_DETECT_Pin);
 80015fa:	2008      	movs	r0, #8
 80015fc:	f001 fd86 	bl	800310c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMERGENCY_STOP_Pin);
 8001608:	2010      	movs	r0, #16
 800160a:	f001 fd7f 	bl	800310c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}

08001612 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IGNITION_Pin);
 8001616:	2020      	movs	r0, #32
 8001618:	f001 fd78 	bl	800310c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001624:	4802      	ldr	r0, [pc, #8]	@ (8001630 <TIM2_IRQHandler+0x10>)
 8001626:	f002 fefa 	bl	800441e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200001c0 	.word	0x200001c0

08001634 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001638:	4802      	ldr	r0, [pc, #8]	@ (8001644 <TIM3_IRQHandler+0x10>)
 800163a:	f002 fef0 	bl	800441e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000208 	.word	0x20000208

08001648 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <CAN2_TX_IRQHandler+0x10>)
 800164e:	f001 f847 	bl	80026e0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200000f0 	.word	0x200000f0

0800165c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <CAN2_RX0_IRQHandler+0x10>)
 8001662:	f001 f83d 	bl	80026e0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200000f0 	.word	0x200000f0

08001670 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	e00a      	b.n	8001698 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001682:	f3af 8000 	nop.w
 8001686:	4601      	mov	r1, r0
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	60ba      	str	r2, [r7, #8]
 800168e:	b2ca      	uxtb	r2, r1
 8001690:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3301      	adds	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	dbf0      	blt.n	8001682 <_read+0x12>
  }

  return len;
 80016a0:	687b      	ldr	r3, [r7, #4]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	e009      	b.n	80016d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	60ba      	str	r2, [r7, #8]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fcce 	bl	8001066 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	dbf1      	blt.n	80016bc <_write+0x12>
  }
  return len;
 80016d8:	687b      	ldr	r3, [r7, #4]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <_close>:

int _close(int file)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800170a:	605a      	str	r2, [r3, #4]
  return 0;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <_isatty>:

int _isatty(int file)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001754:	4a14      	ldr	r2, [pc, #80]	@ (80017a8 <_sbrk+0x5c>)
 8001756:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <_sbrk+0x60>)
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001760:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <_sbrk+0x64>)
 800176a:	4a12      	ldr	r2, [pc, #72]	@ (80017b4 <_sbrk+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	429a      	cmp	r2, r3
 800177a:	d207      	bcs.n	800178c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800177c:	f003 fc06 	bl	8004f8c <__errno>
 8001780:	4603      	mov	r3, r0
 8001782:	220c      	movs	r2, #12
 8001784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	e009      	b.n	80017a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800178c:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001792:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	4a05      	ldr	r2, [pc, #20]	@ (80017b0 <_sbrk+0x64>)
 800179c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179e:	68fb      	ldr	r3, [r7, #12]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20040000 	.word	0x20040000
 80017ac:	00000400 	.word	0x00000400
 80017b0:	200002fc 	.word	0x200002fc
 80017b4:	20000450 	.word	0x20000450

080017b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <SystemInit+0x20>)
 80017be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017c2:	4a05      	ldr	r2, [pc, #20]	@ (80017d8 <SystemInit+0x20>)
 80017c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80017dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001814 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017e0:	f7ff ffea 	bl	80017b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e4:	480c      	ldr	r0, [pc, #48]	@ (8001818 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017e6:	490d      	ldr	r1, [pc, #52]	@ (800181c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001820 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001824 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001828 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800180a:	f003 fbc5 	bl	8004f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800180e:	f7fe fff9 	bl	8000804 <main>
  bx  lr    
 8001812:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001814:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800181c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001820:	08005b00 	.word	0x08005b00
  ldr r2, =_sbss
 8001824:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001828:	20000450 	.word	0x20000450

0800182c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800182c:	e7fe      	b.n	800182c <ADC_IRQHandler>
	...

08001830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001834:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0d      	ldr	r2, [pc, #52]	@ (8001870 <HAL_Init+0x40>)
 800183a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800183e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001840:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0a      	ldr	r2, [pc, #40]	@ (8001870 <HAL_Init+0x40>)
 8001846:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800184a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800184c:	4b08      	ldr	r3, [pc, #32]	@ (8001870 <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a07      	ldr	r2, [pc, #28]	@ (8001870 <HAL_Init+0x40>)
 8001852:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001856:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001858:	2003      	movs	r0, #3
 800185a:	f001 fa4d 	bl	8002cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185e:	200f      	movs	r0, #15
 8001860:	f000 f808 	bl	8001874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001864:	f7ff fc66 	bl	8001134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023c00 	.word	0x40023c00

08001874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800187c:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <HAL_InitTick+0x54>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <HAL_InitTick+0x58>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800188a:	fbb3 f3f1 	udiv	r3, r3, r1
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f001 fa65 	bl	8002d62 <HAL_SYSTICK_Config>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e00e      	b.n	80018c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b0f      	cmp	r3, #15
 80018a6:	d80a      	bhi.n	80018be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a8:	2200      	movs	r2, #0
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f001 fa2d 	bl	8002d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b4:	4a06      	ldr	r2, [pc, #24]	@ (80018d0 <HAL_InitTick+0x5c>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e000      	b.n	80018c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000000 	.word	0x20000000
 80018cc:	20000008 	.word	0x20000008
 80018d0:	20000004 	.word	0x20000004

080018d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_IncTick+0x20>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <HAL_IncTick+0x24>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a04      	ldr	r2, [pc, #16]	@ (80018f8 <HAL_IncTick+0x24>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000008 	.word	0x20000008
 80018f8:	20000300 	.word	0x20000300

080018fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b03      	ldr	r3, [pc, #12]	@ (8001910 <HAL_GetTick+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000300 	.word	0x20000300

08001914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff ffee 	bl	80018fc <HAL_GetTick>
 8001920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192c:	d005      	beq.n	800193a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192e:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <HAL_Delay+0x44>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800193a:	bf00      	nop
 800193c:	f7ff ffde 	bl	80018fc <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	429a      	cmp	r2, r3
 800194a:	d8f7      	bhi.n	800193c <HAL_Delay+0x28>
  {
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000008 	.word	0x20000008

0800195c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e033      	b.n	80019da <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff fc02 	bl	8001184 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	2b00      	cmp	r3, #0
 8001998:	d118      	bne.n	80019cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019a2:	f023 0302 	bic.w	r3, r3, #2
 80019a6:	f043 0202 	orr.w	r2, r3, #2
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f93a 	bl	8001c28 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	f023 0303 	bic.w	r3, r3, #3
 80019c2:	f043 0201 	orr.w	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80019ca:	e001      	b.n	80019d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x1c>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e105      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x228>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b09      	cmp	r3, #9
 8001a0e:	d925      	bls.n	8001a5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68d9      	ldr	r1, [r3, #12]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	3b1e      	subs	r3, #30
 8001a26:	2207      	movs	r2, #7
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43da      	mvns	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	400a      	ands	r2, r1
 8001a34:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68d9      	ldr	r1, [r3, #12]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	4603      	mov	r3, r0
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4403      	add	r3, r0
 8001a4e:	3b1e      	subs	r3, #30
 8001a50:	409a      	lsls	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	e022      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6919      	ldr	r1, [r3, #16]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	2207      	movs	r2, #7
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6919      	ldr	r1, [r3, #16]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4618      	mov	r0, r3
 8001a92:	4603      	mov	r3, r0
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4403      	add	r3, r0
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d824      	bhi.n	8001af4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	3b05      	subs	r3, #5
 8001abc:	221f      	movs	r2, #31
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	400a      	ands	r2, r1
 8001aca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	4618      	mov	r0, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3b05      	subs	r3, #5
 8001ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001af2:	e04c      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b0c      	cmp	r3, #12
 8001afa:	d824      	bhi.n	8001b46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3b23      	subs	r3, #35	@ 0x23
 8001b0e:	221f      	movs	r2, #31
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43da      	mvns	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	3b23      	subs	r3, #35	@ 0x23
 8001b38:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b44:	e023      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	3b41      	subs	r3, #65	@ 0x41
 8001b58:	221f      	movs	r2, #31
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	400a      	ands	r2, r1
 8001b66:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4618      	mov	r0, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	3b41      	subs	r3, #65	@ 0x41
 8001b82:	fa00 f203 	lsl.w	r2, r0, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b8e:	4b22      	ldr	r3, [pc, #136]	@ (8001c18 <HAL_ADC_ConfigChannel+0x234>)
 8001b90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a21      	ldr	r2, [pc, #132]	@ (8001c1c <HAL_ADC_ConfigChannel+0x238>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d109      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1cc>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b12      	cmp	r3, #18
 8001ba2:	d105      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a19      	ldr	r2, [pc, #100]	@ (8001c1c <HAL_ADC_ConfigChannel+0x238>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d123      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x21e>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b10      	cmp	r3, #16
 8001bc0:	d003      	beq.n	8001bca <HAL_ADC_ConfigChannel+0x1e6>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b11      	cmp	r3, #17
 8001bc8:	d11b      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b10      	cmp	r3, #16
 8001bdc:	d111      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bde:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <HAL_ADC_ConfigChannel+0x23c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a10      	ldr	r2, [pc, #64]	@ (8001c24 <HAL_ADC_ConfigChannel+0x240>)
 8001be4:	fba2 2303 	umull	r2, r3, r2, r3
 8001be8:	0c9a      	lsrs	r2, r3, #18
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001bf4:	e002      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f9      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40012300 	.word	0x40012300
 8001c1c:	40012000 	.word	0x40012000
 8001c20:	20000000 	.word	0x20000000
 8001c24:	431bde83 	.word	0x431bde83

08001c28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c30:	4b79      	ldr	r3, [pc, #484]	@ (8001e18 <ADC_Init+0x1f0>)
 8001c32:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	021a      	lsls	r2, r3, #8
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6899      	ldr	r1, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cba:	4a58      	ldr	r2, [pc, #352]	@ (8001e1c <ADC_Init+0x1f4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d022      	beq.n	8001d06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6899      	ldr	r1, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6899      	ldr	r1, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	e00f      	b.n	8001d26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d24:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0202 	bic.w	r2, r2, #2
 8001d34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6899      	ldr	r1, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7e1b      	ldrb	r3, [r3, #24]
 8001d40:	005a      	lsls	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d01b      	beq.n	8001d8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d62:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6859      	ldr	r1, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	035a      	lsls	r2, r3, #13
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	e007      	b.n	8001d9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d9a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001daa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	051a      	lsls	r2, r3, #20
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6899      	ldr	r1, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001dde:	025a      	lsls	r2, r3, #9
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001df6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6899      	ldr	r1, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	029a      	lsls	r2, r3, #10
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	609a      	str	r2, [r3, #8]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	40012300 	.word	0x40012300
 8001e1c:	0f000001 	.word	0x0f000001

08001e20 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e0ed      	b.n	800200e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff f9e4 	bl	800120c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e54:	f7ff fd52 	bl	80018fc <HAL_GetTick>
 8001e58:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e5a:	e012      	b.n	8001e82 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e5c:	f7ff fd4e 	bl	80018fc <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b0a      	cmp	r3, #10
 8001e68:	d90b      	bls.n	8001e82 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2205      	movs	r2, #5
 8001e7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0c5      	b.n	800200e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0e5      	beq.n	8001e5c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0202 	bic.w	r2, r2, #2
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea0:	f7ff fd2c 	bl	80018fc <HAL_GetTick>
 8001ea4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ea6:	e012      	b.n	8001ece <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ea8:	f7ff fd28 	bl	80018fc <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b0a      	cmp	r3, #10
 8001eb4:	d90b      	bls.n	8001ece <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2205      	movs	r2, #5
 8001ec6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e09f      	b.n	800200e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1e5      	bne.n	8001ea8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	7e1b      	ldrb	r3, [r3, #24]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d108      	bne.n	8001ef6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	e007      	b.n	8001f06 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	7e5b      	ldrb	r3, [r3, #25]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d108      	bne.n	8001f20 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	e007      	b.n	8001f30 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	7e9b      	ldrb	r3, [r3, #26]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d108      	bne.n	8001f4a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0220 	orr.w	r2, r2, #32
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	e007      	b.n	8001f5a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0220 	bic.w	r2, r2, #32
 8001f58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	7edb      	ldrb	r3, [r3, #27]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d108      	bne.n	8001f74 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0210 	bic.w	r2, r2, #16
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	e007      	b.n	8001f84 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0210 	orr.w	r2, r2, #16
 8001f82:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	7f1b      	ldrb	r3, [r3, #28]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d108      	bne.n	8001f9e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0208 	orr.w	r2, r2, #8
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	e007      	b.n	8001fae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0208 	bic.w	r2, r2, #8
 8001fac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	7f5b      	ldrb	r3, [r3, #29]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d108      	bne.n	8001fc8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 0204 	orr.w	r2, r2, #4
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	e007      	b.n	8001fd8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0204 	bic.w	r2, r2, #4
 8001fd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	ea42 0103 	orr.w	r1, r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	1e5a      	subs	r2, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800202e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002030:	7cfb      	ldrb	r3, [r7, #19]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d003      	beq.n	800203e <HAL_CAN_ConfigFilter+0x26>
 8002036:	7cfb      	ldrb	r3, [r7, #19]
 8002038:	2b02      	cmp	r3, #2
 800203a:	f040 80be 	bne.w	80021ba <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800203e:	4b65      	ldr	r3, [pc, #404]	@ (80021d4 <HAL_CAN_ConfigFilter+0x1bc>)
 8002040:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002048:	f043 0201 	orr.w	r2, r3, #1
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002058:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206c:	021b      	lsls	r3, r3, #8
 800206e:	431a      	orrs	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f003 031f 	and.w	r3, r3, #31
 800207e:	2201      	movs	r2, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	43db      	mvns	r3, r3
 8002090:	401a      	ands	r2, r3
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d123      	bne.n	80020e8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	401a      	ands	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	3248      	adds	r2, #72	@ 0x48
 80020c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020de:	6979      	ldr	r1, [r7, #20]
 80020e0:	3348      	adds	r3, #72	@ 0x48
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	440b      	add	r3, r1
 80020e6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d122      	bne.n	8002136 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	431a      	orrs	r2, r3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002110:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	3248      	adds	r2, #72	@ 0x48
 8002116:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800212a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800212c:	6979      	ldr	r1, [r7, #20]
 800212e:	3348      	adds	r3, #72	@ 0x48
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	43db      	mvns	r3, r3
 8002148:	401a      	ands	r2, r3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002150:	e007      	b.n	8002162 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	431a      	orrs	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	43db      	mvns	r3, r3
 8002174:	401a      	ands	r2, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800217c:	e007      	b.n	800218e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	431a      	orrs	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d107      	bne.n	80021a6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	431a      	orrs	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80021ac:	f023 0201 	bic.w	r2, r3, #1
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e006      	b.n	80021c8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
  }
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	371c      	adds	r7, #28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40006400 	.word	0x40006400

080021d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d12e      	bne.n	800224a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0201 	bic.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002204:	f7ff fb7a 	bl	80018fc <HAL_GetTick>
 8002208:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800220a:	e012      	b.n	8002232 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800220c:	f7ff fb76 	bl	80018fc <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b0a      	cmp	r3, #10
 8002218:	d90b      	bls.n	8002232 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2205      	movs	r2, #5
 800222a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e012      	b.n	8002258 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1e5      	bne.n	800220c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	e006      	b.n	8002258 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
  }
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	@ 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002274:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800227e:	7ffb      	ldrb	r3, [r7, #31]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d003      	beq.n	800228c <HAL_CAN_AddTxMessage+0x2c>
 8002284:	7ffb      	ldrb	r3, [r7, #31]
 8002286:	2b02      	cmp	r3, #2
 8002288:	f040 80ad 	bne.w	80023e6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10a      	bne.n	80022ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 8095 	beq.w	80023d6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	0e1b      	lsrs	r3, r3, #24
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80022b6:	2201      	movs	r2, #1
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	409a      	lsls	r2, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10d      	bne.n	80022e4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022d2:	68f9      	ldr	r1, [r7, #12]
 80022d4:	6809      	ldr	r1, [r1, #0]
 80022d6:	431a      	orrs	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	3318      	adds	r3, #24
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	440b      	add	r3, r1
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	e00f      	b.n	8002304 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022ee:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022f4:	68f9      	ldr	r1, [r7, #12]
 80022f6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80022f8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	3318      	adds	r3, #24
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	440b      	add	r3, r1
 8002302:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6819      	ldr	r1, [r3, #0]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	3318      	adds	r3, #24
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	440b      	add	r3, r1
 8002314:	3304      	adds	r3, #4
 8002316:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	7d1b      	ldrb	r3, [r3, #20]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d111      	bne.n	8002344 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	3318      	adds	r3, #24
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	4413      	add	r3, r2
 800232c:	3304      	adds	r3, #4
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	6811      	ldr	r1, [r2, #0]
 8002334:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3318      	adds	r3, #24
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	440b      	add	r3, r1
 8002340:	3304      	adds	r3, #4
 8002342:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3307      	adds	r3, #7
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	061a      	lsls	r2, r3, #24
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3306      	adds	r3, #6
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	041b      	lsls	r3, r3, #16
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3305      	adds	r3, #5
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	4313      	orrs	r3, r2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	3204      	adds	r2, #4
 8002364:	7812      	ldrb	r2, [r2, #0]
 8002366:	4610      	mov	r0, r2
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	6811      	ldr	r1, [r2, #0]
 800236c:	ea43 0200 	orr.w	r2, r3, r0
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	440b      	add	r3, r1
 8002376:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800237a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3303      	adds	r3, #3
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	061a      	lsls	r2, r3, #24
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3302      	adds	r3, #2
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	041b      	lsls	r3, r3, #16
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3301      	adds	r3, #1
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	4313      	orrs	r3, r2
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	7812      	ldrb	r2, [r2, #0]
 800239c:	4610      	mov	r0, r2
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	6811      	ldr	r1, [r2, #0]
 80023a2:	ea43 0200 	orr.w	r2, r3, r0
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	440b      	add	r3, r1
 80023ac:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80023b0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	3318      	adds	r3, #24
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	4413      	add	r3, r2
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	6811      	ldr	r1, [r2, #0]
 80023c4:	f043 0201 	orr.w	r2, r3, #1
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	3318      	adds	r3, #24
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	440b      	add	r3, r1
 80023d0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e00e      	b.n	80023f4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e006      	b.n	80023f4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
  }
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3724      	adds	r7, #36	@ 0x24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002414:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002416:	7dfb      	ldrb	r3, [r7, #23]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d003      	beq.n	8002424 <HAL_CAN_GetRxMessage+0x24>
 800241c:	7dfb      	ldrb	r3, [r7, #23]
 800241e:	2b02      	cmp	r3, #2
 8002420:	f040 8103 	bne.w	800262a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10e      	bne.n	8002448 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d116      	bne.n	8002466 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0f7      	b.n	8002638 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d107      	bne.n	8002466 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e0e8      	b.n	8002638 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	331b      	adds	r3, #27
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	4413      	add	r3, r2
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0204 	and.w	r2, r3, #4
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10c      	bne.n	800249e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	331b      	adds	r3, #27
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	4413      	add	r3, r2
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	0d5b      	lsrs	r3, r3, #21
 8002494:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	e00b      	b.n	80024b6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	331b      	adds	r3, #27
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	4413      	add	r3, r2
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	08db      	lsrs	r3, r3, #3
 80024ae:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	331b      	adds	r3, #27
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	4413      	add	r3, r2
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0202 	and.w	r2, r3, #2
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	331b      	adds	r3, #27
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	4413      	add	r3, r2
 80024d8:	3304      	adds	r3, #4
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2208      	movs	r2, #8
 80024e8:	611a      	str	r2, [r3, #16]
 80024ea:	e00b      	b.n	8002504 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	331b      	adds	r3, #27
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	4413      	add	r3, r2
 80024f8:	3304      	adds	r3, #4
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 020f 	and.w	r2, r3, #15
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	331b      	adds	r3, #27
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	4413      	add	r3, r2
 8002510:	3304      	adds	r3, #4
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	0a1b      	lsrs	r3, r3, #8
 8002516:	b2da      	uxtb	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	331b      	adds	r3, #27
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	4413      	add	r3, r2
 8002528:	3304      	adds	r3, #4
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	b29a      	uxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	4413      	add	r3, r2
 800253e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	4413      	add	r3, r2
 8002554:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	0a1a      	lsrs	r2, r3, #8
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	3301      	adds	r3, #1
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	4413      	add	r3, r2
 800256e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0c1a      	lsrs	r2, r3, #16
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	3302      	adds	r3, #2
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	4413      	add	r3, r2
 8002588:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	0e1a      	lsrs	r2, r3, #24
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	3303      	adds	r3, #3
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	3304      	adds	r3, #4
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	0a1a      	lsrs	r2, r3, #8
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	3305      	adds	r3, #5
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0c1a      	lsrs	r2, r3, #16
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	3306      	adds	r3, #6
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	0e1a      	lsrs	r2, r3, #24
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	3307      	adds	r3, #7
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d108      	bne.n	8002616 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0220 	orr.w	r2, r2, #32
 8002612:	60da      	str	r2, [r3, #12]
 8002614:	e007      	b.n	8002626 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0220 	orr.w	r2, r2, #32
 8002624:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	e006      	b.n	8002638 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
  }
}
 8002638:	4618      	mov	r0, r3
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002658:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800265a:	7afb      	ldrb	r3, [r7, #11]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d002      	beq.n	8002666 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002660:	7afb      	ldrb	r3, [r7, #11]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d10f      	bne.n	8002686 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d106      	bne.n	800267a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	e005      	b.n	8002686 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002686:	68fb      	ldr	r3, [r7, #12]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d002      	beq.n	80026b2 <HAL_CAN_ActivateNotification+0x1e>
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d109      	bne.n	80026c6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6959      	ldr	r1, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e006      	b.n	80026d4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
  }
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	@ 0x28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d07c      	beq.n	8002820 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d023      	beq.n	8002778 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2201      	movs	r2, #1
 8002736:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f983 	bl	8002a4e <HAL_CAN_TxMailbox0CompleteCallback>
 8002748:	e016      	b.n	8002778 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d004      	beq.n	800275e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800275a:	627b      	str	r3, [r7, #36]	@ 0x24
 800275c:	e00c      	b.n	8002778 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d004      	beq.n	8002772 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800276e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002770:	e002      	b.n	8002778 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f989 	bl	8002a8a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d024      	beq.n	80027cc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800278a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f963 	bl	8002a62 <HAL_CAN_TxMailbox1CompleteCallback>
 800279c:	e016      	b.n	80027cc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d004      	beq.n	80027b2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80027a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80027b0:	e00c      	b.n	80027cc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d004      	beq.n	80027c6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80027bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80027c4:	e002      	b.n	80027cc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f969 	bl	8002a9e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d024      	beq.n	8002820 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80027de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f943 	bl	8002a76 <HAL_CAN_TxMailbox2CompleteCallback>
 80027f0:	e016      	b.n	8002820 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d004      	beq.n	8002806 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002802:	627b      	str	r3, [r7, #36]	@ 0x24
 8002804:	e00c      	b.n	8002820 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d004      	beq.n	800281a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002812:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002816:	627b      	str	r3, [r7, #36]	@ 0x24
 8002818:	e002      	b.n	8002820 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f949 	bl	8002ab2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00c      	beq.n	8002844 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	2b00      	cmp	r3, #0
 8002832:	d007      	beq.n	8002844 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2210      	movs	r2, #16
 8002842:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d006      	beq.n	8002866 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2208      	movs	r2, #8
 800285e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f930 	bl	8002ac6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d009      	beq.n	8002884 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fd feb2 	bl	80005e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00c      	beq.n	80028a8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2210      	movs	r2, #16
 80028a6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	f003 0320 	and.w	r3, r3, #32
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00b      	beq.n	80028ca <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d006      	beq.n	80028ca <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2208      	movs	r2, #8
 80028c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f912 	bl	8002aee <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d009      	beq.n	80028e8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f8f9 	bl	8002ada <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00b      	beq.n	800290a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d006      	beq.n	800290a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2210      	movs	r2, #16
 8002902:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f8fc 	bl	8002b02 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00b      	beq.n	800292c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d006      	beq.n	800292c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2208      	movs	r2, #8
 8002924:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f8f5 	bl	8002b16 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d07b      	beq.n	8002a2e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d072      	beq.n	8002a26 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d008      	beq.n	800295c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002962:	2b00      	cmp	r3, #0
 8002964:	d008      	beq.n	8002978 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002972:	f043 0302 	orr.w	r3, r3, #2
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800297e:	2b00      	cmp	r3, #0
 8002980:	d008      	beq.n	8002994 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800298c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298e:	f043 0304 	orr.w	r3, r3, #4
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800299a:	2b00      	cmp	r3, #0
 800299c:	d043      	beq.n	8002a26 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d03e      	beq.n	8002a26 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029ae:	2b60      	cmp	r3, #96	@ 0x60
 80029b0:	d02b      	beq.n	8002a0a <HAL_CAN_IRQHandler+0x32a>
 80029b2:	2b60      	cmp	r3, #96	@ 0x60
 80029b4:	d82e      	bhi.n	8002a14 <HAL_CAN_IRQHandler+0x334>
 80029b6:	2b50      	cmp	r3, #80	@ 0x50
 80029b8:	d022      	beq.n	8002a00 <HAL_CAN_IRQHandler+0x320>
 80029ba:	2b50      	cmp	r3, #80	@ 0x50
 80029bc:	d82a      	bhi.n	8002a14 <HAL_CAN_IRQHandler+0x334>
 80029be:	2b40      	cmp	r3, #64	@ 0x40
 80029c0:	d019      	beq.n	80029f6 <HAL_CAN_IRQHandler+0x316>
 80029c2:	2b40      	cmp	r3, #64	@ 0x40
 80029c4:	d826      	bhi.n	8002a14 <HAL_CAN_IRQHandler+0x334>
 80029c6:	2b30      	cmp	r3, #48	@ 0x30
 80029c8:	d010      	beq.n	80029ec <HAL_CAN_IRQHandler+0x30c>
 80029ca:	2b30      	cmp	r3, #48	@ 0x30
 80029cc:	d822      	bhi.n	8002a14 <HAL_CAN_IRQHandler+0x334>
 80029ce:	2b10      	cmp	r3, #16
 80029d0:	d002      	beq.n	80029d8 <HAL_CAN_IRQHandler+0x2f8>
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d005      	beq.n	80029e2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80029d6:	e01d      	b.n	8002a14 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	f043 0308 	orr.w	r3, r3, #8
 80029de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029e0:	e019      	b.n	8002a16 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	f043 0310 	orr.w	r3, r3, #16
 80029e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029ea:	e014      	b.n	8002a16 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	f043 0320 	orr.w	r3, r3, #32
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029f4:	e00f      	b.n	8002a16 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029fe:	e00a      	b.n	8002a16 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a08:	e005      	b.n	8002a16 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a12:	e000      	b.n	8002a16 <HAL_CAN_IRQHandler+0x336>
            break;
 8002a14:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699a      	ldr	r2, [r3, #24]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002a24:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f872 	bl	8002b2a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002a46:	bf00      	nop
 8002a48:	3728      	adds	r7, #40	@ 0x28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <__NVIC_SetPriorityGrouping>:
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b68:	4b0c      	ldr	r3, [pc, #48]	@ (8002b9c <__NVIC_SetPriorityGrouping+0x44>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b74:	4013      	ands	r3, r2
 8002b76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b8a:	4a04      	ldr	r2, [pc, #16]	@ (8002b9c <__NVIC_SetPriorityGrouping+0x44>)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	60d3      	str	r3, [r2, #12]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <__NVIC_GetPriorityGrouping>:
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba4:	4b04      	ldr	r3, [pc, #16]	@ (8002bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	f003 0307 	and.w	r3, r3, #7
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <__NVIC_EnableIRQ>:
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	db0b      	blt.n	8002be6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	f003 021f 	and.w	r2, r3, #31
 8002bd4:	4907      	ldr	r1, [pc, #28]	@ (8002bf4 <__NVIC_EnableIRQ+0x38>)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	2001      	movs	r0, #1
 8002bde:	fa00 f202 	lsl.w	r2, r0, r2
 8002be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000e100 	.word	0xe000e100

08002bf8 <__NVIC_SetPriority>:
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	6039      	str	r1, [r7, #0]
 8002c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	db0a      	blt.n	8002c22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	490c      	ldr	r1, [pc, #48]	@ (8002c44 <__NVIC_SetPriority+0x4c>)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	0112      	lsls	r2, r2, #4
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002c20:	e00a      	b.n	8002c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4908      	ldr	r1, [pc, #32]	@ (8002c48 <__NVIC_SetPriority+0x50>)
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	3b04      	subs	r3, #4
 8002c30:	0112      	lsls	r2, r2, #4
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	440b      	add	r3, r1
 8002c36:	761a      	strb	r2, [r3, #24]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000e100 	.word	0xe000e100
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <NVIC_EncodePriority>:
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b089      	sub	sp, #36	@ 0x24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f1c3 0307 	rsb	r3, r3, #7
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	bf28      	it	cs
 8002c6a:	2304      	movcs	r3, #4
 8002c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3304      	adds	r3, #4
 8002c72:	2b06      	cmp	r3, #6
 8002c74:	d902      	bls.n	8002c7c <NVIC_EncodePriority+0x30>
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3b03      	subs	r3, #3
 8002c7a:	e000      	b.n	8002c7e <NVIC_EncodePriority+0x32>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43da      	mvns	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	401a      	ands	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c94:	f04f 31ff 	mov.w	r1, #4294967295
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9e:	43d9      	mvns	r1, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	4313      	orrs	r3, r2
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3724      	adds	r7, #36	@ 0x24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <SysTick_Config>:
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cc4:	d301      	bcc.n	8002cca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e00f      	b.n	8002cea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cca:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf4 <SysTick_Config+0x40>)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cd2:	210f      	movs	r1, #15
 8002cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd8:	f7ff ff8e 	bl	8002bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cdc:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <SysTick_Config+0x40>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ce2:	4b04      	ldr	r3, [pc, #16]	@ (8002cf4 <SysTick_Config+0x40>)
 8002ce4:	2207      	movs	r2, #7
 8002ce6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	e000e010 	.word	0xe000e010

08002cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff ff29 	bl	8002b58 <__NVIC_SetPriorityGrouping>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	4603      	mov	r3, r0
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d20:	f7ff ff3e 	bl	8002ba0 <__NVIC_GetPriorityGrouping>
 8002d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	6978      	ldr	r0, [r7, #20]
 8002d2c:	f7ff ff8e 	bl	8002c4c <NVIC_EncodePriority>
 8002d30:	4602      	mov	r2, r0
 8002d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff5d 	bl	8002bf8 <__NVIC_SetPriority>
}
 8002d3e:	bf00      	nop
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff31 	bl	8002bbc <__NVIC_EnableIRQ>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff ffa2 	bl	8002cb4 <SysTick_Config>
 8002d70:	4603      	mov	r3, r0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b089      	sub	sp, #36	@ 0x24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	e153      	b.n	8003040 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d98:	2201      	movs	r2, #1
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4013      	ands	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	f040 8142 	bne.w	800303a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d005      	beq.n	8002dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d130      	bne.n	8002e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	2203      	movs	r2, #3
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e04:	2201      	movs	r2, #1
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 0201 	and.w	r2, r3, #1
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d017      	beq.n	8002e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	2203      	movs	r2, #3
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d123      	bne.n	8002ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	08da      	lsrs	r2, r3, #3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3208      	adds	r2, #8
 8002e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	220f      	movs	r2, #15
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	08da      	lsrs	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3208      	adds	r2, #8
 8002eba:	69b9      	ldr	r1, [r7, #24]
 8002ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2203      	movs	r2, #3
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0203 	and.w	r2, r3, #3
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 809c 	beq.w	800303a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	4b54      	ldr	r3, [pc, #336]	@ (8003058 <HAL_GPIO_Init+0x2dc>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0a:	4a53      	ldr	r2, [pc, #332]	@ (8003058 <HAL_GPIO_Init+0x2dc>)
 8002f0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f12:	4b51      	ldr	r3, [pc, #324]	@ (8003058 <HAL_GPIO_Init+0x2dc>)
 8002f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f1e:	4a4f      	ldr	r2, [pc, #316]	@ (800305c <HAL_GPIO_Init+0x2e0>)
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	089b      	lsrs	r3, r3, #2
 8002f24:	3302      	adds	r3, #2
 8002f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	220f      	movs	r2, #15
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a46      	ldr	r2, [pc, #280]	@ (8003060 <HAL_GPIO_Init+0x2e4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <HAL_GPIO_Init+0x1f6>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a45      	ldr	r2, [pc, #276]	@ (8003064 <HAL_GPIO_Init+0x2e8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00d      	beq.n	8002f6e <HAL_GPIO_Init+0x1f2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a44      	ldr	r2, [pc, #272]	@ (8003068 <HAL_GPIO_Init+0x2ec>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d007      	beq.n	8002f6a <HAL_GPIO_Init+0x1ee>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a43      	ldr	r2, [pc, #268]	@ (800306c <HAL_GPIO_Init+0x2f0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d101      	bne.n	8002f66 <HAL_GPIO_Init+0x1ea>
 8002f62:	2303      	movs	r3, #3
 8002f64:	e006      	b.n	8002f74 <HAL_GPIO_Init+0x1f8>
 8002f66:	2307      	movs	r3, #7
 8002f68:	e004      	b.n	8002f74 <HAL_GPIO_Init+0x1f8>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e002      	b.n	8002f74 <HAL_GPIO_Init+0x1f8>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <HAL_GPIO_Init+0x1f8>
 8002f72:	2300      	movs	r3, #0
 8002f74:	69fa      	ldr	r2, [r7, #28]
 8002f76:	f002 0203 	and.w	r2, r2, #3
 8002f7a:	0092      	lsls	r2, r2, #2
 8002f7c:	4093      	lsls	r3, r2
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f84:	4935      	ldr	r1, [pc, #212]	@ (800305c <HAL_GPIO_Init+0x2e0>)
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	089b      	lsrs	r3, r3, #2
 8002f8a:	3302      	adds	r3, #2
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f92:	4b37      	ldr	r3, [pc, #220]	@ (8003070 <HAL_GPIO_Init+0x2f4>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fb6:	4a2e      	ldr	r2, [pc, #184]	@ (8003070 <HAL_GPIO_Init+0x2f4>)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8003070 <HAL_GPIO_Init+0x2f4>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fe0:	4a23      	ldr	r2, [pc, #140]	@ (8003070 <HAL_GPIO_Init+0x2f4>)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fe6:	4b22      	ldr	r3, [pc, #136]	@ (8003070 <HAL_GPIO_Init+0x2f4>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800300a:	4a19      	ldr	r2, [pc, #100]	@ (8003070 <HAL_GPIO_Init+0x2f4>)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003010:	4b17      	ldr	r3, [pc, #92]	@ (8003070 <HAL_GPIO_Init+0x2f4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003034:	4a0e      	ldr	r2, [pc, #56]	@ (8003070 <HAL_GPIO_Init+0x2f4>)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	3301      	adds	r3, #1
 800303e:	61fb      	str	r3, [r7, #28]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	2b0f      	cmp	r3, #15
 8003044:	f67f aea8 	bls.w	8002d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003048:	bf00      	nop
 800304a:	bf00      	nop
 800304c:	3724      	adds	r7, #36	@ 0x24
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40023800 	.word	0x40023800
 800305c:	40013800 	.word	0x40013800
 8003060:	40020000 	.word	0x40020000
 8003064:	40020400 	.word	0x40020400
 8003068:	40020800 	.word	0x40020800
 800306c:	40020c00 	.word	0x40020c00
 8003070:	40013c00 	.word	0x40013c00

08003074 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	887b      	ldrh	r3, [r7, #2]
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
 8003090:	e001      	b.n	8003096 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003092:	2300      	movs	r3, #0
 8003094:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003096:	7bfb      	ldrb	r3, [r7, #15]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	807b      	strh	r3, [r7, #2]
 80030b0:	4613      	mov	r3, r2
 80030b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030b4:	787b      	ldrb	r3, [r7, #1]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ba:	887a      	ldrh	r2, [r7, #2]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030c0:	e003      	b.n	80030ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030c2:	887b      	ldrh	r3, [r7, #2]
 80030c4:	041a      	lsls	r2, r3, #16
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	619a      	str	r2, [r3, #24]
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b085      	sub	sp, #20
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	460b      	mov	r3, r1
 80030e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030e8:	887a      	ldrh	r2, [r7, #2]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4013      	ands	r3, r2
 80030ee:	041a      	lsls	r2, r3, #16
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	43d9      	mvns	r1, r3
 80030f4:	887b      	ldrh	r3, [r7, #2]
 80030f6:	400b      	ands	r3, r1
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	619a      	str	r2, [r3, #24]
}
 80030fe:	bf00      	nop
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003116:	4b08      	ldr	r3, [pc, #32]	@ (8003138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d006      	beq.n	8003130 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003122:	4a05      	ldr	r2, [pc, #20]	@ (8003138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fd fb38 	bl	80007a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40013c00 	.word	0x40013c00

0800313c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e12b      	b.n	80033a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fe f8b8 	bl	80012d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2224      	movs	r2, #36	@ 0x24
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800318e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800319e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031a0:	f000 fda2 	bl	8003ce8 <HAL_RCC_GetPCLK1Freq>
 80031a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4a81      	ldr	r2, [pc, #516]	@ (80033b0 <HAL_I2C_Init+0x274>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d807      	bhi.n	80031c0 <HAL_I2C_Init+0x84>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4a80      	ldr	r2, [pc, #512]	@ (80033b4 <HAL_I2C_Init+0x278>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	bf94      	ite	ls
 80031b8:	2301      	movls	r3, #1
 80031ba:	2300      	movhi	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	e006      	b.n	80031ce <HAL_I2C_Init+0x92>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4a7d      	ldr	r2, [pc, #500]	@ (80033b8 <HAL_I2C_Init+0x27c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	bf94      	ite	ls
 80031c8:	2301      	movls	r3, #1
 80031ca:	2300      	movhi	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e0e7      	b.n	80033a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4a78      	ldr	r2, [pc, #480]	@ (80033bc <HAL_I2C_Init+0x280>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	0c9b      	lsrs	r3, r3, #18
 80031e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4a6a      	ldr	r2, [pc, #424]	@ (80033b0 <HAL_I2C_Init+0x274>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d802      	bhi.n	8003210 <HAL_I2C_Init+0xd4>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	3301      	adds	r3, #1
 800320e:	e009      	b.n	8003224 <HAL_I2C_Init+0xe8>
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003216:	fb02 f303 	mul.w	r3, r2, r3
 800321a:	4a69      	ldr	r2, [pc, #420]	@ (80033c0 <HAL_I2C_Init+0x284>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	099b      	lsrs	r3, r3, #6
 8003222:	3301      	adds	r3, #1
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	430b      	orrs	r3, r1
 800322a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003236:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	495c      	ldr	r1, [pc, #368]	@ (80033b0 <HAL_I2C_Init+0x274>)
 8003240:	428b      	cmp	r3, r1
 8003242:	d819      	bhi.n	8003278 <HAL_I2C_Init+0x13c>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1e59      	subs	r1, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003252:	1c59      	adds	r1, r3, #1
 8003254:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003258:	400b      	ands	r3, r1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <HAL_I2C_Init+0x138>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1e59      	subs	r1, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	fbb1 f3f3 	udiv	r3, r1, r3
 800326c:	3301      	adds	r3, #1
 800326e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003272:	e051      	b.n	8003318 <HAL_I2C_Init+0x1dc>
 8003274:	2304      	movs	r3, #4
 8003276:	e04f      	b.n	8003318 <HAL_I2C_Init+0x1dc>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d111      	bne.n	80032a4 <HAL_I2C_Init+0x168>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1e58      	subs	r0, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	440b      	add	r3, r1
 800328e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003292:	3301      	adds	r3, #1
 8003294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e012      	b.n	80032ca <HAL_I2C_Init+0x18e>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	1e58      	subs	r0, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6859      	ldr	r1, [r3, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	0099      	lsls	r1, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ba:	3301      	adds	r3, #1
 80032bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bf0c      	ite	eq
 80032c4:	2301      	moveq	r3, #1
 80032c6:	2300      	movne	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_I2C_Init+0x196>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e022      	b.n	8003318 <HAL_I2C_Init+0x1dc>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10e      	bne.n	80032f8 <HAL_I2C_Init+0x1bc>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1e58      	subs	r0, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6859      	ldr	r1, [r3, #4]
 80032e2:	460b      	mov	r3, r1
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	440b      	add	r3, r1
 80032e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ec:	3301      	adds	r3, #1
 80032ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032f6:	e00f      	b.n	8003318 <HAL_I2C_Init+0x1dc>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1e58      	subs	r0, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	0099      	lsls	r1, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	fbb0 f3f3 	udiv	r3, r0, r3
 800330e:	3301      	adds	r3, #1
 8003310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003314:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	6809      	ldr	r1, [r1, #0]
 800331c:	4313      	orrs	r3, r2
 800331e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69da      	ldr	r2, [r3, #28]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003346:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6911      	ldr	r1, [r2, #16]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68d2      	ldr	r2, [r2, #12]
 8003352:	4311      	orrs	r1, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	430b      	orrs	r3, r1
 800335a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695a      	ldr	r2, [r3, #20]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	000186a0 	.word	0x000186a0
 80033b4:	001e847f 	.word	0x001e847f
 80033b8:	003d08ff 	.word	0x003d08ff
 80033bc:	431bde83 	.word	0x431bde83
 80033c0:	10624dd3 	.word	0x10624dd3

080033c4 <HAL_IRDA_Init>:
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IRDA_Init(IRDA_HandleTypeDef *hirda)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the IRDA handle allocation */
  if (hirda == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_IRDA_Init+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e05e      	b.n	8003494 <HAL_IRDA_Init+0xd0>
  /* Check the IRDA instance parameters */
  assert_param(IS_IRDA_INSTANCE(hirda->Instance));
  /* Check the IRDA mode parameter in the IRDA handle */
  assert_param(IS_IRDA_POWERMODE(hirda->Init.IrDAMode));

  if (hirda->gState == HAL_IRDA_STATE_RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_IRDA_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hirda->Lock = HAL_UNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware */
    hirda->MspInitCallback(hirda);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_IRDA_MspInit(hirda);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fe f856 	bl	800149c <HAL_IRDA_MspInit>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
  }

  hirda->gState = HAL_IRDA_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2224      	movs	r2, #36	@ 0x24
 80033f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable the IRDA peripheral */
  __HAL_IRDA_DISABLE(hirda);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003406:	60da      	str	r2, [r3, #12]

  /* Set the IRDA communication parameters */
  IRDA_SetConfig(hirda);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f847 	bl	800349c <IRDA_SetConfig>

  /* In IrDA mode, the following bits must be kept cleared:
  - LINEN, STOP and CLKEN bits in the USART_CR2 register,
  - SCEN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(hirda->Instance->CR2, (USART_CR2_LINEN | USART_CR2_STOP | USART_CR2_CLKEN));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 42f0 	bic.w	r2, r2, #30720	@ 0x7800
 800341c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0228 	bic.w	r2, r2, #40	@ 0x28
 800342c:	615a      	str	r2, [r3, #20]

  /* Enable the IRDA peripheral */
  __HAL_IRDA_ENABLE(hirda);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800343c:	60da      	str	r2, [r3, #12]

  /* Set the prescaler */
  MODIFY_REG(hirda->Instance->GTPR, USART_GTPR_PSC, hirda->Init.Prescaler);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	7d1b      	ldrb	r3, [r3, #20]
 800344c:	4619      	mov	r1, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	619a      	str	r2, [r3, #24]

  /* Configure the IrDA mode */
  MODIFY_REG(hirda->Instance->CR3, USART_CR3_IRLP, hirda->Init.IrDAMode);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f023 0104 	bic.w	r1, r3, #4
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699a      	ldr	r2, [r3, #24]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	615a      	str	r2, [r3, #20]

  /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
  SET_BIT(hirda->Instance->CR3, USART_CR3_IREN);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0202 	orr.w	r2, r2, #2
 800347a:	615a      	str	r2, [r3, #20]

  /* Initialize the IRDA state*/
  hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	639a      	str	r2, [r3, #56]	@ 0x38
  hirda->gState = HAL_IRDA_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hirda->RxState = HAL_IRDA_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <IRDA_SetConfig>:
  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *                the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_SetConfig(IRDA_HandleTypeDef *hirda)
{
 800349c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a0:	b0bb      	sub	sp, #236	@ 0xec
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
  assert_param(IS_IRDA_MODE(hirda->Init.Mode));
  assert_param(IS_IRDA_POWERMODE(hirda->Init.IrDAMode));

  /*-------------------------- USART CR2 Configuration ------------------------*/
  /* Clear STOP[13:12] bits */
  CLEAR_BIT(hirda->Instance->CR2, USART_CR2_STOP);
 80034a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6919      	ldr	r1, [r3, #16]
 80034b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	f421 5340 	bic.w	r3, r1, #12288	@ 0x3000
 80034ba:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  /* Clear M, PCE, PS, TE and RE bits */
  CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 80034bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68d9      	ldr	r1, [r3, #12]
 80034c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	f421 53b0 	bic.w	r3, r1, #5632	@ 0x1600
 80034ce:	f023 030c 	bic.w	r3, r3, #12
 80034d2:	60d3      	str	r3, [r2, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to hirda->Init.WordLength value
     Set PCE and PS bits according to hirda->Init.Parity value
     Set TE and RE bits according to hirda->Init.Mode value */
  /* Write to USART CR1 */
  SET_BIT(hirda->Instance->CR1, (hirda->Init.WordLength | hirda->Init.Parity | hirda->Init.Mode));
 80034d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68d8      	ldr	r0, [r3, #12]
 80034dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	ea42 0103 	orr.w	r1, r2, r3
 80034f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	ea40 0301 	orr.w	r3, r0, r1
 80034fe:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8003500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6959      	ldr	r1, [r3, #20]
 8003508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
 8003512:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
   }
#elif defined(USART6)
  if((hirda->Instance == USART1) || (hirda->Instance == USART6))
 8003514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4b90      	ldr	r3, [pc, #576]	@ (800375c <IRDA_SetConfig+0x2c0>)
 800351c:	429a      	cmp	r2, r3
 800351e:	d006      	beq.n	800352e <IRDA_SetConfig+0x92>
 8003520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4b8e      	ldr	r3, [pc, #568]	@ (8003760 <IRDA_SetConfig+0x2c4>)
 8003528:	429a      	cmp	r2, r3
 800352a:	f040 811d 	bne.w	8003768 <IRDA_SetConfig+0x2cc>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800352e:	f000 fbef 	bl	8003d10 <HAL_RCC_GetPCLK2Freq>
 8003532:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
    SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
 8003536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689d      	ldr	r5, [r3, #8]
 800353e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003542:	2200      	movs	r2, #0
 8003544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003548:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800354c:	e9d7 ab34 	ldrd	sl, fp, [r7, #208]	@ 0xd0
 8003550:	4652      	mov	r2, sl
 8003552:	465b      	mov	r3, fp
 8003554:	1891      	adds	r1, r2, r2
 8003556:	6439      	str	r1, [r7, #64]	@ 0x40
 8003558:	415b      	adcs	r3, r3
 800355a:	647b      	str	r3, [r7, #68]	@ 0x44
 800355c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003560:	4651      	mov	r1, sl
 8003562:	eb12 0801 	adds.w	r8, r2, r1
 8003566:	4659      	mov	r1, fp
 8003568:	eb43 0901 	adc.w	r9, r3, r1
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003578:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800357c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003580:	4690      	mov	r8, r2
 8003582:	4699      	mov	r9, r3
 8003584:	4653      	mov	r3, sl
 8003586:	eb18 0303 	adds.w	r3, r8, r3
 800358a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800358e:	465b      	mov	r3, fp
 8003590:	eb49 0303 	adc.w	r3, r9, r3
 8003594:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80035b4:	4649      	mov	r1, r9
 80035b6:	008b      	lsls	r3, r1, #2
 80035b8:	4641      	mov	r1, r8
 80035ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035be:	4641      	mov	r1, r8
 80035c0:	008a      	lsls	r2, r1, #2
 80035c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035c6:	f7fc fe73 	bl	80002b0 <__aeabi_uldivmod>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4b65      	ldr	r3, [pc, #404]	@ (8003764 <IRDA_SetConfig+0x2c8>)
 80035d0:	fba3 2302 	umull	r2, r3, r3, r2
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	011c      	lsls	r4, r3, #4
 80035d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035dc:	2200      	movs	r2, #0
 80035de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035e2:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80035e6:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80035ea:	4642      	mov	r2, r8
 80035ec:	464b      	mov	r3, r9
 80035ee:	1891      	adds	r1, r2, r2
 80035f0:	63b9      	str	r1, [r7, #56]	@ 0x38
 80035f2:	415b      	adcs	r3, r3
 80035f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80035fa:	4641      	mov	r1, r8
 80035fc:	1851      	adds	r1, r2, r1
 80035fe:	6339      	str	r1, [r7, #48]	@ 0x30
 8003600:	4649      	mov	r1, r9
 8003602:	414b      	adcs	r3, r1
 8003604:	637b      	str	r3, [r7, #52]	@ 0x34
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003612:	4659      	mov	r1, fp
 8003614:	00cb      	lsls	r3, r1, #3
 8003616:	4651      	mov	r1, sl
 8003618:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800361c:	4651      	mov	r1, sl
 800361e:	00ca      	lsls	r2, r1, #3
 8003620:	4610      	mov	r0, r2
 8003622:	4619      	mov	r1, r3
 8003624:	4603      	mov	r3, r0
 8003626:	4642      	mov	r2, r8
 8003628:	189b      	adds	r3, r3, r2
 800362a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800362e:	464b      	mov	r3, r9
 8003630:	460a      	mov	r2, r1
 8003632:	eb42 0303 	adc.w	r3, r2, r3
 8003636:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800363a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003646:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8003656:	4649      	mov	r1, r9
 8003658:	008b      	lsls	r3, r1, #2
 800365a:	4641      	mov	r1, r8
 800365c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003660:	4641      	mov	r1, r8
 8003662:	008a      	lsls	r2, r1, #2
 8003664:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003668:	f7fc fe22 	bl	80002b0 <__aeabi_uldivmod>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4611      	mov	r1, r2
 8003672:	4b3c      	ldr	r3, [pc, #240]	@ (8003764 <IRDA_SetConfig+0x2c8>)
 8003674:	fba3 2301 	umull	r2, r3, r3, r1
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	2264      	movs	r2, #100	@ 0x64
 800367c:	fb02 f303 	mul.w	r3, r2, r3
 8003680:	1acb      	subs	r3, r1, r3
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	3332      	adds	r3, #50	@ 0x32
 8003686:	4a37      	ldr	r2, [pc, #220]	@ (8003764 <IRDA_SetConfig+0x2c8>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003692:	441c      	add	r4, r3
 8003694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003698:	2200      	movs	r2, #0
 800369a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800369e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80036a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80036a6:	4642      	mov	r2, r8
 80036a8:	464b      	mov	r3, r9
 80036aa:	1891      	adds	r1, r2, r2
 80036ac:	62b9      	str	r1, [r7, #40]	@ 0x28
 80036ae:	415b      	adcs	r3, r3
 80036b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036b6:	4641      	mov	r1, r8
 80036b8:	1851      	adds	r1, r2, r1
 80036ba:	6239      	str	r1, [r7, #32]
 80036bc:	4649      	mov	r1, r9
 80036be:	414b      	adcs	r3, r1
 80036c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 80036ce:	4659      	mov	r1, fp
 80036d0:	00cb      	lsls	r3, r1, #3
 80036d2:	4651      	mov	r1, sl
 80036d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036d8:	4651      	mov	r1, sl
 80036da:	00ca      	lsls	r2, r1, #3
 80036dc:	4610      	mov	r0, r2
 80036de:	4619      	mov	r1, r3
 80036e0:	4603      	mov	r3, r0
 80036e2:	4642      	mov	r2, r8
 80036e4:	189b      	adds	r3, r3, r2
 80036e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80036ea:	464b      	mov	r3, r9
 80036ec:	460a      	mov	r2, r1
 80036ee:	eb42 0303 	adc.w	r3, r2, r3
 80036f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80036f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003702:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	f04f 0300 	mov.w	r3, #0
 800370e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8003712:	4649      	mov	r1, r9
 8003714:	008b      	lsls	r3, r1, #2
 8003716:	4641      	mov	r1, r8
 8003718:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800371c:	4641      	mov	r1, r8
 800371e:	008a      	lsls	r2, r1, #2
 8003720:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003724:	f7fc fdc4 	bl	80002b0 <__aeabi_uldivmod>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4b0d      	ldr	r3, [pc, #52]	@ (8003764 <IRDA_SetConfig+0x2c8>)
 800372e:	fba3 1302 	umull	r1, r3, r3, r2
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	2164      	movs	r1, #100	@ 0x64
 8003736:	fb01 f303 	mul.w	r3, r1, r3
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	3332      	adds	r3, #50	@ 0x32
 8003740:	4a08      	ldr	r2, [pc, #32]	@ (8003764 <IRDA_SetConfig+0x2c8>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	f003 030f 	and.w	r3, r3, #15
 800374c:	18e2      	adds	r2, r4, r3
 800374e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	432a      	orrs	r2, r5
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	e106      	b.n	8003968 <IRDA_SetConfig+0x4cc>
 800375a:	bf00      	nop
 800375c:	40011000 	.word	0x40011000
 8003760:	40011400 	.word	0x40011400
 8003764:	51eb851f 	.word	0x51eb851f
    SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
  }
#endif /* USART6 */
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003768:	f000 fabe 	bl	8003ce8 <HAL_RCC_GetPCLK1Freq>
 800376c:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
    SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
 8003770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689e      	ldr	r6, [r3, #8]
 8003778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800377c:	2200      	movs	r2, #0
 800377e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003782:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003786:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800378a:	4642      	mov	r2, r8
 800378c:	464b      	mov	r3, r9
 800378e:	1891      	adds	r1, r2, r2
 8003790:	61b9      	str	r1, [r7, #24]
 8003792:	415b      	adcs	r3, r3
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800379a:	4641      	mov	r1, r8
 800379c:	1854      	adds	r4, r2, r1
 800379e:	4649      	mov	r1, r9
 80037a0:	eb43 0501 	adc.w	r5, r3, r1
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	00eb      	lsls	r3, r5, #3
 80037ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037b2:	00e2      	lsls	r2, r4, #3
 80037b4:	4614      	mov	r4, r2
 80037b6:	461d      	mov	r5, r3
 80037b8:	4643      	mov	r3, r8
 80037ba:	18e3      	adds	r3, r4, r3
 80037bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037c0:	464b      	mov	r3, r9
 80037c2:	eb45 0303 	adc.w	r3, r5, r3
 80037c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037d4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80037e2:	4629      	mov	r1, r5
 80037e4:	008b      	lsls	r3, r1, #2
 80037e6:	4621      	mov	r1, r4
 80037e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037ec:	4621      	mov	r1, r4
 80037ee:	008a      	lsls	r2, r1, #2
 80037f0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80037f4:	f7fc fd5c 	bl	80002b0 <__aeabi_uldivmod>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4b5d      	ldr	r3, [pc, #372]	@ (8003974 <IRDA_SetConfig+0x4d8>)
 80037fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	011c      	lsls	r4, r3, #4
 8003806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800380a:	2200      	movs	r2, #0
 800380c:	673b      	str	r3, [r7, #112]	@ 0x70
 800380e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003810:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003814:	4642      	mov	r2, r8
 8003816:	464b      	mov	r3, r9
 8003818:	1891      	adds	r1, r2, r2
 800381a:	6139      	str	r1, [r7, #16]
 800381c:	415b      	adcs	r3, r3
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003824:	4641      	mov	r1, r8
 8003826:	eb12 0a01 	adds.w	sl, r2, r1
 800382a:	4649      	mov	r1, r9
 800382c:	eb43 0b01 	adc.w	fp, r3, r1
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800383c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003844:	4692      	mov	sl, r2
 8003846:	469b      	mov	fp, r3
 8003848:	4643      	mov	r3, r8
 800384a:	eb1a 0303 	adds.w	r3, sl, r3
 800384e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003850:	464b      	mov	r3, r9
 8003852:	eb4b 0303 	adc.w	r3, fp, r3
 8003856:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	663b      	str	r3, [r7, #96]	@ 0x60
 8003862:	667a      	str	r2, [r7, #100]	@ 0x64
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003870:	4649      	mov	r1, r9
 8003872:	008b      	lsls	r3, r1, #2
 8003874:	4641      	mov	r1, r8
 8003876:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800387a:	4641      	mov	r1, r8
 800387c:	008a      	lsls	r2, r1, #2
 800387e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003882:	f7fc fd15 	bl	80002b0 <__aeabi_uldivmod>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4611      	mov	r1, r2
 800388c:	4b39      	ldr	r3, [pc, #228]	@ (8003974 <IRDA_SetConfig+0x4d8>)
 800388e:	fba3 2301 	umull	r2, r3, r3, r1
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	2264      	movs	r2, #100	@ 0x64
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	1acb      	subs	r3, r1, r3
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	3332      	adds	r3, #50	@ 0x32
 80038a0:	4a34      	ldr	r2, [pc, #208]	@ (8003974 <IRDA_SetConfig+0x4d8>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038ac:	441c      	add	r4, r3
 80038ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038b2:	2200      	movs	r2, #0
 80038b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038b6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80038b8:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 80038bc:	4642      	mov	r2, r8
 80038be:	464b      	mov	r3, r9
 80038c0:	1891      	adds	r1, r2, r2
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	415b      	adcs	r3, r3
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038cc:	4641      	mov	r1, r8
 80038ce:	1851      	adds	r1, r2, r1
 80038d0:	6039      	str	r1, [r7, #0]
 80038d2:	4649      	mov	r1, r9
 80038d4:	414b      	adcs	r3, r1
 80038d6:	607b      	str	r3, [r7, #4]
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038e4:	4659      	mov	r1, fp
 80038e6:	00cb      	lsls	r3, r1, #3
 80038e8:	4651      	mov	r1, sl
 80038ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ee:	4651      	mov	r1, sl
 80038f0:	00ca      	lsls	r2, r1, #3
 80038f2:	4610      	mov	r0, r2
 80038f4:	4619      	mov	r1, r3
 80038f6:	4603      	mov	r3, r0
 80038f8:	4642      	mov	r2, r8
 80038fa:	189b      	adds	r3, r3, r2
 80038fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80038fe:	464b      	mov	r3, r9
 8003900:	460a      	mov	r2, r1
 8003902:	eb42 0303 	adc.w	r3, r2, r3
 8003906:	657b      	str	r3, [r7, #84]	@ 0x54
 8003908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003912:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8003920:	4649      	mov	r1, r9
 8003922:	008b      	lsls	r3, r1, #2
 8003924:	4641      	mov	r1, r8
 8003926:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800392a:	4641      	mov	r1, r8
 800392c:	008a      	lsls	r2, r1, #2
 800392e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8003932:	f7fc fcbd 	bl	80002b0 <__aeabi_uldivmod>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4b0e      	ldr	r3, [pc, #56]	@ (8003974 <IRDA_SetConfig+0x4d8>)
 800393c:	fba3 1302 	umull	r1, r3, r3, r2
 8003940:	095b      	lsrs	r3, r3, #5
 8003942:	2164      	movs	r1, #100	@ 0x64
 8003944:	fb01 f303 	mul.w	r3, r1, r3
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	3332      	adds	r3, #50	@ 0x32
 800394e:	4a09      	ldr	r2, [pc, #36]	@ (8003974 <IRDA_SetConfig+0x4d8>)
 8003950:	fba2 2303 	umull	r2, r3, r2, r3
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	18e2      	adds	r2, r4, r3
 800395c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4332      	orrs	r2, r6
 8003964:	609a      	str	r2, [r3, #8]
  }
}
 8003966:	bf00      	nop
 8003968:	bf00      	nop
 800396a:	37ec      	adds	r7, #236	@ 0xec
 800396c:	46bd      	mov	sp, r7
 800396e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003972:	bf00      	nop
 8003974:	51eb851f 	.word	0x51eb851f

08003978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0cc      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800398c:	4b68      	ldr	r3, [pc, #416]	@ (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d90c      	bls.n	80039b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399a:	4b65      	ldr	r3, [pc, #404]	@ (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a2:	4b63      	ldr	r3, [pc, #396]	@ (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0b8      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d020      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039cc:	4b59      	ldr	r3, [pc, #356]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4a58      	ldr	r2, [pc, #352]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039e4:	4b53      	ldr	r3, [pc, #332]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4a52      	ldr	r2, [pc, #328]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f0:	4b50      	ldr	r3, [pc, #320]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	494d      	ldr	r1, [pc, #308]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d044      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d107      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a16:	4b47      	ldr	r3, [pc, #284]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d119      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e07f      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d003      	beq.n	8003a36 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d107      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a36:	4b3f      	ldr	r3, [pc, #252]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e06f      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a46:	4b3b      	ldr	r3, [pc, #236]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e067      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a56:	4b37      	ldr	r3, [pc, #220]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f023 0203 	bic.w	r2, r3, #3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4934      	ldr	r1, [pc, #208]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a68:	f7fd ff48 	bl	80018fc <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a70:	f7fd ff44 	bl	80018fc <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e04f      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a86:	4b2b      	ldr	r3, [pc, #172]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 020c 	and.w	r2, r3, #12
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d1eb      	bne.n	8003a70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a98:	4b25      	ldr	r3, [pc, #148]	@ (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d20c      	bcs.n	8003ac0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b22      	ldr	r3, [pc, #136]	@ (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aae:	4b20      	ldr	r3, [pc, #128]	@ (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e032      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003acc:	4b19      	ldr	r3, [pc, #100]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4916      	ldr	r1, [pc, #88]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aea:	4b12      	ldr	r3, [pc, #72]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	490e      	ldr	r1, [pc, #56]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003afe:	f000 f821 	bl	8003b44 <HAL_RCC_GetSysClockFreq>
 8003b02:	4602      	mov	r2, r0
 8003b04:	4b0b      	ldr	r3, [pc, #44]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	490a      	ldr	r1, [pc, #40]	@ (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 8003b10:	5ccb      	ldrb	r3, [r1, r3]
 8003b12:	fa22 f303 	lsr.w	r3, r2, r3
 8003b16:	4a09      	ldr	r2, [pc, #36]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b1a:	4b09      	ldr	r3, [pc, #36]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fd fea8 	bl	8001874 <HAL_InitTick>

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40023c00 	.word	0x40023c00
 8003b34:	40023800 	.word	0x40023800
 8003b38:	08005aa4 	.word	0x08005aa4
 8003b3c:	20000000 	.word	0x20000000
 8003b40:	20000004 	.word	0x20000004

08003b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b48:	b090      	sub	sp, #64	@ 0x40
 8003b4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b5c:	4b59      	ldr	r3, [pc, #356]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 030c 	and.w	r3, r3, #12
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d00d      	beq.n	8003b84 <HAL_RCC_GetSysClockFreq+0x40>
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	f200 80a1 	bhi.w	8003cb0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_RCC_GetSysClockFreq+0x34>
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d003      	beq.n	8003b7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b76:	e09b      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b78:	4b53      	ldr	r3, [pc, #332]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b7c:	e09b      	b.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b7e:	4b53      	ldr	r3, [pc, #332]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x188>)
 8003b80:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b82:	e098      	b.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b84:	4b4f      	ldr	r3, [pc, #316]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b8e:	4b4d      	ldr	r3, [pc, #308]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d028      	beq.n	8003bec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	099b      	lsrs	r3, r3, #6
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	623b      	str	r3, [r7, #32]
 8003ba4:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bac:	2100      	movs	r1, #0
 8003bae:	4b47      	ldr	r3, [pc, #284]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x188>)
 8003bb0:	fb03 f201 	mul.w	r2, r3, r1
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	fb00 f303 	mul.w	r3, r0, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	4a43      	ldr	r2, [pc, #268]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x188>)
 8003bbe:	fba0 1202 	umull	r1, r2, r0, r2
 8003bc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bc4:	460a      	mov	r2, r1
 8003bc6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003bc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bca:	4413      	add	r3, r2
 8003bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	61bb      	str	r3, [r7, #24]
 8003bd4:	61fa      	str	r2, [r7, #28]
 8003bd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003bde:	f7fc fb67 	bl	80002b0 <__aeabi_uldivmod>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4613      	mov	r3, r2
 8003be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bea:	e053      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bec:	4b35      	ldr	r3, [pc, #212]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	099b      	lsrs	r3, r3, #6
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	617a      	str	r2, [r7, #20]
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003bfe:	f04f 0b00 	mov.w	fp, #0
 8003c02:	4652      	mov	r2, sl
 8003c04:	465b      	mov	r3, fp
 8003c06:	f04f 0000 	mov.w	r0, #0
 8003c0a:	f04f 0100 	mov.w	r1, #0
 8003c0e:	0159      	lsls	r1, r3, #5
 8003c10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c14:	0150      	lsls	r0, r2, #5
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	ebb2 080a 	subs.w	r8, r2, sl
 8003c1e:	eb63 090b 	sbc.w	r9, r3, fp
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c36:	ebb2 0408 	subs.w	r4, r2, r8
 8003c3a:	eb63 0509 	sbc.w	r5, r3, r9
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	f04f 0300 	mov.w	r3, #0
 8003c46:	00eb      	lsls	r3, r5, #3
 8003c48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c4c:	00e2      	lsls	r2, r4, #3
 8003c4e:	4614      	mov	r4, r2
 8003c50:	461d      	mov	r5, r3
 8003c52:	eb14 030a 	adds.w	r3, r4, sl
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	eb45 030b 	adc.w	r3, r5, fp
 8003c5c:	607b      	str	r3, [r7, #4]
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	028b      	lsls	r3, r1, #10
 8003c6e:	4621      	mov	r1, r4
 8003c70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c74:	4621      	mov	r1, r4
 8003c76:	028a      	lsls	r2, r1, #10
 8003c78:	4610      	mov	r0, r2
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c7e:	2200      	movs	r2, #0
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	60fa      	str	r2, [r7, #12]
 8003c84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c88:	f7fc fb12 	bl	80002b0 <__aeabi_uldivmod>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4613      	mov	r3, r2
 8003c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c94:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	0c1b      	lsrs	r3, r3, #16
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003ca4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cae:	e002      	b.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cb0:	4b05      	ldr	r3, [pc, #20]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3740      	adds	r7, #64	@ 0x40
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	00f42400 	.word	0x00f42400
 8003ccc:	017d7840 	.word	0x017d7840

08003cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cd4:	4b03      	ldr	r3, [pc, #12]	@ (8003ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	20000000 	.word	0x20000000

08003ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cec:	f7ff fff0 	bl	8003cd0 <HAL_RCC_GetHCLKFreq>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	4b05      	ldr	r3, [pc, #20]	@ (8003d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	0a9b      	lsrs	r3, r3, #10
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	4903      	ldr	r1, [pc, #12]	@ (8003d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cfe:	5ccb      	ldrb	r3, [r1, r3]
 8003d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	08005ab4 	.word	0x08005ab4

08003d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d14:	f7ff ffdc 	bl	8003cd0 <HAL_RCC_GetHCLKFreq>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	4b05      	ldr	r3, [pc, #20]	@ (8003d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	0b5b      	lsrs	r3, r3, #13
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	4903      	ldr	r1, [pc, #12]	@ (8003d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d26:	5ccb      	ldrb	r3, [r1, r3]
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40023800 	.word	0x40023800
 8003d34:	08005ab4 	.word	0x08005ab4

08003d38 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e273      	b.n	8004232 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d075      	beq.n	8003e42 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d56:	4b88      	ldr	r3, [pc, #544]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d00c      	beq.n	8003d7c <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d62:	4b85      	ldr	r3, [pc, #532]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
        || \
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d112      	bne.n	8003d94 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d6e:	4b82      	ldr	r3, [pc, #520]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d7a:	d10b      	bne.n	8003d94 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d05b      	beq.n	8003e40 <HAL_RCC_OscConfig+0x108>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d157      	bne.n	8003e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e24e      	b.n	8004232 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d9c:	d106      	bne.n	8003dac <HAL_RCC_OscConfig+0x74>
 8003d9e:	4b76      	ldr	r3, [pc, #472]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a75      	ldr	r2, [pc, #468]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	e01d      	b.n	8003de8 <HAL_RCC_OscConfig+0xb0>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x98>
 8003db6:	4b70      	ldr	r3, [pc, #448]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a6f      	ldr	r2, [pc, #444]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a6c      	ldr	r2, [pc, #432]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	e00b      	b.n	8003de8 <HAL_RCC_OscConfig+0xb0>
 8003dd0:	4b69      	ldr	r3, [pc, #420]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a68      	ldr	r2, [pc, #416]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	4b66      	ldr	r3, [pc, #408]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a65      	ldr	r2, [pc, #404]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d013      	beq.n	8003e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fd fd84 	bl	80018fc <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df8:	f7fd fd80 	bl	80018fc <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b64      	cmp	r3, #100	@ 0x64
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e213      	b.n	8004232 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0a:	4b5b      	ldr	r3, [pc, #364]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0xc0>
 8003e16:	e014      	b.n	8003e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e18:	f7fd fd70 	bl	80018fc <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e20:	f7fd fd6c 	bl	80018fc <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b64      	cmp	r3, #100	@ 0x64
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e1ff      	b.n	8004232 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e32:	4b51      	ldr	r3, [pc, #324]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f0      	bne.n	8003e20 <HAL_RCC_OscConfig+0xe8>
 8003e3e:	e000      	b.n	8003e42 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d063      	beq.n	8003f16 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00b      	beq.n	8003e72 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5a:	4b47      	ldr	r3, [pc, #284]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d11c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e66:	4b44      	ldr	r3, [pc, #272]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d116      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e72:	4b41      	ldr	r3, [pc, #260]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <HAL_RCC_OscConfig+0x152>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d001      	beq.n	8003e8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e1d3      	b.n	8004232 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4937      	ldr	r1, [pc, #220]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9e:	e03a      	b.n	8003f16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d020      	beq.n	8003eea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea8:	4b34      	ldr	r3, [pc, #208]	@ (8003f7c <HAL_RCC_OscConfig+0x244>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eae:	f7fd fd25 	bl	80018fc <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb6:	f7fd fd21 	bl	80018fc <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e1b4      	b.n	8004232 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0f0      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed4:	4b28      	ldr	r3, [pc, #160]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	4925      	ldr	r1, [pc, #148]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	600b      	str	r3, [r1, #0]
 8003ee8:	e015      	b.n	8003f16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eea:	4b24      	ldr	r3, [pc, #144]	@ (8003f7c <HAL_RCC_OscConfig+0x244>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fd fd04 	bl	80018fc <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef8:	f7fd fd00 	bl	80018fc <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e193      	b.n	8004232 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d036      	beq.n	8003f90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d016      	beq.n	8003f58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f2a:	4b15      	ldr	r3, [pc, #84]	@ (8003f80 <HAL_RCC_OscConfig+0x248>)
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f30:	f7fd fce4 	bl	80018fc <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f38:	f7fd fce0 	bl	80018fc <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e173      	b.n	8004232 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f78 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCC_OscConfig+0x200>
 8003f56:	e01b      	b.n	8003f90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f58:	4b09      	ldr	r3, [pc, #36]	@ (8003f80 <HAL_RCC_OscConfig+0x248>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5e:	f7fd fccd 	bl	80018fc <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f64:	e00e      	b.n	8003f84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f66:	f7fd fcc9 	bl	80018fc <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d907      	bls.n	8003f84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e15c      	b.n	8004232 <HAL_RCC_OscConfig+0x4fa>
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	42470000 	.word	0x42470000
 8003f80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f84:	4b8a      	ldr	r3, [pc, #552]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 8003f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1ea      	bne.n	8003f66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8097 	beq.w	80040cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa2:	4b83      	ldr	r3, [pc, #524]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10f      	bne.n	8003fce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	4b7f      	ldr	r3, [pc, #508]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	4a7e      	ldr	r2, [pc, #504]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 8003fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fbe:	4b7c      	ldr	r3, [pc, #496]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fce:	4b79      	ldr	r3, [pc, #484]	@ (80041b4 <HAL_RCC_OscConfig+0x47c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d118      	bne.n	800400c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fda:	4b76      	ldr	r3, [pc, #472]	@ (80041b4 <HAL_RCC_OscConfig+0x47c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a75      	ldr	r2, [pc, #468]	@ (80041b4 <HAL_RCC_OscConfig+0x47c>)
 8003fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe6:	f7fd fc89 	bl	80018fc <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fee:	f7fd fc85 	bl	80018fc <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e118      	b.n	8004232 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004000:	4b6c      	ldr	r3, [pc, #432]	@ (80041b4 <HAL_RCC_OscConfig+0x47c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d106      	bne.n	8004022 <HAL_RCC_OscConfig+0x2ea>
 8004014:	4b66      	ldr	r3, [pc, #408]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004018:	4a65      	ldr	r2, [pc, #404]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004020:	e01c      	b.n	800405c <HAL_RCC_OscConfig+0x324>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b05      	cmp	r3, #5
 8004028:	d10c      	bne.n	8004044 <HAL_RCC_OscConfig+0x30c>
 800402a:	4b61      	ldr	r3, [pc, #388]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402e:	4a60      	ldr	r2, [pc, #384]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 8004030:	f043 0304 	orr.w	r3, r3, #4
 8004034:	6713      	str	r3, [r2, #112]	@ 0x70
 8004036:	4b5e      	ldr	r3, [pc, #376]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403a:	4a5d      	ldr	r2, [pc, #372]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	6713      	str	r3, [r2, #112]	@ 0x70
 8004042:	e00b      	b.n	800405c <HAL_RCC_OscConfig+0x324>
 8004044:	4b5a      	ldr	r3, [pc, #360]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004048:	4a59      	ldr	r2, [pc, #356]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004050:	4b57      	ldr	r3, [pc, #348]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 8004052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004054:	4a56      	ldr	r2, [pc, #344]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 8004056:	f023 0304 	bic.w	r3, r3, #4
 800405a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d015      	beq.n	8004090 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7fd fc4a 	bl	80018fc <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406a:	e00a      	b.n	8004082 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406c:	f7fd fc46 	bl	80018fc <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e0d7      	b.n	8004232 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004082:	4b4b      	ldr	r3, [pc, #300]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0ee      	beq.n	800406c <HAL_RCC_OscConfig+0x334>
 800408e:	e014      	b.n	80040ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004090:	f7fd fc34 	bl	80018fc <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004096:	e00a      	b.n	80040ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004098:	f7fd fc30 	bl	80018fc <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e0c1      	b.n	8004232 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ae:	4b40      	ldr	r3, [pc, #256]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1ee      	bne.n	8004098 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040ba:	7dfb      	ldrb	r3, [r7, #23]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d105      	bne.n	80040cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c0:	4b3b      	ldr	r3, [pc, #236]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 80040c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c4:	4a3a      	ldr	r2, [pc, #232]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 80040c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 80ad 	beq.w	8004230 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040d6:	4b36      	ldr	r3, [pc, #216]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 030c 	and.w	r3, r3, #12
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d060      	beq.n	80041a4 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d145      	bne.n	8004176 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ea:	4b33      	ldr	r3, [pc, #204]	@ (80041b8 <HAL_RCC_OscConfig+0x480>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7fd fc04 	bl	80018fc <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f8:	f7fd fc00 	bl	80018fc <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e093      	b.n	8004232 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410a:	4b29      	ldr	r3, [pc, #164]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69da      	ldr	r2, [r3, #28]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	019b      	lsls	r3, r3, #6
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412c:	085b      	lsrs	r3, r3, #1
 800412e:	3b01      	subs	r3, #1
 8004130:	041b      	lsls	r3, r3, #16
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004138:	061b      	lsls	r3, r3, #24
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004140:	071b      	lsls	r3, r3, #28
 8004142:	491b      	ldr	r1, [pc, #108]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 8004144:	4313      	orrs	r3, r2
 8004146:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004148:	4b1b      	ldr	r3, [pc, #108]	@ (80041b8 <HAL_RCC_OscConfig+0x480>)
 800414a:	2201      	movs	r2, #1
 800414c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414e:	f7fd fbd5 	bl	80018fc <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004156:	f7fd fbd1 	bl	80018fc <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e064      	b.n	8004232 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004168:	4b11      	ldr	r3, [pc, #68]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCC_OscConfig+0x41e>
 8004174:	e05c      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004176:	4b10      	ldr	r3, [pc, #64]	@ (80041b8 <HAL_RCC_OscConfig+0x480>)
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417c:	f7fd fbbe 	bl	80018fc <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004184:	f7fd fbba 	bl	80018fc <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e04d      	b.n	8004232 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004196:	4b06      	ldr	r3, [pc, #24]	@ (80041b0 <HAL_RCC_OscConfig+0x478>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0x44c>
 80041a2:	e045      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d107      	bne.n	80041bc <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e040      	b.n	8004232 <HAL_RCC_OscConfig+0x4fa>
 80041b0:	40023800 	.word	0x40023800
 80041b4:	40007000 	.word	0x40007000
 80041b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041bc:	4b1f      	ldr	r3, [pc, #124]	@ (800423c <HAL_RCC_OscConfig+0x504>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d030      	beq.n	800422c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d129      	bne.n	800422c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d122      	bne.n	800422c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041ec:	4013      	ands	r3, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d119      	bne.n	800422c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	3b01      	subs	r3, #1
 8004206:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004208:	429a      	cmp	r2, r3
 800420a:	d10f      	bne.n	800422c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004216:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004218:	429a      	cmp	r2, r3
 800421a:	d107      	bne.n	800422c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004226:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e000      	b.n	8004232 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40023800 	.word	0x40023800

08004240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e041      	b.n	80042d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fd f8d4 	bl	8001414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3304      	adds	r3, #4
 800427c:	4619      	mov	r1, r3
 800427e:	4610      	mov	r0, r2
 8004280:	f000 faac 	bl	80047dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d001      	beq.n	80042f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e04e      	b.n	8004396 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a23      	ldr	r2, [pc, #140]	@ (80043a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d022      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004322:	d01d      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1f      	ldr	r2, [pc, #124]	@ (80043a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d018      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1e      	ldr	r2, [pc, #120]	@ (80043ac <HAL_TIM_Base_Start_IT+0xcc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d013      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1c      	ldr	r2, [pc, #112]	@ (80043b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00e      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1b      	ldr	r2, [pc, #108]	@ (80043b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d009      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a19      	ldr	r2, [pc, #100]	@ (80043b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d004      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x80>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a18      	ldr	r2, [pc, #96]	@ (80043bc <HAL_TIM_Base_Start_IT+0xdc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d111      	bne.n	8004384 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b06      	cmp	r3, #6
 8004370:	d010      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0201 	orr.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004382:	e007      	b.n	8004394 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40010000 	.word	0x40010000
 80043a8:	40000400 	.word	0x40000400
 80043ac:	40000800 	.word	0x40000800
 80043b0:	40000c00 	.word	0x40000c00
 80043b4:	40010400 	.word	0x40010400
 80043b8:	40014000 	.word	0x40014000
 80043bc:	40001800 	.word	0x40001800

080043c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6a1a      	ldr	r2, [r3, #32]
 80043de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10f      	bne.n	8004408 <HAL_TIM_Base_Stop_IT+0x48>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6a1a      	ldr	r2, [r3, #32]
 80043ee:	f240 4344 	movw	r3, #1092	@ 0x444
 80043f2:	4013      	ands	r3, r2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d107      	bne.n	8004408 <HAL_TIM_Base_Stop_IT+0x48>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0201 	bic.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b084      	sub	sp, #16
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d020      	beq.n	8004482 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01b      	beq.n	8004482 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f06f 0202 	mvn.w	r2, #2
 8004452:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f999 	bl	80047a0 <HAL_TIM_IC_CaptureCallback>
 800446e:	e005      	b.n	800447c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f98b 	bl	800478c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f99c 	bl	80047b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	d020      	beq.n	80044ce <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b00      	cmp	r3, #0
 8004494:	d01b      	beq.n	80044ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f06f 0204 	mvn.w	r2, #4
 800449e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f973 	bl	80047a0 <HAL_TIM_IC_CaptureCallback>
 80044ba:	e005      	b.n	80044c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f965 	bl	800478c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f976 	bl	80047b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d020      	beq.n	800451a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d01b      	beq.n	800451a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f06f 0208 	mvn.w	r2, #8
 80044ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2204      	movs	r2, #4
 80044f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f94d 	bl	80047a0 <HAL_TIM_IC_CaptureCallback>
 8004506:	e005      	b.n	8004514 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f93f 	bl	800478c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f950 	bl	80047b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b00      	cmp	r3, #0
 8004522:	d020      	beq.n	8004566 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	2b00      	cmp	r3, #0
 800452c:	d01b      	beq.n	8004566 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f06f 0210 	mvn.w	r2, #16
 8004536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2208      	movs	r2, #8
 800453c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f927 	bl	80047a0 <HAL_TIM_IC_CaptureCallback>
 8004552:	e005      	b.n	8004560 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f919 	bl	800478c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f92a 	bl	80047b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00c      	beq.n	800458a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d007      	beq.n	800458a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f06f 0201 	mvn.w	r2, #1
 8004582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7fc f877 	bl	8000678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00c      	beq.n	80045ae <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459a:	2b00      	cmp	r3, #0
 800459c:	d007      	beq.n	80045ae <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 fae3 	bl	8004b74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00c      	beq.n	80045d2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f8fb 	bl	80047c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f003 0320 	and.w	r3, r3, #32
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00c      	beq.n	80045f6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d007      	beq.n	80045f6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f06f 0220 	mvn.w	r2, #32
 80045ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fab5 	bl	8004b60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_TIM_ConfigClockSource+0x1c>
 8004616:	2302      	movs	r3, #2
 8004618:	e0b4      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x186>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2202      	movs	r2, #2
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004638:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004640:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004652:	d03e      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0xd4>
 8004654:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004658:	f200 8087 	bhi.w	800476a <HAL_TIM_ConfigClockSource+0x16c>
 800465c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004660:	f000 8086 	beq.w	8004770 <HAL_TIM_ConfigClockSource+0x172>
 8004664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004668:	d87f      	bhi.n	800476a <HAL_TIM_ConfigClockSource+0x16c>
 800466a:	2b70      	cmp	r3, #112	@ 0x70
 800466c:	d01a      	beq.n	80046a4 <HAL_TIM_ConfigClockSource+0xa6>
 800466e:	2b70      	cmp	r3, #112	@ 0x70
 8004670:	d87b      	bhi.n	800476a <HAL_TIM_ConfigClockSource+0x16c>
 8004672:	2b60      	cmp	r3, #96	@ 0x60
 8004674:	d050      	beq.n	8004718 <HAL_TIM_ConfigClockSource+0x11a>
 8004676:	2b60      	cmp	r3, #96	@ 0x60
 8004678:	d877      	bhi.n	800476a <HAL_TIM_ConfigClockSource+0x16c>
 800467a:	2b50      	cmp	r3, #80	@ 0x50
 800467c:	d03c      	beq.n	80046f8 <HAL_TIM_ConfigClockSource+0xfa>
 800467e:	2b50      	cmp	r3, #80	@ 0x50
 8004680:	d873      	bhi.n	800476a <HAL_TIM_ConfigClockSource+0x16c>
 8004682:	2b40      	cmp	r3, #64	@ 0x40
 8004684:	d058      	beq.n	8004738 <HAL_TIM_ConfigClockSource+0x13a>
 8004686:	2b40      	cmp	r3, #64	@ 0x40
 8004688:	d86f      	bhi.n	800476a <HAL_TIM_ConfigClockSource+0x16c>
 800468a:	2b30      	cmp	r3, #48	@ 0x30
 800468c:	d064      	beq.n	8004758 <HAL_TIM_ConfigClockSource+0x15a>
 800468e:	2b30      	cmp	r3, #48	@ 0x30
 8004690:	d86b      	bhi.n	800476a <HAL_TIM_ConfigClockSource+0x16c>
 8004692:	2b20      	cmp	r3, #32
 8004694:	d060      	beq.n	8004758 <HAL_TIM_ConfigClockSource+0x15a>
 8004696:	2b20      	cmp	r3, #32
 8004698:	d867      	bhi.n	800476a <HAL_TIM_ConfigClockSource+0x16c>
 800469a:	2b00      	cmp	r3, #0
 800469c:	d05c      	beq.n	8004758 <HAL_TIM_ConfigClockSource+0x15a>
 800469e:	2b10      	cmp	r3, #16
 80046a0:	d05a      	beq.n	8004758 <HAL_TIM_ConfigClockSource+0x15a>
 80046a2:	e062      	b.n	800476a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046b4:	f000 f9b8 	bl	8004a28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	609a      	str	r2, [r3, #8]
      break;
 80046d0:	e04f      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046e2:	f000 f9a1 	bl	8004a28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046f4:	609a      	str	r2, [r3, #8]
      break;
 80046f6:	e03c      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004704:	461a      	mov	r2, r3
 8004706:	f000 f915 	bl	8004934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2150      	movs	r1, #80	@ 0x50
 8004710:	4618      	mov	r0, r3
 8004712:	f000 f96e 	bl	80049f2 <TIM_ITRx_SetConfig>
      break;
 8004716:	e02c      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004724:	461a      	mov	r2, r3
 8004726:	f000 f934 	bl	8004992 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2160      	movs	r1, #96	@ 0x60
 8004730:	4618      	mov	r0, r3
 8004732:	f000 f95e 	bl	80049f2 <TIM_ITRx_SetConfig>
      break;
 8004736:	e01c      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004744:	461a      	mov	r2, r3
 8004746:	f000 f8f5 	bl	8004934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2140      	movs	r1, #64	@ 0x40
 8004750:	4618      	mov	r0, r3
 8004752:	f000 f94e 	bl	80049f2 <TIM_ITRx_SetConfig>
      break;
 8004756:	e00c      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f000 f945 	bl	80049f2 <TIM_ITRx_SetConfig>
      break;
 8004768:	e003      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	73fb      	strb	r3, [r7, #15]
      break;
 800476e:	e000      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004770:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004782:	7bfb      	ldrb	r3, [r7, #15]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a46      	ldr	r2, [pc, #280]	@ (8004908 <TIM_Base_SetConfig+0x12c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d013      	beq.n	800481c <TIM_Base_SetConfig+0x40>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047fa:	d00f      	beq.n	800481c <TIM_Base_SetConfig+0x40>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a43      	ldr	r2, [pc, #268]	@ (800490c <TIM_Base_SetConfig+0x130>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00b      	beq.n	800481c <TIM_Base_SetConfig+0x40>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a42      	ldr	r2, [pc, #264]	@ (8004910 <TIM_Base_SetConfig+0x134>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d007      	beq.n	800481c <TIM_Base_SetConfig+0x40>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a41      	ldr	r2, [pc, #260]	@ (8004914 <TIM_Base_SetConfig+0x138>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d003      	beq.n	800481c <TIM_Base_SetConfig+0x40>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a40      	ldr	r2, [pc, #256]	@ (8004918 <TIM_Base_SetConfig+0x13c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d108      	bne.n	800482e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a35      	ldr	r2, [pc, #212]	@ (8004908 <TIM_Base_SetConfig+0x12c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d02b      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800483c:	d027      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a32      	ldr	r2, [pc, #200]	@ (800490c <TIM_Base_SetConfig+0x130>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d023      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a31      	ldr	r2, [pc, #196]	@ (8004910 <TIM_Base_SetConfig+0x134>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d01f      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a30      	ldr	r2, [pc, #192]	@ (8004914 <TIM_Base_SetConfig+0x138>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d01b      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a2f      	ldr	r2, [pc, #188]	@ (8004918 <TIM_Base_SetConfig+0x13c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d017      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a2e      	ldr	r2, [pc, #184]	@ (800491c <TIM_Base_SetConfig+0x140>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d013      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a2d      	ldr	r2, [pc, #180]	@ (8004920 <TIM_Base_SetConfig+0x144>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00f      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a2c      	ldr	r2, [pc, #176]	@ (8004924 <TIM_Base_SetConfig+0x148>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00b      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a2b      	ldr	r2, [pc, #172]	@ (8004928 <TIM_Base_SetConfig+0x14c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d007      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a2a      	ldr	r2, [pc, #168]	@ (800492c <TIM_Base_SetConfig+0x150>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d003      	beq.n	800488e <TIM_Base_SetConfig+0xb2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a29      	ldr	r2, [pc, #164]	@ (8004930 <TIM_Base_SetConfig+0x154>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d108      	bne.n	80048a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a10      	ldr	r2, [pc, #64]	@ (8004908 <TIM_Base_SetConfig+0x12c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d003      	beq.n	80048d4 <TIM_Base_SetConfig+0xf8>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a12      	ldr	r2, [pc, #72]	@ (8004918 <TIM_Base_SetConfig+0x13c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d103      	bne.n	80048dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d105      	bne.n	80048fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f023 0201 	bic.w	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	611a      	str	r2, [r3, #16]
  }
}
 80048fa:	bf00      	nop
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40010000 	.word	0x40010000
 800490c:	40000400 	.word	0x40000400
 8004910:	40000800 	.word	0x40000800
 8004914:	40000c00 	.word	0x40000c00
 8004918:	40010400 	.word	0x40010400
 800491c:	40014000 	.word	0x40014000
 8004920:	40014400 	.word	0x40014400
 8004924:	40014800 	.word	0x40014800
 8004928:	40001800 	.word	0x40001800
 800492c:	40001c00 	.word	0x40001c00
 8004930:	40002000 	.word	0x40002000

08004934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	f023 0201 	bic.w	r2, r3, #1
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800495e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f023 030a 	bic.w	r3, r3, #10
 8004970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	621a      	str	r2, [r3, #32]
}
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004992:	b480      	push	{r7}
 8004994:	b087      	sub	sp, #28
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f023 0210 	bic.w	r2, r3, #16
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	031b      	lsls	r3, r3, #12
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	621a      	str	r2, [r3, #32]
}
 80049e6:	bf00      	nop
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b085      	sub	sp, #20
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f043 0307 	orr.w	r3, r3, #7
 8004a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	609a      	str	r2, [r3, #8]
}
 8004a1c:	bf00      	nop
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	021a      	lsls	r2, r3, #8
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	609a      	str	r2, [r3, #8]
}
 8004a5c:	bf00      	nop
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	e05a      	b.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a21      	ldr	r2, [pc, #132]	@ (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d022      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004acc:	d01d      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d018      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1b      	ldr	r2, [pc, #108]	@ (8004b4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d013      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8004b50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00e      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a18      	ldr	r2, [pc, #96]	@ (8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d009      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a17      	ldr	r2, [pc, #92]	@ (8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d004      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a15      	ldr	r2, [pc, #84]	@ (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d10c      	bne.n	8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40010000 	.word	0x40010000
 8004b48:	40000400 	.word	0x40000400
 8004b4c:	40000800 	.word	0x40000800
 8004b50:	40000c00 	.word	0x40000c00
 8004b54:	40010400 	.word	0x40010400
 8004b58:	40014000 	.word	0x40014000
 8004b5c:	40001800 	.word	0x40001800

08004b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <std>:
 8004b88:	2300      	movs	r3, #0
 8004b8a:	b510      	push	{r4, lr}
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	e9c0 3300 	strd	r3, r3, [r0]
 8004b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b96:	6083      	str	r3, [r0, #8]
 8004b98:	8181      	strh	r1, [r0, #12]
 8004b9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b9c:	81c2      	strh	r2, [r0, #14]
 8004b9e:	6183      	str	r3, [r0, #24]
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	2208      	movs	r2, #8
 8004ba4:	305c      	adds	r0, #92	@ 0x5c
 8004ba6:	f000 f9a3 	bl	8004ef0 <memset>
 8004baa:	4b0d      	ldr	r3, [pc, #52]	@ (8004be0 <std+0x58>)
 8004bac:	6263      	str	r3, [r4, #36]	@ 0x24
 8004bae:	4b0d      	ldr	r3, [pc, #52]	@ (8004be4 <std+0x5c>)
 8004bb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004be8 <std+0x60>)
 8004bb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004bec <std+0x64>)
 8004bb8:	6323      	str	r3, [r4, #48]	@ 0x30
 8004bba:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf0 <std+0x68>)
 8004bbc:	6224      	str	r4, [r4, #32]
 8004bbe:	429c      	cmp	r4, r3
 8004bc0:	d006      	beq.n	8004bd0 <std+0x48>
 8004bc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004bc6:	4294      	cmp	r4, r2
 8004bc8:	d002      	beq.n	8004bd0 <std+0x48>
 8004bca:	33d0      	adds	r3, #208	@ 0xd0
 8004bcc:	429c      	cmp	r4, r3
 8004bce:	d105      	bne.n	8004bdc <std+0x54>
 8004bd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bd8:	f000 ba02 	b.w	8004fe0 <__retarget_lock_init_recursive>
 8004bdc:	bd10      	pop	{r4, pc}
 8004bde:	bf00      	nop
 8004be0:	08004d41 	.word	0x08004d41
 8004be4:	08004d63 	.word	0x08004d63
 8004be8:	08004d9b 	.word	0x08004d9b
 8004bec:	08004dbf 	.word	0x08004dbf
 8004bf0:	20000304 	.word	0x20000304

08004bf4 <stdio_exit_handler>:
 8004bf4:	4a02      	ldr	r2, [pc, #8]	@ (8004c00 <stdio_exit_handler+0xc>)
 8004bf6:	4903      	ldr	r1, [pc, #12]	@ (8004c04 <stdio_exit_handler+0x10>)
 8004bf8:	4803      	ldr	r0, [pc, #12]	@ (8004c08 <stdio_exit_handler+0x14>)
 8004bfa:	f000 b869 	b.w	8004cd0 <_fwalk_sglue>
 8004bfe:	bf00      	nop
 8004c00:	2000000c 	.word	0x2000000c
 8004c04:	0800587d 	.word	0x0800587d
 8004c08:	2000001c 	.word	0x2000001c

08004c0c <cleanup_stdio>:
 8004c0c:	6841      	ldr	r1, [r0, #4]
 8004c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c40 <cleanup_stdio+0x34>)
 8004c10:	4299      	cmp	r1, r3
 8004c12:	b510      	push	{r4, lr}
 8004c14:	4604      	mov	r4, r0
 8004c16:	d001      	beq.n	8004c1c <cleanup_stdio+0x10>
 8004c18:	f000 fe30 	bl	800587c <_fflush_r>
 8004c1c:	68a1      	ldr	r1, [r4, #8]
 8004c1e:	4b09      	ldr	r3, [pc, #36]	@ (8004c44 <cleanup_stdio+0x38>)
 8004c20:	4299      	cmp	r1, r3
 8004c22:	d002      	beq.n	8004c2a <cleanup_stdio+0x1e>
 8004c24:	4620      	mov	r0, r4
 8004c26:	f000 fe29 	bl	800587c <_fflush_r>
 8004c2a:	68e1      	ldr	r1, [r4, #12]
 8004c2c:	4b06      	ldr	r3, [pc, #24]	@ (8004c48 <cleanup_stdio+0x3c>)
 8004c2e:	4299      	cmp	r1, r3
 8004c30:	d004      	beq.n	8004c3c <cleanup_stdio+0x30>
 8004c32:	4620      	mov	r0, r4
 8004c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c38:	f000 be20 	b.w	800587c <_fflush_r>
 8004c3c:	bd10      	pop	{r4, pc}
 8004c3e:	bf00      	nop
 8004c40:	20000304 	.word	0x20000304
 8004c44:	2000036c 	.word	0x2000036c
 8004c48:	200003d4 	.word	0x200003d4

08004c4c <global_stdio_init.part.0>:
 8004c4c:	b510      	push	{r4, lr}
 8004c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c7c <global_stdio_init.part.0+0x30>)
 8004c50:	4c0b      	ldr	r4, [pc, #44]	@ (8004c80 <global_stdio_init.part.0+0x34>)
 8004c52:	4a0c      	ldr	r2, [pc, #48]	@ (8004c84 <global_stdio_init.part.0+0x38>)
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	4620      	mov	r0, r4
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2104      	movs	r1, #4
 8004c5c:	f7ff ff94 	bl	8004b88 <std>
 8004c60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004c64:	2201      	movs	r2, #1
 8004c66:	2109      	movs	r1, #9
 8004c68:	f7ff ff8e 	bl	8004b88 <std>
 8004c6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c70:	2202      	movs	r2, #2
 8004c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c76:	2112      	movs	r1, #18
 8004c78:	f7ff bf86 	b.w	8004b88 <std>
 8004c7c:	2000043c 	.word	0x2000043c
 8004c80:	20000304 	.word	0x20000304
 8004c84:	08004bf5 	.word	0x08004bf5

08004c88 <__sfp_lock_acquire>:
 8004c88:	4801      	ldr	r0, [pc, #4]	@ (8004c90 <__sfp_lock_acquire+0x8>)
 8004c8a:	f000 b9aa 	b.w	8004fe2 <__retarget_lock_acquire_recursive>
 8004c8e:	bf00      	nop
 8004c90:	20000445 	.word	0x20000445

08004c94 <__sfp_lock_release>:
 8004c94:	4801      	ldr	r0, [pc, #4]	@ (8004c9c <__sfp_lock_release+0x8>)
 8004c96:	f000 b9a5 	b.w	8004fe4 <__retarget_lock_release_recursive>
 8004c9a:	bf00      	nop
 8004c9c:	20000445 	.word	0x20000445

08004ca0 <__sinit>:
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	f7ff fff0 	bl	8004c88 <__sfp_lock_acquire>
 8004ca8:	6a23      	ldr	r3, [r4, #32]
 8004caa:	b11b      	cbz	r3, 8004cb4 <__sinit+0x14>
 8004cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb0:	f7ff bff0 	b.w	8004c94 <__sfp_lock_release>
 8004cb4:	4b04      	ldr	r3, [pc, #16]	@ (8004cc8 <__sinit+0x28>)
 8004cb6:	6223      	str	r3, [r4, #32]
 8004cb8:	4b04      	ldr	r3, [pc, #16]	@ (8004ccc <__sinit+0x2c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1f5      	bne.n	8004cac <__sinit+0xc>
 8004cc0:	f7ff ffc4 	bl	8004c4c <global_stdio_init.part.0>
 8004cc4:	e7f2      	b.n	8004cac <__sinit+0xc>
 8004cc6:	bf00      	nop
 8004cc8:	08004c0d 	.word	0x08004c0d
 8004ccc:	2000043c 	.word	0x2000043c

08004cd0 <_fwalk_sglue>:
 8004cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cd4:	4607      	mov	r7, r0
 8004cd6:	4688      	mov	r8, r1
 8004cd8:	4614      	mov	r4, r2
 8004cda:	2600      	movs	r6, #0
 8004cdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ce0:	f1b9 0901 	subs.w	r9, r9, #1
 8004ce4:	d505      	bpl.n	8004cf2 <_fwalk_sglue+0x22>
 8004ce6:	6824      	ldr	r4, [r4, #0]
 8004ce8:	2c00      	cmp	r4, #0
 8004cea:	d1f7      	bne.n	8004cdc <_fwalk_sglue+0xc>
 8004cec:	4630      	mov	r0, r6
 8004cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cf2:	89ab      	ldrh	r3, [r5, #12]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d907      	bls.n	8004d08 <_fwalk_sglue+0x38>
 8004cf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	d003      	beq.n	8004d08 <_fwalk_sglue+0x38>
 8004d00:	4629      	mov	r1, r5
 8004d02:	4638      	mov	r0, r7
 8004d04:	47c0      	blx	r8
 8004d06:	4306      	orrs	r6, r0
 8004d08:	3568      	adds	r5, #104	@ 0x68
 8004d0a:	e7e9      	b.n	8004ce0 <_fwalk_sglue+0x10>

08004d0c <iprintf>:
 8004d0c:	b40f      	push	{r0, r1, r2, r3}
 8004d0e:	b507      	push	{r0, r1, r2, lr}
 8004d10:	4906      	ldr	r1, [pc, #24]	@ (8004d2c <iprintf+0x20>)
 8004d12:	ab04      	add	r3, sp, #16
 8004d14:	6808      	ldr	r0, [r1, #0]
 8004d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d1a:	6881      	ldr	r1, [r0, #8]
 8004d1c:	9301      	str	r3, [sp, #4]
 8004d1e:	f000 fa85 	bl	800522c <_vfiprintf_r>
 8004d22:	b003      	add	sp, #12
 8004d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d28:	b004      	add	sp, #16
 8004d2a:	4770      	bx	lr
 8004d2c:	20000018 	.word	0x20000018

08004d30 <putchar>:
 8004d30:	4b02      	ldr	r3, [pc, #8]	@ (8004d3c <putchar+0xc>)
 8004d32:	4601      	mov	r1, r0
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	6882      	ldr	r2, [r0, #8]
 8004d38:	f000 be2a 	b.w	8005990 <_putc_r>
 8004d3c:	20000018 	.word	0x20000018

08004d40 <__sread>:
 8004d40:	b510      	push	{r4, lr}
 8004d42:	460c      	mov	r4, r1
 8004d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d48:	f000 f8fc 	bl	8004f44 <_read_r>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	bfab      	itete	ge
 8004d50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d52:	89a3      	ldrhlt	r3, [r4, #12]
 8004d54:	181b      	addge	r3, r3, r0
 8004d56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d5a:	bfac      	ite	ge
 8004d5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d5e:	81a3      	strhlt	r3, [r4, #12]
 8004d60:	bd10      	pop	{r4, pc}

08004d62 <__swrite>:
 8004d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d66:	461f      	mov	r7, r3
 8004d68:	898b      	ldrh	r3, [r1, #12]
 8004d6a:	05db      	lsls	r3, r3, #23
 8004d6c:	4605      	mov	r5, r0
 8004d6e:	460c      	mov	r4, r1
 8004d70:	4616      	mov	r6, r2
 8004d72:	d505      	bpl.n	8004d80 <__swrite+0x1e>
 8004d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d78:	2302      	movs	r3, #2
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f000 f8d0 	bl	8004f20 <_lseek_r>
 8004d80:	89a3      	ldrh	r3, [r4, #12]
 8004d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d8a:	81a3      	strh	r3, [r4, #12]
 8004d8c:	4632      	mov	r2, r6
 8004d8e:	463b      	mov	r3, r7
 8004d90:	4628      	mov	r0, r5
 8004d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d96:	f000 b8e7 	b.w	8004f68 <_write_r>

08004d9a <__sseek>:
 8004d9a:	b510      	push	{r4, lr}
 8004d9c:	460c      	mov	r4, r1
 8004d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da2:	f000 f8bd 	bl	8004f20 <_lseek_r>
 8004da6:	1c43      	adds	r3, r0, #1
 8004da8:	89a3      	ldrh	r3, [r4, #12]
 8004daa:	bf15      	itete	ne
 8004dac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004dae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004db2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004db6:	81a3      	strheq	r3, [r4, #12]
 8004db8:	bf18      	it	ne
 8004dba:	81a3      	strhne	r3, [r4, #12]
 8004dbc:	bd10      	pop	{r4, pc}

08004dbe <__sclose>:
 8004dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc2:	f000 b89d 	b.w	8004f00 <_close_r>

08004dc6 <__swbuf_r>:
 8004dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc8:	460e      	mov	r6, r1
 8004dca:	4614      	mov	r4, r2
 8004dcc:	4605      	mov	r5, r0
 8004dce:	b118      	cbz	r0, 8004dd8 <__swbuf_r+0x12>
 8004dd0:	6a03      	ldr	r3, [r0, #32]
 8004dd2:	b90b      	cbnz	r3, 8004dd8 <__swbuf_r+0x12>
 8004dd4:	f7ff ff64 	bl	8004ca0 <__sinit>
 8004dd8:	69a3      	ldr	r3, [r4, #24]
 8004dda:	60a3      	str	r3, [r4, #8]
 8004ddc:	89a3      	ldrh	r3, [r4, #12]
 8004dde:	071a      	lsls	r2, r3, #28
 8004de0:	d501      	bpl.n	8004de6 <__swbuf_r+0x20>
 8004de2:	6923      	ldr	r3, [r4, #16]
 8004de4:	b943      	cbnz	r3, 8004df8 <__swbuf_r+0x32>
 8004de6:	4621      	mov	r1, r4
 8004de8:	4628      	mov	r0, r5
 8004dea:	f000 f82b 	bl	8004e44 <__swsetup_r>
 8004dee:	b118      	cbz	r0, 8004df8 <__swbuf_r+0x32>
 8004df0:	f04f 37ff 	mov.w	r7, #4294967295
 8004df4:	4638      	mov	r0, r7
 8004df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	6922      	ldr	r2, [r4, #16]
 8004dfc:	1a98      	subs	r0, r3, r2
 8004dfe:	6963      	ldr	r3, [r4, #20]
 8004e00:	b2f6      	uxtb	r6, r6
 8004e02:	4283      	cmp	r3, r0
 8004e04:	4637      	mov	r7, r6
 8004e06:	dc05      	bgt.n	8004e14 <__swbuf_r+0x4e>
 8004e08:	4621      	mov	r1, r4
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	f000 fd36 	bl	800587c <_fflush_r>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	d1ed      	bne.n	8004df0 <__swbuf_r+0x2a>
 8004e14:	68a3      	ldr	r3, [r4, #8]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	60a3      	str	r3, [r4, #8]
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	6022      	str	r2, [r4, #0]
 8004e20:	701e      	strb	r6, [r3, #0]
 8004e22:	6962      	ldr	r2, [r4, #20]
 8004e24:	1c43      	adds	r3, r0, #1
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d004      	beq.n	8004e34 <__swbuf_r+0x6e>
 8004e2a:	89a3      	ldrh	r3, [r4, #12]
 8004e2c:	07db      	lsls	r3, r3, #31
 8004e2e:	d5e1      	bpl.n	8004df4 <__swbuf_r+0x2e>
 8004e30:	2e0a      	cmp	r6, #10
 8004e32:	d1df      	bne.n	8004df4 <__swbuf_r+0x2e>
 8004e34:	4621      	mov	r1, r4
 8004e36:	4628      	mov	r0, r5
 8004e38:	f000 fd20 	bl	800587c <_fflush_r>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d0d9      	beq.n	8004df4 <__swbuf_r+0x2e>
 8004e40:	e7d6      	b.n	8004df0 <__swbuf_r+0x2a>
	...

08004e44 <__swsetup_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4b29      	ldr	r3, [pc, #164]	@ (8004eec <__swsetup_r+0xa8>)
 8004e48:	4605      	mov	r5, r0
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	b118      	cbz	r0, 8004e58 <__swsetup_r+0x14>
 8004e50:	6a03      	ldr	r3, [r0, #32]
 8004e52:	b90b      	cbnz	r3, 8004e58 <__swsetup_r+0x14>
 8004e54:	f7ff ff24 	bl	8004ca0 <__sinit>
 8004e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e5c:	0719      	lsls	r1, r3, #28
 8004e5e:	d422      	bmi.n	8004ea6 <__swsetup_r+0x62>
 8004e60:	06da      	lsls	r2, r3, #27
 8004e62:	d407      	bmi.n	8004e74 <__swsetup_r+0x30>
 8004e64:	2209      	movs	r2, #9
 8004e66:	602a      	str	r2, [r5, #0]
 8004e68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e6c:	81a3      	strh	r3, [r4, #12]
 8004e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e72:	e033      	b.n	8004edc <__swsetup_r+0x98>
 8004e74:	0758      	lsls	r0, r3, #29
 8004e76:	d512      	bpl.n	8004e9e <__swsetup_r+0x5a>
 8004e78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e7a:	b141      	cbz	r1, 8004e8e <__swsetup_r+0x4a>
 8004e7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e80:	4299      	cmp	r1, r3
 8004e82:	d002      	beq.n	8004e8a <__swsetup_r+0x46>
 8004e84:	4628      	mov	r0, r5
 8004e86:	f000 f8af 	bl	8004fe8 <_free_r>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e8e:	89a3      	ldrh	r3, [r4, #12]
 8004e90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004e94:	81a3      	strh	r3, [r4, #12]
 8004e96:	2300      	movs	r3, #0
 8004e98:	6063      	str	r3, [r4, #4]
 8004e9a:	6923      	ldr	r3, [r4, #16]
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	89a3      	ldrh	r3, [r4, #12]
 8004ea0:	f043 0308 	orr.w	r3, r3, #8
 8004ea4:	81a3      	strh	r3, [r4, #12]
 8004ea6:	6923      	ldr	r3, [r4, #16]
 8004ea8:	b94b      	cbnz	r3, 8004ebe <__swsetup_r+0x7a>
 8004eaa:	89a3      	ldrh	r3, [r4, #12]
 8004eac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eb4:	d003      	beq.n	8004ebe <__swsetup_r+0x7a>
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	4628      	mov	r0, r5
 8004eba:	f000 fd2d 	bl	8005918 <__smakebuf_r>
 8004ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ec2:	f013 0201 	ands.w	r2, r3, #1
 8004ec6:	d00a      	beq.n	8004ede <__swsetup_r+0x9a>
 8004ec8:	2200      	movs	r2, #0
 8004eca:	60a2      	str	r2, [r4, #8]
 8004ecc:	6962      	ldr	r2, [r4, #20]
 8004ece:	4252      	negs	r2, r2
 8004ed0:	61a2      	str	r2, [r4, #24]
 8004ed2:	6922      	ldr	r2, [r4, #16]
 8004ed4:	b942      	cbnz	r2, 8004ee8 <__swsetup_r+0xa4>
 8004ed6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004eda:	d1c5      	bne.n	8004e68 <__swsetup_r+0x24>
 8004edc:	bd38      	pop	{r3, r4, r5, pc}
 8004ede:	0799      	lsls	r1, r3, #30
 8004ee0:	bf58      	it	pl
 8004ee2:	6962      	ldrpl	r2, [r4, #20]
 8004ee4:	60a2      	str	r2, [r4, #8]
 8004ee6:	e7f4      	b.n	8004ed2 <__swsetup_r+0x8e>
 8004ee8:	2000      	movs	r0, #0
 8004eea:	e7f7      	b.n	8004edc <__swsetup_r+0x98>
 8004eec:	20000018 	.word	0x20000018

08004ef0 <memset>:
 8004ef0:	4402      	add	r2, r0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d100      	bne.n	8004efa <memset+0xa>
 8004ef8:	4770      	bx	lr
 8004efa:	f803 1b01 	strb.w	r1, [r3], #1
 8004efe:	e7f9      	b.n	8004ef4 <memset+0x4>

08004f00 <_close_r>:
 8004f00:	b538      	push	{r3, r4, r5, lr}
 8004f02:	4d06      	ldr	r5, [pc, #24]	@ (8004f1c <_close_r+0x1c>)
 8004f04:	2300      	movs	r3, #0
 8004f06:	4604      	mov	r4, r0
 8004f08:	4608      	mov	r0, r1
 8004f0a:	602b      	str	r3, [r5, #0]
 8004f0c:	f7fc fbe9 	bl	80016e2 <_close>
 8004f10:	1c43      	adds	r3, r0, #1
 8004f12:	d102      	bne.n	8004f1a <_close_r+0x1a>
 8004f14:	682b      	ldr	r3, [r5, #0]
 8004f16:	b103      	cbz	r3, 8004f1a <_close_r+0x1a>
 8004f18:	6023      	str	r3, [r4, #0]
 8004f1a:	bd38      	pop	{r3, r4, r5, pc}
 8004f1c:	20000440 	.word	0x20000440

08004f20 <_lseek_r>:
 8004f20:	b538      	push	{r3, r4, r5, lr}
 8004f22:	4d07      	ldr	r5, [pc, #28]	@ (8004f40 <_lseek_r+0x20>)
 8004f24:	4604      	mov	r4, r0
 8004f26:	4608      	mov	r0, r1
 8004f28:	4611      	mov	r1, r2
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	602a      	str	r2, [r5, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f7fc fbfe 	bl	8001730 <_lseek>
 8004f34:	1c43      	adds	r3, r0, #1
 8004f36:	d102      	bne.n	8004f3e <_lseek_r+0x1e>
 8004f38:	682b      	ldr	r3, [r5, #0]
 8004f3a:	b103      	cbz	r3, 8004f3e <_lseek_r+0x1e>
 8004f3c:	6023      	str	r3, [r4, #0]
 8004f3e:	bd38      	pop	{r3, r4, r5, pc}
 8004f40:	20000440 	.word	0x20000440

08004f44 <_read_r>:
 8004f44:	b538      	push	{r3, r4, r5, lr}
 8004f46:	4d07      	ldr	r5, [pc, #28]	@ (8004f64 <_read_r+0x20>)
 8004f48:	4604      	mov	r4, r0
 8004f4a:	4608      	mov	r0, r1
 8004f4c:	4611      	mov	r1, r2
 8004f4e:	2200      	movs	r2, #0
 8004f50:	602a      	str	r2, [r5, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	f7fc fb8c 	bl	8001670 <_read>
 8004f58:	1c43      	adds	r3, r0, #1
 8004f5a:	d102      	bne.n	8004f62 <_read_r+0x1e>
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	b103      	cbz	r3, 8004f62 <_read_r+0x1e>
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	bd38      	pop	{r3, r4, r5, pc}
 8004f64:	20000440 	.word	0x20000440

08004f68 <_write_r>:
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	4d07      	ldr	r5, [pc, #28]	@ (8004f88 <_write_r+0x20>)
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	4608      	mov	r0, r1
 8004f70:	4611      	mov	r1, r2
 8004f72:	2200      	movs	r2, #0
 8004f74:	602a      	str	r2, [r5, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	f7fc fb97 	bl	80016aa <_write>
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	d102      	bne.n	8004f86 <_write_r+0x1e>
 8004f80:	682b      	ldr	r3, [r5, #0]
 8004f82:	b103      	cbz	r3, 8004f86 <_write_r+0x1e>
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	bd38      	pop	{r3, r4, r5, pc}
 8004f88:	20000440 	.word	0x20000440

08004f8c <__errno>:
 8004f8c:	4b01      	ldr	r3, [pc, #4]	@ (8004f94 <__errno+0x8>)
 8004f8e:	6818      	ldr	r0, [r3, #0]
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	20000018 	.word	0x20000018

08004f98 <__libc_init_array>:
 8004f98:	b570      	push	{r4, r5, r6, lr}
 8004f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8004fd0 <__libc_init_array+0x38>)
 8004f9c:	4c0d      	ldr	r4, [pc, #52]	@ (8004fd4 <__libc_init_array+0x3c>)
 8004f9e:	1b64      	subs	r4, r4, r5
 8004fa0:	10a4      	asrs	r4, r4, #2
 8004fa2:	2600      	movs	r6, #0
 8004fa4:	42a6      	cmp	r6, r4
 8004fa6:	d109      	bne.n	8004fbc <__libc_init_array+0x24>
 8004fa8:	4d0b      	ldr	r5, [pc, #44]	@ (8004fd8 <__libc_init_array+0x40>)
 8004faa:	4c0c      	ldr	r4, [pc, #48]	@ (8004fdc <__libc_init_array+0x44>)
 8004fac:	f000 fd56 	bl	8005a5c <_init>
 8004fb0:	1b64      	subs	r4, r4, r5
 8004fb2:	10a4      	asrs	r4, r4, #2
 8004fb4:	2600      	movs	r6, #0
 8004fb6:	42a6      	cmp	r6, r4
 8004fb8:	d105      	bne.n	8004fc6 <__libc_init_array+0x2e>
 8004fba:	bd70      	pop	{r4, r5, r6, pc}
 8004fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc0:	4798      	blx	r3
 8004fc2:	3601      	adds	r6, #1
 8004fc4:	e7ee      	b.n	8004fa4 <__libc_init_array+0xc>
 8004fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fca:	4798      	blx	r3
 8004fcc:	3601      	adds	r6, #1
 8004fce:	e7f2      	b.n	8004fb6 <__libc_init_array+0x1e>
 8004fd0:	08005af8 	.word	0x08005af8
 8004fd4:	08005af8 	.word	0x08005af8
 8004fd8:	08005af8 	.word	0x08005af8
 8004fdc:	08005afc 	.word	0x08005afc

08004fe0 <__retarget_lock_init_recursive>:
 8004fe0:	4770      	bx	lr

08004fe2 <__retarget_lock_acquire_recursive>:
 8004fe2:	4770      	bx	lr

08004fe4 <__retarget_lock_release_recursive>:
 8004fe4:	4770      	bx	lr
	...

08004fe8 <_free_r>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	4605      	mov	r5, r0
 8004fec:	2900      	cmp	r1, #0
 8004fee:	d041      	beq.n	8005074 <_free_r+0x8c>
 8004ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ff4:	1f0c      	subs	r4, r1, #4
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	bfb8      	it	lt
 8004ffa:	18e4      	addlt	r4, r4, r3
 8004ffc:	f000 f8e0 	bl	80051c0 <__malloc_lock>
 8005000:	4a1d      	ldr	r2, [pc, #116]	@ (8005078 <_free_r+0x90>)
 8005002:	6813      	ldr	r3, [r2, #0]
 8005004:	b933      	cbnz	r3, 8005014 <_free_r+0x2c>
 8005006:	6063      	str	r3, [r4, #4]
 8005008:	6014      	str	r4, [r2, #0]
 800500a:	4628      	mov	r0, r5
 800500c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005010:	f000 b8dc 	b.w	80051cc <__malloc_unlock>
 8005014:	42a3      	cmp	r3, r4
 8005016:	d908      	bls.n	800502a <_free_r+0x42>
 8005018:	6820      	ldr	r0, [r4, #0]
 800501a:	1821      	adds	r1, r4, r0
 800501c:	428b      	cmp	r3, r1
 800501e:	bf01      	itttt	eq
 8005020:	6819      	ldreq	r1, [r3, #0]
 8005022:	685b      	ldreq	r3, [r3, #4]
 8005024:	1809      	addeq	r1, r1, r0
 8005026:	6021      	streq	r1, [r4, #0]
 8005028:	e7ed      	b.n	8005006 <_free_r+0x1e>
 800502a:	461a      	mov	r2, r3
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	b10b      	cbz	r3, 8005034 <_free_r+0x4c>
 8005030:	42a3      	cmp	r3, r4
 8005032:	d9fa      	bls.n	800502a <_free_r+0x42>
 8005034:	6811      	ldr	r1, [r2, #0]
 8005036:	1850      	adds	r0, r2, r1
 8005038:	42a0      	cmp	r0, r4
 800503a:	d10b      	bne.n	8005054 <_free_r+0x6c>
 800503c:	6820      	ldr	r0, [r4, #0]
 800503e:	4401      	add	r1, r0
 8005040:	1850      	adds	r0, r2, r1
 8005042:	4283      	cmp	r3, r0
 8005044:	6011      	str	r1, [r2, #0]
 8005046:	d1e0      	bne.n	800500a <_free_r+0x22>
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	6053      	str	r3, [r2, #4]
 800504e:	4408      	add	r0, r1
 8005050:	6010      	str	r0, [r2, #0]
 8005052:	e7da      	b.n	800500a <_free_r+0x22>
 8005054:	d902      	bls.n	800505c <_free_r+0x74>
 8005056:	230c      	movs	r3, #12
 8005058:	602b      	str	r3, [r5, #0]
 800505a:	e7d6      	b.n	800500a <_free_r+0x22>
 800505c:	6820      	ldr	r0, [r4, #0]
 800505e:	1821      	adds	r1, r4, r0
 8005060:	428b      	cmp	r3, r1
 8005062:	bf04      	itt	eq
 8005064:	6819      	ldreq	r1, [r3, #0]
 8005066:	685b      	ldreq	r3, [r3, #4]
 8005068:	6063      	str	r3, [r4, #4]
 800506a:	bf04      	itt	eq
 800506c:	1809      	addeq	r1, r1, r0
 800506e:	6021      	streq	r1, [r4, #0]
 8005070:	6054      	str	r4, [r2, #4]
 8005072:	e7ca      	b.n	800500a <_free_r+0x22>
 8005074:	bd38      	pop	{r3, r4, r5, pc}
 8005076:	bf00      	nop
 8005078:	2000044c 	.word	0x2000044c

0800507c <sbrk_aligned>:
 800507c:	b570      	push	{r4, r5, r6, lr}
 800507e:	4e0f      	ldr	r6, [pc, #60]	@ (80050bc <sbrk_aligned+0x40>)
 8005080:	460c      	mov	r4, r1
 8005082:	6831      	ldr	r1, [r6, #0]
 8005084:	4605      	mov	r5, r0
 8005086:	b911      	cbnz	r1, 800508e <sbrk_aligned+0x12>
 8005088:	f000 fcd8 	bl	8005a3c <_sbrk_r>
 800508c:	6030      	str	r0, [r6, #0]
 800508e:	4621      	mov	r1, r4
 8005090:	4628      	mov	r0, r5
 8005092:	f000 fcd3 	bl	8005a3c <_sbrk_r>
 8005096:	1c43      	adds	r3, r0, #1
 8005098:	d103      	bne.n	80050a2 <sbrk_aligned+0x26>
 800509a:	f04f 34ff 	mov.w	r4, #4294967295
 800509e:	4620      	mov	r0, r4
 80050a0:	bd70      	pop	{r4, r5, r6, pc}
 80050a2:	1cc4      	adds	r4, r0, #3
 80050a4:	f024 0403 	bic.w	r4, r4, #3
 80050a8:	42a0      	cmp	r0, r4
 80050aa:	d0f8      	beq.n	800509e <sbrk_aligned+0x22>
 80050ac:	1a21      	subs	r1, r4, r0
 80050ae:	4628      	mov	r0, r5
 80050b0:	f000 fcc4 	bl	8005a3c <_sbrk_r>
 80050b4:	3001      	adds	r0, #1
 80050b6:	d1f2      	bne.n	800509e <sbrk_aligned+0x22>
 80050b8:	e7ef      	b.n	800509a <sbrk_aligned+0x1e>
 80050ba:	bf00      	nop
 80050bc:	20000448 	.word	0x20000448

080050c0 <_malloc_r>:
 80050c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050c4:	1ccd      	adds	r5, r1, #3
 80050c6:	f025 0503 	bic.w	r5, r5, #3
 80050ca:	3508      	adds	r5, #8
 80050cc:	2d0c      	cmp	r5, #12
 80050ce:	bf38      	it	cc
 80050d0:	250c      	movcc	r5, #12
 80050d2:	2d00      	cmp	r5, #0
 80050d4:	4606      	mov	r6, r0
 80050d6:	db01      	blt.n	80050dc <_malloc_r+0x1c>
 80050d8:	42a9      	cmp	r1, r5
 80050da:	d904      	bls.n	80050e6 <_malloc_r+0x26>
 80050dc:	230c      	movs	r3, #12
 80050de:	6033      	str	r3, [r6, #0]
 80050e0:	2000      	movs	r0, #0
 80050e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051bc <_malloc_r+0xfc>
 80050ea:	f000 f869 	bl	80051c0 <__malloc_lock>
 80050ee:	f8d8 3000 	ldr.w	r3, [r8]
 80050f2:	461c      	mov	r4, r3
 80050f4:	bb44      	cbnz	r4, 8005148 <_malloc_r+0x88>
 80050f6:	4629      	mov	r1, r5
 80050f8:	4630      	mov	r0, r6
 80050fa:	f7ff ffbf 	bl	800507c <sbrk_aligned>
 80050fe:	1c43      	adds	r3, r0, #1
 8005100:	4604      	mov	r4, r0
 8005102:	d158      	bne.n	80051b6 <_malloc_r+0xf6>
 8005104:	f8d8 4000 	ldr.w	r4, [r8]
 8005108:	4627      	mov	r7, r4
 800510a:	2f00      	cmp	r7, #0
 800510c:	d143      	bne.n	8005196 <_malloc_r+0xd6>
 800510e:	2c00      	cmp	r4, #0
 8005110:	d04b      	beq.n	80051aa <_malloc_r+0xea>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	4639      	mov	r1, r7
 8005116:	4630      	mov	r0, r6
 8005118:	eb04 0903 	add.w	r9, r4, r3
 800511c:	f000 fc8e 	bl	8005a3c <_sbrk_r>
 8005120:	4581      	cmp	r9, r0
 8005122:	d142      	bne.n	80051aa <_malloc_r+0xea>
 8005124:	6821      	ldr	r1, [r4, #0]
 8005126:	1a6d      	subs	r5, r5, r1
 8005128:	4629      	mov	r1, r5
 800512a:	4630      	mov	r0, r6
 800512c:	f7ff ffa6 	bl	800507c <sbrk_aligned>
 8005130:	3001      	adds	r0, #1
 8005132:	d03a      	beq.n	80051aa <_malloc_r+0xea>
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	442b      	add	r3, r5
 8005138:	6023      	str	r3, [r4, #0]
 800513a:	f8d8 3000 	ldr.w	r3, [r8]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	bb62      	cbnz	r2, 800519c <_malloc_r+0xdc>
 8005142:	f8c8 7000 	str.w	r7, [r8]
 8005146:	e00f      	b.n	8005168 <_malloc_r+0xa8>
 8005148:	6822      	ldr	r2, [r4, #0]
 800514a:	1b52      	subs	r2, r2, r5
 800514c:	d420      	bmi.n	8005190 <_malloc_r+0xd0>
 800514e:	2a0b      	cmp	r2, #11
 8005150:	d917      	bls.n	8005182 <_malloc_r+0xc2>
 8005152:	1961      	adds	r1, r4, r5
 8005154:	42a3      	cmp	r3, r4
 8005156:	6025      	str	r5, [r4, #0]
 8005158:	bf18      	it	ne
 800515a:	6059      	strne	r1, [r3, #4]
 800515c:	6863      	ldr	r3, [r4, #4]
 800515e:	bf08      	it	eq
 8005160:	f8c8 1000 	streq.w	r1, [r8]
 8005164:	5162      	str	r2, [r4, r5]
 8005166:	604b      	str	r3, [r1, #4]
 8005168:	4630      	mov	r0, r6
 800516a:	f000 f82f 	bl	80051cc <__malloc_unlock>
 800516e:	f104 000b 	add.w	r0, r4, #11
 8005172:	1d23      	adds	r3, r4, #4
 8005174:	f020 0007 	bic.w	r0, r0, #7
 8005178:	1ac2      	subs	r2, r0, r3
 800517a:	bf1c      	itt	ne
 800517c:	1a1b      	subne	r3, r3, r0
 800517e:	50a3      	strne	r3, [r4, r2]
 8005180:	e7af      	b.n	80050e2 <_malloc_r+0x22>
 8005182:	6862      	ldr	r2, [r4, #4]
 8005184:	42a3      	cmp	r3, r4
 8005186:	bf0c      	ite	eq
 8005188:	f8c8 2000 	streq.w	r2, [r8]
 800518c:	605a      	strne	r2, [r3, #4]
 800518e:	e7eb      	b.n	8005168 <_malloc_r+0xa8>
 8005190:	4623      	mov	r3, r4
 8005192:	6864      	ldr	r4, [r4, #4]
 8005194:	e7ae      	b.n	80050f4 <_malloc_r+0x34>
 8005196:	463c      	mov	r4, r7
 8005198:	687f      	ldr	r7, [r7, #4]
 800519a:	e7b6      	b.n	800510a <_malloc_r+0x4a>
 800519c:	461a      	mov	r2, r3
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	42a3      	cmp	r3, r4
 80051a2:	d1fb      	bne.n	800519c <_malloc_r+0xdc>
 80051a4:	2300      	movs	r3, #0
 80051a6:	6053      	str	r3, [r2, #4]
 80051a8:	e7de      	b.n	8005168 <_malloc_r+0xa8>
 80051aa:	230c      	movs	r3, #12
 80051ac:	6033      	str	r3, [r6, #0]
 80051ae:	4630      	mov	r0, r6
 80051b0:	f000 f80c 	bl	80051cc <__malloc_unlock>
 80051b4:	e794      	b.n	80050e0 <_malloc_r+0x20>
 80051b6:	6005      	str	r5, [r0, #0]
 80051b8:	e7d6      	b.n	8005168 <_malloc_r+0xa8>
 80051ba:	bf00      	nop
 80051bc:	2000044c 	.word	0x2000044c

080051c0 <__malloc_lock>:
 80051c0:	4801      	ldr	r0, [pc, #4]	@ (80051c8 <__malloc_lock+0x8>)
 80051c2:	f7ff bf0e 	b.w	8004fe2 <__retarget_lock_acquire_recursive>
 80051c6:	bf00      	nop
 80051c8:	20000444 	.word	0x20000444

080051cc <__malloc_unlock>:
 80051cc:	4801      	ldr	r0, [pc, #4]	@ (80051d4 <__malloc_unlock+0x8>)
 80051ce:	f7ff bf09 	b.w	8004fe4 <__retarget_lock_release_recursive>
 80051d2:	bf00      	nop
 80051d4:	20000444 	.word	0x20000444

080051d8 <__sfputc_r>:
 80051d8:	6893      	ldr	r3, [r2, #8]
 80051da:	3b01      	subs	r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	b410      	push	{r4}
 80051e0:	6093      	str	r3, [r2, #8]
 80051e2:	da08      	bge.n	80051f6 <__sfputc_r+0x1e>
 80051e4:	6994      	ldr	r4, [r2, #24]
 80051e6:	42a3      	cmp	r3, r4
 80051e8:	db01      	blt.n	80051ee <__sfputc_r+0x16>
 80051ea:	290a      	cmp	r1, #10
 80051ec:	d103      	bne.n	80051f6 <__sfputc_r+0x1e>
 80051ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051f2:	f7ff bde8 	b.w	8004dc6 <__swbuf_r>
 80051f6:	6813      	ldr	r3, [r2, #0]
 80051f8:	1c58      	adds	r0, r3, #1
 80051fa:	6010      	str	r0, [r2, #0]
 80051fc:	7019      	strb	r1, [r3, #0]
 80051fe:	4608      	mov	r0, r1
 8005200:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005204:	4770      	bx	lr

08005206 <__sfputs_r>:
 8005206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005208:	4606      	mov	r6, r0
 800520a:	460f      	mov	r7, r1
 800520c:	4614      	mov	r4, r2
 800520e:	18d5      	adds	r5, r2, r3
 8005210:	42ac      	cmp	r4, r5
 8005212:	d101      	bne.n	8005218 <__sfputs_r+0x12>
 8005214:	2000      	movs	r0, #0
 8005216:	e007      	b.n	8005228 <__sfputs_r+0x22>
 8005218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800521c:	463a      	mov	r2, r7
 800521e:	4630      	mov	r0, r6
 8005220:	f7ff ffda 	bl	80051d8 <__sfputc_r>
 8005224:	1c43      	adds	r3, r0, #1
 8005226:	d1f3      	bne.n	8005210 <__sfputs_r+0xa>
 8005228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800522c <_vfiprintf_r>:
 800522c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005230:	460d      	mov	r5, r1
 8005232:	b09d      	sub	sp, #116	@ 0x74
 8005234:	4614      	mov	r4, r2
 8005236:	4698      	mov	r8, r3
 8005238:	4606      	mov	r6, r0
 800523a:	b118      	cbz	r0, 8005244 <_vfiprintf_r+0x18>
 800523c:	6a03      	ldr	r3, [r0, #32]
 800523e:	b90b      	cbnz	r3, 8005244 <_vfiprintf_r+0x18>
 8005240:	f7ff fd2e 	bl	8004ca0 <__sinit>
 8005244:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005246:	07d9      	lsls	r1, r3, #31
 8005248:	d405      	bmi.n	8005256 <_vfiprintf_r+0x2a>
 800524a:	89ab      	ldrh	r3, [r5, #12]
 800524c:	059a      	lsls	r2, r3, #22
 800524e:	d402      	bmi.n	8005256 <_vfiprintf_r+0x2a>
 8005250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005252:	f7ff fec6 	bl	8004fe2 <__retarget_lock_acquire_recursive>
 8005256:	89ab      	ldrh	r3, [r5, #12]
 8005258:	071b      	lsls	r3, r3, #28
 800525a:	d501      	bpl.n	8005260 <_vfiprintf_r+0x34>
 800525c:	692b      	ldr	r3, [r5, #16]
 800525e:	b99b      	cbnz	r3, 8005288 <_vfiprintf_r+0x5c>
 8005260:	4629      	mov	r1, r5
 8005262:	4630      	mov	r0, r6
 8005264:	f7ff fdee 	bl	8004e44 <__swsetup_r>
 8005268:	b170      	cbz	r0, 8005288 <_vfiprintf_r+0x5c>
 800526a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800526c:	07dc      	lsls	r4, r3, #31
 800526e:	d504      	bpl.n	800527a <_vfiprintf_r+0x4e>
 8005270:	f04f 30ff 	mov.w	r0, #4294967295
 8005274:	b01d      	add	sp, #116	@ 0x74
 8005276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800527a:	89ab      	ldrh	r3, [r5, #12]
 800527c:	0598      	lsls	r0, r3, #22
 800527e:	d4f7      	bmi.n	8005270 <_vfiprintf_r+0x44>
 8005280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005282:	f7ff feaf 	bl	8004fe4 <__retarget_lock_release_recursive>
 8005286:	e7f3      	b.n	8005270 <_vfiprintf_r+0x44>
 8005288:	2300      	movs	r3, #0
 800528a:	9309      	str	r3, [sp, #36]	@ 0x24
 800528c:	2320      	movs	r3, #32
 800528e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005292:	f8cd 800c 	str.w	r8, [sp, #12]
 8005296:	2330      	movs	r3, #48	@ 0x30
 8005298:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005448 <_vfiprintf_r+0x21c>
 800529c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80052a0:	f04f 0901 	mov.w	r9, #1
 80052a4:	4623      	mov	r3, r4
 80052a6:	469a      	mov	sl, r3
 80052a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052ac:	b10a      	cbz	r2, 80052b2 <_vfiprintf_r+0x86>
 80052ae:	2a25      	cmp	r2, #37	@ 0x25
 80052b0:	d1f9      	bne.n	80052a6 <_vfiprintf_r+0x7a>
 80052b2:	ebba 0b04 	subs.w	fp, sl, r4
 80052b6:	d00b      	beq.n	80052d0 <_vfiprintf_r+0xa4>
 80052b8:	465b      	mov	r3, fp
 80052ba:	4622      	mov	r2, r4
 80052bc:	4629      	mov	r1, r5
 80052be:	4630      	mov	r0, r6
 80052c0:	f7ff ffa1 	bl	8005206 <__sfputs_r>
 80052c4:	3001      	adds	r0, #1
 80052c6:	f000 80a7 	beq.w	8005418 <_vfiprintf_r+0x1ec>
 80052ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052cc:	445a      	add	r2, fp
 80052ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80052d0:	f89a 3000 	ldrb.w	r3, [sl]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 809f 	beq.w	8005418 <_vfiprintf_r+0x1ec>
 80052da:	2300      	movs	r3, #0
 80052dc:	f04f 32ff 	mov.w	r2, #4294967295
 80052e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052e4:	f10a 0a01 	add.w	sl, sl, #1
 80052e8:	9304      	str	r3, [sp, #16]
 80052ea:	9307      	str	r3, [sp, #28]
 80052ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80052f2:	4654      	mov	r4, sl
 80052f4:	2205      	movs	r2, #5
 80052f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052fa:	4853      	ldr	r0, [pc, #332]	@ (8005448 <_vfiprintf_r+0x21c>)
 80052fc:	f7fa ff88 	bl	8000210 <memchr>
 8005300:	9a04      	ldr	r2, [sp, #16]
 8005302:	b9d8      	cbnz	r0, 800533c <_vfiprintf_r+0x110>
 8005304:	06d1      	lsls	r1, r2, #27
 8005306:	bf44      	itt	mi
 8005308:	2320      	movmi	r3, #32
 800530a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800530e:	0713      	lsls	r3, r2, #28
 8005310:	bf44      	itt	mi
 8005312:	232b      	movmi	r3, #43	@ 0x2b
 8005314:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005318:	f89a 3000 	ldrb.w	r3, [sl]
 800531c:	2b2a      	cmp	r3, #42	@ 0x2a
 800531e:	d015      	beq.n	800534c <_vfiprintf_r+0x120>
 8005320:	9a07      	ldr	r2, [sp, #28]
 8005322:	4654      	mov	r4, sl
 8005324:	2000      	movs	r0, #0
 8005326:	f04f 0c0a 	mov.w	ip, #10
 800532a:	4621      	mov	r1, r4
 800532c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005330:	3b30      	subs	r3, #48	@ 0x30
 8005332:	2b09      	cmp	r3, #9
 8005334:	d94b      	bls.n	80053ce <_vfiprintf_r+0x1a2>
 8005336:	b1b0      	cbz	r0, 8005366 <_vfiprintf_r+0x13a>
 8005338:	9207      	str	r2, [sp, #28]
 800533a:	e014      	b.n	8005366 <_vfiprintf_r+0x13a>
 800533c:	eba0 0308 	sub.w	r3, r0, r8
 8005340:	fa09 f303 	lsl.w	r3, r9, r3
 8005344:	4313      	orrs	r3, r2
 8005346:	9304      	str	r3, [sp, #16]
 8005348:	46a2      	mov	sl, r4
 800534a:	e7d2      	b.n	80052f2 <_vfiprintf_r+0xc6>
 800534c:	9b03      	ldr	r3, [sp, #12]
 800534e:	1d19      	adds	r1, r3, #4
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	9103      	str	r1, [sp, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	bfbb      	ittet	lt
 8005358:	425b      	neglt	r3, r3
 800535a:	f042 0202 	orrlt.w	r2, r2, #2
 800535e:	9307      	strge	r3, [sp, #28]
 8005360:	9307      	strlt	r3, [sp, #28]
 8005362:	bfb8      	it	lt
 8005364:	9204      	strlt	r2, [sp, #16]
 8005366:	7823      	ldrb	r3, [r4, #0]
 8005368:	2b2e      	cmp	r3, #46	@ 0x2e
 800536a:	d10a      	bne.n	8005382 <_vfiprintf_r+0x156>
 800536c:	7863      	ldrb	r3, [r4, #1]
 800536e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005370:	d132      	bne.n	80053d8 <_vfiprintf_r+0x1ac>
 8005372:	9b03      	ldr	r3, [sp, #12]
 8005374:	1d1a      	adds	r2, r3, #4
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	9203      	str	r2, [sp, #12]
 800537a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800537e:	3402      	adds	r4, #2
 8005380:	9305      	str	r3, [sp, #20]
 8005382:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005458 <_vfiprintf_r+0x22c>
 8005386:	7821      	ldrb	r1, [r4, #0]
 8005388:	2203      	movs	r2, #3
 800538a:	4650      	mov	r0, sl
 800538c:	f7fa ff40 	bl	8000210 <memchr>
 8005390:	b138      	cbz	r0, 80053a2 <_vfiprintf_r+0x176>
 8005392:	9b04      	ldr	r3, [sp, #16]
 8005394:	eba0 000a 	sub.w	r0, r0, sl
 8005398:	2240      	movs	r2, #64	@ 0x40
 800539a:	4082      	lsls	r2, r0
 800539c:	4313      	orrs	r3, r2
 800539e:	3401      	adds	r4, #1
 80053a0:	9304      	str	r3, [sp, #16]
 80053a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a6:	4829      	ldr	r0, [pc, #164]	@ (800544c <_vfiprintf_r+0x220>)
 80053a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80053ac:	2206      	movs	r2, #6
 80053ae:	f7fa ff2f 	bl	8000210 <memchr>
 80053b2:	2800      	cmp	r0, #0
 80053b4:	d03f      	beq.n	8005436 <_vfiprintf_r+0x20a>
 80053b6:	4b26      	ldr	r3, [pc, #152]	@ (8005450 <_vfiprintf_r+0x224>)
 80053b8:	bb1b      	cbnz	r3, 8005402 <_vfiprintf_r+0x1d6>
 80053ba:	9b03      	ldr	r3, [sp, #12]
 80053bc:	3307      	adds	r3, #7
 80053be:	f023 0307 	bic.w	r3, r3, #7
 80053c2:	3308      	adds	r3, #8
 80053c4:	9303      	str	r3, [sp, #12]
 80053c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053c8:	443b      	add	r3, r7
 80053ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80053cc:	e76a      	b.n	80052a4 <_vfiprintf_r+0x78>
 80053ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80053d2:	460c      	mov	r4, r1
 80053d4:	2001      	movs	r0, #1
 80053d6:	e7a8      	b.n	800532a <_vfiprintf_r+0xfe>
 80053d8:	2300      	movs	r3, #0
 80053da:	3401      	adds	r4, #1
 80053dc:	9305      	str	r3, [sp, #20]
 80053de:	4619      	mov	r1, r3
 80053e0:	f04f 0c0a 	mov.w	ip, #10
 80053e4:	4620      	mov	r0, r4
 80053e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053ea:	3a30      	subs	r2, #48	@ 0x30
 80053ec:	2a09      	cmp	r2, #9
 80053ee:	d903      	bls.n	80053f8 <_vfiprintf_r+0x1cc>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0c6      	beq.n	8005382 <_vfiprintf_r+0x156>
 80053f4:	9105      	str	r1, [sp, #20]
 80053f6:	e7c4      	b.n	8005382 <_vfiprintf_r+0x156>
 80053f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80053fc:	4604      	mov	r4, r0
 80053fe:	2301      	movs	r3, #1
 8005400:	e7f0      	b.n	80053e4 <_vfiprintf_r+0x1b8>
 8005402:	ab03      	add	r3, sp, #12
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	462a      	mov	r2, r5
 8005408:	4b12      	ldr	r3, [pc, #72]	@ (8005454 <_vfiprintf_r+0x228>)
 800540a:	a904      	add	r1, sp, #16
 800540c:	4630      	mov	r0, r6
 800540e:	f3af 8000 	nop.w
 8005412:	4607      	mov	r7, r0
 8005414:	1c78      	adds	r0, r7, #1
 8005416:	d1d6      	bne.n	80053c6 <_vfiprintf_r+0x19a>
 8005418:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800541a:	07d9      	lsls	r1, r3, #31
 800541c:	d405      	bmi.n	800542a <_vfiprintf_r+0x1fe>
 800541e:	89ab      	ldrh	r3, [r5, #12]
 8005420:	059a      	lsls	r2, r3, #22
 8005422:	d402      	bmi.n	800542a <_vfiprintf_r+0x1fe>
 8005424:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005426:	f7ff fddd 	bl	8004fe4 <__retarget_lock_release_recursive>
 800542a:	89ab      	ldrh	r3, [r5, #12]
 800542c:	065b      	lsls	r3, r3, #25
 800542e:	f53f af1f 	bmi.w	8005270 <_vfiprintf_r+0x44>
 8005432:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005434:	e71e      	b.n	8005274 <_vfiprintf_r+0x48>
 8005436:	ab03      	add	r3, sp, #12
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	462a      	mov	r2, r5
 800543c:	4b05      	ldr	r3, [pc, #20]	@ (8005454 <_vfiprintf_r+0x228>)
 800543e:	a904      	add	r1, sp, #16
 8005440:	4630      	mov	r0, r6
 8005442:	f000 f879 	bl	8005538 <_printf_i>
 8005446:	e7e4      	b.n	8005412 <_vfiprintf_r+0x1e6>
 8005448:	08005abc 	.word	0x08005abc
 800544c:	08005ac6 	.word	0x08005ac6
 8005450:	00000000 	.word	0x00000000
 8005454:	08005207 	.word	0x08005207
 8005458:	08005ac2 	.word	0x08005ac2

0800545c <_printf_common>:
 800545c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005460:	4616      	mov	r6, r2
 8005462:	4698      	mov	r8, r3
 8005464:	688a      	ldr	r2, [r1, #8]
 8005466:	690b      	ldr	r3, [r1, #16]
 8005468:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800546c:	4293      	cmp	r3, r2
 800546e:	bfb8      	it	lt
 8005470:	4613      	movlt	r3, r2
 8005472:	6033      	str	r3, [r6, #0]
 8005474:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005478:	4607      	mov	r7, r0
 800547a:	460c      	mov	r4, r1
 800547c:	b10a      	cbz	r2, 8005482 <_printf_common+0x26>
 800547e:	3301      	adds	r3, #1
 8005480:	6033      	str	r3, [r6, #0]
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	0699      	lsls	r1, r3, #26
 8005486:	bf42      	ittt	mi
 8005488:	6833      	ldrmi	r3, [r6, #0]
 800548a:	3302      	addmi	r3, #2
 800548c:	6033      	strmi	r3, [r6, #0]
 800548e:	6825      	ldr	r5, [r4, #0]
 8005490:	f015 0506 	ands.w	r5, r5, #6
 8005494:	d106      	bne.n	80054a4 <_printf_common+0x48>
 8005496:	f104 0a19 	add.w	sl, r4, #25
 800549a:	68e3      	ldr	r3, [r4, #12]
 800549c:	6832      	ldr	r2, [r6, #0]
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	42ab      	cmp	r3, r5
 80054a2:	dc26      	bgt.n	80054f2 <_printf_common+0x96>
 80054a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80054a8:	6822      	ldr	r2, [r4, #0]
 80054aa:	3b00      	subs	r3, #0
 80054ac:	bf18      	it	ne
 80054ae:	2301      	movne	r3, #1
 80054b0:	0692      	lsls	r2, r2, #26
 80054b2:	d42b      	bmi.n	800550c <_printf_common+0xb0>
 80054b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054b8:	4641      	mov	r1, r8
 80054ba:	4638      	mov	r0, r7
 80054bc:	47c8      	blx	r9
 80054be:	3001      	adds	r0, #1
 80054c0:	d01e      	beq.n	8005500 <_printf_common+0xa4>
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	6922      	ldr	r2, [r4, #16]
 80054c6:	f003 0306 	and.w	r3, r3, #6
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	bf02      	ittt	eq
 80054ce:	68e5      	ldreq	r5, [r4, #12]
 80054d0:	6833      	ldreq	r3, [r6, #0]
 80054d2:	1aed      	subeq	r5, r5, r3
 80054d4:	68a3      	ldr	r3, [r4, #8]
 80054d6:	bf0c      	ite	eq
 80054d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054dc:	2500      	movne	r5, #0
 80054de:	4293      	cmp	r3, r2
 80054e0:	bfc4      	itt	gt
 80054e2:	1a9b      	subgt	r3, r3, r2
 80054e4:	18ed      	addgt	r5, r5, r3
 80054e6:	2600      	movs	r6, #0
 80054e8:	341a      	adds	r4, #26
 80054ea:	42b5      	cmp	r5, r6
 80054ec:	d11a      	bne.n	8005524 <_printf_common+0xc8>
 80054ee:	2000      	movs	r0, #0
 80054f0:	e008      	b.n	8005504 <_printf_common+0xa8>
 80054f2:	2301      	movs	r3, #1
 80054f4:	4652      	mov	r2, sl
 80054f6:	4641      	mov	r1, r8
 80054f8:	4638      	mov	r0, r7
 80054fa:	47c8      	blx	r9
 80054fc:	3001      	adds	r0, #1
 80054fe:	d103      	bne.n	8005508 <_printf_common+0xac>
 8005500:	f04f 30ff 	mov.w	r0, #4294967295
 8005504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005508:	3501      	adds	r5, #1
 800550a:	e7c6      	b.n	800549a <_printf_common+0x3e>
 800550c:	18e1      	adds	r1, r4, r3
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	2030      	movs	r0, #48	@ 0x30
 8005512:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005516:	4422      	add	r2, r4
 8005518:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800551c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005520:	3302      	adds	r3, #2
 8005522:	e7c7      	b.n	80054b4 <_printf_common+0x58>
 8005524:	2301      	movs	r3, #1
 8005526:	4622      	mov	r2, r4
 8005528:	4641      	mov	r1, r8
 800552a:	4638      	mov	r0, r7
 800552c:	47c8      	blx	r9
 800552e:	3001      	adds	r0, #1
 8005530:	d0e6      	beq.n	8005500 <_printf_common+0xa4>
 8005532:	3601      	adds	r6, #1
 8005534:	e7d9      	b.n	80054ea <_printf_common+0x8e>
	...

08005538 <_printf_i>:
 8005538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800553c:	7e0f      	ldrb	r7, [r1, #24]
 800553e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005540:	2f78      	cmp	r7, #120	@ 0x78
 8005542:	4691      	mov	r9, r2
 8005544:	4680      	mov	r8, r0
 8005546:	460c      	mov	r4, r1
 8005548:	469a      	mov	sl, r3
 800554a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800554e:	d807      	bhi.n	8005560 <_printf_i+0x28>
 8005550:	2f62      	cmp	r7, #98	@ 0x62
 8005552:	d80a      	bhi.n	800556a <_printf_i+0x32>
 8005554:	2f00      	cmp	r7, #0
 8005556:	f000 80d1 	beq.w	80056fc <_printf_i+0x1c4>
 800555a:	2f58      	cmp	r7, #88	@ 0x58
 800555c:	f000 80b8 	beq.w	80056d0 <_printf_i+0x198>
 8005560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005564:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005568:	e03a      	b.n	80055e0 <_printf_i+0xa8>
 800556a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800556e:	2b15      	cmp	r3, #21
 8005570:	d8f6      	bhi.n	8005560 <_printf_i+0x28>
 8005572:	a101      	add	r1, pc, #4	@ (adr r1, 8005578 <_printf_i+0x40>)
 8005574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005578:	080055d1 	.word	0x080055d1
 800557c:	080055e5 	.word	0x080055e5
 8005580:	08005561 	.word	0x08005561
 8005584:	08005561 	.word	0x08005561
 8005588:	08005561 	.word	0x08005561
 800558c:	08005561 	.word	0x08005561
 8005590:	080055e5 	.word	0x080055e5
 8005594:	08005561 	.word	0x08005561
 8005598:	08005561 	.word	0x08005561
 800559c:	08005561 	.word	0x08005561
 80055a0:	08005561 	.word	0x08005561
 80055a4:	080056e3 	.word	0x080056e3
 80055a8:	0800560f 	.word	0x0800560f
 80055ac:	0800569d 	.word	0x0800569d
 80055b0:	08005561 	.word	0x08005561
 80055b4:	08005561 	.word	0x08005561
 80055b8:	08005705 	.word	0x08005705
 80055bc:	08005561 	.word	0x08005561
 80055c0:	0800560f 	.word	0x0800560f
 80055c4:	08005561 	.word	0x08005561
 80055c8:	08005561 	.word	0x08005561
 80055cc:	080056a5 	.word	0x080056a5
 80055d0:	6833      	ldr	r3, [r6, #0]
 80055d2:	1d1a      	adds	r2, r3, #4
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6032      	str	r2, [r6, #0]
 80055d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055e0:	2301      	movs	r3, #1
 80055e2:	e09c      	b.n	800571e <_printf_i+0x1e6>
 80055e4:	6833      	ldr	r3, [r6, #0]
 80055e6:	6820      	ldr	r0, [r4, #0]
 80055e8:	1d19      	adds	r1, r3, #4
 80055ea:	6031      	str	r1, [r6, #0]
 80055ec:	0606      	lsls	r6, r0, #24
 80055ee:	d501      	bpl.n	80055f4 <_printf_i+0xbc>
 80055f0:	681d      	ldr	r5, [r3, #0]
 80055f2:	e003      	b.n	80055fc <_printf_i+0xc4>
 80055f4:	0645      	lsls	r5, r0, #25
 80055f6:	d5fb      	bpl.n	80055f0 <_printf_i+0xb8>
 80055f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055fc:	2d00      	cmp	r5, #0
 80055fe:	da03      	bge.n	8005608 <_printf_i+0xd0>
 8005600:	232d      	movs	r3, #45	@ 0x2d
 8005602:	426d      	negs	r5, r5
 8005604:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005608:	4858      	ldr	r0, [pc, #352]	@ (800576c <_printf_i+0x234>)
 800560a:	230a      	movs	r3, #10
 800560c:	e011      	b.n	8005632 <_printf_i+0xfa>
 800560e:	6821      	ldr	r1, [r4, #0]
 8005610:	6833      	ldr	r3, [r6, #0]
 8005612:	0608      	lsls	r0, r1, #24
 8005614:	f853 5b04 	ldr.w	r5, [r3], #4
 8005618:	d402      	bmi.n	8005620 <_printf_i+0xe8>
 800561a:	0649      	lsls	r1, r1, #25
 800561c:	bf48      	it	mi
 800561e:	b2ad      	uxthmi	r5, r5
 8005620:	2f6f      	cmp	r7, #111	@ 0x6f
 8005622:	4852      	ldr	r0, [pc, #328]	@ (800576c <_printf_i+0x234>)
 8005624:	6033      	str	r3, [r6, #0]
 8005626:	bf14      	ite	ne
 8005628:	230a      	movne	r3, #10
 800562a:	2308      	moveq	r3, #8
 800562c:	2100      	movs	r1, #0
 800562e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005632:	6866      	ldr	r6, [r4, #4]
 8005634:	60a6      	str	r6, [r4, #8]
 8005636:	2e00      	cmp	r6, #0
 8005638:	db05      	blt.n	8005646 <_printf_i+0x10e>
 800563a:	6821      	ldr	r1, [r4, #0]
 800563c:	432e      	orrs	r6, r5
 800563e:	f021 0104 	bic.w	r1, r1, #4
 8005642:	6021      	str	r1, [r4, #0]
 8005644:	d04b      	beq.n	80056de <_printf_i+0x1a6>
 8005646:	4616      	mov	r6, r2
 8005648:	fbb5 f1f3 	udiv	r1, r5, r3
 800564c:	fb03 5711 	mls	r7, r3, r1, r5
 8005650:	5dc7      	ldrb	r7, [r0, r7]
 8005652:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005656:	462f      	mov	r7, r5
 8005658:	42bb      	cmp	r3, r7
 800565a:	460d      	mov	r5, r1
 800565c:	d9f4      	bls.n	8005648 <_printf_i+0x110>
 800565e:	2b08      	cmp	r3, #8
 8005660:	d10b      	bne.n	800567a <_printf_i+0x142>
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	07df      	lsls	r7, r3, #31
 8005666:	d508      	bpl.n	800567a <_printf_i+0x142>
 8005668:	6923      	ldr	r3, [r4, #16]
 800566a:	6861      	ldr	r1, [r4, #4]
 800566c:	4299      	cmp	r1, r3
 800566e:	bfde      	ittt	le
 8005670:	2330      	movle	r3, #48	@ 0x30
 8005672:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005676:	f106 36ff 	addle.w	r6, r6, #4294967295
 800567a:	1b92      	subs	r2, r2, r6
 800567c:	6122      	str	r2, [r4, #16]
 800567e:	f8cd a000 	str.w	sl, [sp]
 8005682:	464b      	mov	r3, r9
 8005684:	aa03      	add	r2, sp, #12
 8005686:	4621      	mov	r1, r4
 8005688:	4640      	mov	r0, r8
 800568a:	f7ff fee7 	bl	800545c <_printf_common>
 800568e:	3001      	adds	r0, #1
 8005690:	d14a      	bne.n	8005728 <_printf_i+0x1f0>
 8005692:	f04f 30ff 	mov.w	r0, #4294967295
 8005696:	b004      	add	sp, #16
 8005698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800569c:	6823      	ldr	r3, [r4, #0]
 800569e:	f043 0320 	orr.w	r3, r3, #32
 80056a2:	6023      	str	r3, [r4, #0]
 80056a4:	4832      	ldr	r0, [pc, #200]	@ (8005770 <_printf_i+0x238>)
 80056a6:	2778      	movs	r7, #120	@ 0x78
 80056a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	6831      	ldr	r1, [r6, #0]
 80056b0:	061f      	lsls	r7, r3, #24
 80056b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80056b6:	d402      	bmi.n	80056be <_printf_i+0x186>
 80056b8:	065f      	lsls	r7, r3, #25
 80056ba:	bf48      	it	mi
 80056bc:	b2ad      	uxthmi	r5, r5
 80056be:	6031      	str	r1, [r6, #0]
 80056c0:	07d9      	lsls	r1, r3, #31
 80056c2:	bf44      	itt	mi
 80056c4:	f043 0320 	orrmi.w	r3, r3, #32
 80056c8:	6023      	strmi	r3, [r4, #0]
 80056ca:	b11d      	cbz	r5, 80056d4 <_printf_i+0x19c>
 80056cc:	2310      	movs	r3, #16
 80056ce:	e7ad      	b.n	800562c <_printf_i+0xf4>
 80056d0:	4826      	ldr	r0, [pc, #152]	@ (800576c <_printf_i+0x234>)
 80056d2:	e7e9      	b.n	80056a8 <_printf_i+0x170>
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	f023 0320 	bic.w	r3, r3, #32
 80056da:	6023      	str	r3, [r4, #0]
 80056dc:	e7f6      	b.n	80056cc <_printf_i+0x194>
 80056de:	4616      	mov	r6, r2
 80056e0:	e7bd      	b.n	800565e <_printf_i+0x126>
 80056e2:	6833      	ldr	r3, [r6, #0]
 80056e4:	6825      	ldr	r5, [r4, #0]
 80056e6:	6961      	ldr	r1, [r4, #20]
 80056e8:	1d18      	adds	r0, r3, #4
 80056ea:	6030      	str	r0, [r6, #0]
 80056ec:	062e      	lsls	r6, r5, #24
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	d501      	bpl.n	80056f6 <_printf_i+0x1be>
 80056f2:	6019      	str	r1, [r3, #0]
 80056f4:	e002      	b.n	80056fc <_printf_i+0x1c4>
 80056f6:	0668      	lsls	r0, r5, #25
 80056f8:	d5fb      	bpl.n	80056f2 <_printf_i+0x1ba>
 80056fa:	8019      	strh	r1, [r3, #0]
 80056fc:	2300      	movs	r3, #0
 80056fe:	6123      	str	r3, [r4, #16]
 8005700:	4616      	mov	r6, r2
 8005702:	e7bc      	b.n	800567e <_printf_i+0x146>
 8005704:	6833      	ldr	r3, [r6, #0]
 8005706:	1d1a      	adds	r2, r3, #4
 8005708:	6032      	str	r2, [r6, #0]
 800570a:	681e      	ldr	r6, [r3, #0]
 800570c:	6862      	ldr	r2, [r4, #4]
 800570e:	2100      	movs	r1, #0
 8005710:	4630      	mov	r0, r6
 8005712:	f7fa fd7d 	bl	8000210 <memchr>
 8005716:	b108      	cbz	r0, 800571c <_printf_i+0x1e4>
 8005718:	1b80      	subs	r0, r0, r6
 800571a:	6060      	str	r0, [r4, #4]
 800571c:	6863      	ldr	r3, [r4, #4]
 800571e:	6123      	str	r3, [r4, #16]
 8005720:	2300      	movs	r3, #0
 8005722:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005726:	e7aa      	b.n	800567e <_printf_i+0x146>
 8005728:	6923      	ldr	r3, [r4, #16]
 800572a:	4632      	mov	r2, r6
 800572c:	4649      	mov	r1, r9
 800572e:	4640      	mov	r0, r8
 8005730:	47d0      	blx	sl
 8005732:	3001      	adds	r0, #1
 8005734:	d0ad      	beq.n	8005692 <_printf_i+0x15a>
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	079b      	lsls	r3, r3, #30
 800573a:	d413      	bmi.n	8005764 <_printf_i+0x22c>
 800573c:	68e0      	ldr	r0, [r4, #12]
 800573e:	9b03      	ldr	r3, [sp, #12]
 8005740:	4298      	cmp	r0, r3
 8005742:	bfb8      	it	lt
 8005744:	4618      	movlt	r0, r3
 8005746:	e7a6      	b.n	8005696 <_printf_i+0x15e>
 8005748:	2301      	movs	r3, #1
 800574a:	4632      	mov	r2, r6
 800574c:	4649      	mov	r1, r9
 800574e:	4640      	mov	r0, r8
 8005750:	47d0      	blx	sl
 8005752:	3001      	adds	r0, #1
 8005754:	d09d      	beq.n	8005692 <_printf_i+0x15a>
 8005756:	3501      	adds	r5, #1
 8005758:	68e3      	ldr	r3, [r4, #12]
 800575a:	9903      	ldr	r1, [sp, #12]
 800575c:	1a5b      	subs	r3, r3, r1
 800575e:	42ab      	cmp	r3, r5
 8005760:	dcf2      	bgt.n	8005748 <_printf_i+0x210>
 8005762:	e7eb      	b.n	800573c <_printf_i+0x204>
 8005764:	2500      	movs	r5, #0
 8005766:	f104 0619 	add.w	r6, r4, #25
 800576a:	e7f5      	b.n	8005758 <_printf_i+0x220>
 800576c:	08005acd 	.word	0x08005acd
 8005770:	08005ade 	.word	0x08005ade

08005774 <__sflush_r>:
 8005774:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800577c:	0716      	lsls	r6, r2, #28
 800577e:	4605      	mov	r5, r0
 8005780:	460c      	mov	r4, r1
 8005782:	d454      	bmi.n	800582e <__sflush_r+0xba>
 8005784:	684b      	ldr	r3, [r1, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	dc02      	bgt.n	8005790 <__sflush_r+0x1c>
 800578a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800578c:	2b00      	cmp	r3, #0
 800578e:	dd48      	ble.n	8005822 <__sflush_r+0xae>
 8005790:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005792:	2e00      	cmp	r6, #0
 8005794:	d045      	beq.n	8005822 <__sflush_r+0xae>
 8005796:	2300      	movs	r3, #0
 8005798:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800579c:	682f      	ldr	r7, [r5, #0]
 800579e:	6a21      	ldr	r1, [r4, #32]
 80057a0:	602b      	str	r3, [r5, #0]
 80057a2:	d030      	beq.n	8005806 <__sflush_r+0x92>
 80057a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80057a6:	89a3      	ldrh	r3, [r4, #12]
 80057a8:	0759      	lsls	r1, r3, #29
 80057aa:	d505      	bpl.n	80057b8 <__sflush_r+0x44>
 80057ac:	6863      	ldr	r3, [r4, #4]
 80057ae:	1ad2      	subs	r2, r2, r3
 80057b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80057b2:	b10b      	cbz	r3, 80057b8 <__sflush_r+0x44>
 80057b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80057b6:	1ad2      	subs	r2, r2, r3
 80057b8:	2300      	movs	r3, #0
 80057ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80057bc:	6a21      	ldr	r1, [r4, #32]
 80057be:	4628      	mov	r0, r5
 80057c0:	47b0      	blx	r6
 80057c2:	1c43      	adds	r3, r0, #1
 80057c4:	89a3      	ldrh	r3, [r4, #12]
 80057c6:	d106      	bne.n	80057d6 <__sflush_r+0x62>
 80057c8:	6829      	ldr	r1, [r5, #0]
 80057ca:	291d      	cmp	r1, #29
 80057cc:	d82b      	bhi.n	8005826 <__sflush_r+0xb2>
 80057ce:	4a2a      	ldr	r2, [pc, #168]	@ (8005878 <__sflush_r+0x104>)
 80057d0:	40ca      	lsrs	r2, r1
 80057d2:	07d6      	lsls	r6, r2, #31
 80057d4:	d527      	bpl.n	8005826 <__sflush_r+0xb2>
 80057d6:	2200      	movs	r2, #0
 80057d8:	6062      	str	r2, [r4, #4]
 80057da:	04d9      	lsls	r1, r3, #19
 80057dc:	6922      	ldr	r2, [r4, #16]
 80057de:	6022      	str	r2, [r4, #0]
 80057e0:	d504      	bpl.n	80057ec <__sflush_r+0x78>
 80057e2:	1c42      	adds	r2, r0, #1
 80057e4:	d101      	bne.n	80057ea <__sflush_r+0x76>
 80057e6:	682b      	ldr	r3, [r5, #0]
 80057e8:	b903      	cbnz	r3, 80057ec <__sflush_r+0x78>
 80057ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80057ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057ee:	602f      	str	r7, [r5, #0]
 80057f0:	b1b9      	cbz	r1, 8005822 <__sflush_r+0xae>
 80057f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057f6:	4299      	cmp	r1, r3
 80057f8:	d002      	beq.n	8005800 <__sflush_r+0x8c>
 80057fa:	4628      	mov	r0, r5
 80057fc:	f7ff fbf4 	bl	8004fe8 <_free_r>
 8005800:	2300      	movs	r3, #0
 8005802:	6363      	str	r3, [r4, #52]	@ 0x34
 8005804:	e00d      	b.n	8005822 <__sflush_r+0xae>
 8005806:	2301      	movs	r3, #1
 8005808:	4628      	mov	r0, r5
 800580a:	47b0      	blx	r6
 800580c:	4602      	mov	r2, r0
 800580e:	1c50      	adds	r0, r2, #1
 8005810:	d1c9      	bne.n	80057a6 <__sflush_r+0x32>
 8005812:	682b      	ldr	r3, [r5, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0c6      	beq.n	80057a6 <__sflush_r+0x32>
 8005818:	2b1d      	cmp	r3, #29
 800581a:	d001      	beq.n	8005820 <__sflush_r+0xac>
 800581c:	2b16      	cmp	r3, #22
 800581e:	d11e      	bne.n	800585e <__sflush_r+0xea>
 8005820:	602f      	str	r7, [r5, #0]
 8005822:	2000      	movs	r0, #0
 8005824:	e022      	b.n	800586c <__sflush_r+0xf8>
 8005826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800582a:	b21b      	sxth	r3, r3
 800582c:	e01b      	b.n	8005866 <__sflush_r+0xf2>
 800582e:	690f      	ldr	r7, [r1, #16]
 8005830:	2f00      	cmp	r7, #0
 8005832:	d0f6      	beq.n	8005822 <__sflush_r+0xae>
 8005834:	0793      	lsls	r3, r2, #30
 8005836:	680e      	ldr	r6, [r1, #0]
 8005838:	bf08      	it	eq
 800583a:	694b      	ldreq	r3, [r1, #20]
 800583c:	600f      	str	r7, [r1, #0]
 800583e:	bf18      	it	ne
 8005840:	2300      	movne	r3, #0
 8005842:	eba6 0807 	sub.w	r8, r6, r7
 8005846:	608b      	str	r3, [r1, #8]
 8005848:	f1b8 0f00 	cmp.w	r8, #0
 800584c:	dde9      	ble.n	8005822 <__sflush_r+0xae>
 800584e:	6a21      	ldr	r1, [r4, #32]
 8005850:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005852:	4643      	mov	r3, r8
 8005854:	463a      	mov	r2, r7
 8005856:	4628      	mov	r0, r5
 8005858:	47b0      	blx	r6
 800585a:	2800      	cmp	r0, #0
 800585c:	dc08      	bgt.n	8005870 <__sflush_r+0xfc>
 800585e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005866:	81a3      	strh	r3, [r4, #12]
 8005868:	f04f 30ff 	mov.w	r0, #4294967295
 800586c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005870:	4407      	add	r7, r0
 8005872:	eba8 0800 	sub.w	r8, r8, r0
 8005876:	e7e7      	b.n	8005848 <__sflush_r+0xd4>
 8005878:	20400001 	.word	0x20400001

0800587c <_fflush_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	690b      	ldr	r3, [r1, #16]
 8005880:	4605      	mov	r5, r0
 8005882:	460c      	mov	r4, r1
 8005884:	b913      	cbnz	r3, 800588c <_fflush_r+0x10>
 8005886:	2500      	movs	r5, #0
 8005888:	4628      	mov	r0, r5
 800588a:	bd38      	pop	{r3, r4, r5, pc}
 800588c:	b118      	cbz	r0, 8005896 <_fflush_r+0x1a>
 800588e:	6a03      	ldr	r3, [r0, #32]
 8005890:	b90b      	cbnz	r3, 8005896 <_fflush_r+0x1a>
 8005892:	f7ff fa05 	bl	8004ca0 <__sinit>
 8005896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0f3      	beq.n	8005886 <_fflush_r+0xa>
 800589e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80058a0:	07d0      	lsls	r0, r2, #31
 80058a2:	d404      	bmi.n	80058ae <_fflush_r+0x32>
 80058a4:	0599      	lsls	r1, r3, #22
 80058a6:	d402      	bmi.n	80058ae <_fflush_r+0x32>
 80058a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058aa:	f7ff fb9a 	bl	8004fe2 <__retarget_lock_acquire_recursive>
 80058ae:	4628      	mov	r0, r5
 80058b0:	4621      	mov	r1, r4
 80058b2:	f7ff ff5f 	bl	8005774 <__sflush_r>
 80058b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058b8:	07da      	lsls	r2, r3, #31
 80058ba:	4605      	mov	r5, r0
 80058bc:	d4e4      	bmi.n	8005888 <_fflush_r+0xc>
 80058be:	89a3      	ldrh	r3, [r4, #12]
 80058c0:	059b      	lsls	r3, r3, #22
 80058c2:	d4e1      	bmi.n	8005888 <_fflush_r+0xc>
 80058c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058c6:	f7ff fb8d 	bl	8004fe4 <__retarget_lock_release_recursive>
 80058ca:	e7dd      	b.n	8005888 <_fflush_r+0xc>

080058cc <__swhatbuf_r>:
 80058cc:	b570      	push	{r4, r5, r6, lr}
 80058ce:	460c      	mov	r4, r1
 80058d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058d4:	2900      	cmp	r1, #0
 80058d6:	b096      	sub	sp, #88	@ 0x58
 80058d8:	4615      	mov	r5, r2
 80058da:	461e      	mov	r6, r3
 80058dc:	da0d      	bge.n	80058fa <__swhatbuf_r+0x2e>
 80058de:	89a3      	ldrh	r3, [r4, #12]
 80058e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80058e4:	f04f 0100 	mov.w	r1, #0
 80058e8:	bf14      	ite	ne
 80058ea:	2340      	movne	r3, #64	@ 0x40
 80058ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80058f0:	2000      	movs	r0, #0
 80058f2:	6031      	str	r1, [r6, #0]
 80058f4:	602b      	str	r3, [r5, #0]
 80058f6:	b016      	add	sp, #88	@ 0x58
 80058f8:	bd70      	pop	{r4, r5, r6, pc}
 80058fa:	466a      	mov	r2, sp
 80058fc:	f000 f87c 	bl	80059f8 <_fstat_r>
 8005900:	2800      	cmp	r0, #0
 8005902:	dbec      	blt.n	80058de <__swhatbuf_r+0x12>
 8005904:	9901      	ldr	r1, [sp, #4]
 8005906:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800590a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800590e:	4259      	negs	r1, r3
 8005910:	4159      	adcs	r1, r3
 8005912:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005916:	e7eb      	b.n	80058f0 <__swhatbuf_r+0x24>

08005918 <__smakebuf_r>:
 8005918:	898b      	ldrh	r3, [r1, #12]
 800591a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800591c:	079d      	lsls	r5, r3, #30
 800591e:	4606      	mov	r6, r0
 8005920:	460c      	mov	r4, r1
 8005922:	d507      	bpl.n	8005934 <__smakebuf_r+0x1c>
 8005924:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005928:	6023      	str	r3, [r4, #0]
 800592a:	6123      	str	r3, [r4, #16]
 800592c:	2301      	movs	r3, #1
 800592e:	6163      	str	r3, [r4, #20]
 8005930:	b003      	add	sp, #12
 8005932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005934:	ab01      	add	r3, sp, #4
 8005936:	466a      	mov	r2, sp
 8005938:	f7ff ffc8 	bl	80058cc <__swhatbuf_r>
 800593c:	9f00      	ldr	r7, [sp, #0]
 800593e:	4605      	mov	r5, r0
 8005940:	4639      	mov	r1, r7
 8005942:	4630      	mov	r0, r6
 8005944:	f7ff fbbc 	bl	80050c0 <_malloc_r>
 8005948:	b948      	cbnz	r0, 800595e <__smakebuf_r+0x46>
 800594a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800594e:	059a      	lsls	r2, r3, #22
 8005950:	d4ee      	bmi.n	8005930 <__smakebuf_r+0x18>
 8005952:	f023 0303 	bic.w	r3, r3, #3
 8005956:	f043 0302 	orr.w	r3, r3, #2
 800595a:	81a3      	strh	r3, [r4, #12]
 800595c:	e7e2      	b.n	8005924 <__smakebuf_r+0xc>
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	6020      	str	r0, [r4, #0]
 8005962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005966:	81a3      	strh	r3, [r4, #12]
 8005968:	9b01      	ldr	r3, [sp, #4]
 800596a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800596e:	b15b      	cbz	r3, 8005988 <__smakebuf_r+0x70>
 8005970:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005974:	4630      	mov	r0, r6
 8005976:	f000 f851 	bl	8005a1c <_isatty_r>
 800597a:	b128      	cbz	r0, 8005988 <__smakebuf_r+0x70>
 800597c:	89a3      	ldrh	r3, [r4, #12]
 800597e:	f023 0303 	bic.w	r3, r3, #3
 8005982:	f043 0301 	orr.w	r3, r3, #1
 8005986:	81a3      	strh	r3, [r4, #12]
 8005988:	89a3      	ldrh	r3, [r4, #12]
 800598a:	431d      	orrs	r5, r3
 800598c:	81a5      	strh	r5, [r4, #12]
 800598e:	e7cf      	b.n	8005930 <__smakebuf_r+0x18>

08005990 <_putc_r>:
 8005990:	b570      	push	{r4, r5, r6, lr}
 8005992:	460d      	mov	r5, r1
 8005994:	4614      	mov	r4, r2
 8005996:	4606      	mov	r6, r0
 8005998:	b118      	cbz	r0, 80059a2 <_putc_r+0x12>
 800599a:	6a03      	ldr	r3, [r0, #32]
 800599c:	b90b      	cbnz	r3, 80059a2 <_putc_r+0x12>
 800599e:	f7ff f97f 	bl	8004ca0 <__sinit>
 80059a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059a4:	07d8      	lsls	r0, r3, #31
 80059a6:	d405      	bmi.n	80059b4 <_putc_r+0x24>
 80059a8:	89a3      	ldrh	r3, [r4, #12]
 80059aa:	0599      	lsls	r1, r3, #22
 80059ac:	d402      	bmi.n	80059b4 <_putc_r+0x24>
 80059ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059b0:	f7ff fb17 	bl	8004fe2 <__retarget_lock_acquire_recursive>
 80059b4:	68a3      	ldr	r3, [r4, #8]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	60a3      	str	r3, [r4, #8]
 80059bc:	da05      	bge.n	80059ca <_putc_r+0x3a>
 80059be:	69a2      	ldr	r2, [r4, #24]
 80059c0:	4293      	cmp	r3, r2
 80059c2:	db12      	blt.n	80059ea <_putc_r+0x5a>
 80059c4:	b2eb      	uxtb	r3, r5
 80059c6:	2b0a      	cmp	r3, #10
 80059c8:	d00f      	beq.n	80059ea <_putc_r+0x5a>
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	6022      	str	r2, [r4, #0]
 80059d0:	701d      	strb	r5, [r3, #0]
 80059d2:	b2ed      	uxtb	r5, r5
 80059d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059d6:	07da      	lsls	r2, r3, #31
 80059d8:	d405      	bmi.n	80059e6 <_putc_r+0x56>
 80059da:	89a3      	ldrh	r3, [r4, #12]
 80059dc:	059b      	lsls	r3, r3, #22
 80059de:	d402      	bmi.n	80059e6 <_putc_r+0x56>
 80059e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059e2:	f7ff faff 	bl	8004fe4 <__retarget_lock_release_recursive>
 80059e6:	4628      	mov	r0, r5
 80059e8:	bd70      	pop	{r4, r5, r6, pc}
 80059ea:	4629      	mov	r1, r5
 80059ec:	4622      	mov	r2, r4
 80059ee:	4630      	mov	r0, r6
 80059f0:	f7ff f9e9 	bl	8004dc6 <__swbuf_r>
 80059f4:	4605      	mov	r5, r0
 80059f6:	e7ed      	b.n	80059d4 <_putc_r+0x44>

080059f8 <_fstat_r>:
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4d07      	ldr	r5, [pc, #28]	@ (8005a18 <_fstat_r+0x20>)
 80059fc:	2300      	movs	r3, #0
 80059fe:	4604      	mov	r4, r0
 8005a00:	4608      	mov	r0, r1
 8005a02:	4611      	mov	r1, r2
 8005a04:	602b      	str	r3, [r5, #0]
 8005a06:	f7fb fe78 	bl	80016fa <_fstat>
 8005a0a:	1c43      	adds	r3, r0, #1
 8005a0c:	d102      	bne.n	8005a14 <_fstat_r+0x1c>
 8005a0e:	682b      	ldr	r3, [r5, #0]
 8005a10:	b103      	cbz	r3, 8005a14 <_fstat_r+0x1c>
 8005a12:	6023      	str	r3, [r4, #0]
 8005a14:	bd38      	pop	{r3, r4, r5, pc}
 8005a16:	bf00      	nop
 8005a18:	20000440 	.word	0x20000440

08005a1c <_isatty_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	4d06      	ldr	r5, [pc, #24]	@ (8005a38 <_isatty_r+0x1c>)
 8005a20:	2300      	movs	r3, #0
 8005a22:	4604      	mov	r4, r0
 8005a24:	4608      	mov	r0, r1
 8005a26:	602b      	str	r3, [r5, #0]
 8005a28:	f7fb fe77 	bl	800171a <_isatty>
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	d102      	bne.n	8005a36 <_isatty_r+0x1a>
 8005a30:	682b      	ldr	r3, [r5, #0]
 8005a32:	b103      	cbz	r3, 8005a36 <_isatty_r+0x1a>
 8005a34:	6023      	str	r3, [r4, #0]
 8005a36:	bd38      	pop	{r3, r4, r5, pc}
 8005a38:	20000440 	.word	0x20000440

08005a3c <_sbrk_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	4d06      	ldr	r5, [pc, #24]	@ (8005a58 <_sbrk_r+0x1c>)
 8005a40:	2300      	movs	r3, #0
 8005a42:	4604      	mov	r4, r0
 8005a44:	4608      	mov	r0, r1
 8005a46:	602b      	str	r3, [r5, #0]
 8005a48:	f7fb fe80 	bl	800174c <_sbrk>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	d102      	bne.n	8005a56 <_sbrk_r+0x1a>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	b103      	cbz	r3, 8005a56 <_sbrk_r+0x1a>
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	bd38      	pop	{r3, r4, r5, pc}
 8005a58:	20000440 	.word	0x20000440

08005a5c <_init>:
 8005a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5e:	bf00      	nop
 8005a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a62:	bc08      	pop	{r3}
 8005a64:	469e      	mov	lr, r3
 8005a66:	4770      	bx	lr

08005a68 <_fini>:
 8005a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6a:	bf00      	nop
 8005a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6e:	bc08      	pop	{r3}
 8005a70:	469e      	mov	lr, r3
 8005a72:	4770      	bx	lr
